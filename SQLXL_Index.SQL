-- VERSION 2023.11.07

/******************************************************************************************************************************************\
Copyright (C) 2023 Practice Computing Mangement Inc.
All rights reserved.

MIT License, http://www.opensource.org/licenses/mit-license.php
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
(the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Credit to Brent Ozar Unlimited for the BI### Check IDs included in the Diagnostics. Source for these is found at
https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md

\******************************************************************************************************************************************/

/*** LOCAL TESTING ***
EXEC tempdb.dbo.SQLXL_Index
EXEC tempdb.dbo.SQLXL_Index @database_name = N'DW_Master'
EXEC tempdb.dbo.SQLXL_Index @database_name = N'WideWorldImporters'
GO 100
--*/

RAISERROR ('Creating procedure tempdb.dbo.SQLXL_Index ...',0,0) WITH NOWAIT;

/******************************************************************************************************************************************/
-- Calling Session Environment settings
/******************************************************************************************************************************************/
SET ANSI_NULL_DFLT_ON,ANSI_NULLS,ANSI_PADDING,ARITHABORT,CONCAT_NULL_YIELDS_NULL,CURSOR_CLOSE_ON_COMMIT,NOCOUNT,QUOTED_IDENTIFIER ON;
SET ANSI_WARNINGS,ARITHIGNORE,FMTONLY,FORCEPLAN,IMPLICIT_TRANSACTIONS,NOEXEC,NUMERIC_ROUNDABORT,XACT_ABORT OFF;
SET STATISTICS IO,PROFILE,TIME,XML OFF;
SET DATEFORMAT                  YMD;
SET DEADLOCK_PRIORITY           -10;  -- Lowest priority
SET LOCK_TIMEOUT              10000;  -- in milliseconds
SET QUERY_GOVERNOR_COST_LIMIT     0;  -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute.
SET TEXTSIZE             2147483647;  -- Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

/******************************************************************************************************************************************\
Change to tempdb NOTE: tempdb must be lower case if server installed with CASE SENSITIVE collation
\******************************************************************************************************************************************/
USE tempdb;

/******************************************************************************************************************************************/
-- Eliminate all previous tempdb source data stores (_SYS_, _CDC_) objects in case of structure change with latest version
/******************************************************************************************************************************************/
DECLARE @sql       NVARCHAR(MAX)
       ,@run_value NVARCHAR(4000)

WHILE 1 = 1
BEGIN
   SELECT TOP (1)
          @run_value = QUOTENAME(s.name)+N'.'+QUOTENAME(t.name)
         ,@sql = N'TRUNCATE TABLE [tempdb].'+QUOTENAME(s.name)+N'.'+QUOTENAME(t.name)+N';'
                +NCHAR(13)+NCHAR(10)
                -- Drops MISSING index recommendations if previously made
                +N'ALTER index ALL ON [tempdb].'+QUOTENAME(s.name)+N'.'+QUOTENAME(t.name) +N' REBUILD;'
                +NCHAR(13)+NCHAR(10)
                +N'DROP TABLE [tempdb].'+QUOTENAME(s.name)+N'.'+QUOTENAME(t.name)+N';'
     FROM tempdb.sys.tables  AS t WITH (READUNCOMMITTED)
     JOIN tempdb.sys.objects AS o WITH (READUNCOMMITTED)
       ON t.object_id  = o.object_id
     JOIN tempdb.sys.schemas AS s WITH (READUNCOMMITTED)
       ON o.schema_id  = s.schema_id
    WHERE t.name LIKE N'SQLXL_Index_%'
      AND s.name    = N'dbo'
    ORDER BY t.name;

   IF @@rowcount = 0 BREAK

   EXEC (@sql);

   IF @@error > 0
   BEGIN
      SET @run_value = N'TRUNCATE/ALTER/DROP FAIL on ' + @run_value
      RAISERROR (@run_value,0,0) WITH NOWAIT;
   END
END

/******************************************************************************************************************************************/
-- Create the proc dbo.SQLXL_Index
/******************************************************************************************************************************************/
IF OBJECT_ID('tempdb.dbo.SQLXL_Index') IS NULL EXEC ('CREATE PROCEDURE dbo.SQLXL_Index AS RETURN 0;');
GO

 ALTER PROCEDURE dbo.SQLXL_Index
      (@database_name                    SYSNAME = NULL
      ,@cover_foreign_keys               TINYINT = 2 -- continue to cover all Foreign Key Constraints TRUSTED, ENABLED, and REPLICATED
                                                     -- Includes creating new indexes based on MISSING index recommendations
      ,@create_Nonclustered_columnstores TINYINT = 1 -- create Nonclustered columnstores on tables as below
      -----------------------------------
      ,@Prio_wait_time                   SMALLINT = 100
      ,@Prio_wait_count                  SMALLINT =  50
      ,@Prio_locks                       SMALLINT =  20
      ,@Prio_lock_promotions             SMALLINT =  60
      ,@Prio_lock_promotion_fails        SMALLINT =  80
      ,@Prio_page_splits                 SMALLINT =  30
      ,@Prio_page_merges                 SMALLINT =  30
      ,@Prio_OPS_forwarded_fetches       SMALLINT =  30
      ,@Prio_missing_indexes             SMALLINT =  80
      ,@Prio_OPS_writes                  SMALLINT =  30
      ,@Prio_USG_writes                  SMALLINT =  40
      ,@Prio_buffer_cache_used           SMALLINT =  80
      ,@Prio_OPS_read_write_ratio        SMALLINT =  15 -- Note: starts with 4X as the "zero" value and works backwards from there
      ,@Prio_USG_read_write_ratio        SMALLINT =  15 -- Note: starts with 4X as the "zero" value and works backwards from there
      ,@Prio_reads                       SMALLINT =  10
      ,@Prio_scans                       SMALLINT =  40
      ,@Prio_lookups                     SMALLINT =  60
      ,@Prio_LOB                         SMALLINT =  80
      )
/******************************************************************************************************************************************\
Parameters:
@database_name:
NULL = (DEFAULT) All user databases
<Database Name> = just the single database

@cover_foreign_keys:
 0 = no need to continue to cover Foreign Key Constraints, do not create new indexes based on MISSING index recommendations
 1 = continue to cover keys that are TRUSTED, ENABLED, and REPLICATED & are DELETE or UPDATE referential action enabled
     Includes creating new indexes based on MISSING index recommendations
 2 = continue to cover all Foreign Key Constraints that are TRUSTED, ENABLED, and REPLICATED
     Includes creating new indexes based on MISSING index recommendations
 3 = continue to cover all Foreign Key Constraints regardless of status
     Includes creating new indexes based on MISSING index recommendations

@create_Nonclustered_columnstores:
 0 = do not create nonclustered columnstores to replace existing and MISSING indexes
 1 = create Nonclustered columnstores on tables with a combination of
       - several indexes with low READ usage (< 2% of all reads) or low read to write ratio (< 4 - for writes to lock, memory, storage, log)
       - several missing indexes with low READ usage (< 2% of all existing table reads)
     and drop existing low READ usage/non-FKC covering indexes

DEVELOPER NOTE: Procedure scripts can't reference views that haven't been created yet,
                so no views will be created on tempdb.dbo.SQLXL_Index_Compilation for code simplification
\******************************************************************************************************************************************/
AS

IF TRY_CAST(SERVERPROPERTY('ProductMajorVersion') AS INT) < 11
BEGIN
   RAISERROR ('************************************************************************',0,0) WITH NOWAIT;
   RAISERROR ('*     Oops! SQLXL_IDX requires SQL Server Version 2012 or higher       *',0,0) WITH NOWAIT;
   RAISERROR ('* This uses the SQL "IIF" function which doesn''t exist until SQL 2012  *',0,0) WITH NOWAIT; -- Extra space for double quote
   RAISERROR ('************************************************************************',0,0) WITH NOWAIT;
   RAISERROR ('',0,0) WITH NOWAIT;
   RAISERROR ('',0,0) WITH NOWAIT;
   RAISERROR ('',0,0) WITH NOWAIT;

   RETURN 0;
END

/******************************************************************************************************************************************/
-- Session Environment settings - Inside procedure
/******************************************************************************************************************************************/
SET ANSI_NULLS ON
SET ANSI_NULL_DFLT_ON,ANSI_NULLS,ANSI_PADDING,ARITHABORT,CONCAT_NULL_YIELDS_NULL,CURSOR_CLOSE_ON_COMMIT,NOCOUNT ON;
SET ANSI_WARNINGS,ARITHIGNORE,IMPLICIT_TRANSACTIONS,NOEXEC,NUMERIC_ROUNDABORT,XACT_ABORT OFF;
SET STATISTICS IO,PROFILE,TIME,XML OFF;
SET DATEFORMAT                  YMD;
SET DEADLOCK_PRIORITY           -10;  -- Lowest priority
SET LOCK_TIMEOUT              30000;  -- in milliseconds
SET TEXTSIZE             2147483647;  -- Use 32767 on export to Excel - cell maximum
SET QUERY_GOVERNOR_COST_LIMIT     0;  -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute.
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

/******************************************************************************************************************************************/
-- Session variables
/******************************************************************************************************************************************/
DECLARE @collation        SYSNAME  = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
       ,@collection_DTTM  DATETIME = GETDATE()
       ,@version_major    SMALLINT = CONVERT(SMALLINT,PARSENAME(CONVERT(VARCHAR(20),SERVERPROPERTY('ProductVersion')),4))
       ,@version_minor    SMALLINT = CONVERT(SMALLINT,PARSENAME(CONVERT(VARCHAR(20),SERVERPROPERTY('ProductVersion')),3))
       ,@version_build    SMALLINT = CONVERT(SMALLINT,PARSENAME(CONVERT(VARCHAR(20),SERVERPROPERTY('ProductVersion')),2))
       ,@version_revision SMALLINT = CONVERT(SMALLINT,PARSENAME(CONVERT(VARCHAR(20),SERVERPROPERTY('ProductVersion')),1))
       ----------------------------
       ,@database_id      INT      = 0
       ,@name             NVARCHAR(MAX)
       ,@sql              NVARCHAR(MAX)
       ,@dttm             DATETIME = GETDATE()
       ,@i                INT      = 1            -- database cursor loop counter, starts at 1
       ,@run_value        NVARCHAR(4000)
       -----------------------------
       ,@ssms             TINYINT = CASE WHEN (SELECT 1
                                                 FROM sys.dm_exec_sessions
                                                WHERE session_id = @@spid
                                                  AND (   program_name LIKE N'Microsoft SQL Server Management Studio%'
                                                       OR program_name = N'SQLCMD'
                                                      )
                                              ) = 1
                                         THEN 1
                                         ELSE 0
                                    END
       ,@debug            VARCHAR(1000)
       ,@debug_DTTM       DATETIME      = GETDATE()

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   RAISERROR(N'Execution',0,0) WITH NOWAIT;
   RAISERROR(N'MM:SS:hhh SQLXL Index Job Step',0,0) WITH NOWAIT;
   RAISERROR(N'--------- -------------------------------------------------------------------------------------',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Start SQLXL_Index data collection ------------------------------------',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Eliminate all previous SOURCE (SYS) objects, truncate & rebuild to blow out any missing index recommendations
/******************************************************************************************************************************************/

/*** LOCAL TESTING ***
DECLARE @sql       NVARCHAR(MAX)
       ,@run_value NVARCHAR(4000)
       ,@ssms BIT = 1
--*/

WHILE 1 = 1
BEGIN
   SELECT TOP (1)
          @run_value = QUOTENAME(s.name)+N'.'+QUOTENAME(t.name)
         ,@sql = N'TRUNCATE TABLE [tempdb].'+QUOTENAME(s.name)+N'.'+QUOTENAME(t.name)+N';'
                +NCHAR(13)+NCHAR(10)
                -- Drops MISSING index recommendations
                +N'ALTER index ALL ON [tempdb].'+QUOTENAME(s.name)+N'.'+QUOTENAME(t.name) +N' REBUILD;'
                +NCHAR(13)+NCHAR(10)
                +N'DROP TABLE [tempdb].'+QUOTENAME(s.name)+N'.'+QUOTENAME(t.name)+N';'
     FROM tempdb.sys.tables  AS t WITH (READUNCOMMITTED)
     JOIN tempdb.sys.objects AS o WITH (READUNCOMMITTED)
       ON t.object_id  = o.object_id
     JOIN tempdb.sys.schemas AS s WITH (READUNCOMMITTED)
       ON o.schema_id  = s.schema_id
    WHERE t.name LIKE N'SQLXL_Index_%'
      AND s.name    = N'dbo'
    ORDER BY t.name;

   IF @@rowcount = 0 BREAK

   EXEC (@sql);

   IF @@error > 0
   BEGIN
      SET @run_value = N'TRUNCATE/ALTER/DROP FAIL on ' + @run_value
      RAISERROR (@run_value,0,0) WITH NOWAIT;
   END
END

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Dropped existing tempdb SQLXL_IDX data collection tables if found '
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- What platforms are we running on?
/******************************************************************************************************************************************/
SELECT collation        = @collation
      ,collection_DTTM  = @collection_DTTM
      ,version_major    = @version_major
      ,version_minor    = @version_minor
      ,version_build    = @version_build
      ,version_revision = @version_revision
      ,database_name    = @database_name
      ,edition          = (SELECT SERVERPROPERTY(N'Edition'))
  INTO tempdb.dbo.SQLXL_Index_sys_Startup_Parameters;

/******************************************************************************************************************************************/
-- Create table to hold Instance/Server configuration info from sys.sp_configure and SERVERPROPERTY
/******************************************************************************************************************************************/
SELECT TOP (0)
       source           = CAST(NULL AS SYSNAME)        COLLATE DATABASE_DEFAULT
      ,name             = CAST(NULL AS SYSNAME)        COLLATE DATABASE_DEFAULT
      ,minimum_session  = CAST(NULL AS NVARCHAR(4000)) COLLATE DATABASE_DEFAULT
      ,maximum_global   = CAST(NULL AS NVARCHAR(4000)) COLLATE DATABASE_DEFAULT
      ,config_value     = CAST(NULL AS NVARCHAR(4000)) COLLATE DATABASE_DEFAULT
      ,run_value        = CAST(NULL AS NVARCHAR(4000)) COLLATE DATABASE_DEFAULT
  INTO tempdb.dbo.SQLXL_Index_sys_instance;

/******************************************************************************************************************************************/
-- Collect "advanced options" settings. Enable & then disable if necessary.
/******************************************************************************************************************************************/
INSERT
  INTO tempdb.dbo.SQLXL_Index_sys_instance
      (name
      ,minimum_session
      ,maximum_global
      ,config_value
      ,run_value
      )
  EXEC sys.sp_configure N'show advanced options';

SELECT TOP (1)
       @run_value = run_value
  FROM tempdb.dbo.SQLXL_Index_sys_instance;

TRUNCATE TABLE tempdb.dbo.SQLXL_Index_sys_instance; -- clean up the single record inserted above

-----------------------------------------------------------------------------------------------------------
-- Change advanced options setting if not enabled
-----------------------------------------------------------------------------------------------------------
IF @run_value = 0
BEGIN
   EXEC master.dbo.sp_configure 'show advanced options',N'1';
   RECONFIGURE;
END

-----------------------------------------------------------------------------------------------------------
-- Collect all configuration settings
-----------------------------------------------------------------------------------------------------------
INSERT
  INTO tempdb.dbo.SQLXL_Index_sys_instance
      (name
      ,minimum_session
      ,maximum_global
      ,config_value,run_value
      )
  EXEC sys.sp_configure;

UPDATE tempdb.dbo.SQLXL_Index_sys_instance
   SET source = N'sp_configure'
 WHERE source IS NULL;

-----------------------------------------------------------------------------------------------------------
-- Reset advanced options setting if previously unenabled
-----------------------------------------------------------------------------------------------------------
IF @run_value = 0
BEGIN
   EXEC master.dbo.sp_configure 'show advanced options',@run_value;
   RECONFIGURE;
END

/******************************************************************************************************************************************/
-- Collect Server trace flag settings
/******************************************************************************************************************************************/
INSERT
  INTO tempdb.dbo.SQLXL_Index_sys_instance
      (name
      ,run_value
      ,maximum_global
      ,minimum_session
      )
  EXEC ('DBCC TRACESTATUS(-1) WITH NO_INFOMSGS');

UPDATE tempdb.dbo.SQLXL_Index_sys_instance
   SET source = N'TRACESTATUS'
 WHERE source IS NULL;

/******************************************************************************************************************************************/
-- Collect SERVERPROPERTIES settings
/******************************************************************************************************************************************/
INSERT
  INTO tempdb.dbo.SQLXL_Index_sys_instance
      (source
      ,name
      ,run_value
      )
SELECT e.source
      ,e.name
      ,CAST(e.run_value  AS NVARCHAR(4000))
  FROM (
SELECT TOP (0)
       source    = CAST(NULL AS SYSNAME)
      ,name      = CAST(NULL AS SYSNAME)
      ,run_value = CAST(NULL AS SQL_VARIANT
) UNION ALL
SELECT N'SERVERPROPERTY',N'BuildClrVersion'                   ,SERVERPROPERTY(N'BuildClrVersion')                   UNION ALL
SELECT N'SERVERPROPERTY',N'Collation'                         ,SERVERPROPERTY(N'Collation')                         UNION ALL
SELECT N'SERVERPROPERTY',N'CollationID'                       ,SERVERPROPERTY(N'CollationID')                       UNION ALL
SELECT N'SERVERPROPERTY',N'ComparisonStyle'                   ,SERVERPROPERTY(N'ComparisonStyle')                   UNION ALL
SELECT N'SERVERPROPERTY',N'ComputerNamePhysicalNetBIOS'       ,SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS')       UNION ALL
SELECT N'SERVERPROPERTY',N'Edition'                           ,SERVERPROPERTY(N'Edition')                           UNION ALL
SELECT N'SERVERPROPERTY',N'EditionID'                         ,SERVERPROPERTY(N'EditionID')                         UNION ALL
SELECT N'SERVERPROPERTY',N'EngineEdition'                     ,SERVERPROPERTY(N'EngineEdition')                     UNION ALL
SELECT N'SERVERPROPERTY',N'FilestreamConfiguredLevel'         ,SERVERPROPERTY(N'FilestreamConfiguredLevel')         UNION ALL
SELECT N'SERVERPROPERTY',N'FilestreamEffectiveLevel'          ,SERVERPROPERTY(N'FilestreamEffectiveLevel')          UNION ALL
SELECT N'SERVERPROPERTY',N'FilestreamShareName'               ,SERVERPROPERTY(N'FilestreamShareName')               UNION ALL
SELECT N'SERVERPROPERTY',N'HadrManagerStatus'                 ,SERVERPROPERTY(N'HadrManagerStatus')                 UNION ALL
SELECT N'SERVERPROPERTY',N'InstanceDefaultBackupPath'         ,SERVERPROPERTY(N'InstanceDefaultBackupPath')         UNION ALL
SELECT N'SERVERPROPERTY',N'InstanceDefaultDataPath'           ,SERVERPROPERTY(N'InstanceDefaultDataPath')           UNION ALL
SELECT N'SERVERPROPERTY',N'InstanceDefaultLogPath'            ,SERVERPROPERTY(N'InstanceDefaultLogPath')            UNION ALL
SELECT N'SERVERPROPERTY',N'InstanceName'                      ,SERVERPROPERTY(N'InstanceName')                      UNION ALL
SELECT N'SERVERPROPERTY',N'IsAdvancedAnalyticsInstalled'      ,SERVERPROPERTY(N'IsAdvancedAnalyticsInstalled')      UNION ALL
SELECT N'SERVERPROPERTY',N'IsBigDataCluster'                  ,SERVERPROPERTY(N'IsBigDataCluster')                  UNION ALL
SELECT N'SERVERPROPERTY',N'IsClustered'                       ,SERVERPROPERTY(N'IsClustered')                       UNION ALL
SELECT N'SERVERPROPERTY',N'IsExternalAuthenticationOnly'      ,SERVERPROPERTY(N'IsExternalAuthenticationOnly')      UNION ALL
SELECT N'SERVERPROPERTY',N'IsExternalGovernanceEnabled'       ,SERVERPROPERTY('IsExternalGovernanceEnabled')        UNION ALL
SELECT N'SERVERPROPERTY',N'IsFullTextInstalled'               ,SERVERPROPERTY(N'IsFullTextInstalled')               UNION ALL
SELECT N'SERVERPROPERTY',N'IsHadrEnabled'                     ,SERVERPROPERTY(N'IsHadrEnabled')                     UNION ALL
SELECT N'SERVERPROPERTY',N'IsIntegratedSecurityOnly'          ,SERVERPROPERTY(N'IsIntegratedSecurityOnly')          UNION ALL
SELECT N'SERVERPROPERTY',N'IsLocalDB'                         ,SERVERPROPERTY(N'IsLocalDB')                         UNION ALL
SELECT N'SERVERPROPERTY',N'IsPolyBaseInstalled'               ,SERVERPROPERTY(N'IsPolyBaseInstalled')               UNION ALL
SELECT N'SERVERPROPERTY',N'IsServerSuspendedForSnapshotBackup',SERVERPROPERTY('IsServerSuspendedForSnapshotBackup') UNION ALL
SELECT N'SERVERPROPERTY',N'IsSingleUser'                      ,SERVERPROPERTY(N'IsSingleUser')                      UNION ALL
SELECT N'SERVERPROPERTY',N'IstempdbMetadataMemoryOptimized'   ,SERVERPROPERTY(N'IstempdbMetadataMemoryOptimized')   UNION ALL
SELECT N'SERVERPROPERTY',N'IsXTPSupported'                    ,SERVERPROPERTY(N'IsXTPSupported')                    UNION ALL
SELECT N'SERVERPROPERTY',N'LCID'                              ,SERVERPROPERTY(N'LCID')                              UNION ALL
SELECT N'SERVERPROPERTY',N'LicenseType'                       ,SERVERPROPERTY(N'LicenseType')                       UNION ALL
SELECT N'SERVERPROPERTY',N'MachineName'                       ,SERVERPROPERTY(N'MachineName')                       UNION ALL
SELECT N'SERVERPROPERTY',N'NumLicenses'                       ,SERVERPROPERTY(N'NumLicenses')                       UNION ALL
SELECT N'SERVERPROPERTY',N'PathSeparator'                     ,SERVERPROPERTY(N'PathSeparator')                     UNION ALL
SELECT N'SERVERPROPERTY',N'ProcessID'                         ,SERVERPROPERTY(N'ProcessID')                         UNION ALL
SELECT N'SERVERPROPERTY',N'ProductBuild'                      ,SERVERPROPERTY(N'ProductBuild')                      UNION ALL
SELECT N'SERVERPROPERTY',N'ProductBuildType'                  ,SERVERPROPERTY(N'ProductBuildType')                  UNION ALL
SELECT N'SERVERPROPERTY',N'ProductLevel'                      ,SERVERPROPERTY(N'ProductLevel')                      UNION ALL
SELECT N'SERVERPROPERTY',N'ProductMajorVersion'               ,SERVERPROPERTY(N'ProductMajorVersion')               UNION ALL
SELECT N'SERVERPROPERTY',N'ProductMinorVersion'               ,SERVERPROPERTY(N'ProductMinorVersion')               UNION ALL
SELECT N'SERVERPROPERTY',N'ProductUpdateLevel'                ,SERVERPROPERTY(N'ProductUpdateLevel')                UNION ALL
SELECT N'SERVERPROPERTY',N'ProductUpdateReference'            ,SERVERPROPERTY(N'ProductUpdateReference')            UNION ALL
SELECT N'SERVERPROPERTY',N'ProductVersion'                    ,SERVERPROPERTY(N'ProductVersion')                    UNION ALL
SELECT N'SERVERPROPERTY',N'ResourceLastUpdateDateTime'        ,SERVERPROPERTY(N'ResourceLastUpdateDateTime')        UNION ALL
SELECT N'SERVERPROPERTY',N'ResourceVersion'                   ,SERVERPROPERTY(N'ResourceVersion')                   UNION ALL
SELECT N'SERVERPROPERTY',N'ServerName'                        ,SERVERPROPERTY(N'ServerName')                        UNION ALL
SELECT N'SERVERPROPERTY',N'SqlCharSet'                        ,SERVERPROPERTY(N'SqlCharSet')                        UNION ALL
SELECT N'SERVERPROPERTY',N'SqlCharSetName'                    ,SERVERPROPERTY(N'SqlCharSetName')                    UNION ALL
SELECT N'SERVERPROPERTY',N'SqlSortOrder'                      ,SERVERPROPERTY(N'SqlSortOrder')                      UNION ALL
SELECT N'SERVERPROPERTY',N'SqlSortOrderName'                  ,SERVERPROPERTY(N'SqlSortOrderName')                  UNION ALL
SELECT N'SERVERPROPERTY',N'SuspendedDatabaseCount'            ,SERVERPROPERTY('SuspendedDatabaseCount')
) e;

/******************************************************************************************************************************************/
-- Collect @@Functions settings
/******************************************************************************************************************************************/
INSERT
  INTO tempdb.dbo.SQLXL_Index_sys_instance
      (source
      ,name
      ,run_value
      )
SELECT N'Configuration' ,N'@@DATEFIRST'                    ,CONVERT(NVARCHAR(4000),@@DateFirst           ) UNION ALL
SELECT N'Configuration' ,N'@@DBTS'                         ,CONVERT(NVARCHAR(4000),@@Dbts                ) UNION ALL
SELECT N'Configuration' ,N'@@LANGID'                       ,CONVERT(NVARCHAR(4000),@@LangId              ) UNION ALL
SELECT N'Configuration' ,N'@@LANGUAGE'                     ,CONVERT(NVARCHAR(4000),@@Language            ) UNION ALL
SELECT N'Configuration' ,N'@@LOCK_TIMEOUT'                 ,CONVERT(NVARCHAR(4000),@@Lock_Timeout        ) UNION ALL
SELECT N'Configuration' ,N'@@MAX_CONNECTIONS'              ,CONVERT(NVARCHAR(4000),@@Max_Connections     ) UNION ALL
SELECT N'Configuration' ,N'@@MAX_PRECISION'                ,CONVERT(NVARCHAR(4000),@@Max_Precision       ) UNION ALL
SELECT N'Configuration' ,N'@@NESTLEVEL'                    ,CONVERT(NVARCHAR(4000),@@NestLevel           ) UNION ALL
SELECT N'Configuration' ,N'@@OPTIONS'                      ,CONVERT(NVARCHAR(4000),@@Options             ) UNION ALL
SELECT N'Configuration' ,N'@@REMSERVER'                    ,CONVERT(NVARCHAR(4000),@@RemServer           ) UNION ALL
SELECT N'Configuration' ,N'@@SERVERNAME'                   ,CONVERT(NVARCHAR(4000),@@ServerName          ) UNION ALL
SELECT N'Configuration' ,N'@@SERVICENAME'                  ,CONVERT(NVARCHAR(4000),@@ServiceName         ) UNION ALL
SELECT N'Configuration' ,N'@@SPID'                         ,CONVERT(NVARCHAR(4000),@@Spid                ) UNION ALL
SELECT N'Configuration' ,N'@@TEXTSIZE'                     ,CONVERT(NVARCHAR(4000),@@TextSize            ) UNION ALL
SELECT N'Configuration' ,N'@@VERSION'                      ,CONVERT(NVARCHAR(4000),@@Version             );

/******************************************************************************************************************************************/
-- Collect System Functions
/******************************************************************************************************************************************/
INSERT
  INTO tempdb.dbo.SQLXL_Index_sys_instance
      (source
      ,name
      ,run_value
      )
SELECT N'System'        ,N'HOST_ID'                        ,CONVERT(NVARCHAR(4000),HOST_ID()             ) UNION ALL
SELECT N'System'        ,N'HOST_NAME'                      ,CONVERT(NVARCHAR(4000),HOST_NAME()           ) UNION ALL
SELECT N'System'        ,N'PUBLISHINGSERVERNAME'           ,CONVERT(NVARCHAR(4000),PUBLISHINGSERVERNAME());

IF @version_major >= 16
BEGIN
   SET @sql = N'INSERT
  INTO tempdb.dbo.SQLXL_Index_sys_instance
      (source
      ,name
      ,run_value
      )
SELECT N''System''        ,N''CURRENT_TIMEZONE''               ,CONVERT(NVARCHAR(4000),CURRENT_TIMEZONE()    )'

   EXECUTE sp_executesql @sql; IF @@error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

END;

/******************************************************************************************************************************************/
-- Collect Instance/Server configuration from sys.dm_os_sys_info
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
/******************************************************************************************************************************************/
;WITH newcol AS (
SELECT -- SQL 2008 & 2008R2 ONLY --------------------------------
       physical_memory_in_bytes    = CONVERT(BIGINT        ,NULL) -- SQL 2008 & 2008R2 ONLY
      ,virtual_memory_in_bytes     = CONVERT(BIGINT        ,NULL) -- SQL 2008 & 2008R2 ONLY
      ,bpool_visible               = CONVERT(BIGINT        ,NULL) -- SQL 2008 & 2008R2 ONLY
      ,bpool_committed             = CONVERT(BIGINT        ,NULL) -- SQL 2008 & 2008R2 ONLY
      ,bpool_commit_target         = CONVERT(BIGINT        ,NULL) -- SQL 2008 & 2008R2 ONLY
       -- SQL 2012+ ---------------------------------------------
      ,committed_kb                = CONVERT(BIGINT        ,NULL) -- SQL 2012+
      ,virtual_memory_kb           = CONVERT(BIGINT        ,NULL) -- SQL 2012+
      ,committed_target_kb         = CONVERT(BIGINT        ,NULL) -- SQL 2012+
      ,physical_memory_kb          = CONVERT(BIGINT        ,NULL) -- SQL 2012+
      ,visible_target_kb           = CONVERT(BIGINT        ,NULL) -- SQL 2012+
      ,sql_memory_model            = CONVERT(BIGINT        ,NULL) -- SQL 2012+
      ,sql_memory_model_desc       = CONVERT(SYSNAME       ,NULL) -- SQL 2012+
       -- SQL 2014+ ---------------------------------------------
      ,socket_count                = CONVERT(BIGINT        ,NULL) -- SQL 2014+
      ,cores_per_socket            = CONVERT(BIGINT        ,NULL) -- SQL 2014+
      ,numa_node_count             = CONVERT(BIGINT        ,NULL) -- SQL 2014+
       -- SQL 2016+ ---------------------------------------------
      ,softnuma_configuration      = CONVERT(BIGINT        ,NULL) -- SQL 2016+
      ,softnuma_configuration_desc = CONVERT(SYSNAME       ,NULL) -- SQL 2016+
       -- SQL 2017+ ---------------------------------------------
      ,process_physical_affinity   = CONVERT(NVARCHAR(3072),NULL) -- SQL 2017+
      ,container_type              = CONVERT(BIGINT        ,NULL) -- SQL 2017+
      ,container_type_desc         = CONVERT(SYSNAME       ,NULL) -- SQL 2017+
      ,pdw_node_id                 = CONVERT(BIGINT        ,NULL) -- SQL 2017+
)
INSERT
  INTO tempdb.dbo.SQLXL_Index_sys_instance
      (source
      ,name
      ,run_value
      )
SELECT qry.source
      ,qry.name
      ,run_value = CAST(qry.run_value AS NVARCHAR(4000))
  FROM newcol
 CROSS APPLY (
----------------------------------------------------------
SELECT TOP (0) -- make sure each column has the correct data type
       source    = CAST(NULL AS SYSNAME)
      ,name      = CAST(NULL AS SYSNAME)
      ,run_value = CAST(NULL AS SQL_VARIANT)
UNION ALL
SELECT N'dm_os_sys_info',N'cpu_ticks'                      ,(SELECT cpu_ticks                      FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'ms_ticks'                       ,(SELECT ms_ticks                       FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'cpu_count'                      ,(SELECT cpu_count                      FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'hyperthread_ratio'              ,(SELECT hyperthread_ratio              FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'stack_size_in_bytes'            ,(SELECT stack_size_in_bytes            FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'os_quantum'                     ,(SELECT os_quantum                     FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'os_error_mode'                  ,(SELECT os_error_mode                  FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'os_priority_class'              ,(SELECT os_priority_class              FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'max_workers_count'              ,(SELECT max_workers_count              FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'scheduler_count'                ,(SELECT scheduler_count                FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'scheduler_total_count'          ,(SELECT scheduler_total_count          FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'deadlock_monitor_serial_number' ,(SELECT deadlock_monitor_serial_number FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'sqlserver_start_time_ms_ticks'  ,(SELECT sqlserver_start_time_ms_ticks  FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'affinity_type'                  ,(SELECT affinity_type                  FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'affinity_type_desc'             ,(SELECT affinity_type_desc             FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'process_kernel_time_ms'         ,(SELECT process_kernel_time_ms         FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'process_user_time_ms'           ,(SELECT process_user_time_ms           FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'time_source'                    ,(SELECT time_source                    FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'time_source_desc'               ,(SELECT time_source_desc               FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_machine_type'           ,(SELECT virtual_machine_type           FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_machine_type_desc'      ,(SELECT virtual_machine_type_desc      FROM sys.dm_os_sys_info) UNION ALL
-----------------------------------------------------------
SELECT N'dm_os_sys_info',N'physical_memory_in_bytes'       ,(SELECT physical_memory_in_bytes       FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_memory_in_bytes'        ,(SELECT virtual_memory_in_bytes        FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'bpool_visible'                  ,(SELECT bpool_visible                  FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'bpool_committed'                ,(SELECT bpool_committed                FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'bpool_commit_target'            ,(SELECT bpool_commit_target            FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'committed_kb'                   ,(SELECT committed_kb                   FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_memory_kb'              ,(SELECT virtual_memory_kb              FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'committed_target_kb'            ,(SELECT committed_target_kb            FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'physical_memory_kb'             ,(SELECT physical_memory_kb             FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'visible_target_kb'              ,(SELECT visible_target_kb              FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'sql_memory_model'               ,(SELECT sql_memory_model               FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'sql_memory_model_desc'          ,(SELECT sql_memory_model_desc          FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'socket_count'                   ,(SELECT socket_count                   FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'cores_per_socket'               ,(SELECT cores_per_socket               FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'numa_node_count'                ,(SELECT numa_node_count                FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'softnuma_configuration'         ,(SELECT softnuma_configuration         FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'softnuma_configuration_desc'    ,(SELECT softnuma_configuration_desc    FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'process_physical_affinity'      ,(SELECT process_physical_affinity      FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'container_type'                 ,(SELECT container_type                 FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'container_type_desc'            ,(SELECT container_type_desc            FROM sys.dm_os_sys_info) UNION ALL
SELECT N'dm_os_sys_info',N'pdw_node_id'                    ,(SELECT pdw_node_id                    FROM sys.dm_os_sys_info) UNION ALL
-----------------------------------------------------------
SELECT N'dm_os_sys_info',N'sqlserver_start_time'   ,REPLACE((SELECT CONVERT(NVARCHAR(4000),sqlserver_start_time,120)
                                                               FROM sys.dm_os_sys_info
                                                            ),N'-',N'.')
) AS qry (source
         ,name
         ,run_value
         );

/******************************************************************************************************************************************/
-- Collect Instance/Server configuration from sys.servers
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
/******************************************************************************************************************************************/
;WITH newcol AS (
SELECT is_rda_server    = CONVERT(BIT,NULL) -- SQL 2016+
)
INSERT
  INTO tempdb.dbo.SQLXL_Index_sys_instance
      (source
      ,name
      ,run_value
      )
SELECT qry.source
      ,qry.name
      ,run_value = CAST(qry.run_value AS NVARCHAR(4000))
  FROM newcol
CROSS APPLY (
SELECT TOP (0)
       source    = CAST(NULL AS SYSNAME)
      ,name      = CAST(NULL AS SYSNAME)
      ,run_value = CAST(NULL AS SQL_VARIANT)
UNION ALL
SELECT N'servers',N'server_id'              ,(SELECT server_id                FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'name'                   ,(SELECT name                     FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'product'                ,(SELECT product                  FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'provider'               ,(SELECT provider                 FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'data_source'            ,(SELECT data_source              FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'location'               ,(SELECT location                 FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'provider_string'        ,(SELECT provider_string          FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'catalog'                ,(SELECT catalog                  FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'connect_timeout'        ,(SELECT connect_timeout          FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'query_timeout'          ,(SELECT query_timeout            FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_linked'              ,(SELECT is_linked                FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_remote_login_enabled',(SELECT is_remote_login_enabled  FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_rpc_out_enabled'     ,(SELECT is_rpc_out_enabled       FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_data_access_enabled' ,(SELECT is_data_access_enabled   FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_collation_compatible',(SELECT is_collation_compatible  FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'uses_remote_collation'  ,(SELECT uses_remote_collation    FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'collation_name'         ,(SELECT collation_name           FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'lazy_schema_validation' ,(SELECT lazy_schema_validation   FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_system'              ,(SELECT is_system                FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_publisher'           ,(SELECT is_publisher             FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_subscriber'          ,(SELECT is_subscriber            FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_distributor'         ,(SELECT is_distributor           FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_nonsql_subscriber'   ,(SELECT is_nonsql_subscriber     FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'modify_date'            ,(SELECT modify_date              FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_rda_server'          ,(SELECT is_rda_server            FROM sys.servers WHERE server_id = 0) UNION ALL
SELECT N'servers',N'is_remote_proc_transaction_promotion_enabled'
                                            ,(SELECT is_remote_proc_transaction_promotion_enabled
                                                FROM sys.servers
                                               WHERE server_id = 0
                                             )
) AS qry (source
         ,name
         ,run_value
         );

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Captured sys.sp_configure,DBCC TRACESTATUS,SERVERPROPERTY,@@Functions,SystemFunctions(),sys.dm_os_sys_info,sys.servers'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Collect sys.Databases info - use collation from tempdb to avoid collation issues later
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @database_name NVARCHAR(128) = N'DW_Master'
DELETE FROM tempdb.dbo.SQLXL_Index_sys_databases WHERE name = N'DW_Master';

IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_databases') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_sys_databases
--*/

;WITH newcol AS (-- these are columns added after SQL 2005
SELECT -----------------------------------------------------------------------------
       log_reuse_wait                              = CONVERT(TINYINT         ,NULL)                          -- SQL 2008+
      ,log_reuse_wait_desc                         = CONVERT(NVARCHAR(120)   ,NULL) COLLATE DATABASE_DEFAULT -- SQL 2008+
      ,is_cdc_enabled                              = CONVERT(BIT             ,NULL)                          -- SQL 2008+
      ,is_memory_optimized_elevate_to_snapshot_on  = CONVERT(BIT             ,NULL)                          -- SQL 2008+
      -----------------------------------------------------------------------------
      ,replica_id                                  = CONVERT(UNIQUEIDENTIFIER,NULL)                          -- SQL 2012+
      ,group_database_id                           = CONVERT(UNIQUEIDENTIFIER,NULL)                          -- SQL 2012+
      ,default_language_lcid                       = CONVERT(SMALLINT        ,NULL)                          -- SQL 2012+
      ,default_language_name                       = CONVERT(NVARCHAR(256)   ,NULL) COLLATE DATABASE_DEFAULT -- SQL 2012+
      ,default_fulltext_language_lcid              = CONVERT(INT             ,NULL)                          -- SQL 2012+
      ,default_fulltext_language_name              = CONVERT(NVARCHAR(256)   ,NULL)                          -- SQL 2012+
      ,is_nested_triggers_on                       = CONVERT(BIT             ,NULL)                          -- SQL 2012+
      ,is_transform_noise_words_on                 = CONVERT(BIT             ,NULL)                          -- SQL 2012+
      ,two_digit_year_cutoff                       = CONVERT(SMALLINT        ,NULL)                          -- SQL 2012+
      ,containment                                 = CONVERT(TINYINT         ,NULL)                          -- SQL 2012+
      ,containment_desc                            = CONVERT(NVARCHAR(120)   ,NULL) COLLATE DATABASE_DEFAULT -- SQL 2012+
      ,target_recovery_time_in_seconds             = CONVERT(INT             ,NULL)                          -- SQL 2012+
      -----------------------------------------------------------------------------
      ,resource_pool_id                            = CONVERT(INT             ,NULL)                          -- SQL 2014+
      ,is_auto_create_stats_incremental_on         = CONVERT(BIT             ,NULL)                          -- SQL 2014+
      -----------------------------------------------------------------------------
      ,delayed_durability                          = CONVERT(INT             ,NULL)                          -- SQL 2014+,Azure SQL Database
      ,delayed_durability_desc                     = CONVERT(NVARCHAR(120)   ,NULL) COLLATE DATABASE_DEFAULT -- SQL 2014+,Azure SQL Database
      -----------------------------------------------------------------------------
      ,is_query_store_on                           = CONVERT(BIT             ,NULL)                          -- SQL 2016+
      ,is_remote_data_archive_enabled              = CONVERT(BIT             ,NULL)                          -- SQL 2016+
      ,is_mixed_page_allocation_on                 = CONVERT(BIT             ,NULL)                          -- SQL 2016+
      -----------------------------------------------------------------------------
      ,is_temporal_history_retention_enabled       = CONVERT(BIT             ,NULL)                          -- SQL 2017+
      -----------------------------------------------------------------------------
      ,physical_database_name                      = CONVERT(NVARCHAR(256)   ,NULL) COLLATE DATABASE_DEFAULT -- SQL 2019+,Azure SQL Database
      ,is_accelerated_database_recovery_on         = CONVERT(BIT             ,NULL)                          -- SQL 2019+,Azure SQL Database
      ,is_memory_optimized_enabled                 = CONVERT(BIT             ,NULL)                          -- SQL 2019+,Azure SQL Database
      -----------------------------------------------------------------------------
      ,is_change_feed_enabled                      = CONVERT(BIT             ,NULL)                          -- SQL 2022+
      ,is_data_retention_enabled                   = CONVERT(BIT             ,NULL)                          -- SQL 2022+
      -----------------------------------------------------------------------------
      ,is_result_set_caching_on                    = CONVERT(BIT             ,NULL)                          -- Azure Synapse Analytics Gen2
      ,is_tempdb_spill_to_remote_store             = CONVERT(BIT             ,NULL)                          -- Azure Synapse Analytics Gen2
      ,is_stale_page_detection_on                  = CONVERT(BIT             ,NULL)                          -- Azure Synapse Analytics Gen2
      -----------------------------------------------------------------------------
      ,catalog_collation_type                      = CONVERT(INT             ,NULL)                          -- Azure SQL Database
      ,catalog_collation_type_desc                 = CONVERT(NVARCHAR(120)   ,NULL) COLLATE DATABASE_DEFAULT -- Azure SQL Database
      ,is_federation_member                        = CONVERT(BIT             ,NULL)                          -- Azure SQL Database
      ,is_ledger_on                                = CONVERT(BIT             ,NULL)                          -- Azure SQL Database
)
SELECT qry.*
  INTO tempdb.dbo.SQLXL_Index_sys_databases
  FROM newcol
 CROSS APPLY (
SELECT name                                        = name                                       COLLATE DATABASE_DEFAULT
      ,database_id                                 = d.database_id
      ,source_database_id                          = source_database_id
      ,owner_sid                                   = CONVERT(VARCHAR(MAX),d.owner_sid,1)        COLLATE DATABASE_DEFAULT
      ,create_date                                 = create_date
      ,compatibility_level                         = compatibility_level
      ,collation_name                              = collation_name                             COLLATE DATABASE_DEFAULT
      ,user_access                                 = user_access
      ,user_access_desc                            = user_access_desc                           COLLATE DATABASE_DEFAULT
      ,is_read_only                                = is_read_only
      ,is_auto_close_on                            = is_auto_close_on
      ,is_auto_shrink_on                           = is_auto_shrink_on
      ,state                                       = state
      ,state_desc                                  = state_desc                                 COLLATE DATABASE_DEFAULT
      ,is_in_standby                               = is_in_standby
      ,is_cleanly_shutdown                         = is_cleanly_shutdown
      ,is_supplemental_logging_enabled             = is_supplemental_logging_enabled
      ,snapshot_isolation_state                    = snapshot_isolation_state
      ,snapshot_isolation_state_desc               = snapshot_isolation_state_desc              COLLATE DATABASE_DEFAULT
      ,is_read_committed_snapshot_on               = is_read_committed_snapshot_on
      ,recovery_model                              = recovery_model
      ,recovery_model_desc                         = recovery_model_desc                        COLLATE DATABASE_DEFAULT
      ,page_verify_option                          = page_verify_option
      ,page_verify_option_desc                     = page_verify_option_desc                    COLLATE DATABASE_DEFAULT
      ,is_auto_create_stats_on                     = is_auto_create_stats_on
      ,is_auto_create_stats_incremental_on         = is_auto_create_stats_incremental_on
      ,is_auto_update_stats_on                     = is_auto_update_stats_on
      ,is_auto_update_stats_async_on               = is_auto_update_stats_async_on
      ,is_ansi_null_default_on                     = is_ansi_null_default_on
      ,is_ansi_nulls_on                            = is_ansi_nulls_on
      ,is_ansi_padding_on                          = is_ansi_padding_on
      ,is_ansi_warnings_on                         = is_ansi_warnings_on
      ,is_arithabort_on                            = is_arithabort_on
      ,is_concat_null_yields_null_on               = is_concat_null_yields_null_on
      ,is_numeric_roundabort_on                    = is_numeric_roundabort_on
      ,is_quoted_identifier_on                     = is_quoted_identifier_on
      ,is_recursive_triggers_on                    = is_recursive_triggers_on
      ,is_cursor_close_on_commit_on                = is_cursor_close_on_commit_on
      ,is_local_cursor_default                     = is_local_cursor_default
      ,is_fulltext_enabled                         = is_fulltext_enabled
      ,is_trustworthy_on                           = is_trustworthy_on
      ,is_db_chaining_on                           = is_db_chaining_on
      ,is_parameterization_forced                  = is_parameterization_forced
      ,is_master_key_encrypted_by_server           = is_master_key_encrypted_by_server
      ,is_query_store_on                           = is_query_store_on
      ,is_published                                = is_published
      ,is_subscribed                               = is_subscribed
      ,is_merge_published                          = is_merge_published
      ,is_distributor                              = is_distributor
      ,is_sync_with_backup                         = is_sync_with_backup
      ,service_broker_guid                         = service_broker_guid
      ,is_broker_enabled                           = is_broker_enabled
      ,log_reuse_wait                              = log_reuse_wait
      ,log_reuse_wait_desc                         = log_reuse_wait_desc                        COLLATE DATABASE_DEFAULT
      ,is_date_correlation_on                      = is_date_correlation_on
      ,is_cdc_enabled                              = is_cdc_enabled
      ,is_encrypted                                = is_encrypted
      ,is_honor_broker_priority_on                 = is_honor_broker_priority_on
      ,replica_id                                  = d.replica_id
      ,group_database_id                           = group_database_id
      ,resource_pool_id                            = resource_pool_id
      ,default_language_lcid                       = default_language_lcid
      ,default_language_name                       = default_language_name                      COLLATE DATABASE_DEFAULT
      ,default_fulltext_language_lcid              = default_fulltext_language_lcid
      ,default_fulltext_language_name              = default_fulltext_language_name
      ,is_nested_triggers_on                       = is_nested_triggers_on
      ,is_transform_noise_words_on                 = is_transform_noise_words_on
      ,two_digit_year_cutoff                       = two_digit_year_cutoff
      ,containment                                 = containment
      ,containment_desc                            = containment_desc                           COLLATE DATABASE_DEFAULT
      ,target_recovery_time_in_seconds             = target_recovery_time_in_seconds
      ,delayed_durability                          = delayed_durability
      ,delayed_durability_desc                     = delayed_durability_desc                    COLLATE DATABASE_DEFAULT
      ,is_memory_optimized_elevate_to_snapshot_on  = is_memory_optimized_elevate_to_snapshot_on
      ,is_federation_member                        = is_federation_member
      ,is_remote_data_archive_enabled              = is_remote_data_archive_enabled
      ,is_mixed_page_allocation_on                 = is_mixed_page_allocation_on
      ,is_temporal_history_retention_enabled       = is_temporal_history_retention_enabled
      ,catalog_collation_type                      = catalog_collation_type
      ,catalog_collation_type_desc                 = catalog_collation_type_desc                COLLATE DATABASE_DEFAULT
      ,physical_database_name                      = physical_database_name                     COLLATE DATABASE_DEFAULT
      ,is_result_set_caching_on                    = is_result_set_caching_on
      ,is_accelerated_database_recovery_on         = is_accelerated_database_recovery_on
      ,is_tempdb_spill_to_remote_store             = is_tempdb_spill_to_remote_store
      ,is_stale_page_detection_on                  = is_stale_page_detection_on
      ,is_memory_optimized_enabled                 = is_memory_optimized_enabled
      ,is_data_retention_enabled                   = is_data_retention_enabled
      ,is_ledger_on                                = is_ledger_on
      ,is_change_feed_enabled                      = is_change_feed_enabled
      -- change tracking -------------------------------------------------------
      ,is_auto_cleanup_on                          = is_auto_cleanup_on
      ,retention_period                            = retention_period
      ,retention_period_units_desc                 = retention_period_units_desc
      ,retention_period_units                      = retention_period_units
  FROM sys.databases                 AS d
  LEFT OUTER
  JOIN sys.change_tracking_databases AS c
    ON d.database_id                  = c.database_id
) AS qry
 WHERE (    @database_name     IS NULL                     -- NULL selection made, all non-system databases
        AND (   qry.name NOT IN (N'DWConfiguration'
                                ,N'DWDiagnostics'
                                ,N'DWQueue'
                                ,N'MASTER'
                                ,N'ManagementDataWarehouse'
                                ,N'MODEL'
                                ,N'MSDB'
                                ,N'SSISDB'
                                ,N'tempdb'
                                )
            AND qry.name NOT LIKE N'%ReportServer%'
           )
       )
    OR @database_name = qry.name;                          -- 1 database requested

IF @@RowCount = 1
BEGIN
   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N' Captured sys.databases, sys.change_tracking_databases - 1 database found'
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END
   SELECT TOP (1)
          @database_id = database_id           -- used to reduce footprint of querying sys.dm_db_index_operational_stats below
     FROM tempdb.dbo.SQLXL_Index_sys_databases
    ORDER BY
          database_id;
END
ELSE
BEGIN
   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N' Captured sys.databases, sys.change_tracking_databases'
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END

   IF NOT EXISTS (SELECT NULL
                    FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                   WHERE name = N'ixuc_SQLXL_Index_sys_databases'
                 )
   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Index_sys_databases__database_id
       ON tempdb.dbo.SQLXL_Index_sys_databases
         (database_id
         )
     WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N' Created index on tempdb.dbo.SQLXL_Index_sys_databases'
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END
END


/******************************************************************************************************************************************/
-- Collect sys.availability_replicas
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_availability_replicas') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_sys_availability_replicas
DECLARE @database_name NVARCHAR(128) = (SELECT database_name from tempdb.dbo.SQLXL_Index_sys_Startup_Parameters)
--*/

;WITH newcol AS (
SELECT read_write_routing_url = CONVERT(SYSNAME,NULL) -- SQL 2019+
      ,seeding_mode           = CONVERT(TINYINT,NULL) -- SQL 2019+
      ,seeding_mode_desc      = CONVERT(SYSNAME,NULL) -- SQL 2019+
)
SELECT qry.*
  INTO tempdb.dbo.SQLXL_Index_sys_availability_replicas
  FROM newcol
CROSS APPLY (
SELECT replica_id                                  = replica_id
      ,group_id                                    = group_id
      ,replica_metadata_id                         = replica_metadata_id
      ,replica_server_name                         = replica_server_name                       COLLATE DATABASE_DEFAULT
      ,owner_sid                                   = CONVERT(VARCHAR(MAX),owner_sid,1)         COLLATE DATABASE_DEFAULT
      ,endpoint_url                                = endpoint_url                              COLLATE DATABASE_DEFAULT
      ,availability_mode                           = availability_mode
      ,availability_mode_desc                      = availability_mode_desc                    COLLATE DATABASE_DEFAULT
      ,failover_mode                               = failover_mode
      ,failover_mode_desc                          = failover_mode_desc                        COLLATE DATABASE_DEFAULT
      ,session_timeout                             = session_timeout
      ,primary_role_allow_connections              = primary_role_allow_connections
      ,primary_role_allow_connections_desc         = primary_role_allow_connections_desc       COLLATE DATABASE_DEFAULT
      ,secondary_role_allow_connections            = secondary_role_allow_connections
      ,secondary_role_allow_connections_desc       = secondary_role_allow_connections_desc     COLLATE DATABASE_DEFAULT
      ,create_date                                 = create_date
      ,modify_date                                 = modify_date
      ,backup_priority                             = backup_priority
      ,read_only_routing_url                       = read_only_routing_url                     COLLATE DATABASE_DEFAULT
      ,seeding_mode                                = seeding_mode
      ,seeding_mode_desc                           = seeding_mode_desc                         COLLATE DATABASE_DEFAULT
      ,read_write_routing_url                      = read_write_routing_url                    COLLATE DATABASE_DEFAULT
  FROM sys.availability_replicas
) AS qry;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Captured sys.availability_replicas'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Collect sys.dm_hadr_availability_replica_states
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DROP TABLE IF EXISTS tempdb.dbo.SQLXL_Index_sys_dm_hadr_availability_replica_states
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_databases') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_sys_databases
DECLARE @database_name NVARCHAR(128) = (SELECT database_name from tempdb.dbo.SQLXL_Index_sys_Startup_Parameters)
--*/

;WITH newcol AS (
SELECT write_lease_remaining_ticks                 = CONVERT(BIGINT  ,NULL) -- SQL 2017+
      ,current_configuration_commit_start_time_utc = CONVERT(DATETIME,NULL) -- SQL 2017+
)
SELECT qry.*
  INTO tempdb.dbo.SQLXL_Index_sys_dm_hadr_availability_replica_states
  FROM newcol
CROSS APPLY (
SELECT replica_id                                  = replica_id
      ,group_id                                    = group_id
      ,is_local                                    = is_local
      ,role                                        = role
      ,role_desc                                   = role_desc                                 COLLATE DATABASE_DEFAULT
      ,operational_state                           = operational_state
      ,operational_state_desc                      = operational_state_desc                    COLLATE DATABASE_DEFAULT
      ,connected_state                             = connected_state
      ,connected_state_desc                        = connected_state_desc                      COLLATE DATABASE_DEFAULT
      ,recovery_health                             = recovery_health
      ,recovery_health_desc                        = recovery_health_desc                      COLLATE DATABASE_DEFAULT
      ,synchronization_health                      = synchronization_health
      ,synchronization_health_desc                 = synchronization_health_desc               COLLATE DATABASE_DEFAULT
      ,last_connect_error_number                   = last_connect_error_number
      ,last_connect_error_description              = last_connect_error_description            COLLATE DATABASE_DEFAULT
      ,last_connect_error_timestamp                = last_connect_error_timestamp
      ,write_lease_remaining_ticks                 = write_lease_remaining_ticks
      ,current_configuration_commit_start_time_utc = current_configuration_commit_start_time_utc
  FROM sys.dm_hadr_availability_replica_states
) AS qry;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Captured sys.dm_hadr_availability_replica_states'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Missing index details - includes sys.dm_db_missing_index_details, dm_db_missing_index_groups, dm_db_missing_index_group_stats
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DROP TABLE IF EXISTS tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_details
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_databases') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_sys_databases
DECLARE @database_name NVARCHAR(128) = (SELECT database_name from tempdb.dbo.SQLXL_Index_sys_Startup_Parameters)
--*/

SELECT --------------------------------------------------------------
       -- sys.dm_db_missing_index_details
       --------------------------------------------------------------
       mid.index_handle
      ,mid.database_id
      ,mid.object_id
      ,statement               = mid.statement          COLLATE DATABASE_DEFAULT
      ,equality_columns        = mid.equality_columns   COLLATE DATABASE_DEFAULT
      ,inequality_columns      = mid.inequality_columns COLLATE DATABASE_DEFAULT
      ,included_columns        = mid.included_columns   COLLATE DATABASE_DEFAULT
      ,mig.index_group_handle
       --------------------------------------------------------------
       -- sys.dm_db_missing_index_group_stats
       --------------------------------------------------------------
      ,migs.group_handle
      ,migs.unique_compiles
      ,migs.user_seeks
      ,migs.user_scans
      ,migs.last_user_seek
      ,migs.last_user_scan
      ,migs.avg_total_user_cost
      ,migs.avg_user_impact
      ,migs.system_seeks
      ,migs.system_scans
      ,migs.last_system_seek
      ,migs.last_system_scan
      ,migs.avg_total_system_cost
      ,migs.avg_system_impact
       --------------------------------------------------------------
       -- Added columns
       --------------------------------------------------------------
      ,mix_Advantage_AMT = 1.0*( (migs.user_seeks + (migs.user_scans * 4))      -- scans weighted heavier
                                * migs.avg_total_user_cost
                                * migs.avg_user_impact
                               )                                                -- if values NULL retain NULL vale
                          +1.0*( (migs.system_seeks + (migs.system_scans * 4))  -- scans weighted heavier
                                * migs.avg_total_system_cost
                                * migs.avg_system_impact
                               )                                                -- if values NULL retain NULL vale
  INTO tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_details                   -- filters out only databases we're interested in
  FROM tempdb.dbo.SQLXL_Index_sys_databases  AS d
  JOIN sys.dm_db_missing_index_details     AS mid
    ON d.database_id                        = mid.database_id
  LEFT OUTER
  JOIN sys.dm_db_missing_index_groups      AS mig
    ON mid.index_handle                     = mig.index_handle
  LEFT OUTER
  JOIN sys.dm_db_missing_index_group_stats AS migs
    ON mig.index_group_handle               = migs.group_handle
OPTION (RECOMPILE
       ,FORCE ORDER
       ,ROBUST PLAN
       ,OPTIMIZE FOR UNKNOWN
       ,MAXDOP 1);


IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Captured sys.dm_db_missing_index: detail, groups, group_stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Missing index columns - sys.dm_db_missing_index_columns
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DROP TABLE IF EXISTS tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_columns
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_databases') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_sys_databases
DECLARE @database_name NVARCHAR(128) = (SELECT database_name from tempdb.dbo.SQLXL_Index_sys_Startup_Parameters)
--*/

SELECT --------------------------------------------------------------
       -- sys.dm_db_missing_index_details
       --------------------------------------------------------------
       database_id      = mid.database_id
      ,object_id        = mid.object_id
      ,index_handle     = mid.index_handle
       --------------------------------------------------------------
       -- sys.dm_db_missing_index_columns
       --------------------------------------------------------------
      ,column_id        = mic.column_id
      ,column_name      = mic.column_name  COLLATE DATABASE_DEFAULT
      ,column_usage     = mic.column_usage COLLATE DATABASE_DEFAULT
  INTO tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_columns
  FROM tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_details AS mid WITH (READUNCOMMITTED)
 CROSS
 APPLY sys.dm_db_missing_index_columns(mid.index_handle) mic
OPTION (RECOMPILE
       ,FORCE ORDER
       ,ROBUST PLAN
       ,OPTIMIZE FOR UNKNOWN
       ,MAXDOP 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Captured sys.dm_db_missing_index_columns'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-- Add index to speed up subsequent queries
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_dm_db_missing_index_columns')
BEGIN
   CREATE UNIQUE CLUSTERED
    index ixuc_SQLXL_Index_sys_dm_db_missing_index_columns
       ON tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_columns
         (database_id
         ,object_id
         ,index_handle
         ,column_id
         )
     WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N' Created index on tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_columns'
      RAISERROR(@debug,0,0) WITH NOWAIT;
      RAISERROR(N'          Start sys.dm_db_missing_index_group_stats',0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END
END

/******************************************************************************************************************************************/
-- Missing index Group Stats Query & query text - SQL 2019+ & Azure SQL Database
-- Only get 1 query for each missing index, based on the query with highest benefit from the missing index
--      and get the details for the plan with the most total reads in sys.dm_exec_query_stats (if more than 1 found)
-- Note from Brent Ozar:
-- "The DMV is only supposed to have 600 rows in it
--  If it's got more, they could see performance slowdowns from flushing out buffer and query cache due to over large memory grant"
--  https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/issues/3085
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DROP TABLE IF EXISTS tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_group_stats_query
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_databases') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_sys_databases
DECLARE @database_name NVARCHAR(128) = (SELECT database_name from tempdb.dbo.SQLXL_Index_sys_Startup_Parameters)
--*/

IF TRY_CAST(SERVERPROPERTY('ProductMajorVersion') AS INT) >= 15           -- SQL 2019+
OR UPPER(CONVERT(SYSNAME,SERVERPROPERTY(N'EDITION')))      = N'SQL AZURE' -- Azure SQL Database
SELECT migs.group_handle
      ,plan_handle               = CONVERT(VARCHAR(100),qs.plan_handle                ,1) COLLATE DATABASE_DEFAULT
      ,query_plan                = CONVERT(VARCHAR(MAX),qp.query_plan                   ) COLLATE DATABASE_DEFAULT
      ,last_sql_handle           = CONVERT(VARCHAR(100),migs.last_sql_handle          ,1) COLLATE DATABASE_DEFAULT
      ,query_text = CONVERT(VARCHAR(MAX),
                    SUBSTRING(st.text
                             ,(migs.last_statement_start_offset/2)+1
                             ,((IIF(migs.last_statement_end_offset = -1
                                   ,DATALENGTH(st.text)
                                   ,migs.last_statement_end_offset)
                                - migs.last_statement_start_offset
                               )/2) + 1)) COLLATE DATABASE_DEFAULT
  INTO tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_group_stats_query

/*** LOCAL TESTING ***
SELECT *
--*/

  FROM (
        ---------------------------------------------------------------------------------------------------
        -- get query with greatest benefit from each missing index group handle
        ---------------------------------------------------------------------------------------------------
        SELECT *
          FROM (
                SELECT mgq.group_handle
                      ,mgq.query_hash
                      ,mgq.last_sql_handle
                      ,mgq.last_statement_start_offset
                      ,mgq.last_statement_end_offset
                      ,rn = ROW_NUMBER() OVER (PARTITION BY mgq.group_handle
                                                   ORDER BY (mgq.avg_total_user_cost * mgq.avg_user_impact)
                                                           *(mgq.user_seeks + (mgq.user_scans * 4.0)) DESC  -- scans count 4X seeks
                                              )
                      --------------------------------------------------------------------------------------------------
                      -- Columns OMITTED from sys.dm_db_missing_index_group_stats_query
                      -- May be included in a separate table in future version
                      -- "future" SQLXL_index presentation sheet(s) will have queries to get these values for each missing index
                      --------------------------------------------------------------------------------------------------
                      -- user_seeks
                      -- user_scans
                      -- last_user_seek
                      -- last_user_scan
                      -- avg_total_user_cost
                      -- avg_user_impact
                      -----------------------------------------------------------------------
                      -- system_seeks
                      -- system_scans
                      -- last_system_seek
                      -- last_system_scan
                      -- avg_total_system_cost
                      -- avg_system_impact
                      -----------------------------------------------------------------------
                      -- query_hash
                      -- query_plan_hash
                      -- last_sql_handle
                      -- last_statement_start_offset
                      -- last_statement_end_offset
                      -- last_statement_sql_handle -- Used by Query Store, references the statement_sql_handle
                  FROM sys.dm_db_missing_index_group_stats_query              AS mgq WITH (READUNCOMMITTED)
               ) AS migs
         WHERE migs.rn = 1
       ) AS migs
 CROSS
 APPLY (---------------------------------------------------------------------------------------------------
        -- get top query plan from sys.dm_exec_query_stats for query_hash with the most reads
        ---------------------------------------------------------------------------------------------------
        SELECT TOP (1)
               qs.plan_handle
          FROM sys.dm_exec_query_stats AS qs WITH (READUNCOMMITTED)
         WHERE migs.query_hash          = qs.query_hash
         ORDER BY
               (qs.total_physical_reads + qs.total_logical_reads) DESC
       ) qs
 CROSS
 APPLY sys.dm_exec_query_plan(qs.plan_handle)     AS qp
 CROSS
 APPLY sys.dm_exec_sql_text(migs.last_sql_handle) AS st
OPTION (RECOMPILE
       ,FORCE ORDER
       ,ROBUST PLAN
       ,OPTIMIZE FOR UNKNOWN
       ,MAXDOP 1)
ELSE
   SELECT TOP (0)
          group_handle                = CAST(NULL AS INT)
         ,plan_handle                 = CAST(NULL AS VARCHAR(100)) COLLATE DATABASE_DEFAULT
         ,query_plan                  = CAST(NULL AS VARCHAR(MAX)) COLLATE DATABASE_DEFAULT
         ,last_sql_handle             = CAST(NULL AS VARCHAR(100)) COLLATE DATABASE_DEFAULT
         ,query_text                  = CAST(NULL AS VARCHAR(MAX)) COLLATE DATABASE_DEFAULT
     INTO tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_group_stats_query;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Captured sys.dm_db_missing_index_group_stats: query, query_text (most reads) SQL 2019+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Collect sys.dm_db_index_usage_stats for one or all user databases
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DROP TABLE IF EXISTS tempdb.dbo.SQLXL_Index_sys_dm_db_index_usage_stats
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_databases') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_sys_databases
DECLARE @database_name NVARCHAR(128) = (SELECT database_name from tempdb.dbo.SQLXL_Index_sys_Startup_Parameters)
--*/

SELECT qry.*
  INTO tempdb.dbo.SQLXL_Index_sys_dm_db_index_usage_stats
  FROM (
SELECT ius.database_id
      ,ius.object_id
      ,ius.index_id
      ,User_Total_CNT    = ius.user_seeks + ius.user_scans + ius.user_lookups + ius.user_updates
      ,user_read_CNT     = ius.user_seeks + ius.user_scans + ius.user_lookups
      ,ius.user_seeks
      ,ius.user_scans
      ,ius.user_lookups
      ,ius.user_updates
      ,ius.system_seeks
      ,ius.system_scans
      ,ius.system_lookups
      ,ius.system_updates
      ,ius.last_user_seek
      ,ius.last_user_scan
      ,ius.last_user_lookup
      ,ius.last_user_update
      ,ius.last_system_seek
      ,ius.last_system_scan
      ,ius.last_system_lookup
      ,ius.last_system_update
  FROM tempdb.dbo.SQLXL_Index_sys_databases AS d
 INNER LOOP
  JOIN sys.dm_db_index_usage_stats        AS ius
    ON d.database_id                       = ius.database_id
) AS qry
OPTION (RECOMPILE
       ,FORCE ORDER
       ,ROBUST PLAN
       ,OPTIMIZE FOR UNKNOWN
       ,MAXDOP 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Captured sys.dm_db_index_usage_stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start sys.dm_db_index_operational_stats',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Collect sys.dm_db_index_operational_stats
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_dm_db_index_operational_stats') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_dm_db_index_operational_stats
DECLARE @database_name NVARCHAR(128) = (SELECT database_name from tempdb.dbo.SQLXL_Index_sys_Startup_Parameters)
--*/

;WITH newcol AS (
SELECT version_generated_off_row         = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,ghost_version_inrow               = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,ghost_version_off_row             = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,insert_over_ghost_version_inrow   = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,insert_over_ghost_version_off_row = CONVERT(BIGINT,NULL) -- SQL 2016+
)
SELECT qry.*
  INTO tempdb.dbo.SQLXL_Index_sys_dm_db_index_operational_stats
  FROM newcol
 CROSS APPLY (
SELECT ios.database_id
      ,ios.object_id
      ,ios.index_id
      ---------------------------------------------------------------------------------------
      ,partition_CNT                         = COUNT(DISTINCT(ios.partition_number      ))
      ---------------------------------------------------------------------------------------
      ,leaf_insert_CNT                       = SUM(ios.leaf_insert_count                 )
      ,leaf_update_CNT                       = SUM(ios.leaf_update_count                 )
      ,leaf_delete_CNT                       = SUM(ios.leaf_delete_count                 )
      ,leaf_ghost_CNT                        = SUM(ios.leaf_ghost_count                  )
      ----------------------------------
      ,nonleaf_insert_CNT                    = SUM(ios.nonleaf_insert_count              )
      ,nonleaf_delete_CNT                    = SUM(ios.nonleaf_delete_count              )
      ,nonleaf_update_CNT                    = SUM(ios.nonleaf_update_count              )
      ----------------------------------
      ,leaf_alloc_page_split_CNT             = SUM(ios.leaf_allocation_count             ) -- For an index, an allocation is a page split
      ,nonleaf_alloc_page_split_CNT          = SUM(ios.nonleaf_allocation_count          ) -- 0 = Heap or columnstore
      ----------------------------------
      ,leaf_page_merge_CNT                   = SUM(ios.leaf_page_merge_count             ) -- 0 = Heap or columnstore
      ,nonleaf_page_merge_CNT                = SUM(ios.nonleaf_page_merge_count          ) -- 0 = Heap or columnstore
      ----------------------------------
      ,range_scan_CNT                        = SUM(ios.range_scan_count                  )
      ,singleton_lookup_CNT                  = SUM(ios.singleton_lookup_count            )
      ,forwarded_fetch_CNT                   = SUM(ios.forwarded_fetch_count             )
      ,lob_fetch_in_pages                    = SUM(ios.lob_fetch_in_pages                )
      ,lob_fetch_in_bytes                    = SUM(ios.lob_fetch_in_bytes                )
      ,lob_orphan_create_CNT                 = SUM(ios.lob_orphan_create_count           )
      ,lob_orphan_insert_CNT                 = SUM(ios.lob_orphan_insert_count           )
      ,row_overflow_fetch_in_pages           = SUM(ios.row_overflow_fetch_in_pages       )
      ,row_overflow_fetch_in_bytes           = SUM(ios.row_overflow_fetch_in_bytes       )
      ,column_value_push_off_row_CNT         = SUM(ios.column_value_push_off_row_count   )
      ,column_value_pull_in_row_CNT          = SUM(ios.column_value_pull_in_row_count    )
      ----------------------------------
      ,row_lock_CNT                          = SUM(ios.row_lock_count                    )
      ,row_lock_wait_CNT                     = SUM(ios.row_lock_wait_count               )
      ,row_lock_wait_MS                      = SUM(ios.row_lock_wait_in_ms               )
      ----------------------------------
      ,page_lock_CNT                         = SUM(ios.page_lock_count                   )
      ,page_lock_wait_CNT                    = SUM(ios.page_lock_wait_count              )
      ,page_lock_wait_MS                     = SUM(ios.page_lock_wait_in_ms              )
      ----------------------------------
      ,lock_promotion_attempt_CNT            = SUM(ios.index_lock_promotion_attempt_count)
      ,lock_promotion_CNT                    = SUM(ios.index_lock_promotion_count        )
      ----------------------------------
      ,page_latch_wait_CNT                   = SUM(ios.page_latch_wait_count             )
      ,tree_page_latch_wait_CNT              = SUM(ios.tree_page_latch_wait_count        )
      ,page_latch_wait_MS                    = SUM(ios.page_latch_wait_in_ms             )
      ,tree_page_latch_wait_MS               = SUM(ios.tree_page_latch_wait_in_ms        ) -- This is always 0 for a heap.
      ,page_io_latch_wait_CNT                = SUM(ios.page_io_latch_wait_count          )
      ,tree_page_io_latch_wait_CNT           = SUM(ios.tree_page_io_latch_wait_count     ) -- This is always 0 for a heap
      ,page_io_latch_wait_MS                 = SUM(ios.page_io_latch_wait_in_ms          )
      ,tree_page_io_latch_wait_MS            = SUM(ios.tree_page_io_latch_wait_in_ms     ) -- This is always 0 for a heap.
      ----------------------------------
      ,page_compression_attempt_CNT          = SUM(ios.page_compression_attempt_count    )
      ,page_compression_success_CNT          = SUM(ios.page_compression_success_count    )
      ----------------------------------
      ,version_generated_off_row_CNT         = ISNULL(SUM(version_generated_off_row        ),0)
      ,ghost_version_inrow_CNT               = ISNULL(SUM(ghost_version_inrow              ),0)
      ,ghost_version_off_row_CNT             = ISNULL(SUM(ghost_version_off_row            ),0)
      ,insert_over_ghost_version_inrow_CNT   = ISNULL(SUM(insert_over_ghost_version_inrow  ),0)
      ,insert_over_ghost_version_off_row_CNT = ISNULL(SUM(insert_over_ghost_version_off_row),0)
  FROM (------------------------------------------------------------------------------------------------------------------------------------
        -- required to avoid error "Aggregates on the right side of an APPLY cannot reference columns from the left side" referencing newcol
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id
              ,object_id
              ,index_id
              ,partition_number
              ,leaf_insert_count
              ,leaf_delete_count
              ,leaf_update_count
              ,leaf_ghost_count
              ,nonleaf_insert_count
              ,nonleaf_delete_count
              ,nonleaf_update_count
              ,leaf_allocation_count
              ,nonleaf_allocation_count
              ,leaf_page_merge_count
              ,nonleaf_page_merge_count
              ,range_scan_count
              ,singleton_lookup_count
              ,forwarded_fetch_count
              ,lob_fetch_in_pages
              ,lob_fetch_in_bytes
              ,lob_orphan_create_count
              ,lob_orphan_insert_count
              ,row_overflow_fetch_in_pages
              ,row_overflow_fetch_in_bytes
              ,column_value_push_off_row_count
              ,column_value_pull_in_row_count
              ,row_lock_count
              ,row_lock_wait_count
              ,row_lock_wait_in_ms
              ,page_lock_count
              ,page_lock_wait_count
              ,page_lock_wait_in_ms
              ,index_lock_promotion_attempt_count
              ,index_lock_promotion_count
              ,page_latch_wait_count
              ,page_latch_wait_in_ms
              ,page_io_latch_wait_count
              ,page_io_latch_wait_in_ms
              ,tree_page_latch_wait_count
              ,tree_page_latch_wait_in_ms
              ,tree_page_io_latch_wait_count
              ,tree_page_io_latch_wait_in_ms
              ,page_compression_attempt_count
              ,page_compression_success_count
              ,version_generated_off_row           -- SQL 2016+
              ,ghost_version_inrow                 -- SQL 2016+
              ,ghost_version_off_row               -- SQL 2016+
              ,insert_over_ghost_version_inrow     -- SQL 2016+
              ,insert_over_ghost_version_off_row   -- SQL 2016+
          FROM sys.dm_db_index_operational_stats (@database_id,NULL,NULL,NULL)  -- if all databases selected then @database_id IS NULL
       ) AS ios
 GROUP BY
       ios.database_id
      ,ios.object_id
      ,ios.index_id
) AS qry
OPTION (RECOMPILE
       ,FORCE ORDER
       ,ROBUST PLAN
       ,OPTIMIZE FOR UNKNOWN
       ,MAXDOP 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Captured sys.dm_db_index_operational_stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start sys.dm_os_buffer_descriptors',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Aggregate sys.dm_os_buffer_descriptors
-- NOTE: column [op_history] not found in BOL
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors
--*/

SELECT bd.database_id
      ,bd.allocation_unit_id
      ,row_count          = SUM(CAST(row_count AS BIGINT))
      ,buffer_total_KB    = SUM(CAST(8.0 AS BIGINT))                          -- each page is 8KB
      ,buffer_free_KB     = SUM(CAST(bd.free_space_in_bytes AS BIGINT))/8192. -- 1KB = 8192 bytes
      ,read_microsec_AVG  = AVG(bd.read_microsec)
  INTO tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors
  FROM tempdb.dbo.SQLXL_Index_sys_databases AS d WITH (READUNCOMMITTED)       -- used to filter out only databases we're interested in
  JOIN sys.dm_os_buffer_descriptors        AS bd WITH (READUNCOMMITTED)
    ON d.database_id                        = bd.database_id
 GROUP BY
       bd.database_id
      ,bd.allocation_unit_id
OPTION (RECOMPILE
       ,FORCE ORDER
       ,ROBUST PLAN
       ,OPTIMIZE FOR UNKNOWN
       ,MAXDOP 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Captured sys.dm_os_buffer_descriptors'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_dm_os_buffer_descriptors')
BEGIN
   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Index_sys_dm_os_buffer_descriptors
       ON tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors
         (database_id
         ,allocation_unit_id
         )
     WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N' Created index on tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors'
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END
END

/*########################################################################################################################################*/
-- Loop through requested databases - Collect database-specific information for one or all user databases
-- Collection Notes:
-- sys.dm_exec_function_stats       BOL "does not return information about table valued functions,
--                                       and about scalar functions that are inlined with Scalar UDF Inlining"
-- sys.dm_db_xtp_hash_index_stats   BOL "useful for understanding and tuning the bucket counts. It can also be used to detect cases
--                                       where the index key has many duplicates. Note - SCANS THE ENTIRE TABLE!"
/*########################################################################################################################################*/
/******************************************************************************************************************************************/
-- Create local variables & Cursor
-- List of databases to run through was previously filtered when creating tempdb.dbo.SQLXL_Index_sys_databases
/******************************************************************************************************************************************/
DECLARE db_crsr CURSOR LOCAL FAST_FORWARD FOR
SELECT d.database_id
      ,name          = QUOTENAME(d.name) COLLATE DATABASE_DEFAULT
  FROM tempdb.dbo.SQLXL_Index_sys_databases                           AS d
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_availability_replicas               AS ar
    ON d.replica_id                                               = ar.replica_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_dm_hadr_availability_replica_states AS rs
    ON d.replica_id                                               = rs.replica_id
 WHERE NOT -- Non-readable secondaries
       (    ISNULL(rs.role_desc                            ,N'N/A') = 'SECONDARY'
        AND ISNULL(ar.secondary_role_allow_connections_desc,N'N/A') = 'NO'
       )
 ORDER BY
       d.name;

OPEN db_crsr;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Opened Database cursor'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

WHILE @i > 0 -- On the first database displays the dynamic sql and recreates target tables

/******************************************************************************************************************************************/
-- Start of database cursor loop. Collect database-specific information for one or all user databases
/******************************************************************************************************************************************/
BEGIN
   FETCH NEXT
    FROM db_crsr
    INTO @database_id
        ,@database_name;

   IF @@Fetch_Status < 0 BREAK;

   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N' -- Database: ' + CAST(@database_name AS NVARCHAR(MAX))
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.database_scoped_configurations - Introduced in SQL 2016
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
IF TRY_CAST(SERVERPROPERTY('ProductMajorVersion') AS INT) >= 13 -- SQL 2016+
OR CONVERT(SYSNAME,SERVERPROPERTY(N'Edition')) = N'SQL Azure'   -- SQL Azure
BEGIN -- SQL 2016+, AZURE
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_database_scoped_configurations') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_database_scoped_configurations
--*/

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT is_value_default = CONVERT(BIT,NULL) -- added SQL 2017
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_database_scoped_configurations'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_database_scoped_configurations') + N'
  FROM newcol
 CROSS APPLY (
SELECT database_id         = db_id()
      ,configuration_id
      ,name                = name COLLATE ' + @collation + N'
      ,value               = CONVERT(NVARCHAR(1000),value)               COLLATE ' + @collation + N'
      ,value_for_secondary = CONVERT(NVARCHAR(1000),value_for_secondary) COLLATE ' + @collation + N'
      ,is_value_default    = CONVERT(NVARCHAR(1000),is_value_default   ) COLLATE ' + @collation + N'
  FROM sys.database_scoped_configurations
) AS qry
OPTION (MAXDOP 1);'

   IF @ssms = 2 AND @i = 1 -- SSMS and first database only
   BEGIN
      SELECT 'tempdb.dbo.SQLXL_Index_sys_database_scoped_configurations'
            ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
            ,lsql=LEN(@sql)
            ,sql1=SUBSTRING(@sql,    1,16383)
            ,sql2=SUBSTRING(@sql,16384,16383)
            ,sql3=SUBSTRING(@sql,32768,16383);
      SET @dttm=GETDATE();
   END

   EXECUTE sp_executesql @sql; IF @@error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

END
ELSE  -- < SQL 2016
BEGIN
   IF @i = 1
   SELECT TOP (0)
          database_id         = @database_id
         ,configuration_id    = CONVERT(INT           ,NULL)
         ,name                = CONVERT(SYSNAME       ,NULL) COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,value               = CONVERT(NVARCHAR(1000),NULL) COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,value_for_secondary = CONVERT(NVARCHAR(1000),NULL) COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,is_value_default    = CONVERT(BIT           ,NULL)
     INTO tempdb.dbo.SQLXL_Index_sys_database_scoped_configurations;
END

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.database_scoped_configurations - SQL 2016+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.database_automatic_tuning_options - Introduced in SQL 2017
--------------------------------------------------------------------------------------------------------------------------------------------
IF TRY_CAST(SERVERPROPERTY('ProductMajorVersion') AS INT) >= 14 -- SQL 2017+
OR CONVERT(SYSNAME,SERVERPROPERTY(N'Edition')) = N'SQL Azure'   -- Azure SQL
BEGIN -- SQL 2017+, AZURE
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_database_automatic_tuning_options') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_database_automatic_tuning_options
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_database_automatic_tuning_options'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_database_automatic_tuning_options')
                               +N'
  FROM (SELECT database_id        = DB_ID()
              ,name               = name               COLLATE ' + @collation + N'
              ,desired_state
              ,desired_state_desc = desired_state_desc COLLATE ' + @collation + N'
              ,actual_state
              ,actual_state_desc  = actual_state_desc  COLLATE ' + @collation + N'
              ,reason
              ,reason_desc        = reason_desc        COLLATE ' + @collation + N'
          FROM sys.database_automatic_tuning_options
       ) AS qry
OPTION (MAXDOP 1);'

   IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   BEGIN
      SELECT 'tempdb.dbo.SQLXL_Index_sys_database_automatic_tuning_options'
            ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
            ,lsql=LEN(@sql)
            ,sql1=SUBSTRING(@sql,    1,16383)
            ,sql2=SUBSTRING(@sql,16384,16383)
            ,sql3=SUBSTRING(@sql,32768,16383);
      SET @dttm=GETDATE();
   END

   EXECUTE sp_executesql @sql; IF @@error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

END
ELSE  -- < SQL 2017
BEGIN
   IF @i = 1
   SELECT TOP (0)
          database_id          = @database_id
         ,name                 = CAST(NULL AS NVARCHAR(128)) COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,desired_state        = CAST(NULL AS SMALLINT)
         ,desired_state_desc   = CAST(NULL AS NVARCHAR(60))  COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,actual_state         = CAST(NULL AS SMALLINT)
         ,actual_state_desc    = CAST(NULL AS NVARCHAR(60))  COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,reason               = CAST(NULL AS SMALLINT)
         ,reason_desc          = CAST(NULL AS NVARCHAR(60))  COLLATE DATABASE_DEFAULT -- script is running in tempdb
     INTO tempdb.dbo.SQLXL_Index_sys_database_automatic_tuning_options;
END

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.database_automatic_tuning_options - SQL 2017+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.database_query_store_options - - Introduced in SQL 2016
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_database_query_store_options') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_database_query_store_options
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT -- SQL 2017+ ------------------------------------------------------------
       wait_stats_capture_mode                    = CONVERT(INT           ,NULL)                             -- SQL 2017+
      ,wait_stats_capture_mode_desc               = CONVERT(NVARCHAR(120) ,NULL) COLLATE ' + @collation + N' -- SQL 2017+
      ,actual_state_additional_info               = CONVERT(NVARCHAR(4000),NULL) COLLATE ' + @collation + N' -- SQL 2017+
       -- SQL 2019+ ------------------------------------------------------------
      ,capture_policy_execution_count             = CONVERT(INT           ,NULL)                             -- SQL 2019+
      ,capture_policy_total_compile_cpu_time_ms   = CONVERT(BIGINT        ,NULL)                             -- SQL 2019+
      ,capture_policy_total_execution_cpu_time_ms = CONVERT(BIGINT        ,NULL)                             -- SQL 2019+
      ,capture_policy_stale_threshold_hours       = CONVERT(INT           ,NULL)                             -- SQL 2019+
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_database_query_store_options'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_database_query_store_options') + N'
  FROM newcol
 CROSS APPLY ('
+IIF(PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 13  -- SQL 2016+
  OR SERVERPROPERTY(N'EngineEdition') = 5                                  -- SQL Database
  OR SERVERPROPERTY(N'EngineEdition') = 6                                  -- Microsoft Azure Synapse Analytics
  OR SERVERPROPERTY(N'EngineEdition') = 8                                  -- Azure SQL Managed Instance
  OR SERVERPROPERTY(N'EngineEdition') = 9                                  -- Azure SQL Edge (This is returned for all editions)
  OR SERVERPROPERTY(N'EngineEdition') = 11                                 -- Azure Synapse serverless SQL pool
,N'
SELECT database_id                                = DB_ID()
      ,desired_state                              = desired_state
      ,desired_state_desc                         = desired_state_desc                         COLLATE ' + @collation + N'
      ,actual_state                               = actual_state
      ,actual_state_desc                          = actual_state_desc                          COLLATE ' + @collation + N'
      ,actual_state_additional_info               = actual_state_additional_info               COLLATE ' + @collation + N'
      ,readonly_reason                            = readonly_reason
      ,current_storage_size_mb                    = current_storage_size_mb
      ,flush_interval_seconds                     = flush_interval_seconds
      ,interval_length_minutes                    = interval_length_minutes
      ,max_storage_size_mb                        = max_storage_size_mb
      ,stale_query_threshold_days                 = stale_query_threshold_days
      ,max_plans_per_query                        = max_plans_per_query
      ,query_capture_mode                         = query_capture_mode
      ,query_capture_mode_desc                    = query_capture_mode_desc                    COLLATE ' + @collation + N'
      ,size_based_cleanup_mode                    = size_based_cleanup_mode
      ,size_based_cleanup_mode_desc               = size_based_cleanup_mode_desc               COLLATE ' + @collation + N'
      ,wait_stats_capture_mode                    = wait_stats_capture_mode
      ,wait_stats_capture_mode_desc               = wait_stats_capture_mode_desc               COLLATE ' + @collation + N'
      ,capture_policy_execution_count             = capture_policy_execution_count
      ,capture_policy_total_compile_cpu_time_ms   = capture_policy_total_compile_cpu_time_ms
      ,capture_policy_total_execution_cpu_time_ms = capture_policy_total_execution_cpu_time_ms
      ,capture_policy_stale_threshold_hours       = capture_policy_stale_threshold_hours
  FROM sys.database_query_store_options'
,N'SELECT TOP (0)
       database_id                                = DB_ID()
      ,desired_state                              = CAST(NULL AS SMALLINT)
      ,desired_state_desc                         = CAST(NULL AS NVARCHAR(120))  COLLATE DATABASE_DEFAULT -- script is running in tempdb
      ,actual_state                               = CAST(NULL AS SMALLINT)
      ,actual_state_desc                          = CAST(NULL AS NVARCHAR(120))  COLLATE DATABASE_DEFAULT -- script is running in tempdb
      ,actual_state_additional_info               = CAST(NULL AS NVARCHAR(4000)) COLLATE DATABASE_DEFAULT -- script is running in tempdb
      ,readonly_reason                            = CAST(NULL AS INT)
      ,current_storage_size_mb                    = CAST(NULL AS BIGINT)
      ,flush_interval_seconds                     = CAST(NULL AS BIGINT)
      ,interval_length_minutes                    = CAST(NULL AS BIGINT)
      ,max_storage_size_mb                        = CAST(NULL AS BIGINT)
      ,stale_query_threshold_days                 = CAST(NULL AS BIGINT)
      ,max_plans_per_query                        = CAST(NULL AS BIGINT)
      ,query_capture_mode                         = CAST(NULL AS SMALLINT)
      ,query_capture_mode_desc                    = CAST(NULL AS NVARCHAR(120))  COLLATE DATABASE_DEFAULT -- script is running in tempdb
      ,size_based_cleanup_mode                    = CAST(NULL AS SMALLINT)
      ,size_based_cleanup_mode_desc               = CAST(NULL AS NVARCHAR)       COLLATE DATABASE_DEFAULT -- script is running in tempdb
      ,wait_stats_capture_mode                    = CAST(NULL AS INT)
      ,wait_stats_capture_mode_desc               = CAST(NULL AS NVARCHAR(120))  COLLATE DATABASE_DEFAULT -- script is running in tempdb
      ,capture_policy_execution_count             = CAST(NULL AS INT)
      ,capture_policy_total_compile_cpu_time_ms   = CAST(NULL AS BIGINT)
      ,capture_policy_total_execution_cpu_time_ms = CAST(NULL AS BIGINT)
      ,capture_policy_stale_threshold_hours       = CAST(NULL AS INT)
      ')
+N') AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
BEGIN
   SELECT 'tempdb.dbo.SQLXL_Index_sys_database_query_store_options'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();
END

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.database_query_store_options - SQL 2016+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- cdc.change_tables - if Change Data Capture (CDC) enabled for this database
-- FUTURE:
-- BOL: We recommend that you don't query the system tables directly.
--      Instead, execute the sys.sp_cdc_help_change_data_capture stored procedure
--      <BS> Up to two rows can be returned for each source table, one row for each capture instance.
--------------------------------------------------------------------------------------------------------------------------------------------
IF (SELECT is_cdc_enabled FROM tempdb.dbo.SQLXL_Index_sys_databases WHERE database_id = @database_id) = 1
BEGIN
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_cdc_change_tables') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_cdc_change_tables
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_cdc_change_tables'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_cdc_change_tables') + N'
  FROM (SELECT database_id          = DB_ID()
              ,object_id
              ,version
              ,source_object_id
              ,capture_instance     = capture_instance COLLATE ' + @collation + N'
              ,supports_net_changes
              ,has_drop_pending
              ,role_name            = role_name        COLLATE ' + @collation + N'
              ,index_name           = index_name       COLLATE ' + @collation + N'
              ,filegroup_name       = filegroup_name   COLLATE ' + @collation + N'
              ,create_date
              ,partition_switch
              ,capture_instance_ID  = ROWNUMBER() OVER (PARTITION BY source_object_id -- FUTURE for now enable getting just
                                                            ORDER BY create_date      --         1 Change table per source
                                                       )
          FROM cdc.change_tables
       ) AS qry';

   IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   BEGIN
      SELECT 'tempdb.dbo.SQLXL_Index_cdc_change_tables'
            ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
            ,lsql=LEN(@sql)
            ,sql1=SUBSTRING(@sql,    1,16383)
            ,sql2=SUBSTRING(@sql,16384,16383)
            ,sql3=SUBSTRING(@sql,32768,16383);
      SET @dttm=GETDATE();
   END

   EXECUTE sp_executesql @sql; IF @@error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;
END
ELSE  -- change data capture (CDC) NOT enabled on database
BEGIN
   IF @i = 1
   SELECT TOP (0)
          database_id          = CAST(@database_id AS INT)
         ,object_id            = CAST(NULL AS INT)
         ,version              = CAST(NULL AS INT)
         ,source_object_id     = CAST(NULL AS INT)
         ,capture_instance     = CAST(NULL AS SYSNAME)   COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,supports_net_changes = CAST(NULL AS BIT)
         ,has_drop_pending     = CAST(NULL AS BIT)
         ,role_name            = CAST(NULL AS SYSNAME)   COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,index_name           = CAST(NULL AS SYSNAME)   COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,filegroup_name       = CAST(NULL AS SYSNAME)   COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,create_date          = CAST(NULL AS DATETIME)
         ,partition_switch     = CAST(NULL AS BIT)
         ,capture_instance_ID  = CAST(NULL AS INT)
     INTO tempdb.dbo.SQLXL_Index_cdc_change_tables;
END

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... cdc.change_tables (if CDC enabled)'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.schemas
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_schemas') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_schemas
--*/
-------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_schemas'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_schemas') + N'
  FROM (
SELECT database_id   = DB_ID()
      ,name          = name COLLATE ' + @collation + N'
      ,schema_id
      ,principal_id
  FROM sys.schemas AS s
) AS qry;'

IF @ssms = 2 AND @i = 1                      -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_schemas'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.schemas'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-- Add index to speed up subsequent queries
IF @i = 2 -- only execute on second database if more than one
BEGIN
   IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_schemas')
   CREATE UNIQUE CLUSTERED
    index ixuc_SQLXL_Index_sys_schemas
       ON tempdb.dbo.SQLXL_Index_sys_schemas
         (database_id
         ,schema_id
         )
     WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N'    ... Create index on tempdb.dbo.SQLXL_Index_sys_schemas'
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END
END


--------------------------------------------------------------------------------------------------------------------------------------------
-- sys.tables, including cdc.change_tables if CDC enabled. tempdb.dbo.SQLXL_Index_cdc_change_tables created above
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_tables') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_tables
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT -- SQL 2012+ ----------------------------------------------
       is_filetable                       = CONVERT(BIT     ,NULL)                                -- SQL 2012+
       -- SQL 2014+ ----------------------------------------------
      ,is_memory_optimized                = CONVERT(BIT     ,NULL)                                -- SQL 2014+
      ,durability                         = CONVERT(TINYINT ,NULL)                                -- SQL 2014+
      ,durability_desc                    = CONVERT(SYSNAME ,NULL)    COLLATE ' + @collation + N' -- SQL 2014+
       -- SQL 2016+ ----------------------------------------------
      ,temporal_type                      = CONVERT(TINYINT ,NULL)                                -- SQL 2016+
      ,temporal_type_desc                 = CONVERT(SYSNAME ,NULL)    COLLATE ' + @collation + N' -- SQL 2016+
      ,history_table_id                   = CONVERT(INT     ,NULL)                                -- SQL 2016+
      ,is_remote_data_archive_enabled     = CONVERT(BIT     ,NULL)                                -- SQL 2016+
      ,is_external                        = CONVERT(BIT     ,NULL)                                -- SQL 2016+
       -- SQL 2017+ ----------------------------------------------
      ,is_node                            = CONVERT(BIT     ,NULL)                                -- SQL 2017+
      ,is_edge                            = CONVERT(BIT     ,NULL)                                -- SQL 2017+
       -- SQL 2022+, Azure SQL Database --------------------------
      ,history_retention_period           = CONVERT(INT     ,NULL)                                -- SQL 2022+, Azure SQL Database
      ,history_retention_period_unit      = CONVERT(INT     ,NULL)                                -- SQL 2022+, Azure SQL Database
      ,history_retention_period_unit_desc = CONVERT(SYSNAME ,NULL)    COLLATE ' + @collation + N' -- SQL 2022+, Azure SQL Database
      ,ledger_type                        = CONVERT(TINYINT ,NULL)                                -- SQL 2022+, Azure SQL Database
      ,ledger_type_desc                   = CONVERT(SYSNAME ,NULL)    COLLATE ' + @collation + N' -- SQL 2022+, Azure SQL Database
      ,ledger_view_id                     = CONVERT(INT     ,NULL)                                -- SQL 2022+, Azure SQL Database
      ,is_dropped_ledger_table            = CONVERT(BIT     ,NULL)                                -- SQL 2022+, Azure SQL Database
       -- If change data capture (CDC) enabled on database -------
      ,version                            = CONVERT(INT     ,NULL)                                -- Change Data Capture enabled
      ,capture_instance                   = CONVERT(SYSNAME ,NULL)    COLLATE ' + @collation + N' -- Change Data Capture enabled
      ,supports_net_changes               = CONVERT(BIT     ,NULL)                                -- Change Data Capture enabled
      ,role_name                          = CONVERT(SYSNAME ,NULL)    COLLATE ' + @collation + N' -- Change Data Capture enabled
      ,index_name                         = CONVERT(SYSNAME ,NULL)    COLLATE ' + @collation + N' -- Change Data Capture enabled
      ,filegroup_name                     = CONVERT(SYSNAME ,NULL)    COLLATE ' + @collation + N' -- Change Data Capture enabled
      ,create_date                        = CONVERT(DATETIME,NULL)                                -- Change Data Capture enabled
      ,partition_switch                   = CONVERT(BIT     ,NULL)                                -- Change Data Capture enabled
      -- Computed above
      ,capture_instance_ID                = CONVERT(INT     ,NULL)                                -- Change Data Capture computed
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_tables'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_tables') + N'
  FROM newcol
 CROSS APPLY (
SELECT database_id                        = DB_ID()
      ,name                               = name                                COLLATE ' + @collation + N'
      ,object_id                          = t.object_id
      ,principal_id
      ,schema_id
      ,type                               = type                                COLLATE ' + @collation + N'
      ,type_desc                          = type_desc                           COLLATE ' + @collation + N'
      ,t.create_date
      ,modify_date
      ,is_ms_shipped
      ,is_published
      ,is_schema_published
      ,lob_data_space_id
      ,filestream_data_space_id
      ,max_column_id_used
      ,lock_on_bulk_load
      ,uses_ansi_nulls
      ,is_replicated
      ,has_replication_filter
      ,is_merge_published
      ,is_sync_tran_subscribed
      ,has_unchecked_assembly_data
      ,text_in_row_limit
      ,large_value_types_out_of_row
      ,is_tracked_by_cdc
      ,lock_escalation
      ,lock_escalation_desc               = lock_escalation_desc                COLLATE ' + @collation + N'
      ,is_filetable
      ,is_memory_optimized
      ,durability
      ,durability_desc                    = durability_desc                     COLLATE ' + @collation + N'
      ,temporal_type
      ,temporal_type_desc                 = temporal_type_desc                  COLLATE ' + @collation + N'
      ,history_table_id
      ,is_remote_data_archive_enabled
      ,is_external
       ------------------------------------------------------------------------------------------------------
      ,is_internal                        = CONVERT(BIT,0)                      -- to be used for internal tables below
      ,internal_parent_id                 = CONVERT(INT,NULL)                   -- to be used for internal tables below
      ,internal_parent_minor_id           = CONVERT(INT,NULL)                   -- to be used for internal tables below
       ------------------------------------------------------------------------------------------------------
      ,history_retention_period
      ,history_retention_period_unit
      ,history_retention_period_unit_desc = history_retention_period_unit_desc  COLLATE ' + @collation + N'
      ,is_node
      ,is_edge
      ,ledger_type
      ,ledger_type_desc                   = ledger_type_desc                    COLLATE ' + @collation + N'
      ,ledger_view_id
      ,is_dropped_ledger_table
       ------------------------------------------------------------------------------------------------------
       -- sys.change_tracking_tables
       ------------------------------------------------------------------------------------------------------
      ,ctt_is_track_columns_updated_on    = ctt.is_track_columns_updated_on
       ------------------------------------------------------------------------------------------------------
       -- cdc.change_tables (source & target)
       ------------------------------------------------------------------------------------------------------
      ,cdc_capture_instance               = COALESCE(cs.capture_instance,ct.capture_instance)         COLLATE ' + @collation + N'
      ,cdc_supports_net_changes           = ct.supports_net_changes
      ,cdc_role_name                      = COALESCE(cs.role_name,ct.role_name)                       COLLATE ' + @collation + N'
      ,cdc_index_name                     = cs.index_name                                             COLLATE ' + @collation + N'
      ,cdc_filegroup_name                 = ct.filegroup_name                                         COLLATE ' + @collation + N'
      ,cdc_create_date                    = COALESCE(cs.create_date,ct.create_date)
      ,cdc_partition_switch               = COALESCE(cs.partition_switch,ct.partition_switch)
      ,cdc_is_history_table               = CAST(CASE WHEN t.object_id = ct.object_id THEN 1 ELSE 0 END AS BIT)

  FROM sys.tables                             AS t

  LEFT OUTER
  JOIN sys.change_tracking_tables             AS ctt
    ON t.object_id                             = ctt.object_id

  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_cdc_change_tables AS cs -- tempdb.dbo.SQLXL_Index_cdc_change_tables created above
    ON DB_ID()                                 = cs.database_id
   AND t.object_id                             = cs.source_object_id
   AND 1                                       = cs.capture_instance_ID -- <BS> FUTURE for now enable getting just 1 Change table per source

  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_cdc_change_tables AS ct -- tempdb.dbo.SQLXL_Index_cdc_change_tables created above
    ON DB_ID()                                 = ct.database_id
   AND t.object_id                             = ct.object_id
   AND 1                                       = ct.capture_instance_ID -- <BS> FUTURE for now enable getting just 1 Change table per source

 WHERE is_external = 0                         -- <BS> potential future acquisition since can have statistics
) AS qry
OPTION (FORCE ORDER
       ,FAST 1
       ,MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_tables'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.tables, sys.change_tracking_tables'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.objects Also includes:
--    sys.sql_modules     -- for code definitions
--    sys.internal_tables
--    sys.triggers
--    sys.table_types
--    sys.views
-- Internal Tables are objects of their HISTORY TABLE, BASE TABLE, or potentially VIEW parents
-- HISTORY tables do not have a parent in sys.objects, must be captured from cdc.change_tables or sys.tables as below
-- Foreign Key parents are the table they belong to
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_objects') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_objects
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @ssms             TINYINT = CASE WHEN (SELECT 1
                                                 FROM sys.dm_exec_sessions
                                                WHERE session_id = @@spid
                                                  AND (   program_name LIKE N''Microsoft SQL Server Management Studio%''
                                                       OR program_name = N''SQLCMD''
                                                      )
                                              ) = 1
                                         THEN 1
                                         ELSE 0
                                    END
       ,@debug            VARCHAR(1000)
       ,@debug_DTTM       DATETIME      = GETDATE();

DROP TABLE IF EXISTS #sys_objects         ;SELECT * INTO #sys_objects         FROM sys.objects WITH (READUNCOMMITTED);
IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N''    ... #sys_objects''
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

DROP TABLE IF EXISTS #sys_table_types     ;SELECT * INTO #sys_table_types     FROM sys.table_types WITH (READUNCOMMITTED);
IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N''    ... #sys_table_types''
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

DROP TABLE IF EXISTS #sys_views           ;SELECT * INTO #sys_views           FROM sys.views WITH (READUNCOMMITTED);
IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N''    ... #sys_views''
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--/* FUTURE - get code for table valued functions
BEGIN TRY
   SET LOCK_TIMEOUT 1000; -- 1 second in milliseconds

   SELECT TOP (0)
          *
     INTO #sys_sql_modules
     FROM sys.sql_modules WITH (READUNCOMMITTED);

   INSERT
     INTO #sys_sql_modules
   SELECT m.* 
     FROM sys.sql_modules  AS m WITH (READUNCOMMITTED)
     JOIN #sys_objects     AS o
       ON m.object_id = o.object_id
    WHERE o.type IN (N''FT'',N''IF'',N''TF'');

   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N''    ... #sys_sql_modules''
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END

END TRY
BEGIN CATCH
   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N''    ... *** sys.sql_modules FAILED ***''
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END

END CATCH


DROP TABLE IF EXISTS #sys_internal_tables ;SELECT * INTO #sys_internal_tables FROM sys.internal_tables WITH (READUNCOMMITTED);
IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N''    ... #sys_internal_tables''
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

DROP TABLE IF EXISTS #sys_triggers        ;SELECT * INTO #sys_triggers        FROM sys.triggers WITH (READUNCOMMITTED);
IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N''    ... #sys_triggers''
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
RAISERROR(N''                 Start tempdb.dbo.SQLXL_Index_sys_objects ...'',0,0) WITH NOWAIT
;WITH newcol AS (
SELECT is_memory_optimized     = CONVERT(BIT,NULL)     -- SQL 2014+
      ,uses_native_compilation = CONVERT(BIT,NULL)     -- SQL 2014+
      --------------------------------------------
      ,is_inlineable           = CONVERT(BIT,NULL)     -- SQL 2019+
      ,inline_type             = CONVERT(BIT,NULL)     -- SQL 2019+
      --------------------------------------------
      ,ledger_view_type        = CONVERT(TINYINT,NULL) -- SQL 2022+, Azure SQL Database - sys.views
      ,ledger_view_type_desc   = CONVERT(SYSNAME,NULL) -- SQL 2022+, Azure SQL Database - sys.views
      ,is_dropped_ledger_view  = CONVERT(BIT,NULL)     -- SQL 2022+, Azure SQL Database - sys.views
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_objects WITH (TABLOCKX)'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_objects') + N'
  FROM newcol
 CROSS
 APPLY (
SELECT database_id      = DB_ID()
      ----------------------------------------------------------
      -- sys.objects
      ----------------------------------------------------------
      ,name             = o.name                       COLLATE ' + @collation + N'
      ,o.object_id
      ,o.principal_id
      ,o.schema_id
      ,history_source_object_id = COALESCE(cct.source_object_id,tht.object_id)

      ,parent_object_id = COALESCE(IIF(o.parent_object_id > 0,o.parent_object_id,NULL) -- NOTE: some IT have "SQ" sequence as parent type
                                  ,o.object_id)

      ,type             = CAST(o.type AS NVARCHAR(2))  COLLATE ' + @collation + N'
      ,type_desc        = o.type_desc                  COLLATE ' + @collation + N'
      ,o.create_date
      ,o.modify_date
      ,o.is_ms_shipped
      ,o.is_published
      ,o.is_schema_published
      ----------------------------------------------------------
      -- sys.sql_modules
      ----------------------------------------------------------
      ,definition = CONVERT(NVARCHAR(4000),m.definition)         COLLATE ' + @collation + N'
      ,uses_ansi_nulls
      ,uses_quoted_identifier
      ,is_schema_bound
      ,uses_database_collation
      ,is_recompiled
      ,null_on_null_input
      ,execute_as_principal_id
      ,uses_native_compilation
      ,is_inlineable
      ,inline_type
      ----------------------------------------------------------
      -- sys.internal_tables
      ----------------------------------------------------------
      ,internal_type             = it.internal_type
      ,internal_type_desc        = it.internal_type_desc         COLLATE ' + @collation + N'
      ,parent_id                 = it.parent_id
      ,parent_minor_id           = it.parent_minor_id
      ,lob_data_space_id         = it.lob_data_space_id
      ,filestream_data_space_id  = it.filestream_data_space_id
      ----------------------------------------------------------
      -- sys.triggers
      ----------------------------------------------------------
      ,tr_parent_class           = tr.parent_class
      ,tr_parent_class_desc      = tr.parent_class_desc           COLLATE ' + @collation + N'
      ,tr_parent_id              = tr.parent_id
      ,tr_type                   = tr.type                        COLLATE ' + @collation + N'
      ,tr_type_desc              = tr.type_desc                   COLLATE ' + @collation + N'
      ,tr_create_date            = tr.create_date
      ,tr_modify_date            = tr.modify_date
      ,tr_is_ms_shipped          = tr.is_ms_shipped
      ,tr_is_disabled            = tr.is_disabled
      ,tr_is_not_for_replication = tr.is_not_for_replication
      ,tr_is_instead_of_trigger  = tr.is_instead_of_trigger
      ----------------------------------------------------------
      -- sys.table_types
      ----------------------------------------------------------
      ,tt_is_memory_optimized    = is_memory_optimized
      ----------------------------------------------------------
      -- sys.views
      ----------------------------------------------------------
      ,vw_is_replicated               = is_replicated
      ,vw_has_replication_filter      = has_replication_filter
      ,vw_has_opaque_metadata         = has_opaque_metadata
      ,vw_has_unchecked_assembly_data = has_unchecked_assembly_data
      ,vw_with_check_option           = with_check_option
      ,vw_is_date_correlation_view    = is_date_correlation_view
      ,vw_ledger_view_type            = ledger_view_type
      ,vw_ledger_view_type_desc       = ledger_view_type_desc
      ,vw_is_dropped_ledger_view      = is_dropped_ledger_view
  FROM (SELECT *
          FROM sys.objects AS o WITH (READUNCOMMITTED)
         WHERE (   o.type IN (---------------------------------------------------------------------------------------------------
                              -- Indexable objects
                              ---------------------------------------------------------------------------------------------------
                              N''F''  -- Foreign Key Constraint
                             ,N''FT'' -- Assembly (CLR) table-valued function
                             ,N''IF'' -- SQL inline table-valued function
                             ,N''TF'' -- SQL table-valued-function            SQL 2012+
                             ,N''U''  -- Table (user-defined)
                             ,N''V''  -- View
                              ---------------------------------------------------------------------------------------------------
                              -- Other desired data objects
                              ---------------------------------------------------------------------------------------------------
                             ,N''C''  -- CHECK Constraint
                             ,N''D''  -- DEFAULT (constraint or stand-alone)
                             ,N''EC'' -- EDGE constraint
                             ,N''PK'' -- PRIMARY KEY constraint
                             ,N''SO'' -- SEQUENCE object
                             ,N''UQ'' -- UNIQUE constraint
                              --------------------------------------------------------------------------------------------------------------
                              -- Use to identify check constraints and computed columns using SQL procs & functions in their definitions
                              --------------------------------------------------------------------------------------------------------------
                             ,N''P''  -- Procedure
                             ,N''PC'' -- Assembly (CLR) stored-procedure
                             ,N''AF'' -- Aggregate function (CLR)
                             ,N''FN'' -- SQL scalar function
                             ,N''FS'' -- Assembly (CLR) scalar-function
                              ---------------------------------------------------------------------------------------------------
                              -- Other desired system objects
                              ---------------------------------------------------------------------------------------------------
                             ,N''FS'' -- Assembly (CLR) scalar-function
                             ,N''TA'' -- Assembly (CLR) DML trigger
                             ,N''TR'' -- SQL DML trigger
                             ,N''TT'' -- Table types, can also be memory optimized
                             )

                OR o.parent_object_id IN (-----------------------------------------------------------------------------------------
                                          -- anything connected to one of the desired object types, including Internal Tables (IT)
                                          -----------------------------------------------------------------------------------------
                                          SELECT object_id
                                            FROM #sys_objects
                                           WHERE is_ms_shipped = 0
                                             AND type IN (-------------------------------------------------------------
                                                          -- Indexable objects
                                                          -------------------------------------------------------------
                                                          N''F''  -- Foreign Key Constraint
                                                         ,N''FT'' -- Assembly (CLR) table-valued function
                                                         ,N''IF'' -- SQL inline table-valued function
                                                         ,N''TF'' -- SQL table-valued-function            SQL 2012+
                                                         ,N''U''  -- Table (user-defined)
                                                         ,N''V''  -- View
                                                          -------------------------------------------------------------
                                                          -- Other desired data objects
                                                          -------------------------------------------------------------
                                                         ,N''C''  -- CHECK Constraint
                                                         ,N''D''  -- DEFAULT (constraint or stand-alone)
                                                         ,N''EC'' -- Edge constraint
                                                         ,N''PK'' -- PRIMARY KEY constraint
                                                         ,N''SO'' -- Sequence object
                                                         ,N''UQ'' -- UNIQUE constraint
                                                         --------------------------------------------------------------
                                                         -- Other desired system objects
                                                         --------------------------------------------------------------
                                                        ,N''TT'' -- Table types, can also be memory optimized
                                                         )
                                         )
                OR o.object_id IN (SELECT type_table_object_id
                                     FROM #sys_table_types WITH (READUNCOMMITTED)
                                  )'

+ CASE WHEN (SELECT is_cdc_enabled                     -- database has change data capture (CDC) enabled
               FROM tempdb.dbo.SQLXL_Index_sys_databases
              WHERE database_id = @database_id
            ) = 1
       THEN N'
                OR o.object_id        IN (-----------------------------------------------------------------------------
                                          -- Change data capture (CDC) "CHANGE" tables
                                          -----------------------------------------------------------------------------
                                          SELECT object_id
                                            FROM tempdb.dbo.SQLXL_Index_cdc_change_tables WITH (READUNCOMMITTED)
                                           WHERE DB_ID() = database_id
                                         )'
       ELSE N''
  END + N'
               )
          AND NOT (o.type = N''IF'' AND o.name LIKE N''fn_cdc_get_%'') -- omitting since we cannot do anything to change them
          AND NOT (o.type = N''U''  AND o.name    = N''sysdiagrams'' )
       ) AS o

  LEFT OUTER -- HASH
  JOIN #sys_objects         AS op WITH (READUNCOMMITTED)
    ON o.parent_object_id    = op.object_id
                            
  LEFT OUTER -- HASH        
  JOIN #sys_views           AS vw WITH (READUNCOMMITTED)
    ON o.object_id           = vw.object_id
                            
  LEFT OUTER -- HASH        
  JOIN #sys_sql_modules     AS m WITH (READUNCOMMITTED)
    ON o.object_id           = m.object_id

  LEFT OUTER -- HASH
  JOIN #sys_internal_tables AS it WITH (READUNCOMMITTED)
    ON o.object_id           = it.object_id

  LEFT OUTER -- HASH
  JOIN #sys_triggers        AS tr WITH (READUNCOMMITTED)
    ON o.object_id           = tr.object_id

  LEFT OUTER -- HASH
  JOIN #sys_table_types     AS tt WITH (READUNCOMMITTED)
    ON o.object_id           = tt.type_table_object_id

  LEFT OUTER -- HASH
  JOIN (-------------------------------------------------------------------------
        -- For Temporal History Tables, get the parent it belongs to
        -------------------------------------------------------------------------
        SELECT database_id
              ,object_id
              ,history_table_id
          FROM tempdb.dbo.SQLXL_Index_sys_tables WITH (READUNCOMMITTED)
         WHERE history_table_id IS NOT NULL
       )                   AS tht
    ON DB_ID()              = tht.database_id
   AND o.object_id          = tht.history_table_id

  LEFT OUTER -- HASH
  JOIN tempdb.dbo.SQLXL_Index_cdc_change_tables AS cct WITH (READUNCOMMITTED)
    ON DB_ID()     = cct.database_id
   AND o.object_id = cct.object_id
   AND 1           = cct.capture_instance_ID

) AS qry
OPTION (RECOMPILE
       ,FORCE ORDER
       ,ROBUST PLAN
       ,OPTIMIZE FOR UNKNOWN
       ,MAXDOP 1);';

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_objects'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.objects,sys.views,sys.sql_modules,sys.internal_tables,sys.triggers,sys.table_types'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-- Add index to speed up subsequent queries
If @I = 1 -- only execute on first database
BEGIN
   IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_objects__object_id')
   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Index_sys_objects__object_id
       ON tempdb.dbo.SQLXL_Index_sys_objects
         (database_id
         ,object_id
         )
     WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N'    ... Created index on tempdb.dbo.SQLXL_Index_sys_objects'
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.data_spaces - includes sys.filegroups, sys.database_files, sys.partition_schemes, sys.partition_functions
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_data_spaces') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_data_spaces
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT is_system                     = CONVERT(BIT   ,NULL) -- SQL 2012+
      ,partition_function_is_system  = CONVERT(BIT   ,NULL) -- SQL 2012+
      -----------------------------------------------------
      ,is_autogrow_all_files         = CONVERT(BIT   ,NULL) -- SQL 2016+
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_data_spaces'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_data_spaces') + N'
  FROM newcol
 CROSS APPLY (
SELECT database_id                        = DB_ID()
      ,data_space_id                      = ds.data_space_id
      ,data_space_name                    = ds.name                   COLLATE ' + @collation + N'
      ,data_space_type                    = ds.type                   COLLATE ' + @collation + N'
      ,data_space_type_desc               = ds.type_desc              COLLATE ' + @collation + N'
      ,data_space_is_default              = ds.is_default
      ,data_space_is_system               = ds.is_system
      ----------------------------------------------------------------
      ,filegroup_guid
      ,filegroup_is_read_only             = fg.is_read_only
      ,filegroup_is_autogrow_all_files    = is_autogrow_all_files
      ----------------------------------------------------------------
      ,file_id                            = df.file_id
      ,file_guid                          = df.file_guid
      ,file_type                          = df.type
      ,file_type_desc                     = df.type_desc              COLLATE ' + @collation + N'
      ,file_logical_filename              = df.name                   COLLATE ' + @collation + N'
      ,file_physical_filename             = df.physical_name          COLLATE ' + @collation + N'
      ,file_state                         = df.state
      ,file_state_desc                    = df.state_desc             COLLATE ' + @collation + N'
      ,file_size_pages                    = df.size
      ,file_max_size_pages                = df.max_size
      ,file_growth                        = df.growth
      ,file_is_percent_growth             = df.is_percent_growth
      ----------------------------------------------------------------
      ,partition_function_id              = ps.function_id
      ----------------------------------------------------------------
      ,partition_function_name            = pf.name                   COLLATE ' + @collation + N'
      ,partition_function_type            = pf.type                   COLLATE ' + @collation + N'
      ,partition_function_type_desc       = pf.type_desc              COLLATE ' + @collation + N'
      ,partition_function_fanout          = pf.fanout
      ,partition_function_boundary_value  = CASE pf.boundary_value_on_right
                                                 WHEN 1 THEN N''RIGHT''
                                                 WHEN 0 THEN N''LEFT''
                                                 ELSE NULL
                                            END                       COLLATE ' + @collation + N'
      ,partition_function_is_system       = pf.is_system
      ,partition_function_create_date     = pf.create_date
      ,partition_function_modify_date     = pf.modify_date
  FROM (----------------------------------------------------------------
        --
        ----------------------------------------------------------------
        SELECT name
              ,data_space_id
              ,type
              ,type_desc
              ,is_default
              ,is_system
          FROM sys.data_spaces
       )                       AS ds
  LEFT OUTER
  JOIN (----------------------------------------------------------------
        --
        ----------------------------------------------------------------
        SELECT data_space_id
              ,filegroup_guid
              ,is_read_only
              ,is_autogrow_all_files
          FROM sys.filegroups
       )                       AS fg
    ON ds.data_space_id         = fg.data_space_id
  LEFT OUTER
  JOIN sys.database_files      AS df
    ON ds.data_space_id         = df.data_space_id
  LEFT OUTER
  JOIN (----------------------------------------------------------------
        --
        ----------------------------------------------------------------
        SELECT data_space_id
              ,function_id
          FROM sys.partition_schemes
       )                       AS ps
    ON ds.data_space_id         = ps.data_space_id
  LEFT OUTER
  JOIN (----------------------------------------------------------------
        --
        ----------------------------------------------------------------
        SELECT name
              ,function_id
              ,type
              ,type_desc
              ,fanout
              ,boundary_value_on_right
              ,is_system
              ,create_date
              ,modify_date
          FROM sys.partition_functions
       )                       AS pf
    ON ps.function_id           = pf.function_id
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_data_spaces'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.data_spaces, sys.filegroups, sys.database_files, sys.partition_schemes ,sys.partition_functions'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.default_constraints - used below for SEQUENCES, so get it here & reuse below - only grab from source once
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_default_constraints') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_default_constraints
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_default_constraints'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_default_constraints') + N'
  FROM (
SELECT database_id      = DB_ID()
      ,parent_object_id
      ,object_id
      ,type             = type      COLLATE ' + @collation + N'
      ,type_desc        = type_desc COLLATE ' + @collation + N'
      ,name             = name      COLLATE ' + @collation + N'
      ,parent_column_id
      ,definition       = CASE WHEN LEFT(definition,2) = N''(('' AND RIGHT(definition,2) = N''))''
                               THEN REVERSE(STUFF(REVERSE(STUFF(definition,1,1,N'''')),1,1,N''''))
                               ELSE definition
                          END       COLLATE ' + @collation + N'
      ,is_system_named
  FROM sys.default_constraints
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_default_constraints'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.default_constraints'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.types
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_types') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_types
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_types'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_types') + N'
  FROM (SELECT database_id       = DB_ID()
              ,name              = name           COLLATE ' + @collation + N'
              ,system_type_id
              ,user_type_id
              ,schema_id
              ,principal_id
              ,max_length
              ,precision
              ,scale
              ,collation_name    = collation_name COLLATE ' + @collation + N'
              ,is_nullable
              ,is_user_defined
              ,is_assembly_type
              ,default_object_id
              ,rule_object_id
              ,is_table_type
          FROM sys.types
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_types'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.types'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'                 Start sys.columns ...',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.columns + sys.identity_columns, sys.computed_columns, sys.sequences, sys.dm_sql_referencing_entities
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_columns') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_columns
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT -- SQL 2016+, SQL Database ------------------------------------
       generated_always_type               = CONVERT(TINYINT    ,NULL)
      ,generated_always_type_desc          = CONVERT(SYSNAME    ,NULL)  COLLATE ' + @collation + N'
      ,encryption_type                     = CONVERT(INT        ,NULL)
      ,encryption_type_desc                = CONVERT(SYSNAME    ,NULL)  COLLATE ' + @collation + N'
      ,encryption_algorithm_name           = CONVERT(SYSNAME    ,NULL)  COLLATE ' + @collation + N'
      ,column_encryption_key_id            = CONVERT(INT        ,NULL)
      ,column_encryption_key_database_name = CONVERT(SYSNAME    ,NULL)  COLLATE ' + @collation + N'
       -- SQL 2017+ --------------------------------------------------
      ,is_hidden                           = CONVERT(BIT        ,NULL)
      ,is_masked                           = CONVERT(BIT        ,NULL)
      ,graph_type                          = CONVERT(INT        ,NULL)
      ,graph_type_desc                     = CONVERT(SYSNAME    ,NULL)  COLLATE ' + @collation + N'
      ,last_used_value                     = CONVERT(BIGINT     ,NULL)
       -- 2022+, Azure SQL Database ----------------------------------
      ,is_data_deletion_filter_column      = CONVERT(BIT        ,NULL)
      ,ledger_view_column_type             = CONVERT(TINYINT    ,NULL)
      ,ledger_view_column_type_desc        = CONVERT(SYSNAME    ,NULL)  COLLATE ' + @collation + N'
      ,is_dropped_ledger_table_column      = CONVERT(BIT        ,NULL)
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_columns'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_columns') + N'
  FROM newcol
 CROSS APPLY (
SELECT database_id             = DB_ID()
      ,object_id               = c.object_id
      ,name                    = c.name                                COLLATE ' + @collation + N'
      ,c.column_id             
      ,user_type_name          = t.name
      ,c.system_type_id        
      ,c.user_type_id          
      ,max_length              = CASE WHEN c.user_type_id IN (231,239) AND c.max_length <> - 1 -- NVARCHAR,NCHAR
                                      THEN c.max_length / 2
                                      WHEN c.user_type_id IN (130,129)                         -- geography,geometry
                                      THEN 22
                                      ELSE c.max_length
                                 END
      ,c.precision             
      ,c.scale                 
      ,collation_name          = c.collation_name                      COLLATE ' + @collation + N'
      ,c.is_nullable           
      ,c.is_ansi_padded        
      ,c.is_rowguidcol         
      ,c.is_identity           
      ,c.is_computed           
      ,c.is_filestream         
      ,c.is_replicated         
      ,c.is_non_sql_subscribed 
      ,c.is_merge_published    
      ,c.is_dts_replicated     
      ,c.is_xml_document       
      ,c.xml_collection_id     
      ,c.default_object_id     
      ,c.rule_object_id        
      ,c.is_sparse             
      ,c.is_column_set         
       -- SQL 2016+ ---------------------------------------------------------------
      ,generated_always_type
      ,generated_always_type_desc          = generated_always_type_desc            COLLATE ' + @collation + N'
      ,encryption_type
      ,encryption_type_desc                = encryption_type_desc                  COLLATE ' + @collation + N'
      ,encryption_algorithm_name           = encryption_algorithm_name             COLLATE ' + @collation + N'
      ,column_encryption_key_id
      ,column_encryption_key_database_name = column_encryption_key_database_name   COLLATE ' + @collation + N'
       -- SQL 2017+ --------------------------------------------------------------
      ,is_hidden
      ,is_masked
      ,graph_type
      ,graph_type_desc                     = graph_type_desc                       COLLATE ' + @collation + N'
       -- SQL 2022+, SQL Database ------------------------------------------------
      ,ledger_view_column_type
      ,ledger_view_column_type_desc        = ledger_view_column_type_desc          COLLATE ' + @collation + N'
      ,is_dropped_ledger_table_column
      ,is_data_deletion_filter_column
      ----------------------------------------------------------------
      -- sys.identity_columns
      ----------------------------------------------------------------
      ,seed_value                          = CAST(id.seed_value      AS BIGINT)
      ,increment_value                     = CAST(id.increment_value AS BIGINT)
      ,last_value                          = CAST(id.last_value      AS BIGINT)
      ,id.is_not_for_replication
      ----------------------------------------------------------------
      -- sys.computed_columns
      ----------------------------------------------------------------
      ,definition                          = cc.definition                         COLLATE ' + @collation + N'
      ,uses_database_collation             = COALESCE(cc.uses_database_collation
                                                     ,IIF(  c.collation_name       COLLATE ' + @collation + N'
                                                          = d.collation_name       COLLATE ' + @collation + N'
                                                         ,1
                                                         ,0)
                                                     )
      ,is_persisted                        = cc.is_persisted
      ,uses_sql_proc                       = CAST(ISNULL(cc.uses_sql_proc,0) AS BIT)
      ,uses_sql_ftn                        = CAST(ISNULL(cc.uses_sql_ftn ,0) AS BIT)
      ,uses_sql_mthd                       = CAST(ISNULL(cc.uses_sql_mthd,0) AS BIT)

      ----------------------------------------------------------------
      -- sys.sequences + sys.dm_sql_referencing_entities
      ----------------------------------------------------------------
      ,seq_object_id                       = seq.default_object_id
      ,seq_name                            = seq.name                              COLLATE ' + @collation + N'
      ,seq_start_value                     = seq.start_value
      ,seq_increment                       = seq.increment
      ,seq_system_type_id                  = seq.system_type_id
      ,seq_user_type_id                    = seq.user_type_id
      ,seq_precision                       = seq.precision
      ,seq_scale                           = seq.scale
      ,seq_minimum_value                   = seq.minimum_value
      ,seq_maximum_value                   = seq.maximum_value
      ,seq_is_cycling                      = seq.is_cycling
      ,seq_is_cached                       = seq.is_cached
      ,seq_cache_size                      = seq.cache_size
      ,seq_current_value                   = seq.current_value
      ,seq_is_exhausted                    = seq.is_exhausted
      ,seq_last_used_value                 = seq.last_used_value
  FROM sys.columns                     AS c
 CROSS
  JOIN (----------------------------------------------------------------
        --
        ----------------------------------------------------------------
        SELECT collation_name
          FROM tempdb.dbo.SQLXL_Index_sys_databases
         WHERE DB_ID() = database_id
       )                                AS d
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
    ON DB_ID()                           = o.database_id
   AND c.object_id                       = o.object_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_types   AS t
    ON DB_ID()                           = t.database_id
   AND c.user_type_id                    = t.user_type_id
  LEFT OUTER
  JOIN (----------------------------------------------------------------
        --
        ----------------------------------------------------------------
        SELECT object_id
              ,column_id
              ,seed_value
              ,increment_value
              ,last_value
              ,is_not_for_replication
          FROM sys.identity_columns
       )                                AS id
    ON c.object_id                       = id.object_id
   AND c.column_id                       = id.column_id
  LEFT OUTER
  JOIN (----------------------------------------------------------------
        --
        ----------------------------------------------------------------
        SELECT object_id
              ,column_id
              ,definition
              ,uses_database_collation
              ,is_persisted
              ,uses_sql_proc = pf.uses_sql_proc
              ,uses_sql_ftn  = pf.uses_sql_ftn
              ,uses_sql_mthd = CAST(IIF(pf.uses_sql_proc = 1 OR pf.uses_sql_ftn = 1
                                       ,0
                                       ,IIF(CHARINDEX(N''].['',cc.definition COLLATE ' + @collation + N') > 0,1,0)) AS BIT)
          FROM sys.computed_columns AS cc
         CROSS
         APPLY (SELECT uses_sql_proc = MAX(IIF(o.type IN (N''P'',N''PC''),1,0))
                      ,uses_sql_ftn  = MAX(IIF(o.type IN (N''AF'',N''FN'',N''FS''),1,0))
                      ,uses_sql_mthd = MAX(IIF(o.type IS NULL,1,0))
                  FROM tempdb.dbo.SQLXL_Index_sys_objects AS o
                  JOIN tempdb.dbo.SQLXL_Index_sys_schemas AS s
                    ON o.database_id = s.database_id
                   AND o.SCHEMA_ID   = s.schema_id
                 WHERE DB_ID()       = o.database_id
                   AND o.type IN (N''AF'' -- Aggregate function (CLR)
                                 ,N''FN'' -- SQL scalar function
                                 ,N''FS'' -- Assembly (CLR) scalar-function
                                 ,N''P''  -- SQL Stored Procedure
                                 ,N''PC'' -- Assembly (CLR) stored-procedure
                                 )
                   AND CHARINDEX(QUOTENAME(s.name)+N''.''+QUOTENAME(o.name) COLLATE ' + @collation + N'
                                ,cc.definition COLLATE ' + @collation + N') > 0
               ) AS pf
       )                               AS cc
    ON c.object_id                      = cc.object_id
   AND c.column_id                      = cc.column_id
  LEFT OUTER
  JOIN (----------------------------------------------------------------
        -- look up the sequences that columns are DEFAULTED to
        ----------------------------------------------------------------
        SELECT default_object_id = sre.referencing_id
              ,name              = seq.name
              ,start_value       = CONVERT(BIGINT,seq.start_value)
              ,increment         = CONVERT(BIGINT,seq.increment)
              ,system_type_id    = seq.system_type_id
              ,user_type_id      = seq.user_type_id
              ,precision         = seq.precision
              ,scale             = seq.scale
              ,minimum_value     = CONVERT(BIGINT,seq.minimum_value)
              ,maximum_value     = CONVERT(BIGINT,seq.maximum_value)
              ,is_cycling        = seq.is_cycling
              ,is_cached         = seq.is_cached
              ,cache_size        = seq.cache_size
              ,current_value     = CONVERT(BIGINT,seq.current_value)
              ,is_exhausted      = seq.is_exhausted
              ,last_used_value   = CONVERT(BIGINT,last_used_value)
          FROM sys.sequences                    AS seq
          JOIN tempdb.dbo.SQLXL_Index_sys_schemas AS s
            ON DB_ID()                           = s.database_id
           AND seq.schema_id                     = s.schema_id
         CROSS
         APPLY sys.dm_sql_referencing_entities(s.name + ''.'' + seq.name,N''OBJECT'') sre
       ) seq
    ON c.default_object_id      = seq.default_object_id
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_columns'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... Captured sys.columns,sys.identity_columns,sys.computed_columns,sys.sequences,sys.dm_sql_referencing_entities'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.column_type_usages
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_column_type_usages') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_column_type_usages
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_column_type_usages'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_column_type_usages') + N'
  FROM (
SELECT database_id = DB_ID()
      ,object_id
      ,column_id
      ,user_type_id
  FROM sys.column_type_usages
) AS qry;'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_column_type_usages'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.column_type_usages'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Add Internal Tables to sys.tables collection in SQLXL_Index_sys_tables - used for downstream data compilation
-- NOTE: Internal Tables not found in sys.tables
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @database_id INT = DB_ID(N'DW_Master')
       ,@ssms        BIT = 0
--*/

INSERT
  INTO tempdb.dbo.SQLXL_Index_sys_tables
      (database_id
      ,object_id
      ,schema_id
      ,name
      ,type
      ,type_desc
      ,create_date
      ,modify_date
      ,lob_data_space_id
      ,filestream_data_space_id
      ,is_ms_shipped
      ,is_published
      ,is_schema_published
      ,uses_ansi_nulls
       ------------------------------------------------------------------------------------------------------
      ,is_internal
      ,internal_parent_id
      ,internal_parent_minor_id
       ------------------------------------------------------------------------------------------------------
      ,is_external
      ,max_column_id_used
      ,lock_on_bulk_load
      ,has_unchecked_assembly_data
      )
/*** LOCAL TESTING ***
DECLARE @database_id INT = DB_ID(N'DW_Master')
       ,@ssms        BIT = 0
--*/
SELECT database_id = @database_id
      ,o.object_id
      ,o.schema_id
      ,o.name
      ,o.type
      ,o.type_desc
      ,o.create_date
      ,o.modify_date
      ,o.lob_data_space_id
      ,o.filestream_data_space_id
      ,o.is_ms_shipped
      ,o.is_published
      ,o.is_schema_published
      ,o.uses_ansi_nulls
       ------------------------------------------------------------------------------------------------------
      ,is_internal                 = 1
      ,o.parent_id
      ,o.parent_minor_id
       ------------------------------------------------------------------------------------------------------
      ,is_external                 = 0
      ,max_column_id_used          = c.max_column_id_used
      ,lock_on_bulk_load           = 0
      ,has_unchecked_assembly_data = 0
  FROM tempdb.dbo.SQLXL_Index_sys_objects AS o
  JOIN (SELECT database_id
              ,object_id
              ,max_column_id_used = MAX(column_id)
          FROM tempdb.dbo.SQLXL_Index_sys_columns
         WHERE database_id = @database_id
         GROUP BY
               database_id
              ,object_id
       ) AS c
    ON o.database_id = c.database_id
   AND o.object_id   = c.object_id
 WHERE @database_id  = o.database_id
   AND N'IT'         = o.type;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... Add System Internal Tables to SQLXL_Index_sys_tables'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.check_constraints
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_check_constraints') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_check_constraints
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_check_constraints'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_check_constraints') + N'
  FROM (
SELECT database_id             = DB_ID()
      ,parent_object_id
      ,object_id
      ,type                    = type      COLLATE ' + @collation + N'
      ,type_desc               = type_desc COLLATE ' + @collation + N'
      ,name                    = name      COLLATE ' + @collation + N'
      ,parent_column_id
      ,definition              = CASE WHEN LEFT(definition,2) = N''(('' AND RIGHT(definition,2) = N''))''
                                      THEN REVERSE(STUFF(REVERSE(STUFF(definition,1,1,N'''')),1,1,N''''))
                                      ELSE definition
                                 END       COLLATE ' + @collation + N'
      ,is_disabled
      ,is_not_for_replication
      ,is_not_trusted
      ,uses_database_collation
      ,is_system_named
      ,uses_sql_proc = CAST(ISNULL(pf.uses_sql_proc,0) AS BIT)
      ,uses_sql_ftn  = CAST(ISNULL(pf.uses_sql_ftn ,0) AS BIT)
      ,uses_sql_mthd = CAST(IIF(pf.uses_sql_proc = 1 OR pf.uses_sql_ftn = 1
                               ,0
                               ,IIF(CHARINDEX(N''].['',cc.definition COLLATE ' + @collation + N') > 0,1,0)) AS BIT)
  FROM sys.check_constraints AS cc
 OUTER
 APPLY (SELECT uses_sql_proc = MAX(IIF(o.type IN (N''P'',N''PC''),1,0))
              ,uses_sql_ftn  = MAX(IIF(o.type IN (N''AF'',N''FN'',N''FS''),1,0))
          FROM tempdb.dbo.SQLXL_Index_sys_objects AS o
          JOIN tempdb.dbo.SQLXL_Index_sys_schemas AS s
            ON o.database_id = s.database_id
           AND o.schema_id   = s.schema_id
         WHERE DB_ID()       = o.database_id
           AND o.type IN (N''AF'' -- Aggregate function (CLR)
                         ,N''FN'' -- SQL scalar function
                         ,N''FS'' -- Assembly (CLR) scalar-function
                         ,N''P''  -- SQL Stored Procedure
                         ,N''PC'' -- Assembly (CLR) stored-procedure
                         )
           AND CHARINDEX(QUOTENAME(s.name)+N''.''+QUOTENAME(o.name) COLLATE ' + @collation + N'
                        ,cc.definition COLLATE ' + @collation + N') > 0
       ) AS pf
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_check_constraints'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.check_constraints'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.key_constraints
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_key_constraints') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_key_constraints
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT is_enforced = CONVERT(BIT,NULL)
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_key_constraints'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_key_constraints') + N'
  FROM newcol
 CROSS APPLY (
SELECT database_id      = DB_ID()
      ,parent_object_id
      ,object_id
      ,type             = type      COLLATE ' + @collation + N'
      ,type_desc        = type_desc COLLATE ' + @collation + N'
      ,name             = name      COLLATE ' + @collation + N'
      ,unique_index_id
      ,is_system_named
      ,is_enforced
  FROM sys.key_constraints AS c
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_key_constraints'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.key_constraints'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.edge_constraints - Introduced in SQL 2019
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_edge_constraints') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_edge_constraints
--*/
IF TRY_CAST(SERVERPROPERTY('ProductMajorVersion') AS INT) >= 15 -- SQL 2019+
BEGIN
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_edge_constraints'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_edge_constraints') + N'
  FROM (
SELECT database_id      = DB_ID()
      ,parent_object_id
      ,object_id
      ,index_id         = object_id
      ,type             = type      COLLATE ' + @collation + N'
      ,type_desc        = type_desc COLLATE ' + @collation + N'
      ,name             = name      COLLATE ' + @collation + N'
      ,is_disabled
      ,is_not_trusted
      ,delete_referential_action
      ,delete_referential_action_desc = delete_referential_action_desc COLLATE ' + @collation + N'
      ,is_system_named
  FROM sys.edge_constraints
) AS qry
OPTION (MAXDOP 1);'

   IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   BEGIN
      SELECT 'tempdb.dbo.SQLXL_Index_sys_edge_constraints'
            ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
            ,lsql=LEN(@sql)
            ,sql1=SUBSTRING(@sql,    1,16383)
            ,sql2=SUBSTRING(@sql,16384,16383)
            ,sql3=SUBSTRING(@sql,32768,16383);
      SET @dttm=GETDATE();
   END

   EXECUTE sp_executesql @sql; IF @@error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

END
ELSE  -- < SQL 2019
BEGIN
   IF @i = 1
   SELECT TOP (0)
          database_id                     = @database_id
         ,parent_object_id                = CONVERT(INT        ,NULL)
         ,object_id                       = CONVERT(INT        ,NULL)
         ,index_id                        = CONVERT(INT        ,NULL)
         ,type                            = CONVERT(TINYINT    ,NULL)
         ,type_desc                       = CONVERT(SYSNAME    ,NULL)
         ,name                            = CONVERT(SYSNAME    ,NULL)
         ,is_disabled                     = CONVERT(BIT        ,NULL)
         ,is_not_trusted                  = CONVERT(BIT        ,NULL)
         ,delete_referential_action       = CONVERT(TINYINT    ,NULL)
         ,delete_referential_action_desc  = CONVERT(SYSNAME    ,NULL)
         ,is_system_named                 = CONVERT(BIT        ,NULL)
     INTO tempdb.dbo.SQLXL_Index_sys_edge_constraints;
END

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.edge_constraints - SQL 2019+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.edge_constraint_clauses - Introduced in SQL 2019
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_edge_constraint_clauses') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_edge_constraint_clauses
--*/
IF TRY_CAST(SERVERPROPERTY('ProductMajorVersion') AS INT) >= 15 -- SQL 2019+
BEGIN
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_edge_constraint_clauses'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_edge_constraint_clauses') + N'
  FROM (
SELECT database_id             = DB_ID()
      ,object_id
      ,from_object_id
      ,to_object_id
      ,clause_number
  FROM sys.edge_constraint_clauses
) AS qry
OPTION (MAXDOP 1);'

   IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   BEGIN
      SELECT 'tempdb.dbo.SQLXL_Index_sys_edge_constraint_clauses'
            ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
            ,lsql=LEN(@sql)
            ,sql1=SUBSTRING(@sql,    1,16383)
            ,sql2=SUBSTRING(@sql,16384,16383)
            ,sql3=SUBSTRING(@sql,32768,16383);
      SET @dttm=GETDATE();
   END

   EXECUTE sp_executesql @sql; IF @@error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

END
ELSE  -- < SQL 2019
BEGIN
   IF @i = 1
   SELECT TOP (0)
          database_id           = @database_id
         ,object_id             = CONVERT(INT        ,NULL)
         ,from_object_id        = CONVERT(INT        ,NULL)
         ,to_object_id          = CONVERT(INT        ,NULL)
         ,clause_number         = CONVERT(INT        ,NULL)
     INTO tempdb.dbo.SQLXL_Index_sys_edge_constraint_clauses;
END

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.edge_constraint_clauses - SQL 2019+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.hash_indexes - Introduced in SQL 2014
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_hash_indexes') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_hash_indexes
--*/
IF TRY_CAST(SERVERPROPERTY('ProductMajorVersion') AS INT) >= 12 -- SQL 2014+
BEGIN
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_hash_indexes'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_hash_indexes') + N'
  FROM (SELECT database_id      = DB_ID()
              ,object_id        = object_id
              ,index_id         = index_id
              ,type             = type
              ,bucket_count     = bucket_count
          FROM sys.hash_indexes
) AS qry
OPTION (MAXDOP 1);'

   IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   BEGIN
      SELECT 'tempdb.dbo.SQLXL_Index_sys_hash_indexes'
            ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
            ,lsql=LEN(@sql)
            ,sql1=SUBSTRING(@sql,    1,16383)
            ,sql2=SUBSTRING(@sql,16384,16383)
            ,sql3=SUBSTRING(@sql,32768,16383);
      SET @dttm=GETDATE();
   END

   EXECUTE sp_executesql @sql; IF @@error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

END
ELSE  -- < SQL 2014
BEGIN
   IF @i = 1
   SELECT TOP (0)
          database_id      = @database_id
         ,object_id        = CONVERT(INT        ,NULL)
         ,index_id         = CONVERT(INT        ,NULL)
         ,type             = CONVERT(TINYINT    ,NULL)
         ,bucket_count     = CONVERT(INT        ,NULL)
     INTO tempdb.dbo.SQLXL_Index_sys_hash_indexes;
END

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.hash_indexes - SQL 2014+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.indexes + sys.spatial_indexes,sys.spatial_index_tessellations,sys.xml_indexes,sys.hash_indexes
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_indexes') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_indexes
--*/
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT -- SQL 2016+ --------------------------------------
       compression_delay               = CONVERT(INT,NULL) -- SQL 2016+
       -- SQL 2017+ --------------------------------------
      ,is_ignored_in_optimization      = CONVERT(BIT,NULL) -- SQL 2017+
      ,suppress_dup_key_messages       = CONVERT(BIT,NULL) -- SQL 2017+
       -- SQL 2019+ --------------------------------------
      ,optimize_for_sequential_key     = CONVERT(BIT,NULL) -- SQL 2019+
       -- Azure SQL Database -----------------------------
      ,auto_created                    = CONVERT(BIT,NULL) -- Azure SQL Database
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_indexes'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_indexes') + N'
  FROM newcol
 CROSS APPLY (
SELECT database_id                     = DB_ID()
      ,object_id                       = i.object_id
      ,name                            = i.name                               COLLATE ' + @collation + N'
      ,i.index_id
      ,type                            = CAST(i.type AS NVARCHAR(2))          COLLATE ' + @collation + N'
      ,type_desc                       = i.type_desc                          COLLATE ' + @collation + N'
      ,i.is_unique
      ,i.data_space_id
      ,i.ignore_dup_key
      ,i.is_primary_key
      ,i.is_unique_constraint
      ,i.fill_factor
      ,i.is_padded
      ,i.is_disabled
      ,i.is_hypothetical
      ,i.allow_row_locks
      ,i.allow_page_locks
      ,i.has_filter
      ,filter_definition               = i.filter_definition                  COLLATE ' + @collation + N'
      ,compression_delay
      ,is_ignored_in_optimization
      ,suppress_dup_key_messages
      ,auto_created
      ,optimize_for_sequential_key
      -----------------------------------------------------------------
      ,sub_type                        = COALESCE(si.spatial_index_type     ,xi.xml_index_type            )
      ,sub_type_desc                   = COALESCE(si.spatial_index_type_desc,xi.xml_index_type_description) COLLATE ' + @collation + N'
      -----------------------------------------------------------------
      ,si_tessellation_scheme          = si.tessellation_scheme              COLLATE ' + @collation + N'
      ,si_bounding_box_xmin            = st.bounding_box_xmin
      ,si_bounding_box_ymin            = st.bounding_box_ymin
      ,si_bounding_box_xmax            = st.bounding_box_xmax
      ,si_bounding_box_ymax            = st.bounding_box_ymax
      ,si_level_1_grid_desc            = st.level_1_grid_desc                COLLATE ' + @collation + N'
      ,si_level_2_grid_desc            = st.level_2_grid_desc                COLLATE ' + @collation + N'
      ,si_level_3_grid_desc            = st.level_3_grid_desc                COLLATE ' + @collation + N'
      ,si_level_4_grid_desc            = st.level_4_grid_desc                COLLATE ' + @collation + N'
      ,si_cells_per_object             = st.cells_per_object
      -----------------------------------------------------------------
      ,xml_index_type                  = xi.xml_index_type
      ,xml_index_type_description      = xi.xml_index_type_description       COLLATE ' + @collation + N'
      ,xml_using_xml_index_id          = xi.using_xml_index_id
      ,xml_secondary_type              = xi.secondary_type                   COLLATE ' + @collation + N'
      ,xml_secondary_type_desc         = xi.secondary_type_desc              COLLATE ' + @collation + N'
      ,xml_path_id                     = xi.path_id      -- NULL for all XML indexes except secondary selective XML index.
                                                         -- Else, the ID of the promoted path over which the secondary selective XML index
                                                         -- is built. This value is the same value AS path_id from
                                                         -- sys selective_xml_index_paths system view.
      -----------------------------------------------------------------
      ,hi_bucket_count                 = hi.bucket_count

  FROM sys.indexes                      AS i
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o -- filters out SYSTEM objects
    ON DB_ID()                           = o.database_id
   AND i.object_id                       = o.object_id
  LEFT OUTER
  JOIN (----------------------------------------------------------------
        --
        ----------------------------------------------------------------
        SELECT object_id
              ,index_id
              ,spatial_index_type
              ,spatial_index_type_desc
              ,tessellation_scheme
          FROM sys.spatial_indexes
       )           AS si
    ON i.object_id  = si.object_id
   AND i.index_id   = si.index_id
  LEFT OUTER
  JOIN (----------------------------------------------------------------
        --
        ----------------------------------------------------------------
        SELECT object_id
              ,index_id
              ,tessellation_scheme
              ,bounding_box_xmin
              ,bounding_box_ymin
              ,bounding_box_xmax
              ,bounding_box_ymax
              ,level_1_grid_desc
              ,level_2_grid_desc
              ,level_3_grid_desc
              ,level_4_grid_desc
              ,cells_per_object
          FROM sys.spatial_index_tessellations
       )           AS st
    ON i.object_id  = st.object_id
   AND i.index_id   = st.index_id
  LEFT OUTER
  JOIN (----------------------------------------------------------------
        --
        ----------------------------------------------------------------
        SELECT object_id
              ,index_id
              ,using_xml_index_id
              ,secondary_type
              ,secondary_type_desc
              ,xml_index_type
              ,xml_index_type_description
              ,path_id
          FROM sys.xml_indexes
       )           AS xi
    ON i.object_id  = xi.object_id
   AND i.index_id   = xi.index_id
  LEFT OUTER
  JOIN (----------------------------------------------------------------
        --
        ----------------------------------------------------------------
        SELECT object_id
              ,index_id
              ,type
              ,bucket_count
          FROM tempdb.dbo.SQLXL_Index_sys_hash_indexes
         WHERE DB_ID() = database_id
       )           AS hi
    ON i.object_id  = hi.object_id
   AND i.index_id   = hi.index_id
   AND i.TYPE       = hi.type
) AS qry
OPTION (FORCE ORDER,MAXDOP 1);' -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_indexes'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.indexes, sys.spatial_indexes, sys.spatial_index_tessellations, sys.xml_indexes, sys.hash_indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-- Add index to speed up subsequent queries
IF @i = 1 -- only execute on first database
BEGIN
   IF NOT EXISTS (SELECT NULL
                    FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                   WHERE name = N'ixuc_SQLXL_Index_sys_indexes')
   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Index_sys_indexes
       ON tempdb.dbo.SQLXL_Index_sys_indexes
         (database_id
         ,object_id
         ,index_id
         ,type
         )
     WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N'    ... Created index on tempdb.dbo.SQLXL_Index_sys_indexes'
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END

END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.fulltext_indexes
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_fulltext_indexes') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_fulltext_indexes
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT property_list_id = CONVERT(INT,NULL)
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_fulltext_indexes'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_fulltext_indexes') + N'
  FROM newcol
 CROSS APPLY (
SELECT database_id                = DB_ID()
      ,object_id                  = object_id
      ,unique_index_id
      ,fulltext_catalog_id
      ,is_enabled
      ,change_tracking_state      = change_tracking_state      COLLATE ' + @collation + N'
      ,change_tracking_state_desc = change_tracking_state_desc COLLATE ' + @collation + N'
      ,has_crawl_completed
      ,crawl_type                 = crawl_type                 COLLATE ' + @collation + N'
      ,crawl_type_desc            = crawl_type_desc            COLLATE ' + @collation + N'
      ,crawl_start_date
      ,crawl_end_date
      ,incremental_timestamp      = CONVERT(DATETIME,incremental_timestamp,25)
      ,stoplist_id
      ,data_space_id
      ,property_list_id
  FROM sys.fulltext_indexes
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_fulltext_indexes'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.fulltext_indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.fulltext_catalogs
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_fulltext_catalogs') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_fulltext_catalogs
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_fulltext_catalogs'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_fulltext_catalogs') + N'
  FROM (
SELECT database_id              = DB_ID()
      ,fulltext_catalog_id
      ,name                     = name COLLATE ' + @collation + N'
      ,is_default
      ,is_accent_sensitivity_on
      ,principal_id
      ,is_importing
  FROM sys.fulltext_catalogs
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_fulltext_catalogs'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.fulltext_catalogs'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.fulltext_index_catalog_usages
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_fulltext_index_catalog_usages') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_fulltext_index_catalog_usages
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_fulltext_index_catalog_usages'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_fulltext_index_catalog_usages') + N'
  FROM (
SELECT database_id              = DB_ID()
      ,object_id
      ,index_id
      ,fulltext_catalog_id
  FROM sys.fulltext_index_catalog_usages
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_fulltext_index_catalog_usages'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.fulltext_index_catalog_usages'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.foreign_keys
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_foreign_keys') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_foreign_keys
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_foreign_keys'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_foreign_keys') + N'
  FROM (
SELECT database_id = DB_ID()
      ,parent_object_id
      ,object_id
      ,name                           = name                           COLLATE ' + @collation + N'
      ,principal_id
      ,schema_id
      ,type                           = type                           COLLATE ' + @collation + N'
      ,type_desc                      = type_desc                      COLLATE ' + @collation + N'
      ,create_date
      ,modify_date
      ,is_ms_shipped
      ,is_published
      ,is_schema_published
      ,referenced_object_id
      ,key_index_id
      ,is_disabled
      ,is_not_for_replication
      ,is_not_trusted
      ,delete_referential_action
      ,delete_referential_action_desc = delete_referential_action_desc COLLATE ' + @collation + N'
      ,update_referential_action
      ,update_referential_action_desc = update_referential_action_desc COLLATE ' + @collation + N'
      ,is_system_named
  FROM sys.foreign_keys
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_foreign_keys'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.foreign_keys'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.foreign_key_columns
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_foreign_key_columns') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_foreign_key_columns
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_foreign_key_columns'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_foreign_key_columns') + N'
  FROM (
SELECT database_id = DB_ID()
      ,constraint_object_id
      ,constraint_column_id
      ,parent_object_id
      ,parent_column_id
      ,referenced_object_id
      ,referenced_column_id
  FROM sys.foreign_key_columns
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_foreign_key_columns'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.foreign_key_columns'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.index_columns
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_index_columns') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_index_columns
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
-- NOTE: will contain column list for ALL TYPES of objects - indexes, fulltext indexes, missing indexes, Foreign Key Constraints
-- NOTE: Used to drive the list of columns to get statistics details for the cursored routine below
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT column_store_order_ordinal = CONVERT(INT,NULL)
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_index_columns'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_index_columns') + N'
  FROM newcol
 CROSS APPLY (
SELECT database_id                = DB_ID()
      ,object_id                  = ic.object_id
      ,ic.index_id
      ,type                       = CAST(i.type AS NVARCHAR(2)) COLLATE ' + @collation + N'
      ,ic.index_column_id
      ,ic.column_id
      ,ic.key_ordinal
      ,ic.partition_ordinal
      ,ic.is_descending_key
      ,ic.is_included_column
      ,column_store_order_ordinal
      -- added control elements -----------------------------------
      ,key_column_sequence        = IIF(ic.index_id = 1,ic.key_ordinal,ic.index_column_id)  -- matches sequence with STATS order
      -- For Missing index-----------------------------------------
      ,column_usage               = CAST(NULL AS NVARCHAR(40))  COLLATE ' + @collation + N' -- also used for Missing index column usage
      -- For FULLTEXT ---------------------------------------------
      ,type_column_id             = CAST(NULL AS INT)         -- fulltext, stores the user-supplied document file extension
      ,language_id                = CAST(NULL AS INT)         -- fulltext, LCID of language whose word breaker is used to index this column.
      ,statistical_semantics      = CAST(NULL AS BIT)         -- fulltext, statistical semantics enabled in addition to full-text indexing
      -- To flag columns from the CLUSTERED index to avoid key synergies (same sequence, overlaps, contained index key elements)
      ,in_Clustered_index         = CAST(0 AS BIT)
      -- To flag index columns included in filter definitions
      ,is_index_column_filtered   = CAST(0 AS BIT)
  FROM (
        SELECT object_id                 = ic.object_id
              ,ic.index_id
              ,type                      = CONVERT(NVARCHAR(2),NULL) COLLATE ' + @collation + N'
              ,column_id
              ,index_column_id
              ,key_ordinal
              ,is_descending_key
              ,partition_ordinal
              ,column_store_order_ordinal
              ,is_included_column
          FROM sys.index_columns                AS ic
          JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
            ON DB_ID()                           = o.database_id
           AND ic.object_id                      = o.object_id
        UNION
        ---------------------------------------------------------------------------------
        -- Table Valued Function Columns - "FT" Assembly (CLR) table-valued function
        ---------------------------------------------------------------------------------
        SELECT object_id                  = c.object_id
              ,index_id                   = c.object_id
              ,type                       = o.type
              ,c.column_id
              ,index_column_id            = foc.order_column_id
              ,key_ordinal                = foc.order_column_id
              ,is_descending_key          = foc.is_descending
              ,partition_ordinal          = 0
              ,column_store_order_ordinal = 0
              ,is_included_column         = 0
          FROM sys.function_order_columns       AS foc -- Returns one row per column that is a part of an ORDER
                                                       -- expression of a common language runtime (CLR) table-valued
                                                       -- function. From source object directly, only used once
          JOIN tempdb.dbo.SQLXL_Index_sys_columns AS c
            ON DB_ID()                           = c.database_id
           AND foc.object_id                     = c.object_id
           AND foc.column_id                     = c.column_id
          JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
            ON c.database_id                     = o.database_id
           AND c.object_id                       = o.object_id
          JOIN tempdb.dbo.SQLXL_Index_sys_schemas AS s
            ON o.database_id                     = s.database_id
           AND o.schema_id                       = s.schema_id
      ) AS ic
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_indexes AS i
    ON DB_ID()                           = i.database_id
   AND ic.object_id                      = i.object_id
   AND ic.index_id                       = i.index_id
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_index_columns'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.index_columns, sys.function_order_columns'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Add index columns for additional index objects - missing indexes, fulltext indexes
-- NOTE: Foreign Key Constraints and table functions handled separately
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT statistical_semantics = CONVERT(INT,NULL)
)
INSERT INTO tempdb.dbo.SQLXL_Index_sys_index_columns
      (database_id
      ,object_id
      ,index_id
      ,type
      ,index_column_id
      ,column_id
      ,key_ordinal
      ,partition_ordinal
      ,is_descending_key
      ,is_included_column
      ,key_column_sequence
      ,column_usage
      ,type_column_id
      ,language_id
      ,statistical_semantics
      ,column_store_order_ordinal
      )
SELECT database_id                = DB_ID()
      ,object_id
      ,index_id
      ,type
      ,index_column_id
      ,column_id
      ,key_ordinal
      ,partition_ordinal          = 0
      ,is_descending_key
      ,is_included_column         = CASE WHEN column_usage = N''INCLUDE'' THEN 1 ELSE 0 END
      ,key_column_sequence        = index_column_id
      ,column_usage
      ,type_column_id
      ,language_id
      ,statistical_semantics
      ,column_store_order_ordinal = 0
  FROM (--------------------------------------------------------------------
        -- Missing index Columns - also used to get list of columns to get statistics for
        --------------------------------------------------------------------
        SELECT type                       = N''M''
              ,object_id                  = object_id
              ,index_id                   = index_handle
              ,index_column_id            = 0
              ,column_id                  = column_id
              ,key_ordinal                = 0
              ,is_descending_key          = NULL
              ,column_usage               = column_usage
              ,type_column_id             = NULL
              ,language_id                = NULL
              ,statistical_semantics      = NULL
          FROM tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_columns
         WHERE DB_ID() = database_id
        UNION ALL
        --------------------------------------------------------------------
        -- fulltext_index_columns - also used to get list of columns to get statistics for
        --------------------------------------------------------------------
        SELECT type                       = N''90''
              ,object_id                  = object_id
              ,index_id                   = object_id
              ,index_column_id            = 0
              ,column_id                  = column_id
              ,key_ordinal                = 0
              ,is_descending_key          = NULL
              ,column_usage               = NULL
              ,type_column_id             = type_column_id
              ,language_id                = language_id
              ,statistical_semantics
          FROM sys.fulltext_index_columns -- from SYS object directly, only used once
       ) i
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_index_columns - insert other object columns (MI,TX)'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... Added to sys.index_columns: sys.dm_db_missing_index_columns, sys.fulltext_index_columns'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-- Add index to speed up subsequent queries
IF @i = 1 -- only execute on first database if more than one
BEGIN
   IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_index_columns')
   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Index_sys_index_columns
       ON tempdb.dbo.SQLXL_Index_sys_index_columns
         (database_id
         ,object_id
         ,index_id
         ,type
         ,column_id
         )
     WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N'    ... Created index on tempdb.dbo.SQLXL_Index_sys_index_columns'
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.extended_properties
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_extended_properties') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_extended_properties
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_extended_properties'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_extended_properties') + N'
  FROM (
SELECT database_id = DB_ID()
      ,class
      ,class_desc = class_desc                    COLLATE ' + @collation + N'
      ,major_id
      ,minor_id
      ,name       = name                          COLLATE ' + @collation + N'
      ,value      = CONVERT(NVARCHAR(4000),value) COLLATE ' + @collation + N' -- NOTE: is type SQL_VARIANT
  FROM sys.extended_properties
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_extended_properties'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.extended_properties'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'                 Start sys.stats',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.stats
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_stats') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_stats
--*/

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT is_temporary                 = CONVERT(BIT    ,NULL)                             -- SQL 2012+
       ----------------------------------------------------
      ,is_incremental               = CONVERT(BIT    ,NULL)                             -- SQL 2014+
       ----------------------------------------------------
      ,has_persisted_sample         = CONVERT(BIT    ,NULL)                             -- SQL 2019+
      ,stats_generation_method      = CONVERT(INT    ,NULL)                             -- SQL 2019+
      ,stats_generation_method_desc = CONVERT(SYSNAME,NULL) COLLATE ' + @collation + N' -- SQL 2019+
       ----------------------------------------------------
      ,auto_drop                    = CONVERT(BIT    ,NULL)                             -- SQL 2022+
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_stats'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_stats') + N'
  FROM newcol
 CROSS APPLY (
SELECT database_id                  = DB_ID()
      ,object_id                    = s.object_id
      ,name                         = s.name                       COLLATE ' + @collation + N'
      ,s.stats_id
      ,s.auto_created
      ,s.user_created
      ,s.no_recompute
      ,s.has_filter
      ,filter_definition            = s.filter_definition          COLLATE ' + @collation + N'
      ,is_temporary
      ,is_incremental
      ,has_persisted_sample
      ,stats_generation_method
      ,stats_generation_method_desc = stats_generation_method_desc COLLATE ' + @collation + N'
      ,auto_drop
  FROM tempdb.dbo.SQLXL_Index_sys_objects AS o
  JOIN sys.stats                        AS s
    ON DB_ID()                           = o.database_id
   AND s.object_id                       = o.object_id
) AS qry;'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_stats'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'                 Start sys.stats_columns',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.stats_columns
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_stats_columns') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_stats_columns
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_stats_columns'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_stats_columns') + N'
  FROM (
SELECT database_id       = DB_ID()
      ,object_id         = s.object_id
      ,s.stats_id
      ,s.stats_column_id
      ,s.column_id
  FROM sys.stats_columns                AS s
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
    ON DB_ID()                           = o.database_id
   AND s.object_id                       = o.object_id
) AS qry
OPTION (FORCE ORDER,MAXDOP 1);'  -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_stats_columns'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.stats_columns'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'                 Start sys.dm_db_partition_stats',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.dm_db_partition_stats
-- NOTE: memory optimized table row_counts don't show up in sys.dm_db_partition_stats
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_dm_db_partition_stats') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_dm_db_partition_stats
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_dm_db_partition_stats'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_dm_db_partition_stats') + N'
  FROM (
SELECT database_id                    = DB_ID()
      ,object_id                      = ps.object_id
      ,index_id                       = ps.index_id
      ,Partition_CNT                  = COUNT(ps.partition_id)
      ,used_page_CNT                  = SUM(ps.used_page_count)
      ,in_row_data_page               = SUM(ps.in_row_data_page_count)
      ,in_row_used_page               = SUM(ps.in_row_used_page_count)
      ,in_row_reserved_page           = SUM(ps.in_row_reserved_page_count)
      ,lob_used_page                  = SUM(ps.lob_used_page_count)
      ,lob_reserved_page              = SUM(ps.lob_reserved_page_count)
      ,row_overflow_used_page         = SUM(ps.row_overflow_used_page_count)
      ,row_overflow_reserved_page     = SUM(ps.row_overflow_reserved_page_count)
      ,reserved_page                  = SUM(ps.reserved_page_count)
      ,row_count                      = SUM(ps.row_count)
  FROM sys.dm_db_partition_stats          AS ps WITH (READUNCOMMITTED)
 INNER HASH 
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o  WITH (READUNCOMMITTED)
    ON DB_ID()                           = o.database_id
   AND ps.object_id                      = o.object_id
 GROUP BY
       ps.object_id
      ,ps.index_id
) AS qry
OPTION (RECOMPILE
       ,FORCE ORDER
       ,ROBUST PLAN
       ,OPTIMIZE FOR UNKNOWN
       ,MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_dm_db_partition_stats'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.dm_db_partition_stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.dm_db_stats_properties
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_dm_db_stats_properties') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_dm_db_stats_properties
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT persisted_sample_percent = CONVERT(FLOAT,NULL)
)'
+IIF(@i > 1,N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_dm_db_stats_properties'
           +NCHAR(13)+NCHAR(10)+N'SELECT dsp.*'
           ,N'SELECT dsp.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_dm_db_stats_properties'
    ) + N'
  FROM newcol
 CROSS
  JOIN (SELECT object_id
              ,index_id
          FROM tempdb.dbo.SQLXL_Index_sys_indexes
         WHERE database_id = DB_ID()
       ) AS i
 CROSS
 APPLY (SELECT database_id      = DB_ID()
              ,object_id
              ,stats_id
              ,partition_number = CONVERT(INT,0)
              ,last_updated
              ,rows
              ,rows_sampled
              ,steps
              ,unfiltered_rows
              ,modification_counter
              ,persisted_sample_percent
         FROM sys.dm_db_stats_properties(i.object_id, i.index_id)
       ) AS dsp
OPTION (RECOMPILE
       ,FORCE ORDER
       ,ROBUST PLAN
       ,OPTIMIZE FOR UNKNOWN
       ,MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_dm_db_stats_properties'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.dm_db_stats_properties - used for modification_counter if SQL 2012+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.dm_db_incremental_stats_properties
-- This function was introduced in SQL Server 2014 (12.x) Service Pack 2 and SQL Server 2016 (13.x) Service Pack 1.
-- Function returns same basic structure as above
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_dm_db_incremental_stats_properties') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_dm_db_incremental_stats_properties
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
IF @i = 1
SELECT TOP (0)
       *
  INTO tempdb.dbo.SQLXL_Index_sys_dm_db_incremental_stats_properties
  FROM tempdb.dbo.SQLXL_Index_sys_dm_db_stats_properties;

--------------------------------------------------------------------------------------------------------------------------------------------
IF (        PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 14   -- SQL 2017+
    ------------------------------------------------------------------------------
    OR (    PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4)  = 13   -- SQL 2016
        AND PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),2) >= 4100 -- SP1+
       )
    ------------------------------------------------------------------------------
    OR (    PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4)  = 12   -- SQL 2014
        AND PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),2) >= 5000 -- SP2+
       )
   )
BEGIN
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT persisted_sample_percent = CONVERT(FLOAT,NULL)
)
INSERT INTO tempdb.dbo.SQLXL_Index_sys_dm_db_incremental_stats_properties
SELECT dsp.*
  FROM newcol
 CROSS
  JOIN (SELECT object_id
              ,index_id
          FROM tempdb.dbo.SQLXL_Index_sys_indexes
         WHERE database_id = DB_ID()
       ) AS i
 CROSS
 APPLY (SELECT database_id = DB_ID()
              ,object_id
              ,stats_id
              ,partition_number
              ,last_updated
              ,rows
              ,rows_sampled
              ,steps
              ,unfiltered_rows
              ,modification_counter
              ,persisted_sample_percent
         FROM sys.dm_db_incremental_stats_properties (i.object_id, i.index_id)
       ) AS dsp
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_dm_db_incremental_stats_properties '
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;
END;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.dm_db_incremental_stats_properties - partition modification_counter - SQL 2012SP2+,2016SP1+,2017+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'                 Start sys.partitions',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.partitions
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_partitions') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_partitions
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_partitions'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_partitions') + N'
  FROM (
SELECT database_id             = DB_ID()
      ,object_id               = p.object_id
      ,p.index_id
      ,p.hobt_id
      ,p.partition_id
      ,rows                    = SUM(rows)
      ,None_Comp               = SUM(CASE WHEN p.data_compression = CAST(0 AS TINYINT) THEN 1 ELSE 0 END) -- NONE
      ,Row_Comp                = SUM(CASE WHEN p.data_compression = CAST(1 AS TINYINT) THEN 1 ELSE 0 END) -- ROW
      ,Page_Comp               = SUM(CASE WHEN p.data_compression = CAST(2 AS TINYINT) THEN 1 ELSE 0 END) -- PAGE
      ,colstore_Comp           = SUM(CASE WHEN p.data_compression = CAST(3 AS TINYINT) THEN 1 ELSE 0 END) -- COLUMNSTORE
      ,colstore_Arch           = SUM(CASE WHEN p.data_compression = CAST(4 AS TINYINT) THEN 1 ELSE 0 END) -- COLUMNSTORE_ARCHIVE
  FROM sys.partitions                     AS p
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
    ON DB_ID()                           = o.database_id
   AND p.object_id                       = o.object_id
 GROUP BY
       p.object_id
      ,p.index_id
      ,p.hobt_id
      ,p.partition_id
) AS qry
OPTION (MAXDOP 1,FORCE ORDER);' -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_partitions'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.partitions'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

IF @ssms > 0 AND @i = 2 BEGIN                           -- SSMS and second database only
   RAISERROR(N'             ... Start index ixuc_SQLXL_Index_sys_partitions',0,0) WITH NOWAIT;
END

-- Add index to speed up subsequent queries
IF @i = 2 -- only execute on second database if more than one
BEGIN
   IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_partitions')
   CREATE CLUSTERED
    index ixuc_SQLXL_Index_sys_partitions
       ON tempdb.dbo.SQLXL_Index_sys_partitions
         (database_id
         ,object_id
         ,index_id
         )
     WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N'    ... Created index ixuc_SQLXL_Index_sys_partitions'
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.internal_partitions - Introduced in SQL 2016
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_internal_partitions') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_internal_partitions
--*/
IF TRY_CAST(SERVERPROPERTY('ProductMajorVersion') AS INT) >= 13 -- SQL 2016+
OR CONVERT(SYSNAME,SERVERPROPERTY(N'Edition')) = N'SQL Azure'   -- Azure SQL Database
BEGIN -- SQL 2016+, AZURE SQL
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT optimize_for_sequential_key = CONVERT(BIT,NULL) -- SQL 2019+, Azure SQL Database
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_internal_partitions'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_internal_partitions') + N'
  FROM newcol
 CROSS APPLY (
SELECT database_id               = db_id()
      ,partition_id
      ,object_id
      ,index_id
      ,partition_number
      ,hobt_id
      ,internal_object_type
      ,internal_object_type_desc = internal_object_type_desc COLLATE ' + @collation + N'
      ,row_group_id
      ,rows
      ,data_compression
      ,data_compression_desc     = data_compression_desc     COLLATE ' + @collation + N'
      ,optimize_for_sequential_key
  FROM sys.internal_partitions
) AS qry
OPTION (MAXDOP 1);'

   IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   BEGIN
      SELECT 'tempdb.dbo.SQLXL_Index_sys_internal_partitions'
            ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
            ,lsql=LEN(@sql)
            ,sql1=SUBSTRING(@sql,    1,16383)
            ,sql2=SUBSTRING(@sql,16384,16383)
            ,sql3=SUBSTRING(@sql,32768,16383);
      SET @dttm=GETDATE();
   END

   EXECUTE sp_executesql @sql; IF @@error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

END
ELSE  -- < SQL 2016
BEGIN
   IF @i = 1
   SELECT TOP (0)
          database_id                = DB_ID()
         ,partition_id                = CONVERT(BIGINT ,NULL)
         ,object_id                   = CONVERT(INT    ,NULL)
         ,index_id                    = CONVERT(INT    ,NULL)
         ,partition_number            = CONVERT(INT    ,NULL)
         ,hobt_id                     = CONVERT(BIGINT ,NULL)
         ,internal_object_type        = CONVERT(TINYINT,NULL)
         ,internal_object_type_desc   = CONVERT(SYSNAME,NULL) COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,row_group_id                = CONVERT(INT    ,NULL)
         ,rows                        = CONVERT(BIGINT ,NULL)
         ,data_compression            = CONVERT(TINYINT,NULL)
         ,data_compression_desc       = CONVERT(SYSNAME,NULL) COLLATE DATABASE_DEFAULT -- script is running in tempdb
         ,optimize_for_sequential_key = CONVERT(BIT,NULL)
     INTO tempdb.dbo.SQLXL_Index_sys_internal_partitions;
END

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.internal_partitions - 2016+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- In-Memory (XTP) Objects
-- NOTE: sys.dm_db_xtp_hash_index_stats ARE OMITTED, since it scans the entire table
--       Used to understand and tune the HASH bucket counts. It can also be used to detect cases where the index key has many duplicates.
-- Columns marked "Internal use only" are omitted
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_dm_db_xtp_index_stats') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_dm_db_xtp_index_stats
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT uses_key_normalization = CONVERT(BIT   ,NULL) -- 2016+
      ,xtp_object_id          = CONVERT(BIGINT,NULL) -- 2016+
)'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_dm_db_xtp_index_stats'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_dm_db_xtp_index_stats') + N'
  FROM newcol
CROSS APPLY ('
+IIF(PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 12 -- SQL 2014+
,N'SELECT database_id         = DB_ID()
      ,object_id           = t.object_id
      ,table_name          = t.name COLLATE ' + @collation + N'
      ,i.index_id
      ,type                = CAST(i.type AS NVARCHAR(2)) COLLATE ' + @collation + N'
      ,i.type_desc
      ,index_name          = COALESCE(i.name COLLATE ' + @collation + N',i.type_desc COLLATE ' + @collation + N')
      ,i.is_unique
      -- sys.dm_db_xtp_object_stats ------------- Columns marked "Internal use only" are omitted
      ,xos.row_insert_attempts
      ,xos.row_update_attempts
      ,xos.row_delete_attempts
      ,xos.write_conflicts
      ,xos.unique_constraint_violations
      -- sys.dm_db_xtp_index_stats -------------- Columns marked "Internal use only" are omitted
      ,xis.scans_started
      ,xis.scans_retries
      ,xis.rows_returned
      ,xis.rows_touched
      -- sys.dm_db_xtp_Nonclustered_index_stats -
      ,nis.delta_pages
      ,nis.leaf_pages
      ,nis.page_update_count
      ,nis.page_update_retry_count
      ,nis.page_consolidation_count
      ,nis.page_consolidation_retry_count
      ,nis.page_split_count
      ,nis.page_split_retry_count
      ,nis.key_split_count
      ,nis.key_split_retry_count
      ,nis.page_merge_count
      ,nis.page_merge_retry_count
      ,nis.key_merge_count
      ,nis.key_merge_retry_count
      ,nis.uses_key_normalization
      -- sys.dm_db_xtp_memory_consumers --------- Columns marked "Internal use only" are omitted
      ,mc.allocated_bytes
      ,mc.used_bytes
      ,mc.allocation_count
  FROM (------------------------------------------------------------------------------------------------------------------------------------
        -- List of candidate memory optimized tables in this database
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id = DB_ID()
              ,object_id   = t.object_id
              ,name        = t.name
          FROM tempdb.dbo.SQLXL_Index_sys_tables AS t
         WHERE t.database_id                    = DB_ID()
           AND t.is_memory_optimized            = 1           -- only returns tables that are memory optimized
       ) AS t
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_indexes        AS i
    ON t.database_id                            = i.database_id
   AND t.object_id                              = i.object_id   -- only XTP memory optimized tables selected above
  LEFT OUTER
  JOIN sys.dm_db_xtp_object_stats              AS xos
    ON i.object_id                              = xos.object_id
   AND i.index_id                               = 0
  LEFT OUTER
  JOIN sys.dm_db_xtp_index_stats               AS xis
    ON i.object_id                              = xis.object_id
   AND i.index_id                               = xis.index_id
  LEFT OUTER HASH
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Add up memory optimized index stats from sys.dm_db_xtp_Nonclustered_index_stats
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT object_id
              ,index_id
              ,delta_pages                    = SUM(delta_pages                   )
              ,leaf_pages                     = SUM(leaf_pages                    )
              ,page_update_count              = SUM(page_update_count             )
              ,page_update_retry_count        = SUM(page_update_retry_count       )
              ,page_consolidation_count       = SUM(page_consolidation_count      )
              ,page_consolidation_retry_count = SUM(page_consolidation_retry_count)
              ,page_split_count               = SUM(page_split_count              )
              ,page_split_retry_count         = SUM(page_split_retry_count        )
              ,key_split_count                = SUM(key_split_count               )
              ,key_split_retry_count          = SUM(key_split_retry_count         )
              ,page_merge_count               = SUM(page_merge_count              )
              ,page_merge_retry_count         = SUM(page_merge_retry_count        )
              ,key_merge_count                = SUM(key_merge_count               )
              ,key_merge_retry_count          = SUM(key_merge_retry_count         )
              ,uses_key_normalization         = CAST(MAX(CAST(uses_key_normalization AS TINYINT)) AS BIT)
          FROM (----------------------------------------------------------------------------------------------------------------------------
                -- required to avoid error message "Aggregates on the right side of an APPLY cannot reference columns from the left side"
                -- referencing newcol CTE
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT object_id
                      ,index_id
                      ,delta_pages
                      ,leaf_pages
                      ,page_update_count
                      ,page_update_retry_count
                      ,page_consolidation_count
                      ,page_consolidation_retry_count
                      ,page_split_count
                      ,page_split_retry_count
                      ,key_split_count
                      ,key_split_retry_count
                      ,page_merge_count
                      ,page_merge_retry_count
                      ,key_merge_count
                      ,key_merge_retry_count
                      ,uses_key_normalization
                  FROM sys.dm_db_xtp_Nonclustered_index_stats
               ) xnis
         GROUP BY
               object_id
              ,index_id
       ) AS nis
    ON i.object_id                             = nis.object_id
   AND i.index_id                              = nis.index_id
  LEFT OUTER HASH
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- sys.dm_db_xtp_memory_consumers
        -- NOTE: sys.dm_db_xtp_table_memory_stats sums up xtp_memory_consumer to the table level
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT object_id
              ,index_id         = CASE WHEN index_id IS NULL THEN 0 ELSE index_id END
              ,allocated_bytes  = SUM(allocated_bytes )
              ,used_bytes       = SUM(used_bytes      )
              ,allocation_count = SUM(allocation_count)
          FROM sys.dm_db_xtp_memory_consumers -- NOTE: sys.dm_xtp_system_memory_consumers are system objects ONLY
         WHERE object_id  > 0                 -- omit system objects
         GROUP BY
               object_id
              ,CASE WHEN index_id IS NULL THEN 0 ELSE index_id END
       ) AS mc
    ON i.object_id                             = mc.object_id
   AND i.index_id                              = mc.index_id'

--------------------------------------------------------------------------------------------------
-- "False" element of "IIF(PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 12"
--------------------------------------------------------------------------------------------------
,N'SELECT TOP (0)
         database_id                    = DB_ID()
        ,object_id                      = CAST(NULL AS INT    )
        ,table_name                     = CAST(NULL AS SYSNAME)     COLLATE ' + @collation + N'
        ,index_id                       = CAST(NULL AS INT    )
        ,type                           = CAST(NULL AS NVARCHAR(2)) COLLATE ' + @collation + N'
        ,type_desc                      = CAST(NULL AS SYSNAME)     COLLATE ' + @collation + N'
        ,index_name                     = CAST(NULL AS SYSNAME)     COLLATE ' + @collation + N'
        ,is_unique                      = CAST(NULL AS BIT    )
      -- sys.dm_db_xtp_object_stats -------------
        ,row_insert_attempts            = CAST(NULL AS BIGINT )
        ,row_update_attempts            = CAST(NULL AS BIGINT )
        ,row_delete_attempts            = CAST(NULL AS BIGINT )
        ,write_conflicts                = CAST(NULL AS BIGINT )
        ,unique_constraint_violations   = CAST(NULL AS BIGINT )
      -- sys.dm_db_xtp_index_stats --------------
        ,scans_started                  = CAST(NULL AS BIGINT )
        ,scans_retries                  = CAST(NULL AS BIGINT )
        ,rows_returned                  = CAST(NULL AS BIGINT )
        ,rows_touched                   = CAST(NULL AS BIGINT )
      -- sys.dm_db_xtp_Nonclustered_index_stats -
        ,delta_pages                    = CAST(NULL AS BIGINT )
        ,leaf_pages                     = CAST(NULL AS BIGINT )
        ,page_update_count              = CAST(NULL AS BIGINT )
        ,page_update_retry_count        = CAST(NULL AS BIGINT )
        ,page_consolidation_count       = CAST(NULL AS BIGINT )
        ,page_consolidation_retry_count = CAST(NULL AS BIGINT )
        ,page_split_count               = CAST(NULL AS BIGINT )
        ,page_split_retry_count         = CAST(NULL AS BIGINT )
        ,key_split_count                = CAST(NULL AS BIGINT )
        ,key_split_retry_count          = CAST(NULL AS BIGINT )
        ,page_merge_count               = CAST(NULL AS BIGINT )
        ,page_merge_retry_count         = CAST(NULL AS BIGINT )
        ,key_merge_count                = CAST(NULL AS BIGINT )
        ,key_merge_retry_count          = CAST(NULL AS BIGINT )
        ,uses_key_normalization         = CAST(NULL AS BIT    )
      -- sys.dm_db_xtp_memory_consumers ---------
        ,allocated_bytes                = CAST(NULL AS BIGINT )
        ,used_bytes                     = CAST(NULL AS BIGINT )
        ,allocation_count               = CAST(NULL AS BIGINT )'
)                                                                -- end of IIF TRY_CAST(SERVERPROPERTY('ProductMajorVersion') AS INT) >= 12
+N') AS qry
OPTION (FORCE ORDER,MAXDOP 1);'; -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_dm_db_xtp_index_stats'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.dm_db_xtp_index_stats, sys.xtp_object_stats, sys.xtp_Nonclustered_index_stats, sys.xtp_memory_consumers'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'                 Start sys.dm_os_buffer_descriptors_EXT (aggregates)',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Add partition & object/index name info to sys.dm_os_buffer_descriptors to create SQLXL_Index_sys_dm_os_buffer_descriptors_EXT
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors_EXT') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors_EXT
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors_EXT'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors_EXT') +N'
  FROM (
SELECT database_id      = DB_ID()
      ,b.object_id
      ,obj_name         = b.obj_name    COLLATE ' + @collation + N'
      ,b.index_id
      ,index_name       = b.index_name  COLLATE ' + @collation + N'
      ,b.type
      ,type_desc        = b.type_desc   COLLATE ' + @collation + N'
      ,b.row_count
      ,b.buffer_total_KB
      ,b.buffer_free_KB
      ,b.read_microsec_AVG
  FROM (
        SELECT object_id         = o.object_id
              ,obj_name          = o.name
              ,index_id          = i.index_id
              ,index_name        = COALESCE(i.name COLLATE SQL_Latin1_General_CP1_CI_AS,i.type_desc COLLATE SQL_Latin1_General_CP1_CI_AS)
              ,type              = i.type
              ,type_desc         = i.type_desc
              ,row_count         = SUM(obd.row_count)
              ,buffer_total_KB   = SUM(obd.buffer_total_KB)
              ,buffer_free_KB    = SUM(obd.buffer_free_KB )
              ,read_microsec_AVG = SUM(obd.buffer_total_KB * obd.read_microsec_AVG)/SUM(obd.buffer_total_KB)
          FROM (
                SELECT allocation_unit_id
                      ,row_count
                      ,buffer_free_KB
                      ,buffer_total_KB
                      ,read_microsec_AVG
                  FROM tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors
                 WHERE DB_ID()                      = database_id
               )                                   AS obd
          LEFT OUTER
          JOIN sys.allocation_units                AS au
            ON obd.allocation_unit_id               = au.allocation_unit_id
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_partitions AS ph
            ON 1 = 1
           AND DB_ID()                              = ph.database_id
           AND au.container_id                      = ph.hobt_id
           AND au.type                             IN (1,3) -- In-row data (all data types, except LOB data types) & Row-overflow data
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_partitions AS pp
            ON 1 = 1
           AND DB_ID()                              = pp.database_id
           AND au.container_id                      = pp.partition_id
           AND au.type                              = 2    -- Large object (LOB) data (text,ntext,image,xml,large value types,and CLR UDT)
          JOIN tempdb.dbo.SQLXL_Index_sys_objects    AS o  -- OUTER JOIN not used in order to filter out system objects
            ON 1 = 1
           AND DB_ID()                              = o.database_id
           AND COALESCE(ph.object_id,pp.object_id)  = o.object_id
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_indexes    AS i
            ON DB_ID()                              = i.database_id
           AND COALESCE(ph.object_id,pp.object_id)  = i.object_id
           AND COALESCE(ph.index_id ,pp.index_id )  = i.index_id
         GROUP BY
               o.object_id
              ,o.name
              ,i.index_id
              ,COALESCE(i.name COLLATE SQL_Latin1_General_CP1_CI_AS,i.type_desc COLLATE SQL_Latin1_General_CP1_CI_AS)
              ,i.type
              ,i.type_desc
       ) b
) AS qry OPTION (FORCE ORDER,MAXDOP 1);' -- Force order eliminates "Warning: join order enforced because a local join hint is used."
-- OPTION used to suppress "Warning: The join order has been enforced because a local join hint is used"'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors_EXT'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.dm_os_buffer_descriptors_EXT (aggregates)'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
/* 2016+ */
-- Collect sys.dm_db_column_store_row_group_physical_stats
-- includes all columns in sys.column_store_row_groups
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    ,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats'
    +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
    ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
    +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats')
    +N'
  FROM ('
+IIF(PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 13 -- SQL 2016+
,N'SELECT
       database_id                         = DB_ID()
      ,object_id                           = object_id
      ,index_id
      ,partition_number
      ,row_group_id
      ,delta_store_hobt_id
      ,state
      ,state_desc                          = state_desc                          COLLATE ' + @collation + N'
      ,total_rows
      ,deleted_rows
      ,size_in_bytes
      ,trim_reason
      ,trim_reason_desc                    = trim_reason_desc                    COLLATE ' + @collation + N'
      ,transition_to_compressed_state
      ,transition_to_compressed_state_desc = transition_to_compressed_state_desc COLLATE ' + @collation + N'
      ,has_vertipaq_optimization
      ,generation
      ,created_time
      ,closed_time
  FROM sys.dm_db_column_store_row_group_physical_stats'
--------------------------------------------------------------------------------------------------
-- "False" element of "IIF(PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 13"
--------------------------------------------------------------------------------------------------
,N'SELECT TOP (0)
       database_id                         = DB_ID()
      ,object_id                           = CAST(NULL AS INT     )
      ,index_id                            = CAST(NULL AS INT     )
      ,partition_number                    = CAST(NULL AS INT     )
      ,row_group_id                        = CAST(NULL AS INT     )
      ,delta_store_hobt_id                 = CAST(NULL AS BIGINT  )
      ,state                               = CAST(NULL AS TINYINT )
      ,state_desc                          = CAST(NULL AS SYSNAME ) COLLATE ' + @collation + N'
      ,total_rows                          = CAST(NULL AS BIGINT  )
      ,deleted_rows                        = CAST(NULL AS BIGINT  )
      ,size_in_bytes                       = CAST(NULL AS BIGINT  )
      ,trim_reason                         = CAST(NULL AS TINYINT )
      ,trim_reason_desc                    = CAST(NULL AS SYSNAME ) COLLATE ' + @collation + N'
      ,transition_to_compressed_state      = CAST(NULL AS TINYINT )
      ,transition_to_compressed_state_desc = CAST(NULL AS SYSNAME ) COLLATE ' + @collation + N'
      ,has_vertipaq_optimization           = CAST(NULL AS BIT     )
      ,generation                          = CAST(NULL AS BIGINT  )
      ,created_time                        = CAST(NULL AS DATETIME)
      ,closed_time                         = CAST(NULL AS DATETIME)'
)
+N') AS qry
OPTION (MAXDOP 1,FORCE ORDER);' -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.dm_db_column_store_row_group_physical_stats - 2016+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.dm_db_column_store_row_group_operational_stats - SQL 2016+
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
--------------------------------------------------------------------------------------------------------------------------------------------
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats
--*/
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (
SELECT -- SQL 2019+ -----------------------------------
       returned_row_COUNT        = CONVERT(BIGINT,NULL) -- SQL 2019+
      ,returned_aggregate_COUNT  = CONVERT(BIGINT,NULL) -- SQL 2019+
      ,returned_group_COUNT      = CONVERT(BIGINT,NULL) -- SQL 2019+
      ,input_groupby_row_COUNT   = CONVERT(BIGINT,NULL) -- SQL 2019+
)'
+IIF(@i > 1
    ,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats'
    +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
    ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
    +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats')
    +N'
  FROM newcol
 CROSS APPLY ('
+IIF(PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 13 -- SQL 2016+
,N'
SELECT database_id             = DB_ID()
      ,object_id               = object_id
      ,index_id
      ,partition_CNT           = COUNT(partition_number       )
      ,row_group_CNT           = COUNT(row_group_id           )
      ,index_scan_CNT          = SUM(index_scan_count         )
      ,scan_CNT                = SUM(scan_count               )
      ,delete_buffer_scan_CNT  = SUM(delete_buffer_scan_count )
      ,row_group_lock_CNT      = SUM(row_group_lock_count     )
      ,row_group_lock_wait_CNT = SUM(row_group_lock_wait_count)
      ,row_group_lock_wait_MS  = SUM(row_group_lock_wait_in_ms)
      ,returned_row_CNT        = SUM(returned_row_count       )
      ,returned_aggregate_CNT  = SUM(returned_aggregate_count )
      ,returned_group_CNT      = SUM(returned_group_count     )
      ,input_groupby_row_CNT   = SUM(input_groupby_row_count  )
  FROM (SELECT object_id
              ,index_id
              ,partition_number
              ,row_group_id
              ,index_scan_count
              ,scan_count
              ,delete_buffer_scan_count
              ,row_group_lock_count
              ,row_group_lock_wait_count
              ,row_group_lock_wait_in_ms
              ,returned_row_count
              ,returned_aggregate_count
              ,returned_group_count
              ,input_groupby_row_count
          FROM sys.dm_db_column_store_row_group_operational_stats
       ) AS q
 GROUP BY
       object_id
      ,index_id'
--------------------------------------------------------------------------------------------------------------
-- "False" element of "IIF(PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 13" -- SQL 2016+
--------------------------------------------------------------------------------------------------------------
,N'
SELECT TOP (0)
       database_id             = DB_ID()
      ,object_id               = CAST(NULL AS INT   )
      ,index_id                = CAST(NULL AS INT   )
      ,partition_CNT           = CAST(NULL AS INT   )
      ,row_group_CNT           = CAST(NULL AS INT   )
      ,index_scan_CNT          = CAST(NULL AS BIGINT)
      ,scan_CNT                = CAST(NULL AS BIGINT)
      ,delete_buffer_scan_CNT  = CAST(NULL AS BIGINT)
      ,row_group_lock_CNT      = CAST(NULL AS BIGINT)
      ,row_group_lock_wait_CNT = CAST(NULL AS BIGINT)
      ,row_group_lock_wait_MS  = CAST(NULL AS BIGINT)
      ,returned_row_CNT        = CAST(NULL AS BIGINT)
      ,returned_aggregate_CNT  = CAST(NULL AS BIGINT)
      ,returned_group_CNT      = CAST(NULL AS BIGINT)
      ,input_groupby_row_CNT   = CAST(NULL AS BIGINT)'
)
+N'
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.dm_db_column_store_row_group_operational_stats - 2016+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.index_resumable_operations - SQL 2017+
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_index_resumable_operations') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_index_resumable_operations
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_index_resumable_operations'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_index_resumable_operations') +N'
  FROM ('
+IIF(PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 14 -- SQL 2017+
,N'
SELECT database_id          = DB_ID()
      ,object_id            = object_id
      ,index_id
      ,state_desc           = state_desc                COLLATE ' + @collation + N'
      ,partition_CNT        = COUNT(partition_number)
      ,start_time           = MIN(start_time)
      ,last_pause_time      = MAX(last_pause_time)
      ,total_execution_time = MAX(total_execution_time)
      ,page_count           = SUM(page_count)
      ,percent_complete_MIN = MIN(percent_complete)
      ,percent_complete_MAX = MAX(percent_complete)
      ,sql_text             = MAX(sql_text)             COLLATE ' + @collation + N'
  FROM sys.index_resumable_operations
 GROUP BY
       object_id
      ,index_id
      ,state_desc'
--------------------------------------------------------------------------------------------------
-- "False" element of "IIF(PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 14"
--------------------------------------------------------------------------------------------------
,N'
SELECT TOP (0)
       database_id          = DB_ID()
      ,object_id            = CAST(NULL AS INT          )
      ,index_id             = CAST(NULL AS INT          )
      ,state_desc           = CAST(NULL AS SYSNAME      ) COLLATE ' + @collation + N'
      ,partition_CNT        = CAST(NULL AS BIGINT       )
      ,start_time           = CAST(NULL AS DATETIME     )
      ,last_pause_time      = CAST(NULL AS DATETIME     )
      ,total_execution_time = CAST(NULL AS INT          )
      ,page_count           = CAST(NULL AS BIGINT       )
      ,percent_complete_MIN = CAST(NULL AS FLOAT        )
      ,percent_complete_MAX = CAST(NULL AS FLOAT        )
      ,sql_text             = CAST(NULL AS NVARCHAR(MAX)) COLLATE ' + @collation
)
+N'
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_index_resumable_operations'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.index_resumable_operations - SQL 2017+'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'                 Start sys.sql_expression_dependencies',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Collect sys.sql_expression_dependencies
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_sql_expression_dependencies') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_sql_expression_dependencies
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1,NCHAR(13)+NCHAR(10)+N'INSERT INTO tempdb.dbo.SQLXL_Index_sys_sql_expression_dependencies'
           +NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           ,NCHAR(13)+NCHAR(10)+N'SELECT qry.*'
           +NCHAR(13)+NCHAR(10)+N'  INTO tempdb.dbo.SQLXL_Index_sys_sql_expression_dependencies') +N'
  FROM (
SELECT database_id               = DB_ID()
      ,referencing_id            = referencing_id
      ,referencing_minor_id      = referencing_minor_id
      ,referencing_class         = referencing_class
      ,referencing_class_desc    = referencing_class_desc    COLLATE ' + @collation + N'
      ,is_schema_bound_reference = is_schema_bound_reference
      ,referenced_class          = referenced_class
      ,referenced_class_desc     = referenced_class_desc     COLLATE ' + @collation + N'
      ,referenced_server_name    = referenced_server_name    COLLATE ' + @collation + N'
      ,referenced_database_name  = referenced_database_name  COLLATE ' + @collation + N'
      ,referenced_schema_name    = referenced_schema_name    COLLATE ' + @collation + N'
      ,referenced_entity_name    = referenced_entity_name    COLLATE ' + @collation + N'
      ,referenced_id             = referenced_id
      ,referenced_minor_id       = referenced_minor_id
      ,is_caller_dependent       = is_caller_dependent
      ,is_ambiguous              = is_ambiguous
  FROM sys.sql_expression_dependencies
) AS qry
OPTION (MAXDOP 1);'

IF @ssms = 2 AND @i = 1                            -- SSMS and first database only
   SELECT 'tempdb.dbo.SQLXL_Index_sys_sql_expression_dependencies'
         ,CONVERT(VARCHAR(12),GETDATE()-@dttm,14)
         ,lsql=LEN(@sql)
         ,sql1=SUBSTRING(@sql,    1,16383)
         ,sql2=SUBSTRING(@sql,16384,16383)
         ,sql3=SUBSTRING(@sql,32768,16383);
   SET @dttm=GETDATE();

EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N'    ... sys.sql_expression_dependencies'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Cursor through all statistics procedures for all indexes, Foreign Key Constraints & Columns used across indexable objects
-- Statistics are not returned on all objects - Nonclustered Column Stores, empty tables, etc.
/******************************************************************************************************************************************/
IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   RAISERROR(N'                 Start DBCC SHOW_STATISTICS',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@i             INT           = 1
       ,@database_name NVARCHAR(MAX) = N'DW_Master'
       ,@ssms          TINYINT       = 2
       ,@dttm          DATETIME      = GETDATE()
       ,@collation     SYSNAME       = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram_summary') IS NOT NULL
   DROP TABLE tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram_summary
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql=N'USE '+CAST(@database_name AS NVARCHAR(MAX)) + N';
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET ANSI_WARNINGS OFF;SET NOCOUNT ON;

--------------------------------------------------------------------------------------------------------------------------------------------
-- tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader
--------------------------------------------------------------------------------------------------------------------------------------------
IF (object_id(N''tempdb.dbo.#XL_IDX_sys_ShowStatistics_StatHeader'') IS NOT NULL) DROP TABLE #XL_IDX_sys_ShowStatistics_StatHeader;

CREATE
 TABLE #XL_IDX_sys_ShowStatistics_StatHeader
      (Name                     NVARCHAR(128)  COLLATE ' + @collation + N' NULL
      ,Updated                  DATETIME       NULL
      ,Rows                     BIGINT         NULL
      ,Rows_sampled             BIGINT         NULL
      ,Steps                    INT            NULL
      ,Density                  FLOAT          NULL
      ,Average_Key_Length       INT            NULL
      ,String_index             NVARCHAR(3)    COLLATE ' + @collation + N' NULL
      ,Filter_Expression        NVARCHAR(4000) COLLATE ' + @collation + N' NULL
      ,Unfiltered_Rows          BIGINT         NULL
      ,Persisted_Sample_Percent TINYINT        NULL
      );'

+ CASE WHEN @i = 1
       THEN N'
CREATE
 TABLE tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader
      (database_id              INT            NULL
      ,object_id                INT            NULL
      ,index_ID                 INT            NULL
      ,column_id                INT            NULL
      ,index_name               SYSNAME        COLLATE ' + @collation + N' NULL
      ,Updated                  DATETIME       NULL
      ,Rows                     BIGINT         NULL
      ,Rows_sampled             BIGINT         NULL
      ,Steps                    INT            NULL
      ,Density                  FLOAT          NULL
      ,Average_Key_Length       INT            NULL
      ,String_index             NVARCHAR(3)    COLLATE ' + @collation + N' NULL
      ,Filter_Expression        NVARCHAR(4000) COLLATE ' + @collation + N' NULL
      ,Unfiltered_Rows          BIGINT         NULL
      ,Persisted_Sample_Percent TINYINT        NULL
      ,Statistics_age_days      INT            NULL
      ) WITH (DATA_COMPRESSION = PAGE);'
       ELSE N''
  END

+ N'
--------------------------------------------------------------------------------------------------------------------------------------------
-- tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector
--------------------------------------------------------------------------------------------------------------------------------------------
IF (object_id(N''tempdb.dbo.#XL_IDX_sys_ShowStatistics_DensityVector'') IS NOT NULL) DROP TABLE #XL_IDX_sys_ShowStatistics_DensityVector;

CREATE
 TABLE #XL_IDX_sys_ShowStatistics_DensityVector
      (Row_ID                   INT    IDENTITY(1,1)
      ,All_Density              FLOAT                NOT NULL
      ,Average_Length           INT                  NOT NULL
      ,[Columns]                NVARCHAR(MAX)        COLLATE ' + @collation + N' NOT NULL
      );'

+ CASE WHEN @i = 1
       THEN N'
CREATE
 TABLE tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector
      (database_id              INT           NOT NULL
      ,object_id                INT               NULL
      ,index_ID                 INT               NULL
      ,column_id                INT               NULL
      ,Row_ID                   SMALLINT      NOT NULL
      ,All_Density              FLOAT         NOT NULL
      ,Average_Length           INT           NOT NULL
      ,[Columns]                NVARCHAR(MAX) COLLATE ' + @collation + N' NOT NULL
      ) WITH (DATA_COMPRESSION = PAGE);'
       ELSE N''
  END

+ N'
--------------------------------------------------------------------------------------------------------------------------------------------
-- tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram
--------------------------------------------------------------------------------------------------------------------------------------------
IF (object_id(N''tempdb.dbo.#XL_IDX_sys_ShowStatistics_Histogram'') IS NOT NULL) DROP TABLE #XL_IDX_sys_ShowStatistics_Histogram;

CREATE
 TABLE #XL_IDX_sys_ShowStatistics_Histogram
      (Range_Hi_Key             SQL_VARIANT   NULL
      ,Range_Rows               FLOAT         NULL
      ,EQ_Rows                  FLOAT         NULL
      ,Distinct_Range_Rows      BIGINT        NULL
      ,Avg_Range_Rows           FLOAT         NULL
      );'

+ CASE WHEN @i = 1
       THEN N'
CREATE
 TABLE tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram_summary
      (database_id              INT           NULL
      ,object_id                INT           NULL
      ,index_ID                 INT           NULL
      ,column_id                INT           NULL
      ,min_rows_per_value       FLOAT         NULL
      ,max_rows_per_value       FLOAT         NULL
      ,null_rows                FLOAT         NULL
      ,param_sniff              FLOAT         NULL
      ) WITH (DATA_COMPRESSION = PAGE);'
       ELSE N''
  END

+ N'
--------------------------------------------------------------------------------------------------------------------------------------------
-- Local Variables
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @database_id              INT
       ,@object_id                INT
       ,@index_ID                 NVARCHAR(10)  = N'''' COLLATE ' + @collation + N'
       ,@column_id                INT
       ,@object_name              NVARCHAR(257) = N'''' COLLATE ' + @collation + N'
       ,@stats_target_name        NVARCHAR(MAX) = N'''' COLLATE ' + @collation + N';

DECLARE stats_crsr CURSOR LOCAL FAST_FORWARD FOR
SELECT ----------------------------------------------------------------------
       -- All relational indexes
       ----------------------------------------------------------------------
       i.database_id
      ,i.object_id
      ,i.index_ID
      ,column_id             = CAST(0 AS INT)
      ,object_name           = s.name + N''.'' + o.name  COLLATE ' + @collation + N'
      ,stats_target_name     = PARSENAME(i.name,1)       COLLATE ' + @collation + N'
  FROM (----------------------------------------------------------------------
        -- All "regular" indexes
        ----------------------------------------------------------------------
        SELECT database_id
              ,object_id
              ,index_id
              ,name
          FROM tempdb.dbo.SQLXL_Index_sys_indexes
         WHERE DB_ID()    = database_id
           AND type NOT IN (N''F'',N''FT'',N''IF'',N''TF'',N''V'') -- omit views since statistics only on indexes
        ----------------------------------------------------------------------
        -- Full text indexes
        ----------------------------------------------------------------------
        UNION
        SELECT database_id
              ,object_id
              ,unique_index_id
              ,name             = CAST(NULL AS SYSNAME)
          FROM tempdb.dbo.SQLXL_Index_sys_fulltext_indexes
         WHERE DB_ID()          = database_id
       ) i
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
    ON i.database_id                  = o.database_id
   AND i.object_id                    = o.object_id
  JOIN tempdb.dbo.SQLXL_Index_sys_schemas AS s
    ON o.database_id                  = s.database_id
   AND o.schema_id                    = s.schema_id
UNION
SELECT -------------------------------------------------------------------------------------------------------------------------------------
       -- Table columns in indexes or have stats separately computed for them
       -- No Table Functions & Views
       -------------------------------------------------------------------------------------------------------------------------------------
       ic.database_id
      ,ic.object_id
      ,index_id              = NULL
      ,ic.column_id
      ,sch_object_name       = s.name + N''.'' + o.name COLLATE ' + @collation + N'
      ,stats_target_name     = PARSENAME(c.name,1)      COLLATE ' + @collation + N'
  FROM (------------------------------------------------------------------------------------------------------------------------------------
        -- Indexes, missing indexes, fulltext indexes, indexed views
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id
              ,object_id
              ,column_id
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns
         WHERE DB_ID()   = database_id
         GROUP BY
               database_id
              ,object_id
              ,column_id
        ------------------------------------------------------------------------------------------------------------------------------------
        -- All foreign key (FKC) Parent columns. Referenced columns included above by the referenced table index used to cover them
        ------------------------------------------------------------------------------------------------------------------------------------
        UNION
        SELECT database_id
              ,object_id   = parent_object_id
              ,column_id   = parent_column_id
          FROM tempdb.dbo.SQLXL_Index_sys_foreign_key_columns
         WHERE DB_ID()     = database_id
         GROUP BY
               database_id
              ,parent_object_id
              ,parent_column_id
        UNION
        ------------------------------------------------------------------------------------------------------------------------------------
        -- All Columns that have had stats computed, including by Statistics Auto Create
        -- useful to find candidate unique columns for HEAPS, columns that can takes advantage of new/existing NCS if added
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id
              ,object_id
              ,column_id
          FROM tempdb.dbo.SQLXL_Index_sys_stats_columns
         WHERE DB_ID()    = database_id
         GROUP BY
               database_id
              ,object_id
              ,column_id
       ) ic
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
    ON ic.database_id                    = o.database_id
   AND ic.object_id                      = o.object_id        -- want parent objects only
  JOIN tempdb.dbo.SQLXL_Index_sys_schemas AS s
    ON o.database_id                     = s.database_id
   AND o.schema_id                       = s.schema_id
  JOIN tempdb.dbo.SQLXL_Index_sys_columns AS c
    ON ic.database_id                    = c.database_id
   AND ic.object_id                      = c.object_id
   AND ic.column_id                      = c.column_id
 ORDER BY
       database_id
      ,object_id
      ,index_ID
      ,column_id
OPTION (FORCE ORDER,MAXDOP 1); -- Force order eliminates "Warning: join order enforced because a local join hint is used."

OPEN stats_crsr;
WHILE 1=1
BEGIN

   FETCH NEXT FROM stats_crsr INTO @database_id,@object_id, @index_ID, @column_id, @object_name, @stats_target_name;

   IF @@Fetch_Status <> 0
      BREAK

   BEGIN TRY
      BEGIN
         -----------------------------------------------------------------------------------------------------------------------------------
         -- tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader
         -----------------------------------------------------------------------------------------------------------------------------------
         INSERT
           INTO #XL_IDX_sys_ShowStatistics_StatHeader
               (Name,Updated,Rows,Rows_sampled,Steps,Density,Average_Key_Length,String_index,Filter_Expression,Unfiltered_Rows'
         +  CASE WHEN (    PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4)     >= 14     -- SQL 2017+
                       ------------------------------------------------------------------------------
                       OR (    PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4)  = 13     -- SQL 2016 SP1
                           AND PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),2) >= 4446   -- SQL 2016 SP1 CU4+
                          )
                      )
                 THEN N',Persisted_Sample_Percent'
                 ELSE N''
            END + N')
         EXEC(N''USE ' + CAST(@database_name AS NVARCHAR(MAX))
                       + N';DBCC SHOW_STATISTICS ('''''' + @object_name        + N'''''',N'''''' + @stats_target_name + N'''''')
 WITH STAT_HEADER, NO_INFOMSGS'')

         INSERT
           INTO tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader
               (database_id
               ,object_id
               ,index_ID
               ,column_id
               ,Updated
               ,Rows
               ,Rows_sampled
               ,Steps
               ,Density
               ,Average_Key_Length
               ,String_index
               ,Filter_Expression
               ,Unfiltered_Rows'
         +  CASE WHEN (        PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 14   -- SQL 2017+
                       ------------------------------------------------------------------------------
                       OR (    PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4)  = 13   -- SQL 2016
                           AND PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),2) >= 4446 -- SQL 2016 SP1 CU4+
                          )
                      )
                 THEN N',Persisted_Sample_Percent'
                 ELSE N''
            END + N'
              ,Statistics_age_days)
         SELECT DB_ID()
               ,@object_id
               ,@index_ID
               ,@column_id
               ,Updated
               ,Rows
               ,Rows_sampled
               ,Steps
               ,Density
               ,Average_Key_Length
               ,String_index
               ,Filter_Expression
               ,Unfiltered_Rows'
         +  CASE WHEN (        PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 14   -- SQL 2017+
                       ------------------------------------------------------------------------------
                       OR (    PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4)  = 13   -- SQL 2016
                           AND PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),2) >= 4446 -- SQL 2016 SP1 CU4+
                          )
                      )
                 THEN N',Persisted_Sample_Percent = CASE WHEN Persisted_Sample_Percent = 0 THEN 100 ELSE Persisted_Sample_Percent END'
                 ELSE N''
            END + N'
              ,Statistics_age_days = DATEDIFF(DAY,Updated,GETDATE())
           FROM #XL_IDX_sys_ShowStatistics_StatHeader;
      END

      BEGIN
         -----------------------------------------------------------------------------------------------------------------------------------
         -- tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector
         -----------------------------------------------------------------------------------------------------------------------------------
         INSERT INTO #XL_IDX_sys_ShowStatistics_DensityVector
               (All_Density
               ,Average_Length
               ,[Columns]
               )
         EXEC(N''USE ' + CAST(@database_name AS NVARCHAR(MAX))
                       + N';DBCC SHOW_STATISTICS ('''''' + @object_name + N'''''',N'''''' + @stats_target_name + N'''''')
 WITH DENSITY_VECTOR, NO_INFOMSGS'')

         INSERT INTO tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector
         SELECT DB_ID()
               ,@object_id
               ,@index_ID
               ,@column_id
               ,Row_ID = ROW_NUMBER() OVER (ORDER BY LEN([Columns]))
               ,All_Density
               ,Average_Length
               ,LTRIM(RTRIM([Columns]))
           FROM #XL_IDX_sys_ShowStatistics_DensityVector;
      END

      BEGIN
         -----------------------------------------------------------------------------------------------------------------------------------
         -- insert into tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram
         -- BOL says:
         -- "AVG_RANGE_ROWS = Average number of rows with duplicate column values within a histogram step, excluding the upper bound.
         --  When DISTINCT_RANGE_ROWS is greater than 0, AVG_RANGE_ROWS is calculated by dividing RANGE_ROWS by DISTINCT_RANGE_ROWS.
         --  When DISTINCT_RANGE_ROWS is 0, AVG_RANGE_ROWS returns 1 for the histogram step."

         -- Since the histogram "upper bound" is not included in the AVG_RANGE_ROWS, compute parameter sniffing range by adding
         --    the EQ_ROWS to the RANGE_ROWS to get all records in a histogram step,
         --    then divide by the DISTINCT_RANGE_ROWS plus 1 to account for the upper bound.
         -----------------------------------------------------------------------------------------------------------------------------------
         INSERT INTO #XL_IDX_sys_ShowStatistics_Histogram (Range_Hi_Key,Range_Rows,EQ_Rows,Distinct_Range_Rows,Avg_Range_Rows)
         EXEC(N''USE ' + CAST(@database_name AS NVARCHAR(MAX))
                       + N';DBCC SHOW_STATISTICS ('''''' + @object_name + N'''''',N'''''' + @stats_target_name + N'''''')
 WITH HISTOGRAM, NO_INFOMSGS'')

         IF (SELECT MAX(avg_range_rows) FROM #XL_IDX_sys_ShowStatistics_Histogram) > 0
         BEGIN
            INSERT INTO tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram_summary
            SELECT DB_ID()
                  ,@object_id
                  ,@index_ID
                  ,@column_id
                  ,e.min_rows_per_value
                  ,e.max_rows_per_value
                  ,e.null_rows
                  ,param_sniff = IIF(e.min_rows_per_value > 0,e.max_rows_per_value / e.min_rows_per_value,NULL)
              FROM (
                    SELECT min_rows_per_value = MIN(e.arr)
                          ,max_rows_per_value = MAX(e.arr)
                          ,null_rows          = MAX(e.Nrr)
                      FROM (
                            SELECT arr = IIF(range_hi_key IS NOT NULL
                                            ,(eq_rows + Range_Rows) / (Distinct_Range_Rows + 1)
                                            ,EQ_Rows)
                                  ,nrr = IIF(range_hi_key IS NULL
                                            ,EQ_Rows
                                            ,0)
                              FROM #XL_IDX_sys_ShowStatistics_Histogram
                           ) e
                   ) e;
         END
      END

   END TRY

   BEGIN CATCH
   END CATCH

   TRUNCATE TABLE #XL_IDX_sys_ShowStatistics_DensityVector;
   TRUNCATE TABLE #XL_IDX_sys_ShowStatistics_StatHeader;
   TRUNCATE TABLE #XL_IDX_sys_ShowStatistics_Histogram;

END

CLOSE stats_crsr;
DEALLOCATE stats_crsr;'

   EXECUTE sp_executesql @sql; IF @@Error > 0 RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT;

   SET @i = @i + 1;

   IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
      SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
                  +N'    ... Completed DBCC SHOW_STATISTICS - DensityVector,StatHeader,Histogram'
      RAISERROR(@debug,0,0) WITH NOWAIT;
      SET @debug_DTTM = GETDATE();
   END

END -- database cursor

/****************************************/
-- END of database cursor
/****************************************/
CLOSE db_crsr;
DEALLOCATE db_crsr;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Closed Database cursor'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/*** LOCAL TESTING ***
SET NOCOUNT ON
SET ANSI_WARNINGS OFF
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_Compilation') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_Compilation;
DECLARE @sql       NVARCHAR(MAX)
       ,@name      NVARCHAR(MAX)
       ,@ssms      BIT = 1
--*/

/******************************************************************************************************************************************/
IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Start Index builds on tempdb SQLXL_IDX tables ------------------------',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END
/******************************************************************************************************************************************
Notes on Indexing temp tables:

-- Clustered Index created at previous data collection time for: (in order of appearance)
-----------------------------------------------------------------------
tempdb.dbo.SQLXL_Index_sys_databases
tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_columns
tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors

tempdb.dbo.SQLXL_Index_sys_schemas
tempdb.dbo.SQLXL_Index_sys_objects
tempdb.dbo.SQLXL_Index_sys_indexes
tempdb.dbo.SQLXL_Index_sys_index_columns

-- SMALLish tables NOT INDEXED
-----------------------------------------------------------------------
-- tempdb.dbo.SQLXL_Index_sys_availability_replicas
-- tempdb.dbo.SQLXL_Index_sys_dm_hadr_availability_replica_states
-- tempdb.dbo.SQLXL_Index_sys_edge_constraint_clauses
-- tempdb.dbo.SQLXL_Index_sys_edge_constraints
-- tempdb.dbo.SQLXL_Index_sys_edge_constraint_clauses
-- tempdb.dbo.SQLXL_Index_sys_edge_constraints
-- tempdb.dbo.SQLXL_Index_sys_fulltext_index_catalog_usages
-- tempdb.dbo.SQLXL_Index_sys_Startup_Parameters

-- Clustered key would be most of table
-----------------------------------------------------------------------
-- SQLXL_Index_sys_sql_expression_dependencies

-- Hash scanned anyway
-----------------------------------------------------------------------
-- SQLXL_Index_Metric_Rollup
-- SQLXL_Index_Synergies

******************************************************************************************************************************************/
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixu_SQLXL_Index_sys_objects__parent_object_id')
CREATE UNIQUE
 INDEX ixu_SQLXL_Index_sys_objects__parent_object_id
    ON tempdb.dbo.SQLXL_Index_sys_objects
      (database_id
      ,parent_object_id
      ,object_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixu_SQLXL_Index_sys_objects__parent_object_id'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'              Start ixuc_SQLXL_Index_sys_stats',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_stats')
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_stats
    ON tempdb.dbo.SQLXL_Index_sys_stats
      (database_id
      ,object_id
      ,stats_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_types')
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_types
    ON tempdb.dbo.SQLXL_Index_sys_types
      (database_id
      ,user_type_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_types'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_cdc_change_tables__object_id')
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_cdc_change_tables__object_id
    ON tempdb.dbo.SQLXL_Index_cdc_change_tables
      (database_id
      ,object_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_cdc_change_tables__object_id'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_cdc_change_tables__source_object_id')
CREATE UNIQUE NONCLUSTERED
 INDEX ixuc_SQLXL_Index_cdc_change_tables__source_object_id
    ON tempdb.dbo.SQLXL_Index_cdc_change_tables
      (database_id
      ,source_object_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_cdc_change_tables__source_object_id'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_instance'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_instance
    ON tempdb.dbo.SQLXL_Index_sys_instance (source,name)
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1)

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_instance'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_dm_db_missing_index_details'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_missing_index_details
    ON tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_details
      (database_id
      ,object_id
      ,index_handle
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_dm_db_missing_index_details'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_dm_db_missing_index_group_stats_query'
              )
CREATE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_missing_index_group_stats_query
    ON tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_group_stats_query
      (group_handle)
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_dm_db_missing_index_group_stats_query'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_database_scoped_configurations'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_database_scoped_configurations
    ON tempdb.dbo.SQLXL_Index_sys_database_scoped_configurations
      (database_id
      ,name
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_database_scoped_configurations'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_database_automatic_tuning_options'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_database_automatic_tuning_options
    ON tempdb.dbo.SQLXL_Index_sys_database_automatic_tuning_options
      (database_id
      ,name
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_database_automatic_tuning_options'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_database_query_store_options'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_database_query_store_options
    ON tempdb.dbo.SQLXL_Index_sys_database_query_store_options
      (database_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_database_query_store_options'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_cdc_change_tables__object_id'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_cdc_change_tables__object_id
    ON tempdb.dbo.SQLXL_Index_cdc_change_tables
      (database_id
      ,object_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_cdc_change_tables__object_id'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_cdc_change_tables__source_object_id'
              )
CREATE UNIQUE Nonclustered
 INDEX ixuc_SQLXL_Index_cdc_change_tables__source_object_id
    ON tempdb.dbo.SQLXL_Index_cdc_change_tables
      (database_id
      ,source_object_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_cdc_change_tables__source_object_id'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_tables'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_tables
    ON tempdb.dbo.SQLXL_Index_sys_tables
      (database_id
      ,object_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_tables'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_data_spaces'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_data_spaces
    ON tempdb.dbo.SQLXL_Index_sys_data_spaces
      (database_id
      ,data_space_id
      ,file_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_data_spaces'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_default_constraints'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_default_constraints
    ON tempdb.dbo.SQLXL_Index_sys_default_constraints
      (database_id
      ,object_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_default_constraints'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_types'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_types
    ON tempdb.dbo.SQLXL_Index_sys_types
      (database_id
      ,user_type_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_types'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_columns'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_columns
    ON tempdb.dbo.SQLXL_Index_sys_columns
      (database_id
      ,object_id
      ,column_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_columns'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_column_type_usages'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_column_type_usages
    ON tempdb.dbo.SQLXL_Index_sys_column_type_usages
      (database_id
      ,object_id
      ,column_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_column_type_usages'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_check_constraints'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_check_constraints
    ON tempdb.dbo.SQLXL_Index_sys_check_constraints
      (database_id
      ,object_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_check_constraints'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_key_constraints'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_key_constraints
    ON tempdb.dbo.SQLXL_Index_sys_key_constraints
      (database_id
      ,object_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_key_constraints'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_hash_indexes'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_hash_indexes
    ON tempdb.dbo.SQLXL_Index_sys_hash_indexes
      (database_id
      ,object_id
      ,index_id
      ,type
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_hash_indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_fulltext_indexes'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_fulltext_indexes
    ON tempdb.dbo.SQLXL_Index_sys_fulltext_indexes
      (database_id
      ,object_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_fulltext_indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_fulltext_catalogs'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_fulltext_catalogs
    ON tempdb.dbo.SQLXL_Index_sys_fulltext_catalogs
      (database_id
      ,fulltext_catalog_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_fulltext_catalogs'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_foreign_keys'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_foreign_keys
    ON tempdb.dbo.SQLXL_Index_sys_foreign_keys
      (database_id
      ,object_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_foreign_keys'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_foreign_key_columns'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_foreign_key_columns
    ON tempdb.dbo.SQLXL_Index_sys_foreign_key_columns
      (database_id
      ,constraint_object_id
      ,constraint_column_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_foreign_key_columns'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ix_SQLXL_Index_sys_foreign_key_columns_parent'
              )
CREATE
 INDEX ix_SQLXL_Index_sys_foreign_key_columns_parent
    ON tempdb.dbo.SQLXL_Index_sys_foreign_key_columns
      (database_id
      ,parent_object_id
      ,parent_column_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ix_SQLXL_Index_sys_foreign_key_columns_parent'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ix_SQLXL_Index_sys_foreign_key_columns_refer'
              )
CREATE
 INDEX ix_SQLXL_Index_sys_foreign_key_columns_refer
    ON tempdb.dbo.SQLXL_Index_sys_foreign_key_columns
      (database_id
      ,referenced_object_id
      ,referenced_column_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ix_SQLXL_Index_sys_foreign_key_columns_refer'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_extended_properties'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_extended_properties
    ON tempdb.dbo.SQLXL_Index_sys_extended_properties
      (database_id
      ,class
      ,major_id
      ,minor_id
      ,name
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_extended_properties'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'              Start ixuc_SQLXL_Index_sys_stats_columns',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_stats_columns'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_stats_columns
    ON tempdb.dbo.SQLXL_Index_sys_stats_columns
      (database_id
      ,object_id
      ,stats_id
      ,stats_column_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_stats_columns'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_dm_db_partition_stats'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_partition_stats
    ON tempdb.dbo.SQLXL_Index_sys_dm_db_partition_stats
      (database_id
      ,object_id
      ,index_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_dm_db_partition_stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_dm_db_stats_properties'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_stats_properties
    ON tempdb.dbo.SQLXL_Index_sys_dm_db_stats_properties
      (database_id
      ,object_id
      ,stats_id
      ,partition_number
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_dm_db_stats_properties'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'              Start ixuc_SQLXL_Index_sys_partitions',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_partitions'
              )
CREATE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_partitions
    ON tempdb.dbo.SQLXL_Index_sys_partitions
      (database_id
      ,object_id
      ,index_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_partitions'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_sys_dm_db_index_operational_stats'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_sys_dm_db_index_operational_stats
    ON tempdb.dbo.SQLXL_Index_sys_dm_db_index_operational_stats
      (database_id
      ,object_id
      ,index_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_sys_dm_db_index_operational_stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_sys_dm_db_index_usage_stats'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_sys_dm_db_index_usage_stats
    ON tempdb.dbo.SQLXL_Index_sys_dm_db_index_usage_stats
      (database_id
      ,object_id
      ,index_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_sys_dm_db_index_usage_stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_dm_db_xtp_index_stats'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_xtp_index_stats
    ON tempdb.dbo.SQLXL_Index_sys_dm_db_xtp_index_stats
      (database_id
      ,object_id
      ,index_id
      ,type
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_dm_db_xtp_index_stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_dm_os_buffer_descriptors_EXT'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_os_buffer_descriptors_EXT
    ON tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors_EXT
      (database_id
      ,object_id
      ,index_id
      ,type
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_dm_os_buffer_descriptors_EXT'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats'
              )
CREATE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats
    ON tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats
       (database_id
       ,object_id
       ,index_id
       )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats
    ON tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats
      (database_id
      ,object_id
      ,index_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_index_resumable_operations'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_index_resumable_operations
    ON tempdb.dbo.SQLXL_Index_sys_index_resumable_operations
      (database_id
      ,object_id
      ,index_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_index_resumable_operations'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'              Start ix_SQLXL_Index_sys_sql_expression_dependencies',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ix_SQLXL_Index_sys_sql_expression_dependencies'
              )
CREATE CLUSTERED
 INDEX ix_SQLXL_Index_sys_sql_expression_dependencies
    ON tempdb.dbo.SQLXL_Index_sys_sql_expression_dependencies
      (database_id
      ,referenced_id
      ,referenced_minor_id
      ,referencing_id
      ,referencing_minor_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ix_SQLXL_Index_sys_sql_expression_dependencies'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_ShowStatistics_StatHeader'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_ShowStatistics_StatHeader
    ON tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader
      (database_id
      ,object_id
      ,index_ID
      ,column_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_ShowStatistics_StatHeader'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_ShowStatistics_DensityVector'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_ShowStatistics_DensityVector
    ON tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector
      (database_id
      ,object_id
      ,index_ID
      ,column_id
      ,Row_ID
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_ShowStatistics_DensityVector'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_ShowStatistics_Histogram_summary'
              )
CREATE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_ShowStatistics_Histogram_summary
    ON tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram_summary
      (database_id
      ,object_id
      ,index_ID
      ,column_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_ShowStatistics_Histogram_summary'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (SELECT NULL
                 FROM tempdb.sys.indexes WITH (READUNCOMMITTED)
                WHERE name = N'ixuc_SQLXL_Index_sys_internal_partitions'
              )
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_internal_partitions
    ON tempdb.dbo.SQLXL_Index_sys_internal_partitions
      (database_id
      ,object_id
      ,index_ID
      ,partition_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' ... ixuc_SQLXL_Index_sys_internal_partitions'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
 IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Completed Index builds on tempdb SQLXL_IDX tables'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql  NVARCHAR(MAX)
       ,@name SYSNAME
       ,@ssms             TINYINT = CASE WHEN (SELECT program_name
                                                 FROM sys.dm_exec_sessions
                                                WHERE session_id = @@spid
                                              ) LIKE N'Microsoft SQL Server Management Studio%'
                                         THEN 1
                                         ELSE 0
                                    END
       ,@debug            VARCHAR(1000)
       ,@debug_DTTM       DATETIME      = GETDATE()
SET NOCOUNT OFF
--*/

/******************************************************************************************************************************************/
IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Start SQLXL Index Data Organization ----------------------------------',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END
/******************************************************************************************************************************************/

IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_Compilation') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_Compilation;

CREATE TABLE tempdb.dbo.SQLXL_Index_Compilation
(
 collection_DTTM                            DATETIME                                    NULL -- FUTURE KEY from task start time
--------------------------------------------------------------------------------------------------------------------------------------------
-- MASTER KEYS
-- rec_type is level in the collected data
-- 'A' = All or instance level, 'D' is database, 'P' is for parent, 'S' for History or System Internal Table, 'I' for "Index"
-- Object_ID is same as parent except for Foreign Key Constraints, History (CDC, SVN, LDG) tables, and System Internal Tables
-- Sub_Type sourced from sys.xml_indexes xml_index_type, sys.spatial_indexes spatial_index_type
--------------------------------------------------------------------------------------------------------------------------------------------
,rec_type                                   NCHAR(1)       COLLATE DATABASE_DEFAULT NOT NULL
,database_ID                                SMALLINT                                    NULL -- KEY from sys.databases
,parent_object_ID                           BIGINT                                  NOT NULL -- KEY from sys.objects - Parent level
,object_ID                                  BIGINT                                  NOT NULL -- KEY from sys.objects - Object level
,index_ID                                   BIGINT                                  NOT NULL -- KEY from sys.indexes etc.
,type                                       NVARCHAR(2)    COLLATE DATABASE_DEFAULT NOT NULL
,sub_type                                   TINYINT                                 NOT NULL
--------------------------------------------------------------------------------------------------------------------------------------------
-- End of MASTER KEYS
--------------------------------------------------------------------------------------------------------------------------------------------
-- Element Names & Descriptions
------------------------------------------------------------------------------------------------
,Database_Name                              SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,collation_name                             SYSNAME        COLLATE DATABASE_DEFAULT     NULL

-----------------------------------------------------------
-- COMPUTED Actions to TAKE by Index & Table
-----------------------------------------------------------
,tbl_default_action_type                    SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,prescription                               NVARCHAR(4000)                              NULL

---------------------------------------------------------------------------------------------
-- History source tables - source records for Change Data Capture & System-Version tables
---------------------------------------------------------------------------------------------
,history_source_schema_id                   INT                                         NULL
,history_source_schema_name                 SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,history_source_object_id                   INT                                         NULL
,history_source_object_name                 SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,history_source_object_type                 NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,history_source_object_type_desc            SYSNAME        COLLATE DATABASE_DEFAULT     NULL

-----------------------------------------------------------
-- Parent object values - from sys.objects. Only different from object for INTERNAL TABLES & HISTORY TABLES
-- INTERNAL TABLES roll up to their OBJECT table, HISTORY rollup to their OBJECT table
-----------------------------------------------------------
,parent_schema_id                           INT                                         NULL
,parent_schema_name                         SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,parent_object_name                         SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,parent_object_type                         NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,parent_object_type_desc                    SYSNAME        COLLATE DATABASE_DEFAULT     NULL

-----------------------------------------------------------
-- sys.objects - Object columns
-----------------------------------------------------------
,obj_name                                   SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_type                                   NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,obj_type_desc                              SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_create_date                            DATETIME                                    NULL
,obj_modify_date                            DATETIME                                    NULL
,obj_is_published                           BIT                                     NOT NULL DEFAULT(0)
,obj_is_schema_published                    BIT                                     NOT NULL DEFAULT(0)
,obj_definition                             NVARCHAR(MAX)                               NULL

-----------------------------------------------------------
-- Object schema - sys.schemas
-----------------------------------------------------------
,SCHEMA_ID                                  BIGINT                                  NOT NULL DEFAULT(0)
,SCHEMA_NAME                                SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,schema_principal_ID                        BIGINT                                      NULL

-----------------------------------------------------------
-- Object Computed values
-----------------------------------------------------------
,obj_type_hdr                               SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_type_dtl                               SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_type_label                             SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_type_short_label                       SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_principal_ID                           BIGINT                                      NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- sys.tables, sys.views, sys.triggers - useful to know across indexes, MIX, FKC, etc.
--------------------------------------------------------------------------------------------------------------------------------------------
,tbl_history_table_ID                       BIGINT                                      NULL
,tbl_history_table_schema                   SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,tbl_history_table_name                     SYSNAME        COLLATE DATABASE_DEFAULT     NULL

,tbl_is_replicated                          BIT                                     NOT NULL DEFAULT(0) -- used in multiple places
,tbl_lock_escalation                        TINYINT                                     NULL
,tbl_lock_escalation_desc                   SYSNAME        COLLATE DATABASE_DEFAULT     NULL

,tbl_is_memory_optimized                    BIT                                     NOT NULL DEFAULT(0)
,tbl_max_column_used_ID                     BIGINT                                      NULL
,tbl_has_unchecked_assembly_data            BIT                                     NOT NULL DEFAULT(0)
,tbl_is_filetable                           BIT                                     NOT NULL DEFAULT(0)
-----------------------------------------------------------
,tbl_row_CNT                                BIGINT                                      NULL
,tbl_used_page_CNT                          BIGINT                                      NULL
,tbl_row_size_byte_AVG                      BIGINT                                      NULL
-----------------------------------------------------------
,tbl_CLR_trigger_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,tbl_SQL_trigger_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,tbl_is_instead_of_trigger_CNT              BIGINT                                  NOT NULL DEFAULT(0)

-----------------------------------------------------------
-- Table computed properties
-----------------------------------------------------------
,tbl_is_clustered_columnstore               BIT                                     NOT NULL DEFAULT(0)
,tbl_column_CNT                             BIGINT                                  NOT NULL DEFAULT(0)
,tbl_is_heap                                BIT                                     NOT NULL DEFAULT(0)
,tbl_is_empty                               BIT                                     NOT NULL DEFAULT(0)
,tbl_priority_metric                        FLOAT                                       NULL
,tbl_cx_uniq_ordered_column_TYP             SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,tbl_cx_uniq_ordered_column_ID              BIGINT                                      NULL
,tbl_possible_uniq_column_ID                BIGINT                                      NULL
,tbl_smallest_uniq_Nonclustered_idx         BIGINT                                      NULL

-----------------------------------------------------------
-- [cdc].change_tables
-----------------------------------------------------------
,cdc_capture_instance                       SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,cdc_supports_net_changes                   BIT                                         NULL
,cdc_role_name                              SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,cdc_index_name                             SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,cdc_filegroup_name                         SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,cdc_create_date                            DATETIME                                    NULL
,cdc_partition_switch                       BIT                                         NULL
,cdc_is_history_table                       BIT                                         NULL

-----------------------------------------------------------
-- sys.sql_modules
-----------------------------------------------------------
,obj_uses_ansi_nulls                        BIT                                         NULL
,obj_uses_quoted_identifier                 BIT                                         NULL
,obj_is_schema_bound                        BIT                                         NULL
,obj_uses_database_collation                BIT                                         NULL
,obj_is_recompiled                          BIT                                         NULL
,obj_null_on_null_input                     BIT                                         NULL
,obj_execute_as_principal_ID                BIGINT                                      NULL
,obj_uses_native_compilation                BIT                                         NULL
,obj_is_inlineable                          BIT                                         NULL
,obj_inline_type                            BIT                                         NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- sys.indexes - NOTE: other elements below in Shared Elements
--------------------------------------------------------------------------------------------------------------------------------------------
,type_desc                                  SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,sub_type_desc                              SYSNAME        COLLATE DATABASE_DEFAULT     NULL
                                            -- Sources: sys.xml_indexes xml_index_type_description
                                            --          sys.spatial_indexes spatial_index_type_desc
,is_unique                                  BIT                                     NOT NULL DEFAULT(0)  -- 1 = unique
,IGNORE_DUP_KEY                             BIT                                     NOT NULL DEFAULT(0)  -- 1 = ON
,suppress_dup_key_messages                  BIT                                     NOT NULL DEFAULT(0)  -- 1 = ON
,is_primary_key                             BIT                                     NOT NULL DEFAULT(0)  -- 1 = PRIMARY KEY
,is_unique_constraint                       BIT                                     NOT NULL DEFAULT(0)  -- 1 = UNIQUE constraint
,fill_factor                                TINYINT                                     NULL             -- for creation or rebuilding
,is_padded                                  BIT                                     NOT NULL DEFAULT(0)  -- 1 = ON
,is_hypothetical                            BIT                                     NOT NULL DEFAULT(0)  -- 1 = is hypothetical
,is_ignored_in_optimization                 BIT                                     NOT NULL DEFAULT(0)  -- NOTE: not found in BOL
,ALLOW_ROW_LOCKS                            BIT                                         NULL             -- 1 = allows row locks
,ALLOW_PAGE_LOCKS                           BIT                                         NULL             -- 1 = allows page locks
,has_filter                                 BIT                                     NOT NULL DEFAULT(0)  -- 1 = has a filter
,compression_delay_mm                       BIGINT                                      NULL             -- NOTE: not found in BOL
,auto_created                               BIT                                     NOT NULL DEFAULT(0)  -- 1 = created by auto tuning
,OPTIMIZE_FOR_SEQUENTIAL_KEY                BIT                                     NOT NULL DEFAULT(0)  -- 1 = last-page insert opt enabled

--------------------------------------------------------------------------------------------------------------------------------------------
-- Shared elements index & parent
-- parent_id INT excluded because same as sys.objects.parent_object_id - Sources: sys.internal_tables, sys.triggers
--------------------------------------------------------------------------------------------------------------------------------------------
,NAME                                       SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,type_short_desc                            SYSNAME        COLLATE DATABASE_DEFAULT     NULL
                                            -- Sources: sys.indexes
                                            --          sys.xml_indexes xml_index_type_description
,is_disabled                                BIT                                     NOT NULL DEFAULT(0)
                                            -- Sources: sys.indexes,sys.foreign_keys
                                            --          sys.fulltext_indexes is_enabled (note value IS flipped)
,is_not_trusted                             BIT                                     NOT NULL DEFAULT(0)
                                            -- Sources: sys.edge_constraints, sys.foreign_keys, sys.check_constraints
,is_system_named                            BIT                                     NOT NULL DEFAULT(0)
                                            -- Sources: sys.edge_constraints, sys.foreign_keys, sys.check_constraints
                                            --          sys.default_constraints, sys.key_constraints
,filter_definition                          NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
                                            -- Sources: sys.indexes
                                            --          sys.xml_indexes filter_definition
,extended_property                          NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
                                            -- source: sys.extended_properties - index, foreign key

-----------------------------------------------------------
-- sys.internal_tables & ms_shipped objects
-----------------------------------------------------------
,is_ms_shipped                              BIT                                         NULL
,internal_type                              TINYINT                                     NULL
,internal_type_DESC                         SYSNAME                                     NULL
,parent_minor_ID                            BIGINT                                      NULL

-----------------------------------------------------------
-- sys.xml_indexes
-----------------------------------------------------------
,xml_index_type                             TINYINT                                     NULL
,xml_index_type_description                 SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,xml_using_xml_index_ID                     BIGINT                                      NULL
,xml_secondary_type                         CHAR(1)                                     NULL
,xml_secondary_type_desc                    SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,xml_path_ID                                BIGINT                                      NULL

-----------------------------------------------------------
-- sys.spatial_indexes
-----------------------------------------------------------
,si_tessellation_scheme                     SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,si_bounding_box_xmin                       FLOAT                                       NULL
,si_bounding_box_ymin                       FLOAT                                       NULL
,si_bounding_box_xmax                       FLOAT                                       NULL
,si_bounding_box_ymax                       FLOAT                                       NULL
,si_level_1_grid_desc                       NVARCHAR(120)  COLLATE DATABASE_DEFAULT     NULL
,si_level_2_grid_desc                       NVARCHAR(120)  COLLATE DATABASE_DEFAULT     NULL
,si_level_3_grid_desc                       NVARCHAR(120)  COLLATE DATABASE_DEFAULT     NULL
,si_level_4_grid_desc                       NVARCHAR(120)  COLLATE DATABASE_DEFAULT     NULL
,si_cells_per_object                        BIGINT                                      NULL

-----------------------------------------------------------
-- sys.hash_indexes
-----------------------------------------------------------
,hi_bucket_CNT                              BIGINT                                  NOT NULL DEFAULT(0)

-----------------------------------------------------------
-- sys.fulltext_indexes
-----------------------------------------------------------
,ft_unique_index_ID                         BIGINT                                      NULL
,ft_fulltext_catalog_ID                     BIGINT                                      NULL
,ft_change_tracking_state                   CHAR(1)        COLLATE DATABASE_DEFAULT     NULL
,ft_change_tracking_state_desc              SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,ft_has_crawl_completed                     BIT                                         NULL
,ft_crawl_type                              CHAR(1)        COLLATE DATABASE_DEFAULT     NULL
,ft_crawl_type_desc                         SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,ft_crawl_start_date                        DATETIME                                    NULL
,ft_crawl_end_date                          DATETIME                                    NULL
,ft_incremental_timestamp                   DATETIME                                    NULL
,ft_stoplist_ID                             BIGINT                                      NULL
,ft_property_list_ID                        BIGINT                                      NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- sys.foreign_keys
--------------------------------------------------------------------------------------------------------------------------------------------
,fkc_referenced_object_ID                   BIGINT                                      NULL
,fkc_referenced_index_ID                    BIGINT                                      NULL -- ID of key index supporting referenced object
,fkc_reference                              NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
,fkc_is_not_for_replication                 BIT                                         NULL
,fkc_delete_referential_action              TINYINT                                     NULL
,fkc_delete_referential_action_desc         SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,fkc_update_referential_action              TINYINT                                     NULL
,fkc_update_referential_action_desc         SYSNAME        COLLATE DATABASE_DEFAULT     NULL
-----------------------------------------------------------
-- derived values for Foreign Key Constraints - index(es) covering Foreign Key Constraint, non-filtered, in order of enabled, shortest
-----------------------------------------------------------
,fkc_covering_primary_idx_name              NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
,fkc_covering_primary_idx_ID                BIGINT                                      NULL
,fkc_covering_primary_idx_Type              NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,fkc_covered_by_idx_IDS                     NVARCHAR(1000) COLLATE DATABASE_DEFAULT     NULL -- list of all covering indexes
--------------------------------------------
,fkc_candidate_covering_MIX_CNT             BIGINT                                  NOT NULL DEFAULT(0)
,fkc_candidate_covering_MIX_ID              BIGINT                                      NULL
--------------------------------------------
-- Referenced Key information
--------------------------------------------
,rk_referencing_fkc_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_disabled_CNT            BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_not_replicated_CNT      BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_not_trusted_CNT         BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_action_none_CNT         BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_action_cascade_CNT      BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_action_null_CNT         BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_action_default_CNT      BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_system_named_CNT        BIGINT                                  NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Missing index details. See index_Usage_Stats for remainder of columns
--------------------------------------------------------------------------------------------------------------------------------------------
,mix_avg_Total_user_cost_AMT                FLOAT                                   NOT NULL DEFAULT(0)
,mix_avg_Total_system_cost_AMT              FLOAT                                   NOT NULL DEFAULT(0)
,mix_avg_user_impact_AMT                    FLOAT                                   NOT NULL DEFAULT(0)
,mix_avg_system_impact_AMT                  FLOAT                                   NOT NULL DEFAULT(0) -- typically ZERO
,mix_unique_compiles_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,mix_Advantage_AMT                          FLOAT                                   NOT NULL DEFAULT(0)
,mix_Advantage_weighted_AMT                 FLOAT                                   NOT NULL DEFAULT(0)
                                            -- computed (((i.user_seeks  + i.user_scans) * i.avg_Total_user_cost * i.avg_user_impact  )
                                            --         +((i.system_seeks + i.system_scans) * i.avg_Total_system_cost * i.avg_system_impact))
-----------------------------------------------------------
-- missing_index_group_stats_query
-- NOTE: since this should total to the existing MISSING index values omitting for version 3
-----------------------------------------------------------
--,mqy_user_seeks_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_user_scans_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_last_user_seek_DTTM                    DATETIME                                    NULL
--,mqy_last_user_scan_DTTM                    DATETIME                                    NULL
--,mqy_system_seeks_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_system_scans_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_last_system_seek_DTTM                  DATETIME                                    NULL
--,mqy_last_system_scan_DTTM                  DATETIME                                    NULL
--,mqy_Advantage_AMT                          FLOAT                                   NOT NULL DEFAULT(0)
--,mqy_query_hash                             BINARY(8)                               NOT NULL DEFAULT(0)
--,mqy_query_plan_hash                        BINARY(8)                               NOT NULL DEFAULT(0)
--,mqy_last_sql_handle                        VARBINARY(64)                           NOT NULL DEFAULT(0)
--,mqy_last_statement_start_offset            BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_last_statement_end_offset              BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_last_statement_sql_handle              VARBINARY(64)                           NOT NULL DEFAULT(0)
,mqy_query_text                             NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL
,mqy_query_plan                             XML                                         NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- sys.[stats]
--------------------------------------------------------------------------------------------------------------------------------------------
,stats_ID                                   BIGINT                                      NULL
,stats_Name                                 NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
                                            -- Added length to accomodate multiple statistic names for columns too
,stats_auto_created                         BIT                                         NULL
,stats_user_created                         BIT                                         NULL
,stats_no_recompute                         BIT                                         NULL
,stats_has_filter                           BIT                                         NULL
,stats_filter_definition                    NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
,stats_is_temporary                         BIT                                         NULL
,stats_is_incremental                       BIT                                         NULL
,stats_has_persisted_sample                 BIT                                         NULL
,stats_generation_method                    BIGINT                                      NULL
,stats_generation_method_desc               SYSNAME        COLLATE DATABASE_DEFAULT     NULL
-----------------------------------------------------------
-- ShowStatistics.StatHeader
-----------------------------------------------------------
,stathdr_Updated                            DATETIME                                    NULL
,stathdr_Rows_CNT                           BIGINT                                  NOT NULL DEFAULT(0)
,stathdr_Rows_Sampled_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,stathdr_Steps                              BIGINT                                  NOT NULL DEFAULT(0)
,stathdr_Density                            FLOAT                                   NOT NULL DEFAULT(0)
,stathdr_Average_Key_Length                 BIGINT                                  NOT NULL DEFAULT(0)
,stathdr_String_index                       NVARCHAR(3)    COLLATE DATABASE_DEFAULT     NULL
,stathdr_Filter_Expression                  NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
,stathdr_Unfiltered_Rows                    BIGINT                                  NOT NULL DEFAULT(0)
,stathdr_Persisted_Sample_Percent           TINYINT                                 NOT NULL DEFAULT(0)
,stathdr_Statistics_age_days                BIGINT                                      NULL
-----------------------------------------------------------
-- ShowStatistics.StatHistogram
-----------------------------------------------------------
,stathist_range_rows_LO                     FLOAT                                   NOT NULL DEFAULT(0)
,stathist_range_rows_HI                     FLOAT                                   NOT NULL DEFAULT(0)
,stathist_null_rows                         BIGINT                                  NOT NULL DEFAULT(0)
,stathist_param_sniff                       FLOAT                                   NOT NULL DEFAULT(0)
-----------------------------------------------------------
-- sys.dm_db_stats_properties -- Note: dm_db_stats_properties only used for modification_counter
-----------------------------------------------------------
,Stats_Prop_modification_CNT                BIGINT                                  NOT NULL DEFAULT(0)

-----------------------------------------------------------------------
-- Aggregate Operational Metrics Values
-----------------------------------------------------------------------
,ops_Total_contacts_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
   -- includes XTP scans_started,row_insert_attempts,row_update_attempts,row_delete_attempts,delta_pages,page_update_count
   -- includes CS  scan_CNT,delete_buffer_scan_CNT,row_group_lock_CNT
,ops_Total_read_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP scans_started, CS scan_CNT,delete_buffer_scan_CNT
,ops_Total_write_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
   -- Include XTP row_insert_attempts,row_update_attempts,row_delete_attempts,delta_pages,page_update_count
   -- included CS row_group_lock_CNT
,ops_Total_insert_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP row_insert_attempts
,ops_Total_update_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP row_update_attempts,page_update_count
,ops_Total_delete_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP row_delete_attempts
,ops_Total_scan_cnt                         BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP scans_started, CS scan_CNT
,ops_Total_scan_retries_cnt                 BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP scans_started, CS scan_CNT
,ops_Total_page_split_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP page_split_count,key_split_count
,ops_Total_page_merge_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes XTP page_merge_count,key_merge_count & potentially page_consolidation_count

--------------------------------------------------------------------------------------------------------------------------------------------
-- sys.dm_db_index_operational_stats + sys.dm_db_xtp_index_stats + sys.dm_db_xtp_Nonclustered_index_stats
--------------------------------------------------------------------------------------------------------------------------------------------
,ios_Total_wait_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,ios_Total_wait_MS_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,ios_Total_wait_AVG                         FLOAT                                   NOT NULL DEFAULT(0)
,ios_Total_Column_value_off_row_CNT         BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ops_no_read_Total_write_CNT                BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_partition_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_leaf_insert_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,ios_leaf_update_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,ios_leaf_delete_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,ios_leaf_ghost_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,ios_Total_leaf_Contacts_CNT                BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_nonleaf_insert_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ios_nonleaf_delete_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ios_nonleaf_update_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ios_Total_nonleaf_Contacts_CNT             BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_leaf_alloc_page_split_CNT              BIGINT                                  NOT NULL DEFAULT(0)
,ios_nonleaf_alloc_page_split_CNT           BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_leaf_page_merge_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,ios_nonleaf_page_merge_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_range_scan_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_singleton_lookup_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,ios_forwarded_fetch_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,ios_lob_fetch_pages_CNT                    BIGINT                                  NOT NULL DEFAULT(0) -- Cumulative count of large object (LOB) pages retrieved from the LOB_DATA allocation unit
,ios_lob_fetch_bytes_CNT                    BIGINT                                  NOT NULL DEFAULT(0) -- Cumulative count of LOB data bytes retrieved
,ios_lob_orphan_create_CNT                  BIGINT                                  NOT NULL DEFAULT(0) -- Cumulative count of orphan LOB values created for bulk operations
,ios_lob_orphan_insert_CNT                  BIGINT                                  NOT NULL DEFAULT(0) -- Cumulative count of orphan LOB values inserted during bulk operations.
,ios_row_overflow_fetch_in_pages_CNT        BIGINT                                  NOT NULL DEFAULT(0)
,ios_row_overflow_fetch_in_bytes_CNT        BIGINT                                  NOT NULL DEFAULT(0)
,ios_column_value_push_off_row_CNT          BIGINT                                  NOT NULL DEFAULT(0)
,ios_column_value_pull_in_row_CNT           BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_row_lock_CNT                           BIGINT                                  NOT NULL DEFAULT(0)
,ios_row_lock_wait_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,ios_row_lock_wait_MS_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,ios_row_lock_wait_AVG                      FLOAT                                   NOT NULL DEFAULT(0)
-------------------------------------
,ios_page_lock_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_lock_wait_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_lock_wait_MS_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_lock_wait_AVG                     FLOAT                                   NOT NULL DEFAULT(0)
-------------------------------------
,ios_Total_lock_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
   -- includes CS row_group_lock_CNT
,ios_Total_lock_wait_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
   -- includes CS row_group_lock_wait_CNT
,ios_Total_lock_wait_MS_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
   -- includes CS row_group_lock_wait_MS_CNT
,ios_Total_lock_wait_AVG                    FLOAT                                   NOT NULL DEFAULT(0)
   -- includes CS row_group_lock_wait_CNT,row_group_lock_wait_MS_CNT
-------------------------------------
,ios_lock_promotion_attempt_CNT             BIGINT                                  NOT NULL DEFAULT(0)
,ios_lock_promotion_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ios_lock_promotion_fail_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,ios_lock_promotion_fail_PCT                FLOAT                                   NOT NULL DEFAULT(0) -- Computed
-------------------------------------
,ios_Total_latch_wait_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,ios_Total_latch_wait_MS_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,ios_Total_latch_wait_AVG                   FLOAT                                   NOT NULL DEFAULT(0)
-------------------------------------
,ios_page_latch_wait_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_latch_wait_MS_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_latch_wait_AVG                    FLOAT                                   NOT NULL DEFAULT(0)
-------------------------------------
,ios_page_io_latch_wait_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_io_latch_wait_MS_CNT              BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_io_latch_wait_AVG                 FLOAT                                   NOT NULL DEFAULT(0)
-------------------------------------
,ios_tree_page_latch_wait_CNT               BIGINT                                  NOT NULL DEFAULT(0) -- Subset of ios_page_latch_wait_CNT
,ios_tree_page_latch_wait_MS_CNT            BIGINT                                  NOT NULL DEFAULT(0) -- Subset of ios_page_latch_wait_MS_CNT
,ios_tree_page_latch_wait_AVG               FLOAT                                   NOT NULL DEFAULT(0) -- Subset of ios_page_latch_wait_AVG
-------------------------------------
,ios_tree_page_io_latch_wait_CNT            BIGINT                                  NOT NULL DEFAULT(0) -- Subset of ios_page_io_latch_wait_CNT
,ios_tree_page_io_latch_wait_MS_CNT         BIGINT                                  NOT NULL DEFAULT(0) -- Subset of ios_page_io_latch_wait_MS_CNT
,ios_tree_page_io_latch_wait_AVG            FLOAT                                   NOT NULL DEFAULT(0) -- Subset of ios_page_io_latch_wait_AVG
-------------------------------------
,ios_page_compression_attempt_CNT           BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_compression_success_CNT           BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_compression_fail_CNT              BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_compression_fail_PCT              FLOAT                                   NOT NULL DEFAULT(0) -- Computed
-------------------------------------
-- New for 2019
-------------------------------------
,ios_version_generated_inrow_CNT            BIGINT                                  NOT NULL DEFAULT(0) -- In-row version records retained by Snapshot isolation
,ios_version_generated_off_row_CNT          BIGINT                                  NOT NULL DEFAULT(0) -- off_row version records retained by Snapshot isolation
,ios_ghost_version_inrow_CNT                BIGINT                                  NOT NULL DEFAULT(0) -- Ghost in-row version records retained by Snapshot isolation
,ios_ghost_version_off_row_CNT              BIGINT                                  NOT NULL DEFAULT(0) -- Ghost off_row version records retained by Snapshot isolation
,ios_insert_over_ghost_version_inrow_CNT    BIGINT                                  NOT NULL DEFAULT(0) -- Inserts over Ghost in-row version records retained by Snapshot isolation
,ios_insert_over_ghost_version_off_row_CNT  BIGINT                                  NOT NULL DEFAULT(0) -- Inserts over Ghost off_row version records retained by Snapshot isolation

--------------------------------------------------------------------------------------------------------------------------------------------
-- sys.dm_db_index_usage_stats + sys.dm_db_missing_index_group_stats
--------------------------------------------------------------------------------------------------------------------------------------------
,ius_user_Total_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,ius_user_read_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,ius_user_seeks_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
                                            -- includes: sys.dm_db_missing_index_group_stats user_seeks
,ius_user_scans_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
                                            -- includes: sys.dm_db_missing_index_group_stats user_scans
,ius_user_lookups_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
,ius_user_updates_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
,ius_system_seeks_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
                                            -- includes: sys.dm_db_missing_index_group_stats system_seeks
,ius_system_scans_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
                                            -- includes: sys.dm_db_missing_index_group_stats system_scans
,ius_system_lookups_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ius_system_updates_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ius_last_user_seek_DTTM                    DATETIME                                    NULL
                                            -- includes: sys.dm_db_missing_index_group_stats last_user_seek
,ius_last_user_scan_DTTM                    DATETIME                                    NULL
                                            -- includes: sys.dm_db_missing_index_group_stats last_user_scan
,ius_last_user_lookup_DTTM                  DATETIME                                    NULL
,ius_last_user_update_DTTM                  DATETIME                                    NULL
,ius_last_system_seek_DTTM                  DATETIME                                    NULL
                                            -- includes: sys.dm_db_missing_index_group_stats last_system_seek
,ius_last_system_scan_DTTM                  DATETIME                                    NULL
                                            -- includes: sys.dm_db_missing_index_group_stats last_system_scan
,ius_last_system_lookup_DTTM                DATETIME                                    NULL
,ius_last_system_update_DTTM                DATETIME                                    NULL
----------------------------
,ius_no_read_user_updates_CNT               BIGINT                                  NOT NULL DEFAULT(0)
,ius_last_read_days_ago                     BIGINT                                      NULL
,ius_last_write_days_ago                    BIGINT                                      NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Column Store - sys.dm_db_column_store_row_group_operational_stats
--------------------------------------------------------------------------------------------------------------------------------------------
,cs_partition_CNT                           BIGINT                                  NOT NULL DEFAULT(0)
,cs_row_group_CNT                           BIGINT                                  NOT NULL DEFAULT(0)
,cs_index_scan_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,cs_scan_CNT                                BIGINT                                  NOT NULL DEFAULT(0)
,cs_delete_buffer_scan_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
,cs_row_group_lock_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,cs_row_group_lock_wait_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
,cs_row_group_lock_wait_MS_CNT              BIGINT                                  NOT NULL DEFAULT(0)
,cs_row_group_lock_wait_AVG                 FLOAT                                   NOT NULL DEFAULT(0)
,cs_returned_row_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,cs_returned_aggregate_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
,cs_returned_group_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,cs_input_groupby_row_CNT                   BIGINT                                  NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- XTP In-Memory tables & indexes - sys.dm_db_xtp_index_stats,dm_db_xtp_Nonclustered_index_stats,dm_db_xtp_memory_consumers
--------------------------------------------------------------------------------------------------------------------------------------------
-- sys.dm_db_xtp_object_stats -------------
,xtp_row_insert_attempts_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,xtp_row_update_attempts_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,xtp_row_delete_attempts_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,xtp_write_conflicts_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,xtp_unique_constraint_violations_CNT       BIGINT                                  NOT NULL DEFAULT(0)
-- sys.dm_db_xtp_index_stats --------------
,xtp_object_ID                              INT                                         NULL
,xtp_scans_started_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,xtp_scans_retries_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,xtp_rows_returned_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,xtp_rows_touched_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
-- sys.dm_db_xtp_Nonclustered_index_stats -
,xtp_delta_pages_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,xtp_leaf_pages_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_update_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_update_retry_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_update_retry_PCT                  FLOAT                                   NOT NULL DEFAULT(0) -- Computed
,xtp_page_consolidation_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_consolidation_retry_CNT           BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_consolidation_retry_PCT           FLOAT                                   NOT NULL DEFAULT(0) -- Computed
,xtp_page_split_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_split_retry_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_split_retry_PCT                   FLOAT                                   NOT NULL DEFAULT(0) -- Computed
,xtp_key_split_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,xtp_key_split_retry_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,xtp_key_split_retry_PCT                    FLOAT                                   NOT NULL DEFAULT(0) -- Computed
,xtp_page_merge_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_merge_retry_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_merge_retry_PCT                   FLOAT                                   NOT NULL DEFAULT(0) -- Computed
,xtp_key_merge_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,xtp_key_merge_retry_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,xtp_key_merge_retry_PCT                    FLOAT                                   NOT NULL DEFAULT(0) -- Computed
,xtp_uses_key_normalization                 BIT                                     NOT NULL DEFAULT(0)
-- sys.dm_db_xtp_memory_consumers ---------
,xtp_allocated_bytes_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,xtp_used_bytes_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,xtp_allocation_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------------
,xtp_Total_Contacts_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,xtp_Total_read_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,xtp_Total_write_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,xtp_Total_insert_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
,xtp_Total_update_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
,xtp_Total_delete_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
,xtp_Total_Split_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,xtp_Total_merge_CNT                        BIGINT                                  NOT NULL DEFAULT(0)

-----------------------------------------------------------------------
-- Shared - sys.dm_db_partition_stats, sys.dm_db_xtp_memory_consumers
-----------------------------------------------------------------------
,row_CNT                                    BIGINT                                  NOT NULL DEFAULT(0)
,reserved_page_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes XTP allocated_bytes/8192.0
,used_page_CNT                              BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes XTP CEILING(used_bytes/8192.0)
,in_row_data_page_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
,in_row_used_page_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
,in_row_reserved_page_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,lob_used_page_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,lob_reserved_page_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,row_overflow_used_page_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
,row_overflow_reserved_page_CNT             BIGINT                                  NOT NULL DEFAULT(0)

-----------------------------------------------------------
-- Index Data Space, filegroup
-----------------------------------------------------------
,data_space_ID                              BIGINT                                      NULL
                                            -- ID of the data space for this index. Data space is either a filegroup or partition scheme
                                            -- 0 = object_ID is a table-valued function or in-memory index
                                            -- Also sys,fulltext_indexes.data_space_ID
,data_space_name                            SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,data_space_logical_filename                SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,data_space_type                            NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,data_space_type_desc                       SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,data_space_is_default                      BIT                                     NOT NULL DEFAULT(0)
,data_space_is_system                       BIT                                     NOT NULL DEFAULT(0)
,filegroup_guid                             UNIQUEIDENTIFIER                            NULL
,filegroup_is_read_only                     BIT                                     NOT NULL DEFAULT(0)
,filegroup_is_autogrow_all_files            BIT                                     NOT NULL DEFAULT(0)

-----------------------------------------------------------
-- Index Partition Info
-----------------------------------------------------------
,partition_CNT                              BIGINT                                  NOT NULL DEFAULT(0)
,partition_Column_ID                        BIGINT                                      NULL
,partition_Column_Name                      SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,partition_schemes_function_ID              BIGINT                                      NULL
,partition_schemes_name                     SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,partition_function_ID                      BIGINT                                      NULL
,partition_function_name                    SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,partition_function_type                    NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,partition_function_type_desc               SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,partition_function_fanout                  BIGINT                                      NULL
,partition_function_boundary_value          NVARCHAR(5)    COLLATE DATABASE_DEFAULT     NULL
,partition_function_is_system               BIT                                         NULL
,partition_function_create_DTTM             DATETIME                                    NULL
,partition_function_modify_DTTM             DATETIME                                    NULL

-----------------------------------------------------------
-- Index Partition Compression
-----------------------------------------------------------
,Partition_none_compress_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,Partition_row_compress_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
,Partition_page_compress_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,Partition_columnstore_compress_CNT         BIGINT                                  NOT NULL DEFAULT(0)
,Partition_columnstore_archive_compress_CNT BIGINT                                  NOT NULL DEFAULT(0)

-----------------------------------------------------------
-- sys.dm_os_buffer_descriptors
-----------------------------------------------------------
,buffer_Total_KB_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes XTP allocated_bytes/1024.0
,buffer_free_KB_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes (allocated_bytes - used_bytes)/1024.0

-----------------------------------------------------------
-- Computed/derived Values
-----------------------------------------------------------
,key_column_IDs                             NVARCHAR(1000) COLLATE DATABASE_DEFAULT     NULL -- concatenated key ordered list of column IDs
,covered_fkc_IDs                            NVARCHAR(1000) COLLATE DATABASE_DEFAULT     NULL -- list of FKs covered by this index
--------------------------------------------
,index_CNT                                  BIGINT                                  NOT NULL DEFAULT(0)
,heap_index_CNT                             BIGINT                                  NOT NULL DEFAULT(0)
,Clustered_index_CNT                        BIGINT                                  NOT NULL DEFAULT(0) -- no _CNT only 1 per table
,Nonclustered_index_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,XML_index_CNT                              BIGINT                                  NOT NULL DEFAULT(0)
,Spatial_index_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,Clustered_ColumnStore_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
,Nonclustered_ColumnStore_CNT               BIGINT                                  NOT NULL DEFAULT(0)
,Nonclustered_Hash_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,Fulltext_index_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,Missing_index_CNT                          BIGINT                                  NOT NULL DEFAULT(0) -- used for TABLES
,fkc_missing_index_CNT                      BIGINT                                  NOT NULL DEFAULT(0) -- used for FKC
,Foreign_Key_CNT                            BIGINT                                  NOT NULL DEFAULT(0)
,Relates_Fulltext_index_ID                  BIGINT                                      NULL
,Histogram_NULL_PCT                         FLOAT                                       NULL            -- Computed
--------------------------------------------
,key_Total_datatype_length_bytes            BIGINT                                      NULL
,inc_Total_datatype_length_bytes            BIGINT                                      NULL
,idx_Total_datatype_length_bytes            BIGINT                                      NULL
,Key_Columns_CNT                            BIGINT                                  NOT NULL DEFAULT(0)
,Included_Columns_CNT                       BIGINT                                  NOT NULL DEFAULT(0)

,Stats_CNT                                  BIGINT                                  NOT NULL DEFAULT(0)
,is_activity_for_period                     TINYINT                                     NULL
,low_selectivity_additional_keys            NVARCHAR(200)  COLLATE DATABASE_DEFAULT     NULL

-----------------------------------------------------------
--
-----------------------------------------------------------
,Element_Uniqueness                         NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
,Density                                    FLOAT                                   NOT NULL DEFAULT(0)

-----------------------------------------------------------
--
-----------------------------------------------------------
,key_column_info                            NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
,Included_column_info                       NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL

,key_element_length                         NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL -- shows increasing length of each key element

,Lead_Element_Column_ID                     SMALLINT                                    NULL
,Lead_Element_Uniqueness                    FLOAT                                       NULL
,Lead_Element_Max_Len                       SMALLINT                                    NULL
,Lead_Element_Data_Type                     SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,Lead_Element_is_Identity                   BIT                                     NOT NULL DEFAULT(0)
,Lead_Element_is_Sequence                   BIT                                     NOT NULL DEFAULT(0)
,Lead_Element_is_newsequentialid            BIT                                     NOT NULL DEFAULT(0)
,Lead_Element_is_newid                      BIT                                     NOT NULL DEFAULT(0)
,Lead_Element_is_Nullable                   BIT                                     NOT NULL DEFAULT(0)

-----------------------------------------------------------
-- Computed Ratios
-----------------------------------------------------------
,ius_scans_to_read_PCT                      FLOAT                                       NULL
,ops_scans_to_read_PCT                      FLOAT                                       NULL

,ius_lookups_to_read_PCT                    FLOAT                                       NULL
,ios_singleton_lookup_to_read_PCT           FLOAT                                       NULL

,ius_scans_to_seeks_RAT                     FLOAT                                       NULL

,ius_read_to_write_RAT                      FLOAT                                       NULL -- if less than zero WRITES with NO READS
,ios_read_to_write_RAT                      FLOAT                                       NULL -- if less than zero WRITES with NO READS

,ius_read_to_parent_RAT                     FLOAT                                       NULL -- if less than zero WRITES with NO READS
,ios_read_to_parent_RAT                     FLOAT                                       NULL -- if less than zero WRITES with NO READS

,ius_write_to_instance_RAT                  FLOAT                                       NULL -- if less than zero WRITES with NO READS
,ios_write_to_instance_RAT                  FLOAT                                       NULL -- if less than zero WRITES with NO READS

,used_pages_in_buffer_PCT                   FLOAT                                       NULL
,page_lock_to_row_lock_RAT                  FLOAT                                       NULL
,page_splits_to_write_PCT                   FLOAT                                       NULL
,page_merge_to_write_PCT                    FLOAT                                       NULL
-----------------------------------------------------------
-- Overlappers
-----------------------------------------------------------
,Overlap_Code                               NVARCHAR(800)  COLLATE DATABASE_DEFAULT     NULL -- keys common across "indexes", w/o includes
,Synergy_Code                               NVARCHAR(800)  COLLATE DATABASE_DEFAULT     NULL -- columns in common, incl included columns
,constraints                                NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
,extended_properties                        NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
-----------------------------------------------------------
,Diagnostics                                NVARCHAR(MAX) COLLATE DATABASE_DEFAULT      NULL
,Diagnostics_Metrics                        NVARCHAR(MAX) COLLATE DATABASE_DEFAULT      NULL
) WITH (DATA_COMPRESSION = PAGE);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Created Creating table of consolidated index properties and attributes '
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Insert heaps, indexes, FKC, TVF, Views
/******************************************************************************************************************************************/
INSERT INTO tempdb.dbo.SQLXL_Index_Compilation
      (rec_type
      ,database_id
      ---------------------
      ,history_source_object_id
      ,parent_object_id
      ---------------------
      ,object_id
      ,obj_name
      ,obj_principal_ID
      ,obj_type
      ,obj_type_desc
      ,obj_create_date
      ,obj_modify_date
      ,obj_is_published
      ,obj_is_schema_published
      ---------------------
      ,collection_DTTM
      ----------------------------------------------------------------------------------------------------
      ,index_id
      ,name
      ,type
      ,type_desc
      ,type_short_desc
      ,is_unique
      ,data_space_id
      ,ignore_dup_key
      ,is_primary_key
      ,is_unique_constraint
      ,fill_factor
      ,is_padded
      ,is_disabled
      ,is_hypothetical
      ,allow_row_locks
      ,allow_page_locks
      ,has_filter
      ,filter_definition
      ---------------------
      ,Partition_Column_ID
      ,Partition_Column_Name
      ---------------------
      ,compression_delay_mm
      ,is_ignored_in_optimization
      ,suppress_dup_key_messages
      ,auto_created
      ,optimize_for_sequential_key
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - sys.internal_tables
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped
      ,internal_type
      ,internal_type_desc
      ,parent_minor_id
      -------------------------
      ,sub_type
      ,sub_type_desc
      ----------------------------------------------------------------------------------------------------
      -- sys.xml_indexes
      ----------------------------------------------------------------------------------------------------
      ,xml_index_type
      ,xml_index_type_description
      ,xml_using_xml_index_id
      ,xml_secondary_type
      ,xml_secondary_type_desc
      ,xml_path_id
      ----------------------------------------------------------------------------------------------------
      -- sys.spatial_indexes
      ----------------------------------------------------------------------------------------------------
      ,si_tessellation_scheme
      ,si_bounding_box_xmin
      ,si_bounding_box_ymin
      ,si_bounding_box_xmax
      ,si_bounding_box_ymax
      ,si_level_1_grid_desc
      ,si_level_2_grid_desc
      ,si_level_3_grid_desc
      ,si_level_4_grid_desc
      ,si_cells_per_object
      ----------------------------------------------------------------------------------------------------
      -- sys.hash_indexes
      ----------------------------------------------------------------------------------------------------
      ,hi_bucket_CNT
      ----------------------------------------------------------------------------------------------------
      -- sys.foreign_keys
      ----------------------------------------------------------------------------------------------------
      ,fkc_referenced_object_ID
      ,fkc_referenced_index_ID
      ,fkc_is_not_for_replication
      ,fkc_delete_referential_action
      ,fkc_delete_referential_action_desc
      ,fkc_update_referential_action
      ,fkc_update_referential_action_desc
      ----------------------------------------------------------------------------------------------------
      -- sys.dm_os_buffer_descriptors
      ----------------------------------------------------------------------------------------------------
      ,buffer_Total_KB_CNT
      ,buffer_free_KB_CNT
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,is_system_named
      ,index_CNT
      ,heap_index_CNT
      ,Clustered_index_CNT
      ,Nonclustered_index_CNT
      ,XML_index_CNT
      ,Spatial_index_CNT
      ,Clustered_ColumnStore_CNT
      ,Nonclustered_ColumnStore_CNT
      ,Nonclustered_Hash_CNT
      ,Fulltext_index_CNT
      ,Missing_index_CNT
      ,Foreign_Key_CNT
)
SELECT rec_type                          = N'I'
      ,database_id                       = o.database_id
      ---------------------
      ,history_source_object_id          = o.history_source_object_id
      ,parent_object_id                  = o.parent_object_id
      ---------------------
      ,object_id                         = o.object_id
      ,obj_name                          = o.name
      ,obj_principal_ID                  = o.principal_ID
      ,obj_type                          = o.type
      ,obj_type_desc                     = o.type_desc
      ,obj_create_date                   = o.create_date
      ,obj_modify_date                   = o.modify_date
      ,obj_is_published                  = o.is_published
      ,obj_is_schema_published           = o.is_schema_published
      ---------------------
      ,collection_DTTM                   = p.collection_DTTM
      -----------------------------------------------------------------------------------------------------
      -- Index info consolidated
      -- NOTE: SQL_INLINE_TABLE_VALUED_FUNCTION have no index records
      -----------------------------------------------------------------------------------------------------
      ,index_id                          = CASE -- Missing indexes handled in INSERT MISSIN INDEX code below
                                                WHEN o.type IN (N'F')                   THEN o.object_id                      -- Foreign Key
                                                WHEN o.type IN (N'IT',N'TF',N'U',N'V')  THEN COALESCE(i.index_id,0)
                                                WHEN o.type IN (N'FT',N'IF')            THEN COALESCE(i.index_id,o.object_id) -- TVF
                                                ELSE NULL
                                           END
      ,name                              = COALESCE(i.name,i.type_desc,o.name)
      ,type                              = COALESCE(i.type,CASE o.type
                                                                WHEN N'V'  THEN N'V' -- unindexed view type
                                                                WHEN N'IF' THEN N'0' -- undeclared table valued function
                                                                ELSE o.type
                                                           END)
      ,type_desc                         = COALESCE(i.type_desc,o.type_desc,N'HEAP')
      ,type_short_desc                   = CASE COALESCE(i.type,o.type,N'0')
                                                WHEN N'0'  THEN N'HP'
                                                WHEN N'1'  THEN N'CX'
                                                WHEN N'2'  THEN N'NCX'
                                                WHEN N'3'  THEN N'XML'
                                                WHEN N'4'  THEN N'SPT'
                                                WHEN N'5'  THEN N'CCS'
                                                WHEN N'6'  THEN N'NCS'
                                                WHEN N'7'  THEN N'NHX'
                                                WHEN N'90' THEN N'FTX' --<<< See Insert FULL TEXT indexes below
                                                ----------------------
                                                WHEN N'F'  THEN N'FKC'
                                                WHEN N'FT' THEN N'HP'
                                                WHEN N'IF' THEN N'HP'
                                                WHEN N'IT' THEN N'IT'
                                                WHEN N'M'  THEN N'MIX' --<<< See Insert MISSING indexes below
                                                WHEN N'TF' THEN N'HP'  -- SQL table-valued-function
                                                WHEN N'U'  THEN N'TBL'
                                                WHEN N'V'  THEN N'UIV' -- unindexed view type
                                                ELSE            COALESCE(i.type,o.type,N'??')
                                           END
      ,is_unique                         = ISNULL(i.is_unique,0)
      ,data_space_id                     = ISNULL(i.data_space_id,0)
      ,ignore_dup_key                    = ISNULL(i.ignore_dup_key,0)
      ,is_primary_key                    = ISNULL(i.is_primary_key,0)
      ,is_unique_constraint              = ISNULL(i.is_unique_constraint,0)
      ,fill_factor                       = CASE WHEN i.fill_factor = 0 THEN 100 ELSE i.fill_factor END
      ,is_padded                         = ISNULL(i.is_padded,0)
      ,is_disabled                       = ISNULL(i.is_disabled,0)
      ,is_hypothetical                   = ISNULL(i.is_hypothetical,0)
      ,allow_row_locks                   = ISNULL(i.allow_row_locks,0)
      ,allow_page_locks                  = ISNULL(i.allow_page_locks,0)
      ,has_filter                        = ISNULL(i.has_filter,0)
      ,filter_definition                 = i.filter_definition
      ---------------------
      ,Partition_Column_ID               = idx_partition.Partition_Column_ID
      ,Partition_Column_Name             = idx_partition.Partition_Column_Name
      ---------------------
      ,compression_delay_mm              = i.compression_delay
      ,is_ignored_in_optimization        = ISNULL(i.is_ignored_in_optimization,0)
      ,suppress_dup_key_messages         = ISNULL(i.suppress_dup_key_messages,0)
      ,auto_created                      = ISNULL(i.auto_created,0)
      ,optimize_for_sequential_key       = ISNULL(i.optimize_for_sequential_key,0)
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - sys.internal_tables
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped                     = o.is_ms_shipped
      ,internal_type                     = o.internal_type
      ,internal_type_desc                = o.internal_type_desc
      ,parent_minor_id                   = o.parent_minor_id
      ----------------------------------------------------------------------------------------------------
      --
      ----------------------------------------------------------------------------------------------------
      ,sub_type                          = COALESCE(i.sub_type,0) -- spatial_index_type     ,xml_index_type
      ,sub_type_desc                     = i.sub_type_desc        -- spatial_index_type_desc,xml_index_type_description
      ----------------------------------------------------------------------------------------------------
      -- XML indexes
      ----------------------------------------------------------------------------------------------------
      ,xml_index_type                    = i.xml_index_type
      ,xml_index_type_description        = i.xml_index_type_description
      ,xml_using_xml_index_id            = i.xml_using_xml_index_id
      ,xml_secondary_type                = i.xml_secondary_type
      ,xml_secondary_type_desc           = i.xml_secondary_type_desc
      ,xml_path_id                       = i.xml_path_id
      ----------------------------------------------------------------------------------------------------
      -- Spatial indexes
      ----------------------------------------------------------------------------------------------------
      ,si_tessellation_scheme            = i.si_tessellation_scheme
      ,si_bounding_box_xmin              = i.si_bounding_box_xmin
      ,si_bounding_box_ymin              = i.si_bounding_box_ymin
      ,si_bounding_box_xmax              = i.si_bounding_box_xmax
      ,si_bounding_box_ymax              = i.si_bounding_box_ymax
      ,si_level_1_grid_desc              = i.si_level_1_grid_desc
      ,si_level_2_grid_desc              = i.si_level_2_grid_desc
      ,si_level_3_grid_desc              = i.si_level_3_grid_desc
      ,si_level_4_grid_desc              = i.si_level_4_grid_desc
      ,si_cells_per_object               = i.si_cells_per_object
      ----------------------------------------------------------------------------------------------------
      -- Hash indexes
      ----------------------------------------------------------------------------------------------------
      ,hi_bucket_CNT                     = ISNULL(i.hi_bucket_count,0)
      ----------------------------------------------------------------------------------------------------
      -- sys.foreign_keys
      ----------------------------------------------------------------------------------------------------
      ,fkc_referenced_object_ID           = fk.referenced_object_ID
      ,fkc_referenced_index_ID            = fk.key_index_id
      ,fkc_is_not_for_replication         = fk.is_not_for_replication
      ,fkc_delete_referential_action      = fk.delete_referential_action
      ,fkc_delete_referential_action_desc = fk.delete_referential_action_desc
      ,fkc_update_referential_action      = fk.update_referential_action
      ,fkc_update_referential_action_desc = fk.update_referential_action_desc
      ----------------------------------------------------------------------------------------------------
      -- sys.dm_os_buffer_descriptors
      ----------------------------------------------------------------------------------------------------
      ,buffer_Total_KB_CNT               = ISNULL(bd.buffer_Total_KB,0)
      ,buffer_free_KB_CNT                = ISNULL(bd.buffer_free_KB ,0)
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,is_system_named                   = COALESCE(fk.is_system_named,0)
      ,index_CNT                         = IIF(TRY_CAST(i.type AS INT) > 0,1,0) -- OMIT HEAPS!
      ,heap_index_CNT                    = IIF(i.type = N'0'              ,1,0)
      ,Clustered_index_CNT               = IIF(i.type = N'1'              ,1,0)
      ,Nonclustered_index_CNT            = IIF(i.type = N'2'              ,1,0)
      ,XML_index_CNT                     = IIF(i.type = N'3'              ,1,0)
      ,Spatial_index_CNT                 = IIF(i.type = N'4'              ,1,0)
      ,Clustered_ColumnStore_CNT         = IIF(i.type = N'5'              ,1,0)
      ,Nonclustered_ColumnStore_CNT      = IIF(i.type = N'6'              ,1,0)
      ,Nonclustered_Hash_CNT             = IIF(i.type = N'7'              ,1,0)
      ,Fulltext_index_CNT                = IIF(i.type = N'90'             ,1,0)
      ,Missing_index_CNT                 = 0
      ,Foreign_Key_CNT                   = IIF(fk.object_id IS NOT NULL   ,1,0)

/*** LOCAL TESTING ***
SELECT o.history_source_object_id,o.parent_object_id,op.name,o.object_id,o.name,o.type
      ,op.object_id
      ,i.index_id
      ,i.type
      ,fk.is_not_for_replication
--*/
  FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters           AS p
 CROSS
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Candidate objects
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id
              ,name
              ,object_id
              ,parent_object_id
              ,history_source_object_id
              ,principal_id
              ,type
              ,type_desc
              ,create_date
              ,modify_date
              ,is_published
              ,is_schema_published
              --------------------------------------------------------
              ,is_ms_shipped
              ,internal_type
              ,internal_type_desc
              ,parent_id
              ,parent_minor_id
              --------------------------------------------------------
           -- ,lob_data_space_id, filestream_data_space_id, all TR trigger columns excluded, all SQL MODULES columns excluded
          FROM tempdb.dbo.SQLXL_Index_sys_objects
         WHERE type IN
                       (N'F'  -- Foreign Key Constraint
                       ,N'FT' -- Assembly (CLR) table-valued function
                       ,N'IF' -- SQL inline table-valued function
                       ,N'IT' -- internal table
                       ,N'TF' -- SQL table valued function            SQL 2012 +
                       ,N'U'  -- Table (user-defined)
                       ,N'V'  -- View
                       )
       ) AS o

------------------------------------------------------------------------------------------------------
-- match up objects to their indexes
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_indexes AS i  -- includes sys.indexes, 'FT' Assembly (CLR) table-valued function
    ON o.database_id = i.database_id
   AND o.object_id   = i.object_id

------------------------------------------------------------------------------------------------------
-- match up Foreign Key Constraints to their records
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_foreign_keys AS fk
    ON o.database_id = fk.database_id
   AND o.object_id   = fk.object_id

------------------------------------------------------------------------------------------------------
-- add buffer cache summary usage
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_dm_os_buffer_descriptors_EXT AS bd
    ON o.database_id = bd.database_id
   AND o.object_id   = bd.object_id
   AND i.index_id    = bd.index_id

------------------------------------------------------------------------------------------------------
-- Index Partition information
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Index Partition information
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,Partition_Column_ID   = ic.column_id
              ,Partition_Column_Name = c.name
              ,rn                    = ROW_NUMBER() OVER (PARTITION BY ic.database_id
                                                                      ,ic.object_id
                                                                      ,ic.index_id
                                                              ORDER BY ic.column_id
                                                         )
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
          JOIN tempdb.dbo.SQLXL_Index_sys_columns       AS c
            ON ic.database_id                          = c.database_id
           AND ic.object_id                            = c.object_id
           AND ic.column_id                            = c.column_id
         WHERE ic.partition_ordinal                    = 1
       )            AS idx_partition
       ---------------------------------------------------------------------------------
    ON i.database_id = idx_partition.database_id
   AND i.object_id   = idx_partition.object_id
   AND i.index_id    = idx_partition.index_id
   AND (   1         = idx_partition.rn
        OR idx_partition.rn IS NULL
       )
OPTION (FORCE ORDER,MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Inserted Insert heaps, indexes, FKC, TVF, Views'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Insert Full Text indexes
/******************************************************************************************************************************************/
INSERT INTO tempdb.dbo.SQLXL_Index_Compilation
      (rec_type
      ,database_id
      ---------------------
      ,history_source_object_id
      ,parent_object_id
      ,object_id
      ,obj_name
      ,obj_principal_ID
      ,obj_type
      ,obj_type_desc
      ,obj_create_date
      ,obj_modify_date
      ,obj_is_published
      ,obj_is_schema_published
      ---------------------
      ,collection_DTTM
      ---------------------
      ,index_id
      ,name
      ,type
      ,type_desc
      ,sub_type
      ,type_short_desc
      ,data_space_id
      ,is_disabled
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - sys.internal_tables
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped
      ,internal_type
      ,internal_type_desc
      ,parent_minor_id
      --------------------
      ,key_column_info
      --------------------
      ,ft_unique_index_id
      ,ft_fulltext_catalog_id
      ,ft_change_tracking_state
      ,ft_change_tracking_state_desc
      ,ft_has_crawl_completed
      ,ft_crawl_type
      ,ft_crawl_type_desc
      ,ft_crawl_start_date
      ,ft_crawl_end_date
      ,ft_incremental_timestamp
      ,ft_stoplist_id
      ,ft_property_list_id
      ----------------------------------------------------------------------------------------------------
      -- sys.dm_os_buffer_descriptors
      ----------------------------------------------------------------------------------------------------
      ,buffer_Total_KB_CNT
      ,buffer_free_KB_CNT
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT
      ,heap_index_CNT
      ,Clustered_index_CNT
      ,Nonclustered_index_CNT
      ,XML_index_CNT
      ,Spatial_index_CNT
      ,Clustered_ColumnStore_CNT
      ,Nonclustered_ColumnStore_CNT
      ,Nonclustered_Hash_CNT
      ,Fulltext_index_CNT
      ,Missing_index_CNT
      ,Foreign_Key_CNT
       )
SELECT rec_type                          = N'I'
      ---------------------
      ,database_id                       = o.database_id
      ---------------------
      ,history_source_object_id          = o.history_source_object_id
      ,parent_object_id                  = o.parent_object_id
      ---------------------
      ,object_id                         = o.object_id
      ,obj_name                          = o.name
      ,obj_principal_ID                  = o.principal_ID
      ,obj_type                          = o.type
      ,obj_type_desc                     = o.type_desc
      ,obj_create_date                   = o.create_date
      ,obj_modify_date                   = o.modify_date
      ,obj_is_published                  = o.is_published
      ,obj_is_schema_published           = o.is_schema_published
      ---------------------
      ,collection_DTTM                   = p.collection_DTTM
      ---------------------
      ,index_id                          = i.object_id
      ,name                              = N'FULL TEXT'            -- HARD CODED
      ,type                              = N'90'                   -- used to maintain sort order on XL sheet by index TYPE
      ,type_desc                         = N'FULL TEXT'            -- HARD CODED
      ,sub_type                          = 0
      ,type_short_desc                   = N'FTX'                  -- HARD CODED
      ,data_space_id                     = i.data_space_id
      ,is_disabled                       = CASE WHEN i.is_enabled = 1 THEN 0 ELSE 1 END -- NOTE: opposite of sys.[indexES]
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - sys.internal_tables
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped                     = o.is_ms_shipped
      ,internal_type                     = o.internal_type
      ,internal_type_desc                = o.internal_type_desc
      ,parent_minor_id                   = o.parent_minor_id
      --------------------
      ,key_column_info                   = NULL
      --------------------
      ,ft_unique_index_id                = i.unique_index_id    -- unique index used to uniquely relate the full-text index to the rows
      ,ft_fulltext_catalog_id            = i.fulltext_catalog_id
      ,ft_change_tracking_state          = i.change_tracking_state
      ,ft_change_tracking_state_desc     = i.change_tracking_state_desc
      ,ft_has_crawl_completed            = i.has_crawl_completed
      ,ft_crawl_type                     = i.crawl_type
      ,ft_crawl_type_desc                = i.crawl_type_desc
      ,ft_crawl_start_date               = i.crawl_start_date
      ,ft_crawl_end_date                 = i.crawl_end_date
      ,ft_incremental_timestamp          = i.incremental_timestamp
      ,ft_stoplist_id                    = i.stoplist_id
      ,ft_property_list_id               = i.property_list_id
      ----------------------------------------------------------------------------------------------------
      -- sys.dm_os_buffer_descriptors - no links between buffer cache and FUllText indexes found as of yet
      ----------------------------------------------------------------------------------------------------
      ,buffer_Total_KB_CNT               = 0 -- bd.buffer_Total_KB_CNT
      ,buffer_free_KB_CNT                = 0 -- bd.buffer_free_KB_CNT
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT                         = 1
      ,heap_index_CNT                    = 0
      ,Clustered_index_CNT               = 0
      ,Nonclustered_index_CNT            = 0
      ,XML_index_CNT                     = 0
      ,Spatial_index_CNT                 = 0
      ,Clustered_ColumnStore_CNT         = 0
      ,Nonclustered_ColumnStore_CNT      = 0
      ,Nonclustered_Hash_CNT             = 0
      ,Fulltext_index_CNT                = 1
      ,Missing_index_CNT                 = 0
      ,Foreign_Key_CNT                   = 0

  FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters AS p
 CROSS
  JOIN tempdb.dbo.SQLXL_Index_sys_fulltext_indexes   AS i
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_fulltext_catalogs  AS c
    ON i.database_id         = c.database_id
   AND i.fulltext_catalog_id = c.fulltext_catalog_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects            AS o
    ON i.database_id         = o.database_id
   AND i.object_id           = o.object_id
------------------------------------------------------------------------------------------------------
-- NOTE: Not sure how buffer cache links to Fulltext index
------------------------------------------------------------------------------------------------------
OPTION (FORCE ORDER, MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Inserted Full Text indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Insert Missing indexes
-- NOTE: includes tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_details, dm_db_missing_index_groups, dm_db_missing_index_group_stats
/******************************************************************************************************************************************/

INSERT INTO tempdb.dbo.SQLXL_Index_Compilation
      (rec_type
      ,database_id
      ---------------------
      ,history_source_object_id
      ,parent_object_id
      ,object_id
      ,obj_name
      ,obj_principal_ID
      ,obj_type
      ,obj_type_desc
      ,obj_create_date
      ,obj_modify_date
      ,obj_is_published
      ,obj_is_schema_published
      ---------------------
      ,collection_DTTM
      ---------------------
      ,index_id
      ,name
      ,type
      ,type_desc
      ,sub_type
      ,type_short_desc
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - sys.internal_tables
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped
      ,internal_type
      ,internal_type_desc
      ,parent_minor_id
      ---------------------
      ,mix_avg_Total_user_cost_AMT
      ,mix_avg_Total_system_cost_AMT
      ,mix_avg_user_impact_AMT
      ,mix_avg_system_impact_AMT
      ,mix_unique_compiles_CNT
      ,mix_Advantage_AMT
      -------------------------------------------------------------------------------------------------------------------------------
      -- missing_index_group_stats_query - multiple queries may exist per missing index, only get the query with the biggest benefit
      -- Logic contained in the instance/database data capture queries
      -------------------------------------------------------------------------------------------------------------------------------
      ,mqy_query_text
      ,mqy_query_plan
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT
      ,heap_index_CNT
      ,Clustered_index_CNT
      ,Nonclustered_index_CNT
      ,XML_index_CNT
      ,Spatial_index_CNT
      ,Clustered_ColumnStore_CNT
      ,Nonclustered_ColumnStore_CNT
      ,Nonclustered_Hash_CNT
      ,Fulltext_index_CNT
      ,Missing_index_CNT
      ,Foreign_Key_CNT
      )
SELECT rec_type                          = N'I'
      ,database_id                       = i.database_id
      ---------------------
      ,history_source_object_id          = o.history_source_object_id
      ,parent_object_id                  = o.parent_object_id
      ,object_id                         = o.object_id
      ,obj_name                          = o.name
      ,obj_principal_ID                  = o.principal_ID
      ,obj_type                          = o.type
      ,obj_type_desc                     = o.type_desc
      ,obj_create_date                   = o.create_date
      ,obj_modify_date                   = o.modify_date
      ,obj_is_published                  = o.is_published
      ,obj_is_schema_published           = o.is_schema_published
      ---------------------
      ,collection_DTTM                   = p.collection_DTTM
      ---------------------
      ,index_id                          = i.index_handle
      ,name                              = N'Missing index'
      ,type                              = N'M'
      ,type_desc                         = N'Missing index'
      ,sub_type                          = 0
      ,type_short_desc                   = N'MIX'
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - sys.internal_tables
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped                     = o.is_ms_shipped
      ,internal_type                     = o.internal_type
      ,internal_type_desc                = o.internal_type_desc
      ,parent_minor_id                   = o.parent_minor_id
      ---------------------
      ,mix_avg_Total_user_cost_AMT       = ISNULL(i.avg_Total_user_cost  ,0)
      ,mix_avg_Total_system_cost_AMT     = ISNULL(i.avg_Total_system_cost,0)
      ,mix_avg_user_impact_AMT           = ISNULL(i.avg_user_impact      ,0)
      ,mix_avg_system_impact_AMT         = ISNULL(i.avg_system_impact    ,0)
      ,mix_unique_compiles_CNT           = ISNULL(i.unique_compiles      ,0)
      ,mix_Advantage_AMT                 = ISNULL(i.mix_Advantage_AMT    ,0)
      ----------------------------------------
      -- missing_index_group_stats_query
      ----------------------------------------
      ,mqy_query_text                    = mqy.query_text
      ,mqy_query_plan                    = mqy.query_plan
      -------------------------------------------------------
      -- Object Computed/derived Values
      -------------------------------------------------------
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT                         = 0
      ,heap_index_CNT                    = 0
      ,Clustered_index_CNT               = 0
      ,Nonclustered_index_CNT            = 0
      ,XML_index_CNT                     = 0
      ,Spatial_index_CNT                 = 0
      ,Clustered_ColumnStore_CNT         = 0
      ,Nonclustered_ColumnStore_CNT      = 0
      ,Nonclustered_Hash_CNT             = 0
      ,Fulltext_index_CNT                = 0
      ,Missing_index_CNT                 = 1
      ,Foreign_Key_CNT                   = 0

/*** LOCAL TESTING ***
SELECT COUNT(1)
--*/

  FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters          AS p
 CROSS
  JOIN tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_details AS i
  JOIN tempdb.dbo.SQLXL_Index_sys_objects                     AS o
    ON i.database_id = o.database_id
   AND i.object_id   = o.object_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_group_stats_query AS mqy
    ON i.group_handle = mqy.group_handle
OPTION (FORCE ORDER,MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Inserted Missing indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Indexing Compilation Table
/******************************************************************************************************************************************/
CREATE UNIQUE CLUSTERED INDEX ixuc_SQLXL_Index_Compilation
    ON tempdb.dbo.SQLXL_Index_Compilation
      (database_id
      ,object_ID
      ,index_ID
      ,type
      ,sub_type
      )
  WITH (DATA_COMPRESSION = PAGE);

CREATE NONCLUSTERED INDEX ix_SQLXL_Index_Compilation__rec_type
    ON tempdb.dbo.SQLXL_Index_Compilation
      (rec_type)
  WITH (DATA_COMPRESSION = PAGE);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Indexed Compilation Table tempdb.dbo.SQLXL_Index_Compilation'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update source table unique index used by FullText index
/******************************************************************************************************************************************/
;WITH ftx AS (
SELECT database_id
      ,parent_object_id
      ,object_id
      ,ft_unique_index_id
      ,index_id
  FROM tempdb.dbo.SQLXL_Index_Compilation
 WHERE rec_type = N'I'
   AND type     = N'90' -- full text
)
UPDATE tgt
   SET tgt.Relates_Fulltext_index_ID = ftx.index_id
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
  JOIN ftx                                AS ftx
    ON tgt.database_id                     = ftx.database_id
   AND tgt.parent_object_id                = ftx.parent_object_id
   AND tgt.object_ID                       = ftx.object_ID
   AND tgt.index_ID                        = ftx.ft_unique_index_ID
 WHERE tgt.rec_type                        = N'I'
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated source unique index used by FullText index'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Concatenate list of index key column IDs in corrected sequence order
-- computed previously to account for clustered index key order not matching [index_column_id] order
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- required for the FOR XML function below
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.name,
--*/

        key_column_IDs = N','+key_columns.col_id
   FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
 CROSS APPLY
       (------------------------------------------------------------------------------------------------------------------------------------
        -- get comma-separated list of all KEY column ID's. Include leading comma so IDs are distinct
        -- includes ALL "indexes" except HEAP & Columnstore. Foreign Key Constraints added below
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT CAST(ic.column_id AS NVARCHAR(MAX)) + N','
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns ic
         WHERE tgt.database_id      = ic.database_id
           AND tgt.object_id        = ic.object_id
           AND tgt.index_id         = ic.index_id
           AND tgt.type             = ic.type
           AND 0                    = ic.is_included_column
         ORDER BY
               ic.key_column_sequence
           FOR XML PATH(N'')
       ) key_columns(col_id)
 WHERE tgt.rec_type  = N'I'
   AND tgt.type NOT IN (N'0',N'5',N'6',N'F',N'M')
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Concatenated list of index key column IDs in corrected sequence order'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Concatenate Foreign Key Constraint column IDs in [constraint_column_id] order
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- required for the FOR XML function below
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.name,
--*/

        key_column_IDs = N','+key_columns.col_id
   FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
 CROSS APPLY
       (------------------------------------------------------------------------------------------------------------------------------------
        -- get comma-separated list of all KEY column ID's, include leading column so IDs are distinct
        -- includes ALL "indexes" except HEAP & Columnstore
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT CAST(fkc.parent_column_id AS NVARCHAR(MAX)) + N','
          FROM tempdb.dbo.SQLXL_Index_sys_foreign_key_columns AS fkc
         WHERE tgt.database_id                               = fkc.database_id
           AND tgt.object_id                                 = fkc.constraint_object_id
         ORDER BY
               fkc.constraint_column_id
           FOR XML PATH(N'')
       ) key_columns(col_id)
 WHERE tgt.rec_type = N'I'
   AND tgt.type     = N'F'
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Concatenated Foreign Key Constraint column IDs in [constraint_column_id] order'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Started Object records - Base "P" (Table, View, TVF), HISTORY TABLE "H", and INTERNAL TABLE "S" records',0,0)
            WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Insert Object records - Base "P" (Table, View, TVF), HISTORY TABLE "H", and INTERNAL TABLE "S" records
-- Top-level "Parent" "P" tables include:
--    object type "U" "Base" tables - Rowstore HEAP, Rowstore Clustered, and Clustered Columnstore
--    object type "U" "History" tables created by Change Data Capture and System Versioning
-- Internal tables roll up to their respective parent BASE or HISTORY table
-- Other top-level objects include Table Valued Functions and Views
/******************************************************************************************************************************************/
INSERT INTO tempdb.dbo.SQLXL_Index_Compilation
      (rec_type
      --------------------------------------------
      -- sys.databases
      --------------------------------------------
      ,database_id
      ---------------------
      ,collection_DTTM
      --------------------------------------------
      -- sys.objects
      --------------------------------------------
      ,history_source_object_id
      ,parent_object_id
      --------------------------------------------
      ,object_id
      ,obj_name
      ,obj_principal_ID
      ,obj_type
      ,obj_type_desc
      ,obj_create_date
      ,obj_modify_date
      ,obj_is_published
      ,obj_is_schema_published
      --------------------------------------------
      ,obj_definition
      ,obj_uses_ansi_nulls
      ,obj_uses_quoted_identifier
      ,obj_is_schema_bound
      ,obj_uses_database_collation
      ,obj_is_recompiled
      ,obj_null_on_null_input
      ,obj_execute_as_principal_id
      ,obj_uses_native_compilation
      ,obj_is_inlineable
      ,obj_inline_type
      --------------------------------------------
      ,index_id
      ,name
      ,type
      ,type_desc
      ,sub_type
      ----------------------------------------------------------------------------------------------------
      -- sys.internal_tables
      ----------------------------------------------------------------------------------------------------
      ,internal_type
      ,internal_type_desc
      ,parent_minor_id
      ----------------------------------------------------------------------------------------------------
      -- sys.stats
      ----------------------------------------------------------------------------------------------------
      ,Stats_CNT
      )
SELECT rec_type = IIF(o.type = N'IT'
                     ,N'S' -- Internal Table
                     ,N'P') -- default value, updated below
      ----------------------------
      -- sys.databases
      ----------------------------
      ,database_id                 = o.database_id
      ,collection_DTTM             = p.collection_DTTM
      ----------------------------
      -- sys.objects
      ----------------------------
      ,history_source_object_id    = o.history_source_object_id
      ,parent_object_id            = o.parent_object_id
      ----------------------------
      ,object_id                   = o.object_id
      ,obj_name                    = o.name
      ,obj_principal_ID            = o.principal_id
      ,obj_type                    = o.type
      ,obj_type_desc               = o.type_desc
      ,obj_create_date             = o.create_date
      ,obj_modify_date             = o.modify_date
      ,obj_is_published            = o.is_published
      ,obj_is_schema_published     = o.is_schema_published
      -- SQL_MODULES --------------------------
      ,obj_definition              = o.definition
      ,obj_uses_ansi_nulls         = o.uses_ansi_nulls
      ,obj_uses_quoted_identifier  = o.uses_quoted_identifier
      ,obj_is_schema_bound         = o.is_schema_bound
      ,obj_uses_database_collation = o.uses_database_collation
      ,obj_is_recompiled           = o.is_recompiled
      ,obj_null_on_null_input      = o.null_on_null_input
      ,obj_execute_as_principal_id = o.execute_as_principal_id
      ,obj_uses_native_compilation = o.uses_native_compilation
      ,obj_is_inlineable           = o.is_inlineable
      ,obj_inline_type             = o.inline_type
      ----------------------------
      ,index_id                    = o.object_id
      ,name                        = o.name
      ,type                        = o.type
      ,type_desc                   = o.type_desc
      ,sub_type                    = 0
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables
      ----------------------------------------------------------------------------------------------------
      ,internal_type               = o.internal_type
      ,internal_type_desc          = o.internal_type_desc
      ,parent_minor_id             = o.parent_minor_id
      ----------------------------------------------------------------------------------------------------
      -- sys.stats
      ----------------------------------------------------------------------------------------------------
      ,Stats_CNT                   = ISNULL(stats.Statistics_CNT,0)

  FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters AS p
 CROSS
  JOIN (SELECT TOP (100) PERCENT
               *
          FROM tempdb.dbo.SQLXL_Index_sys_objects
         WHERE type
            IN (N'FT' -- Assembly (CLR) table-valued function
               ,N'IF' -- SQL inline table-valued function
               ,N'IT' -- Internal Table
               ,N'TF' -- SQL table valued function            SQL 2012 +
               ,N'U'  -- Table
               ,N'V'  -- View
               )
         ORDER BY
               database_id
              ,object_id
       ) AS o

  LEFT OUTER
  JOIN (---------------------------------------------------------------------------------------------------------------------------------------------------------------------
        -- Get count of compressed and archived partitions - OBJECT LEVEL ONLY
        ---------------------------------------------------------------------------------------------------------------------------------------------------------------------
        SELECT TOP (100) PERCENT
               p.database_id
              ,p.object_id
              ,None_Comp           = SUM(p.None_Comp    )
              ,Row_Comp            = SUM(p.Row_Comp     )
              ,Page_Comp           = SUM(p.Page_Comp    )
              ,colstore_Comp       = SUM(p.colstore_Comp)
              ,colstore_Arch       = SUM(p.colstore_Arch)
          FROM tempdb.dbo.SQLXL_Index_sys_partitions AS p
          JOIN tempdb.dbo.SQLXL_Index_sys_indexes    AS i
            ON p.database_id     = i.database_id
           AND p.object_id       = i.object_id
           AND p.index_id        = i.index_id
         WHERE i.type IN (N'0',N'1',N'5')
         GROUP BY
               p.database_id
              ,p.object_id
         ORDER BY
               p.database_id
              ,p.object_id
       )                   AS part
    ON o.database_id        = part.database_id
   AND o.object_id          = part.object_id

------------------------------------------------------------------------------------------------------
-- Stats Counts - OBJECT LEVEL ONLY
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- count of statistics for each table & indexed view
        SELECT TOP (100) PERCENT
               s.database_id
              ,s.object_id
              ,Statistics_CNT          = COUNT(1)
              ,Statistics_Filtered_CNT = SUM(CASE WHEN has_filter = 1 THEN 1 ELSE 0 END)
          FROM tempdb.dbo.SQLXL_Index_sys_stats   AS s
         GROUP BY
               s.database_id
              ,s.object_id
         ORDER BY
               s.database_id
              ,s.object_id
       ) stats
    ON o.database_id = stats.database_id
   AND o.object_id   = stats.object_id
OPTION (FORCE ORDER,MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Inserted Object records - Base "P" (Table, View, TVF), HISTORY TABLE "H", and INTERNAL TABLE "S" records'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Insert DATABASE records
/******************************************************************************************************************************************/
INSERT INTO tempdb.dbo.SQLXL_Index_Compilation
      (rec_type
      ,database_id
      ,database_name
      ,collation_name
      ---------------------
      ,collection_DTTM
      ,parent_object_id
      ,parent_object_name
      ,object_id
      ,obj_name
      ,obj_type
      ,obj_type_desc
      ,index_id
      ,name
      ,type
      ,type_desc
      ,sub_type
      )
SELECT rec_type                = N'D'
      ,database_id             = d.database_id
      ,database_name           = d.name
      ,collation_name          = d.collation_name
      ---------------------
      ,collection_DTTM         = p.collection_DTTM
      ,parent_object_id        = d.database_id
      ,parent_object_name      = d.name
      ,object_id               = d.database_id
      ,obj_name                = d.name
      ,obj_type                = N'DB'
      ,obj_type_desc           = N'Database'
      ,index_id                = d.database_id
      ,name                    = d.name
      ,type                    = N'DB'
      ,type_desc               = N'Database'
      ,sub_type                = 0
  FROM tempdb.dbo.SQLXL_Index_sys_databases      AS d
  JOIN (---------------------------------------------------------------------------------
        -- Only get databases in the returned info set - no MSDB, MASTER, ...
        ---------------------------------------------------------------------------------
        SELECT database_id
          FROM tempdb.dbo.SQLXL_Index_sys_objects
         GROUP BY
               database_id
       )                                    AS o
    ON d.database_id                         = o.database_id
 CROSS
  JOIN tempdb.dbo.SQLXL_Index_sys_Startup_Parameters AS p
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Inserted DATABASE records'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Insert INSTANCE record
/******************************************************************************************************************************************/
INSERT INTO tempdb.dbo.SQLXL_Index_Compilation
      (rec_type
      ,database_id
      ,database_name
      ,collation_name
      ---------------------
      ,collection_DTTM
      ,parent_object_id
      ,parent_object_name
      ,object_id
      ,obj_name
      ,obj_type
      ,obj_type_desc
      ,index_id
      ,name
      ,type
      ,type_desc
      ,sub_type
      )
SELECT rec_type                = N'A'
      ,database_id             = 0
      ,database_name           = N'Instance'
      ,collation_name          = CONVERT(nvarchar(128), SERVERPROPERTY('collation'))
      ---------------------
      ,collection_DTTM         = p.collection_DTTM
      ,parent_object_id        = 0
      ,parent_object_name      = N'Instance'
      ,object_id               = 0
      ,obj_name                = N'Instance'
      ,obj_type                = N'A'
      ,obj_type_desc           = N'Instance'
      ,index_id                = 0
      ,name                    = N'Instance'
      ,type                    = N'A'
      ,type_desc               = N'Instance'
      ,sub_type                = 0
  FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters AS p
OPTION (MAXDOP 1);

SET ANSI_WARNINGS OFF;

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Inserted INSTANCE record'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start "Parent"-level fields across records',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update "Parent"-level fields across records
-- NOTE: columns named "tbl_%" are not to be aggregated since they are at the parent level already
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,
--*/

       rec_type = IIF(tgt.rec_type = N'P'
                     ,CASE WHEN tbl.temporal_type        = 1     THEN N'H' -- History table
                           WHEN tbl.cdc_is_history_table = 1     THEN N'H' -- History table
                           ELSE tgt.rec_type
                      END
                     ,tgt.rec_type)
----------------------------------------------------------------------------------------------------
-- sys.databases
----------------------------------------------------------------------------------------------------
      ,database_name                     = d.name
      ,collation_name                    = d.collation_name
----------------------------------------------------------------------------------------------------
-- sys.schemas - object level
----------------------------------------------------------------------------------------------------
      ,schema_id                         = o.schema_id
      ,schema_name                       = s.name
      ,schema_principal_ID               = s.principal_id
----------------------------------------------------------------------------------------------------
-- sys.objects
----------------------------------------------------------------------------------------------------
      ,obj_name                           = o.name
      ,obj_type                           = o.type
      ,obj_type_desc                      = o.type_desc
      ,obj_create_date                    = o.create_date
      ,obj_modify_date                    = o.modify_date
      ,obj_is_published                   = o.is_published
      ,obj_is_schema_published            = o.is_schema_published
      ,obj_definition                     = IIF(rec_type = N'I',tgt.obj_definition,o.definition)
----------------------------------------------------------------------------------------------------
-- Parent Objects - mostly for Internal Tables - sys.tables
----------------------------------------------------------------------------------------------------
      ,parent_schema_id                  = op.schema_id
      ,parent_schema_name                = sp.name
      ,parent_object_name                = op.name
      ,parent_object_type                = op.type
      ,parent_object_type_desc           = op.type_desc
----------------------------------------------------------------------------------------------------
-- History Table sources - sys.schemas, sys.tables
----------------------------------------------------------------------------------------------------
      ,history_source_schema_id          = oh.schema_id
      ,history_source_schema_name        = sh.name
      ,history_source_object_name        = oh.name
      ,history_source_object_type        = oh.type
      ,history_source_object_type_desc   = oh.type_desc
----------------------------------------------------------------------------------------------------
-- sys.tables
----------------------------------------------------------------------------------------------------
      ,tbl_max_column_used_ID                 = tbl.max_column_id_used
      ,tbl_is_replicated                      = ISNULL(tbl.is_replicated,0)
      ,tbl_has_unchecked_assembly_data        = ISNULL(tbl.has_unchecked_assembly_data,0)
      ,tbl_lock_escalation                    = tbl.lock_escalation
      ,tbl_lock_escalation_desc               = tbl.lock_escalation_desc
      ,tbl_is_filetable                       = ISNULL(tbl.is_filetable,0)
      ,tbl_is_memory_optimized                = COALESCE(tbl.is_memory_optimized,0)
      ,tbl_is_clustered_columnstore           = ISNULL(ccs.is_clustered_columnstore,0)
      ,tbl_history_table_id                   = tbl.history_table_id
      ,tbl_history_table_schema               = sch.name
      ,tbl_history_table_name                 = his.name
      ------------------------------------------------------------------------------------------------
      ,tbl_row_cnt                            = rc.tbl_row_CNT
      ,tbl_used_page_CNT                      = rc.tbl_used_page_CNT
      ,tbl_row_size_byte_AVG                  = rc.tbl_row_size_byte_AVG
      ------------------------------------------------------------------------------------------------
      ,tbl_CLR_trigger_CNT                    = ISNULL(tr.tbl_CLR_trigger_CNT             ,0)
      ,tbl_SQL_trigger_CNT                    = ISNULL(tr.tbl_SQL_trigger_CNT             ,0)
      ,tbl_is_instead_of_trigger_CNT          = ISNULL(tr.tbl_is_instead_of_trigger_CNT   ,0)
--------------------------------------------------------------
-- Physical Table computed properties
--------------------------------------------------------------
      ,tgt.tbl_is_empty                       = IIF(rc.tbl_row_CNT = 0,1,0)
      ,tbl_is_heap                            = ISNULL(IIF(ccs.is_heap = 1 AND tbl.is_memory_optimized = 0,1,0),0)
      ,tbl_column_CNT                         = ISNULL(tc.column_CNT,0)

      ,tbl_default_action_type
                     = CASE WHEN tgt.obj_type                       = N'IT' THEN N'RETAIN'  -- N'IT'

                            WHEN tbl.is_filetable                   = 1     THEN N'RETAIN'  -- N'TBL FIL'
                            WHEN tbl.is_external                    = 1     THEN N'RETAIN'  -- N'TBL EXT'
                            WHEN tbl.temporal_type                  = 1     THEN N'RETAIN'  -- N'HST SVN'
                            WHEN tbl.temporal_type                  = 2     THEN NULL       -- N'TBL SVN'
                            WHEN tbl.cdc_is_history_table           = 1     THEN N'RETAIN'  -- N'HST CDC'
                            WHEN tbl.ctt_is_track_columns_updated_on= 1     THEN NULL

                            WHEN tbl.ledger_type                    = 1     THEN N'RETAIN'  -- N'HST LDG'
                            WHEN tbl.ledger_type                    = 2     THEN NULL       -- N'UPD LDG'
                            WHEN tbl.ledger_type                    = 3     THEN NULL       -- N'APP LDG'
                            WHEN tbl.is_dropped_ledger_table        = 1     THEN NULL       -- N'DRP LDG'

                            WHEN tgt.obj_type                       = N'V'  THEN N'RETAIN'  -- N'VW'
                            WHEN tgt.obj_type                       = N'FT' THEN N'RETAIN'  -- N'TVF CLR'
                            WHEN tgt.obj_type                       = N'IF' THEN N'RETAIN'  -- N'TVF INL'
                            WHEN tgt.obj_type                       = N'TF' THEN NULL       -- N'TVF SQL'

                            WHEN tgt.obj_type                       = N'U'  THEN NULL       -- N'TBL'
                            WHEN ccs.is_clustered_columnstore       = 1     THEN NULL       -- N'TBL CCS'
                            WHEN tbl.is_replicated                  = 1     THEN NULL       -- N'TBL REP'
                            WHEN tbl.is_merge_published             = 1     THEN NULL       -- N'TBL MRG'
                            WHEN tbl.is_sync_tran_subscribed        = 1     THEN NULL       -- N'TBL SYN'
                            WHEN tbl.is_tracked_by_cdc              = 1     THEN NULL       -- N'TBL CDC'
                            WHEN tbl.is_memory_optimized            = 1     THEN NULL       -- N'TBL XTP'
                            WHEN tbl.is_remote_data_archive_enabled = 1     THEN NULL       -- N'TBL RDA'

                            WHEN tbl.is_node                        = 1     THEN NULL       -- N'GPH NOD'
                            WHEN tbl.is_edge                        = 1     THEN NULL       -- N'GPH EDG'

                            ELSE                                                 tgt.parent_object_type
                       END
--------------------------------------------------------------
-- SQLXL Object labels
--------------------------------------------------------------
      ,obj_type_hdr              = ISNULL(otl.obj_type_hdr,N'')
      ,obj_type_dtl              = ISNULL(otl.obj_type_dtl,N'')
      ,obj_type_label            = ISNULL(otl.obj_type_hdr,N'') + IIF(LTRIM(otl.obj_type_dtl) > N'',N' ' + otl.obj_type_dtl,N'')
      ,obj_type_short_label      = ISNULL(RTRIM(LEFT(otl.obj_type_hdr,3)),N'')

----------------------------------------------------------------------------------------------------
-- [cdc] Change Data Capture tables
----------------------------------------------------------------------------------------------------
      ,cdc_capture_instance      = tbl.cdc_capture_instance
      ,cdc_supports_net_changes  = tbl.cdc_supports_net_changes
      ,cdc_role_name             = tbl.cdc_role_name
      ,cdc_index_name            = tbl.cdc_index_name
      ,cdc_filegroup_name        = tbl.cdc_filegroup_name
      ,cdc_create_date           = tbl.cdc_create_date
      ,cdc_partition_switch      = tbl.cdc_partition_switch
      ,cdc_is_history_table      = tbl.cdc_is_history_table

/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,pot = tgt.parent_object_type,tgt.object_ID,tgt.obj_type
      ,tgt.index_id,tgt.type,tgt.sub_type,tgt.internal_type_desc
      ,tbl.temporal_type,tbl.ledger_type,tbl.cdc_is_history_table
      ,tbl.is_memory_optimized
      ,obj_type_hdr         = ISNULL(otl.obj_type_hdr,N'')
      ,obj_type_dtl         = ISNULL(otl.obj_type_dtl,N'')
      ,obj_type_label       = ISNULL(otl.obj_type_hdr,N'') + ISNULL(N' ' + otl.obj_type_dtl,N'')
      ,obj_type_short_label = ISNULL(RTRIM(LEFT(otl.obj_type_hdr,3)),N'')
--*/

  FROM (SELECT TOP (100) PERCENT
               *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type NOT IN (N'A',N'D')
         ORDER BY
               database_id
              ,object_ID
              ,index_ID
              ,type
       ) AS tgt

  JOIN tempdb.dbo.SQLXL_Index_sys_databases AS d
    ON tgt.database_id                       = d.database_id
  -----------------------------------------------------------
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects   AS oh
    ON tgt.database_ID                       = oh.database_id
   AND tgt.history_source_object_id          = oh.object_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_schemas   AS sh
    ON oh.SCHEMA_ID                          = sh.schema_id

  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects   AS op
    ON tgt.database_ID                       = op.database_id
   AND tgt.parent_object_ID                  = op.object_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_schemas   AS sp
    ON op.SCHEMA_ID                          = sp.schema_id

  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects   AS o
    ON tgt.database_ID                       = o.database_id
   AND tgt.object_ID                         = o.object_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_schemas   AS s
    ON o.SCHEMA_ID                           = s.schema_id
  -----------------------------------------------------------
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_tables   AS tbl              -- all records get TABLE level information
    ON tgt.database_ID                      = tbl.database_id
   AND (   (    tgt.TYPE             = N'F'
            AND tgt.parent_object_ID = tbl.object_id
           )
        OR (    tgt.TYPE            <> N'F'
            AND tgt.object_id        = tbl.object_id
           )
       )

  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_tables  AS his
    ON tbl.database_id                     = his.database_id
   AND tbl.history_table_id                = his.object_id

  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- distinct list of data spaces for Large Objects (LOB)
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id
              ,data_space_id
              ,data_space_name
          FROM tempdb.dbo.SQLXL_Index_sys_data_spaces
         GROUP BY
               database_id
              ,data_space_id
              ,data_space_name
       )                                AS lob_ds
    ON tbl.database_id                   = lob_ds.database_id
   AND tbl.lob_data_space_id             = lob_ds.data_space_id

  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- distinct list of data spaces for Filestream objects
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id
              ,data_space_id
              ,data_space_name
          FROM tempdb.dbo.SQLXL_Index_sys_data_spaces
         GROUP BY
               database_id
              ,data_space_id
              ,data_space_name
       )                                AS fst_ds
    ON tbl.database_id                   = fst_ds.database_id
   AND tbl.filestream_data_space_id      = fst_ds.data_space_id

  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_schemas AS sch
    ON his.database_id                   = sch.database_id
   AND his.SCHEMA_ID                     = sch.SCHEMA_ID

  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Is table a Heap or Clustered Columnstore?
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id
              ,object_id
              ,is_clustered_columnstore = SUM(IIF(type = N'5',1,0))
              ,is_heap                  = SUM(IIF(type = N'0',1,0))
          FROM tempdb.dbo.SQLXL_Index_sys_indexes
         GROUP BY
               database_id
              ,object_id
       )                                 AS ccs
    ON tgt.database_id                    = ccs.database_id
   AND (   (tgt.type  = N'F' AND tgt.parent_object_id = ccs.object_id)
        OR (tgt.type <> N'F' AND tgt.object_id        = ccs.object_id)
       )

  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Count & size of of rows by table
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT p.database_id
              ,p.object_id
              ,tbl_row_CNT           = SUM(p.row_count)
              ,tbl_used_page_CNT     = SUM(p.used_page_CNT)
              ,tbl_row_size_byte_AVG = (8192.0 * SUM(p.used_page_CNT)) / SUM(p.row_count) -- /zero handled by WHERE below
          FROM tempdb.dbo.SQLXL_Index_sys_dm_db_partition_stats AS p
          JOIN tempdb.dbo.SQLXL_Index_sys_indexes               AS i
            ON p.database_id = i.database_id
           AND p.object_id   = i.object_id
           AND p.index_id    = i.index_id
           AND i.type IN (N'0',N'1',N'5')
         WHERE p.row_count   > 0
         GROUP BY
               p.database_id
              ,p.object_id
       )                         AS rc
    ON tgt.database_id            = rc.database_id
   AND tgt.object_id              = rc.object_id

  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- count of columns in:
        -- Table-valued assembly functions (FT)
        -- Inline table-valued SQL functions (IF)
        -- Internal tables (IT)
        -- Table-valued SQL functions (TF)
        -- User tables (U)
        -- Views (V)
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id
              ,object_id
              ,column_CNT = COUNT(1)
          FROM tempdb.dbo.SQLXL_Index_sys_columns
         GROUP BY
               database_id
              ,object_id
       )               AS tc
    ON tgt.database_id  = tc.database_id
   AND (   (tgt.type  = N'F' AND tgt.parent_object_id = tc.object_id)
        OR (tgt.type <> N'F' AND tgt.object_id        = tc.object_id)
       )

  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Summarize DML triggers
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id
              ,parent_object_id
              ,tbl_CLR_trigger_CNT           = SUM(IIF(type = N'TA',1,0))                 -- Assembly (CLR) DML trigger
              ,tbl_SQL_trigger_CNT           = SUM(IIF(type = N'TR',1,0))                 -- SQL DML trigger
              ,tbl_is_instead_of_trigger_CNT = SUM(IIF(tr_is_instead_of_trigger = 1,1,0))
          FROM tempdb.dbo.SQLXL_Index_sys_objects
         WHERE tr_parent_class  = 1 -- Object or column for the DML triggers
           AND tr_is_ms_shipped = 0 -- Trigger NOT created on behalf of the user by an internal SQL Server component
           AND tr_is_disabled   = 0 -- Trigger is enabled
         GROUP BY
               database_id
              ,parent_object_id
       )              AS tr
    ON tgt.database_id = tr.database_id
   AND tgt.object_id   = tr.parent_object_id

 OUTER
 APPLY (------------------------------------------------------------------------------------------------------------------------------------
        -- Standardized object type labels
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT obj_type_hdr = CASE tgt.obj_type
                                   WHEN N'U'  THEN CASE WHEN ccs.is_clustered_columnstore = 1 THEN N'CCS'
                                                        WHEN tbl.temporal_type            = 1 THEN N'HST'
                                                        WHEN tbl.ledger_type              = 1 THEN N'HST'
                                                        WHEN tbl.cdc_is_history_table     = 1 THEN N'HST'
                                                        ELSE                                       N'TBL'
                                                   END
                                                  +IIF(tbl.is_memory_optimized            = 1     ,N' XTP',N'')
                                   WHEN N'F'  THEN N'TBL'
                                   WHEN N'FT' THEN N'TVF CLR'
                                   WHEN N'IF' THEN N'TVF INL'
                                   WHEN N'IT' THEN N'IT'
                                   WHEN N'TF' THEN N'TVF SQL'
                                   WHEN N'V'  THEN IIF(tgt.is_ms_shipped = 1,N'I',N'') + N'VW'
                                   ELSE            tgt.obj_type
                              END
                             +CASE WHEN tgt.obj_type IN (N'F',N'IT',N'U')
                                   THEN +IIF(tgt.obj_type                    = N'F',N' FKC'    ,N'')
                                        ------------------------------------------------------------
                                        +IIF(tbl.cdc_is_history_table           = 1,N' CDC'    ,N'')
                                        +IIF(tbl.ctt_is_track_columns_updated_on= 1,N' CTT'    ,N'')
                                        +IIF(tbl.is_external                    = 1,N' EXT'    ,N'')
                                        +IIF(tbl.is_filetable                   = 1,N' FIL'    ,N'')
                                        +IIF(tbl.is_node                        = 1,N' GPH NOD',N'')
                                        +IIF(tbl.is_edge                        = 1,N' GPH EDG',N'')
                                        +IIF(tbl.is_dropped_ledger_table        = 1,N' LDG DRP',N'') -- is_dropped_ledger_table
                                        +IIF(tbl.ledger_type                    = 1,N' LDG'    ,N'') -- LEDGER_TABLE
                                        +IIF(tbl.ledger_type                    = 2,N' LDG UPD',N'') -- UPDATABLE_LEDGER_TABLE
                                        +IIF(tbl.ledger_type                    = 3,N' LDG APP',N'') -- APPEND_ONLY_LEDGER_TABLE
                                        +IIF(tbl.is_merge_published             = 1,N' MRG'    ,N'')
                                        +IIF(tbl.is_remote_data_archive_enabled = 1,N' RDA'    ,N'')
                                        +IIF(    tbl.is_replicated              = 1
                                             AND tbl.is_tracked_by_cdc          = 0,N' REP'    ,N'')
                                        +IIF(tbl.is_sync_tran_subscribed        = 1,N' SYN'    ,N'')
                                        +IIF(tbl.temporal_type                  = 1,N' SVN'    ,N'') -- SYSTEM_VERSIONED_TEMPORAL_TABLE
                                        +IIF(tbl.temporal_type                  = 2,N' SVN'    ,N'') -- SYSTEM_VERSIONED_TEMPORAL_TABLE
                                        ------------------------------------------------------------
                                   ELSE N''
                              END
/* <BS> removed for simplicity
                             +CASE tgt.internal_type
                                   WHEN   3 THEN N' QDS HNT' -- QUERY_DISK_STORE_QUERY_HINTS
                                   WHEN   4 THEN N' QDS PRM' -- QUERY_DISK_STORE_QUERY_TEMPLATE_PARAMETERIZATION
                                   WHEN   6 THEN N' QDS WTS' -- QUERY_DISK_STORE_WAIT_STATS
                                   WHEN 201 THEN N' QUE QMS' -- QUEUE_MESSAGES
                                   WHEN 202 THEN N' XML IXN' -- XML_INDEX_NODES
                                   WHEN 203 THEN N' FTX CFL' -- FULLTEXT_CATALOG_FREELIST
                                   WHEN 204 THEN N' FTX MAP' -- FULLTEXT_CATALOG_MAP (BOL)/FULLTEXT_INDEX_MAP (REALITY)
                                   WHEN 205 THEN N' QRY NOT' -- QUERY_NOTIFICATION
                                   WHEN 206 THEN N' SVC BMP' -- SERVICE_BROKER_MAP
                                   WHEN 207 THEN N' EXT IND' -- EXTENDED_INDEXES (such as a spatial index)
                                   WHEN 208 THEN N' FST TMB' -- FILESTREAM_TOMBSTONE
                                   WHEN 209 THEN N' CHG TRK' -- CHANGE_TRACKING
                                   WHEN 210 THEN N' TRK TXN' -- TRACKED_COMMITTED_TRANSACTIONS
                                   WHEN 211 THEN N' FTX AVD' -- FULLTEXT_AVDL
                                   WHEN 212 THEN N' FTX CFR' -- FULLTEXT_COMP_FRAGMENT
                                   WHEN 213 THEN N' FTX DST' -- FULLTEXT_DOCID_STATUS
                                   WHEN 214 THEN N' FTX IDI' -- FULLTEXT_INDEXED_DOCID
                                   WHEN 215 THEN N' FTX DFL' -- FULLTEXT_DOCID_FILTER
                                   WHEN 216 THEN N' FTX DMP' -- FULLTEXT_DOCID_MAP
                                   WHEN 217 THEN N' FTX TMT' -- FULLTEXT_THESAURUS_METADATA_TABLE
                                   WHEN 218 THEN N' FTX TST' -- FULLTEXT_THESAURUS_STATE_TABLE
                                   WHEN 219 THEN N' FTX TPT' -- FULLTEXT_THESAURUS_PHRASE_TABLE
                                   WHEN 220 THEN N' CON FTR' -- CONTAINED_FEATURES
                                   WHEN 221 THEN N' SMP DOC' -- SEMPLAT_DOCUMENT_INDEX_TABLE
                                   WHEN 222 THEN N' SMP TIT' -- SEMPLAT_TAG_INDEX_TABLE
                                   WHEN 223 THEN N' SMP MMT' -- SEMPLAT_MODEL_MAPPING_TABLE
                                   WHEN 224 THEN N' SMP LMT' -- SEMPLAT_LANGUAGE_MODEL_TABLE
                                   WHEN 225 THEN N' FTB UPF' -- FILETABLE_UPDATES
                                   -----------------------------------------------------------------
                                   WHEN 236 THEN N' XML SND' -- SELECTIVE_XML_INDEX_NODE_TABLE
                                   WHEN 237 THEN N' IT* 237' -- UNKNOWN INTERNAL TABLE TYPE 237
                                   WHEN 238 THEN N' IT* 238' -- UNKNOWN INTERNAL TABLE TYPE 238
                                   WHEN 239 THEN N' IT* 239' -- UNKNOWN INTERNAL TABLE TYPE 239
                                   WHEN 240 THEN N' QDS TXT' -- QUERY_DISK_STORE_QUERY_TEXT
                                   WHEN 241 THEN N' QDS QDQ' -- QUERY_DISK_STORE_QUERY
                                   WHEN 242 THEN N' QDS PLN' -- QUERY_DISK_STORE_PLAN
                                   WHEN 243 THEN N' QDS RST' -- QUERY_DISK_STORE_RUNTIME_STATS
                                   WHEN 244 THEN N' QDS RSI' -- QUERY_DISK_STORE_RUNTIME_STATS_INTERVAL
                                   WHEN 245 THEN N' QRY CNS' -- QUERY_CONTEXT_SETTINGS
                                   WHEN 246 THEN N' IT* 246' -- UNKNOWN INTERNAL TABLE TYPE 246
                                   WHEN 247 THEN N' IT* 247' -- UNKNOWN INTERNAL TABLE TYPE 247
                                   WHEN 248 THEN N' IT* 248' -- UNKNOWN INTERNAL TABLE TYPE 248
                                   WHEN 249 THEN N' IT* 249' -- UNKNOWN INTERNAL TABLE TYPE 249
                                   WHEN 250 THEN N' IT* 250' -- UNKNOWN INTERNAL TABLE TYPE 250
                                   WHEN 251 THEN N' IT* 251' -- UNKNOWN INTERNAL TABLE TYPE 251
                                   WHEN 252 THEN N' HST SVN' -- INTERNAL_TEMPORAL_HISTORY_TABLE
                                   ELSE IIF(tgt.internal_type > 0
                                           ,COALESCE(N' IT* ' + RIGHT(N'00' + CAST(tgt.internal_type AS NVARCHAR(3)),3)
                                                    ,N' MSG ITT')
                                           ,N'')
                              END
*/
              ,obj_type_dtl = CASE WHEN tgt.rec_type = N'I' AND tgt.type = N'V'
                                   THEN N'UIV' -- unindexed view
                                   WHEN tgt.tbl_is_heap = 1 AND tbl.is_memory_optimized = 0
                                   THEN N'HP'
                                   ELSE CASE tgt.type
                                             WHEN N'0'  THEN N'HP'
                                             WHEN N'1'  THEN N'CX'
                                             WHEN N'2'  THEN N'NCX'
                                             WHEN N'3'  THEN N'XML'
                                                            +CASE tgt.sub_type           -- XML
                                                                  WHEN 0 THEN N' PRI'    -- 0 = Primary XML index
                                                                  WHEN 1 THEN N' SEC'    -- 1 = Secondary XML index
                                                                  WHEN 2 THEN N' SEL'    -- 2 = Selective XML index
                                                                  WHEN 3 THEN N' SSEL'   -- 3 = Secondary selective XML index
                                                                  ELSE  N' <'
                                                                      + IIF(tgt.sub_type IS NULL
                                                                           ,N'subtype?'
                                                                           ,tempdb.dbo.SQLXL_3SD(tgt.sub_type,N'I'))
                                                                      + N'>'
                                                             END
                                             WHEN N'4'  THEN N'SPT'
                                                            +CASE tgt.sub_type          -- spatial
                                                                  WHEN 1 THEN N' GEM'   -- 1 = Geometry
                                                                  WHEN 2 THEN N' GEG'   -- 2 = Geographic
                                                                  WHEN 4 THEN N' GEG'   -- 4 = Geographic
                                                                  ELSE  N' <'
                                                                      + IIF(tgt.sub_type IS NULL
                                                                           ,N'subtype?'
                                                                           ,tempdb.dbo.SQLXL_3SD(tgt.sub_type,N'I'))
                                                                      + N'>'
                                                             END
                                             WHEN N'5'  THEN N'CCS'
                                             WHEN N'6'  THEN N'NCS'
                                             WHEN N'7'  THEN N'NHX'
                                             WHEN N'90' THEN N'FTX' --<<< See Insert FULL TEXT indexes below
                                             WHEN N'M'  THEN N'MIX'
                                             ELSE N''
                                        END
                              END
       ) otl
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated "Parent"-level fields across records'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Flag index columns that are filtered',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Flag index columns that are filtered using sys.sql_expression_dependencies
/******************************************************************************************************************************************/
UPDATE tgt
   SET is_index_column_filtered = 1
  FROM tempdb.dbo.SQLXL_Index_sys_index_columns               AS tgt
  JOIN tempdb.dbo.SQLXL_Index_sys_sql_expression_dependencies AS ed
    ON ed.database_id          = tgt.database_id
   AND ed.referencing_id       = tgt.object_id
   AND ed.referencing_minor_id = tgt.index_id
   AND ed.referenced_minor_id  = tgt.column_id
 WHERE ed.referencing_class    = 7
   AND ed.referenced_class     = 1
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Flagged index columns that are filtered using sys.sql_expression_dependencies'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Create table of all used and referenced columns',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Create table of all used and referenced columns
-- Create a list of all columns at the "parent" level for:
-- Index columns - key & included. also Views
-- missing indexes - key & included
-- foreign key referenced columns
-- Foreign Key Constraint columns
-- table valued function columns
/******************************************************************************************************************************************/

IF (OBJECT_ID(N'tempdb.dbo.SQLXL_Index_column') IS NOT NULL) DROP TABLE tempdb.dbo.SQLXL_Index_column;

SET ANSI_WARNINGS ON; -- required for XML datatype used in concatenation below

SELECT qry.*
  INTO tempdb.dbo.SQLXL_Index_column
  FROM (
SELECT database_id                    = ic.database_id
      ,object_id                      = ic.object_id
      ,Column_ID                      = ic.column_id
      ,obj_name                       = o.name
      ,name                           = ic.name
      ,stats_target_name              = QUOTENAME(ic.name,1)
      --------------------------------------------------------------------------------------------------------------------------------------
      ,All_Density                    = col_stats.All_Density
      ,Average_Length                 = col_stats.Average_Length
      ,Uniqueness                     = COALESCE(1.0 * col_stats.Rows * col_stats.All_Density -- if computed separately for this column
                                                ,iles.uniqueness                              -- from index lead element
                                                ,IIF(ic.is_identity = 1                    ,1.0,NULL)
                                                ,IIF(ic.seq_object_id IS NOT NULL          ,1.0,NULL)
                                                ,IIF(dc.definition = N'(newsequentialid())',1.0,NULL)
                                                ,IIF(dc.definition = N'(newid())'          ,1.0,NULL)
                                                ,NULL
                                                )
      ,histogram_steps                = ISNULL(col_stats.steps,iles.steps)
      ,candidate_filtering_steps      = IIF(ISNULL(col_stats.steps,iles.steps) BETWEEN 2 AND 19,ISNULL(col_stats.steps,iles.steps),NULL)
      ,param_sniff                    = col_stats.param_sniff
      --------------------------------------------------------------------------------------------------------------------------------------
      ,max_length                     = CASE WHEN ic.user_type_id IN (N'99',N'231',N'239')
                                              AND ic.max_length <> -1  -- adjust for double-byte character string
                                             THEN ic.max_length * 2
                                             ELSE ic.max_length
                                        END
      ,Precision                      = ic.Precision
      ,Scale                          = ic.Scale
      ,user_type_id                   = ic.user_type_id
      ,data_type                      = typ.name
      ,is_nullable                    = ISNULL(ic.is_nullable,0)
      ,Seed_Value                     = ic.Seed_Value
      ,Increment_Value                = ic.Increment_Value
      ,Last_Value                     = ic.Last_Value
      ,is_not_for_replication         = ISNULL(ic.is_not_for_replication,0)
      ,is_persisted                   = ISNULL(ic.is_persisted,0)
      ,is_identity                    = ISNULL(ic.is_identity,0)
      ,is_sequence                    = CAST(IIF(ic.seq_object_id > 0,1,0) AS BIT)
      ,is_newsequentialid             = CAST(IIF(dc.definition = N'(newsequentialid())',1,0) AS BIT)
      ,is_empty                       = ISNULL(mt.object_id,1)
      ,is_sparse                      = ISNULL(ic.is_sparse,0)
      --------------------------------------------------------------------------------------------------------------------------------------
      -- Long Descriptors
      --------------------------------------------------------------------------------------------------------------------------------------
      ,default_constraint         = dc.definition
      ,check_constraints          = STUFF(chk.check_constraints,1,1,N'')       -- includes constraint attributes
      ,computed_column_definition = IIF(ic.uses_sql_proc = 1,N'*PROC* ',N'')
                                   +IIF(ic.uses_sql_ftn  = 1,N'*FTN* ' ,N'')
                                   +IIF(ic.uses_sql_mthd = 1,N'*MTHD* ',N'')
                                   +ic.definition
                                   +IIF(ic.is_persisted = 1,N'',NCHAR(10) + N'NOT PERSISTED')
                                   +IIF(ic.uses_database_collation = 1,N'',NCHAR(10) + N'NOT DB COLLATED')
      -------------------------------------------
      ,cc_uses_database_collation = ISNULL(ic.uses_database_collation,0)
      ,is_columnstore_eligible    = CASE WHEN (   ic.system_type_id IN (  34 -- image
                                                                        , 35 -- text
                                                                        , 98 -- sqlvariant
                                                                        , 99 -- ntext
                                                                        ,189 -- timestamp/rowversion
                                                                        ,240 -- geography,geometry,hierarchyid
                                                                        ,241 -- XML
                                                                       )
                                              )
                                           OR (   ic.system_type_id IN (231 -- nvarchar
                                                                       ,167 -- varchar
                                                                       ,165 -- varbinary
                                                                       )
                                               AND ic.max_length      = -1   -- MAX length
                                              )
                                           OR (    ic.is_sparse       =  1
                                               OR  ic.is_filestream   =  1
                                               OR  ic.is_computed     =  1
                                              )
                                         THEN 0
                                         ELSE 1
                                    END
      --------------------------------------------------------------------------------------------------------------------------------------
      -- Column name and attributes for display
      --------------------------------------------------------------------------------------------------------------------------------------
      ,[Column Descriptors] =
       QUOTENAME(ISNULL(ic.name,'###c.name NOT FOUND###')) +N' '
      --------------------------------------------------------------------------------------------------------------------------------------
      +CASE typ.name
            WHEN NULL                THEN N''
            -------------------------------------
            WHEN N'tinyint'          THEN N'ti'
            WHEN N'smallint'         THEN N'si'
            WHEN N'int'              THEN N'i'
            WHEN N'bigint'           THEN N'bi'
            -------------------------------------
            WHEN N'char'             THEN N'c'
            WHEN N'nchar'            THEN N'nc'
            WHEN N'varchar'          THEN N'vc'
            WHEN N'nvarchar'         THEN N'nv'
            WHEN N'text'             THEN N'tx'
            WHEN N'ntext'            THEN N'nt'
            -------------------------------------
            WHEN N'date'             THEN N'd'
            WHEN N'smalldatetime'    THEN N'sdt'
            WHEN N'datetime'         THEN N'dt'
            WHEN N'datetime2'        THEN N'dt2'
            WHEN N'datetimeoffset'   THEN N'dto'
            -------------------------------------
            WHEN N'time'             THEN N'tm'
            WHEN N'timestamp'        THEN N'ts'
            -------------------------------------
            WHEN N'money'            THEN N'm'
            WHEN N'smallmoney'       THEN N'sm'
            -------------------------------------
            WHEN N'geography'        THEN N'gg'
            WHEN N'geometry'         THEN N'gm'
            WHEN N'hierarchyid'      THEN N'h'
            -------------------------------------
            WHEN N'decimal'          THEN N'de'
            WHEN N'binary'           THEN N'bn'
            WHEN N'float'            THEN N'f'
            WHEN N'numeric'          THEN N'num'
            WHEN N'real'             THEN N'r'
            -------------------------------------
            WHEN N'image'            THEN N'im'
            WHEN N'sql_variant'      THEN N'v'
            WHEN N'SYSNAME'          THEN N's'
            WHEN N'uniqueidentifier' THEN CASE WHEN dc.definition   = N'(newsequentialid())' THEN N'SUID'
                                               WHEN dc.definition   = N'(newid())'           THEN N'NUID'
                                               ELSE N'uid'
                                          END
            WHEN N'varbinary'        THEN N'vb'
            WHEN N'xml'              THEN N'xml'
            ELSE ISNULL(typ.name,'###typ.name NOT FOUND###')
       END
      +CASE WHEN typ.name = N'BIT' THEN N''
            ELSE IIF(ic.max_length = -1
                    ,N'MAX'
                    ,ISNULL(CAST(ic.max_length AS NVARCHAR(MAX)),N'<??>'))
       END
      --------------------------------------------------------------------------------------------------------------------------------------
      +IIF(ic.is_identity    = 1                     ,N' IDN(' +CAST(ISNULL(ic.increment_value,1) AS NVARCHAR(20))+N')',N'')
      +IIF(ic.seq_object_id IS NOT NULL              ,N' SEQ(' +CAST(ISNULL(ic.seq_increment  ,1) AS NVARCHAR(20))+N')',N'')
      +IIF(dc.definition    = N'(newsequentialid())',N' SUID',N'')
      +IIF(dc.definition    = N'(newid())'          ,N' NUID',N'')
      +IIF(ic.is_nullable    = 1                     ,N' NULL',N'')
      --------------------------------------------------------------------------------------------------------------------------------------
       -- Per BOL "ANSI_PADDING should always be set to ON. SET ANSI_PADDING setting does not affect the nchar, nvarchar, ntext, text
       --         ,image, varbinary(max), varchar(max), and nvarchar(max) data types.
       --         They always display the SET ANSI_PADDING ON behavior. This means trailing spaces and zeros are not trimmed."
      +CASE WHEN ic.is_ansi_padded                                      = 0
             AND typ.name IN ('CHAR',N'NCHAR',N'BINARY',N'VARBINARY')       THEN N' '+N'PADOFF'                                  ELSE N'' END
      +CASE WHEN ic.is_rowguidcol                                       = 1 THEN N' '+N'ROWUID'                                  ELSE N'' END
      +CASE WHEN ic.is_filestream                                       = 1 THEN N' '+N'FLSTRM'                                  ELSE N'' END
      +CASE WHEN o.is_replicated      = 1 AND ic.is_replicated          = 0 THEN N' '+N'NOTREPL'                                 ELSE N'' END
      +CASE WHEN ic.is_non_sql_subscribed                               = 1 THEN N' '+N'NonSQLSub'                               ELSE N'' END
      +CASE WHEN o.is_merge_published = 1 AND ic.is_merge_published     = 0 THEN N' '+N'NOTMRG'                                  ELSE N'' END
      +CASE WHEN ic.is_dts_replicated                                   = 1 THEN N' '+N'DTSREPL'                                 ELSE N'' END
      +CASE WHEN ic.is_xml_document                                     = 1 THEN N' '+N'XMLDOC'                                  ELSE N'' END
      +CASE WHEN ic.xml_collection_id                                   > 0 THEN N' '+N'XMLCID '+QUOTENAME(ic.xml_collection_id) ELSE N'' END
      +CASE WHEN ic.rule_object_id                                      > 0 THEN N' '+N'RULEID '+QUOTENAME(ic.rule_object_id   ) ELSE N'' END
      +CASE WHEN ic.is_sparse                                           = 1 THEN N' '+N'SPARSE'                                  ELSE N'' END
      +CASE WHEN ic.is_column_set                                       = 1 THEN N' '+N'COLSET'                                  ELSE N'' END
       ----------------------------------------------------------------------
      +IIF(ic.generated_always_type    > 0,N' '+N'GenAlwaysType('+ic.generated_always_type_desc+N')',N'')
      +IIF(ic.encryption_type          > 0,N' '+N'ENCTYPE' +QUOTENAME(ic.encryption_type_desc)      ,N'')
      +IIF(ic.is_hidden                = 1,N' '+N'HIDN'                                             ,N'')
      +IIF(ic.is_masked                = 1,N' '+N'MSKD'                                             ,N'')
      +IIF(ic.graph_type               > 0,N' '+N'GrphTyp '+ic.graph_type_desc                      ,N'')
       -- Encryption --------------------------------------------------------
      +IIF(ic.column_encryption_key_id > 0,N' '+N'ENCKEYID'+QUOTENAME(ic.column_encryption_key_id)  ,N'')
      +IIF(ic.column_encryption_key_database_name IS NOT NULL,N' '+N'ENCKEYDB'+QUOTENAME(ic.column_encryption_key_database_name),N'')
      +CASE WHEN 1.0 * col_stats.Rows * col_stats.All_Density > 0.0
                                                  THEN N' ('+tempdb.dbo.SQLXL_3SD(1.0 * col_stats.Rows * col_stats.All_Density,N'N')+N')'
            WHEN iles.uniqueness      > 0.0       THEN N' ('+tempdb.dbo.SQLXL_3SD(iles.uniqueness,N'N') +N')'
            WHEN ic.is_identity        = 1        THEN N''              -- identity column
            WHEN ic.seq_object_id     IS NOT NULL THEN N''              -- sequence column
            WHEN dc.definition        = N'(newsequentialid())' THEN N'' -- newsequentialid column
            WHEN o.type               = N'FT'     THEN N''              -- Assembly (CLR) table-valued function
            WHEN o.type               = N'IF'     THEN N''              -- SQL inline table-valued function
            WHEN o.type               = N'TF'     THEN N''              -- SQL table-valued-function
            WHEN o.type               = N'V'      THEN N''              -- view
            WHEN mt.object_id        IS NOT NULL  THEN N'(MT)'          -- table is empty
            ELSE N' (N/A)'
       END
      +IIF(ISNULL(col_stats.Steps,iles.steps) BETWEEN 1 AND 19
          ,N' STP('+CAST(ISNULL(col_stats.Steps,iles.steps) AS NVARCHAR(20))+N')'
          ,N'')
      -----------------------------------------------------------------------
      +IIF(    dc.definition   IS NOT NULL
           AND ic.seq_object_id IS NULL
           AND dc.definition   <> N'(newsequentialid())'
          ,IIF(LEN(dc.definition) > 21
              ,N' DFLT_CONS'
              ,N' DFLT:'+dc.definition)
          ,N'')
      +IIF(ic.is_computed = 1,N' CCOL:'+IIF(ic.is_persisted = 1,N'Prst',N'NotPrst'),N'')
      +IIF(chk.check_constraints IS NOT NULL,N' CHK',N'')

       -- Full Text ---------------------------------------------------------
      +IIF(ftic.column_id IS NOT NULL
          ,NCHAR(10)
          +N'> FTXTypID ' + ISNULL(CAST(ftic.type_column_id AS NVARCHAR(MAX)),N'N/A')
          +IIF(ftic.language_id           > 0,N' LCID ' + QUOTENAME(ftic.language_id),N' LCID N/A')
          +IIF(ftic.statistical_semantics = 1,N' StatSmtcs TRUE'                     ,N'')
          ,N'')

  FROM (-- Get SQL version from source server
        SELECT version = TRY_CAST(run_value AS TINYINT)
          FROM tempdb.dbo.SQLXL_Index_sys_instance
         WHERE name   = N'ProductMajorVersion'
           AND source = N'SERVERPROPERTY'
       )                                                    AS v

 CROSS
  JOIN tempdb.dbo.SQLXL_Index_sys_Startup_Parameters        AS sp

 CROSS
  JOIN tempdb.dbo.SQLXL_Index_sys_columns                   AS ic -- get all columns, since want to get columns not included in NonClustered
                                                                  -- Columnstores and candidates for clustered indexes on HEAPS
  LEFT OUTER
  JOIN (SELECT o.database_id
              ,o.object_id
              ,o.name
              ,o.type
              ,t.is_replicated
              ,t.is_merge_published
          FROM tempdb.dbo.SQLXL_Index_sys_objects AS o
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_tables  AS t
            ON o.database_id                       = t.database_id
           AND o.object_id                         = t.object_id
       ) AS o
    ON ic.database_id                              = o.database_id
   AND ic.object_id                                = o.object_id

  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_types           AS typ
    ON ic.database_id                              = typ.database_id
   AND ic.user_type_id                             = typ.user_type_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_index_columns   AS ftic                  -- info for full text columns
    ON ic.database_id                              = ftic.database_id
   AND ic.object_id                                = ftic.object_id
   AND ic.column_id                                = ftic.column_id
   AND N'90'                                       = ftic.type

  ------------------------------------------------------------------------------------------------------------------------------------------
  -- Column Statistics
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (SELECT sssh.database_id
              ,sssh.object_id
              ,sssh.column_id
              ,sssh.Rows
              ,sssh.steps
              ,ssdv.All_Density
              ,ssdv.Average_Length
              ,sshs.param_sniff
          FROM tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader    AS sssh

          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector AS ssdv
            ON sssh.database_id       = ssdv.database_id
           AND sssh.object_id         = ssdv.object_id
           AND sssh.column_id         = ssdv.column_id         -- column statistics. index computed separately
           AND 1                      = ssdv.Row_ID            -- some column_IDs have more than one row
                                                               -- looks like broken references from days of future past
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram_summary AS sshs
            ON sssh.database_id       = sshs.database_id
           AND sssh.object_id         = sshs.object_id
           AND sssh.column_id         = sshs.column_id

         WHERE sssh.Filter_Expression IS NULL
      ) col_stats
    ON ic.database_id          = col_stats.database_id
   AND ic.object_id            = col_stats.object_id
   AND ic.column_id            = col_stats.column_id

  ------------------------------------------------------------------------------------------------------------------------------------------
  -- identify all objects that are empty - no rows in any partitions
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (
        SELECT database_id
              ,object_id
          FROM tempdb.dbo.SQLXL_Index_sys_dm_db_partition_stats
         GROUP BY
               database_id
              ,object_id
        HAVING SUM(row_count) = 0
       )                                   AS mt
    ON ic.database_id                        = mt.database_id
   AND ic.object_id                          = mt.object_id

  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER -- Column DEFAULT constraints
  JOIN tempdb.dbo.SQLXL_Index_sys_default_constraints AS dc
    ON ic.database_id                                 = dc.database_id
   AND ic.default_object_id                           = dc.object_id

  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER -- Column-level Check Constraints
  JOIN (
        SELECT cc.database_id
              ,cc.parent_object_id
              ,cc.parent_column_id
              ,(----------------------------------------------------------------------------------------------------------------------------
                -- check constraints for this column - full definitions.
                -- FOR XML PATH used since there can be multiple constraints on a column. STUFF applied above
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT NCHAR(10)+QUOTENAME(LTRIM(RTRIM(cx.name)))
                      +ISNULL( IIF(cx.uses_sql_ftn            = 1,N' ,*FTN*'       ,N'')
                              +IIF(cx.uses_sql_proc           = 1,N' ,*PROC*'      ,N'')
                              +IIF(cx.uses_sql_mthd           = 1,N' ,*MTHD*'      ,N'')
                              +IIF(cx.is_disabled             = 1,N' ,DSBLD'       ,N'')
                              +IIF(cx.is_not_for_replication  = 1,N' ,NOT_REPL'    ,N'')
                              +IIF(cx.is_not_trusted          = 1,N' ,NOT_TRUSTED' ,N'')
                              +IIF(cx.is_system_named         = 1,N' ,SYS_NM'      ,N'')
                              +IIF(cx.uses_database_collation = 0,N' ,NON-DB_COLL' ,N'')
                              +IIF(cxo.is_published           = 1,N' ,PBLSHD'      ,N'')
                              +IIF(cxo.is_schema_published    = 1,N' ,SCH_PBLSHD'  ,N'')
                              ,N'')
                      +N' '+LTRIM(RTRIM(cx.definition))
                  FROM tempdb.dbo.SQLXL_Index_sys_check_constraints AS cx
                  JOIN tempdb.dbo.SQLXL_Index_sys_columns           AS c
                    ON cc.database_id                                = c.database_id
                   AND cc.parent_object_id                           = c.object_id
                   AND cc.parent_column_id                           = c.column_id
                  JOIN tempdb.dbo.SQLXL_Index_sys_objects           AS cxo
                    ON cx.database_id                                = cxo.database_id
                   AND cx.object_id                                  = cxo.object_id
                 WHERE cc.database_id                                = cx.database_id
                   AND cc.parent_object_id                           = cx.parent_object_id
                   AND cc.parent_column_id                           = cx.parent_column_id
                   FOR XML PATH (N''),TYPE
               ).value('(./text())[1]','NVARCHAR(4000)') AS check_constraints
          FROM (----------------------------------------------------------------------------------------------------------------------------
                -- list of columns with check constraints - get one record per column in case of multiple constraints
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT cc.database_id
                      ,cc.parent_object_id
                      ,cc.parent_column_id
                  FROM tempdb.dbo.SQLXL_Index_sys_check_constraints AS cc
                 WHERE cc.parent_column_id > 0 -- not a table constraint
                 GROUP BY
                       cc.database_id
                      ,cc.parent_object_id
                      ,cc.parent_column_id
               ) cc
       ) chk
    ON ic.database_id      = chk.database_id
   AND ic.object_id        = chk.parent_object_id
                         --  chk.object_id is the check constraint ID
   AND ic.column_id        = chk.parent_column_id

  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- If statistics have not been computed individually for a column try the lead element from index statistics
        -- if more than 1 found take the averages
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT DISTINCT
               ssdv.database_id
              ,ssdv.object_id
              ,ssdv.columns
              ,steps            = AVG(sssh.steps)
              ,uniqueness       = AVG(1.0 * sssh.rows * ssdv.All_Density)
          FROM (SELECT database_id
                      ,object_id
                      ,index_ID
                      ,All_Density
                      ,Columns
                  FROM tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector
                 WHERE index_id > 0
                   AND Row_ID   = 1
               ) AS ssdv
          JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader AS sssh
            ON ssdv.database_id = sssh.database_id
           AND ssdv.object_id   = sssh.object_id
           AND ssdv.index_id    = sssh.index_id
         GROUP BY
               ssdv.database_id
              ,ssdv.object_id
              ,ssdv.Columns
       ) iles -- Index lead element statistics
    ON ic.database_id       = iles.database_id
   AND ic.object_id         = iles.object_id
   AND ic.name              = iles.columns
) AS qry
OPTION (MAXDOP 1); -- NOTE: FORCE ORDER slows things down a bunch

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Created table of all used and referenced columns'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_column
    ON tempdb.dbo.SQLXL_Index_column
      (database_id
      ,object_id
      ,column_id
      )
  WITH (DATA_COMPRESSION = PAGE);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Indexed tempdb.dbo.SQLXL_Index_column'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update Column Descriptors for Full Text indexes
-- Update column info for Full Text indexes
/******************************************************************************************************************************************/
UPDATE tgt
   SET key_column_info = ISNULL(
                         STUFF((SELECT NCHAR(10)+eix.[Column Descriptors]
                                   FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ftic
                                   JOIN tempdb.dbo.SQLXL_Index_column            AS eix
                                     ON ftic.database_id                        = eix.database_id
                                    AND ftic.object_id                          = eix.object_id
                                    -- No Object_ID column in XL_IDX_column
                                    AND ftic.column_id                          = eix.column_id
                                  WHERE tgt.Database_ID                         = ftic.Database_ID
                                    AND tgt.object_id                           = ftic.object_id
                                    AND N'90'                                   = ftic.type
                                    FOR XML PATH(N''),TYPE
                               ).value('(./text())[1]','NVARCHAR(4000)')
                              ,1,1,N'')
                         ,N'<Column Description not found>')
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
 WHERE tgt.type = N'90'
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated Column Descriptors for Full Text indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update index columns to identify those also included in CLUSTERED index
-- Update index column to identify columns included in CLUSTERED index
/******************************************************************************************************************************************/
UPDATE tgt
   SET in_clustered_index = 1
  FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS tgt
  JOIN tempdb.dbo.SQLXL_Index_sys_index_columns AS ci
    ON tgt.database_id      = ci.database_id
   AND tgt.object_id        = ci.object_id
   AND tgt.column_id        = ci.column_id
   AND N'1'                 = ci.type
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated index columns to identify those also included in CLUSTERED index'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update Missing index column key sequence based uniqueness
-- Update Missing index column key sequence for KEY columns
-- Sort by EQUALITY before INEQUALITY, followed by increasing uniqueness
/******************************************************************************************************************************************/
UPDATE tgt
   SET tgt.key_column_sequence = mic.rn
  FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS tgt
  JOIN (-- get key column "order" for missing indexes tied to increasing uniqueness
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,ic.column_id
              ,rn = ROW_NUMBER() OVER (PARTITION BY ic.database_id
                                                   ,ic.object_id
                                                   ,ic.index_id
                                                   ,ic.type
                                           ORDER BY ic.column_usage -- EQUALITY before INEQUALITY
                                                   ,c.Uniqueness
                                      )
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
          JOIN tempdb.dbo.SQLXL_Index_column            AS c
            ON ic.database_id                       = c.database_id
           AND ic.object_id                         = c.object_id
           AND ic.column_id                         = c.column_id
         WHERE ic.type                              = N'M'
           AND ic.column_usage                     <> N'INCLUDE'
      ) mic
    ON tgt.database_id      = mic.database_id
   AND tgt.object_id        = mic.object_id
   AND tgt.index_id         = mic.index_id
   AND tgt.type             = mic.type
   AND tgt.column_id        = mic.column_id
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated Missing index key sequence based on column uniqueness'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Build table of column uniqueness & display values',0,0) WITH NOWAIT;
  SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Create tempdb.dbo.SQLXL_Index_uniqueness
-- Build table of column uniqueness & display values
/******************************************************************************************************************************************/
IF (OBJECT_ID(N'tempdb.dbo.SQLXL_Index_uniqueness') IS NOT NULL) DROP TABLE tempdb.dbo.SQLXL_Index_uniqueness;

SET ANSI_WARNINGS ON; -- required for XML datatype used in concatenation below

SELECT icol.database_id
      ,object_id               = COALESCE(FK.object_id,icol.object_id)
      ,icol.index_id
      ,icol.type
      ,icol.key_column_sequence
      ,icol.is_included_column
      ,icol.rn
      ,icol.srt
      ,icol.column_id
      ,icol.uniqueness_flag
      ,icol.col_prefix
      ,icol.[Column Descriptors]
      ,icol.col_suffix
      ,uniqueness         = COALESCE(1.0 * icol.index_row_count * ssdv.All_Density,icol.col_uniqueness)
      ,idx_uniqueness_3sd = tempdb.dbo.SQLXL_3SD(COALESCE(1.0 * icol.index_row_count * ssdv.All_Density,icol.col_uniqueness),N'N')
      ,col_uniqueness     = TRY_CAST(icol.col_uniqueness AS FLOAT)
      ,stat_uniqueness    = 1.0 * icol.index_row_count * ssdv.All_Density
      ,icol.index_row_count
      ,ssdv.All_Density
  INTO tempdb.dbo.SQLXL_Index_uniqueness
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- required for XML datatype used in concatenation below
SELECT icol.database_id
      ,FK.object_id
      ,icol.object_id
      ,icol.index_id
      ,icol.type
      ,icol.key_column_sequence
      ,icol.is_included_column
      ,icol.rn
      ,icol.srt
      ,icol.column_id
      ,icol.col_prefix
      ,icol.[Column Descriptors]
      ,icol.col_suffix
      ,uniqueness         = COALESCE(1.0 * icol.index_row_count * ssdv.All_Density,icol.col_uniqueness)
      ,idx_uniqueness_3sd = tempdb.dbo.SQLXL_3SD(COALESCE(1.0 * icol.index_row_count * ssdv.All_Density,icol.col_uniqueness),N'N')
      ,col_uniqueness     = TRY_CAST(icol.col_uniqueness AS FLOAT)
      ,stat_uniqueness    = 1.0 * icol.index_row_count * ssdv.All_Density
      ,icol.index_row_count
      ,ssdv.All_Density
--*/
  FROM (
        SELECT icol.database_id
              ,icol.object_id
              ,icol.index_id
              ,icol.type
              ,ic.key_column_sequence
              ,icol.is_included_column
              ,icol.srt
              ,icol.column_id
              ,rn = ROW_NUMBER()
                    OVER (PARTITION BY icol.database_id
                                      ,icol.object_id
                                      ,icol.index_id
                                      ,icol.type
                                      ,icol.is_included_column
                              ORDER BY icol.srt           -- Index KEY columns first, then elements from clustered index
                                                          -- not in Missing index or Foreign Key
                                      ------------------------------------------------------------------------------------------------------
                                      ,CASE WHEN icol.srt = 1
                                            THEN CASE WHEN icol.type = N'M' OR icol.is_included_column = 1
                                                           -- missing index EQUALITY first.
                                                           -- Note: inequality predicate column and columns to the left of it can be used
                                                           -- for index seeks. Columns to the right of the inequality are not seek eligible
                                                      THEN CASE ic.column_usage
                                                                WHEN N'EQUALITY'   THEN 1
                                                                WHEN N'INEQUALITY' THEN 2
                                                                ELSE 3
                                                           END
                                                      ELSE ic.key_column_sequence
                                                 END
                                            ELSE 0
                                       END
                                      ------------------------------------------------------------------------------------------------------
                                      ,CASE WHEN icol.srt = 1
                                            THEN CASE WHEN icol.type = N'M' OR icol.is_included_column = 1
                                                      THEN c.[Uniqueness] -- default behavior - SQL Server sorts missing columns
                                                                          -- by ordinal position in the table itself.
                                                                          -- Instead start with column_usage (equality, inequality)
                                                                          -- then greatest uniqueness
                                                      ELSE 0
                                                 END
                                            WHEN icol.srt = 2
                                            THEN cix.key_column_sequence
                                            ELSE 0
                                       END
                         )
              -------------------------------------
              ,uniqueness_flag = CASE WHEN icol.srt = 0      THEN N'>'
                                      WHEN icol.srt = 1
                                       AND icol.type <> N'M' THEN N'>'
                                      WHEN icol.srt = 2      THEN N'&'
                                      WHEN icol.srt = 3      THEN N'#'
                                      WHEN icol.srt = 4      THEN N'#'
                                      ELSE N''
                                 END
              -------------------------------------
              ,col_prefix = CASE WHEN icol.type IN (N'2')
                                  AND icol.srt = 2
                                 THEN N'CX('+CAST(cix.key_column_sequence AS NVARCHAR(20))+N')>' -- CLUSTERED index elements added to index
                                                                                                 -- for unique reference to table
                                 ELSE N''
                            END
              ,[Column Descriptors] = CASE icol.srt
                                           WHEN 3 THEN N'UNIQUIFIER i4 (1.00)'
                                           WHEN 4 THEN N'ROW LOCATOR i4 (1.00)'
                                           ELSE c.[Column Descriptors]
                                      END
                                     +IIF(ic.is_index_column_filtered = 1,N' FLT',N'')
              ,col_suffix = IIF(ic.partition_ordinal  = 1,N' PART',N'')
                           +IIF(ic.is_descending_key  = 1,N' DESC',N'')
                           +IIF(ic.column_usage       = N'INEQUALITY',N' {' + NCHAR(60) + NCHAR(62) + N'}',N'')
                           +IIF(    icol.srt = 1 AND icol.type IN (N'2',N'M')
                                AND (ic.in_clustered_index > 0 OR cix.column_id > 0)
                               ,N' =CX('+CAST(cix.key_column_sequence AS NVARCHAR(20))+N')' -- Index elements that are keys in
                                                                                            -- the CLUSTERED index
                               ,N'')
                           +IIF(icol.srt = 2 AND icol.type = N'M'
                               ,N' <CX('+CAST(cix.key_column_sequence AS NVARCHAR(20))+N')' -- CLUSTERED index elements added to index
                                                                                            -- for unique reference to table)
                               ,N'')
              ,col_uniqueness = IIF(-- Candidates for Clustered indexes
                                       1                      = c.is_identity
                                    OR 1                      = c.is_sequence
                                    OR c.default_constraint = N'(newsequentialid())'
                                    OR c.default_constraint = N'(newid())'
                                    OR icol.srt            IN (3,4)
                                   ,1.00
                                   ,c.uniqueness
                                   )
              ,index_row_count = sssh.Rows
          FROM (----------------------------------------------------------------------------------------------------------------------------
                -- Get all candidate columns from across collected data
                ----------------------------------------------------------------------------------------------------------------------------
                -- Index columns - includes all sys.index_columns, sys.function_order_columns, sys.dm_db_missing_index_columns
                --                             ,sys.fulltext_index_columns
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT database_id
                      ,object_id
                      ,index_id
                      ,type
                      ,is_included_column
                      ,srt                = 1
                      ,column_id
                  FROM tempdb.dbo.SQLXL_Index_sys_index_columns
                ----------------------------------------------------------------------------------------------------------------------------
                UNION ALL -- Foreign Key Constraint columns
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT database_id
                      ,object_id          = parent_object_id
                      ,index_id           = constraint_object_id
                      ,type               = N'F'
                      ,is_included_column = 0
                      ,srt                = 0
                      ,column_id          = parent_column_id
                  FROM tempdb.dbo.SQLXL_Index_sys_foreign_key_columns
                ----------------------------------------------------------------------------------------------------------------------------
                UNION ALL -- elements of the CLUSTERED index to add to the KEY display that are not in the current index, missing index
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT i.database_id
                      ,i.object_id
                      ,i.index_id
                      ,i.type
                      ,is_included_column = CAST(0 AS BIT)
                      ,srt                = 2
                      ,cli.column_id
                  FROM (
                        SELECT database_id
                              ,object_id
                              ,index_id
                              ,type
                          FROM tempdb.dbo.SQLXL_Index_Compilation
                         WHERE rec_type  = N'I'
                           AND type NOT IN (N'F',N'1')
                       ) AS i
                  JOIN tempdb.dbo.SQLXL_Index_sys_index_columns AS cli
                    ON i.database_id                           = cli.database_id
                   AND i.object_id                             = cli.object_id
                   AND N'1'                                    = cli.type
                   AND 0                                       = cli.is_included_column
                -- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                EXCEPT -- KEY elements of the current index if they are also already in the Clustered index
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT database_id
                      ,object_id
                      ,index_id
                      ,type
                      ,is_included_column = CAST(0 AS BIT)
                      ,srt                = 2
                      ,column_id
                  FROM tempdb.dbo.SQLXL_Index_sys_index_columns
                ----------------------------------------------------------------------------------------------------------------------------
                UNION ALL -- Add [UNIQUIFIER]  if table is rowstore and a HEAP or non-Unique CLUSTERED
                          -- Add [ROW LOCATOR] if table is columnstore
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT i.database_id
                      ,i.object_id
                      ,i.index_id
                      ,i.type
                      ,is_included_column = CAST(0 AS BIT)
                      ,srt                = IIF(u.type = N'5',4,3) -- 4 is ROW LOCATOR, 3 is UNIQUIFIER
                      ,column_id          = 0
                  FROM (SELECT database_id
                              ,object_id
                              ,index_id
                              ,type
                          FROM tempdb.dbo.SQLXL_Index_Compilation
                         WHERE rec_type = N'I'
                           AND type    IN (N'1',N'2',N'7') -- include '7' Hash on In-Memory Clustered Columnstore
                       ) AS i
                  JOIN (
                        SELECT database_id
                              ,object_id
                              ,type
                          FROM tempdb.dbo.SQLXL_Index_Compilation
                         WHERE N'I'             = rec_type
                           AND type            IN (N'0',N'1',N'5')
                           AND is_unique        = 0
                       ) AS u
                    ON i.database_id = u.database_id
                   AND i.object_ID   = u.object_ID
               ) icol
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_column                        AS c                -- object all columns
            ON icol.database_id                                    = c.database_id
           AND icol.object_id                                      = c.object_id
           AND icol.column_id                                      = c.column_id
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_index_columns             AS ic               -- column by index, FKC, MIX
            ON icol.database_id                                    = ic.database_id
           AND icol.object_id                                      = ic.object_id
           AND icol.index_id                                       = ic.index_id
           AND icol.type                                           = ic.type
           AND icol.column_id                                      = ic.column_id
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_index_columns             AS cix              -- clustered index if available
            ON icol.database_id                                    = cix.database_id
           AND icol.object_id                                      = cix.object_id
           AND N'1'                                                = cix.type
           AND icol.column_id                                      = cix.column_id
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader AS sssh
            ON icol.database_id                                    = sssh.database_id
           AND icol.object_id                                      = sssh.object_id
           AND 0                                                   = sssh.column_id
           AND icol.index_id                                       = sssh.index_ID
                                                               -- No sssh.type
       ) icol
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector AS ssdv
    ON icol.database_id                                    = ssdv.database_id
   AND icol.object_id                                      = ssdv.object_id
   AND 0                                                   = ssdv.column_id
   AND icol.index_id                                       = ssdv.index_ID
                                                       -- No ssdv.type column
   AND icol.rn                                             = ssdv.Row_ID
   AND icol.is_included_column                             = 0

  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_foreign_keys              AS fk
    ON icol.database_id                                    = fk.database_id
   AND icol.object_id                                      = fk.parent_object_id
   AND icol.index_id                                       = fk.object_id
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Build table of column uniqueness & display values'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_uniqueness
    ON tempdb.dbo.SQLXL_Index_uniqueness
      (database_id
      ,object_id
      ,index_id
      ,type
      ,is_included_column
      ,rn
      )
  WITH (DATA_COMPRESSION = PAGE);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Indexed tempdb.dbo.SQLXL_Index_uniqueness'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start index statistics',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

SET ANSI_WARNINGS OFF;

/******************************************************************************************************************************************/
-- Update index statistics
-- Index Statistics
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/
      -- sys.stats ----------------------------------------------------------
       stats_id                         = src.stats_id
      ,stats_Name                       = QUOTENAME(tgt.type_short_desc)+IIF(src.name IS NOT NULL,N' '+src.NAME,N' N/A')
      ,stats_user_created               = src.user_created
      ,stats_auto_created               = src.auto_created
      ,stats_no_recompute               = src.no_recompute
      ,stats_has_filter                 = src.has_filter
      ,stats_filter_definition          = src.filter_definition
      ,stats_is_temporary               = ISNULL(src.is_temporary        ,0)
      ,stats_is_incremental             = ISNULL(src.is_incremental      ,0)
      ,stats_has_persisted_sample       = ISNULL(src.has_persisted_sample,0)
      ,stats_generation_method          = src.stats_generation_method
      ,stats_generation_method_desc     = src.stats_generation_method_desc
      -- sys.ShowStatistics_StatHeader --------------------------------------
      ,stathdr_Updated                  = iss.Updated
      ,stathdr_Rows_CNT                 = ISNULL(iss.Rows              ,0)
      ,stathdr_Rows_sampled_CNT         = ISNULL(iss.Rows_sampled      ,0)
      ,stathdr_Steps                    = ISNULL(iss.Steps             ,0)
      ,stathdr_Density                  = ISNULL(iss.Density           ,0)
      ,stathdr_Average_key_Length       = ISNULL(iss.Average_Key_Length,0)
      ,stathdr_String_index             = iss.String_index
      ,stathdr_Filter_Expression        = iss.Filter_Expression
      ,stathdr_Unfiltered_Rows          = ISNULL(iss.Unfiltered_Rows         ,0)
      ,stathdr_Persisted_Sample_Percent = ISNULL(iss.Persisted_Sample_Percent,0)
      ,stathdr_Statistics_age_days      = ISNULL(iss.Statistics_age_days     ,0)
      -- sys.ShowStatistics_Histogram_summary -------------------------------
      ,stathist_range_rows_LO           = ISNULL(ssh.min_rows_per_value,0)
      ,stathist_range_rows_HI           = ISNULL(ssh.max_rows_per_value,0)
      ,stathist_null_rows               = ISNULL(ssh.null_rows         ,0)
      ,stathist_param_sniff             = ISNULL(ssh.param_sniff       ,0)
      -- sys.dm_db_stats_properties -----------------------------------------
      ,Stats_Prop_modification_CNT      = COALESCE(dsp.modification_counter,dip.modification_counter,0)
  FROM tempdb.dbo.SQLXL_Index_Compilation                          AS tgt
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_stats                            AS src
    ON tgt.database_id                                              = src.database_id
   AND tgt.object_id                                                = src.object_id
   AND tgt.index_id                                                 = src.stats_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader        AS iss
    ON tgt.database_id                                              = iss.database_id
   AND tgt.object_id                                                = iss.object_id
   AND tgt.index_id                                                 = iss.index_id
   AND 0                                                            = iss.column_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram_summary AS ssh
    ON tgt.database_id                                              = ssh.database_id
   AND tgt.object_id                                                = ssh.object_id
   AND tgt.index_id                                                 = ssh.index_id
   AND 0                                                            = ssh.column_id
  LEFT OUTER
  JOIN (
        SELECT database_id
              ,object_id
              ,stats_id
              ,modification_counter = SUM(modification_counter)
          FROM tempdb.dbo.SQLXL_Index_sys_dm_db_stats_properties
         GROUP BY
               database_id
              ,object_id
              ,stats_id
       )                                                         AS dsp
    ON tgt.database_id                                            = dsp.database_id
   AND tgt.object_id                                              = dsp.object_id
   AND tgt.index_id                                               = dsp.stats_id
  LEFT OUTER
  JOIN (
        SELECT database_id
              ,object_id
              ,stats_id
              ,modification_counter = SUM(modification_counter)
          FROM tempdb.dbo.SQLXL_Index_sys_dm_db_incremental_stats_properties
         GROUP BY
               database_id
              ,object_id
              ,stats_id
       )                                                         AS dip
    ON tgt.database_id                                            = dip.database_id
   AND tgt.object_id                                              = dip.object_id
   AND tgt.index_id                                               = dip.stats_id
 WHERE tgt.rec_type = N'I'
   AND TRY_CAST(tgt.type AS INT) IS NOT NULL
OPTION (MAXDOP 1)

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated index statistics'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update index size & count attributes
-- Update index size & count attributes
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/

       Key_Columns_CNT                 = COALESCE(fkc.key_columns_CNT      ,lng.key_columns_CNT      ,0)
      ,Included_Columns_CNT            = COALESCE(fkc.Included_Columns_CNT ,lng.Included_Columns_CNT ,0)
      ----------------------------------------------
      ,key_Total_datatype_length_bytes = COALESCE(fkc.key_column_width     ,lng.key_column_width     ,0)
      ,inc_Total_datatype_length_bytes = COALESCE(fkc.included_column_width,lng.included_column_width,0)
      ,idx_Total_datatype_length_bytes = COALESCE(fkc.total_width          ,lng.total_width          ,0)
      -----------------------------------------------------------------------------------------
      ,row_CNT                         = ISNULL(ps.row_count                 ,0)
      ,Partition_CNT                   = ISNULL(ps.Partition_CNT             ,0)
      ,used_page_CNT                   = ISNULL(ps.used_page_CNT             ,0)
      ,in_row_data_page_CNT            = ISNULL(ps.in_row_data_page          ,0)
      ,in_row_used_page_CNT            = ISNULL(ps.in_row_used_page          ,0)
      ,in_row_reserved_page_CNT        = ISNULL(ps.in_row_reserved_page      ,0)
      ,lob_used_page_CNT               = ISNULL(ps.lob_used_page             ,0)
      ,lob_reserved_page_CNT           = ISNULL(ps.lob_reserved_page         ,0)
      ,row_overflow_used_page_CNT      = ISNULL(ps.row_overflow_used_page    ,0)
      ,row_overflow_reserved_page_CNT  = ISNULL(ps.row_overflow_reserved_page,0)
      ,reserved_page_CNT               = ISNULL(ps.reserved_page             ,0)

  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
          WHERE rec_type = N'I'
       ) AS tgt

  LEFT OUTER -- LEFT OUTER required since HEAPS have no columns and get excluded from subquery
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Index sizes and counts
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,key_column_width      = SUM(IIF(ic.is_included_column = 0 AND ic.type NOT IN (N'5',N'6')
                                             ,CASE WHEN ac.Average_Length > 0
                                                   THEN ac.Average_Length
                                                   ELSE ac.max_length
                                              END
                                             ,0))
              ,included_column_width = SUM(IIF(ic.is_included_column = 1 AND ic.type NOT IN (N'5',N'6')
                                          ,CASE WHEN ac.Average_Length > 0
                                                THEN ac.Average_Length
                                                ELSE ac.max_length
                                           END
                                          ,0))
              ,total_width           = SUM(CASE WHEN ac.Average_Length > 0 AND ic.type NOT IN (N'5',N'6')
                                                THEN ac.Average_Length
                                                ELSE ac.max_length
                                           END)
              ,key_columns_CNT       = SUM(IIF(ic.is_included_column = 0,1,0))
              ,Included_Columns_CNT  = SUM(IIF(ic.is_included_column = 1,1,0))
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
          JOIN tempdb.dbo.SQLXL_Index_column            AS ac
            ON ic.database_id                            = ac.database_id
           AND ic.object_id                              = ac.object_id
           -- No parent_object_id column in XL_IDX_column
           AND ic.column_id                              = ac.column_id
         GROUP BY
               ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
       )                   AS lng
    ON tgt.database_id      = lng.database_id
   AND tgt.object_id        = lng.object_id
   AND tgt.index_id         = lng.index_id
   AND tgt.type             = lng.type

  LEFT OUTER -- LEFT OUTER required since HEAPS have no columns and get excluded from subquery
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Index sizes and counts
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id                 = fkc.database_id
              ,object_id                   = fkc.constraint_object_id
              ,key_column_width            = SUM(CASE WHEN ac.Average_Length > 0 THEN ac.Average_Length ELSE ac.max_length END)
              ,included_column_width       = 0
              ,total_width                 = SUM(CASE WHEN ac.Average_Length > 0 THEN ac.Average_Length ELSE ac.max_length END)
              ,key_columns_CNT             = COUNT(1)
              ,Included_columns_CNT        = 0
          FROM tempdb.dbo.SQLXL_Index_sys_foreign_key_columns AS fkc
          JOIN tempdb.dbo.SQLXL_Index_column                  AS ac
            ON fkc.database_id                                 = ac.database_id
           AND fkc.parent_object_id                            = ac.object_id
           AND fkc.parent_column_id                            = ac.column_id
         GROUP BY
               fkc.database_id
              ,fkc.constraint_object_id
       )              AS fkc
    ON tgt.database_id = fkc.database_id
   AND tgt.object_id   = fkc.object_id
   AND tgt.index_id    = fkc.object_id
   AND tgt.type        = N'F'

  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_dm_db_partition_stats AS ps
    ON tgt.database_id                                   = ps.database_id
   AND tgt.object_id                                     = ps.object_id
   AND tgt.index_id                                      = ps.index_id
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated index size & count attributes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Update index column statistics and attributes',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update index column statistics and attributes
-- Update statistics for indexes, Foreign Key Constraints, missing indexes
-- Update info on columns, uniqueness, and compression
/******************************************************************************************************************************************/

SET ANSI_WARNINGS ON; -- required for the FOR XML function below

UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON;
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/

       element_uniqueness      = CASE WHEN tgt.type = N'0'
                                      THEN N'HEAP' + IIF(tgt.parent_object_type IN (N'IF',N'FT',N'TF',N'V')
                                                        ,NCHAR(10)+tgt.obj_type_short_label
                                                        ,N'')
                                      WHEN tgt.type = N'5'
                                      THEN N'CCS'
                                      WHEN tgt.type = N'6'
                                      THEN N'NCS'
                                      WHEN tgt.type = N'90'
                                      THEN N'FTX'
                                      WHEN LEN(REPLACE(un.uniq,NCHAR(10),N'')) > 0
                                      THEN STUFF(un.uniq,1,1,N'')
                                      ELSE COALESCE((SELECT TOP (1) -- And there is a candidate CLUSTERING index column
                                                            NCHAR(10)+tempdb.dbo.SQLXL_3SD(xic.uniqueness,'N')
                                                       FROM tempdb.dbo.SQLXL_Index_column AS xic
                                                      WHERE tgt.tbl_is_clustered_columnstore = 0 -- not a CLUSTERED COLUMNSTORE
                                                        AND tgt.database_id              = xic.database_id
                                                        AND tgt.object_id                = xic.object_id
                                                        AND (   1                        = xic.is_identity
                                                             OR 1                        = xic.is_sequence
                                                             OR xic.default_constraint   = N'(newsequentialid())'
                                                             OR xic.default_constraint   = N'(newid())'
                                                             OR 1.05                     > xic.Uniqueness
                                                            )
                                                      ORDER BY
                                                            xic.is_identity        DESC
                                                           ,xic.is_sequence        DESC
                                                           ,xic.default_constraint DESC
                                                           ,xic.Uniqueness         ASC
                                                    )
                                                   ,N''
                                                 )
                                 END
      ,Lead_Element_Uniqueness = (SELECT TOP 1
                                         COALESCE(icol.stat_uniqueness,icol.col_uniqueness)
                                    FROM tempdb.dbo.SQLXL_Index_uniqueness AS icol
                                   WHERE tgt.database_id               = icol.database_id
                                     AND tgt.object_id                 = icol.object_id
                                     AND tgt.index_id                  = icol.index_id
                                     AND tgt.type                      = icol.type
                                     AND 0                             = icol.is_included_column
                                     AND 1                             = icol.srt
                                   ORDER BY
                                         icol.rn
                                 )
      ,key_element_length      = STUFF((SELECT NCHAR(10) + CAST(ssdv.Average_Length AS NVARCHAR(20))
                                          FROM tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector ssdv
                                         WHERE tgt.database_id                          = ssdv.database_id
                                           AND tgt.object_id                            = ssdv.object_id
                                           --- No object_id in SSDV
                                           AND 0                                        = ssdv.column_id
                                           AND tgt.index_id                             = ssdv.index_id
                                         ORDER BY ssdv.Row_ID
                                           FOR XML PATH (N''), TYPE
                                       ).value('(./text())[1]','NVARCHAR(4000)')
                                       ,1,1,N'')
      ,key_column_info         = STUFF(
                                 CASE WHEN N'CDC' = tgt.schema_name
                                       AND tgt.name LIKE N'fn_cdc_get_%'  -- Exclude Change Data Capture (CDC) functions
                                      THEN NCHAR(10)+N'<CDC>'
                                      ----------------------------------
                                      WHEN tgt.type = N'0'                -- HEAP found
                                      THEN NCHAR(10)
                                          +CASE WHEN tgt.tbl_is_memory_optimized = 1
                                                THEN N'<XTP HEAP>'
                                                WHEN tgt.obj_type = N'U'
                                                THEN COALESCE(N'<HEAP> Candidate Clustered Unique ordered column:'
                                                             +NCHAR(10)
                                                             +(-----------------------------------------------------------------------------
                                                               -- If unique ordered column found show it here
                                                               -----------------------------------------------------------------------------
                                                               SELECT xic.[column descriptors]
                                                                 FROM tempdb.dbo.SQLXL_Index_column      AS xic
                                                                WHERE tgt.database_id                   = xic.database_id
                                                                  AND tgt.object_id                     = xic.object_id
                                                                  AND tgt.tbl_cx_uniq_ordered_column_ID = xic.column_id
                                                              )
                                                             ,N'<HEAP> Candidate clustering column:'
                                                             +NCHAR(10)
                                                             +(-----------------------------------------------------------------------------
                                                               -- If no Unique Ordered column found, look for next best candidate
                                                               -----------------------------------------------------------------------------
                                                               SELECT TOP 1
                                                                      xic.[column descriptors]
                                                                 FROM tempdb.dbo.SQLXL_Index_column  AS xic
                                                                WHERE tgt.database_id               = xic.database_id
                                                                  AND tgt.object_id                 = xic.object_id
                                                                  AND xic.Uniqueness                < 1.1
                                                                  AND xic.data_type               NOT LIKE N'%DATE%'
                                                                ORDER BY
                                                                      xic.uniqueness * COALESCE(xic.average_length,xic.max_length)
                                                              )
                                                            ,N'<HEAP> No candidate clustering column')
                                               WHEN tgt.obj_type = N'V'
                                               THEN N'<Unindexed View>'
                                               ELSE N'<Unordered table-valued function>'
                                           END
                                      ----------------------------------
                                      WHEN tgt.type = N'5'
                                      THEN NCHAR(10)+N'<Clustered Columnstore>'
                                          +ISNULL(NCHAR(10)
                                                 +(SELECT TOP (1)
                                                          ISNULL(ip.col_prefix+N' ',N'')
                                                         +ISNULL(ip.[column descriptors],N'')
                                                         +ISNULL(N' '+ip.col_suffix,N'')
                                                    FROM tempdb.dbo.SQLXL_Index_uniqueness AS ip
                                                   WHERE tgt.database_id               = ip.database_id
                                                     AND tgt.object_id                 = ip.object_id
                                                     AND tgt.index_id                  = ip.index_id
                                                     AND tgt.type                      = ip.type
                                                     AND ip.col_suffix              LIKE N'PART%'
                                                  ),N'')
                                      WHEN tgt.type = N'6'
                                      THEN NCHAR(10)+N'<Nonclustered Columnstore>'
                                          +ISNULL((SELECT TOP (1)
                                                          NCHAR(10)
                                                         +ISNULL(ip.col_prefix+N' ',N'')
                                                         +ISNULL(ip.[column descriptors],N'')
                                                         +ISNULL(N' '+ip.col_suffix,N'')
                                                    FROM tempdb.dbo.SQLXL_Index_uniqueness AS ip
                                                   WHERE tgt.database_id               = ip.database_id
                                                     AND tgt.object_id                 = ip.object_id
                                                     AND tgt.index_id                  = ip.index_id
                                                     AND tgt.type                      = ip.type
                                                     AND ip.col_suffix              LIKE N'PART%'
                                                  ),N'')
                                      ----------------------------------
                                      ELSE (SELECT NCHAR(10)
                                                  +IIF(LEN(icol.col_prefix) > 0,icol.col_prefix,N'')
                                                        -- clustered index, don't include Stats Steps  since it's not useful
                                                  +CASE WHEN tgt.type = N'1' AND CHARINDEX(N'STP(',icol.[Column Descriptors]) > 0
                                                        THEN LEFT(icol.[Column Descriptors],CHARINDEX(N'STP(',icol.[Column Descriptors])-2)
                                                        WHEN tgt.type = N'0' AND icol.srt = 3      -- don't show uniquifier for HEAPS
                                                        THEN N''
                                                        ELSE ISNULL(icol.[Column Descriptors],N'')
                                                   END
                                                  +IIF(LEN(icol.col_suffix) > 0,icol.col_suffix,N'')
                                             FROM tempdb.dbo.SQLXL_Index_uniqueness AS icol
                                            WHERE tgt.database_id               = icol.database_id
                                              AND tgt.object_id                 = icol.object_id
                                              AND tgt.index_id                  = icol.index_id
                                              AND tgt.type                      = icol.type
                                              AND 0                             = icol.is_included_column
                                            ORDER BY
                                                  icol.rn
                                              FOR XML PATH(N''),TYPE
                                           ).value('(./text())[1]','NVARCHAR(4000)')
                                 END,1,1,N'')
      ,Included_column_info    = CASE tgt.type
                                      WHEN N'5'             -- Clustered Column Store
                                      THEN N'<All Columns>' -- NCHAR(10) included with concatenation of KEY & INCLUDED in PRESENT.SQL
                                      WHEN N'6'
                                      THEN (------------------------------------------------------------------------------------------------
                                            -- Nonclustered Column Store
                                            ------------------------------------------------------------------------------------------------
                                            SELECT ISNULL(N'-- Excluded Eligible Table Columns -----------'
                                                          +(SELECT NCHAR(10)
                                                                  +ac.[Column Descriptors]
                                                                  +IIF(ic.column_id IS NOT NULL,N' <IDXKEY>',N'')
                                                             FROM (-------------------------------------------------------------------------
                                                                   -- table columns not found in the Nonclustered Column Store
                                                                   -------------------------------------------------------------------------
                                                                   SELECT c.column_id
                                                                     FROM tempdb.dbo.SQLXL_Index_column AS c
                                                                    WHERE tgt.database_id              = c.database_id
                                                                      AND tgt.object_id                = c.object_id
                                                                      AND 1                            = c.is_columnstore_eligible
                                                                   EXCEPT
                                                                   SELECT ic.column_id
                                                                     FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
                                                                    WHERE tgt.database_id      = ic.database_id
                                                                      AND tgt.object_id        = ic.object_id
                                                                      AND tgt.index_id         = ic.index_id
                                                                      AND tgt.type             = ic.type
                                                                  ) AS c
                                                             JOIN tempdb.dbo.SQLXL_Index_column AS ac
                                                               ON tgt.database_id              = ac.database_id
                                                              AND tgt.object_id                = ac.object_id
                                                              AND c.column_id                  = ac.column_id
                                                             LEFT OUTER
                                                             JOIN (SELECT ic.column_id
                                                                     FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
                                                                    WHERE tgt.database_id      = ic.database_id
                                                                      AND tgt.object_id        = ic.object_id
                                                                      AND 0                    = ic.is_included_column
                                                                    GROUP BY
                                                                          ic.column_id
                                                                  ) AS ic
                                                               ON c.column_id                  = ic.column_id
                                                            ORDER BY
                                                                  ac.name
                                                              FOR XML PATH(N''),TYPE
                                                          ).value('(./text())[1]','NVARCHAR(4000)')
                                                          ,N'<All Columns>'
                                                         )
                                           )
                                      WHEN N'F' THEN N'' -- No included columns for Foreign Key Constraints
                                      ELSE STUFF(
                                           (SELECT NCHAR(10)
                                                  +IIF(LEN(icol.col_prefix) > 0,icol.col_prefix,N'')
                                                   -- clustered index, don't include Stats Steps since it's not useful
                                                  +CASE WHEN tgt.type = N'1' AND CHARINDEX(N'STP(',icol.[Column Descriptors]) > 0
                                                        THEN LEFT(icol.[Column Descriptors],CHARINDEX(N'STP(',icol.[Column Descriptors])-2)
                                                        ELSE ISNULL(icol.[Column Descriptors],N'')
                                                   END
                                                  +IIF(LEN(icol.col_suffix) > 0,icol.col_suffix,N'')
                                              FROM tempdb.dbo.SQLXL_Index_uniqueness AS icol
                                             WHERE tgt.database_id               = icol.database_id
                                               AND tgt.object_id                 = icol.object_id
                                               AND tgt.index_id                  = icol.index_id
                                               AND tgt.type                      = icol.type
                                               AND 1                             = icol.is_included_column
                                             ORDER BY
                                                   icol.rn
                                               FOR XML PATH(N''),TYPE
                                            ).value('(./text())[1]','NVARCHAR(4000)')
                                           ,1,1,N'')
                                 END
      ----------------------------------------------
      ,Partition_none_compress_CNT                = ISNULL(p.None_Comp    ,0)
      ,Partition_row_compress_CNT                 = ISNULL(p.Row_Comp     ,0)
      ,Partition_page_compress_CNT                = ISNULL(p.Page_Comp    ,0)
      ,Partition_columnstore_compress_CNT         = ISNULL(p.colstore_Comp,0)
      ,Partition_columnstore_archive_compress_CNT = ISNULL(p.colstore_Arch,0)

  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type           = N'I'
           AND NOT obj_type_label = N'VW UIV' -- exclude unindexed views - may have IDENTITY or SEQUENCE columns
       ) AS tgt
  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Index lead column type and nullable
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,sc.is_nullable
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns     AS ic
          JOIN tempdb.dbo.SQLXL_Index_sys_objects           AS o
            ON ic.database_id                              = o.database_id
           AND ic.object_id                                = o.object_id
          JOIN tempdb.dbo.SQLXL_Index_sys_columns           AS sc
            ON ic.database_id                              = sc.database_id
           AND (   (    ic.type  = N'F'
                    AND o.parent_object_id                = sc.object_id
                   )
                OR (    ic.type <> N'F'
                    AND ic.object_id                       = sc.object_id
                   )
               )
           AND ic.column_id                                = sc.column_id
         WHERE 1                                           = ic.key_column_sequence
       )                                                  AS nc
    ON tgt.database_id                                     = nc.database_id
   AND tgt.object_id                                       = nc.object_id
   AND tgt.index_id                                        = nc.index_id
   AND tgt.type                                            = nc.type
  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Get count of compressed and archived partitions
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT p.database_id
              ,p.object_id
              ,p.index_id
              ,None_Comp           = SUM(p.None_Comp    )
              ,Row_Comp            = SUM(p.Row_Comp     )
              ,Page_Comp           = SUM(p.Page_Comp    )
              ,colstore_Comp       = SUM(p.colstore_Comp)
              ,colstore_Arch       = SUM(p.colstore_Arch)
          FROM tempdb.dbo.SQLXL_Index_sys_partitions AS p
         GROUP BY
               p.database_id
              ,p.object_id
              ,p.index_id
       )                   AS p
    ON tgt.database_id      = p.database_id
   AND tgt.object_id        = p.object_id
   AND tgt.index_id         = p.index_id
 OUTER
 APPLY (------------------------------------------------------------------------------------------------------------------------------------
        -- Assemble index statistics in uniqueness descending corrected key order
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT(SELECT NCHAR(10)
                     +IIF(CHARINDEX(N' gg22 ',ucol.[Column Descriptors]) > 0,N'Geog',N'')
                     +IIF(CHARINDEX(N' gm22 ',ucol.[Column Descriptors]) > 0,N'Geom',N'')
                     +IIF(CHARINDEX(N'] xml' ,ucol.[Column Descriptors]) > 0,N'XML' ,N'')
                     --------------------------------------------------------------------
                      -- add indicator showing cumulative statistics as columns are added
                     +IIF(tgt.stathdr_Rows_CNT > 0,ucol.uniqueness_flag,N'')
                     +IIF(ucol.idx_uniqueness_3sd > N'',ucol.idx_uniqueness_3sd,N'(N/A)')
                     +CASE WHEN i.row_CNT > 0 AND ucol.stat_uniqueness  > 0 -- use index stat uniqueness
                           THEN CASE WHEN ROUND(100.0 * ucol.stat_uniqueness / i.row_CNT,0) >= 1.0
                                          -- lead element is >= 1% of all table rows
                                     THEN N'(' + tempdb.dbo.SQLXL_3SD(ucol.stat_uniqueness / i.row_CNT,N'%') + N')'
                                     ELSE N''
                                END
                           WHEN i.row_CNT > 0 AND ucol.col_uniqueness > 0 -- use column level uniqueness
                           THEN CASE WHEN ROUND(100.0 * ucol.col_uniqueness / i.row_CNT,0) > 1.0
                                       -- lead element is >= 1% of all index rows
                                     THEN N'(' + tempdb.dbo.SQLXL_3SD(ucol.col_uniqueness / i.row_CNT,N'%') + N')'
                                     ELSE N''
                                END
                           ELSE N''
                      END
                     +IIF(tgt.has_filter = 1, N'F',N'')      -- add indicator showing uniqueness values are on filtered index
                 FROM tempdb.dbo.SQLXL_Index_uniqueness  AS ucol
                 LEFT OUTER
                 JOIN tempdb.dbo.SQLXL_Index_Compilation AS i
                   ON i.rec_type = N'I'
                  AND i.type    IN (N'0',N'1',N'5') -- get parent row count from HEAP, CLUSTERED, or Columnstore record
                  AND ucol.database_id = i.database_id
                  AND ucol.object_id   = i.object_id
                WHERE tgt.database_id  = ucol.database_id
                  AND tgt.object_id    = ucol.object_id
                  AND tgt.index_id     = ucol.index_id
                  AND tgt.type         = ucol.type
                  AND 0                = ucol.is_included_column
                ORDER BY
                      ucol.rn
                  FOR XML PATH(N''),TYPE
              ).value('(./text())[1]','NVARCHAR(4000)')
       ) AS un(uniq)
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated index column statistics and attributes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

SET ANSI_WARNINGS OFF;

/******************************************************************************************************************************************/
-- Update table columns with attributes Unique, Ordered,IDs
-- Table Unique Ordered IDs - Identity, Sequence, GUID, Sequence GUID
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.parent_object_id,tgt.index_id,tgt.type,c.UNQ,c.column_id,ncx.index_id,
--*/
       tbl_cx_uniq_ordered_column_TYP       = c.UNQ
      ,tbl_cx_uniq_ordered_column_ID        = c.column_id
      ,tbl_smallest_uniq_Nonclustered_idx   = ncx.index_id
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
  LEFT OUTER
  JOIN (-- find all tables with columns that are unique/incrementing
        SELECT c.database_id
              ,c.object_id
              ,c.Column_ID
              ,UNQ = CASE WHEN c.is_identity   = 1                      THEN N'IDN'
                          WHEN c.seq_object_id > 0                      THEN N'SEQ'
                          WHEN dc.definition   = N'(newsequentialid())' THEN N'SUID'
                          WHEN dc.definition   = N'(newid())'           THEN N'NUID'
                          ELSE N''
                     END
              ,rn = ROW_NUMBER() OVER (PARTITION BY c.database_id
                                                   ,c.object_id
                                           ORDER BY c.max_length          -- smallest one first if more than one
                                                   ,c.is_identity   DESC
                                                   ,c.seq_object_id DESC
                                                   ,dc.definition
                                      )
          FROM tempdb.dbo.SQLXL_Index_sys_columns             AS c
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_default_constraints AS dc
            ON c.database_id                              = dc.database_id
           AND c.default_object_id                        = dc.object_id
         WHERE (   c.is_identity   = 1
                OR c.seq_object_id > 0
                OR dc.definition   = N'(newsequentialid())'
                OR dc.definition   = N'(newid())'
               )
       )                                   AS c
    ON tgt.database_id                      = c.database_id
   AND tgt.object_id                        = c.object_id
   AND 1                                    = c.rn
  LEFT OUTER
  JOIN (-- find smallest unique index to replace heap
        SELECT i.database_id
              ,i.parent_object_id
              ,i.index_id
              ,rn = ROW_NUMBER() OVER (PARTITION BY i.database_id
                                                   ,i.parent_object_id
                                           ORDER BY i.stathdr_Average_Key_Length  -- smallest one first if more than one
                                                   ,i.Lead_Element_Uniqueness     -- most uniquest first key element next
                                                   ,i.Key_Columns_CNT             -- fewest key columns
                                                   ,i.ius_user_Total_CNT  DESC    -- most used
                                      )
          FROM tempdb.dbo.SQLXL_Index_Compilation AS i
         WHERE i.rec_type = N'I'
           AND i.type                     = N'2'
           AND (   i.is_primary_key       = 1
                OR i.is_unique_constraint = 1
                OR i.is_unique            = 1
               )
       )                                   AS ncx
    ON tgt.database_id                      = ncx.database_id
   AND tgt.parent_object_id                 = ncx.parent_object_id
   AND 1                                    = ncx.rn
 WHERE TRY_CAST(tgt.type AS INT) < 2
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated table columns with attributes Unique, Ordered,IDs'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update index lead element
-- Index Lead Element - all but Clustered ColumnStores, Nonclustered ColumnStore, Missing indexes
--                      Assembly (CLR) table-valued function, SQL inline table-valued function
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/
       Lead_Element_Column_ID           = src.Lead_Element_Column_ID
--    ,Lead_Element_Uniqueness          = src.Lead_Element_Uniqueness -- computed above
      ,Lead_Element_Max_Len             = ISNULL(src.Lead_Element_Max_Len,0)
      ,Lead_Element_Data_Type           = src.Lead_Element_Data_Type
      ,Lead_Element_is_Identity         = src.Lead_Element_is_Identity
      ,Lead_Element_is_Sequence         = src.Lead_Element_is_Sequence
      ,Lead_Element_is_newsequentialid  = src.Lead_Element_is_newsequentialid
      ,Lead_Element_is_newid            = src.Lead_Element_is_newid
      ,Lead_Element_is_Nullable         = src.Lead_Element_is_Nullable

  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
  JOIN (
        SELECT database_id                     = ic.database_id
              ,object_id                       = ic.object_id
              ,index_ID                        = ic.index_id
              ,type                            = ic.type
              ,Lead_Element_Max_Len            = sc.max_length
              ,Lead_Element_Data_Type          = t.name
              ,Lead_Element_Column_ID          = ic.column_id
              ,Lead_Element_is_Identity        = sc.is_identity
              ,Lead_Element_is_Sequence        = sc.is_sequence
              ,Lead_Element_is_newsequentialid = IIF(sc.default_constraint = N'(newsequentialid())',1,0)
              ,Lead_Element_is_newid           = IIF(sc.default_constraint = N'(newid())'          ,1,0)
              ,Lead_Element_is_Nullable    = sc.is_nullable
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
          JOIN tempdb.dbo.SQLXL_Index_column            AS sc
            ON ic.database_id                          = sc.database_id
           AND ic.object_id                            = sc.object_id
           -- No object_id column in XL_IDX_column
           AND ic.column_id                            = sc.column_id
          JOIN tempdb.dbo.SQLXL_Index_sys_types         AS t
            ON ic.database_id                          = t.database_id
           AND sc.user_type_id                         = t.user_type_id
         WHERE TRY_CAST(ic.type AS INT) BETWEEN 1 AND 4
           AND ic.key_column_sequence = 1
       )                       AS src
    ON tgt.database_id          = src.database_id
   AND tgt.object_id            = src.object_id
   AND tgt.index_id             = src.index_id
   AND tgt.type                 = src.type
 WHERE tgt.rec_type = N'I'
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated index lead key element'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update Partitions & Functions
-- Index Partitions & Functions
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/

       data_space_name                   = ds.data_space_name
      ,data_space_type                   = ds.data_space_type
--    ,data_space_logical_filename       = ds.file_logical_filename              -- can be many per object,omitting for now
      ,data_space_type_desc              = ds.data_space_type_desc
      ,data_space_is_default             = ISNULL(ds.data_space_is_default,0)
      ,data_space_is_system              = ISNULL(ds.data_space_is_system,0)
--    ,filegroup_guid                    = ds.filegroup_guid                     -- can be many per object,omitting for now
--    ,filegroup_is_read_only            = ds.filegroup_is_read_only             -- can be many per object,omitting for now
--    ,filegroup_is_autogrow_all_files   = ds.filegroup_is_autogrow_all_files    -- can be many per object,omitting for now
      ,partition_function_id             = ds.partition_function_id
      ,partition_function_name           = ds.partition_function_name
      ,partition_function_type           = ds.partition_function_type
      ,partition_function_type_desc      = ds.partition_function_type_desc
      ,partition_function_fanout         = ds.partition_function_fanout
      ,partition_function_boundary_value = ds.partition_function_boundary_value
      ,partition_function_is_system      = ISNULL(ds.partition_function_is_system,0)
      ,partition_function_create_DTTM    = ds.partition_function_create_date
      ,partition_function_modify_DTTM    = ds.partition_function_modify_date
  FROM tempdb.dbo.SQLXL_Index_Compilation       AS tgt
  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- distinct list of data spaces for Filestream objects
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT DISTINCT
               database_id
              ,data_space_id
              ,data_space_name
              ,data_space_type
              ,data_space_type_desc
              ,data_space_is_default
              ,data_space_is_system
              ,filegroup_guid
              ,filegroup_is_read_only
              ,filegroup_is_autogrow_all_files
              ,partition_function_id
              ,partition_function_name
              ,partition_function_type
              ,partition_function_type_desc
              ,partition_function_fanout
              ,partition_function_boundary_value
              ,partition_function_is_system
              ,partition_function_create_date
              ,partition_function_modify_date
          FROM tempdb.dbo.SQLXL_Index_sys_data_spaces
       )                AS ds
    ON tgt.database_id   = ds.database_id
   AND tgt.data_space_id = ds.data_space_id
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated Partitions & Functions'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update metrics - Usage, Operational, missing index, row group operational
-- Index Operational & Usage Statistics info. Including InMemory, ColumnStore
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/
      -------------------------------------------------------------------------------------------------------------------------------------
      -- sys.dm_db_index_usage_stats, sys.dm_db_missing_index_details
      -------------------------------------------------------------------------------------------------------------------------------------
       ius_user_Total_CNT = CASE WHEN tgt.type = N'M'
                                 THEN ISNULL(mix.user_seeks  ,0) + ISNULL(mix.user_scans  ,0)
                                 ELSE ISNULL(ius.user_Total_cnt,0)
                            END
      ,ius_user_read_CNT           = ISNULL(mix.user_seeks     ,0) + ISNULL(mix.user_scans             ,0)
                                   + ISNULL(ius.user_read_CNT  ,0) + ISNULL(rgos.index_scan_cnt        ,0)
      ,ius_user_seeks_CNT          = ISNULL(mix.user_seeks     ,0) + ISNULL(ius.user_seeks             ,0)
      ,ius_user_scans_CNT          = ISNULL(mix.user_scans     ,0) + ISNULL(ius.user_scans             ,0)
                                   + IIF(tgt.type <> N'5',ISNULL(rgos.index_scan_cnt,0),0)
                                   + ISNULL(rgos.delete_buffer_scan_CNT,0)
      ,ius_user_lookups_CNT        = IIF(tgt.type = N'M',0                         ,ISNULL(ius.user_lookups      ,0))
      ,ius_user_updates_CNT        = IIF(tgt.type = N'M',0                         ,ISNULL(ius.user_updates      ,0))
      ,ius_system_seeks_CNT        = IIF(tgt.type = N'M',ISNULL(mix.system_seeks,0),ISNULL(ius.system_seeks      ,0))
      ,ius_system_scans_CNT        = IIF(tgt.type = N'M',ISNULL(mix.system_scans,0),ISNULL(ius.system_scans      ,0))
      ,ius_system_lookups_CNT      = IIF(tgt.type = N'M',0                         ,ISNULL(ius.system_lookups    ,0))
      ,ius_system_updates_CNT      = IIF(tgt.type = N'M',0                         ,ISNULL(ius.system_updates    ,0))
      ,ius_last_user_seek_DTTM     = IIF(tgt.type = N'M',mix.last_user_seek  ,ius.last_user_seek    ) -- NULL values OK for Dates
      ,ius_last_user_scan_DTTM     = IIF(tgt.type = N'M',mix.last_user_scan  ,ius.last_user_scan    ) -- NULL values OK for Dates
      ,ius_last_user_lookup_DTTM   = IIF(tgt.type = N'M',NULL                ,ius.last_user_lookup  ) -- NULL values OK for Dates
      ,ius_last_user_update_DTTM   = IIF(tgt.type = N'M',NULL                ,ius.last_user_update  ) -- NULL values OK for Dates
      ,ius_last_system_seek_DTTM   = IIF(tgt.type = N'M',mix.last_system_seek,ius.last_system_seek  ) -- NULL values OK for Dates
      ,ius_last_system_scan_DTTM   = IIF(tgt.type = N'M',mix.last_system_scan,ius.last_system_scan  ) -- NULL values OK for Dates
      ,ius_last_system_lookup_DTTM = IIF(tgt.type = N'M',NULL                ,ius.last_system_lookup) -- NULL values OK for Dates
      ,ius_last_system_update_DTTM = IIF(tgt.type = N'M',NULL                ,ius.last_system_update) -- NULL values OK for Dates
      -------------------------------------------------------
      ,ius_last_read_days_ago   = DATEDIFF(DAY
                                          ,(SELECT dt = MAX(dt)
                                              FROM (VALUES (mix.last_user_seek)  ,(mix.last_user_scan)
                                                          ,(ius.last_user_seek)  ,(ius.last_user_scan)
                                                          ,(ius.last_user_lookup),(ius.last_user_update)
                                                   ) AS v(dt)
                                           )
                                          ,sp.collection_DTTM
                                          )
      ,ius_last_write_days_ago  = DATEDIFF(DAY
                                          ,ius.last_user_update
                                          ,sp.collection_DTTM
                                          )
      -------------------------------------------------------------------------------------------------------------------------------------
      -- sys.dm_db_index_operational_stats
      -------------------------------------------------------------------------------------------------------------------------------------
      ,ios_partition_CNT                         = ISNULL(ios.partition_CNT                ,0)
      -----------------------------------------
      --Index Leaf/Key writes -----------------
      ,ios_leaf_insert_CNT                       = ISNULL(ios.leaf_insert_CNT              ,0)
      ,ios_leaf_update_CNT                       = ISNULL(ios.leaf_update_CNT              ,0)
      ,ios_leaf_delete_CNT                       = ISNULL(ios.leaf_delete_CNT              ,0)
      ,ios_leaf_ghost_CNT                        = ISNULL(ios.leaf_ghost_CNT               ,0)
      ,ios_Total_leaf_Contacts_CNT               = ISNULL(ios.leaf_insert_CNT              ,0)
                                                 + ISNULL(ios.leaf_update_CNT              ,0)
                                                 + ISNULL(ios.leaf_delete_CNT              ,0)
                                                 + ISNULL(ios.leaf_ghost_CNT               ,0)
      --Index NonLeaf/Key writes --------------
      ,ios_nonleaf_insert_CNT                    = ISNULL(ios.nonleaf_insert_CNT           ,0)
      ,ios_nonleaf_delete_CNT                    = ISNULL(ios.nonleaf_delete_CNT           ,0)
      ,ios_nonleaf_update_CNT                    = ISNULL(ios.nonleaf_update_CNT           ,0)
      ,ios_Total_nonleaf_Contacts_CNT            = ISNULL(ios.nonleaf_insert_CNT           ,0)
                                                 + ISNULL(ios.nonleaf_update_CNT           ,0)
                                                 + ISNULL(ios.nonleaf_delete_CNT           ,0)
      -----------------------------------------
      ,ios_leaf_alloc_page_split_CNT             = ISNULL(ios.leaf_alloc_page_split_CNT    ,0)
                                                  +ISNULL(xis.page_split_count             ,0)
      ,ios_nonleaf_alloc_page_split_CNT          = ISNULL(ios.nonleaf_alloc_page_split_CNT ,0)
                                                  +ISNULL(xis.key_split_count              ,0)
      -----------------------------------------
      ,ios_leaf_page_merge_CNT                   = ISNULL(ios.leaf_page_merge_CNT          ,0)
                                                  +ISNULL(xis.page_merge_count             ,0)
      ,ios_nonleaf_page_merge_CNT                = ISNULL(ios.nonleaf_page_merge_CNT       ,0)
                                                  +ISNULL(xis.key_merge_count              ,0)
      -----------------------------------------
      ,ios_range_scan_CNT                        = ISNULL(ios.range_scan_CNT               ,0) -- rolls up to TOTAL SCAN
      -----------------------------------------
      ,ios_singleton_lookup_CNT                  = ISNULL(ios.singleton_lookup_CNT         ,0)
      ,ios_forwarded_fetch_CNT                   = ISNULL(ios.forwarded_fetch_CNT          ,0)
      ,ios_lob_fetch_pages_CNT                   = ISNULL(ios.lob_fetch_in_pages           ,0)
      ,ios_lob_fetch_bytes_CNT                   = ISNULL(ios.lob_fetch_in_bytes           ,0)
      ,ios_lob_orphan_create_CNT                 = ISNULL(ios.lob_orphan_create_CNT        ,0)
      ,ios_lob_orphan_insert_CNT                 = ISNULL(ios.lob_orphan_insert_CNT        ,0)
      ,ios_row_overflow_fetch_in_pages_CNT       = ISNULL(ios.row_overflow_fetch_in_pages  ,0)
      ,ios_row_overflow_fetch_in_bytes_CNT       = ISNULL(ios.row_overflow_fetch_in_bytes  ,0)
      ,ios_column_value_push_off_row_CNT         = ISNULL(ios.column_value_push_off_row_CNT,0)
      ,ios_column_value_pull_in_row_CNT          = ISNULL(ios.column_value_pull_in_row_CNT ,0)
      -----------------------------------------
      ,ios_page_compression_attempt_CNT          = ISNULL(ios.page_compression_attempt_CNT,0)
      ,ios_page_compression_success_CNT          = ISNULL(ios.page_compression_success_CNT,0)
      ,ios_page_compression_fail_CNT             = ISNULL(ios.page_compression_attempt_CNT,0)
                                                 - ISNULL(ios.page_compression_success_CNT,0)
      -----------------------------------------
      ,ios_version_generated_off_row_CNT         = ISNULL(ios.version_generated_off_row_CNT        ,0)
      ,ios_ghost_version_inrow_CNT               = ISNULL(ios.ghost_version_inrow_CNT              ,0)
      ,ios_ghost_version_off_row_CNT             = ISNULL(ios.ghost_version_off_row_CNT            ,0)
      ,ios_insert_over_ghost_version_inrow_CNT   = ISNULL(ios.insert_over_ghost_version_inrow_CNT  ,0)
      ,ios_insert_over_ghost_version_off_row_CNT = ISNULL(ios.insert_over_ghost_version_off_row_CNT,0)

      -----------------------------------------
      ,ios_row_lock_CNT                          = ISNULL(ios.row_lock_CNT                 ,0)
      ,ios_row_lock_wait_CNT                     = ISNULL(ios.row_lock_wait_CNT            ,0)
      ,ios_row_lock_wait_MS_CNT                  = ISNULL(ios.row_lock_wait_MS             ,0)
      ,ios_row_lock_wait_AVG                     = IIF(ios.row_lock_wait_CNT > 0
                                                      ,1.0 * ISNULL(ios.row_lock_wait_MS,0) / ios.row_lock_wait_CNT
                                                      ,0)
      -----------------------------------------
      ,ios_page_lock_CNT                         = ISNULL(ios.page_lock_CNT     ,0)
      ,ios_page_lock_wait_CNT                    = ISNULL(ios.page_lock_wait_CNT,0)
      ,ios_page_lock_wait_MS_CNT                 = ISNULL(ios.page_lock_wait_MS ,0)
      ,ios_page_lock_wait_AVG                    = IIF(ios_page_lock_wait_CNT > 0
                                                      ,1.0 * ISNULL(ios_page_lock_wait_MS_CNT,0) / ios_page_lock_wait_CNT
                                                      ,0)
      -----------------------------------------
      ,ios_lock_promotion_attempt_CNT            = ISNULL(ios.lock_promotion_attempt_CNT,0)
      ,ios_lock_promotion_CNT                    = ISNULL(ios.lock_promotion_CNT        ,0)
      ,ios_lock_promotion_fail_CNT               = ISNULL(ios.lock_promotion_attempt_CNT,0)
                                                 - ISNULL(ios.lock_promotion_CNT        ,0)
      -----------------------------------------
      ,ios_page_latch_wait_CNT                   = ISNULL(ios.page_latch_wait_CNT,0)
      ,ios_page_latch_wait_MS_CNT                = ISNULL(ios.page_latch_wait_MS ,0)
      ,ios_page_latch_wait_AVG                   = IIF(ios.page_latch_wait_CNT > 0
                                                      ,1.0 * ISNULL(ios.page_latch_wait_MS,0) / ios.page_latch_wait_CNT
                                                      ,0)
      -----------------------------------------
      ,ios_page_io_latch_wait_CNT                = ISNULL(ios.page_io_latch_wait_CNT,0)
      ,ios_page_io_latch_wait_MS_CNT             = ISNULL(ios.page_io_latch_wait_MS ,0)
      ,ios_page_io_latch_wait_AVG                = IIF(ios.page_io_latch_wait_CNT > 0
                                                      ,1.0 * ISNULL(ios.page_io_latch_wait_MS,0) / ios.page_io_latch_wait_CNT
                                                      ,0)
      -----------------------------------------
      ,ios_tree_page_latch_wait_CNT              = ISNULL(ios.tree_page_latch_wait_CNT,0)
      ,ios_tree_page_latch_wait_MS_CNT           = ISNULL(ios.tree_page_latch_wait_MS ,0)
      ,ios_tree_page_latch_wait_AVG              = IIF(ios.tree_page_latch_wait_CNT > 0
                                                      ,1.0 * ISNULL(ios.tree_page_latch_wait_MS,0) / ios.tree_page_latch_wait_CNT
                                                      ,0)
      -----------------------------------------
      ,ios_tree_page_io_latch_wait_CNT           = ISNULL(ios.tree_page_io_latch_wait_CNT,0)
      ,ios_tree_page_io_latch_wait_MS_CNT        = ISNULL(ios.tree_page_io_latch_wait_MS ,0)
      ,ios_tree_page_io_latch_wait_AVG           = IIF(ios.tree_page_io_latch_wait_CNT > 0
                                                      ,1.0 * ISNULL(ios.tree_page_io_latch_wait_MS,0) / ios.tree_page_io_latch_wait_CNT
                                                      ,0)
      --------------------------------------------------------------------------------------------------------
      -- sys.dm_db_index_operational_stats Lock & Wait Aggregates - includes ColStor & InMemory if found
      --------------------------------------------------------------------------------------------------------
      ,ios_Total_Lock_CNT                        = ISNULL(ios.row_lock_CNT       ,0)
                                                 + ISNULL(ios.page_lock_CNT      ,0)
                                                 + ISNULL(rgos.row_group_lock_CNT,0)
      -----------------------------------------
      ,ios_Total_lock_wait_CNT                   = ISNULL(ios.row_lock_wait_CNT       ,0)
                                                 + ISNULL(ios.page_lock_wait_CNT      ,0)
                                                 + ISNULL(rgos.row_group_lock_wait_CNT,0)
      -----------------------------------------
      ,ios_Total_lock_wait_MS_CNT                = ISNULL(ios.row_lock_wait_ms       ,0)
                                                 + ISNULL(ios.page_lock_wait_ms      ,0)
                                                 + ISNULL(rgos.row_group_lock_wait_MS,0)
      -----------------------------------------
      ,ios_Total_lock_wait_AVG                   = IIF(( ISNULL(ios.row_lock_wait_CNT       ,0)
                                                        +ISNULL(ios.page_lock_wait_CNT      ,0)
                                                        +ISNULL(rgos.row_group_lock_wait_CNT,0)
                                                       ) > 0
                                                      ,1.0 * ( ISNULL(ios.row_lock_wait_ms       ,0)
                                                              +ISNULL(ios.page_lock_wait_ms      ,0)
                                                              +ISNULL(rgos.row_group_lock_wait_MS,0)
                                                             )
                                                           / ( ISNULL(ios.row_lock_wait_CNT       ,0)
                                                              +ISNULL(ios.page_lock_wait_CNT      ,0)
                                                              +ISNULL(rgos.row_group_lock_wait_CNT,0)
                                                             )
                                                      ,0)
      -----------------------------------------
      ,ios_Total_wait_CNT                      = (  ISNULL(ios.row_lock_wait_CNT          ,0)
                                                  + ISNULL(ios.page_lock_wait_CNT         ,0)
                                                  + ISNULL(ios.page_latch_wait_CNT        ,0)
                                                  + ISNULL(ios.page_io_latch_wait_CNT     ,0)
                                                  + ISNULL(ios.tree_page_latch_wait_CNT   ,0)
                                                  + ISNULL(ios.tree_page_io_latch_wait_CNT,0)
                                                  + ISNULL(rgos.row_group_lock_wait_CNT   ,0)
                                                 )
      --------------------------------------
      ,ios_Total_wait_MS_CNT                   = (  ISNULL(ios.row_lock_wait_MS          ,0)
                                                  + ISNULL(ios.page_lock_wait_MS         ,0)
                                                  + ISNULL(ios.page_latch_wait_MS        ,0)
                                                  + ISNULL(ios.page_io_latch_wait_MS     ,0)
                                                  + ISNULL(ios.tree_page_latch_wait_MS   ,0)
                                                  + ISNULL(ios.tree_page_io_latch_wait_MS,0)
                                                  + ISNULL(rgos.row_group_lock_wait_MS   ,0)
                                                 )
      --------------------------------------
      ,ios_Total_wait_AVG                      = IIF((  ISNULL(ios.row_lock_wait_CNT          ,0)
                                                      + ISNULL(ios.page_lock_wait_CNT         ,0)
                                                      + ISNULL(ios.page_latch_wait_CNT        ,0)
                                                      + ISNULL(ios.page_io_latch_wait_CNT     ,0)
                                                      + ISNULL(ios.tree_page_latch_wait_CNT   ,0)
                                                      + ISNULL(ios.tree_page_io_latch_wait_CNT,0)
                                                      + ISNULL(rgos.row_group_lock_wait_CNT   ,0)
                                                      ) > 0
                                                     ,1.0*( ISNULL(ios.row_lock_wait_MS           ,0)
                                                          + ISNULL(ios.page_lock_wait_MS          ,0)
                                                          + ISNULL(ios.page_latch_wait_MS         ,0)
                                                          + ISNULL(ios.page_io_latch_wait_MS      ,0)
                                                          + ISNULL(ios.tree_page_latch_wait_MS    ,0)
                                                          + ISNULL(ios.tree_page_io_latch_wait_MS ,0)
                                                          + ISNULL(rgos.row_group_lock_wait_MS   ,0)
                                                          )/
                                                          ( ISNULL(ios.row_lock_wait_CNT          ,0)
                                                          + ISNULL(ios.page_lock_wait_CNT         ,0)
                                                          + ISNULL(ios.page_latch_wait_CNT        ,0)
                                                          + ISNULL(ios.page_io_latch_wait_CNT     ,0)
                                                          + ISNULL(ios.tree_page_latch_wait_CNT   ,0)
                                                          + ISNULL(ios.tree_page_io_latch_wait_CNT,0)
                                                          + ISNULL(rgos.row_group_lock_wait_CNT   ,0)
                                                          )
                                                     ,0)

      -------------------------------------------------------------------------------------------------------------------------------------
      -- sys.dm_db_xtp_object_stats
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_row_insert_attempts_CNT          = ISNULL(xis.row_insert_attempts         ,0)
      ,xtp_row_update_attempts_CNT          = ISNULL(xis.row_update_attempts         ,0)
      ,xtp_row_delete_attempts_CNT          = ISNULL(xis.row_delete_attempts         ,0)
      ,xtp_write_conflicts_CNT              = ISNULL(xis.write_conflicts             ,0)
      ,xtp_unique_constraint_violations_CNT = ISNULL(xis.unique_constraint_violations,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- sys.dm_db_xtp_index_stats
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_scans_started_CNT                = ISNULL(xis.scans_started,0)
      ,xtp_scans_retries_CNT                = ISNULL(xis.scans_retries,0)                 -- rolled up to TOTAL
      ,xtp_rows_returned_CNT                = ISNULL(xis.rows_returned,0)
      ,xtp_rows_touched_CNT                 = ISNULL(xis.rows_touched ,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- sys.dm_db_xtp_Nonclustered_index_stats
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_delta_pages_CNT                  = ISNULL(xis.delta_pages                   ,0)
      ,xtp_leaf_pages_CNT                   = ISNULL(xis.leaf_pages                    ,0)
      ,xtp_page_update_CNT                  = ISNULL(xis.page_update_count             ,0)
      ,xtp_page_update_retry_CNT            = ISNULL(xis.page_update_retry_count       ,0)
      ,xtp_page_consolidation_CNT           = ISNULL(xis.page_consolidation_count      ,0)
      ,xtp_page_consolidation_retry_CNT     = ISNULL(xis.page_consolidation_retry_count,0)
      ,xtp_page_split_CNT                   = ISNULL(xis.page_split_count              ,0)
      ,xtp_page_split_retry_CNT             = ISNULL(xis.page_split_retry_count        ,0)
      ,xtp_key_split_CNT                    = ISNULL(xis.key_split_count               ,0)
      ,xtp_key_split_retry_CNT              = ISNULL(xis.key_split_retry_count         ,0)
      ,xtp_page_merge_CNT                   = ISNULL(xis.page_merge_count              ,0)
      ,xtp_page_merge_retry_CNT             = ISNULL(xis.page_merge_retry_count        ,0)
      ,xtp_key_merge_CNT                    = ISNULL(xis.key_merge_count               ,0)
      ,xtp_key_merge_retry_CNT              = ISNULL(xis.key_merge_retry_count         ,0)
      ,xtp_uses_key_normalization           = ISNULL(xis.uses_key_normalization        ,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- sys.dm_db_xtp_memory_consumers
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_allocated_bytes_CNT              = ISNULL(xis.allocated_bytes ,0)
      ,xtp_used_bytes_CNT                   = ISNULL(xis.used_bytes      ,0)
      ,xtp_allocation_CNT                   = ISNULL(xis.allocation_count,0)
      ------------------------------------------------------------------------------
      ,xtp_Total_Contacts_CNT               = ISNULL(xis.scans_started           ,0)
                                            + ISNULL(xis.row_insert_attempts     ,0)
                                            + ISNULL(xis.row_update_attempts     ,0)
                                            + ISNULL(xis.row_delete_attempts     ,0)
                                            + ISNULL(xis.delta_pages             ,0)
                                            + ISNULL(xis.page_update_count       ,0)
      ,xtp_Total_read_CNT                   = ISNULL(xis.scans_started           ,0)
      ,xtp_Total_write_CNT                  = ISNULL(xis.row_insert_attempts     ,0)
                                            + ISNULL(xis.row_update_attempts     ,0)
                                            + ISNULL(xis.row_delete_attempts     ,0)
                                            + ISNULL(xis.delta_pages             ,0)
                                            + ISNULL(xis.page_update_count       ,0)
      ,xtp_Total_insert_CNT                 = ISNULL(xis.row_insert_attempts     ,0)
      ,xtp_Total_update_CNT                 = ISNULL(xis.row_update_attempts     ,0)
                                            + ISNULL(xis.page_update_count       ,0)
      ,xtp_Total_delete_CNT                 = ISNULL(xis.row_delete_attempts     ,0)
      ,xtp_Total_Split_CNT                  = ISNULL(xis.page_split_count        ,0)
                                            + ISNULL(xis.key_split_count         ,0)
      ,xtp_Total_merge_CNT                  = ISNULL(xis.page_merge_count        ,0)
                                            + ISNULL(xis.key_merge_count         ,0)
--<BS> review if can be included            + ISNULL(xis.page_consolidation_count,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- sys.dm_db_column_store_row_group_operational_stats
      -------------------------------------------------------------------------------------------------------------------------------------
      ,cs_partition_CNT                     = ISNULL(rgos.partition_CNT          ,0)
      ,cs_row_group_CNT                     = ISNULL(rgos.row_group_CNT          ,0)
      ,cs_index_scan_CNT                    = ISNULL(rgos.index_scan_CNT         ,0)
      ,cs_scan_CNT                          = ISNULL(rgos.scan_CNT               ,0)
      ,cs_delete_buffer_scan_CNT            = ISNULL(rgos.delete_buffer_scan_CNT ,0)
      ,cs_row_group_lock_CNT                = ISNULL(rgos.row_group_lock_CNT     ,0)
      ,cs_row_group_lock_wait_CNT           = ISNULL(rgos.row_group_lock_wait_CNT,0)
      ,cs_row_group_lock_wait_MS_CNT        = ISNULL(rgos.row_group_lock_wait_MS ,0)
      ,cs_row_group_lock_wait_AVG           = IIF(rgos.row_group_lock_wait_CNT > 0
                                                 ,1.0 * ISNULL(rgos.row_group_lock_wait_MS,0) / rgos.row_group_lock_wait_CNT
                                                 ,0)
      ,cs_returned_row_CNT                  = ISNULL(rgos.returned_row_CNT       ,0)
      ,cs_returned_aggregate_CNT            = ISNULL(rgos.returned_aggregate_CNT ,0)
      ,cs_returned_group_CNT                = ISNULL(rgos.returned_group_CNT     ,0)
      ,cs_input_groupby_row_CNT             = ISNULL(rgos.input_groupby_row_CNT  ,0)

      /************************************************************************************************************************************/
      -- Operational Metrics Aggregates
      ---------------------------------------------------------------------------------------
      ,ops_Total_contacts_CNT         =   ISNULL(ios.leaf_insert_CNT              ,0)
                                        + ISNULL(ios.leaf_delete_CNT              ,0)
                                        + ISNULL(ios.leaf_update_CNT              ,0)
                                        + ISNULL(ios.leaf_ghost_CNT               ,0)
                                        ---------------------------------
                                        + ISNULL(ios.nonleaf_insert_CNT           ,0)
                                        + ISNULL(ios.nonleaf_delete_CNT           ,0)
                                        + ISNULL(ios.nonleaf_update_CNT           ,0)
                                        ---------------------------------
                                        + ISNULL(ios.lob_orphan_create_CNT        ,0)
                                        + ISNULL(ios.column_value_push_off_row_CNT,0)
                                        + ISNULL(ios.column_value_pull_in_row_CNT ,0)
                                        ---------------------------------
                                        + ISNULL(ios.range_scan_CNT               ,0)
                                        + ISNULL(ios.singleton_lookup_CNT         ,0)
                                        + ISNULL(ios.forwarded_fetch_CNT          ,0)
                                        + ISNULL(ios.lob_fetch_in_pages           ,0)
                                        ---------------------------------
                                        + ISNULL(xis.scans_started                ,0) -- InMemory
                                        + ISNULL(xis.row_insert_attempts          ,0) -- InMemory
                                        + ISNULL(xis.row_update_attempts          ,0) -- InMemory
                                        + ISNULL(xis.row_delete_attempts          ,0) -- InMemory
                                        + ISNULL(xis.delta_pages                  ,0) -- InMemory
                                        + ISNULL(xis.page_update_count            ,0) -- InMemory
                                        ---------------------------------
                                        + ISNULL(rgos.scan_CNT                    ,0) -- Columnstore
                                        + ISNULL(rgos.delete_buffer_scan_CNT      ,0) -- Columnstore
                                        + ISNULL(rgos.row_group_lock_CNT          ,0) -- Columnstore
      --------------------------------
      ,ops_Total_read_CNT             =   ISNULL(ios.range_scan_CNT               ,0)
                                        + ISNULL(ios.singleton_lookup_CNT         ,0)
                                        + ISNULL(ios.forwarded_fetch_CNT          ,0)
                                        + ISNULL(ios.lob_fetch_in_pages           ,0)
                                        ---------------------------------
                                        + ISNULL(xis.scans_started                ,0) -- InMemory
                                        ---------------------------------
                                        + ISNULL(rgos.index_scan_CNT              ,0) -- Columnstore
                                        + ISNULL(rgos.scan_CNT                    ,0) -- Columnstore
                                        + ISNULL(rgos.delete_buffer_scan_CNT      ,0) -- Columnstore
      --------------------------------
      ,ops_Total_write_CNT            =   ISNULL(ios.leaf_insert_CNT              ,0)
                                        + ISNULL(ios.leaf_delete_CNT              ,0)
                                        + ISNULL(ios.leaf_update_CNT              ,0)
                                        + ISNULL(ios.leaf_ghost_CNT               ,0)
                                        ---------------------------------
                                        + ISNULL(ios.nonleaf_insert_CNT           ,0)
                                        + ISNULL(ios.nonleaf_delete_CNT           ,0)
                                        + ISNULL(ios.nonleaf_update_CNT           ,0)
                                        ---------------------------------
                                        + ISNULL(ios.lob_orphan_create_CNT        ,0)
                                        + ISNULL(ios.column_value_push_off_row_CNT,0)
                                        + ISNULL(ios.column_value_pull_in_row_CNT ,0)
                                        ---------------------------------
                                        + ISNULL(xis.row_insert_attempts          ,0) -- InMemory
                                        + ISNULL(xis.row_update_attempts          ,0) -- InMemory
                                        + ISNULL(xis.row_delete_attempts          ,0) -- InMemory
                                        + ISNULL(xis.delta_pages                  ,0) -- InMemory
                                        + ISNULL(xis.page_update_count            ,0) -- InMemory
                                        ---------------------------------
                                        + ISNULL(rgos.row_group_lock_CNT          ,0) -- Columnstore
      --------------------------------
      ,ops_Total_insert_CNT           =   ISNULL(ios.leaf_insert_CNT              ,0)
                                        + ISNULL(ios.nonleaf_insert_CNT           ,0)
                                        ---------------------------------
                                        + ISNULL(xis.row_insert_attempts          ,0) -- InMemory
      --------------------------------
      ,ops_Total_update_CNT           =   ISNULL(ios.leaf_update_CNT              ,0)
                                        + ISNULL(ios.nonleaf_update_CNT           ,0)
                                        ---------------------------------
                                        + ISNULL(xis.row_update_attempts          ,0) -- InMemory
                                        + ISNULL(xis.page_update_count            ,0) -- InMemory
      --------------------------------
      ,ops_Total_delete_CNT           =   ISNULL(ios.leaf_delete_CNT              ,0)
                                        + ISNULL(ios.nonleaf_delete_CNT           ,0)
                                        + ISNULL(ios.leaf_ghost_CNT               ,0)
                                        ---------------------------------
                                        + ISNULL(xis.row_delete_attempts          ,0) -- InMemory
      --------------------------------
      ,ops_Total_scan_cnt             =   ISNULL(ios.range_scan_CNT               ,0)
                                        + ISNULL(xis.scans_started                ,0) -- InMemory
                                        + ISNULL(rgos.index_scan_CNT              ,0) -- Columnstore
      --------------------------------
      ,ops_Total_scan_retries_cnt     =   ISNULL(xis.scans_retries                ,0)
      --------------------------------
      ,ops_Total_page_split_CNT       =   ISNULL(ios.leaf_alloc_page_split_CNT    ,0)
                                        + ISNULL(ios.nonleaf_alloc_page_split_CNT ,0)
                                        + ISNULL(ios.column_value_push_off_row_CNT,0)
                                        ---------------------------------
                                        + ISNULL(xis.page_split_count             ,0) -- InMemory
                                        + ISNULL(xis.key_split_count              ,0) -- InMemory
      --------------------------------
      ,ops_Total_page_merge_CNT       =   ISNULL(ios.leaf_page_merge_CNT          ,0)
                                        + ISNULL(ios.nonleaf_page_merge_CNT       ,0)
                                        + ISNULL(ios.column_value_pull_in_row_CNT ,0)
                                        ---------------------------------
                                        + ISNULL(xis.page_merge_count             ,0) -- InMemory
                                        + ISNULL(xis.key_merge_count              ,0) -- InMemory
--<BS> review if can be included        + ISNULL(xis.page_consolidation_count     ,0) -- InMemory
      --------------------------------
      ,reserved_page_CNT              = IIF(  ISNULL(xis.allocated_bytes,0) / 8192.0    -- InMemory
                                            > ISNULL(tgt.reserved_page_CNT,0)
                                           ,ISNULL(xis.allocated_bytes,0) / 8192.0      -- InMemory
                                           ,ISNULL(tgt.reserved_page_CNT,0))
      --------------------------------
      ,used_page_CNT                  = IIF(  CEILING(ISNULL(xis.used_bytes,0) / 8192.0) -- InMemory
                                            > ISNULL(tgt.used_page_CNT,0)
                                           ,CEILING(ISNULL(xis.used_bytes,0) / 8192.0)  -- InMemory
                                           ,ISNULL(tgt.used_page_CNT,0))
      --------------------------------
      ,buffer_Total_KB_CNT            = IIF(  ISNULL(xis.allocated_bytes,0) / 1024.0    -- InMemory
                                            > ISNULL(tgt.buffer_Total_KB_CNT,0)
                                           ,ISNULL(xis.allocated_bytes,0) / 1024.0      -- InMemory
                                           ,ISNULL(tgt.buffer_Total_KB_CNT,0))
      --------------------------------
      ,buffer_free_KB_CNT             = IIF(  (ISNULL(xis.allocated_bytes,0) - ISNULL(xis.used_bytes,0)) / 1024.0 -- InMemory
                                            > ISNULL(tgt.buffer_free_KB_CNT,0)
                                           ,(ISNULL(xis.allocated_bytes,0) - ISNULL(xis.used_bytes,0)) / 1024.0   -- InMemory
                                           ,ISNULL(tgt.buffer_free_KB_CNT,0))
  FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters            AS sp
 CROSS
  JOIN tempdb.dbo.SQLXL_Index_Compilation                       AS tgt
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_dm_db_index_operational_stats AS ios
    ON tgt.database_id   = ios.database_id
   AND tgt.object_id     = ios.object_id
   AND tgt.index_id      = ios.index_id
   AND TRY_CAST(tgt.type AS INT) IS NOT NULL -- avoids overlapping index IDs for FKC, MIX
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_dm_db_index_usage_stats       AS ius
    ON tgt.database_id   = ius.database_id
   AND tgt.object_id     = ius.object_id
   AND tgt.index_id      = ius.index_id
   AND TRY_CAST(tgt.type AS INT) IS NOT NULL -- avoids overlapping index IDs for FKC, MIX
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_dm_db_missing_index_details   AS mix
    ON tgt.database_id   = mix.database_id
   AND tgt.object_id     = mix.object_id
   AND tgt.index_id      = mix.index_handle
   AND tgt.type          = N'M'              -- avoids overlapping index IDs for FKC, IDX
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_dm_db_xtp_index_stats         AS xis
    ON tgt.database_id   = xis.database_id
   AND tgt.object_id     = xis.object_id
   AND tgt.index_id      = xis.index_id
   AND tgt.type          = xis.type
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats AS rgos
    ON tgt.database_id   = rgos.database_id
   AND tgt.object_id     = rgos.object_id
   AND tgt.index_id      = rgos.index_id
   AND tgt.type         IN (N'5',N'6')       -- avoids overlapping index IDs for FKC, IDX
 WHERE tgt.rec_type = N'I'
OPTION (FORCE ORDER,MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated metrics - Usage, Operational, missing index, row group operational'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update indexes with WRITEs and Zero READs
-- Special case - writes with no reads
-- Final partition count update
/******************************************************************************************************************************************/
UPDATE tempdb.dbo.SQLXL_Index_Compilation
   SET
       ius_no_read_user_updates_CNT = IIF(ius_user_updates_CNT > 0 AND ius_user_read_CNT  = 0,ius_user_updates_CNT,0)
      ,ops_no_read_Total_write_CNT  = IIF(ops_Total_write_CNT  > 0 AND ops_Total_read_CNT = 0,ops_Total_write_CNT ,0)
      ,partition_CNT                     = CASE WHEN ios_partition_cnt > 0 THEN ios_partition_cnt
                                                WHEN partition_cnt     > 0 THEN partition_cnt
                                                WHEN cs_partition_cnt  > 0 THEN cs_partition_cnt
                                                ELSE 0
                                           END
  FROM tempdb.dbo.SQLXL_Index_Compilation
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated indexes with WRITEs and Zero READs, partition counts'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update Parent partition information, using HEAP or CLUSTERED values
-- Update Parent records in tempdb.dbo.SQLXL_Index_Compilation using HEAP or CLUSTERED values
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/

       partition_CNT                     = CASE WHEN hoc.cs_partition_cnt  > 0 THEN hoc.cs_partition_cnt
                                                WHEN hoc.ios_partition_cnt > 0 THEN hoc.ios_partition_cnt
                                                WHEN hoc.partition_cnt     > 0 THEN hoc.partition_cnt
                                                ELSE 0
                                           END
      ,partition_Column_ID               = hoc.partition_Column_ID
      ,partition_Column_Name             = hoc.partition_Column_Name
      ,partition_schemes_function_id     = hoc.partition_schemes_function_id
      ,partition_schemes_name            = hoc.partition_schemes_name
      ,partition_function_id             = hoc.partition_function_id
      ,partition_function_name           = hoc.partition_function_name
      ,partition_function_type           = hoc.partition_function_type
      ,partition_function_type_desc      = hoc.partition_function_type_desc
      ,partition_function_fanout         = hoc.partition_function_fanout
      ,partition_function_boundary_value = hoc.partition_function_boundary_value
      ,partition_function_is_system      = hoc.partition_function_is_system
      ,partition_function_create_DTTM    = hoc.partition_function_create_DTTM
      ,partition_function_modify_DTTM    = hoc.partition_function_modify_DTTM
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type NOT IN (N'A',N'D',N'I') -- All, Database, Index
       ) AS tgt
  JOIN tempdb.dbo.SQLXL_Index_Compilation  AS hoc
    ON tgt.database_id           = hoc.database_id
   AND tgt.object_id             = hoc.object_id
   AND hoc.type                 IN (N'0',N'1',N'5') -- HEAP, CLUSTERED, CLUSTERED COLUMNSTORE
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated Parent partition information, using HEAP or CLUSTERED values'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update tempdb.dbo.SQLXL_Index_Compilation - additional keys don't improve selectivity much (1 out of 3 ain't bad)
-- identify indexes without activity for period
/******************************************************************************************************************************************/
IF object_id(N'tempdb.dbo.SQLXL_Index_additional_key_selectivity') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_additional_key_selectivity;

SET ANSI_WARNINGS ON;

SELECT dv1.database_id
      ,dv1.object_id
      ,dv1.index_ID
      ,dlt    = CAST(dv1.Row_ID AS NVARCHAR(20))+N'('
               +CAST(CAST(100.0 * dv1.All_Density / dv0.All_Density AS TINYINT) AS NVARCHAR(20)) -- /zero handled by JOIN clause below
               +N'%)'
      ,row_id = ROW_NUMBER() OVER (PARTITION BY dv1.database_id
                                            ,dv1.object_id
                                            ,dv1.index_ID
                                    ORDER BY dv1.Row_ID
                               )
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON;
SELECT dv1.database_id
      ,dv1.object_id
      ,dv1.index_ID
      ,dlt    = CAST(dv1.Row_ID AS NVARCHAR(20))+N'('
               +CAST(CAST(100.0 * dv1.All_Density / dv0.All_Density AS TINYINT) AS NVARCHAR(20))
               +N'%)'
      ,row_id = ROW_NUMBER() OVER (PARTITION BY dv1.database_id
                                            ,dv1.object_id
                                            ,dv1.index_ID
                                    ORDER BY dv1.Row_ID
                               )
--*/
  INTO tempdb.dbo.SQLXL_Index_additional_key_selectivity
  FROM tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector AS dv1
  JOIN tempdb.dbo.SQLXL_Index_sys_index_columns                AS ic
    ON dv1.database_id  = ic.database_id
   AND dv1.object_id    = ic.object_id
   AND dv1.index_ID     = ic.index_ID
   AND dv1.Row_ID       = ic.key_column_sequence
   AND 0                = ic.is_included_column  -- only KEY index elements are to be compared
  JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector AS dv0
    ON dv1.database_id  = dv0.database_id
   AND dv1.object_id    = dv0.object_id
   AND dv1.index_ID     = dv0.index_ID
   AND (dv1.Row_ID - 1) = dv0.row_id
   AND 0.0              < dv0.All_Density
 WHERE 1 = 1
   AND dv1.All_Density / dv0.All_Density > 1.0 / 3.0
OPTION (MAXDOP 1)

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Update index records - additional keys don''t improve selectivity - support'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_additional_key_selectivity
    ON tempdb.dbo.SQLXL_Index_additional_key_selectivity
      (database_id
      ,object_id
      ,index_ID
      ,row_id
      ) WITH (DATA_COMPRESSION = PAGE)

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Indexed tempdb.dbo.SQLXL_Index_additional_key_selectivity'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update indexes without activity and low key additional selectivity
/******************************************************************************************************************************************/
SET ANSI_WARNINGS ON;

UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON;
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/

       is_activity_for_period = IIF(   ISNULL(tgt.ius_user_Total_CNT    ,0) > 0
                                    OR ISNULL(tgt.ops_Total_contacts_CNT,0) > 0
                                   ,1
                                   ,0)
      ,low_selectivity_additional_keys
       = (SELECT CASE WHEN d.row_id     = 1 THEN             N'Key Selectivity LO > '
                      WHEN d.row_id % 6 = 0 THEN NCHAR(10) + N' > '
                      ELSE N' '
                  END
                + d.dlt
             FROM tempdb.dbo.SQLXL_Index_additional_key_selectivity AS d
            WHERE tgt.database_id                               = d.database_id
              AND tgt.object_id                                 = d.object_id
              AND tgt.index_ID                                  = d.index_ID
            ORDER BY
                  d.row_id
              FOR XML PATH(N''),TYPE
           ).value('(./text())[1]','NVARCHAR(4000)')
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
 WHERE tgt.rec_type                  = N'I'
   AND tgt.type                     IN (N'1',N'2')
   AND tgt.obj_type_short_label NOT IN (N'HST', N'IT')
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Updated indexes without activity and low key additional selectivity'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

SET ANSI_WARNINGS OFF;

/******************************************************************************************************************************************/
-- Identify indexes, Primary Keys, Foreign Keys that are "system named"
/******************************************************************************************************************************************/
UPDATE tgt
   SET is_system_named = 1

/*** LOCAL TESTING ***
SELECT tgt.database_name
      ,tgt.obj_name
      ,tgt.obj_name
      ,name
      ,object_id
      ,is_system_named
--*/

  FROM (SELECT * FROM tempdb.dbo.SQLXL_Index_Compilation WHERE rec_type = N'I') AS tgt
 WHERE (   (   (    LEFT(name,2) = N'PK'
                AND CHARINDEX(N'__',name, 3) = 3
                AND (   CHARINDEX(N'__',REVERSE(name),1) = 9
                     OR CHARINDEX(N'__',REVERSE(name),1) = 17
                    )
               )
            OR (    LEFT(name,2) = N'FK'
                AND CHARINDEX(N'__',name, 3) = 3
                AND CHARINDEX(N'__',name,14) = 14
                AND CHARINDEX(N'__',name,21) = 21
               )
           )
        OR is_system_named = 1
       )
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Identified "system named" indexes, Primary Keys, Foreign Keys'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Check if Table has Check Constraints using SQL procedures, functions, or methods
/******************************************************************************************************************************************/
SET ANSI_WARNINGS ON;

UPDATE tgt
   SET constraints = ISNULL(tgt.constraints+NCHAR(10),N'')+chk.check_constraints
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type NOT IN (N'A',N'D',N'I')
       ) AS tgt
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Column-level Check Constraints
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT cc.database_id
              ,cc.object_id
              ,(----------------------------------------------------------------------------------------------------------------------------
                -- check constraints for this column - full definitions.
                -- FOR XML PATH used since there can be multiple constraints on a column. STUFF applied above
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT NCHAR(10)+QUOTENAME(LTRIM(RTRIM(cx.name)))
                      +ISNULL( IIF(cx.uses_sql_ftn            = 1,N' ,*FTN*'       ,N'')
                              +IIF(cx.uses_sql_proc           = 1,N' ,*PROC*'      ,N'')
                              +IIF(cx.uses_sql_mthd           = 1,N' ,*MTHD*'      ,N'')
                              +IIF(cx.is_disabled             = 1,N' ,DSBLD'       ,N'')
                              +IIF(cx.is_not_for_replication  = 1,N' ,NOT_REPL'    ,N'')
                              +IIF(cx.is_not_trusted          = 1,N' ,NOT_TRUSTED' ,N'')
                              +IIF(cx.is_system_named         = 1,N' ,SYS_NM'      ,N'')
                              +IIF(cx.uses_database_collation = 0,N' ,NON-DB_COLL' ,N'')
                              +IIF(cxo.is_published           = 1,N' ,PBLSHD'      ,N'')
                              +IIF(cxo.is_schema_published    = 1,N' ,SCH_PBLSHD'  ,N'')
                              ,N'')
                      +N' '+LTRIM(RTRIM(cx.definition))
                  FROM tempdb.dbo.SQLXL_Index_sys_check_constraints AS cx
                  JOIN tempdb.dbo.SQLXL_Index_sys_objects           AS cxo
                    ON cx.database_id                           = cxo.database_id
                   AND cx.object_id                             = cxo.object_id
                 WHERE cc.database_id                           = cx.database_id
                   AND cc.object_id                             = cx.object_id
                   FOR XML PATH (N''),TYPE
               ).value('(./text())[1]','NVARCHAR(4000)') AS check_constraints
          FROM (----------------------------------------------------------------------------------------------------------------------------
                -- list of columns with check constraints - get one record per column in case of multiple constraints
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT cc.database_id
                      ,cc.object_id
                  FROM tempdb.dbo.SQLXL_Index_sys_check_constraints AS cc
                 WHERE uses_sql_proc       = 1
                    OR uses_sql_ftn        = 1
                    OR uses_sql_mthd       = 1
                 GROUP BY
                       cc.database_id
                      ,cc.object_id
               ) cc
       )              AS chk
    ON tgt.database_id = chk.database_id
   AND tgt.object_id   = chk.object_id
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Check if Table has Check Constraints using SQL procedures, functions, or methods'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Check if Table has Computed Columns using SQL procedures, functions, or methods
/******************************************************************************************************************************************/
UPDATE tgt
   SET constraints = ISNULL(tgt.constraints+NCHAR(10),N'')+chk.computed_column
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type NOT IN (N'A',N'D',N'I')
       ) AS tgt
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- Computed columns
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT cc.database_id
              ,cc.object_id
              ,(----------------------------------------------------------------------------------------------------------------------------
                -- check constraints for this column - full definitions.
                -- FOR XML PATH used since there can be multiple constraints on a column. STUFF applied above
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT NCHAR(10)
                      +QUOTENAME(cx.name)+N' CCOL:'
                      +IIF(cx.uses_sql_proc = 1,N' *PROCEDURE*'  ,N'')
                      +IIF(cx.uses_sql_ftn  = 1,N' *FUNCTION*'  ,N'')
                      +IIF(cx.uses_sql_mthd = 1,N' *SQL METHOD*',N'')
                      +N' '+cx.definition
                      +IIF(cx.is_persisted = 0 OR cx.uses_database_collation = 0
                          ,NCHAR(10)
                          +STUFF(IIF(cx.is_persisted = 0           ,N' NOT PERSISTED'  ,N'')
                                +IIF(cx.uses_database_collation = 0,N' NOT DB COLLATED',N'')
                            ,1,1,N'')
                          ,N'')
                  FROM tempdb.dbo.SQLXL_Index_sys_columns        AS cx
                  JOIN tempdb.dbo.SQLXL_Index_sys_objects        AS cxo
                    ON cx.database_id                           = cxo.database_id
                   AND cx.object_id                             = cxo.object_id
                 WHERE cc.database_id                           = cx.database_id
                   AND cc.object_id                             = cx.object_id
                   FOR XML PATH (N''),TYPE
               ).value('(./text())[1]','NVARCHAR(4000)') AS computed_column
          FROM (----------------------------------------------------------------------------------------------------------------------------
                -- list of columns with check constraints - get one record per column in case of multiple constraints
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT cc.database_id
                      ,cc.object_id
                  FROM tempdb.dbo.SQLXL_Index_sys_columns AS cc
                 WHERE cc.definition IS NOT NULL
                   AND (   uses_sql_proc       = 1
                        OR uses_sql_ftn        = 1
                        OR uses_sql_mthd       = 1
                       )
                 GROUP BY
                       cc.database_id
                      ,cc.object_id
               ) cc
       )               AS chk
    ON tgt.database_id  = chk.database_id
   AND tgt.object_id    = chk.object_id
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Check if Table has Computed Columns using SQL procedures, functions, or methods'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Consolidate Key Constraints
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT
--*/
       constraints = STUFF((SELECT NCHAR(10)+QUOTENAME(kx.type)+N' '+kx.name
                              FROM tempdb.dbo.SQLXL_Index_sys_key_constraints AS kx
                             WHERE tgt.database_id                           = kx.database_id
                               AND tgt.object_id                             = kx.parent_object_id
                               AND tgt.index_id                              = kx.unique_index_id
                               FOR XML PATH(N''), TYPE
                           ).value('(./text())[1]','NVARCHAR(4000)')
                          ,1,1,N'')
  FROM (SELECT * FROM tempdb.dbo.SQLXL_Index_Compilation WHERE rec_type = N'I') AS tgt
  JOIN (
        SELECT database_id
              ,parent_object_id                         -- target table object id
              ,unique_index_id
          FROM tempdb.dbo.SQLXL_Index_sys_key_constraints
         GROUP BY
               database_id
              ,parent_object_id
              ,unique_index_id
       )                   AS kc
    ON tgt.database_id      = kc.database_id
   AND tgt.object_id        = kc.parent_object_id
   AND tgt.index_id         = kc.unique_index_id
   AND TRY_CAST(tgt.type AS INT) > 0
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Consolidated Key Constraints'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Incorporate Column Constraints
/******************************************************************************************************************************************/
UPDATE tgt
   SET
       constraints = ISNULL(constraints + NCHAR(10),N'') + STUFF(c.txt,1,1,N'') -- NOTE: after "*/" this must be new line, else syntax error
  FROM (SELECT * FROM tempdb.dbo.SQLXL_Index_Compilation WHERE rec_type = N'I') AS tgt
  JOIN (
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
          JOIN tempdb.dbo.SQLXL_Index_column            AS c
            ON ic.database_id                          = c.database_id
           AND ic.object_id                            = c.object_id
           AND ic.Column_ID                         = c.column_id
         WHERE c.default_constraint         IS NOT NULL
            OR c.check_constraints          IS NOT NULL
            OR c.computed_column_definition IS NOT NULL
         GROUP BY
               ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
       ) ic
     ON ic.database_id      = tgt.database_id
    AND ic.object_id        = tgt.object_id
    AND ic.index_id         = tgt.index_id
    AND ic.type             = tgt.type
 CROSS
 APPLY (SELECT(SELECT ISNULL(NCHAR(10)+QUOTENAME(c2.name)+N' DEF: ' +c2.default_constraint,N'')
                     +ISNULL(NCHAR(10)+QUOTENAME(c2.name)+N' CHK: ' +c2.check_constraints ,N'')
                     +ISNULL(NCHAR(10)+QUOTENAME(c2.name)+N' CCOL: '+c2.computed_column_definition,N'')
                 FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic2
                 JOIN tempdb.dbo.SQLXL_Index_column            AS c2
                   ON ic2.database_id                      = c2.database_id
                  AND ic2.object_id                        = c2.object_id
                  AND ic2.Column_ID                        = c2.column_id
                WHERE ic.database_id      = ic2.database_id
                  AND ic.object_id        = ic2.object_id
                  AND ic.index_id         = ic2.index_id
                  AND ic.type             = ic2.type
                  FOR XML PATH(N''), TYPE
              ).value('(./text())[1]','NVARCHAR(4000)')
       ) AS c(txt)
 WHERE tgt.rec_type = N'I'
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Incorporate Column Constraints'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Incorporate Parent Constraints
/******************************************************************************************************************************************/
UPDATE tgt
   SET
       constraints = ISNULL(constraints+NCHAR(10),N'') + STUFF(chk.chkcon,1,1,N'')
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- table-level Check Constraints
        ------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON
--*/
        SELECT cc.database_id
              ,cc.parent_object_id
              ,(----------------------------------------------------------------------------------------------------------------------------
                -- get check constraint names for this table. [STUFF] function applied above
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT NCHAR(10)+cx.typ +N':'
                      +NCHAR(32)+QUOTENAME(LTRIM(RTRIM(cx.name)))
                      +ISNULL( IIF(cx.definition LIKE '%~].~[%' ESCAPE '~',N' ,*FTN*',N'')
                              +IIF(cx.is_disabled                    = 1,N' ,DISABLED'    ,N'')
                              +IIF(cx.is_not_for_replication         = 1,N' ,NOT_REPL'    ,N'')
                              +IIF(cx.is_not_trusted                 = 1,N' ,NOT TRUSTED' ,N'')
                              +IIF(cx.is_system_named                = 1,N' ,SYSTEM_NAMED',N'')
                              +IIF(cx.uses_database_collation        = 0,N' ,NON-DB_COLL' ,N'')
                              +IIF(cx.delete_referential_action_desc IS NOT NULL
                                                                        ,N' ,DEL_REF '+cx.delete_referential_action_desc,N'')
                              +IIF(cxo.is_published                  = 1,N' ,PBLSHD'      ,N'')
                              +IIF(cxo.is_schema_published           = 1,N' ,SCH_PBLSHD'  ,N'')
                              ,N'')
                      +N' '+LTRIM(RTRIM(cx.definition))
                  FROM (
                        SELECT typ = N'CHK'
                              ,database_id
                              ,parent_object_id
                              ,object_id
                              ,type
                              ,type_desc
                              ,name
                              ,parent_column_id
                              ,definition
                              ,is_disabled
                              ,is_not_for_replication
                              ,is_not_trusted
                              ,delete_referential_action      = CONVERT(TINYINT,NULL)
                              ,delete_referential_action_desc = CONVERT(SYSNAME,NULL)
                              ,uses_database_collation
                              ,is_system_named
                          FROM tempdb.dbo.SQLXL_Index_sys_check_constraints AS cx
                         WHERE cc.database_id                              = cx.database_id
                           AND cc.parent_object_id                         = cx.parent_object_id
                           AND 0                                           = cx.parent_column_id
                         UNION ALL
                        SELECT typ = N'EDG'
                              ,database_id
                              ,parent_object_id
                              ,object_id
                              ,type
                              ,type_desc
                              ,name
                              ,parent_column_id        = NULL
                              ,definition              = NULL
                              ,is_disabled
                              ,is_not_for_replication  = NULL
                              ,is_not_trusted
                              ,delete_referential_action
                              ,delete_referential_action_desc
                              ,uses_database_collation = NULL
                              ,is_system_named
                          FROM tempdb.dbo.SQLXL_Index_sys_edge_constraints  AS cx
                         WHERE cc.database_id                              = cx.database_id
                           AND cc.parent_object_id                         = cx.parent_object_id
                       ) AS cx
                  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS cxo
                    ON cx.database_id                    = cxo.database_id
                   AND cx.object_id                      = cxo.object_id
                 ORDER BY cx.object_id
                   FOR XML PATH (N''), TYPE
               ).value('(./text())[1]','NVARCHAR(4000)')
          FROM (----------------------------------------------------------------------------------------------------------------------------
                -- list of tables (parent objects) with check constraints
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT DISTINCT
                       cc.database_id
                      ,cc.parent_object_id
                  FROM tempdb.dbo.SQLXL_Index_sys_check_constraints cc
                 WHERE cc.parent_column_id = 0 -- not a table constraint
               ) cc
       ) chk (database_id
             ,parent_object_id
             ,chkcon
             )
    ON tgt.database_id = chk.database_id
   AND tgt.object_id   = chk.parent_object_id
   AND tgt.index_id    = chk.parent_object_id
 WHERE rec_type NOT IN (N'A',N'D',N'I')
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Incorporate Parent Constraints'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Extended Properties',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

SET ANSI_WARNINGS OFF;

/******************************************************************************************************************************************/
-- Incorporate Extended Properties
-- Update Extended Properties for all objects
-- Class:  0 = Database,1 = Object or column,2 = Parameter,3 = Schema,4 = Database principal,5 = Assembly,6 = Type,7 = index
--        ,8 = User defined table type column,10 = XML schema collection, 15 = Message type,16 = Service contract,17 = Service
--       ,18 = Remote service binding,19 = Route,20 = Dataspace (filegroup or partition scheme),21 = Partition function,
--        22 = Database file,27 = Plan guide
/******************************************************************************************************************************************/
SET ANSI_WARNINGS ON;

UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON;
SELECT
--*/
       extended_properties = STUFF(
                             -- Database
                             ISNULL(
                             (SELECT NCHAR(10) + N'Database: ' + ep.name + N': ' + CAST(ep.value AS NVARCHAR(4000))
                                FROM tempdb.dbo.SQLXL_Index_sys_extended_properties AS ep
                               WHERE tgt.database_id = ep.database_id
                                 AND 0               = ep.class
                                 AND 0               = ep.major_id
                                 AND 0               = ep.minor_id
                                 AND tgt.rec_type    = N'D'
                               ORDER BY
                                     ep.name
                                    ,ep.value
                                 FOR XML PATH(N''), TYPE).value('(./text())[1]','NVARCHAR(4000)'),N'')
                           -- Parent schema
                           + ISNULL(
                             (SELECT NCHAR(10) + N'Schema: ' + ep.name + N': ' + CAST(ep.value AS NVARCHAR(4000))
                                FROM tempdb.dbo.SQLXL_Index_sys_extended_properties AS ep
                               WHERE tgt.database_id = ep.database_id
                                 AND 3               = ep.class
                                 AND tgt.schema_id   = ep.major_id
                                 AND 0               = ep.minor_id
                                 AND tgt.rec_type NOT IN (N'A',N'D',N'I')
                               ORDER BY
                                     ep.name
                                    ,ep.value
                                 FOR XML PATH(N''), TYPE).value('(./text())[1]','NVARCHAR(4000)'),N'')
                           -- Parent object
                           + ISNULL(
                             (SELECT NCHAR(10) + ep.name + N': ' + CAST(ep.value AS NVARCHAR(4000))
                                FROM tempdb.dbo.SQLXL_Index_sys_extended_properties AS ep
                               WHERE tgt.database_id       = ep.database_id
                                 AND 1                     = ep.class
                                 AND tgt.parent_object_id  = ep.major_id
                                 AND 0                     = ep.minor_id
                                 AND tgt.rec_type NOT IN (N'A',N'D',N'I')
                               ORDER BY
                                     ep.name
                                    ,ep.value
                                 FOR XML PATH(N''), TYPE).value('(./text())[1]','NVARCHAR(4000)'),N'')
                           -- Foreign Key Constraints
                           + ISNULL(
                             (SELECT NCHAR(10) + ep.name + N': ' + CAST(ep.value AS NVARCHAR(4000))
                                FROM tempdb.dbo.SQLXL_Index_sys_extended_properties AS ep
                               WHERE tgt.database_id       = ep.database_id
                                 AND 1                     = ep.class
                                 AND tgt.object_id         = ep.major_id
                                 AND 0                     = ep.minor_id
                                 AND tgt.rec_type          = N'I'
                                 AND tgt.type             IN (N'F')
                               ORDER BY
                                     ep.name
                                    ,ep.value
                                 FOR XML PATH(N''), TYPE).value('(./text())[1]','NVARCHAR(4000)'),N'')
                           -- Indexes
                           + ISNULL(
                             (SELECT NCHAR(10) + ep.name + N': ' + CAST(ep.value AS NVARCHAR(4000))
                                FROM tempdb.dbo.SQLXL_Index_sys_extended_properties AS ep
                               WHERE tgt.database_id       = ep.database_id
                                 AND 7                     = ep.class
                                 AND tgt.parent_object_id  = ep.major_id
                                 AND tgt.index_id          = ep.minor_id
                                 AND tgt.rec_type          = N'I'
                               ORDER BY
                                     ep.name
                                    ,ep.value
                                 FOR XML PATH(N''), TYPE).value('(./text())[1]','NVARCHAR(4000)'),N'')
                           -- Index Key & Included Columns
                           + ISNULL(
                             (SELECT NCHAR(10) +QUOTENAME(c.name)+N' '+ep.name +N': ' + CAST(ep.value AS NVARCHAR(4000))
                                FROM tempdb.dbo.SQLXL_Index_sys_index_columns       AS ic
                                JOIN tempdb.dbo.SQLXL_Index_sys_columns             AS c
                                  ON ic.database_id       = c.database_id
                                 AND ic.object_id         = c.object_id
                                 AND ic.column_id         = c.column_id
                                JOIN tempdb.dbo.SQLXL_Index_sys_extended_properties AS ep
                                  ON ic.database_id       = ep.database_id
                                 AND ic.object_id         = ep.major_id
                                 AND ic.column_id         = ep.minor_id
                                 AND 1                    = ep.class
                               WHERE tgt.database_id      = ic.database_id
                                 AND tgt.object_id        = ic.object_id
                                 AND tgt.index_id         = ic.index_id
                                 AND tgt.type             = ic.type
                               ORDER BY
                                     ic.key_column_sequence
                                    ,c.name
                                 FOR XML PATH(N''), TYPE).value('(./text())[1]','NVARCHAR(4000)'),N'')
                             ,1,1,N'') COLLATE DATABASE_DEFAULT
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Add Extended Properties'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

SET ANSI_WARNINGS OFF;

/******************************************************************************************************************************************/
-- Referenced Foreign Keys, Referred Foreign Key Constraints, & Index Covers
/******************************************************************************************************************************************/
SET ANSI_WARNINGS ON; -- required for the FOR XML function below

UPDATE tgt
   SET
/*** TESTING
SELECT tgt.database_id
      ,tgt.object_id
      ,tgt.index_id
      ,tgt.type,
--*/
       ---------------------------------------------------------------------------------------------
       -- Foreign Key Constraint reference
       ---------------------------------------------------------------------------------------------
       fkc_reference                      = (-----------------------------------------------------------------------------------------------
                                            -- get Foreign Key Constraint referenced schema + table + column(s)
                                            ------------------------------------------------------------------------------------------------
                                            SELECT           N'SCH ' + QUOTENAME(s.name)
                                                  +NCHAR(10)+N'TBL ' + QUOTENAME(ref_obj.name)
                                                  +NCHAR(10)+N'COL '
                                                  +STUFF((----------------------------------------------------------------------------------
                                                          -- loop through columns in foreign key since can have more than one
                                                          ----------------------------------------------------------------------------------
                                                          SELECT NCHAR(10)+N'    ,' + QUOTENAME(eix.name)
                                                            FROM tempdb.dbo.SQLXL_Index_sys_foreign_key_columns AS fkc
                                                            JOIN tempdb.dbo.SQLXL_Index_column                  AS eix
                                                              ON fkc.database_id                               = eix.database_id
                                                             AND fkc.referenced_object_id                      = eix.object_id
                                                             AND fkc.referenced_column_id                      = eix.column_id
                                                           WHERE tgt.database_id                               = fkc.database_id
                                                             AND tgt.object_id                                 = fkc.constraint_object_id
                                                           ORDER BY
                                                                 fkc.constraint_column_id
                                                             FOR XML PATH(N''),TYPE -- can be more than 1 column in foreign key
                                                         ).value('(./text())[1]','NVARCHAR(4000)')
                                                         ,1,6,N'')
                                             WHERE tgt.type = N'F'
                                           )
      -----------------------------------------------------------------------------------------------------
      -- For referenced indexes, count the number of referred/parent Foreign Key Constraints referring to it
      -----------------------------------------------------------------------------------------------------
      ,rk_referencing_fkc_CNT                = ISNULL(fkc_ref.rk_referencing_fkc_CNT               ,0)
      ,rk_referencing_fkc_disabled_CNT       = ISNULL(fkc_ref.rk_referencing_fkc_disabled_CNT      ,0)
      ,rk_referencing_fkc_not_replicated_CNT = ISNULL(fkc_ref.rk_referencing_fkc_not_replicated_CNT,0)
      ,rk_referencing_fkc_not_trusted_CNT    = ISNULL(fkc_ref.rk_referencing_fkc_not_trusted_CNT   ,0)
      ,rk_referencing_fkc_action_none_CNT    = ISNULL(fkc_ref.rk_referencing_fkc_action_none_CNT   ,0)
      ,rk_referencing_fkc_action_cascade_CNT = ISNULL(fkc_ref.rk_referencing_fkc_action_cascade_CNT,0)
      ,rk_referencing_fkc_action_null_CNT    = ISNULL(fkc_ref.rk_referencing_fkc_action_null_CNT   ,0)
      ,rk_referencing_fkc_action_default_CNT = ISNULL(fkc_ref.rk_referencing_fkc_action_default_CNT,0)
      ,rk_referencing_fkc_system_named_CNT   = ISNULL(fkc_ref.rk_referencing_fkc_system_named_CNT  ,0)
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS tgt
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_foreign_keys AS fkc_par
    ON tgt.database_id                        = fkc_par.database_id
   AND tgt.object_id                          = fkc_par.object_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects      AS ref_obj                    -- cross reference to get referenced object properties
    ON fkc_par.database_id                     = ref_obj.database_id
   AND fkc_par.referenced_object_id            = ref_obj.object_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_schemas      AS s                    -- cross reference to get referenced object schema
    ON ref_obj.database_id                    = s.database_id
   AND ref_obj.schema_id                      = s.schema_id
  LEFT OUTER
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- get count of Foreign Key Constraints ("Parent" or referring) to each referenced table and unique index
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT database_id
              ,referenced_object_id
              ,referenced_index_id                  = key_index_id
              ------------------------------------------------------------------------------------
              ,rk_referencing_fkc_CNT                = COUNT(1)
              ,rk_referencing_fkc_disabled_CNT       = SUM(IIF(is_disabled               = 1,1,0))
              ,rk_referencing_fkc_not_replicated_CNT = SUM(IIF(is_not_for_replication    = 1,1,0))
              ,rk_referencing_fkc_not_trusted_CNT    = SUM(IIF(is_not_trusted            = 1,1,0))
              ,rk_referencing_fkc_action_none_CNT    = SUM(IIF(delete_referential_action = 0,1,0))
              ,rk_referencing_fkc_action_cascade_CNT = SUM(IIF(delete_referential_action = 1,1,0))
              ,rk_referencing_fkc_action_null_CNT    = SUM(IIF(delete_referential_action = 2,1,0))
              ,rk_referencing_fkc_action_default_CNT = SUM(IIF(delete_referential_action = 3,1,0))
              ,rk_referencing_fkc_system_named_CNT   = SUM(IIF(is_system_named           = 1,1,0))
          FROM tempdb.dbo.SQLXL_Index_sys_foreign_keys
         GROUP BY
               database_id
              ,referenced_object_id
              ,key_index_id
       )                   AS fkc_ref
    ON tgt.database_id      = fkc_ref.database_id
   AND tgt.parent_object_id = fkc_ref.referenced_object_id
   AND tgt.object_id        = fkc_ref.referenced_object_id
   AND tgt.index_id         = fkc_ref.referenced_index_id
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Referenced Foreign Keys, Referred Foreign Key Constraints, & Index Covers'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Parent "Referred" Foreign Key Constraints "covered" by indexes and vice-versa',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Parent "Referred" Foreign Key Constraints "covered" by indexes and vice-versa
/******************************************************************************************************************************************/
SET ANSI_WARNINGS ON; -- required for the FOR XML function below

UPDATE tgt
   SET
/*** TESTING
SET ANSI_WARNINGS ON; -- required for the FOR XML function below
SELECT tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,tgt.name,
--*/
       ---------------------------------------------------------------------------------------------
       -- All indexes covering this Foreign Key
       ---------------------------------------------------------------------------------------------
       fkc_covered_by_idx_IDS        = STUFF(covering_indexes.idx_id,1,1,N'') -- list of all indexes covering this Foreign Key
       ---------------------------------------------------------------------------------------------
       -- Primary index covering this Foreign Key
       ---------------------------------------------------------------------------------------------
      ,fkc_covering_primary_idx_name = covering_index.name     -- name of the "primary" (smallest) index covering the foreign key
      ,fkc_covering_primary_idx_ID   = covering_index.index_id -- id of the "primary" (smallest)index covering the foreign key
      ,fkc_covering_primary_idx_Type = covering_index.type     -- type of the "primary" (smallest)index covering the foreign key
       ---------------------------------------------------------------------------------------------
       -- All Foreign Key Constraints covered by this index
       ---------------------------------------------------------------------------------------------
      ,covered_fkc_IDs               = STUFF(covering_fk.idx_id,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
           AND type IN (N'1',N'2',N'F')
       ) AS tgt
 OUTER APPLY
       (------------------------------------------------------------------------------------------------------------------------------------
        -- Find "best" index covering ALL the Foreign Key Constraint column(s) - not filtered
        -- clustered over Nonclustered, most readest, most narrowest, fewest key columns, and narrowest included columns
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT TOP (1)
               i.index_id
              ,i.type
              ,i.name
              ,i.Key_Columns_CNT
              ,i.ius_user_read_CNT
              ,i.stathdr_Average_Key_Length
              ,i.key_Total_datatype_length_bytes
              ,i.inc_Total_datatype_length_bytes
          FROM (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type = N'I'
                )                      AS i
         WHERE tgt.type                 = N'F'
           AND tgt.database_id          = i.database_id
           AND tgt.parent_object_id     = i.parent_object_id
           AND i.type                  IN (N'1',N'2') -- clustered, Nonclustered only. Nonclustered columnstores can't be used for FKC!
           AND i.has_filter             = 0           -- can't be filtered since won't cover the whole key
           AND CHARINDEX(tgt.key_column_IDs,i.key_column_IDs) = 1 -- comma separated list of column_ids in the index or foreign key
         ORDER BY
               i.type                             -- use clustered if found
              ,i.is_primary_key              DESC -- Primary Key
              ,i.is_unique_constraint        DESC -- is a CONSTRAINT
              ,i.is_unique                   DESC -- is UNIQUE
              ,i.ius_user_read_CNT           DESC -- most read
              ,i.stathdr_Average_Key_Length  DESC -- biggest
              ,i.Key_Columns_CNT             DESC -- most key elements
              ,i.key_Total_datatype_length_bytes          DESC -- widest key
              ,i.inc_Total_datatype_length_bytes      -- fewest included columns
              ,i.index_id
       ) covering_index

 OUTER APPLY
       (------------------------------------------------------------------------------------------------------------------------------------
        -- Find all indexes covering all Foreign Key Constraint column(s)
        -- Where:   not filtered
        -- Ordered: clustered over Nonclustered, most readest, most narrowest, fewest key columns,
        --          and narrowest included columns
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT TOP (100) PERCENT
               N','+QUOTENAME(i.index_id)
          FROM (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type = N'I'
                )                      AS i
         WHERE tgt.type                 = N'F'
           AND tgt.database_id          = i.database_id
           AND tgt.parent_object_id     = i.parent_object_id
           AND i.type                  IN (N'1',N'2') -- clustered, Nonclustered only. NOTE - Nonclust colstores can't be used for FK!
           AND i.has_filter             = 0           -- can't be filtered since won't cover the whole key
           AND CHARINDEX(tgt.key_column_IDs,i.key_column_IDs) = 1 -- comma separated list of column_ids in the index or foreign key
        ORDER BY
              i.type                             -- use clustered if found
             ,i.is_primary_key              DESC -- Primary Key
             ,i.is_unique_constraint        DESC -- is a CONSTRAINT
             ,i.is_unique                   DESC -- is UNIQUE
             ,i.ius_user_read_CNT           DESC -- most read
             ,i.stathdr_Average_Key_Length  DESC -- biggest
             ,i.Key_Columns_CNT             DESC -- most key elements
             ,i.key_Total_datatype_length_bytes          DESC -- widest key
             ,i.inc_Total_datatype_length_bytes      -- fewest included columns
             ,i.index_id
           FOR XML PATH(N'')
       ) covering_indexes(idx_id)

 OUTER APPLY
       (------------------------------------------------------------------------------------------------------------------------------------
        -- get list of Foreign Key Constraints covered by the index
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT TOP 100 PERCENT
               N','+QUOTENAME(i.object_id)
          FROM (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type = N'I'
                )                      AS i
         WHERE i.type                   = N'F'
           AND tgt.type                IN (N'1',N'2') -- clustered, Nonclustered only. NOTE - Nonclustered colstores can't be used for FK!
           AND tgt.has_filter           = 0           -- can't be filtered since won't cover the whole key
           AND tgt.database_id          = i.database_id
           AND tgt.parent_object_id     = i.parent_object_id
           AND CHARINDEX(i.key_column_IDs,tgt.key_column_IDs) = 1 -- comma separated list of column_ids in the index or foreign key
         ORDER BY
               i.object_id
           FOR XML PATH(N'')
       ) covering_fk(idx_id)
 WHERE covering_index.index_id IS NOT NULL
    OR covering_indexes.idx_id IS NOT NULL
    OR covering_fk.idx_id      IS NOT NULL
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Parent "Referred" Foreign Key Constraints "covered" by indexes and vice-versa'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start table of Synergies between indexes, foreign key constraints, and missing indexes',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

SET ANSI_WARNINGS OFF;

/******************************************************************************************************************************************/
-- Create table of Synergies between indexes, foreign key constraints, and missing indexes
-- Compare indexes within a table for synergies, run through candidates looking for match type.
-- match indexes on the "Left" side with indexes in the same table on the "right" side
-- Look for the least "key" columns in both compared records - limits the iterations through SEQUENCE and OVERLAP matches below
/******************************************************************************************************************************************/
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_Synergies') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_Synergies;

;WITH ico AS (
SELECT ic.database_id
      ,parent_object_id = ic.object_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
      ,ic.column_id
      ,ic.key_column_sequence
      ,ic.partition_ordinal
      ,ic.is_included_column
  FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic  -- includes missing indexes
UNION ALL
SELECT database_id         = database_id
      ,parent_object_id    = parent_object_id
      ,object_id           = constraint_object_id
      ,index_id            = constraint_object_id
      ,type                = N'F'
      ,column_id           = parent_column_id
      ,key_column_sequence = constraint_column_id
      ,partition_ordinal   = 0
      ,is_included_column  = 0
  FROM tempdb.dbo.SQLXL_Index_sys_foreign_key_columns
)
SELECT idx_com.database_id
      ,idx_com.parent_object_id
      --------------------------------------------------------
      ,idx_com.l_object_id
      ,idx_com.l_index_id
      ,idx_com.l_type
      ,lc_key_cnt = idx_com.lc_idx_index_Key_Columns
      --------------------------------------------------------
      ,idx_com.r_object_id
      ,idx_com.r_index_id
      ,idx_com.r_type
      ,rc_key_cnt = idx_com.rc_idx_index_Key_Columns
      --------------------------------------------------------
      ,seq.matching_sequence_CNT
      ,seq.matching_sequence_all_density
      ,matching_sequence_COL      = IIF(idx_com.l_type = N'F' OR idx_com.r_type = N'F',N'F.',N'S.')+seq.matching_sequence_COL
      ,ovl.matching_overlap_CNT
      ,matching_overlap_COL       = N'O.'+ovl.matching_overlap_COL
      ,con.matching_contained_CNT
      ,matching_contained_COL     = N'C.'+con.matching_contained_COL
  INTO tempdb.dbo.SQLXL_Index_Synergies
  FROM (------------------------------------------------------------------------------------------------------------------------------------
        -- find all "indexes" within a table with one or more common "key" columns
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT idx_com.database_id
              ,idx_com.parent_object_id
              ----------------------------------------------------------------
              ,idx_com.l_object_id
              ,idx_com.l_index_id
              ,idx_com.l_type
              ----------------------------------------------------------------
              ,idx_com.r_object_id
              ,idx_com.r_index_id
              ,idx_com.r_type
              ----------------------------------------------------------------
              ,lc_idx_index_Key_Columns = il.Key_Columns_CNT
              ,lc_filter_definition     = il.filter_definition
              ----------------------------------------------------------------
              ,rc_idx_index_Key_Columns = ir.Key_Columns_CNT
              ,rc_filter_definition     = ir.filter_definition
              ------------------------------------------------------------------------------------------------------------------------------
              -- for each common key pair get the least number of key columns to reduce loop execution below
              ------------------------------------------------------------------------------------------------------------------------------
              ,least_col_cnt            = (SELECT cnt = MIN(m.cnt)
                                             FROM (VALUES (il.Key_Columns_CNT),(ir.Key_Columns_CNT)
                                                  ) m(cnt)
                                          )
              ----------------------------------------------------------------
              ,il_xml_using_xml_index_id = il.xml_using_xml_index_id
              ,ir_xml_using_xml_index_id = ir.xml_using_xml_index_id
              ,il_xml_secondary_type     = il.xml_secondary_type
              ,ir_xml_secondary_type     = ir.xml_secondary_type
          FROM (----------------------------------------------------------------------------------------------------------------------------
                -- paired index candidates - only look for synergy if have at least one key column in common
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT DISTINCT
                       l.database_id
                      ,l.parent_object_id
                      -------------------------------------------
                      ,l_object_id            = l.object_id
                      ,l_index_id             = l.index_id
                      ,l_type                 = l.type
                      ,l_partition_ordinal    = l.partition_ordinal
                      -------------------------------------------
                      ,r_object_id            = r.object_id
                      ,r_index_id             = r.index_id
                      ,r_type                 = r.type
                      ,r_partition_ordinal    = r.partition_ordinal
                  FROM ico AS l
                  JOIN ico AS r
                    ON l.database_id                        = r.database_id
                   AND l.parent_object_id                   = r.parent_object_id
                   -- No self referencing
                   AND (    l.index_id                     <> r.index_id      -- no self referencing
                        OR (    l.index_id                  = r.index_id      -- no self referencing
                            AND l.type                     <> r.type          -- no self referencing
                           )
                       )
                   AND l.column_id                          = r.column_id    -- synergy candidates must have at least 1 column matching
                 WHERE 1 = 1
                   ---------------------------------------------
                   AND l.type NOT IN (N'R',N'FT',N'IF',N'TF')   -- exclude referenced Foreign Key ('R') columns, table functions
                   AND r.type NOT IN (N'R',N'FT',N'IF',N'TF')   -- exclude referenced Foreign Key ('R') columns, table functions
                   ---------------------------------------------
                   AND (   l.partition_ordinal = 0              -- exclude left-side partitioning column(s) to avoid false synergies
                        OR r.type              = N'F'           -- special case for Foreign Key Constraints which are unpartitioned
                       )
                   AND l.type NOT IN (N'0'                      -- exclude left-side heaps
                                     ,N'5'                      -- exclude left-side clustered columnstore
                                     ,N'6'                      -- exclude left-side Nonclustered columnstore
                                     )
                   AND l.is_included_column = 0                 -- exclude left side included columns, only looking for key matches
                   ---------------------------------------------
                   AND (   r.partition_ordinal = 0              -- exclude right-side partitioning column(s) to avoid false synergies
                        OR l.type              = N'F'           -- special case for Foreign Key Constraints which are unpartitioned
                       )
                   AND r.type NOT IN (N'0'                      -- exclude right-side heaps
                                     ,N'5'                      -- exclude right-side clustered columnstore
                                     ,N'6'                      -- exclude right-side Nonclustered columnstore
                                     )
                   AND r.is_included_column = 0                 -- exclude right side included columns, only looking for key matches
               ) idx_com
          JOIN (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type       = N'I'
                   AND obj_type      <> N'IT' -- Internal tables don't get compared
                   AND internal_type IS NULL
               )                  AS il
            ON idx_com.database_id = il.database_id
           AND idx_com.l_object_id = il.object_id
           AND idx_com.l_index_id  = il.index_id
           AND idx_com.l_type      = il.type
          JOIN (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type       = N'I'
                   AND obj_type      <> N'IT' -- Internal tables don't get compared
                   AND internal_type IS NULL
               )                  AS ir
            ON idx_com.database_id = ir.database_id
           AND idx_com.r_object_id = ir.object_id
           AND idx_com.r_index_id  = ir.index_id
           AND idx_com.r_type      = ir.type
         WHERE 1 = 1
               -- for a Foreign Key Constraint to match it's gotta reference the same referenced object_id & referenced_column_id(s)
           AND NOT (    il.type          = N'F'
                    AND ir.type          = N'F'
                    AND CHARINDEX(il.fkc_reference,ir.fkc_reference) = 0
                    AND CHARINDEX(ir.fkc_reference,il.fkc_reference) = 0
                   )
               -- XML Secondary indexes - 3 different "secondary" types and the "primary" should not match each other
           AND NOT (    il.type = N'3'
                    AND ir.type = N'3'
                    AND (   ISNULL(il.xml_using_xml_index_id,0 )  = ISNULL(ir.xml_using_xml_index_id,0 )
                         OR ISNULL(il.xml_using_xml_index_id,0)   = ISNULL(ir.index_id              ,0) -- match to the primary XML
                         OR ISNULL(il.index_id              ,0)   = ISNULL(ir.xml_using_xml_index_id,0) -- match to the primary XML
                        )
                   )
       ) idx_com

 OUTER APPLY
       (------------------------------------------------------------------------------------------------------------------------------------
        -- SAME COLUMNS IN SAME ORDER - SEQUENCE
        -- "indexes" with 1 or more matching key columns in the same index key sequence
        -- Missing indexes have no key order, so look for matches in equality keys ordered by uniqueness
        -- get the largest count of matches within an "index" match pair, not counting included columns
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT TOP (1)
               matching_sequence_CNT = c.cnt
              ,matching_sequence_COL = CAST((-----------------------------------------------------------------------------------------------
                                             -- list intersecting column_ids, in computed index key column order (key_column_sequence)
                                             -----------------------------------------------------------------------------------------------
                                             SELECT TOP (c.cnt)
                                                    CAST(ix.column_id AS VARCHAR(10))+N'.'
                                               FROM ico                      AS ix
                                              WHERE idx_com.database_id       = ix.database_id
                                                AND idx_com.l_object_id       = ix.object_id
                                                AND idx_com.l_index_id        = ix.index_id
                                                AND 0                         = ix.is_included_column
                                              ORDER BY
                                                    ix.key_column_sequence -- Note: Missing index key assigned by uniqueness ASC!
                                                FOR XML PATH('')
                                            ) AS VARCHAR(1000))
              ,matching_sequence_all_density = COALESCE(dvl.All_Density,dvr.All_Density)
          FROM -----------------------------------------------------------------------------------------------------------------------------
               -- loop through all potential matching columns in sequence looking for highest count
               -----------------------------------------------------------------------------------------------------------------------------
               tempdb.dbo.SQLXL_Numbers(1,idx_com.least_col_cnt) loop_sequence
         CROSS APPLY
               (----------------------------------------------------------------------------------------------------------------------------
                -- instances where the same columns appear in the same sequence in the "index". Get the highest count of matches
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT cnt = CAST(COUNT(1) AS TINYINT)
                  FROM ico AS l
                  JOIN ico AS r
                    ON l.column_id               = r.column_id            -- columns must match
                   AND l.key_column_sequence     = r.key_column_sequence  -- in the same sequence
                   ---------------------------------------------------------------------------------
                 WHERE 1 = 1
                   ---------------------------------------------------------------------------------
                   AND idx_com.database_id       = l.database_id
                   AND idx_com.l_object_id       = l.object_id
                   AND idx_com.l_index_id        = l.index_id
                   AND idx_com.l_type            = l.type
                   AND 0                         = l.is_included_column
                   AND loop_sequence.n          >= l.key_column_sequence  -- key columns up to loop count
                                                                          -- Note: Missing index key assigned by uniqueness ASC
                   ---------------------------------------------------------------------------------
                   AND idx_com.database_id       = r.database_id
                   AND idx_com.r_object_id       = r.object_id
                   AND idx_com.r_index_id        = r.index_id
                   AND idx_com.r_type            = r.type
                   AND 0                         = r.is_included_column
                   AND loop_sequence.n          >= r.key_column_sequence  -- key columns up to count
                                                                          -- Note: Missing index key assigned by uniqueness ASC
                   -------------------------------------------------------------------------------------------------------------------------
                   -- filtered indexes only match if filtered definition is the same
                   -- or there's an unfiltered version to roll up to - on the LEFT side of the sequence match
                   -------------------------------------------------------------------------------------------------------------------------
                   AND (   ISNULL(idx_com.lc_filter_definition,N'') = ISNULL(idx_com.rc_filter_definition,N'')
                        OR (idx_com.lc_filter_definition IS     NULL AND idx_com.rc_filter_definition IS NOT NULL)
                       )
                HAVING COUNT(1) = loop_sequence.n
               ) c
          ----------------------------------------------------------------------------------
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector AS dvl
            ON idx_com.database_id                                    = dvl.database_id
           AND idx_com.l_object_id                                    = dvl.object_id
           AND idx_com.l_index_id                                     = dvl.index_ID
           AND loop_sequence.n                                        = dvl.Row_ID
          ----------------------------------------------------------------------------------
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector AS dvr
            ON idx_com.database_id                                    = dvr.database_id
           AND idx_com.r_object_id                                    = dvr.object_id
           AND idx_com.r_index_id                                     = dvr.index_ID
           AND loop_sequence.n                                        = dvr.Row_ID
         ORDER BY
               loop_sequence.n DESC -- get the match with the most columns in it
       ) seq

 OUTER APPLY
       (------------------------------------------------------------------------------------------------------------------------------------
        -- SAME COLUMNS, DIFFERENT ORDER - OVERLAP
        -- Indexes with 2 or more key columns overlapping within the same count of columns.
        -- Note - missing index key order is not known, so to overlap 2 missing indexes the key count must match
        -- Note - single column overlap caught by above
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT TOP (1)
               matching_overlap_CNT = c.cnt
              ,matching_overlap_COL = CAST((------------------------------------------------------------------------------------------------
                                            -- list of column_ids for the overlap, table column_id order
                                            ------------------------------------------------------------------------------------------------
                                            SELECT CAST(ix.column_id AS VARCHAR(10))+N'.'
                                              FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ix
                                             WHERE idx_com.database_id                     = ix.database_id
                                               AND idx_com.l_object_id                     = ix.object_id
                                               AND idx_com.l_index_id                      = ix.index_id
                                               AND idx_com.l_type                          = ix.type
                                               AND 0                                       = ix.is_included_column
                                               AND c.cnt                                  >= ix.key_column_sequence
                                             ORDER BY
                                                   ix.column_id -- order of columns in index not used since columns can be in any order
                                               FOR XML PATH('')
                                           ) AS VARCHAR(1000))
          FROM -----------------------------------------------------------------------------------------------------------------------------
               -- loop through all potential matching columns in sequence looking for highest count
               -----------------------------------------------------------------------------------------------------------------------------
               tempdb.dbo.SQLXL_Numbers(1,idx_com.least_col_cnt) loop_sequence
         CROSS
         APPLY (------------------------------------------------------------------------------------
                -- same columns appear in different order but within the column count
                ------------------------------------------------------------------------------------
                SELECT cnt = CAST(COUNT(1) AS TINYINT)
                  FROM ico AS l
                  JOIN ico AS r
                    ON l.column_id               = r.column_id               -- key columns must match
                   ---------------------------------------------------------------------------------
                 WHERE 1 = 1
                   AND loop_sequence.n > ISNULL(seq.matching_sequence_CNT,0) -- matching sequence not found above, or more OVERLAPS
                   ---------------------------------------------------------------------------------
                   AND idx_com.database_id       = l.database_id
                   AND idx_com.l_object_id       = l.object_id
                   AND idx_com.l_index_id        = l.index_id
                   AND idx_com.l_type            = l.type
                   AND 0                         = l.is_included_column
                   AND loop_sequence.n          >= l.key_column_sequence  -- key columns up to count.
                                                                          -- Note: Missing index key assigned by uniqueness ASC!
                   ---------------------------------------------------------------------------------
                   AND idx_com.database_id       = r.database_id
                   AND idx_com.r_object_id       = r.object_id
                   AND idx_com.r_index_id        = r.index_id
                   AND idx_com.r_type            = r.type
                   AND 0                         = r.is_included_column
                   AND loop_sequence.n          >= r.key_column_sequence  -- key columns up to count.
                                                                          -- Note: Missing index key assigned by uniqueness ASC!
                   ---------------------------------------------------------------------------------
                   AND (   -- key columns must overlap within the same synergy count.
                           -- Note: Missing index key assigned by uniqueness ASC, Foreign key sequence cannot be changed
                           (    (   TRY_CAST(l.type AS INT) > 0
                                 OR l.type = N'F'
                                )
                            AND (   TRY_CAST(r.type AS INT) > 0
                                 OR r.type = N'F'
                                )
                           )
                        OR (    l.type                     IN (N'M')
                            AND (   TRY_CAST(r.type AS INT) > 0
                                 OR r.type = N'M'
                                )
                            AND idx_com.lc_idx_index_Key_Columns >= loop_sequence.n
                            AND idx_com.rc_idx_index_Key_Columns >= loop_sequence.n
                           )
                        OR (    r.type                     IN (N'M')
                            AND (   TRY_CAST(l.type AS INT) > 0
                                 OR l.type = N'M'
                                )
                            AND idx_com.lc_idx_index_Key_Columns >= loop_sequence.n
                            AND idx_com.rc_idx_index_Key_Columns >= loop_sequence.n
                           )
                       )
                HAVING COUNT(1) = loop_sequence.n
               ) c
         ORDER BY
               loop_sequence.n DESC
       ) ovl

 OUTER APPLY
       (------------------------------------------------------------------------------------------------------------------------------------
        -- CONTAINED MATCH
        -- "indexes" with all key elements contained in another "indexes" key columns
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT matching_contained_CNT = c.matching_contained_CNT
              ,matching_contained_COL = CAST((----------------------------------------------------------------------------------------------
                                                  -- list of column_ids contained, in table column_id order
                                                  ------------------------------------------------------------------------------------------
                                                  SELECT CAST(ix.column_id AS VARCHAR(10))+N'.'
                                                    FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ix
                                                   WHERE idx_com.database_id                     = ix.database_id
                                                     AND idx_com.l_object_id                     = ix.object_id
                                                     AND idx_com.l_index_id                      = ix.index_id
                                                     AND idx_com.l_type                          = ix.type
                                                     AND 0                                       = ix.is_included_column
                                                   ORDER BY
                                                         ix.column_id
                                                     FOR XML PATH('')
                                                 ) AS VARCHAR(1000))
          FROM (----------------------------------------------------------------------------------------------------------------------------
                -- look for same columns appearing in different key order within the first index elements
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT matching_contained_CNT = CAST(COUNT(1) AS TINYINT)
                  FROM ico AS l
                  JOIN ico AS r
                    ON l.column_id                          = r.column_id
                 WHERE 1 = 1
                   ------------------------------------------------------------
                   AND l.index_id               > 1                            -- omit clustering column
                   ------------------------------------------------------------
                   AND idx_com.database_id      = l.database_id
                   AND idx_com.l_object_id      = l.object_id
                   AND idx_com.l_index_id       = l.index_id
                   AND idx_com.l_type           = l.type
                   AND 0                        = l.is_included_column         -- ignore included columns
                   ------------------------------------------------------------
                   AND idx_com.database_id      = r.database_id
                   AND idx_com.r_object_id      = r.object_id
                   AND idx_com.r_index_id       = r.index_id
                   AND idx_com.r_type           = r.type
                   AND 0                        = r.is_included_column         -- ignore included columns
                   ------------------------------------------------------------
                   AND idx_com.lc_idx_index_Key_Columns <= idx_com.rc_idx_index_Key_Columns -- left index has <= elements than right
                   ------------------------------------------------------------
                HAVING COUNT(1) = idx_com.lc_idx_index_Key_Columns
                   AND COUNT(1) > ISNULL(seq.matching_sequence_CNT,0)          -- matching sequence not found above
                   AND COUNT(1) > ISNULL(ovl.matching_overlap_CNT ,0)          -- overlapping columns not found above
               ) c
       ) con
 WHERE 1 = 1
   AND ---------------------------------------------------------------------------------------------
       -- filter out only those indexes with synergies
       ---------------------------------------------------------------------------------------------
       COALESCE(seq.matching_sequence_CNT
               ,ovl.matching_overlap_CNT
               ,con.matching_contained_CNT
               ) > 0
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Created table of Synergies between indexes, foreign key constraints, and missing indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Organize all SYNERGIES by Index - includes MISSING and FOREIGN KEYs
/******************************************************************************************************************************************/
IF OBJECT_ID(N'tempdb.dbo.SQLXL_Index_Synergies_index') IS NOT NULL DROP TABLE tempdb.dbo.SQLXL_Index_Synergies_index;

SELECT s.database_id
      ,s.object_id
      ,s.index_id
      ,s.type
      ,synergy_type       = s.synergy_type
      ,synergy_direction  = s.synergy_direction
      ,s.matching_CNT
      ,matching_COL       = s.matching_COL
  INTO tempdb.dbo.SQLXL_Index_Synergies_index
  FROM (
        SELECT s.database_id
              ,object_id         = s.l_object_id
              ,index_id          = s.l_index_id
              ,type              = s.l_type
              ,synergy_type      = N'S'
              ,synergy_direction = N''
              ,matching_CNT      = s.matching_sequence_CNT
              ,matching_COL      = s.matching_sequence_COL
          FROM tempdb.Dbo.SQLXL_Index_Synergies AS s
         WHERE s.matching_sequence_CNT         > 0
           AND LEFT(s.matching_sequence_COL,1) = N'S'
        UNION
        SELECT s.database_id
              ,object_id         = s.r_object_id
              ,index_id          = s.r_index_id
              ,type              = s.r_type
              ,synergy_type      = N'S'
              ,synergy_direction = N''
              ,s.matching_sequence_CNT
              ,s.matching_sequence_COL
          FROM tempdb.Dbo.SQLXL_Index_Synergies AS s
         WHERE s.matching_sequence_CNT         > 0
           AND LEFT(s.matching_sequence_COL,1) = N'S'
        UNION
        SELECT s.database_id
              ,object_id         = s.l_object_id
              ,index_id          = s.l_index_id
              ,type              = s.l_type
              ,synergy_type      = N'F'
              ,synergy_direction = N''
              ,matching_CNT      = s.matching_sequence_CNT
              ,matching_COL      = s.matching_sequence_COL
          FROM tempdb.Dbo.SQLXL_Index_Synergies AS s
         WHERE s.matching_sequence_CNT         > 0
           AND LEFT(s.matching_sequence_COL,1) = N'F'
        UNION
        SELECT s.database_id
              ,object_id         = s.r_object_id
              ,index_id          = s.r_index_id
              ,type              = s.r_type
              ,synergy_type      = N'F'
              ,synergy_direction = N''
              ,s.matching_sequence_CNT
              ,s.matching_sequence_COL
          FROM tempdb.Dbo.SQLXL_Index_Synergies AS s
         WHERE s.matching_sequence_CNT         > 0
           AND LEFT(s.matching_sequence_COL,1) = N'F'
        UNION
        SELECT s.database_id
              ,object_id         = s.l_object_id
              ,index_id          = s.l_index_id
              ,type              = s.l_type
              ,synergy_type      = N'O'
              ,synergy_direction = N''
              ,s.matching_overlap_CNT
              ,s.matching_overlap_COL
          FROM tempdb.Dbo.SQLXL_Index_Synergies AS s
         WHERE s.matching_overlap_CNT > 0
        UNION
        SELECT s.database_id
              ,object_id         = s.r_object_id
              ,index_id          = s.r_index_id
              ,type              = s.r_type
              ,synergy_type      = N'O'
              ,synergy_direction = N''
              ,s.matching_overlap_CNT
              ,s.matching_overlap_COL
          FROM tempdb.Dbo.SQLXL_Index_Synergies AS s
         WHERE s.matching_overlap_CNT > 0
        UNION
        SELECT s.database_id
              ,object_id         = s.l_object_id
              ,index_id          = s.l_index_id
              ,type              = s.l_type
              ,synergy_type      = N'C'
              ,synergy_direction = N'<'
              ,s.matching_contained_CNT
              ,s.matching_contained_COL
          FROM tempdb.Dbo.SQLXL_Index_Synergies AS s
         WHERE s.matching_contained_CNT > 0
        UNION
        SELECT s.database_id
              ,object_id         = s.r_object_id
              ,index_id          = s.r_index_id
              ,type              = s.r_type
              ,synergy_type      = N'C'
              ,synergy_direction = N'>'
              ,s.matching_contained_CNT
              ,s.matching_contained_COL
          FROM tempdb.Dbo.SQLXL_Index_Synergies AS s
         WHERE s.matching_contained_CNT > 0
       ) s
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Organize all SYNERGIES by Index - includes MISSING and FOREIGN KEYs'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

CREATE CLUSTERED
 INDEX ixc_SQLXL_Index_Synergies_index
    ON tempdb.dbo.SQLXL_Index_Synergies_index(database_id,object_id,index_id,type,synergy_type)
  WITH (DATA_COMPRESSION = PAGE);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Indexed tempdb.dbo.SQLXL_Index_Synergies_index'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update main table with SYNERGIES
/******************************************************************************************************************************************/

SET ANSI_WARNINGS ON -- Required for XML-based update below

UPDATE tgt
   SET
/*
SET ANSI_WARNINGS ON -- Required for XML-based update below
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,
--*/
       overlap_code = CAST(STUFF((SELECT NCHAR(10)
                                        +CASE WHEN src.synergy_direction = N'>' THEN src.synergy_direction ELSE N'' END
                                        +src.matching_COL
                                        +CASE WHEN src.synergy_direction = N'<' THEN src.synergy_direction ELSE N'' END
                                    FROM tempdb.dbo.SQLXL_Index_Synergies_index AS src
                                   WHERE tgt.database_id                       = src.database_id
                                     AND tgt.object_id                         = src.object_id
                                     AND tgt.index_id                          = src.index_id
                                     AND tgt.type                              = src.type
                                   ORDER BY
                                         CASE src.synergy_type
                                              WHEN 'S' THEN 1 -- sequence
                                              WHEN 'O' THEN 2 -- overlap
                                              WHEN 'C' THEN 3 -- contained
                                              WHEN 'F' THEN 4 -- foreign key
                                         END
                                        ,src.matching_COL
                                     FOR XML PATH(''), TYPE
                                 ).value('(./text())[1]','NVARCHAR(886)')
                                 ,1,1,N'') AS VARCHAR(886))
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS tgt
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- only need to update indexes with one or more shared elements
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT DISTINCT
               database_id
              ,object_id
              ,index_id
              ,type
          FROM tempdb.dbo.SQLXL_Index_Synergies_index
       )               AS src
    ON tgt.database_id  = src.database_id
   AND tgt.object_id    = src.object_id
   AND tgt.index_id     = src.index_id
   AND tgt.type         = src.type
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Update SQLXL_Index_Compilation with SYNERGIES'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

SET ANSI_WARNINGS OFF;

/******************************************************************************************************************************************/
-- Update Missing Index Advantage with percent of table reads factor
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.mix_Advantage_AMT,tgt.ius_user_read_CNT,usg.reads,
--*/
       mix_advantage_weighted_AMT = CASE WHEN usg.reads > 0
                                         THEN tgt.mix_Advantage_AMT * (1.0 * tgt.ius_user_read_CNT / usg.reads) -- /zero handled by HAVING
                                         ELSE NULL
                                    END
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE type = N'M'
       ) AS tgt
  JOIN (SELECT database_id
              ,parent_object_id
              ,reads = SUM(ius_user_read_CNT)
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
           AND type    <> N'M'
         GROUP BY
               database_id
              ,parent_object_id
        HAVING SUM(ius_user_read_CNT) > 0
       ) usg
    ON tgt.database_id      = usg.database_id
   AND tgt.parent_object_ID = usg.parent_object_ID;

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Update Missing Index Advantage with percent of table reads factor'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Add Missing index values to Uncovered Foreign Key Constraints
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT r.database_id,r.object_id,r.index_id,r.type,
--*/
       fkc_missing_index_CNT          = ISNULL(r.fkc_missing_index_CNT        ,0)
      ---------------------
      ,mix_avg_Total_user_cost_AMT    = ISNULL(r.mix_avg_Total_user_cost_AMT  ,0)
      ,mix_avg_Total_system_cost_AMT  = ISNULL(r.mix_avg_Total_system_cost_AMT,0)
      ,mix_avg_user_impact_AMT        = ISNULL(r.mix_avg_user_impact_AMT      ,0)
      ,mix_avg_system_impact_AMT      = ISNULL(r.mix_avg_system_impact_AMT    ,0)
      ,mix_unique_compiles_CNT        = ISNULL(r.mix_unique_compiles_CNT      ,0)
      ,mix_Advantage_AMT              = ISNULL(r.mix_Advantage_AMT            ,0)
      ,mix_Advantage_weighted_AMT     = ISNULL(r.mix_Advantage_weighted_AMT   ,0)
      ---------------------
      ,ius_user_Total_CNT             = ISNULL(r.ius_user_Total_CNT           ,0)
      ,ius_user_read_CNT              = ISNULL(r.ius_user_read_CNT            ,0)
      ,ius_user_seeks_CNT             = ISNULL(r.ius_user_seeks_CNT           ,0)
      ,ius_user_scans_CNT             = ISNULL(r.ius_user_scans_CNT           ,0)
      ,ius_system_seeks_CNT           = ISNULL(r.ius_system_seeks_CNT         ,0)
      ,ius_system_scans_CNT           = ISNULL(r.ius_system_scans_CNT         ,0)
      ---------------------
      ,ius_last_user_seek_DTTM        = r.ius_last_user_seek_DTTM
      ,ius_last_user_scan_DTTM        = r.ius_last_user_scan_DTTM
      ,ius_last_system_seek_DTTM      = r.ius_last_system_seek_DTTM
      ,ius_last_system_scan_DTTM      = r.ius_last_system_scan_DTTM
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS tgt
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- total up impact of missing indexes on uncovered Foreign Key Constraints
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT fk.database_id
              ,fk.object_id
              ,fk.index_id
              ,fk.type
              ---------------------
              ,fkc_missing_index_CNT         = COUNT(1)
              ---------------------
              ,mix_avg_Total_user_cost_AMT   = AVG(mx.mix_avg_Total_user_cost_AMT)
              ,mix_avg_Total_system_cost_AMT = AVG(mx.mix_avg_Total_system_cost_AMT)
              ,mix_avg_user_impact_AMT       = AVG(mx.mix_avg_user_impact_AMT)
              ,mix_avg_system_impact_AMT     = AVG(mx.mix_avg_system_impact_AMT)
              ,mix_unique_compiles_CNT       = SUM(mx.mix_unique_compiles_CNT)
              ,mix_Advantage_AMT             = SUM(mx.mix_Advantage_AMT)
              ,mix_Advantage_weighted_AMT    = SUM(mx.mix_Advantage_weighted_AMT)
              ---------------------
              ,ius_user_Total_CNT            = SUM(mx.ius_user_Total_CNT)
              ,ius_user_read_CNT             = SUM(mx.ius_user_read_CNT)
              ,ius_user_seeks_CNT            = SUM(mx.ius_user_seeks_CNT)
              ,ius_user_scans_CNT            = SUM(mx.ius_user_scans_CNT)
              ,ius_system_seeks_CNT          = SUM(mx.ius_system_seeks_CNT)
              ,ius_system_scans_CNT          = SUM(mx.ius_system_scans_CNT)
              ---------------------
              ,ius_last_user_seek_DTTM       = MAX(mx.ius_last_user_seek_DTTM)
              ,ius_last_user_scan_DTTM       = MAX(mx.ius_last_user_scan_DTTM)
              ,ius_last_system_seek_DTTM     = MAX(mx.ius_last_system_seek_DTTM)
              ,ius_last_system_scan_DTTM     = MAX(mx.ius_last_system_scan_DTTM)
          FROM (
                SELECT database_id
                      ,fkc_object_id = r_object_id
                      ,mix_object_id = l_object_id
                      ,mix_id        = l_index_id
                  FROM tempdb.dbo.SQLXL_Index_Synergies
                 WHERE l_type        = N'M'
                   AND r_type        = N'F'
                UNION
                SELECT database_id
                      ,fkc_object_id = l_object_id
                      ,mix_object_id = r_object_id
                      ,mix_id        = r_index_id
                  FROM tempdb.dbo.SQLXL_Index_Synergies
                 WHERE l_type        = N'F'
                   AND r_type        = N'M'
               ) AS o
          JOIN (SELECT * FROM tempdb.dbo.SQLXL_Index_Compilation WHERE rec_type = N'I') AS fk
            ON o.database_id         = fk.database_id
           AND o.fkc_object_id       = fk.object_id
           AND o.fkc_object_id       = fk.index_id
           AND N'F'                  = fk.type
          JOIN (SELECT * FROM tempdb.dbo.SQLXL_Index_Compilation WHERE rec_type = N'I') AS mx
            ON o.database_id         = mx.database_id
           AND o.mix_object_id       = mx.object_id
           AND o.mix_id              = mx.index_ID
           AND N'M'                  = mx.type
         GROUP BY
               fk.database_id
              ,fk.object_id
              ,fk.index_id
              ,fk.type
       ) r
    ON tgt.database_id      = r.database_id
   AND tgt.object_id        = r.object_id
   AND tgt.index_id         = r.index_id
   AND tgt.type             = r.type
 WHERE tgt.type             = N'F'
   AND tgt.fkc_covered_by_idx_IDS IS NULL -- already covered, don't add missing indexes providing coverage
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Add Missing index values to Uncovered Foreign Key Constraints'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Find best missing index to cover a foreign key
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,mix.*,
--*/
       fkc_candidate_covering_MIX_ID = mix.mix_index_ID
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS tgt
  JOIN (------------------------------------------------------------------------------------------------------------------------------------
        -- total up impact of missing indexes on uncovered Foreign Key Constraints
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT fkc.database_id
              ,fkc.object_id
              ,fkc.index_id
              ,fkc.type
              ,syn.matching_sequence_CNT
              ,mix.mix_Advantage_AMT
              ,mix.ius_user_read_CNT
              ---------------------
              ,mix_index_id = mix.index_id
              ,rn           = ROW_NUMBER()
                              OVER (PARTITION BY fkc.database_id
                                                ,fkc.object_id
                                                ,fkc.index_id
                                                ,fkc.type
                                        ORDER BY -- try to find the most "significant" missing index to use to cover Foreign Key
                                                 syn.matching_sequence_CNT  DESC
                                                ,syn.matching_overlap_CNT   DESC
                                                ,syn.matching_contained_CNT DESC
                                                ,mix.Key_Columns_CNT
                                                ,mix.Included_Columns_CNT
                                                ,mix.ius_user_read_CNT       DESC
                                   )
          FROM (
                SELECT database_id
                      ,fkc_object_id              = r_object_id
                      ,mix_object_id              = l_object_id
                      ,mix_id                     = l_index_id
                      ,matching_sequence_CNT
                      ,matching_overlap_CNT
                      ,matching_contained_CNT
                  FROM tempdb.dbo.SQLXL_Index_Synergies
                 WHERE l_type     = N'M'
                   AND r_type     = N'F'
                   AND (   matching_sequence_CNT  > 0
                        OR matching_overlap_CNT   > 0
                        OR matching_contained_CNT > 0
                       )
                 UNION
                SELECT database_id
                      ,fkc_object_id              = l_object_id
                      ,mix_object_id              = l_object_id
                      ,mix_id                     = r_index_id
                      ,matching_sequence_CNT
                      ,matching_overlap_CNT
                      ,matching_contained_CNT
                  FROM tempdb.dbo.SQLXL_Index_Synergies
                 WHERE l_type     = N'F'
                   AND r_type     = N'M'
                   AND (   matching_sequence_CNT  > 0
                        OR matching_overlap_CNT   > 0
                        OR matching_contained_CNT > 0
                       )
               )                 AS syn
          JOIN (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type = N'I'
                   AND N'F'     = type
               )                 AS fkc
            ON syn.database_id    = fkc.database_id
           AND syn.fkc_object_id  = fkc.object_id
           AND syn.fkc_object_id  = fkc.index_id
          JOIN (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type = N'I'
                   AND N'M'     = type
               )                 AS mix
            ON syn.database_id    = mix.database_id
           AND syn.mix_object_id  = mix.object_id
           AND syn.mix_id         = mix.index_ID
       )                 AS mix
    ON tgt.database_id    = mix.database_id
   AND tgt.object_id      = mix.object_id
   AND tgt.index_id       = mix.index_id
   AND tgt.type           = mix.type
   AND 1                  = mix.rn
 WHERE tgt.type           = N'F'
   AND tgt.fkc_covered_by_idx_IDS IS NULL
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Find best missing index to cover a foreign key'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Compute Aggregate Counts & Amounts for Parents, Databases, Instance
/******************************************************************************************************************************************/
IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Start numeric metrics computations -----------------------------------',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/*** LOCAL TESTING ***
SET NOCOUNT ON

DECLARE @name NVARCHAR(MAX)
       ,@sql  NVARCHAR(MAX)
       ,@ssms TINYINT = 1
--*/

SET NOCOUNT ON

--------------------------------------------------------------------------------------------------------------------------------------------
-- Create Metric Control tables
--------------------------------------------------------------------------------------------------------------------------------------------
IF (OBJECT_ID(N'tempdb.dbo.SQLXL_Index_Metric_Rollup') IS NOT NULL) DROP TABLE tempdb.dbo.SQLXL_Index_Metric_Rollup;

CREATE TABLE tempdb.dbo.SQLXL_Index_Metric_Rollup
      (rollup_nbr  INT     IDENTITY(1,1)
      ,Level_1     SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_1      SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,Level_2     SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_2      SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,Level_3     SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_3      SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,Level_4     SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_4      SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,Level_5     SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_5      SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,Level_6     SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_6      SYSNAME COLLATE DATABASE_DEFAULT NULL
      );

--------------------------------------------------------------------------------------------------------------------------------------------
-- Populate Metric Control tables - adds friendlier names and chooses which totals to compute and concatenate together for display
-- ,(##,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
-- Diagnostic - Index - Highest Waits (BI11&12)
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO tempdb.dbo.SQLXL_Index_Metric_Rollup
      (Level_1,abbr_1
      ,Level_2,abbr_2
      ,Level_3,abbr_3
      ,Level_4,abbr_4
      ,Level_5,abbr_5
      ,Level_6,abbr_6)
VALUES
-- TOTAL Waits & Locks
 ( N'ios_Total_wait_MS_CNT',N'OPS Wait Tm (BI11&12)'
  ,N'ios_Total_wait_CNT',N'CNT'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Total Lock Promotions
,( N'ios_Total_Lock_CNT',N'OPS Locks'
  ,N'ios_lock_promotion_CNT',N'Success'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Total Lock Promotions
,( N'ios_lock_promotion_attempt_CNT',N'OPS Lock Promo Att'
  ,N'ios_lock_promotion_fail_CNT',N'Fail'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Operations Splits
,( N'ops_Total_page_split_CNT',N'OPS Split CNT'
  ,N'ios_leaf_alloc_Page_Split_CNT',N'Leaf'
  ,N'ios_nonleaf_alloc_Page_Split_CNT',N'Nonleaf'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Operations Merges Total
,( N'ops_Total_page_merge_CNT',N'OPS Merge CNT'
  ,N'ios_leaf_page_merge_CNT',N'Leaf'
  ,N'ios_nonleaf_page_merge_CNT',N'Nonleaf'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- InMemory Splits
,( N'xtp_Total_Split_CNT',N'XTP Split CNT'
  ,N'xtp_page_split_CNT',N'Leaf'
  ,N'xtp_key_split_CNT',N'Nonleaf'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- InMemory Merges Total
,( N'xtp_Total_Merge_CNT',N'XTP Merge CNT'
  ,N'xtp_page_merge_CNT',N'Leaf'
  ,N'xtp_key_merge_CNT',N'Nonleaf'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Missing index
, (N'mix_Advantage_AMT',N'MIX Adv (BI50)'
  ,N'mix_Advantage_weighted_AMT',N'Wtd'
  ,N'Missing_index_CNT',N'CNT'
  ,N'mix_unique_compiles_CNT',N'Comp'
  ,NULL,NULL
  ,NULL,NULL)

-- Total OPS IUD
,( N'ops_Total_write_CNT',N'OPS Writes'
  ,N'ops_Total_insert_CNT',N'INS'
  ,N'ops_Total_update_CNT',N'UPD'
  ,N'ops_Total_delete_CNT',N'DEL'
  ,NULL,NULL
  ,NULL,NULL)

-- OPS Read
,( N'ops_Total_read_CNT',N'OPS Reads'
  ,N'ops_Total_scan_cnt',N'Scans'
  ,N'ios_singleton_lookup_CNT',N'Lookups'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Total USG IUD
,( N'ius_user_Total_CNT',N'USG Total'
  ,N'ius_user_read_CNT',N'Reads'
  ,N'ius_user_updates_CNT',N'Writes'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Usage Scans & Lookups
,( N'ius_user_scans_CNT',N'USG Scans'
  ,N'ius_user_lookups_CNT',N'Lookups'
  ,N'ios_forwarded_fetch_CNT',N'OPS FWD Fetch'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- LOB
,( N'ios_lob_fetch_pages_CNT',N'OPS LOB Fetch'
  ,N'ios_lob_orphan_create_CNT',N'Orphan Create'
  ,N'ios_lob_orphan_insert_CNT',N'Insert'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Overflow
,( N'ios_row_overflow_fetch_in_pages_CNT',N'OPS Overflow Fetch'
  ,N'ios_column_value_pull_in_row_CNT',N'PullIn'
  ,N'ios_column_value_push_off_row_CNT',N'PushOff'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-------------------------------------------------------------
-- Lock waits
, (N'ios_Total_Lock_wait_MS_CNT',N'OPS Lock Wait Tm'
  ,N'ios_Total_Lock_wait_CNT',N'CNT'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Missing index Query
,( N'mqy_Advantage_AMT',N'MQY advantage'
  ,N'mqy_user_scans_CNT',N'scans'
  ,N'mqy_user_seeks_CNT',N'seeks'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ops_no_read_Total_write_CNT',N'OPS Wrt W/O Rds'
  ,N'ius_no_read_user_updates_CNT',N'USG UPD W/O Rds'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ios_page_lock_wait_MS_CNT',N'OPS Page Lock Wait Tm'
  ,N'ios_page_lock_wait_CNT',N'CNT'
  ,N'ios_page_lock_CNT',N'Page Lock'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ios_row_lock_wait_MS_CNT',N'OPS Row Lock Wait Tm'
  ,N'ios_row_lock_wait_CNT',N'CNT'
  ,N'ios_row_lock_CNT',N'Row Lock'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ios_page_latch_wait_CNT',N'OPS Page Latch Wait CNT'
  ,N'ios_page_latch_wait_MS_CNT',N'Tm'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ios_page_io_latch_wait_MS_CNT',N'OPS Page I/O Latch Wait Tm'
  ,N'ios_page_io_latch_wait_CNT',N'CNT'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ios_tree_page_latch_wait_MS_CNT',N'OPS Tree Page Latch Wait Tm'
  ,N'ios_tree_page_latch_wait_CNT',N'CNT'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ios_tree_page_io_latch_wait_MS_CNT',N'OPS Tree Page I/O Latch Wait Tm'
  ,N'ios_tree_page_io_latch_wait_CNT',N'CNT'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Usage
,( N'ius_system_lookups_CNT',N'USG Sys LKP'
  ,N'ius_system_seeks_CNT',N'Seeks'
  ,N'ius_system_scans_CNT',N'Scans'
  ,N'ius_system_updates_CNT',N'UPD'
  ,NULL,NULL
  ,NULL,NULL)

,( N'ius_user_lookups_CNT',N'USG Lookups'
  ,N'ius_user_seeks_CNT',N'Seeks'
  ,N'ius_user_scans_CNT',N'Scans'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- XTP
,( N'xtp_Total_Contacts_CNT',N'XTP Contacts'
  ,N'xtp_Total_read_CNT'   ,N'RDS'
  ,N'xtp_Total_write_CNT'  ,N'WRT'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_Total_insert_CNT' ,N'XTP INS'
  ,N'xtp_Total_update_CNT' ,N'UPD'
  ,N'xtp_Total_delete_CNT' ,N'DEL'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_allocated_bytes_CNT',N'XTP Allocated Bytes'
  ,N'xtp_allocation_CNT',N'Allocation CNT'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_used_bytes_CNT',N'XTP Bytes Used'
  ,N'xtp_leaf_pages_CNT',N'Leaf Pg'
  ,N'xtp_delta_pages_CNT',N'Delta Pg'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_write_conflicts_CNT',N'XTP Write conflicts'
  ,N'xtp_unique_constraint_violations_CNT',N'UQ constraints'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_page_merge_CNT',N'XTP Page'
  ,N'xtp_page_merge_retry_CNT',N'Retry'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_Total_Split_CNT',N'XTP Total Splits'
  ,N'xtp_Total_merge_CNT',N'XTP Total Merges'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_page_split_CNT',N'XTP Page Split'
  ,N'xtp_page_split_retry_CNT',N'Retry'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_key_split_CNT',N'XTP Key Split'
  ,N'xtp_key_split_retry_CNT',N'Retry'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_key_merge_CNT',N'XTP Key'
  ,N'xtp_key_merge_retry_CNT',N'Retry'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_page_consolidation_CNT',N'XTP Page Consolidate'
  ,N'xtp_page_consolidation_retry_CNT',N'Retry'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_page_update_CNT',N'XTP Page UPD'
  ,N'xtp_page_update_retry_CNT',N'Retry'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_rows_contacted_CNT',N'XTP Row Contacts'
  ,N'xtp_row_insert_attempts_CNT',N'INS'
  ,N'xtp_row_update_attempts_CNT',N'UPD'
  ,N'xtp_row_delete_attempts_CNT',N'DEL'
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_scans_started_CNT',N'XTP Scans'
  ,N'xtp_scans_retries_CNT',N'Retry'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'xtp_rows_returned_CNT',N'XTP Rows returned'
  ,N'xtp_rows_touched_CNT',N'Touched'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'Stats_Prop_modification_CNT',N'Stats Lead Col Mods'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Operations
,( N'ops_Total_contacts_CNT',N'OPS Total Contacts'
  ,N'ios_Total_leaf_contacts_CNT',N'Leaf'
  ,N'ios_Total_nonleaf_contacts_CNT',N'NonLeaf'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- OPS Insert
,( N'ops_Total_insert_CNT',N'OPS INS'
  ,N'ios_leaf_insert_CNT',N'Leaf'
  ,N'ios_nonleaf_insert_CNT',N'Nonleaf'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- OPS Update
,( N'ops_Total_update_CNT',N'OPS UPD'
  ,N'ios_leaf_update_CNT',N'Leaf'
  ,N'ios_nonleaf_update_CNT',N'Nonleaf'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- OPS Delete
,( N'ops_Total_delete_CNT',N'OPS DEL'
  ,N'ios_leaf_delete_CNT',N'Leaf'
  ,N'ios_nonleaf_delete_CNT',N'Nonleaf'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- OPS Read
,( N'ios_page_compression_attempt_CNT',N'PG Compr Att'
  ,N'ios_page_compression_success_CNT',N'Succeed'
  ,N'ios_page_compression_fail_CNT',N'Fail'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ios_version_generated_off_row_CNT',N'Version Gen off_row'
  ,N'ios_Total_Column_value_off_row_CNT',N'Total Col Val'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'buffer_Total_KB_CNT',N'MEM Buffer used'
  ,N'buffer_free_KB_CNT',N'Free'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'reserved_page_CNT',N'Reserved Pages'
  ,N'used_page_CNT',N'Used'
  ,N'ios_leaf_ghost_CNT',N'Leaf Ghost CNT'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ios_ghost_version_off_row_CNT',N'OPS Ghost VER off_row'               -- not found in BOL!
  ,N'ios_ghost_version_inrow_CNT',N'Inrow'                                 -- not found in BOL!
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ios_insert_over_ghost_version_off_row_CNT',N'OPS Ghost INS off_row'   -- not found in BOL!
  ,N'ios_insert_over_ghost_version_inrow_CNT',N'Inrow'                     -- not found in BOL!
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'in_row_reserved_page_CNT',N'Reserved Page InRow'
  ,N'in_row_used_page_CNT',N'Used'
  ,N'in_row_data_page_CNT',N'Data'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'row_overflow_reserved_page_CNT',N'Reserved Page Overflow'
  ,N'row_overflow_used_page_CNT',N'Used'
  ,N'ios_row_overflow_fetch_in_pages_CNT',N'Fetches'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- LOB
,( N'ios_column_value_push_off_row_CNT',N'OPS Col Val Push Off Row'
  ,N'ios_column_value_pull_in_row_CNT',N'Pull in'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'lob_reserved_page_CNT',N'LOB Reserved Pages'
  ,N'lob_used_page_CNT',N'Used'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ios_lob_orphan_create_CNT',N'LOB Orphan Create'
  ,N'ios_lob_orphan_insert_CNT',N'Insert'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'ios_lob_fetch_bytes_CNT',N'OPS LOB Fetch Bytes'
  ,N'ios_lob_fetch_pages_CNT',N'Pages'
  ,N'ios_row_overflow_fetch_in_bytes_CNT',N'Overflow'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

-- Columnstore
,( N'cs_delete_buffer_scan_CNT',N'ColStor DEL Buffer Scan'
  ,N'cs_row_group_CNT',N'Row Group CNT'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'cs_row_group_lock_CNT',N'ColStor Lock'
  ,N'cs_row_group_lock_wait_CNT',N'Wait'
  ,N'cs_row_group_lock_wait_MS_CNT',N'Wait Tm'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'cs_scan_CNT',N'ColStor Scans'
  ,N'cs_index_scan_CNT',N'IDX Scans'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'cs_returned_row_CNT',N'ColStor Return Row'
  ,N'cs_returned_aggregate_CNT',N'AGG'
  ,N'cs_returned_group_CNT',N' GRP'
  ,N'cs_input_groupby_row_CNT',N'GRPBY Row' -- input groupby row
  ,NULL,NULL
  ,NULL,NULL)

,( N'ius_user_scans_weighted',N'USG Weighted Scans (BI80)'
  ,N'ios_range_scan_weighted',N'OPS (BI81)'
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL
  ,NULL,NULL)

,( N'mix_avg_Total_user_cost_AMT',N'MIX User Cost'
  ,N'mix_avg_user_impact_AMT',N'Impact'
  ,N'mix_avg_Total_system_cost_AMT',N'System Cost'
  ,N'mix_avg_system_impact_AMT',N'Impact'
  ,NULL,NULL
  ,NULL,NULL)

-- Multiple Column calculations TBD -------------------------------------------------

-- <BS> METRICS BEING SKIPPED FOR NOW - FOR FUTURE REVIEW -------------------------------------------
/*
Clustered_ColumnStore_CNT
Clustered_index_CNT
cs_partition_CNT
fkc_candidate_covering_MIX_CNT
fkc_missing_index_CNT
Foreign_Key_CNT
Fulltext_index_CNT
heap_index_CNT
hi_bucket_CNT
Included_Columns_CNT
index_CNT
ios_partition_CNT
ios_range_scan_CNT
ios_Total_latch_wait_CNT
ios_Total_latch_wait_MS_CNT
ios_version_generated_inrow_CNT
is_activity_for_period
ius_last_read_days_ago
ius_last_write_days_ago
Key_Columns_CNT
Nonclustered_ColumnStore_CNT
Nonclustered_Hash_CNT
Nonclustered_index_CNT
ops_Total_scan_retries_cnt
partition_CNT
Partition_columnstore_archive_compress_CNT
Partition_columnstore_compress_CNT
Partition_none_compress_CNT
Partition_page_compress_CNT
Partition_row_compress_CNT
rk_referencing_fkc_action_cascade_CNT
rk_referencing_fkc_action_default_CNT
rk_referencing_fkc_action_none_CNT
rk_referencing_fkc_action_null_CNT
rk_referencing_fkc_CNT
rk_referencing_fkc_disabled_CNT
rk_referencing_fkc_not_replicated_CNT
rk_referencing_fkc_not_trusted_CNT
rk_referencing_fkc_system_named_CNT
row_CNT
Spatial_index_CNT
stathdr_Rows_CNT
stathdr_Rows_Sampled_CNT
Stats_CNT
tbl_CLR_trigger_CNT
tbl_column_CNT
tbl_is_instead_of_trigger_CNT
tbl_row_CNT
tbl_SQL_trigger_CNT
tbl_used_page_CNT
XML_index_CNT

Averages
----------------------------------------
cs_row_group_lock_wait_AVG
ios_page_io_latch_wait_AVG
ios_page_latch_wait_AVG
ios_page_lock_wait_AVG
ios_row_lock_wait_AVG
ios_Total_latch_wait_AVG
ios_Total_lock_wait_AVG
ios_Total_wait_AVG
ios_tree_page_io_latch_wait_AVG
ios_tree_page_latch_wait_AVG

Dates
----------------------------------------
collection_DTTM
ius_last_system_lookup_DTTM
ius_last_system_scan_DTTM
ius_last_system_seek_DTTM
ius_last_system_update_DTTM
ius_last_user_lookup_DTTM
ius_last_user_scan_DTTM
ius_last_user_seek_DTTM
ius_last_user_update_DTTM
partition_function_create_DTTM
partition_function_modify_DTTM
*/

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Created & populate tempdb.dbo.SQLXL_Index_Metric_Rollup'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Rollup totals to PARENT level - Base (includes Internal Tables) & History tables
-- USE dynamic SQL to create list of columns
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql       NVARCHAR(MAX)
       ,@name      NVARCHAR(MAX);
--*/

SET ANSI_WARNINGS ON;

SET @sql = N'
SET ANSI_WARNINGS OFF;
UPDATE tgt
   SET ' + STUFF(
(SELECT NCHAR(10) + N'      ,'                              -- list of columns in table
      + c.name + N' = ISNULL(src.' + c.name + N',0)'
  FROM tempdb.sys.columns c
  JOIN tempdb.sys.types   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = OBJECT_ID('tempdb.dbo.SQLXL_Index_Compilation')
   AND (   (t.name    = 'float' AND c.name LIKE N'%_AMT')
        OR (t.name LIKE N'%INT' AND c.name LIKE N'%_CNT%')
       )
   AND c.name NOT LIKE N'tbl_%'
   FOR XML PATH(N''), TYPE
).value('(./text())[1]','NVARCHAR(MAX)')
,1,8,N'')
+ N'
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
  JOIN (SELECT database_id
              ,parent_object_id'
+(SELECT NCHAR(10) + N'              ,' -- list of columns in table
        + c.name + N' = SUM(' + CASE WHEN c.name LIKE N'ius_%'
                                     THEN N'CASE WHEN type = N''M'' THEN 0 ELSE ' + c.name + N' END'
                                     ELSE c.name
                                END
                       + N')'
  FROM tempdb.sys.columns c
  JOIN tempdb.sys.types   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = OBJECT_ID('tempdb.dbo.SQLXL_Index_Compilation')
   AND (   (t.name    = 'float' AND c.name LIKE N'%_AMT')
        OR (t.name LIKE N'%INT' AND c.name LIKE N'%_CNT%')
       )
   AND c.name NOT LIKE N'tbl_%'
   FOR XML PATH(N''), TYPE
).value('(./text())[1]','NVARCHAR(MAX)')
+ N'
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE N''I''  = rec_type
         GROUP BY
               database_id
              ,parent_object_id
       ) AS src
    ON tgt.database_id      = src.database_id
   AND tgt.parent_object_id = src.parent_object_id
   AND tgt.rec_type        IN (N''H'',N''P'');'

EXECUTE sys.sp_executesql @sql;IF @@Error > 0 SELECT '### BLAMMO ! ###',@sql;

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Rollup totals to PARENT level - Base (includes Internal Tables) & History tables'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent MAX Values - Latest DTTM, last read/write days ago, row count
-- USE dynamic SQL to create list of columns
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql       NVARCHAR(MAX)
--*/

SET ANSI_WARNINGS ON

SET @sql = N'
SET ANSI_WARNINGS OFF;
UPDATE tgt
   SET ' + STUFF(
(SELECT NCHAR(10) + N'      ,'
      + c.name + N' = src.' + c.name         -- No ISNULL since no date is NULL
  FROM tempdb.sys.columns c
  JOIN tempdb.sys.types   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = OBJECT_ID('tempdb.dbo.SQLXL_Index_Compilation')
   AND (   (t.name    = 'DATETIME' AND c.name LIKE N'%_DTTM')
        OR (t.name LIKE N'%INT'    AND c.name LIKE N'%_days_ago%')
        OR c.name    IN (N'row_CNT',N'is_activity_for_period')
       )
   FOR XML PATH(N''), TYPE
).value('(./text())[1]','NVARCHAR(MAX)')
,1,8,N'')
+ N'
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
  JOIN (SELECT database_id
              ,parent_object_id'
+(SELECT NCHAR(10) + N'              ,'
      + c.name + N' = ' + IIF(c.name LIKE N'%days_ago%',N'MIN',N'MAX') + N'(' + c.name +N')'
  FROM tempdb.sys.columns c
  JOIN tempdb.sys.types   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = OBJECT_ID('tempdb.dbo.SQLXL_Index_Compilation')
   AND (   (t.name    = 'DATETIME' AND c.name LIKE N'%_DTTM')
        OR (t.name LIKE N'%INT'    AND c.name LIKE N'%_days_ago%')
        OR c.name    IN (N'row_CNT',N'is_activity_for_period')
       )
   FOR XML PATH(N''), TYPE
).value('(./text())[1]','NVARCHAR(MAX)')
+ N'
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE N''I''  = rec_type
         GROUP BY
               database_id
              ,parent_object_id
       ) AS src
    ON tgt.database_id      = src.database_id
   AND tgt.parent_object_id = src.parent_object_id
   AND tgt.rec_type        IN (N''H'',N''P'');'

EXECUTE sys.sp_executesql @sql;IF @@Error > 0 SELECT '### BLAMMO ! ###',@sql;

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Parent MAX Values - Latest DTTM, last read/write days ago, row count'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-----------------------------------------------------------------------------------------------------------------------------------------
-- Database AMT & CNT Totals
-----------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SET NOCOUNT ON
SET ANSI_WARNINGS OFF
DECLARE @sql       NVARCHAR(MAX)
--*/

SET @sql = N'
SET ANSI_WARNINGS OFF;
UPDATE tgt
   SET ' + STUFF(
(SELECT NCHAR(10) + N'      ,'
      + c.name + N' = ISNULL(src.' + c.name + N',0)'
  FROM tempdb.sys.columns c
  JOIN tempdb.sys.types   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = OBJECT_ID('tempdb.dbo.SQLXL_Index_Compilation')
   AND (   (t.name    = 'float' AND c.name LIKE N'%_AMT')
        OR (t.name LIKE N'%INT' AND c.name LIKE N'%_CNT%')
       )
   AND c.name <> N'tbl_column_CNT'
   FOR XML PATH(N''), TYPE
).value('(./text())[1]','NVARCHAR(MAX)')
,1,8,N'')
+ N'
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
  JOIN (SELECT database_id'
+(SELECT NCHAR(10) + N'              ,'
      + c.name + N' = SUM(' + c.name +N')'
  FROM tempdb.sys.columns c
  JOIN tempdb.sys.types   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = OBJECT_ID('tempdb.dbo.SQLXL_Index_Compilation')
   AND (   (t.name    = 'float' AND c.name LIKE N'%_AMT')
        OR (t.name LIKE N'%INT' AND c.name LIKE N'%_CNT%')
       )
   AND c.name <> N'tbl_column_CNT'
   FOR XML PATH(N''), TYPE
).value('(./text())[1]','NVARCHAR(MAX)')
+ N'
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type IN (N''H'',N''P'')
         GROUP BY
               database_id
       ) AS src
    ON tgt.database_id      = src.database_id
   AND tgt.rec_type         = N''D'';'

EXECUTE sys.sp_executesql @sql;IF @@Error > 0 SELECT '### BLAMMO ! ###',@sql;

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Database AMT & CNT Totals'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Instance AMT & CNT Totals
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SET NOCOUNT ON
SET ANSI_WARNINGS OFF
DECLARE @sql       NVARCHAR(MAX)
--*/

SET @sql = N'
SET ANSI_WARNINGS OFF;
UPDATE tgt
   SET ' + STUFF(
(SELECT NCHAR(10) + N'      ,'
      + c.name + N' = ISNULL(src.' + c.name + N',0)'
  FROM tempdb.sys.columns c
  JOIN tempdb.sys.types   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = OBJECT_ID('tempdb.dbo.SQLXL_Index_Compilation')
   AND (   (t.name    = 'float' AND c.name LIKE N'%_AMT')
        OR (t.name LIKE N'%INT' AND c.name LIKE N'%_CNT%')
       )
   AND c.name <> N'tbl_column_CNT'
   FOR XML PATH(N''), TYPE
).value('(./text())[1]','NVARCHAR(MAX)')
,1,8,N'')
+ N'
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
CROSS JOIN (SELECT na = 0'
+(SELECT NCHAR(10) + N'              ,'
      + c.name + N' = SUM(' + c.name +N')'
  FROM tempdb.sys.columns c
  JOIN tempdb.sys.types   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = OBJECT_ID('tempdb.dbo.SQLXL_Index_Compilation')
   AND (   (t.name    = 'float' AND c.name LIKE N'%_AMT')
        OR (t.name LIKE N'%INT' AND c.name LIKE N'%_CNT%')
       )
   AND c.name <> N'tbl_column_CNT'
   FOR XML PATH(N''), TYPE
).value('(./text())[1]','NVARCHAR(MAX)')
+ N'
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type IN (N''H'',N''P'')
       ) AS src
 WHERE tgt.rec_type         = N''A'';'

EXECUTE sys.sp_executesql @sql;IF @@Error > 0 SELECT '### BLAMMO ! ###',@sql;

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Instance AMT & CNT Totals'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- All AVG Totals. Requires all other values computed
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SET NOCOUNT ON
SET ANSI_WARNINGS OFF
DECLARE @sql       NVARCHAR(MAX)
--*/

SET ANSI_WARNINGS ON -- XML PATH with TYPE used below

SET @sql = N'
SET ANSI_WARNINGS OFF;
UPDATE tgt
   SET ' + STUFF(
(SELECT NCHAR(10) + N'      ,'
      + c.name + N' = IIF(' + REPLACE(c.name,N'_AVG',N'_CNT') + N' ' + NCHAR(62) +N' 0'
               + N',1.0 * ' + REPLACE(c.name,N'_AVG',N'_MS_CNT') + N' / ' + REPLACE(c.name,N'_AVG',N'_CNT') -- /zero handled by line above
               + N',0)'
  FROM tempdb.sys.columns c
  JOIN tempdb.sys.types   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = OBJECT_ID('tempdb.dbo.SQLXL_Index_Compilation')
   AND t.name      = 'float'
   AND c.name LIKE N'%_AVG'
   FOR XML PATH(N''),TYPE
).value('(./text())[1]','NVARCHAR(MAX)')
,1,8,N'')
+ N'
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt';

EXECUTE sys.sp_executesql @sql;IF @@Error > 0 SELECT '### BLAMMO ! ###',@sql;

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Calculated all Averages'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Compute metrics as percent of Parent or Instance',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

SET ANSI_WARNINGS OFF -- XML PATH with TYPE used above

/******************************************************************************************************************************************/
-- Compute metrics as percent of Parent or Instance
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT ON
SET ANSI_WARNINGS OFF
DECLARE @sql       NVARCHAR(MAX)
       ,@name      SYSNAME
       ,@ssms      TINYINT = 1
--*/
IF (OBJECT_ID(N'tempdb.dbo.SQLXL_Index_Metrics') IS NOT NULL) DROP TABLE tempdb.dbo.SQLXL_Index_Metrics

CREATE TABLE tempdb.dbo.SQLXL_Index_Metrics
(
 diagnostic_ID    INT            IDENTITY(1,1)
-----------------------------
,rec_type         CHAR(1)        COLLATE DATABASE_DEFAULT NOT NULL  -- D-Database,P-Parent,I-index
,database_id      SMALLINT                                NOT NULL
,parent_object_id INT                                     NOT NULL
,object_id        INT                                     NOT NULL
,index_id         INT                                     NOT NULL
,type             CHAR(2)        COLLATE DATABASE_DEFAULT NOT NULL
,metric           SYSNAME        COLLATE DATABASE_DEFAULT NOT NULL
,metric_AMT       FLOAT
,diagnostic_PCT   FLOAT
-----------------------------
,diagnostic       NVARCHAR(1000) COLLATE DATABASE_DEFAULT     NULL
,diagnostic_RANK  INT
,previous_sum_PCT FLOAT
);

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cursor through all Parent & index Metrics - AMT & CNT
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE agg_crsr CURSOR LOCAL FAST_FORWARD FOR
SELECT -- TOP 1 -- *** LOCAL TESTING
       c.name COLLATE DATABASE_DEFAULT
  FROM tempdb.sys.columns c
  JOIN tempdb.sys.types   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = OBJECT_ID('tempdb.dbo.SQLXL_Index_Compilation')
    AND (   (t.name    = 'float' AND c.name LIKE N'%_AMT')
         OR (t.name LIKE N'%INT' AND c.name LIKE N'%_CNT%')
        )
    AND c.name NOT IN (N'tbl_column_CNT' -- added up separately
                      )
--AND c.name = N'ius_user_scans_weighted' -- *** LOCAL TESTING
 ORDER BY c.name DESC;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Loop through cursor of columns to calculate INDEX level as percent of PARENT
--------------------------------------------------------------------------------------------------------------------------------------------
OPEN agg_crsr;

WHILE 1 = 1
BEGIN
   FETCH NEXT
    FROM agg_crsr
    INTO @name;

   IF @@fetch_status <> 0 BREAK

   SET @sql = N'
--------------------------------------------------------------------------------------------------------------------------------------------
-- Compute Percent of Parent ' + @name +N' for Indexes
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO tempdb.dbo.SQLXL_Index_Metrics
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,metric
      ,metric_AMT
      ,diagnostic_PCT
      )
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,metric          = ''' + @name + N'''
      ,metric_AMT      = i.' + @name + N'
      ,diagnostic_PCT  = ROUND(100.0 * i.' + @name + N' / a.' + @name + N',2) -- /zero handled by HAVING clause below
  FROM tempdb.dbo.SQLXL_Index_Compilation AS i
 INNER HASH
  JOIN (SELECT database_id
              ,parent_object_id
              ,object_id
              ,' + @name + N' = SUM(' + @name + N')
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type IN (N''I'')
           AND NOT (    type IN (N''M'') -- Omit missing index values from where they''ve been rolled up into another source column
                    AND N''' + @name + N''' NOT LIKE N''MIX_%''
                   )
         GROUP BY
               database_id
              ,parent_object_id
              ,object_id
        HAVING SUM(' + @name + N') > 0
       ) a
    ON i.database_id        = a.database_id
   AND i.parent_object_id   = a.parent_object_id
   AND i.object_id          = a.object_id
   AND i.rec_type           = N''I''
   AND i.' + @name     + N' > 0
OPTION (FORCE ORDER,MAXDOP 1);'

   EXECUTE sys.sp_executesql @sql;IF @@Error > 0 SELECT '### BLAMMO ! ###',@sql;

   SET @sql = N'
--------------------------------------------------------------------------------------------------------------------------------------------
-- Compute Percent of Total ' + @name +N' for Parent
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO tempdb.dbo.SQLXL_Index_Metrics
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,metric
      ,metric_AMT
      ,diagnostic_PCT
      )
SELECT c.rec_type
      ,c.database_id
      ,c.parent_object_id
      ,c.object_id
      ,c.index_id
      ,c.type
      ,metric          = ''' + @name + N'''
      ,metric_AMT      = c.' + @name + N'
      ,diagnostic_PCT  = 100.0 * c.' + @name + N' / a.' + @name + N' -- /zero handled by CROSS JOIN WHERE clause below
  FROM tempdb.dbo.SQLXL_Index_Compilation AS c
 CROSS
  JOIN (SELECT ' + @name + N'
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE database_id      = 0
           AND ' + @name   + N' > 0
           AND parent_object_id = 0
           AND object_id        = 0
           AND index_id         = 0
           AND type             = N''A''
           AND sub_type         = 0
           AND rec_type         = N''A''
       ) AS a
 WHERE c.rec_type = N''P''
   AND c.' + @name + N' > 0
OPTION (MAXDOP 1);'

   EXECUTE sys.sp_executesql @sql;IF @@Error > 0 SELECT '### BLAMMO ! ###',@sql;

END

CLOSE agg_crsr;
DEALLOCATE agg_crsr;

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Completed Compute metrics as percent of Parent or Instance'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Create index on SQLXL_Index_Metrics
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_Metrics
    ON tempdb.dbo.SQLXL_Index_Metrics
       (diagnostic_ID)
  WITH (DATA_COMPRESSION = PAGE);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Indexed table tempdb.dbo.SQLXL_Index_Metrics'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Update column rankings - PARENT within TOTAL',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Rank percent of parent within instance & index within Parent
/******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Update column rankings - PARENT within TOTAL
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt
   SET diagnostic       = N'(' + tempdb.dbo.SQLXL_3SD(c.diagnostic_PCT,N'N') + N'% #' + CAST(c.diagnostic_rank AS NVARCHAR(20)) + N')'
      ,diagnostic_rank  = c.diagnostic_rank
      ,previous_sum_PCT = ISNULL(c.previous_sum_PCT,0.0)
  FROM tempdb.dbo.SQLXL_Index_Metrics AS tgt
  JOIN (
        SELECT c.diagnostic_ID
              ,c.rec_type
              ,c.database_id
              ,c.parent_object_id
              ,c.object_id
              ,c.index_id
              ,c.type
              ,c.metric
              ,c.diagnostic_PCT
              ,c.diagnostic_rank
              ,previous_sum_PCT = LAG(c.running_sum) OVER (PARTITION BY c.metric
                                                               ORDER BY c.running_sum
                                                                       ,c.object_id
                                                          )
          FROM (----------------------------------------------------------------------------------------------------------------------------
                --
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT diagnostic_ID
                      ,rec_type
                      ,database_id
                      ,parent_object_id
                      ,object_id
                      ,index_id
                      ,type
                      ,metric
                      ,diagnostic_PCT
                      ,diagnostic_rank = RANK()           OVER (PARTITION BY metric
                                                                    ORDER BY diagnostic_PCT DESC
                                                                            ,object_id
                                                               )
                      ,running_sum  = SUM(diagnostic_PCT) OVER (PARTITION BY metric
                                                                    ORDER BY diagnostic_PCT DESC
                                                                            ,object_id
                                                               )
                  FROM tempdb.dbo.SQLXL_Index_Metrics
                 WHERE rec_type IN (N'P',N'H')
               ) AS c
       )                AS c
    ON tgt.diagnostic_ID = c.diagnostic_ID
 WHERE tgt.rec_type     IN (N'P',N'H')
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Rank percent of parent within instance & index within Parent'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Update column rankings - INDEX within PARENT',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Update column rankings - INDEX within PARENT
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt
   SET diagnostic       = N'(' + tempdb.dbo.SQLXL_3SD(c.diagnostic_PCT,N'N') + N'% #' + CAST(c.diagnostic_rank AS NVARCHAR(20)) + N')'
      ,diagnostic_rank  = c.diagnostic_rank
      ,previous_sum_PCT = ISNULL(c.previous_sum_PCT,0.0)
  FROM tempdb.dbo.SQLXL_Index_Metrics AS tgt
  JOIN (
        SELECT c.diagnostic_ID
              ,c.rec_type
              ,c.database_id
              ,c.parent_object_id
              ,c.object_id
              ,c.index_id
              ,c.type
              ,c.metric
              ,c.diagnostic_PCT
              ,c.diagnostic_rank
              ,previous_sum_PCT = LAG(c.running_sum) OVER (PARTITION BY c.metric
                                                                       ,c.object_id
                                                               ORDER BY c.running_sum
                                                                       ,c.index_id
                                                          )
          FROM (----------------------------------------------------------------------------------------------------------------------------
                --
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT diagnostic_ID
                      ,rec_type
                      ,database_id
                      ,parent_object_id
                      ,object_id
                      ,index_id
                      ,type
                      ,metric
                      ,diagnostic_PCT
                      ,diagnostic_rank = RANK()           OVER (PARTITION BY metric
                                                                            ,object_id
                                                                    ORDER BY diagnostic_PCT DESC
                                                                            ,index_id
                                                               )
                      ,running_sum  = SUM(diagnostic_PCT) OVER (PARTITION BY metric
                                                                            ,object_id
                                                                    ORDER BY diagnostic_PCT DESC
                                                                            ,index_id
                                                            )
                  FROM tempdb.dbo.SQLXL_Index_Metrics
                 WHERE rec_type = N'I'
                   AND diagnostic_PCT IS NOT NULL
               ) AS c
       )                AS c
    ON tgt.diagnostic_ID = c.diagnostic_ID
 WHERE tgt.rec_type      = N'I'
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Update column rankings - INDEX within PARENT'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Create Diagnostics Table
-- type id: 0-Critical,2-Warning,4-Performance,6-nonDefault,8-Information,10-execution metrics; FUTURE:12-footprint metrics
--------------------------------------------------------------------------------------------------------------------------------------------
IF (OBJECT_ID(N'tempdb.dbo.SQLXL_Index_Diagnostics') IS NOT NULL) DROP TABLE tempdb.dbo.SQLXL_Index_Diagnostics

CREATE TABLE tempdb.dbo.SQLXL_Index_Diagnostics
(
 diagnostic_ID                              INT                                     IDENTITY(1,1)
-------------------------------------------------------
,rec_type                                   CHAR(1)        COLLATE DATABASE_DEFAULT NOT NULL   -- D-Database,P-Parent,I-index
,database_id                                SMALLINT                                NOT NULL
,parent_object_id                           INT                                     NOT NULL
,object_id                                  INT                                     NOT NULL
,index_id                                   INT                                     NOT NULL
,type                                       CHAR(2)        COLLATE DATABASE_DEFAULT NOT NULL
-------------------------------------------------------
,diagnostic_type_id                         TINYINT                                 NOT NULL
,diagnostic                                 NVARCHAR(1000) COLLATE DATABASE_DEFAULT NULL
,diagnostic_max_pct                         FLOAT
-------------------------------------------------------
,consolidated_diagnostic_ID                    INT                                     NULL
);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Created Diagnostics Table tempdb.dbo.SQLXL_Index_Diagnostics'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Insert consolidated metrics into diagnostic table',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Insert consolidated metrics into diagnostic table
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO tempdb.dbo.SQLXL_Index_Diagnostics
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic_type_id
      ,diagnostic
      ,diagnostic_max_pct
      )
SELECT f.rec_type
      ,f.database_id
      ,f.parent_object_id
      ,f.object_id
      ,f.index_id
      ,f.type
      ,diagnostic_type_id = 10
      ,diagnostic = STUFF(IIF(r.abbr_1 IS NOT NULL
                             ,N' ' + r.abbr_1
                             +IIF(CHARINDEX(N'MIX Advtg',r.abbr_1) <> 1
                                 ,N' '
                                 +tempdb.dbo.SQLXL_3SD(COALESCE(f1.metric_AMT,0)
                                                      ,CASE WHEN CHARINDEX(N'_KB_',r.level_1) > 0 THEN N'KB'
                                                            WHEN CHARINDEX(N'_MS_',r.level_1) > 0 THEN N'MS'
                                                            ELSE N'I'
                                                       END)
                                 ,N'')
                             +N' ' + COALESCE(f1.diagnostic,N'(0.00%)')
                             ,N'')
                         +IIF(r.abbr_2 IS NOT NULL
                             ,N' ' + r.abbr_2
                             +IIF(CHARINDEX(N'MIX Advtg',r.abbr_1) <> 1
                                 ,N' '
                                 +tempdb.dbo.SQLXL_3SD(COALESCE(f2.metric_AMT,0)
                                                      ,CASE WHEN CHARINDEX(N'_KB_',r.level_2) > 0 THEN N'KB'
                                                            WHEN CHARINDEX(N'_MS_',r.level_2) > 0 THEN N'MS'
                                                            ELSE N'I'
                                                       END)
                                 ,N'')
                             +N' ' + COALESCE(f2.diagnostic,N'(0.00%)')
                             ,N'')
                         +IIF(r.abbr_3 IS NOT NULL
                             ,N' ' + r.abbr_3 + N' '
                             +tempdb.dbo.SQLXL_3SD(COALESCE(f3.metric_AMT,0)
                                                  ,CASE WHEN CHARINDEX(N'_KB_',r.level_3) > 0 THEN N'KB'
                                                        WHEN CHARINDEX(N'_MS_',r.level_3) > 0 THEN N'MS'
                                                        ELSE N'I'
                                                   END)
                             +N' ' + COALESCE(f3.diagnostic,N'(0.00%)')
                             ,N'')
                         +IIF(r.abbr_4 IS NOT NULL
                             ,N' ' + r.abbr_4 + N' '
                             +tempdb.dbo.SQLXL_3SD(COALESCE(f4.metric_AMT,0)
                                                  ,CASE WHEN CHARINDEX(N'_KB_',r.level_4) > 0 THEN N'KB'
                                                        WHEN CHARINDEX(N'_MS_',r.level_4) > 0 THEN N'MS'
                                                        ELSE N'I'
                                                   END)
                             +N' ' + COALESCE(f4.diagnostic,N'(0.00%)')
                             ,N'')
                         +IIF(r.abbr_5 IS NOT NULL
                             ,N' ' + r.abbr_5 + N' '
                             +tempdb.dbo.SQLXL_3SD(COALESCE(f5.metric_AMT,0)
                                                  ,CASE WHEN CHARINDEX(N'_KB_',r.level_5) > 0 THEN N'KB'
                                                        WHEN CHARINDEX(N'_MS_',r.level_5) > 0 THEN N'MS'
                                                        ELSE N'I'
                                                   END)
                             +N' ' + COALESCE(f5.diagnostic,N'(0.00%)')
                             ,N'')
                         +IIF(r.abbr_6 IS NOT NULL
                             ,N' ' + r.abbr_6 + N' '
                             +tempdb.dbo.SQLXL_3SD(COALESCE(f6.metric_AMT,0)
                                                  ,CASE WHEN CHARINDEX(N'_KB_',r.level_6) > 0 THEN N'KB'
                                                        WHEN CHARINDEX(N'_MS_',r.level_6) > 0 THEN N'MS'
                                                        ELSE N'I'
                                                   END)
                             +N' ' + COALESCE(f6.diagnostic,N'(0.00%)')
                             ,N'')
                         ,1,1,N'')
      ,diagnostic_max_pct = (SELECT MAX(amt)
                            FROM (VALUES (f1.diagnostic_PCT)
                                        ,(f2.diagnostic_PCT)
                                        ,(f3.diagnostic_PCT)
                                        ,(f4.diagnostic_PCT)
                                        ,(f5.diagnostic_PCT)
                                        ,(f6.diagnostic_PCT)
                                        )
                              AS value(amt)
                         )
/*** LOCAL TESTING
SELECT COUNT(1)
--*/
  FROM (
        SELECT DISTINCT -- needed since many rows can match the 6 levels of each rollup
               f.rec_type
              ,f.database_id
              ,f.parent_object_id
              ,f.object_id
              ,f.index_id
              ,f.type
--            ,f.metric
--            ,f.metric_AMT
              ,rollup_level = r.level_1
              ,r.rollup_nbr
          FROM tempdb.dbo.SQLXL_Index_Metrics       AS f
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_Metric_Rollup AS r
            ON f.metric                            = r.level_1
            OR f.metric                            = r.level_2
            OR f.metric                            = r.level_3
            OR f.metric                            = r.level_4
            OR f.metric                            = r.level_5
            OR f.metric                            = r.level_6
         WHERE 1 = 1
           AND f.rec_type NOT IN (N'A',N'D')
           AND (  (    f.previous_sum_PCT <= 90.0
                   AND f.diagnostic_PCT   >= 1.00
                  )
                OR f.diagnostic_RANK = 1
               )
           AND COALESCE(r.level_1,r.level_2,r.level_3,r.level_4,r.level_5,r.level_6) IS NOT NULL
       ) f
  JOIN tempdb.dbo.SQLXL_Index_Metric_Rollup AS r
    ON f.rollup_nbr       = r.rollup_nbr
   AND f.rollup_level     = r.level_1
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Metrics AS f1
    ON r.Level_1          = f1.metric
   AND f.rec_type         = f1.rec_type
   AND f.database_id      = f1.database_id
   AND f.parent_object_id = f1.parent_object_id
   AND f.object_id        = f1.object_id
   AND f.index_id         = f1.index_id
   AND f.type             = f1.type
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Metrics AS f2
    ON r.Level_2          = f2.metric
   AND f.rec_type         = f2.rec_type
   AND f.database_id      = f2.database_id
   AND f.parent_object_id = f2.parent_object_id
   AND f.object_id        = f2.object_id
   AND f.index_id         = f2.index_id
   AND f.type             = f2.type
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Metrics AS f3
    ON r.Level_3          = f3.metric
   AND f.rec_type         = f3.rec_type
   AND f.database_id      = f3.database_id
   AND f.parent_object_id = f3.parent_object_id
   AND f.object_id        = f3.object_id
   AND f.index_id         = f3.index_id
   AND f.type             = f3.type
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Metrics AS f4
    ON r.Level_4          = f4.metric
   AND f.rec_type         = f4.rec_type
   AND f.database_id      = f4.database_id
   AND f.parent_object_id = f4.parent_object_id
   AND f.object_id        = f4.object_id
   AND f.index_id         = f4.index_id
   AND f.type             = f4.type
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Metrics AS f5
    ON r.Level_5          = f5.metric
   AND f.rec_type         = f5.rec_type
   AND f.database_id      = f5.database_id
   AND f.parent_object_id = f5.parent_object_id
   AND f.object_id        = f5.object_id
   AND f.index_id         = f5.index_id
   AND f.type             = f5.type
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Metrics AS f6
    ON r.Level_6          = f6.metric
   AND f.rec_type         = f6.rec_type
   AND f.database_id      = f6.database_id
   AND f.parent_object_id = f6.parent_object_id
   AND f.object_id        = f6.object_id
   AND f.index_id         = f6.index_id
   AND f.type             = f6.type
 ORDER BY
       f.database_id
      ,f.parent_object_id
      ,f.object_id
      ,f.index_id
      ,f.type
      ,r.rollup_nbr
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Inserted records into Diagnostics Table'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_IDX_Diagnostics
    ON tempdb.dbo.SQLXL_Index_Diagnostics
      (database_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic_ID
     )
WITH (DATA_COMPRESSION = PAGE);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Indexed tempdb.dbo.SQLXL_Index_Diagnostics'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Computed values and ratios
-- Index
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.object_id,tgt.index_id,p.rec_type,
--*/
 ius_scans_to_read_PCT            = IIF(    tgt.type NOT IN (N'5',N'6')
                                        AND tgt.ius_user_read_CNT > 0
                                       ,100.0 * tgt.ius_user_scans_CNT / tgt.ius_user_read_CNT
                                       ,0) -- no columnstore
,ops_scans_to_read_PCT            = IIF(    tgt.type NOT IN (N'5',N'6') 
                                        AND tgt.ops_Total_read_CNT > 0
                                       ,100.0 * tgt.ops_Total_scan_cnt / tgt.ops_Total_read_CNT
                                       ,0) -- no columnstore
,ius_scans_to_seeks_RAT           = IIF(tgt.ius_user_seeks_CNT > 0
                                       ,  1.0 * tgt.ius_user_scans_CNT / tgt.ius_user_seeks_CNT
                                       ,0)
,ius_read_to_write_RAT            = IIF(p.ius_user_updates_CNT > 0
                                       ,  1.0 * tgt.ius_user_read_CNT / p.ius_user_updates_CNT
                                       ,0)
,ius_read_to_parent_RAT           = IIF(p.ius_user_read_CNT > 0
                                       ,  1.0 * tgt.ius_user_read_CNT / p.ius_user_read_CNT
                                       ,0)
,ius_lookups_to_read_PCT          = IIF(tgt.ius_user_read_CNT > 0
                                       ,100.0 * tgt.ius_user_lookups_CNT / tgt.ius_user_read_CNT
                                       ,0)
,ios_singleton_lookup_to_read_PCT = IIF(tgt.ops_Total_read_CNT > 0
                                       ,100.0 * tgt.ios_singleton_lookup_CNT / tgt.ops_Total_read_CNT
                                       ,0)
,ios_page_compression_fail_PCT    = IIF(tgt.ios_page_compression_attempt_CNT > 0
                                      ,100.0 * tgt.ios_page_compression_fail_CNT / tgt.ios_page_compression_attempt_CNT
                                      ,0)
,ios_read_to_write_RAT            = IIF(tgt.ops_Total_write_CNT > 0
                                       ,  1.0 * tgt.ops_Total_read_CNT / tgt.ops_Total_write_CNT
                                       ,0)
,ios_read_to_parent_RAT           = IIF(p.ops_Total_read_CNT > 0
                                       ,  1.0 * tgt.ops_Total_read_CNT / p.ops_Total_read_CNT
                                       ,0)
,used_pages_in_buffer_PCT         = IIF(tgt.reserved_page_CNT > 0
                                       ,100.0 * tgt.buffer_Total_KB_CNT / (tgt.reserved_page_CNT * 8.0)
                                       ,0)
,page_lock_to_row_lock_RAT        = IIF(tgt.ios_row_lock_CNT > 0
                                       ,  1.0 * tgt.ios_page_lock_CNT / tgt.ios_row_lock_CNT
                                       ,0)
,page_splits_to_write_PCT         = IIF((tgt.ops_Total_insert_CNT + tgt.ops_Total_update_CNT) > 0
                                       ,100.0 * (tgt.ops_Total_page_split_CNT + tgt.ios_column_value_push_off_row_CNT)
                                              / (tgt.ops_Total_insert_CNT + tgt.ops_Total_update_CNT)
                                       ,0)
,page_merge_to_write_PCT          = IIF(tgt.ops_Total_write_CNT > 0
                                        ,100.0 * (tgt.ops_Total_page_merge_CNT + tgt.ios_column_value_push_off_row_CNT)
                                               / tgt.ops_Total_write_CNT
                                        ,0)
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS tgt
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type IN (N'H',N'P')
       ) AS p
    ON tgt.database_id           = p.database_id
   AND tgt.parent_object_id      = p.parent_object_id
 WHERE tgt.type NOT IN (N'F') -- uncovered Foreign Key Constraints get candidate covering missing index total but don't get ratios computed
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Computed values and ratios - Index'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Table/Parent
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT database_id,parent_object_id,object_id,index_id,type,
--*/
 ius_scans_to_read_PCT            = IIF(    tgt.type NOT IN (N'5',N'6') -- no columnstore
                                        AND tgt.ius_user_read_CNT > 0  
                                        ,100.0 * tgt.ius_user_scans_CNT / tgt.ius_user_read_CNT
                                        ,0)
,ius_scans_to_seeks_RAT           = IIF(tgt.ius_user_seeks_CNT > 0
                                       ,  1.0 * tgt.ius_user_scans_CNT/tgt.ius_user_seeks_CNT
                                       ,0)
,ius_read_to_write_RAT            = CASE WHEN tgt.ius_user_read_CNT    > 0 
                                          AND tgt.ius_user_updates_CNT > 0
                                         THEN 1.0 * tgt.ius_user_read_CNT / tgt.ius_user_updates_CNT
                                         WHEN tgt.ius_user_updates_CNT > 0
                                         THEN 0
                                         ELSE NULL
                                    END
,ius_write_to_instance_RAT        = IIF(a.ius_user_updates_CNT > 0
                                       ,  1.0 * tgt.ius_user_updates_CNT / a.ius_user_updates_CNT
                                       ,0)
,ius_lookups_to_read_PCT          = IIF(tgt.ius_user_read_CNT > 0
                                       ,100.0 * tgt.ius_user_lookups_CNT / tgt.ius_user_read_CNT
                                       ,0)
,ios_singleton_lookup_to_read_PCT = IIF(tgt.ops_Total_read_CNT > 0
                                       ,100.0 * tgt.ios_singleton_lookup_CNT / tgt.ops_Total_read_CNT
                                       ,0)
,ios_page_compression_fail_PCT    = IIF(tgt.ios_page_compression_attempt_CNT > 0
                                       ,100.0 * tgt.ios_page_compression_fail_CNT / tgt.ios_page_compression_attempt_CNT
                                       ,0)
,ios_read_to_write_RAT            = CASE WHEN tgt.ops_Total_read_CNT  > 0 
                                          AND tgt.ops_Total_write_CNT > 0
                                         THEN 1.0 * tgt.ops_Total_read_CNT / tgt.ops_Total_write_CNT
                                         WHEN tgt.ops_Total_write_CNT > 0 THEN 0
                                         ELSE NULL
                                    END
,ios_write_to_instance_RAT        = IIF(a.ops_Total_write_CNT > 0
                                       ,  1.0 * tgt.ops_Total_write_CNT / a.ops_Total_write_CNT
                                       ,0)
,used_pages_in_buffer_PCT         = IIF(    tgt.buffer_Total_KB_CNT > 0
                                        AND tgt.reserved_page_CNT   > 0
                                       ,100.0 * tgt.buffer_Total_KB_CNT / (tgt.reserved_page_CNT * 8.0)
                                       ,0)
,page_lock_to_row_lock_RAT        = IIF(tgt.ios_row_lock_CNT> 0
                                       ,  1.0 * tgt.ios_page_lock_CNT / tgt.ios_row_lock_CNT
                                       ,0)
,page_splits_to_write_PCT         = IIF(tgt.ops_Total_insert_CNT + tgt.ops_Total_update_CNT > 0
                                       ,100.0 * (tgt.ops_Total_page_split_CNT + tgt.ios_column_value_push_off_row_CNT)
                                              / (tgt.ops_Total_insert_CNT + tgt.ops_Total_update_CNT)
                                       ,0)
,page_merge_to_write_PCT      =    IIF(tgt.ops_Total_write_CNT > 0
                                       ,100.0 * (tgt.ops_Total_page_merge_CNT + tgt.ios_column_value_push_off_row_CNT)
                                              / tgt.ops_Total_write_CNT
                                       ,0)
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt
 CROSS
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'A'
       ) AS a
 WHERE tgt.rec_type NOT IN (N'A',N'D',N'I')
OPTION (MAXDOP 1);

IF @ssms = 1 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Computed values and ratios - Table/Parent'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Find metric columns not included in consolidated metrics groupings
/******************************************************************************************************************************************/
/*
SELECT c.name
  FROM tempdb.sys.columns c
  JOIN tempdb.sys.types   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = OBJECT_ID('tempdb.dbo.SQLXL_Index_Compilation')
    AND (   (t.name    = 'float'    AND RIGHT(c.name,4) = N'_AMT')
         OR (t.name LIKE N'%INT'    AND c.name LIKE N'%CNT%')
         OR (t.name    = 'DATETIME' AND c.name LIKE N'%_DTTM')
         OR (t.name LIKE N'%INT'    AND c.name LIKE N'%_days_ago%')
         OR (t.name    = 'float'       AND c.name LIKE N'%_AVG')
         OR c.name    IN (N'row_CNT',N'is_activity_for_period')
        )
EXCEPT
SELECT Level_1 FROM (
SELECT Level_1 FROM tempdb.dbo.SQLXL_Index_Metric_Rollup UNION
SELECT Level_2 FROM tempdb.dbo.SQLXL_Index_Metric_Rollup UNION
SELECT Level_3 FROM tempdb.dbo.SQLXL_Index_Metric_Rollup UNION
SELECT Level_4 FROM tempdb.dbo.SQLXL_Index_Metric_Rollup UNION
SELECT Level_5 FROM tempdb.dbo.SQLXL_Index_Metric_Rollup UNION
SELECT Level_6 FROM tempdb.dbo.SQLXL_Index_Metric_Rollup
) AS c
ORDER BY 1
*/

/*** LOCAL TESTING ***
UPDATE tempdb.dbo.SQLXL_Index_Compilation SET Diagnostics = NULL;
DELETE FROM tempdb.dbo.SQLXL_Index_Diagnostics WHERE diagnostic_type_id < 10;

-- Change to tempdb NOTE: tempdb must be lower case if server installed with CASE SENSITIVE collation
USE tempdb

DECLARE @cover_foreign_keys               TINYINT = 2
       ,@create_Nonclustered_columnstores TINYINT = 1
       ,@ssms                             TINYINT = 1
       -----------------------------------
       ,@Prio_wait_time                   SMALLINT = 100
       ,@Prio_wait_count                  SMALLINT =  50
       ,@Prio_locks                       SMALLINT =  20
       ,@Prio_lock_promotions             SMALLINT =  60
       ,@Prio_lock_promotion_fails        SMALLINT =  80
       ,@Prio_page_splits                 SMALLINT =  40
       ,@Prio_page_merges                 SMALLINT =  40
       ,@Prio_OPS_forwarded_fetches       SMALLINT =  60
       ,@Prio_missing_indexes             SMALLINT = 100
       ,@Prio_OPS_writes                  SMALLINT =  30
       ,@Prio_USG_writes                  SMALLINT =  40
       ,@Prio_buffer_cache_used           SMALLINT =  80
       ,@Prio_OPS_read_write_ratio        SMALLINT =  42
       ,@Prio_USG_read_write_ratio        SMALLINT =  42
       ,@Prio_reads                       SMALLINT =  20
       ,@Prio_scans                       SMALLINT =  42
       ,@Prio_lookups                     SMALLINT =  42
       ,@Prio_LOB                         SMALLINT =  42

/******************************************************************************************************************************************/
-- Session Environment settings
/******************************************************************************************************************************************/
SET ANSI_NULL_DFLT_ON,ANSI_NULLS,ANSI_PADDING,ARITHABORT,CONCAT_NULL_YIELDS_NULL,CURSOR_CLOSE_ON_COMMIT,NOCOUNT,QUOTED_IDENTIFIER ON;
SET ANSI_WARNINGS,ARITHIGNORE,FMTONLY,FORCEPLAN,IMPLICIT_TRANSACTIONS,NOEXEC,NUMERIC_ROUNDABORT,XACT_ABORT OFF;
SET STATISTICS IO,PROFILE,TIME,XML OFF;
SET DATEFORMAT                  YMD;
SET DEADLOCK_PRIORITY           -10;  -- Lowest priority
SET LOCK_TIMEOUT              10000;  -- in milliseconds
SET QUERY_GOVERNOR_COST_LIMIT     0;  -- 0 (the default) turns off the query goveernor, queries of any cost are allowed to execute.
SET TEXTSIZE             2147483647;  -- Max length of Excel cell contents is 32767
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
--*/

/*#########################################################################################################################################\
Diagnostics
\#########################################################################################################################################*/
IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Start SQLXL Index Diagnosis ------------------------------------------',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/* Format & Priorities of Diagnostics
(rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
0-Critical,2-Warning,4-Performance,6-nonDefault,8-Information,10-execution metrics; FUTURE:12-footprint metrics
*/

/******************************************************************************************************************************************\
***INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE***
\******************************************************************************************************************************************/
----------------------------------------------------------------------------------------------------
-- Critical = 0
----------------------------------------------------------------------------------------------------
-- Diagnostic - Instance - Columnstore indexes in use and Trace Flag 834 found (BI72)
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'A',database_id=0,parent_object_id=0,object_id=0,index_id=0,type=N'A',diagnostic_type_id = 0
      ,diagnostic = 'Trace Flag 834 (large-page allocations for the buffer pool) in use with Columnstore indexes - not a good thing! See:'
                  + NCHAR(10)
                  + N'https://docs.microsoft.com/en-US/troubleshoot/sql/admin/performance-issues-using-columstore-indexes-large-pages (BI72)'
  FROM tempdb.dbo.SQLXL_Index_sys_instance
 WHERE 834 IN (SELECT name
                 FROM tempdb.dbo.SQLXL_Index_sys_instance
                WHERE source = N'TRACESTATUS'
              )
   AND    0 < (SELECT COUNT(1)
                 FROM tempdb.dbo.SQLXL_Index_Compilation
                WHERE type IN (N'5',N'6')
              );

----------------------------------------------------------------------------------------------------
-- Warning = 2
----------------------------------------------------------------------------------------------------
-- Diagnostic - Instance - Good to know - Instance and server cofiguration information
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'A',database_id=0,parent_object_id=0,object_id=0,index_id=0,type=N'A',diagnostic_type_id = 2
      ,diagnostic = COALESCE(REPLACE(LEFT(i.run_value,CHARINDEX(NCHAR(09),i.run_value) - 3),N'MICROSOFT ',N'')
                            ,N'<Configuration @@VERSION not found>'
                            )
      ------------------------------------------------------
                   + NCHAR(10) + REPLACE(
                                 REPLACE(REVERSE(SUBSTRING(REVERSE(i.run_value),2,CHARINDEX(NCHAR(09),REVERSE(i.run_value))-2))
                                        ,N' ON ',NCHAR(10))
                                        ,N': )',N')')
      ------------------------------------------------------
                   + NCHAR(10) + N'SQL Startup '
                               + COALESCE(s.run_value,N'<SQL Start Time not found>')
                               + N' (' + COALESCE(CAST(DATEDIFF(DAY,s.run_value,sp.collection_DTTM) AS NVARCHAR(20))
                                                 ,N'<SQL Start or collection time not found>'
                                                 )
                               + N' Days)'
  FROM (SELECT r = NULL) AS r
 OUTER
 APPLY (SELECT run_value
          FROM tempdb.dbo.SQLXL_Index_sys_instance
         WHERE source = N'Configuration'
           AND name   = N'@@VERSION'
       ) AS i
 OUTER
 APPLY (SELECT run_value
          FROM tempdb.dbo.SQLXL_Index_sys_instance
         WHERE source = N'dm_os_sys_info'
           AND name   = N'sqlserver_start_time'
       ) AS s
 OUTER
 APPLY (SELECT collection_DTTM
          FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters
       ) AS sp;

----------------------------------------------------------------------------------------------------
;WITH cte AS (SELECT rec_type = 'A',database_id=0,parent_object_id=0,object_id=0,index_id=0,type=N'A',diagnostic_type_id = 2)
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT cte.*,src.diagnostic
  FROM cte
 CROSS
 APPLY (
SELECT  N'RAM OS:'    + tempdb.dbo.SQLXL_3SD(MemSrv,N'KB')
      + N' SQL Max:'  + tempdb.dbo.SQLXL_3SD(SQLmax,N'MB')
                      + IIF(MemSrv > 0
                           ,N' (' + tempdb.dbo.SQLXL_3SD(1.0 * SQLmax*1024.0 / MemSrv,N'%') + N')'
                           ,N'N/A')
      + N' SQL Used:' + tempdb.dbo.SQLXL_3SD(SQLusd,N'KB')
                      + IIF(SQLmax > 0
                           ,N' (' + tempdb.dbo.SQLXL_3SD(1.0 * SQLusd / (SQLmax*1024.0),N'%') + N')'
                           ,N'N/A')
  FROM (--
        SELECT MemSrv = COALESCE((SELECT CAST(run_value AS BIGINT)
                                    FROM tempdb.dbo.SQLXL_Index_sys_instance
                                   WHERE source = N'dm_os_sys_info'
                                     AND name   = N'physical_memory_kb'
                                 )
                                ,N'<dm_os_sys_info physical_memory_kb not found>'
                                )
              ,SQLmax = COALESCE((SELECT CAST(run_value AS BIGINT)
                                    FROM tempdb.dbo.SQLXL_Index_sys_instance
                                   WHERE source = N'sp_configure'
                                     AND name   = N'max server memory (MB)'
                                 )
                                ,N'<sp_configure max server memory (MB) not found'
                                )
              ,SQLusd = COALESCE((SELECT CAST(run_value AS BIGINT)
                                    FROM tempdb.dbo.SQLXL_Index_sys_instance
                                   WHERE source = N'dm_os_sys_info'
                                     AND name   = N'committed_kb'
                                 )
                                ,N'<dm_os_sys_info committed_kb not found>'
                                )
       ) e

UNION ALL
SELECT COALESCE((SELECT N'CPU ' + QUOTENAME(run_value)
                   FROM tempdb.dbo.SQLXL_Index_sys_instance
                  WHERE source = N'dm_os_sys_info'
                    AND name   = N'cpu_count'
                )
               ,N'<dm_os_sys_info cpu_count not found>'
               )
-- Diagnostic - Instance - non-default - max degree of parallelism
      +COALESCE((SELECT N' MAXDOP ' + QUOTENAME(run_value) + IIF(run_value <> N'0',N', default 0 (all processors)',N'')
                   FROM tempdb.dbo.SQLXL_Index_sys_instance
                  WHERE source         = N'sp_configure'
                    AND name           = N'max degree of parallelism'
                )
               ,N'<sp_configure max degree of parallelism not found>'
               )

UNION ALL
SELECT IIF(version_major < 13 --2016
          ,N'CPU Info not captured for SQL version'
          ,COALESCE((SELECT N'Sockets ' + QUOTENAME(run_value)
                       FROM tempdb.dbo.SQLXL_Index_sys_instance
                      WHERE source = N'dm_os_sys_info'
                        AND name   = N'socket_count'
                    )
                   ,N'<dm_os_sys_info socket_count not found>'
                   )
          +COALESCE((SELECT N' Cores/Socket ' + QUOTENAME(run_value)
                       FROM tempdb.dbo.SQLXL_Index_sys_instance
                      WHERE source = N'dm_os_sys_info'
                        AND name   = N'cores_per_socket'
                    )
                   ,N'<dm_os_sys_info cores_per_socket not found>'
                   )
          +COALESCE((SELECT N' Hyperthread Ratio ' + QUOTENAME(run_value)
                       FROM tempdb.dbo.SQLXL_Index_sys_instance
                      WHERE source = N'dm_os_sys_info'
                        AND name   = N'hyperthread_ratio'
                    )
                   ,N'<dm_os_sys_info hyperthread_ratio not found>'
                   )
          +COALESCE((SELECT N' SoftNUMA ' + QUOTENAME(run_value)
                       FROM tempdb.dbo.SQLXL_Index_sys_instance
                      WHERE source = N'dm_os_sys_info'
                        AND name   = N'softnuma_configuration_desc'
                    )
                   ,N'<dm_os_sys_info softnuma_configuration_desc not found>'
                   )
          )
 FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters
) src(diagnostic);

----------------------------------------------------------------------------------------------------
-- Performance = 4
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
-- Diagnostic - Instance - Missing index count across instance
SELECT rec_type = 'A',a.database_id,a.parent_object_id,a.object_id,a.index_id,a.type,diagnostic_type_id = 4,diagnostic =
       COALESCE(N'Missing indexes: ' + CAST(ISNULL(a.Missing_index_CNT,0) AS NVARCHAR(20)) + N' out of 600 possible'
               ,N'< Missing index count not found>'
               )
  FROM tempdb.dbo.SQLXL_Index_Compilation AS a
 WHERE a.rec_type = N'A';

;WITH cte AS (SELECT rec_type = 'A',database_id=0,parent_object_id=0,object_id=0,index_id=0,type=N'A',diagnostic_type_id = 4)
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT cte.*
      ,src.diagnostic
  FROM cte
 CROSS
 APPLY (

-- Diagnostic - Instance - SQL <2019, Entp Ed, Mem model <> LARGE_PAGES, 8GB+ RAM, TF834 not enabled, NO columnstore, enable Lock/Large Pages?
-- Diagnostic - Instance - SQL 2019+, Entp Ed, Mem model <> LARGE_PAGES, 8GB+ RAM, TF876 (Lock/Lg Pages) not enabled
SELECT CASE WHEN 8192 <= (SELECT CAST(run_value AS INT)               -- Large Pages requires minimum 8GB of memory
                            FROM tempdb.dbo.SQLXL_Index_sys_instance
                           WHERE source    = N'sp_configure'
                             AND name      = N'max server memory (MB)'
                         )
             AND (SELECT run_value
                    FROM tempdb.dbo.SQLXL_Index_sys_instance
                   WHERE source    = N'SERVERPROPERTY'
                     AND name      = N'Edition'
                     AND (   run_value LIKE N'ENTERPRISE%'
                          OR run_value LIKE N'DEVELOPER%'
                         )
                 ) IS NOT NULL
            THEN N'SQL Memory ' + run_value
                + IIF(run_value = N'LOCK_PAGES',N', use "LARGE_PAGES?"',N', use "LOCK_PAGES/LARGE_PAGES?"')
                + CASE WHEN (SELECT version_major FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters) >= 15
                       THEN CASE WHEN 876 NOT IN (SELECT name FROM tempdb.dbo.SQLXL_Index_sys_instance WHERE source = N'TRACESTATUS')
                                 THEN NCHAR(10) + '> Req TF876 (SQL 2019+)'
                                 ELSE N''
                            END
                       WHEN (SELECT COUNT(1) FROM tempdb.dbo.SQLXL_Index_Compilation WHERE type IN (N'5',N'6')) > 0
                       THEN CASE WHEN 834 IN (SELECT name FROM tempdb.dbo.SQLXL_Index_sys_instance WHERE source = N'TRACESTATUS')
                                 THEN N'' -- remove TF834 flagged above
                                 ELSE N' - Columnstore indexes found, do not enable TF834 (SQL <2019)'
                            END
                       ELSE CASE WHEN 834 IN (SELECT name FROM tempdb.dbo.SQLXL_Index_sys_instance WHERE source = N'TRACESTATUS')
                                 THEN N''
                                 ELSE N' - Requires TF834 (<SQL 2019)'
                            END
                  END
            ELSE NULL
       END
/*** LOCAL TESTING ***
SELECT *
--*/
  FROM tempdb.dbo.SQLXL_Index_sys_instance
 WHERE source     = N'dm_os_sys_info'
   AND name       = N'sql_memory_model_desc'
   AND run_value <> N'LARGE_PAGES'

-- Diagnostic - Instance - non-default - Default Fill Factor NOT 0 or 100
UNION ALL
SELECT IIF(i.run_value IS NULL
      ,N'<sp_configure fill factor (%) not found>'
      ,IIF(i.run_value NOT IN (N'0',N'100')
          ,N'Index ' + i.name + N' = ' + i.run_value
          ,NULL)
      )
  FROM (SELECT r = NULL) AS r -- needed for IIF to work
 OUTER
 APPLY (SELECT run_value,name
          FROM tempdb.dbo.SQLXL_Index_sys_instance
         WHERE source         = N'sp_configure'
           AND name           = N'fill factor (%)'
       ) i

-- Diagnostic - Instance - non-default - Minimum memory per query <> 1024
UNION ALL
SELECT IIF(i.run_value IS NULL
      ,N'<sp_configure Minimum memory per query (KB) (%) not found>'
      ,IIF(i.run_value <> N'1024'
          ,N'Minimum memory per query (KB) = ' + i.run_value + N', default 1024'
          ,NULL)
      )
  FROM (SELECT r = NULL) AS r
 OUTER
 APPLY (SELECT run_value,name
          FROM tempdb.dbo.SQLXL_Index_sys_instance
         WHERE source         = N'sp_configure'
           AND name           = N'min memory per query (KB)'
       ) i

-- Diagnostic - Instance - non-default - remote data archive enabled (stretch-enabled)
UNION ALL
SELECT IIF(i.run_value IS NULL AND (SELECT version_major FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters) >= 13 --2016+
      ,N'<Server is_rda_server not found>'
      ,IIF(i.run_value = N'1'
          ,N'Remote data archive enabled (stretch-enabled)'
          ,NULL)
      )
  FROM (SELECT r = NULL) AS r
 OUTER
 APPLY (SELECT run_value,name
          FROM tempdb.dbo.SQLXL_Index_sys_instance
         WHERE source         = N'servers'
           AND name           = N'is_rda_server'
       ) i

) src(diagnostic)
 WHERE src.diagnostic IS NOT NULL;

----------------------------------------------------------------------------------------------------
-- Non-Default = 6
-- Omitting "default full-text language" since will vary based on language
----------------------------------------------------------------------------------------------------
;WITH cte AS (SELECT rec_type = 'A',database_id=0,parent_object_id=0,object_id=0,index_id=0,type=N'A',diagnostic_type_id = 6)
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT cte.*
      ,src.diagnostic
  FROM cte
 CROSS JOIN (
-- Diagnostic - Instance - non-default - cost threshold for parallelism <> 5
          SELECT name + N' ' + QUOTENAME(run_value) + N', default 5'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source  = N'sp_configure'
             AND name   = N'Cost threshold for parallelism'
             AND run_value NOT IN (N'5')

-- Diagnostic - Instance - non-default - blocked process threshold <> 5
UNION ALL SELECT name + N' ' + QUOTENAME(run_value) + N', default 5 (seconds)'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'sp_configure'
             AND name   = N'blocked process threshold (s)'
             AND run_value NOT IN (N'5')

-- Diagnostic - Instance - non-default - index create memory (KB) <> 0
UNION ALL SELECT name + N' ' + QUOTENAME(run_value) + N', default 0'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'sp_configure'
             AND name   = N'Index create memory (KB)'
             AND run_value NOT IN (N'0')

-- Diagnostic - Instance - non-default - Optimize for ad hoc workloads ENABLED
UNION ALL SELECT name + N' [ON], default OFF'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'sp_configure'
             AND name   = N'Optimize for ad hoc workloads'
             AND run_value NOT IN (N'0')

-- Diagnostic - Instance - non-default - Network packet size <> 4096
UNION ALL SELECT N'Network packet size ' + run_value + N'B, default 4096B'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'sp_configure'
             AND name   = N'network packet size (B)'
             AND run_value NOT IN (N'4096')

-- Diagnostic - Instance - non-default - max text repl size (B) <> 65536
UNION ALL SELECT N'Text Replication Size MAX ' + QUOTENAME(run_value) + N', default 65536'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'sp_configure'
             AND name   = N'max text repl size (B)'
             AND run_value NOT IN (N'65536')

-- Diagnostic - Instance - non-default - query governor cost limit > 0
UNION ALL SELECT N'Query governor cost limit ' + QUOTENAME(run_value) + N', default 0'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source    = N'sp_configure'
             AND name      = N'query governor cost limit'
             AND run_value > 0

-- Diagnostic - Instance - non-default - Query waits for resources before it times out <> -1
UNION ALL SELECT N'Query waits for resources ' + QUOTENAME(run_value) + N' (sec), default -1 (25X estimated query cost)'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source    = N'sp_configure'
             AND name      = N'query wait (s)'
             AND run_value > 0

------------------------------------------------------------
-- FULLTEXT
------------------------------------------------------------
-- Diagnostic - Instance - non-default - Full Text is Installed
UNION ALL SELECT N'Fulltext feature [INSTALLED]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source     = N'SERVERPROPERTY'
             AND name       = N'IsFullTextInstalled'
             AND run_value IN (N'1')

-- Diagnostic - Instance - non-default - Fulltext Crawl Bandwidth MAX <> 100
UNION ALL SELECT N'> Fulltext Crawl Bandwidth MAX = ' + QUOTENAME(run_value) + N', default 100'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'sp_configure'
             AND name   = N'FT crawl bandwidth (max)'
             AND run_value NOT IN (N'100')

-- Diagnostic - Instance - non-default - Fulltext Crawl Bandwidth MIN <> 0
UNION ALL SELECT N'> Fulltext Crawl Bandwidth MIN = ' + QUOTENAME(run_value) + N', default 0'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'sp_configure'
             AND name   = N'FT crawl bandwidth (min)'
             AND run_value NOT IN (N'0')

-- Diagnostic - Instance - non-default - ft notify bandwidth maximum <> 100
UNION ALL SELECT N'> Fulltext Notify Bandwidth MAX = ' + QUOTENAME(run_value) + N', default 100'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'sp_configure'
             AND name   = N'FT notify bandwidth (max)'
             AND run_value NOT IN (N'100')

-- Diagnostic - Instance - non-default - ft notify bandwidth minimum <> 0
UNION ALL SELECT N'> Fulltext Notify Bandwidth MIN = ' + QUOTENAME(run_value) + N', default 0'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'sp_configure'
             AND name   = N'FT notify bandwidth (min)'
             AND run_value NOT IN (N'0')

-- Diagnostic - Instance - Good to know - default Fulltext language (if Fulltext enabled)
UNION ALL SELECT N'> Default Fulltext language = ' + QUOTENAME(i.run_value) + N' ' + l.alias + N' ' + QUOTENAME(l.name)
            FROM tempdb.dbo.SQLXL_Index_sys_instance AS i
            JOIN sys.syslanguages                  AS l
              ON TRY_CAST(i.run_value AS SMALLINT)  = l.lcid
           WHERE i.source = N'sp_configure'
             AND i.name   = N'default full-text language'
             AND 1 = (SELECT TRY_CAST(run_value AS TINYINT)
                        FROM tempdb.dbo.SQLXL_Index_sys_instance
                       WHERE source = N'SERVERPROPERTY'
                         AND name   = N'IsFullTextInstalled'
                     )

-- Diagnostic - Instance - non-default - max full-text crawl range <> 4 CPUs
UNION ALL SELECT N'> Fulltext Crawl Range MAX = ' + QUOTENAME(run_value) + N', default 4'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'sp_configure'
             AND name   = N'max full-text crawl range'
             AND run_value NOT IN (N'4')

------------------------------------------------------------
-- Diagnostic - Instance - non-default - Advanced Analytics is Installed
UNION ALL SELECT N'Advanced Analytics [INSTALLED]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'SERVERPROPERTY'
             AND name   = N'IsAdvancedAnalyticsInstalled'
             AND run_value     IN (N'1')

-- Diagnostic - Instance - non-default - Big Data Cluster is Installed
UNION ALL SELECT N'Big Data Cluster [INSTALLED]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'SERVERPROPERTY'
             AND name   = N'IsBigDataCluster'
             AND run_value     IN (N'1')

-- Diagnostic - Instance - non-default - Always On (HADR) Enabled
UNION ALL SELECT N'Always On (HADR) [ENABLED]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'SERVERPROPERTY'
             AND name   = N'IsHadrEnabled'
             AND run_value     IN (N'1')

-- Diagnostic - Instance - non-default - PolyBase is Installed
UNION ALL SELECT N'PolyBase feature [INSTALLED]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'SERVERPROPERTY'
             AND name   = N'IsPolyBaseInstalled'
             AND run_value     IN (N'1')

-- Diagnostic - Instance - non-default - XTP (In-Memory Tables) is Supported
UNION ALL SELECT N'XTP In-memory tables [SUPPORTED]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'SERVERPROPERTY'
             AND name   = N'IsXTPSupported'
             AND run_value     IN (N'1')

------------------------------------------------------------
-- Diagnostic - Instance - non-default - tempdb Is Metadata Memory Optimized
UNION ALL SELECT N'tempdb Metadata Memory Optimized [ENABLED]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'SERVERPROPERTY'
             AND name   = N'IstempdbMetadataMemoryOptimized'
             AND run_value  IN (N'1')

-- Diagnostic - Instance - SQL 2019+ tempdb Metadata Memory Optimized NOT enabled'
UNION ALL SELECT N'tempdb Metadata Memory Optimized [NOT ENABLED]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source     = N'SERVERPROPERTY'
             AND name       = N'IstempdbMetadataMemoryOptimized'
             AND run_value IN (N'0')
             AND (SELECT version_major
                    FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters
                 ) >= 15 -- 2019+

-- Diagnostic - Instance - non-default - Server Is Clustered
UNION ALL SELECT N'Server is [CLUSTERED]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'SERVERPROPERTY'
             AND name   = N'IsClustered'
             AND run_value     IN (N'1')

-- Diagnostic - Instance - non-default - Uses External Authentication Only
UNION ALL SELECT N'External Authentication [ONLY]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'SERVERPROPERTY'
             AND name   = N'IsExternalAuthenticationOnly'
             AND run_value     IN (N'1')

-- Diagnostic - Instance - non-default - Uses Integrated Security Only
UNION ALL SELECT N'Integrated Security [ONLY]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'SERVERPROPERTY'
             AND name   = N'IsIntegratedSecurityOnly'
             AND run_value     IN (N'1')

-- Diagnostic - Instance - non-default - Is SQL Server Local DB
UNION ALL SELECT N'[SQL Server Express LocalDB]'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'SERVERPROPERTY'
             AND name   = N'IsLocalDB'
             AND run_value     IN (N'1')

-- Diagnostic - Instance - non-default - Is in Single User Mode
UNION ALL SELECT N'Instance in [SINGLE USER] mode'
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'SERVERPROPERTY'
             AND name   = N'IsSingleUser'
             AND run_value     IN (N'1')
) src(diagnostic);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Completed Instance diagnostics'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-- NOTE: no index performance related items from SERVERPROPERTY as of yet

/******************************************************************************************************************************************\
***DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE***
\******************************************************************************************************************************************/
-- For SQL 2016, create reference table of all DATABASE SCOPED CONFIGURATIONS and their DEFAULT VALUES to compare against actual settings
-- SQL 2017 introduced new column [is_value_default] to simplify matters going forwardS
-- SQL 2019 changed some of the names as reflected below

IF (OBJECT_ID(N'tempdb..#database_scoped_configurations') IS NOT NULL) DROP TABLE #database_scoped_configurations;

SELECT TOP 0
       name          = CAST(NULL AS SYSNAME)      COLLATE DATABASE_DEFAULT
      ,default_value = CAST(NULL AS VARCHAR(100)) COLLATE DATABASE_DEFAULT
  INTO #database_scoped_configurations;

INSERT
  INTO #database_scoped_configurations (name,default_value)
VALUES -- default values for database scoped configurations
 ('ACCELERATED_PLAN_FORCING',N'1')
,('ASYNC_STATS_UPDATE_WAIT_AT_LOW_PRIORITY',N'OFF')
,('CE_FEEDBACK',N'1')
,('DISABLE_BATCH_MODE_ADAPTIVE_JOINS',N'0'),('BATCH_MODE_ADAPTIVE_JOINS',N'1')               -- Name change 2019+
,('DISABLE_BATCH_MODE_MEMORY_GRANT_FEEDBACK',N'0'),('BATCH_MODE_MEMORY_GRANT_FEEDBACK',N'1') -- Name change 2019+
,('BATCH_MODE_ON_ROWSTORE',N'1')
,('DEFERRED_COMPILATION_TV',N'1')
,('DOP_FEEDBACK',N'0')
,('DW_COMPATIBILITY_LEVEL',N'AUTO')                                                         -- Azure Synapse Analytics only
,('ELEVATE_ONLINE',N'OFF')
,('ELEVATE_RESUMABLE',N'OFF')
,('EXEC_QUERY_STATS_FOR_SCALAR_FUNCTIONS',N'ON')
,('GLOBAL_TEMPORARY_TABLE_AUTO_DROP',N'1')
,('IDENTITY_CACHE',N'1')
,('INTERLEAVED_EXECUTION_TVF',N'1'),('DISABLE_INTERLEAVED_EXECUTION_TVF',N'1')               -- Name change 2019+
,('ISOLATE_SECURITY_POLICY_CARDINALITY',N'0')
,('LAST_QUERY_PLAN_STATS',N'0')
,('LEDGER_DIGEST_STORAGE_ENDPOINT',N'0')
,('LEGACY_CARDINALITY_ESTIMATION',N'0')
,('LIGHTWEIGHT_QUERY_PROFILING',N'1')
,('MAXDOP',N'0')
,('MEMORY_GRANT_FEEDBACK_PERCENTILE',N'0')
,('MEMORY_GRANT_FEEDBACK_PERSISTENCE',N'1')
,('OPTIMIZE_FOR_AD_HOC_WORKLOADS',N'0')
,('OPTIMIZED_PLAN_FORCING',N'1')
,('PARAMETER_SENSITIVE_PLAN_OPTIMIZATION',N'1')
,('PARAMETER_SNIFFING',N'1')
,('PAUSED_RESUMABLE_INDEX_ABORT_DURATION_MINUTES',N'1440')
,('QUERY_OPTIMIZER_HOTFIXES',N'0')
,('ROW_MODE_MEMORY_GRANT_FEEDBACK',N'1')
,('TSQL_SCALAR_UDF_INLINING',N'1')
,('VERBOSE_TRUNCATION_WARNINGS',N'1')
,('XTP_PROCEDURE_EXECUTION_STATISTICS',N'0')
,('XTP_QUERY_EXECUTION_STATISTICS',N'0');

SET ANSI_WARNINGS ON; -- Needed for "FOR XML PATH"

INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
----------------------------------------------------------------------------------------------------
-- Critical = 0 - tempdb.dbo.SQLXL_Index_sys_databases
----------------------------------------------------------------------------------------------------
SELECT rec_type='D',database_id=d.database_id,parent_object_id=d.database_id,object_id=d.database_id,index_id=d.database_id,type='DB'
      ,diagnostic_type_id=0
      ,diagnostic=STUFF(
-- Diagnostic - DB - non-default - Database State is not not ONLINE
 IIF(d.state <> 0,NCHAR(10) + N'State: ' +d.state_desc,N'')

-- Diagnostic - DB - non-default - Database is Non-Readable Secondary
+IIF(    rs.role_desc = N'SECONDARY'
     AND ar.secondary_role_allow_connections_desc = N'NO'
    ,NCHAR(10) + N'[NON-READABLE SECONDARY]'
    ,N'')

-- Diagnostic - DB - non-default - Auto Close is ON
+IIF(d.is_auto_close_on > 0,NCHAR(10) + N'Auto close [ON] - turn OFF',N'')

-- Diagnostic - DB - non-default - Auto shrink is ON
+IIF(d.is_auto_shrink_on > 0,NCHAR(10) + N'Auto shrink [ON] - turn OFF',N'')

-- Diagnostic - DB - non-default - Database in [STANDBY] mode - read-only for restore log
+IIF(d.is_in_standby > 0,NCHAR(10) + N'Database in [STANDBY] - read-only for restore log',N'')

-- Diagnostic - DB - non-default - Database NOT cleanly shut down
+IIF(    d.is_cleanly_shutdown = 0
     AND d.is_auto_close_on = 1
    ,NCHAR(10) + N'[NOT] cleanly shut down'
    ,N'')

,1,1,N'')
/*** LOCAL TESTING ***
SELECT d.name,ar.replica_id,rs.replica_id
--*/
  FROM tempdb.dbo.SQLXL_Index_sys_databases                           AS d
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_availability_replicas               AS ar
    ON d.replica_id                                               = ar.replica_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_dm_hadr_availability_replica_states AS rs
    ON d.replica_id                                               = rs.replica_id
----------------------------------------------------------------------------------------------------
-- Warning = 2 - tempdb.dbo.SQLXL_Index_sys_databases
----------------------------------------------------------------------------------------------------
UNION ALL
SELECT rec_type='D',database_id=d.database_id,parent_object_id=d.database_id,object_id=d.database_id,index_id=d.database_id,type='DB'
      ,diagnostic_type_id=2
      ,diagnostic=STUFF(
-- Diagnostic - DB - non-default - Database in READ ONLY mode
 IIF(d.is_read_only > 0,NCHAR(10) + N'Database in [READ ONLY] mode',N'')

-- Diagnostic - DB - non-default - Recovery model is not FULL
+IIF(d.recovery_model > 1,NCHAR(10) + N'Recovery model ' + QUOTENAME(d.recovery_model_desc),N'')

-- Diagnostic - DB - non-default - Delayed durability ENABLED, ALLOWED or FORCED
+IIF(d.delayed_durability > 0,NCHAR(10) + N'Delayed durability ' + QUOTENAME(d.delayed_durability_desc),N'')

-- Diagnostic - DB - non-default - additional Memory optimized features (e.g. Hybrid Buffer Pool) are enabled
+IIF(d.is_memory_optimized_ENABLED > 0,NCHAR(10) + N'XTP In-Memory optimized [ENABLED]',N'')

-- Diagnostic - DB - non-default - DB Mixed page allocations are OFF
+IIF(d.is_mixed_page_allocation_on = 0,NCHAR(10) + N'DB Mixed page allocations [OFF], ON can reduce SGAM contention',N'')

-- Diagnostic - DB - non-default - Target recovery time = 0, using Automatic Checkpoints
-- Diagnostic - DB - non-default - Target recovery time <> 0 (default 60 seconds)
+IIF(ISNULL(d.target_recovery_time_in_seconds,0) = 0
    ,NCHAR(10) + N'Target recovery time [ZERO], using Automatic Checkpoints'
    ,IIF(ISNULL(d.target_recovery_time_in_seconds,0) NOT IN (0,60)
        ,NCHAR(10) + N'Target recovery time '
                   + QUOTENAME(d.target_recovery_time_in_seconds)
                   + N' seconds, affects CHECKPOINT frequency'
        ,N'')
    )
,1,1,N'')
  FROM tempdb.dbo.SQLXL_Index_sys_databases AS d
----------------------------------------------------------------------------------------------------
-- Performance = 4 - tempdb.dbo.SQLXL_Index_sys_databases
----------------------------------------------------------------------------------------------------
UNION ALL
SELECT rec_type='D',database_id=d.database_id,parent_object_id=d.database_id,object_id=d.database_id,index_id=d.database_id,type='DB'
      ,diagnostic_type_id=4,diagnostic=STUFF(
-- Diagnostic - DB - non-default - Database compatibility <> Instance Product Major Version
 IIF(d.compatibility_level <> 10 * mv.ProductMajorVersion
    ,NCHAR(10) + N'DB compatibility '
               + QUOTENAME(d.compatibility_level)
               + N' <> server '
               + QUOTENAME(10*mv.ProductMajorVersion)
    ,N'')

-- Diagnostic - DB - non-default - Database Collation <> Server Collation
+IIF(d.collation_name <> i.collation
    , NCHAR(10) + N'DB Collation: ' +d.collation_name
    + NCHAR(10) + N' <> Server: '  +i.collation
    ,N'')

-- Diagnostic - DB - non-default - Database is Always On
+IIF(d.replica_id IS NOT NULL OR d.group_database_id IS NOT NULL,NCHAR(10) + N'Always On database',N'')

------------------------------------------------------------
-- Database Statistics settings
------------------------------------------------------------
+IIF(   d.is_auto_create_stats_on             = 0
     OR d.is_auto_create_stats_incremental_on = 0
     OR d.is_auto_update_stats_on             = 0
     OR d.is_auto_update_stats_async_on       = 1
    ,NCHAR(10) + N'Statistics:'
-- Diagnostic - DB - non-default - Statistics are NOT Auto created
              +STUFF(IIF(d.is_auto_create_stats_on = 0,N', Auto create [OFF]',N'')

-- Diagnostic - DB - non-default - Statistics Incremental OFF (SQL 2014+)
                    +IIF(    d.is_auto_create_stats_incremental_on = 0
                         AND PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 12 -- SQL 2014+
                        ,N', Incremental [OFF]'
                        ,N'')

-- Diagnostic - DB - non-default - Statistics Auto update OFF
                    +IIF(d.is_auto_update_stats_on = 0,N', Auto update [OFF]',N'')

-- Diagnostic - DB - non-default - Statistics Auto update asynchronous ON
                    +IIF(d.is_auto_update_stats_async_on = 1
                        ,NCHAR(10) + N'Statistics: Auto update statistics asynch [ON]'
                        ,N'')
                    ,1,1,N'')
    ,N'')

------------------------------------------------------------
-- database settings
------------------------------------------------------------
-- Diagnostic - DB - non-default - Query parameterization FORCED
+IIF(d.is_parameterization_forced = 1,NCHAR(10) + N'Query parameterization [FORCED]',N'')

-- Diagnostic - DB - non-default - Date correlation optimization ENABLED
+IIF(d.is_date_correlation_on = 0,NCHAR(10) + N'Date correlation optimization [OFF]',N'')

-- Diagnostic - DB - non-default - Supplemental logging ENABLED
+IIF(d.is_supplemental_logging_enabled > 0,NCHAR(10) + N'Supplemental logging [ENABLED]',N'')

-- Diagnostic - DB - non-default - tempdb spills to remote store ENABLED
+IIF(d.is_tempdb_spill_to_remote_store > 0,NCHAR(10) + N'tempdb spills to [REMOTE STORE]',N'')

-- Diagnostic - DB - non-default - Result set caching - Azure Synapse Analytics Gen2 -  ENABLED
+IIF(d.is_result_set_caching_on > 0,NCHAR(10) + N'Result set caching [ON]',N'') -- Azure Synapse Analytics Gen2

-- Diagnostic - DB - non-default - Read committed snapshot isolation ENABLED
+IIF(d.is_read_committed_snapshot_on > 0,NCHAR(10) + N'Read committed snapshot [ON]',N'')

-- Diagnostic - DB - non-default - Snapshot isolation ENABLED
+IIF(d.snapshot_isolation_state > 0,NCHAR(10) + N'Snapshot isolation ' + QUOTENAME(d.snapshot_isolation_state_desc),N'')

-- Diagnostic - DB - non-default - Change Data Capture ENABLED
+IIF(d.is_cdc_enabled > 0,NCHAR(10) + N'Change Data Capture (CDC) [ENABLED]',N'')

-- Diagnostic - DB - non-default - Change Feed ENABLED
+IIF(d.is_change_feed_enabled > 0,NCHAR(10) + N'Change Feed [ENABLED]',N'')

------------------------------------------------------------
-- Query store
------------------------------------------------------------
-- Diagnostic - DB - Good to know - Query Store Status & Properties
-- Diagnostic - DB - non-default - Query Store Readonly - Reason
/*** LOCAL TESTING ***
SELECT database_id=d.database_id,parent_object_id=d.database_id,object_id=d.database_id,index_id=d.database_id,type='DB',STUFF(
--*/
+IIF(mv.ProductMajorVersion >= 13 AND qso.actual_state >= 0 -- only show if SQL Server version 2016+ and data collected for that database
    ,NCHAR(10)
    +N'Query Store Status ' + QUOTENAME(qso.actual_state_desc)
    ---------------------------------------------------------
    +IIF(qso.readonly_reason > 0
        ,N' Reason: '
        +CASE qso.readonly_reason
              WHEN      1 THEN N'DB READ_ONLY'
              WHEN      2 THEN N'DB SINGLE_USER'
              WHEN      4 THEN N'DB EMERGENCY'
              WHEN      8 THEN N'DB SECONDARY REPLICA'
              WHEN  65536 THEN N'QS SIZE LIMIT'
              WHEN 131072 THEN N'QS STATEMENT MEMORY LIMIT'
              WHEN 262144 THEN N'QS PERSISTENCE LIMIT'
              WHEN 524288 THEN N'DB OUT OF SPACE'
              ELSE N'*NOT FOUND*'
         END
        ,N'')

-- Diagnostic - DB - Query Store settings and properties
    +IIF(qso.actual_state_additional_info > N''
        ,NCHAR(10) + N'> State Info: ' +qso.actual_state_additional_info
        ,N'')
    ---------------------------------------------------------
    +IIF(qso.actual_state > 0
        -----------------------------------------------------
        ,NCHAR(10) +N'> Size - Max: ' + tempdb.dbo.SQLXL_3SD(qso.max_storage_size_mb    ,N'MB')
                   +N' Used: '        + tempdb.dbo.SQLXL_3SD(qso.current_storage_size_mb,N'MB')
                   +IIF(qso.max_storage_size_mb > 0
                       ,N' (' + tempdb.dbo.SQLXL_3SD(1.0 * qso.current_storage_size_mb / qso.max_storage_size_mb,N'%') + N')'
                       ,N'')
        +NCHAR(10) +N'> Cleanup '   + QUOTENAME(qso.size_based_cleanup_mode_desc)
                   +N', Stale '     + QUOTENAME(qso.stale_query_threshold_days) + N' days'
        -----------------------------------------------------
        +NCHAR(10) +N'> Capture mode ' + QUOTENAME(ISNULL(qso.query_capture_mode_desc,N'ALL')) -- default for 2016 is ALL
                   +IIF(mv.ProductMajorVersion >= 14  -- 2017+
                       ,N', Waits '   +IIF(qso.wait_stats_capture_mode = 1,N'[ON]',N'[OFF]')
                       ,N'')
                   +IIF(mv.ProductMajorVersion >= 15  -- 2019+
                       ,IIF(qso.capture_policy_execution_count >= 0,N', Exec CNT ' +QUOTENAME(qso.capture_policy_execution_count),N'')
                       +IIF(qso.capture_policy_Total_compile_cpu_time_ms   >= 0
                           ,N', Compile Time: ' + tempdb.dbo.SQLXL_3SD(qso.capture_policy_Total_compile_cpu_time_ms  ,N'M')
                           ,N'')
                       +IIF(qso.capture_policy_Total_execution_cpu_time_ms >= 0
                           ,N', Execution Time: ' + tempdb.dbo.SQLXL_3SD(qso.capture_policy_Total_execution_cpu_time_ms,N'M')
                           ,N'')
                       +IIF(qso.capture_policy_stale_threshold_hours       >= 0
                           ,N', Stale: '   + CAST(qso.capture_policy_stale_threshold_hours AS NVARCHAR(20)) + N'hrs'
                           ,N'')
                       ,N'')
        -----------------------------------------------------
        +NCHAR(10) +N'> Flush interval ' + CAST(qso.flush_interval_seconds  AS NVARCHAR(20)) + N'sec'
                   +N', Max Plans '      + CAST(qso.max_plans_per_query     AS NVARCHAR(20))
        -----------------------------------------------------
        +NCHAR(10) +N'> Aggregation interval ' + CAST(qso.interval_length_minutes AS NVARCHAR(20)) + N'min'
    ---------------------------------------------------------
    -- Automatic Tuning
    ---------------------------------------------------------
        +IIF(mv.ProductMajorVersion >= 14
-- Diagnostic - DB - non-default - Query Store Auto Tune
            ,IIF(ato.name IS NOT NULL
                ,NCHAR(10) + N'Auto Tune: ' + ato.name + N' is ' + ato.actual_state_desc
                           + IIF(ato.desired_state <> ato.actual_state
                                ,NCHAR(10) + N'> Reason: ' +ato.reason_desc
                                ,N'') -- IIF(ato.desired_state <> ato.actual_state
                ,N'')                 -- IIF(ato.name IS NOT NULL
            ,N'')                     -- IIF(mv.ProductMajorVersion >= 14
        ,N'')                         -- IIF(qso.actual_state > 0
    ,N'')                             -- IIF(mv.ProductMajorVersion >= 13
,1,1,N'')
  FROM tempdb.dbo.SQLXL_Index_sys_databases                         AS d
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_database_automatic_tuning_options AS ato
    ON d.database_id                                               = ato.database_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_database_query_store_options      AS qso
    ON d.database_id                                               = qso.database_id
 CROSS
  JOIN (SELECT collation = run_value
         FROM tempdb.dbo.SQLXL_Index_sys_instance
        WHERE source = N'SERVERPROPERTY'
          AND name   = N'COLLATION'
      ) AS i
 CROSS
  JOIN (SELECT ProductMajorVersion = TRY_CAST(run_value AS INT)
         FROM tempdb.dbo.SQLXL_Index_sys_instance
        WHERE source = N'SERVERPROPERTY'
          AND name   = N'ProductMajorVersion'
      ) AS mv

----------------------------------------------------------------------------------------------------
-- Non-Default = 6 - tempdb.dbo.SQLXL_Index_sys_databases
----------------------------------------------------------------------------------------------------
UNION ALL
SELECT rec_type='D',database_id,parent_object_id=d.database_id,object_id=d.database_id,index_id=d.database_id,type='DB'
      ,diagnostic_type_id=6
      ,diagnostic=STUFF(
-- Diagnostic - DB - non-default - ANSI STANDARD is ON: ansi_null_default
-- Diagnostic - DB - non-default - ANSI STANDARD is ON: ansi_nulls
-- Diagnostic - DB - non-default - ANSI STANDARD is ON: ansi_padding
-- Diagnostic - DB - non-default - ANSI STANDARD is ON: ansi_warnings
 IIF(   d.is_ansi_null_default_on = 1
     OR d.is_ansi_nulls_on        = 1
     OR d.is_ansi_padding_on      = 1
     OR d.is_ansi_warnings_on     = 1
    ,NCHAR(10) + N'ANSI STANDARDS ON: ' + STUFF(IIF(d.is_ansi_null_default_on = 1,N', NULL DEFAULT',N'')
                                               +IIF(d.is_ansi_nulls_on        = 1,N', NULLS'  ,N'')
                                               +IIF(d.is_ansi_padding_on      = 1,N', PADDING',N'')
                                               +IIF(d.is_ansi_warnings_on     = 1,N', WARNNGS',N'')
                                               ,1,2,N'')
    ,N'')

-- Diagnostic - DB - non-default - ANSI STANDARD is ON: concat_null_yields_null
-- Diagnostic - DB - non-default - ANSI STANDARD is ON: cursor_close_on_commit
-- Diagnostic - DB - non-default - ANSI STANDARD is ON: arithabort
+IIF(   d.is_cursor_close_on_commit_on  = 1
     OR d.is_arithabort_on              = 1
     OR d.is_concat_null_yields_null_on = 1
    ,NCHAR(10) + N'ANSI STANDARDS ON: ' + STUFF( IIF(d.is_cursor_close_on_commit_on  = 1,N', Cursor close on commit' ,N'')
                                              +IIF(d.is_arithabort_on                = 1,N', Arithabort'             ,N'')
                                              +IIF(d.is_concat_null_yields_null_on   = 1,N', Concat null yields null',N'')
                                             ,1,2,N'')
    ,N'')

-- Diagnostic - DB - non-default - ANSI Quoted identifier ON
+IIF(d.is_quoted_identifier_on > 0,NCHAR(10) + N'ANSI Quoted identifier [ON]',N'')

-- Diagnostic - DB - non-default - ANSI Numeric roundabort ON
+IIF(d.is_numeric_roundabort_on > 0,NCHAR(10) + N'Numeric roundabort [ON]',N'')

-- Diagnostic - DB - non-default - Recursive triggers ON
+IIF(d.is_recursive_triggers_on > 0,NCHAR(10) + N'Recursive triggers [ON]',N'')

-- Diagnostic - DB - non-default - Local cursor default ON
+IIF(d.is_local_cursor_default > 0,NCHAR(10) + N'Local cursor default [ON]',N'')

-- Diagnostic - DB - non-default - Fulltext ENABLED
+IIF(d.is_fulltext_enabled > 0,NCHAR(10) + N'Fulltext [ENABLED]',N'')

-- Diagnostic - DB - non-default - Database marked NOT Trustworthy
+IIF(d.is_trustworthy_on = 0,NCHAR(10) + N'Database marked [NOT TRUSTWORTHY]',N'')

-- Diagnostic - DB - non-default - Database chaining ON
+IIF(d.is_db_chaining_on > 0,NCHAR(10) + N'Database chaining [ON]',N'')

-- Diagnostic - DB - non-default - Encrypted
+IIF(d.is_encrypted > 0,NCHAR(10) + N'Encrypted' + IIF(d.is_master_key_encrypted_by_server > 0,N', Master key encrypted by server',N''),N'')

-- NOTE - DB - column [is_subscribed] - BOL: "This column isn't used. It will always return 0"

-- Diagnostic - DB - non-default - Publication database in  replication
+IIF(d.is_merge_published > 0,NCHAR(10) + N'Publication database in  replication',N'')

-- Diagnostic - DB - non-default - Distribution Database for replication
+IIF(d.is_distributor > 0,NCHAR(10) + N'Distribution Database for replication',N'')

-- Diagnostic - DB - non-default - Database in Sync with backup
+IIF(d.is_sync_with_backup > 0,NCHAR(10) + N'Database Replication synchronization with backup',N'')

-- Diagnostic - DB - non-default - Database is Published
+IIF(d.is_published > 0,NCHAR(10) + N'Published',N'')

-- Diagnostic - DB - non-default - Database Broker DISABLED
+IIF(d.is_broker_enabled = 0,NCHAR(10) + N'Broker [DISABLED]',N'')

-- Diagnostic - DB - non-default - Reuse of Log space is waiting on
+IIF(d.log_reuse_wait > 0,NCHAR(10) + N'Log reuse wait ' +QUOTENAME(d.log_reuse_wait_desc),N'')

-- Diagnostic - DB - non-default - User Access is not MULTI_USER
+IIF(d.user_access > 0,NCHAR(10) + N'User Access ' + QUOTENAME(d.user_access_desc),N'')

-- Diagnostic - DB - non-default - Honor broker priority is OFF
+IIF(d.is_honor_broker_priority_on = 0,NCHAR(10) + N'Honor broker priority [OFF]',N'')

-- Diagnostic - DB - non-default - Accelerated database recovery ON
+IIF(d.is_accelerated_database_recovery_on > 0,NCHAR(10) + N'Accelerated database recovery [ON]',N'')

-- Diagnostic - DB - non-default - Federation member
+IIF(d.is_federation_member > 0,NCHAR(10) + N'Database is Federation member',N'')

-- Diagnostic - DB - non-default - Ledger Database Enabled
+IIF(d.is_ledger_on > 0,NCHAR(10) + N'Ledger Database [ENABLED]',N'')

-- Diagnostic - DB - non-default - Remote data archive ENABLED - deprecated SQL 2022+
+IIF(d.is_remote_data_archive_enabled > 0,NCHAR(10) + N'Remote data archive [ENABLED] - deprecated SQL 2022+',N'')

-- Diagnostic - DB - non-default - Temporal history retention Enabled
+IIF(d.is_temporal_history_retention_enabled > 0,NCHAR(10) + N'Temporal history retention [ENABLED]',N'')

-- Diagnostic - DB - non-default - Data retention Enabled
+IIF(d.is_data_retention_enabled > 0,NCHAR(10) + N'Data retention [ENABLED]',N'')

-- Diagnostic - DB - non-default - Stale page detection Enabled - Azure Synapse Analytics Gen2.
+IIF(d.is_stale_page_detection_on > 0,NCHAR(10) + N'Stale page detection [ON]',N'')

-- Diagnostic - DB - non-default - Memory optimized tables elevate to SNAPSHOT is OFF
+IIF(d.is_memory_optimized_elevate_to_snapshot_on = 0,NCHAR(10) + N'XTP Memory optimized elevate to SNAPSHOT [OFF]',N'')
,1,1,N'')
  FROM tempdb.dbo.SQLXL_Index_sys_databases d

----------------------------------------------------------------------------------------------------
-- Information = 8 - tempdb.dbo.SQLXL_Index_sys_databases
----------------------------------------------------------------------------------------------------
UNION ALL
SELECT rec_type='D',database_id=d.database_id,parent_object_id=d.database_id,object_id=d.database_id,index_id=d.database_id,type='DB'
      ,diagnostic_type_id=6
      ,diagnostic=STUFF(
-- Diagnostic - DB - non-default - Snapshot source database
 IIF(d.source_database_id > 0
    ,NCHAR(10) + N'Snapshot source DB '
               + QUOTENAME((SELECT name
                              FROM tempdb.dbo.SQLXL_Index_sys_databases x
                             WHERE d.source_database_id = x.database_id
                           ))
    ,N'')

-- Diagnostic - DB - non-default - Physical database name <> DB name
+IIF(d.physical_database_name <> d.name
    ,NCHAR(10) + N'Physical database name ' + QUOTENAME(d.physical_database_name)
    ,N'')

------------------------------------------------------------
-- Contained database
------------------------------------------------------------
-- Diagnostic - DB - non-default - Contained database status PARTIAL
+IIF(d.containment > 0 ,NCHAR(10) + N'Contained database status ' +d.containment_desc,N'')

-- Diagnostic - DB - non-default - Contained database default language
+IIF(d.default_language_lcid > 0,NCHAR(10) + N'> Default language ' +QUOTENAME(d.default_language_name),N'')

-- Diagnostic - DB - non-default - Contained database fulltext language
+IIF(d.default_fulltext_language_lcid > 0
    ,NCHAR(10) + N'> fulltext language ' +QUOTENAME(d.default_fulltext_language_name)
    ,N'')

-- Diagnostic - DB - non-default - Contained database 2 digit year cutoff
+IIF(d.two_digit_year_cutoff > 0,NCHAR(10) + N'> 2 digit year cutoff ' +QUOTENAME(d.two_digit_year_cutoff),N'')

-- Diagnostic - DB - non-default - Contained DB nested triggers ON
+IIF(d.is_nested_triggers_on > 0,NCHAR(10) + N'> Contained DB nested triggers [ON]',N'')

-- Diagnostic - DB - non-default - Contained DB transform noise words ON
+IIF(d.is_transform_noise_words_on > 0,NCHAR(10) + N'> Contained DB transform noise words [ON]',N'')

------------------------------------------------------------
-- Diagnostic - DB - non-default - Page verify option not CHECKSUM
+IIF(d.page_verify_option <> 2,NCHAR(10) + N'Page verify option ' +d.page_verify_option_desc,N'')

-- Diagnostic - DB - non-default - Memory Optimized resource pool ID
+IIF(d.resource_pool_id > 0,NCHAR(10) + N'XTP Memory optimized resource pool ID ' + CAST(d.resource_pool_id AS NVARCHAR(100)),N'')

-- Diagnostic - DB - non-default - Catalog Collation type not DATABASE DEFAULT - Azure SQL Database
+IIF(d.catalog_collation_type > 0,NCHAR(10) + N'Catalog Collation type ' + d.catalog_collation_type_desc,N'')

-- Diagnostic - DB - Recently created or attached (< 90 days)
+IIF(DATEDIFF(DAY,d.create_date,sp.Collection_DTTM) < 90
    ,NCHAR(10) + N'Created/Attached on ' +CONVERT(NVARCHAR(10),d.create_date,2)
               + N' - ' + TRY_CAST(DATEDIFF(DAY,d.create_date,sp.Collection_DTTM) AS VARCHAR(10)) + N' Days'
    ,N'')
------------------------------------------------------------
+IIF(sc.diagnostic IS NOT NULL,sc.diagnostic,N'')
,1,1,N'')
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON
SELECT rec_type='D',database_id=d.database_id,parent_object_id=d.database_id,object_id=d.database_id,index_id=d.database_id
      ,sc.*
--*/
  FROM tempdb.dbo.SQLXL_Index_sys_databases d
 CROSS
  JOIN tempdb.dbo.SQLXL_Index_sys_Startup_Parameters AS sp
 OUTER
 APPLY (SELECT -- double SELECT to accomodate the ").value('(./text())[1]',N'NVARCHAR(4000)')" below
-- Diagnostic - DB - DB Config non-default - ACCELERATED_PLAN_FORCING
-- Diagnostic - DB - DB Config non-default - ASYNC_STATS_UPDATE_wait_AT_LOW_PRIORITY
-- Diagnostic - DB - DB Config non-default - CE_FEEDBACK
-- Diagnostic - DB - DB Config non-default - DISABLE_BATCH_MODE_ADAPTIVE_JOINS
-- Diagnostic - DB - DB Config non-default - BATCH_MODE_ADAPTIVE_JOINS - Name change 2019+
-- Diagnostic - DB - DB Config non-default - DISABLE_BATCH_MODE_MEMORY_GRANT_FEEDBACK
-- Diagnostic - DB - DB Config non-default - BATCH_MODE_MEMORY_GRANT_FEEDBACK - Name change 2019+
-- Diagnostic - DB - DB Config non-default - BATCH_MODE_ON_ROWSTORE
-- Diagnostic - DB - DB Config non-default - DEFERRED_COMPILATION_TV
-- Diagnostic - DB - DB Config non-default - DOP_FEEDBACK
-- Diagnostic - DB - DB Config non-default - DW_COMPATIBILITY_LEVEL
-- Diagnostic - DB - DB Config non-default - ELEVATE_ONLINE
-- Diagnostic - DB - DB Config non-default - ELEVATE_RESUMABLE
-- Diagnostic - DB - DB Config non-default - EXEC_QUERY_STATS_FOR_SCALAR_FUNCTIONS
-- Diagnostic - DB - DB Config non-default - GLOBAL_TEMPORARY_TABLE_AUTO_DROP
-- Diagnostic - DB - DB Config non-default - IDENTITY_CACHE
-- Diagnostic - DB - DB Config non-default - INTERLEAVED_EXECUTION_TVF
-- Diagnostic - DB - DB Config non-default - DISABLE_INTERLEAVED_EXECUTION_TVF - Name change 2019+
-- Diagnostic - DB - DB Config non-default - ISOLATE_SECURITY_POLICY_CARDINALITY
-- Diagnostic - DB - DB Config non-default - LAST_QUERY_PLAN_STATS
-- Diagnostic - DB - DB Config non-default - LEDGER_DIGEST_STORAGE_ENDPOINT
-- Diagnostic - DB - DB Config non-default - LEGACY_CARDINALITY_ESTIMATION
-- Diagnostic - DB - DB Config non-default - LIGHTWEIGHT_QUERY_PROFILING
-- Diagnostic - DB - DB Config non-default - MAXDOP
-- Diagnostic - DB - DB Config non-default - MEMORY_GRANT_FEEDBACK_PERCENTILE
-- Diagnostic - DB - DB Config non-default - MEMORY_GRANT_FEEDBACK_PERSISTENCE
-- Diagnostic - DB - DB Config non-default - OPTIMIZE_FOR_AD_HOC_WORKLOADS
-- Diagnostic - DB - DB Config non-default - OPTIMIZED_PLAN_FORCING
-- Diagnostic - DB - DB Config non-default - PARAMETER_SENSITIVE_PLAN_OPTIMIZATION
-- Diagnostic - DB - DB Config non-default - PARAMETER_SNIFFING
-- Diagnostic - DB - DB Config non-default - PAUSED_RESUMABLE_INDEX_ABORT_DURATION_MINUTES
-- Diagnostic - DB - DB Config non-default - QUERY_OPTIMIZER_HOTFIXES
-- Diagnostic - DB - DB Config non-default - ROW_MODE_MEMORY_GRANT_FEEDBACK
-- Diagnostic - DB - DB Config non-default - TSQL_SCALAR_UDF_INLINING
-- Diagnostic - DB - DB Config non-default - VERBOSE_TRUNCATION_WARNINGS
-- Diagnostic - DB - DB Config non-default - XTP_PROCEDURE_EXECUTION_STATISTICS
-- Diagnostic - DB - DB Config non-default - XTP_QUERY_EXECUTION_STATISTICS;
        (SELECT  NCHAR(10) + N'Scoped config ' + src.name
               + NCHAR(10) + N'> value ' +QUOTENAME(CAST(db.value AS NVARCHAR(100))) + N' is not DEFAULT: ' + QUOTENAME(src.default_value)
           FROM #database_scoped_configurations                         AS src
           JOIN tempdb.dbo.SQLXL_Index_sys_database_scoped_configurations AS db
             ON src.name           = db.name
            AND (   (    db.is_value_default IS NULL
                     AND src.default_value <> CAST(db.value AS VARCHAR(100))
                    )
                 OR db.is_value_default  = 0
                )
          WHERE d.database_id      = db.database_id
            FOR XML PATH(N''),TYPE
        ).value('(./text())[1]',N'NVARCHAR(4000)')
       ) sc(diagnostic)

----------------------------------------------------------------------------------------------------
-- Metrics = 10 - tempdb.dbo.SQLXL_Index_sys_databases
----------------------------------------------------------------------------------------------------
UNION ALL
SELECT rec_type='D',database_id=d.database_id,parent_object_id=d.database_id,object_id=d.database_id,index_id=d.database_id,type='DB'
      ,diagnostic_type_id=6
      ,diagnostic=
-- Diagnostic - DB - > 5% of indexes with writes and no reads (BI21 & 22)
  N'Nonclustered rowstore indexes with writes & no reads - '
+ CAST(i.unused_idx_CNT AS NVARCHAR(20)) + N'/' + CAST(i.idx_CNT AS NVARCHAR(20))
+ IIF(i.idx_CNT > 0
     ,N'(' + tempdb.dbo.SQLXL_3SD(1.0 * I.unused_idx_CNT / i.idx_CNT,N'%') + N')'
     ,N'')
+ N' (BI21&22)'

/*** LOCAL TESTING ***
SELECT database_id=d.database_id,i.*
--*/

  FROM tempdb.dbo.SQLXL_Index_sys_databases d
 CROSS
 APPLY (SELECT unused_idx_CNT = SUM(IIF((ISNULL(i.ops_Total_read_CNT,0)+ISNULL(i.ius_User_read_CNT,0)) = 0,1,0))
              ,idx_CNT        = COUNT(1)
          FROM (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type = N'I'
               ) AS i
         WHERE i.obj_type    = N'U'
           AND i.type        = N'2'
           AND d.database_id = i.database_id
           AND (i.ops_Total_write_CNT + i.ius_user_updates_CNT) > 0
       ) i
 WHERE IIF(i.idx_CNT > 0
          ,100.0 * i.unused_idx_CNT / i.idx_CNT
          ,0.0) > 5.0
------------------------------------------------------------
) AS d
 WHERE d.diagnostic IS NOT NULL;

----------------------------------------------------------------------------------------------------
-- Cleanup temp table created
----------------------------------------------------------------------------------------------------
IF (OBJECT_ID(N'#database_scoped_configurations') IS NOT NULL) DROP TABLE #database_scoped_configurations;

----------------------------------------------------------------------------------------------------
-- Diagnostic - DB - < 10% of table & view nonclustered rowstore indexes with Included Columns (BI30 & 31)
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type='D',database_id=i.database_id,parent_object_id=i.database_id,object_id=i.database_id,index_id=i.database_id,type='DB'
      ,diagnostic_type_id = 4
      ,diagnostic=N'Included Columns: <10% Indexes - '
              + CAST(i.included_index_CNT AS NVARCHAR(20))
              + N'/'
              + CAST(i.index_CNT AS NVARCHAR(20))
              + N' (' + tempdb.dbo.SQLXL_3SD(1.0 * i.included_index_CNT / i.index_CNT,N'%') + N')' -- /zero handled by HAVING clause below
              + N' (BI30&31)'
  FROM (SELECT database_id
              ,included_index_CNT = SUM(IIF(Included_Columns_CNT > 0,1,0))
              ,index_CNT          = COUNT(1)
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE obj_type IN (N'U',N'V')
           AND obj_type_short_label <> N'HST'
           AND rec_type = N'I'
           AND type     = N'2'
         GROUP BY
               database_id
        HAVING COUNT(1) > 0  -- count of indexes greater than zero
       ) AS i
 WHERE (100.0 * i.included_index_CNT / i.index_CNT) < 10.0 -- /zero handled by HAVING clause above

----------------------------------------------------------------------------------------------------
-- Diagnostic - DB - less than 5% of views have indexes (BI32)
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type='D',database_id=i.database_id,parent_object_id=i.database_id,object_id=i.database_id,index_id=i.database_id,type='DB'
      ,diagnostic_type_id=4
      ,diagnostic = N'Views <5% Indexed - Views: '
                   + CAST(i.view_CNT AS NVARCHAR(20))
                   + N' CX: '
                   + CAST(i.clustered_index_CNT AS NVARCHAR(20))
                   + N' (' 
                   + tempdb.dbo.SQLXL_3SD(1.0 * i.clustered_index_CNT / i.view_CNT,N'%')  -- /zero handled by HAVING clause below
                   + N') NCX: '
                   + CAST(i.Nonclustered_index_CNT AS NVARCHAR(20))
                   + N' (BI32)'
  FROM (SELECT database_id
              ,clustered_index_CNT    = SUM(IIF(type = N'1',1,0))
              ,Nonclustered_index_CNT = SUM(IIF(type = N'2',1,0))
              ,view_CNT               = SUM(IIF(type = N'V',1,0))
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
           AND obj_type = N'V' -- View parent/object only
         GROUP BY
               database_id
        HAVING SUM(IIF(type = N'V',1,0)) > 0 -- view_CNT
       ) AS i
 WHERE 100.0 * i.clustered_index_CNT / i.view_CNT < 5.0 -- /zero handled by HAVING clause above

----------------------------------------------------------------------------------------------------
-- Diagnostic - DB - less than 5% of indexes with Filters (BI32)
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type='D',database_id=i.database_id,parent_object_id=i.database_id,object_id=i.database_id,index_id=i.database_id,type='DB'
      ,diagnostic_type_id=4
      ,diagnostic = N'Indexes: <5% Filtered - Index: '
                  + CAST(i.index_CNT AS NVARCHAR(20))
                  + N' Fltrd: '
                  + CAST(i.filtered_index_CNT AS NVARCHAR(20))
                  + N' (' 
                  + tempdb.dbo.SQLXL_3SD(1.0 * i.filtered_index_CNT / i.index_CNT,N'%') -- /zero handled by HAVING clause below
                  + N') (BI32)'
  FROM (SELECT database_id
              ,filtered_index_CNT = SUM(IIF(filter_definition > N'',1,0))
              ,index_CNT          = COUNT(1)
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE obj_type IN (N'U',N'V')
           AND obj_type_short_label <> N'HST'
           AND rec_type = N'I'
           AND type     = N'2'
         GROUP BY
               database_id
        HAVING COUNT(1) > 0 -- count of NCX indexes
       ) AS i
 WHERE 100.0 * i.filtered_index_CNT / i.index_CNT < 5.0 -- /zero handled by HAVING clause above

----------------------------------------------------------------------------------------------------
-- Change Tracking
----------------------------------------------------------------------------------------------------
;WITH cte AS (SELECT rec_type = 'A',database_id=0,parent_object_id=0,object_id=0,index_id=0,type=N'A',diagnostic_type_id = 4)
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
-- Diagnostic - DB - non-default - Change Tracking Properties
SELECT rec_type = 'A',database_id=0,parent_object_id=0,object_id=0,index_id=0,type=N'A',diagnostic_type_id = 8,diagnostic =
  N'Change Tracking - Auto Cleanup = ' + IIF(is_auto_cleanup_on = 1,N'[ON]',N'[OFF]')
+ N' Retention = [' + CAST(retention_period AS NVARCHAR(20)) + N' ' + retention_period_units_desc + N']'
  FROM tempdb.dbo.SQLXL_Index_sys_databases d
 WHERE d.is_auto_cleanup_on IS NOT NULL;

SET ANSI_WARNINGS OFF;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Completed Database diagnostics'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Parent/Table diagnostics',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************\
*** TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE TABLE ****
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Table is not a Plain Old Rowstore
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT i.rec_type,i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 0,diagnostic = STUFF(
---------------------------------------------------------------------------------------------------
-- Diagnostic - Table - is Clustered Columnstore (BI61)
+IIF(i.tbl_is_clustered_columnstore = 1,NCHAR(10) + N'[CLUSTERED_COLUMNSTORE] (BI61)',N'')
-- Diagnostic - Table - is HEAP
+IIF(i.tbl_is_heap                  = 1,NCHAR(10) + QUOTENAME(N'HEAP'),N'')
---------------------------------------------------------------------------------------------------
-- Diagnostic - Table - is XTP Memory Optimized (BI73)
+IIF(i.tbl_is_memory_optimized = 1
    ,NCHAR(10)
    +QUOTENAME(N'MEMORY_OPTIMIZED') + N' (BI73)'
    +N' Durability ' + tbl.durability_desc
-- Diagnostic - Table - is XTP Memory Optimized (BI73) NOT PERSISTED (SCHEMA_ONLY)
    +IIF(tbl.durability = 1,N' - XTP data NOT PERSISTED',N'')
    ,N'')
-----------------------------------------------------------------
-- Diagnostic - Table - is System Versioned History Table (BI110), source table name
+IIF(tbl.temporal_type = 1
    ,NCHAR(10) + QUOTENAME(N'SYSTEM_VERSIONED_HISTORY_TABLE') + N' (BI110)'
    +NCHAR(10) + N'> Versioned: ' + ISNULL(QUOTENAME(i.history_source_schema_name) + N'.' + QUOTENAME(i.history_source_object_name)
                                          ,N'<Missing Parent table>')
    ,N'')
-- Diagnostic - Table - is System Versioned Temporal Table (BI110), history table name, and retention period
+IIF(tbl.temporal_type = 2
    ,NCHAR(10) + QUOTENAME(N'SYSTEM_VERSIONED_TEMPORAL_TABLE') + N' (BI110)'
    +NCHAR(10) + N'> Retention ' + IIF(tbl.history_retention_period_unit_desc = N'INFINITE'
                                      ,N'INFINITE'
                                      ,CAST(tbl.history_retention_period AS NVARCHAR(20))+tbl.history_retention_period_unit_desc
                                      )
    +NCHAR(10) + N'> Versions: ' + ISNULL(QUOTENAME(i.tbl_history_table_schema) + N'.' + QUOTENAME(i.tbl_history_table_name)
                                       ,N'<Missing History table>'
                                       )
    ,N'')
-- Ledger Types -----------------------------------------------------------------------------------
-- Diagnostic - Table - is DROPPED LEDGER TABLE
+IIF(tbl.is_dropped_ledger_table = 1,NCHAR(10) + QUOTENAME(N'DROPPED_LEDGER_TABLE'),N'')
-- Diagnostic - Table - is HISTORY TABLE LEDGER
+IIF(tbl.ledger_type             = 1,NCHAR(10) + QUOTENAME(N'LEDGER_HISTORY_TABLE'),N'')
-- Diagnostic - Table - is UPDATABLE LEDGER TABLE
+IIF(tbl.ledger_type             = 2,NCHAR(10) + QUOTENAME(N'UPDATABLE_LEDGER_TABLE'),N'')
-- Diagnostic - Table - is APPEND ONLY LEDGER TABLE
+IIF(tbl.ledger_type             = 3,NCHAR(10) + QUOTENAME(N'APPEND_ONLY_LEDGER_TABLE'),N'')
-- Diagnostic - Table - Ledger View Name if ledger, SQL2022+ & Azure SQL Database
+IIF(tbl.ledger_view_id          > 0,NCHAR(10) + N'> Ledger View '
                                               + IIF(olv.vw_is_dropped_ledger_view = 1,N'*DROPPED* ',N'')
                                               + ISNULL(QUOTENAME(olv.name),N'')
    ,N'')
-- Change Data Capture-----------------------------------------------------------------------------
-- Diagnostic - Table - History Table - Change Data Capture
+IIF(i.cdc_is_history_table = 1,NCHAR(10) + QUOTENAME(N'CHANGE DATA CAPTURE HISTORY TABLE',N'')
-- Diagnostic - Table - Tracked by Change Data Capture, net changes ENABLED or DISABLED
+IIF(tbl.is_tracked_by_cdc = 1
    ,NCHAR(10) + QUOTENAME(N'TRACKED BY CHANGE DATA CAPTURE')
               + IIF(i.cdc_supports_net_changes = 1,N' - NET CHANGES [ENABLED]',N' - NET CHANGES [DISABLED]'),N'')
    ,N'')
---------------------------------------------------------------------------------------------------
-- Diagnostic - Table - COLUMN CHANGE TRACKING ENABLED
+IIF(tbl.ctt_is_track_columns_updated_on = 1,NCHAR(10) + QUOTENAME(N'COLUMN CHANGE TRACKING ENABLED'),N'')
-- Diagnostic - Table - EXTERNAL TABLE
+IIF(tbl.is_external                     = 1,NCHAR(10) + QUOTENAME(N'EXTERNAL TABLE'),N'')
-- Diagnostic - Table - FILETABLE
+IIF(tbl.is_filetable                    = 1,NCHAR(10) + QUOTENAME(N'FILETABLE'),N'')
-- Diagnostic - Table - GRAPH NODE
+IIF(tbl.is_node                         = 1,NCHAR(10) + QUOTENAME(N'GRAPH NODE'),N'')
-- Diagnostic - Table - GRAPH EDGE
+IIF(tbl.is_edge                         = 1,NCHAR(10) + QUOTENAME(N'GRAPH EDGE'),N'')
-- Diagnostic - Table - REMOTE DATA ARCHIVE ENABLED
+IIF(tbl.is_remote_data_archive_enabled  = 1,NCHAR(10) + QUOTENAME(N'REMOTE DATA ARCHIVE ENABLE - DEPRECATED 2022+D'),N'')
-- Diagnostic - Table - is SUBSCRIBED SYNCHRONOUS
+IIF(tbl.is_sync_tran_subscribed         = 1,NCHAR(10) + QUOTENAME(N'SUBSCRIBED SYNCHRONOUS'),N'')
---------------------------------------------------------------------------------------------------
+IIF(   tbl.is_published           > 0
     OR tbl.is_schema_published    > 0
     OR tbl.is_replicated          > 0
     OR tbl.is_merge_published     > 0
     OR tbl.has_replication_filter > 0
-- Diagnostic - Table - is PUBLISHED
-- Diagnostic - Table - is SCHEMA PUBLISHED
    ,NCHAR(10)+QUOTENAME(N'PUBLISHED' + STUFF(IIF(tbl.is_schema_published    > 0,N', SCHEMA'  ,N'')
-- Diagnostic - Table - is  PUBLISHED
                                             +IIF(tbl.is_merge_published     > 0,N', '   ,N'')
-- Diagnostic - Table - is PUBLISHED WITH FILTER
                                             +IIF(tbl.has_replication_filter > 0,N', FILTERED',N'')
                                             ,1,1,N''))
    ,N'')
---------------------------------------------------------------------------------------------------
-- Diagnostic - Table - INTERNAL TABLE & Internal Type Description
+IIF(i.obj_type = N'IT'
    ,NCHAR(10) + QUOTENAME(tbl.type_desc + N': ' + ISNULL(i.internal_type_DESC,N'INTERNAL TYPE ' + CAST(i.internal_type AS NVARCHAR(20))))
    ,N'')
---------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Is empty
+IIF(i.tbl_is_empty        = 1,NCHAR(10) + QUOTENAME(N'EMPTY'),N'')
-- Diagnostic - Table - Locked for BULK LOAD
+IIF(tbl.lock_on_bulk_load > 0,NCHAR(10) + QUOTENAME(N'Locked for BULK LOAD'),N'') -- Locked for BULK LOAD
---------------------------------------------------------------------------------------------------
,1,1,N'')
  FROM tempdb.dbo.SQLXL_Index_Compilation AS i
  JOIN tempdb.dbo.SQLXL_Index_sys_tables  AS tbl
    ON i.database_id                       = tbl.database_id
   AND i.object_id                         = tbl.object_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS olv
    ON tbl.database_id                     = olv.database_id
   AND tbl.ledger_view_id                  = olv.object_id
) f
 WHERE f.diagnostic IS NOT NULL;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Identity and Sequence values - flag if nearing their limits at 50% (BI68)
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH cte AS (
SELECT data_type = N'tinyint'
      ,min_value = CAST(0 AS BIGINT)
      ,max_value = CAST(255 AS BIGINT)
      ,max_fmt   = tempdb.dbo.SQLXL_3SD(255,N'I')

UNION ALL
SELECT data_type = N'smallint'
      ,min_value = -32768
      ,max_value =  32767
      ,max_fmt   = tempdb.dbo.SQLXL_3SD(32767,N'I')

UNION ALL
SELECT data_type = N'int'
      ,min_value = -2147483648
      ,max_value =  2147483647
      ,max_fmt   = tempdb.dbo.SQLXL_3SD(2147483647,N'I')

UNION ALL
SELECT data_type = N'bigint'
      ,min_value = -9223372036854775808
      ,max_value =  9223372036854775807
      ,max_fmt   = tempdb.dbo.SQLXL_3SD(9223372036854775807,N'I')
)
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'P',c.database_id,c.object_id,c.object_id,c.object_id,N'U'
      ,diagnostic_type_id = IIF(100. * COALESCE(CAST(c.Last_Value AS BIGINT)
                                               ,CAST(c.seq_current_value AS BIGINT)
                                               ,0)
                                     / cte.max_value > 50.0  -- no check for zero, always > 0
                               ,2
                               ,8)
      ,diagnostic =
 CASE WHEN c.increment_value IS NOT NULL
      THEN  IIF(100.*COALESCE(CAST(c.Last_Value AS BIGINT)
               ,CAST(c.seq_current_value AS BIGINT),0) / cte.max_value > 50.0,N'*NOTE* ' -- no check for zero, always > 0 from cte
               ,N'')
          + N'Identity'
      ELSE N'Sequence'
 END + N' Column'
+NCHAR(10) + N'> ' + QUOTENAME(c.name)
+NCHAR(10) + N'> at ' + CONVERT(NVARCHAR(20)
                              ,CAST(100.*COALESCE(CAST(c.Last_Value AS BIGINT)
                                                 ,CAST(c.seq_current_value AS BIGINT)
                                                 ,0)
                                        / cte.max_value AS MONEY) -- no check for zero, always > 0 from cte
                              ,0)
                      + N'%Total - '
          +tempdb.dbo.SQLXL_3SD(COALESCE(CAST(c.Last_Value AS BIGINT)
                                         ,CAST(c.seq_current_value AS BIGINT)
                                         ,0),N'I')
          +N'/' + cte.max_fmt + N' (BI68)'
  FROM tempdb.dbo.SQLXL_Index_sys_columns AS c
  JOIN tempdb.dbo.SQLXL_Index_sys_types   AS t
    ON c.database_id                     = t.database_id
   AND c.user_type_id                    = t.user_type_id
  JOIN cte
    ON t.name                            = cte.data_type
 WHERE (   c.increment_value IS NOT NULL
        OR c.seq_increment   IS NOT NULL
       );

----------------------------------------------------------------------------------------------------
-- Parent - Warning = 2
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT rec_type = 'P',p.database_id,p.parent_object_id,p.object_id,p.index_id,p.type,diagnostic_type_id = 2,diagnostic = STUFF(
-- Diagnostic - Table - Created without "ANSI NULLS ON"
 IIF(tbl.uses_ansi_nulls = 0
    ,NCHAR(10) + N'Created without "ANSI NULLS ON"'
    ,N'')

-- Diagnostic - Table - Assembly definition changed by ALTER ASSEMBLY
+IIF(p.tbl_has_unchecked_assembly_data > 0
    ,NCHAR(10) + N'Assembly definition changed by ALTER ASSEMBLY'
    ,N'')
----------------------------------------------------------------------------------------------------
,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS p
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_tables AS tbl
    ON p.database_ID = tbl.database_id
   AND p.object_ID   = tbl.object_id

----------------------------------------------------------------------------------------------------
-- Table - Performance = 4
----------------------------------------------------------------------------------------------------
UNION ALL
SELECT rec_type = 'P',p.database_id,p.parent_object_id,p.object_id,p.index_id,p.type,diagnostic_type_id = 4,diagnostic = STUFF(
-- Diagnostic - Table - text stored in row - limit
 IIF(tbl.text_in_row_limit > 0
    ,NCHAR(10) + N'text stored in row - limit ' + CAST(tbl.text_in_row_limit AS NVARCHAR(20)) + N' bytes'
    ,N'')

-- Diagnostic - Table - Large types out of row - adds 16 byte pointer
+IIF(tbl.large_value_types_out_of_row > 0,NCHAR(10) + N'Large types out of row - adds 16 byte pointer',N'')

-- Diagnostic - Table - Lock Escalation DISABLED
+IIF(p.tbl_lock_escalation = 1
    ,NCHAR(10) + N'Lock Escalation ' + QUOTENAME(tbl.lock_escalation_desc) + N' Consider Enabling Table or Auto (for partitions)'
    ,N'')

-- Diagnostic - Table - is Partitioned & partitioning column name (BI64)
+IIF(   raw.partition_CNT         > 1
     OR raw.partition_Column_Name > N''
    ,NCHAR(10) + N'Partitioned on ' + QUOTENAME(raw.partition_column_name) + N' - '
               + CAST(raw.partition_CNT AS NVARCHAR(20)) + N' partitions (BI64)'
    ,N'')

-- Diagnostic - Table - Lock Escalation TABLE with Partitions
+IIF(    p.tbl_lock_escalation = 0
     AND p.partition_Column_ID > 0
    ,NCHAR(10) + N'Lock Escalation ' + QUOTENAME(p.tbl_lock_escalation_desc) + N' Use AUTO for Partitioned tables'
    ,N'')

-- Diagnostic - Table - indexes are more than 2X the size of the physical table (index types 0,1,5)
+IIF(    raw.Reserved_Page_CNT > 0
     AND (1.0 * (p.Reserved_Page_CNT - raw.Reserved_Page_CNT) / raw.Reserved_Page_CNT) > 2.0
    ,NCHAR(10) + N'Indexes are '
               + tempdb.dbo.SQLXL_3SD(1.0*(p.Reserved_Page_CNT - raw.Reserved_Page_CNT) / raw.Reserved_Page_CNT,N'N')
               + N'X Table size'
    ,N'')
----------------------------------------------------------------------------------------------------
,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       )                        AS p
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_tables AS tbl
    ON p.database_ID = tbl.database_id
   AND p.object_ID   = tbl.object_id
  LEFT OUTER
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE type IN (N'0',N'1',N'5')
       )                                    AS raw
    ON p.database_id                         = raw.database_id
   AND p.object_id                           = raw.object_id

----------------------------------------------------------------------------------------------------
-- Parent - Information = 8, usisng SYS.TABLES
----------------------------------------------------------------------------------------------------
UNION ALL
SELECT rec_type = 'P',p.database_id,p.parent_object_id,p.object_id,p.index_id,p.type,diagnostic_type_id = 8,diagnostic = STUFF(
-- Diagnostic - Table - Days since Last Read
-- Diagnostic - Table - Days since Last Write
-- Diagnostic - Table - Not used since last usage data reset
 IIF(    p.obj_type NOT IN (N'F',N'FT',N'IF',N'TF')
     AND NOT (p.obj_type = N'V' AND p.tbl_is_heap = 1)
    ,IIF(-- Look for signs of any usage
            p.ius_User_Total_CNT          > 0
         OR p.ops_Total_contacts_CNT      > 0
         OR p.Stats_Prop_modification_CNT > 0
        -- Usage found
        ,NCHAR(10) + N'Last Used'
                   + N' Read: ' + IIF(p.ius_last_read_days_ago IS NOT NULL
                                     ,tempdb.dbo.SQLXL_3SD(p.ius_last_read_days_ago,N'I') + N' days'
                                     ,N'N/A')
                   + N' Write: ' + IIF(p.ius_last_write_days_ago IS NOT NULL
                                     ,tempdb.dbo.SQLXL_3SD(p.ius_last_write_days_ago,N'I') + N' days'
                                     ,N'N/A')
        -- Usage not found
        ,NCHAR(10) + N'Not used'
                   + IIF(p.tbl_is_heap = 1AND p.index_CNT = 0
                        ,N', HEAP no indexes'
                        ,N'')
        )
    ,N'')
-- Diagnostic - Object - Created Date - last 90 days (BI67)
-- Diagnostic - Object - Modify Date - last 90 days (BI66)
+IIF(DATEDIFF(DAY,p.obj_modify_date,sp.Collection_DTTM) <= 90
    ,NCHAR(10) + N'Object Modified ' + CAST(DATEDIFF(DAY,p.obj_modify_date,sp.Collection_DTTM) AS NVARCHAR(20)) + N' days (BI66)'
    +IIF(DATEDIFF(DAY,p.obj_create_date,p.obj_modify_date) > 0,N', Created ' +CONVERT(NVARCHAR(10),p.obj_create_date,2) + N' (BI67)',N'')
    ,N'')

----------------------------------------------------------------------------------------------------
-- Table outliers
----------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Many Nonclustered indexes on table (BI20)
+IIF(p.tbl_is_clustered_columnstore <> 1 AND p.Nonclustered_index_CNT >= 4
    ,NCHAR(10) + N'Nonclustered indexes: ' + CAST(p.Nonclustered_index_CNT AS NVARCHAR(20))
    +IIF(    sp.version_major >= 13
         AND (SELECT run_value
                FROM tempdb.dbo.SQLXL_Index_sys_instance
               WHERE source    = N'SERVERPROPERTY'
                 AND name      = N'Edition'
                 AND (   run_value LIKE N'ENTERPRISE%'
                      OR run_value LIKE N'DEVELOPER%'
                     )
             ) IS NOT NULL
        ,IIF(p.Nonclustered_ColumnStore_CNT = 0,N' - consider creating NCS?',N' - consider existing NCS?')
        ,N'')
    + N' (BI20)'
 ,N'') -- 2016+

----------------------------------------------------------------------------------------------------
-- Objects with Code Definitions (functions, views)
----------------------------------------------------------------------------------------------------
-- Diagnostic - Code Object - Does not use ANSI NULLS
+IIF(p.obj_uses_ansi_nulls = 0,NCHAR(10) + N'Does not use ANSI NULLS',N'')

-- Diagnostic - Code Object - Uses Quoted Identifier
+IIF(p.obj_uses_quoted_identifier = 1,NCHAR(10) + N'Uses Quoted Identifier',N'')

-- Diagnostic - Code Object - Is NOT Schema Bound
+IIF(p.obj_is_schema_bound = 0 ,NCHAR(10) + N'Is NOT Schema Bound',N'')

-- Diagnostic - Code Object - Does NOT use Database Collation
+IIF(p.obj_uses_database_collation = 0,NCHAR(10) + N'Does NOT Use Database Collation',N'')

-- Diagnostic - Code Object - Contains WITH RECOMPILE
+IIF(p.obj_is_recompiled =  1,NCHAR(10) + N'Contains WITH RECOMPILE',N'')

-- Diagnostic - Code Object - Does NOT return NULL on NULL input
+IIF(p.obj_null_on_null_input =  0 AND p.obj_type <> N'V',NCHAR(10) + N'Does NOT return NULL on NULL input',N'')

-- Diagnostic - Code Object - Executes AS OWNER
+IIF(p.obj_execute_as_principal_id = -2,NCHAR(10) + N'Executes AS OWNER',N'')

-- Diagnostic - Code Object - Executes AS PRINCIPAL ID
+IIF(p.obj_execute_as_principal_id >  0
    ,NCHAR(10) + N'Executes AS PRINCIPAL ID ' + CAST(p.obj_execute_as_principal_id AS NVARCHAR(20))
    ,N'')

-- Diagnostic - Code Object - Is natively compiled
+IIF(p.obj_uses_native_compilation =  1,NCHAR(10) + N'Is natively compiled',N'')

------------------------------------------------------------
-- Diagnostic - Table Valued Function - is INLINEABLE, inlining OFF or ON
+IIF(p.obj_is_inlineable           =  1,NCHAR(10) + N'Is inlineable' + IIF(p.obj_inline_type = 1,N', inlining [ON]',N', Inlining *OFF*'),N'')

------------------------------------------------------------
,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       )                        AS p
 CROSS JOIN
       tempdb.dbo.SQLXL_Index_sys_Startup_Parameters AS sp

UNION ALL
SELECT rec_type = 'P',p.database_id,p.parent_object_id,p.object_id,p.index_id,p.type,diagnostic_type_id = 8
-- Diagnostic - Table - LOB data space name and description
,diagnostic = STUFF(CASE WHEN tbl.lob_data_space_id > 0
                            THEN  NCHAR(10) + N'LOB data space'
                                + NCHAR(10) + N'> '     + QUOTENAME(lob_ds.data_space_name)
                                + NCHAR(10) + N'> type ' + QUOTENAME(lob_ds.data_space_type_desc)
                            ELSE N''
                       END COLLATE DATABASE_DEFAULT
-- Diagnostic - Table - Filestream data space name and description
                      +CASE WHEN tbl.filestream_data_space_id > 0
                            THEN  NCHAR(10) + N'Filestream data spc ' + QUOTENAME(fs_ds.data_space_name)
                                + NCHAR(10) + N' type ' + QUOTENAME(fs_ds.data_space_type_desc)
                            ELSE N''
                       END COLLATE DATABASE_DEFAULT
                      ,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       )                               AS p
  JOIN tempdb.dbo.SQLXL_Index_sys_tables AS tbl
    ON p.database_id = tbl.database_id
   AND p.object_ID   = tbl.object_id
  LEFT OUTER HASH
  JOIN (--------------------------------------------------------------------------------------------
        -- Data Spaces
        --------------------------------------------------------------------------------------------
        SELECT database_id
              ,data_space_id
              ,data_space_name
              ,data_space_type_desc
          FROM tempdb.dbo.SQLXL_Index_sys_data_spaces
         GROUP BY
               database_id
              ,data_space_id
              ,data_space_name
              ,data_space_type_desc
       )                    AS lob_ds
    ON p.database_id         = lob_ds.database_id
   AND tbl.lob_data_space_id = lob_ds.data_space_id
  LEFT OUTER HASH
  JOIN (--------------------------------------------------------------------------------------------
        -- Filestream Data Spaces
        --------------------------------------------------------------------------------------------
        SELECT database_id
              ,data_space_id
              ,data_space_name
              ,data_space_type_desc
          FROM tempdb.dbo.SQLXL_Index_sys_data_spaces
         GROUP BY
               database_id
              ,data_space_id
              ,data_space_name
              ,data_space_type_desc
       )                           AS fs_ds
    ON p.database_id                = fs_ds.database_id
   AND tbl.filestream_data_space_id = fs_ds.data_space_id
) p
 WHERE p.diagnostic IS NOT NULL
OPTION (FORCE ORDER);

----------------------------------------------------------------------------------------------------
-- Parent - Information = 8 - tables with big or deprecated columns
----------------------------------------------------------------------------------------------------
SET ANSI_WARNINGS ON -- FOR XML ahead

INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
-- Diagnostic - Table - Has large data types
SELECT rec_type = 'P',p.database_id,p.parent_object_id,p.object_id,index_id=p.object_id,type = N'U',diagnostic_type_id = 8
      ,diagnostic = N'Large datatypes: ' + p.col
  FROM (
        SELECT p.database_id
              ,p.parent_object_id
              ,p.object_ID
              ,col = STUFF((SELECT DISTINCT
                                   N',' +user_type_name+IIF(max_length = -1,N'(MAX)',N'')
                              FROM tempdb.dbo.SQLXL_Index_sys_columns AS c
                             WHERE p.database_id      = c.database_id
                               AND p.object_id        = c.object_id
                               AND (   c.max_length = -1
                                    OR c.user_type_name IN (N'HIERARCHYID')
                                   )
                               FOR XML PATH(N''),TYPE                     -- can be more than 1 column in foreign key
                            ).value('(./text())[1]',N'NVARCHAR(4000)'),1,1,N'')
          FROM (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type = N'P'
               ) AS p
       ) p
 WHERE p.col IS NOT NULL

UNION ALL
-- Diagnostic - Table - Has Deprecated data types
SELECT rec_type = 'P',p.database_id,p.parent_object_id,p.object_id,index_id=p.object_id,type = N'U',diagnostic_type_id = 8
      ,diagnostic = N'Deprecated datatypes: ' + p.col
  FROM (
        SELECT p.database_id
              ,p.parent_object_id
              ,p.object_ID
              ,col = STUFF((SELECT DISTINCT
                                   N',N' +user_type_name+IIF(max_length = -1,N'(MAX)',N'')
                              FROM tempdb.dbo.SQLXL_Index_sys_columns AS c
                             WHERE p.database_id      = c.database_id
                               AND p.object_id        = c.object_id
                               AND (   c.user_type_name IN (N'IMAGE',N'TEXT',N'NTEXT')
                                   )
                               FOR XML PATH(N''),TYPE                     -- can be more than 1 column in foreign key
                            ).value('(./text())[1]',N'NVARCHAR(4000)'),1,1,N'')
          FROM (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type = N'P'
               ) AS p
       ) p
 WHERE p.col IS NOT NULL;

SET ANSI_WARNINGS OFF

----------------------------------------------------------------------------------------------------
-- Parent - Information = 8 Other
----------------------------------------------------------------------------------------------------
-- Diagnostic - Table - No PRIMARY KEY
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'P',p.database_id,p.parent_object_id,p.object_id,index_id=p.object_id,type = N'U',diagnostic_type_id = 8
      ,diagnostic = 'No Primary Key'
                  + IIF(i.index_id > 0
                       ,N', has ' + IIF(i.is_unique = 1,N'Unique',N'NonUnique') + N' CX'
                       ,N'')
  FROM (
        SELECT database_id,parent_object_id,object_id
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type             = N'P'
           AND obj_type             = N'U'
           AND obj_type_short_label = N'TBL' -- omits History & Internal tables, Clustered columnstores cannot have PK constraints
       EXCEPT
        SELECT database_id,parent_object_id,object_id
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type       = N'I'
           AND is_primary_key = 1
       ) p
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Compilation AS i
    ON N'I'                              = i.rec_type
   AND p.database_id                     = i.database_id
   AND p.parent_object_id                = i.parent_object_id
   AND p.object_id                       = i.object_ID
   AND i.type                           IN (N'0',N'1')

----------------------------------------------------------------------------------------------------
-- Writes but no reads - BOTH Table & Index
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = i.rec_type,i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 8,diagnostic =
-- Diagnostic - Table - Total of indexes with writes and no reads (BI22&29)
-- Diagnostic - Index - Hi writes and no reads (BI22&29)
  N'High WRT No RDS -'
+ N' USG ' + tempdb.dbo.SQLXL_3SD(w.metric_AMT,N'I') + COALESCE(N' ' + w.diagnostic,N'0 - Rebuilt?')
+ N' OPS ' + tempdb.dbo.SQLXL_3SD(r.metric_AMT,N'I') + COALESCE(N' ' + r.diagnostic,N'0 - Rebuilt?')
+ N' (BI22&29)'
  FROM (--------------------------------------------------------------------------------------------
        -- Get the significant writers with no reads
        --------------------------------------------------------------------------------------------
        SELECT rec_type
              ,Database_Id
              ,parent_object_id
              ,Object_Id
              ,index_Id
              ,Type
          FROM tempdb.Dbo.SQLXL_Index_Metrics
         WHERE Rec_Type NOT IN (N'A',N'D')
           AND (   Metric = N'ops_no_read_Total_write_CNT'
                OR Metric = N'ius_No_Read_User_Updates_CNT'
               )
           AND (    Previous_Sum_Pct <= 90.0
                AND diagnostic_Pct   >= 1.00
               )
         GROUP BY
               rec_type
              ,Database_Id
              ,parent_object_id
              ,Object_Id
              ,index_Id
              ,Type
       ) i
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Metrics   AS w
    ON i.rec_type                      = w.rec_type
   AND i.database_id                   = w.database_id
   AND i.parent_object_id              = w.parent_object_id
   AND i.object_id                     = w.object_id
   AND i.index_id                      = w.index_id
   AND i.type                          = w.type
   AND N'ops_no_read_Total_write_CNT' = w.metric
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Metrics   AS r
    ON i.rec_type                      = r.rec_type
   AND i.database_id                   = r.database_id
   AND i.parent_object_id              = r.parent_object_id
   AND i.object_id                     = r.object_id
   AND i.index_id                      = r.index_id
   AND i.type                          = r.type
   AND N'ius_no_read_user_updates_CNT' = r.metric;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Wide tables (35+ cols or > 2000 non-LOB bytes) - BI check_id 26
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'P',c.database_id,c.object_id,c.object_id,c.object_id,N'U',diagnostic_type_id = 8,diagnostic =
-- Diagnostic - Table - has 35 or more columns (BI26)
-- Diagnostic - Table - has a non-LOB width greater than 2000 bytes (BI26)
N'Wide table - ' + CAST(c.column_lng AS NVARCHAR(20)) + N' bytes in ' + CAST(c.column_CNT AS NVARCHAR(20)) + N' non-LOB columns (BI26)'
  FROM (
        SELECT c.database_id
              ,c.object_id
              ,column_CNT = SUM(IIF(c.max_length = -1,0,1))
              ,column_lng = SUM(IIF(c.max_length = -1,0,c.max_length))
          FROM tempdb.dbo.SQLXL_Index_sys_tables  AS t
          JOIN tempdb.dbo.SQLXL_Index_sys_columns AS c
            ON t.database_id                     = c.database_id
           AND t.object_id                       = c.object_id
         GROUP BY
               c.database_id
              ,c.object_id
        HAVING SUM(IIF(c.max_length = -1,0,1))            >= 35
            OR SUM(IIF(c.max_length = -1,0,c.max_length)) >  2000
       ) c

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - String column with non-database collation
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'P',c.database_id,c.object_id,c.object_id,c.object_id,N'U',diagnostic_type_id = 8
-- Diagnostic - Table - has columns with Collation not matching database collation (BI69)
      ,diagnostic = N'String collation not match DB: ' + CAST(COUNT(1) AS NVARCHAR(20)) + N' columns (BI69)'
  FROM tempdb.dbo.SQLXL_Index_sys_columns   AS c
  JOIN tempdb.dbo.SQLXL_Index_sys_databases AS d
    ON c.database_id                    = d.database_id
  JOIN tempdb.dbo.SQLXL_Index_sys_objects   AS o
    ON c.database_id                    = o.database_id
   AND c.object_id                      = o.object_id
   AND 0                                = o.is_ms_shipped
 WHERE c.collation_name <> d.collation_name
 GROUP BY
       c.database_id
      ,c.object_id

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - Table/column check constraint has non-standard property
-- or references a procedure, function, or CLR - (BI94)
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT DISTINCT
       rec_type = 'P',cx.database_id,cx.parent_object_id,cx.parent_object_id,cx.parent_object_id,N'U',diagnostic_type_id = 8,diagnostic =
-- Diagnostic - Table - has constraint(s) - see details
IIF(    ISNULL(cx.uses_sql_proc,0) = 0
    AND ISNULL(cx.uses_sql_ftn ,0) = 0
    AND ISNULL(cx.uses_sql_mthd,0) = 0
    AND cx.is_not_trusted          = 0
    AND cx.is_not_for_replication  = 1
    AND cx.is_system_named         = 0
    AND cx.uses_database_collation = 1
   ,N'Constraint(s) exist - see details'
   ,IIF(   ISNULL(cx.uses_sql_proc,0) = 1
        OR ISNULL(cx.uses_sql_ftn ,0) = 1
        OR ISNULL(cx.uses_sql_mthd,0) = 1
        OR cx.is_not_trusted          = 1
        OR cx.is_not_for_replication  = 0 -- means it's checked by replications too
        OR cx.is_system_named         = 1
        OR cx.uses_database_collation = 0
       , IIF(cx.parent_column_id = 0,N'Parent',N'Column')
       + N' Constraint:' + NCHAR(10) + N'> ' + QUOTENAME(cx.name)
       + IIF(cx.parent_column_id > 0,NCHAR(10) + N'> On column ' + QUOTENAME(c.name),N'')

-- Diagnostic - Constraint - is NOT TRUSTED
       +IIF(cx.is_not_trusted         = 1,NCHAR(10) + N'> Is NOT TRUSTED',N'')

-- Diagnostic - Constraint - is NOT FOR REPLICATION
       +IIF(cx.is_not_for_replication = 0,NCHAR(10) + N'> Is REPLICATED',N'')

-- Diagnostic - Constraint - is SYSTEM NAMED
       +IIF(cx.is_system_named        = 1,NCHAR(10) + N'> Is SYSTEM NAMED',N'')

-- Diagnostic - Constraint - does not use database collation
       +IIF(cx.uses_database_collation= 0,NCHAR(10) + N'> Does not use DATABASE COLLATION',N'')

-- Diagnostic - Constraint - uses a SQL procedure - can force serialization (BI94)
       +IIF(cx.uses_sql_proc          = 1,NCHAR(10) + N'> references a procedure - can force serialization (BI94)' ,N'')

-- Diagnostic - Constraint - uses a SQL function - can force serialization (BI94)
       +IIF(cx.uses_sql_ftn           = 1,NCHAR(10) + N'> references a function - can force serialization (BI94)' ,N'')

-- Diagnostic - Constraint - uses a SQL method - can force serialization (BI94)
       +IIF(cx.uses_sql_mthd          = 1,NCHAR(10) + N'> references a SQL method - can force serialization (BI94)',N'')
       ,N'')
   )
/*** LOCAL TESTING ***
SELECT *
--*/
  FROM tempdb.dbo.SQLXL_Index_sys_check_constraints AS cx
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_columns           AS c
    ON cx.database_id                              = c.database_id
   AND cx.parent_object_id                         = c.object_id
   AND cx.parent_column_id                         = c.column_id

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - Computed columns
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'P',c.database_id,c.object_id,c.object_id,c.object_id,N'U',diagnostic_type_id = 0
-- Diagnostic - Table - Computed Column
      ,diagnostic = N'Computed Column '
                  + NCHAR(10) + N'> ' + QUOTENAME(c.name)

-- Diagnostic - Table - Computed Column - uses a SQL procedure - can force serialization (BI99)
                 +IIF(c.uses_sql_proc = 1,NCHAR(10) + N'> references a procedure - can force serialization (BI99)' ,N'')

-- Diagnostic - Table - Computed Column - uses a SQL function - can force serialization (BI99)
                 +IIF(c.uses_sql_ftn  = 1,NCHAR(10) + N'> references a function - can force serialization (BI99)' ,N'')

-- Diagnostic - Table - Computed Column - uses a SQL method - can force serialization (BI99)
                 +IIF(c.uses_sql_mthd = 1,NCHAR(10) + N'> references a SQL method - can force serialization (BI94)',N'')
  FROM tempdb.dbo.SQLXL_Index_sys_columns AS c
 WHERE c.uses_sql_proc    = 1
    OR c.uses_sql_ftn     = 1
    OR c.uses_sql_mthd    = 1

UNION ALL
SELECT rec_type = 'P',c.database_id,c.object_id,c.object_id,c.object_id,N'U',diagnostic_type_id = 8,diagnostic =
-- Diagnostic - Table - has Computed Columns that are not persisted (BI100) and the indexes they appear in
 N'Computed Column not persisted (BI100)' + NCHAR(10) + N'> ' + QUOTENAME(c.name) + N' '
+ISNULL( NCHAR(10)
        +N'> In Index(s): '
        +STUFF((SELECT N', ' + CAST(index_id AS NVARCHAR(20))
                     + N' ('
                     + IIF(ic.is_included_column = 0,N'Key',N'Inc')
                     + N')'
                  FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
                 WHERE c.database_id                           = ic.database_id
                   AND c.object_id                             = ic.object_id
                   AND c.column_id                             = ic.column_id
                 ORDER BY
                       ic.index_id
                   FOR XML PATH (N'')
               ),1,2,N'')
       ,N'')
  FROM tempdb.dbo.SQLXL_Index_sys_columns AS c
 WHERE c.is_computed  = 1
   AND c.is_persisted = 0

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - Replicated columns - (BI70)
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'P',c.database_id,c.object_id,c.object_id,c.object_id,N'U',diagnostic_type_id = 8
-- Diagnostic - Table - has replicated columns & count (not change data capture) (BI70)
      ,diagnostic = N'Replicated columns: '
      +IIF(c.replicated_columns <> c.all_columns
          ,CAST(c.replicated_columns AS NVARCHAR(20)) + N' of ' + CAST(c.all_columns AS NVARCHAR(20))
          ,N'All'
          ) + N' (BI70)'
/*** LOCAL TESTING ***
SELECT c.*
--*/
  FROM (
        SELECT database_id
              ,object_id
              ,replicated_columns = SUM(IIF(is_replicated = 1,1,0))
              ,all_columns        = SUM(1)
          FROM tempdb.dbo.SQLXL_Index_sys_columns
         GROUP BY
               database_id
              ,object_id
        HAVING SUM(IIF(is_replicated = 1,1,0)) > 0
       ) AS c
  JOIN tempdb.dbo.SQLXL_Index_sys_tables AS t
    ON c.database_id                    = t.database_id
   AND c.object_id                      = t.OBJECT_ID
   AND 0                                = t.is_tracked_by_cdc

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - Tables with filtered statistics
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'P',s.database_id,s.object_id,s.object_id,s.object_id,N'U',diagnostic_type_id = 8,diagnostic =
-- Diagnostic - Table - has non-indexed statistics - may indicate more indexes needed
N'Table has ' + CAST(SUM(IIF(s.has_filter = 1,1,0)) AS NVARCHAR(20)) + N' non-index filtered statistics'
  FROM tempdb.dbo.SQLXL_Index_sys_stats   AS s
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_indexes AS i
    ON s.database_id                  = i.database_id
   AND s.object_id                    = i.object_id
   AND s.stats_id                     = i.index_id
 WHERE i.index_id IS NULL
 GROUP BY
       s.database_id
      ,s.OBJECT_ID
HAVING SUM(IIF(s.has_filter = 1,1,0)) > 0;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - Tables many unused/lightly used indexes
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
-- Diagnostic - Table - has mmany lightly used Nonclustered indexes, no existing nonclustered Columnstore
SELECT rec_type = 'P',i.database_id,i.parent_object_id,i.parent_object_id,i.parent_object_id,N'U',diagnostic_type_id = 8,diagnostic =
        CAST(COUNT(1) AS VARCHAR(10))
      + N' low read nonclustered indexes (<2%)'
      + IIF(p.Nonclustered_ColumnStore_CNT = 0,N' - consider NCS?',N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS p
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_ID        = p.object_ID
 WHERE i.tbl_is_clustered_columnstore = 0
   AND i.type                         = N'2'
   AND i.ius_User_Total_CNT           > 0                              -- at least some activity
   AND IIF(p.ius_User_read_CNT > 0
          ,100.0 * ISNULL(i.ius_User_read_CNT,0) / p.ius_User_read_CNT
          ,0.0) < 2.0 -- 2 percent
   AND IIF(p.ops_Total_read_CNT > 0
          ,100.0 * ISNULL(i.ops_Total_read_CNT,0) / p.ops_Total_read_CNT
          ,0.0) < 2.0 -- 2 percent
 GROUP BY
       i.database_id
      ,i.parent_object_id
      ,p.Nonclustered_ColumnStore_CNT
HAVING COUNT(1) > 1

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - CDC - History File group
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'P',p.database_id,p.parent_object_id,p.parent_object_id,p.parent_object_id,N'U',diagnostic_type_id = 8,diagnostic = STUFF(
-- Diagnostic - Table - Change data capture filegroup name
 NCHAR(10)+IIF(p.cdc_filegroup_name IS NOT NULL,N'Filegroup Name ' + QUOTENAME(p.cdc_filegroup_name),N'Uses default Filegroup')
,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       )                        AS p
 WHERE p.cdc_is_history_table = 1;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - DML Triggers - enabled, non-MS
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'P',p.database_id,p.object_id,p.object_id,p.object_id,N'U',diagnostic_type_id = 8,diagnostic =
-- Diagnostic - Table - has triggers and count by trigger type
N'DML Triggers'
+IIF(p.tbl_CLR_trigger_CNT           > 0,N' CLR: '        + CAST(p.tbl_CLR_trigger_CNT           AS NVARCHAR(20)),N'')
+IIF(p.tbl_SQL_trigger_CNT           > 0,N' SQL: '        + CAST(p.tbl_SQL_trigger_CNT           AS NVARCHAR(20)),N'')
+IIF(p.tbl_is_instead_of_trigger_CNT > 0,N' Instead Of: ' + CAST(p.tbl_is_instead_of_trigger_CNT AS NVARCHAR(20)),N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS p
 WHERE p.tbl_CLR_trigger_CNT           > 0
    OR p.tbl_SQL_trigger_CNT           > 0
    OR p.tbl_is_instead_of_trigger_CNT > 0

----------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Identity Columns not using 1 as increment (BI74)
-- Diagnostic - Table - Identity Columns with negative seed (BI74)
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'P',c.database_id,c.object_id,c.object_id,c.object_id,N'U',diagnostic_type_id = 8,diagnostic =
  N'IDN Col ' + QUOTENAME(c.name)
+ IIF(c.increment_value <> 1,N' increment ' + CAST(c.increment_value AS NVARCHAR(20)),N'')
+ IIF(c.seed_value      <  0,N' seed '      + CAST(c.seed_value      AS NVARCHAR(20)),N'')
+ N' (BI74)'
  FROM tempdb.dbo.SQLXL_Index_sys_columns AS c
  JOIN tempdb.dbo.SQLXL_Index_sys_types   AS t
    ON c.database_id                     = t.database_id
   AND c.user_type_id                    = t.user_type_id
 WHERE c.increment_value <> 1
    OR c.seed_value      <  0

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Sequences - not using 1 as increment (BI74)
-- Diagnostic - Sequences - with negative start value (BI74)
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'P',c.database_id,c.object_id,c.object_id,c.object_id,N'U',diagnostic_type_id = 8,diagnostic =
  N'Sequence Column ' + QUOTENAME(c.name)
+ IIF(c.seq_increment   <> 1,N' has increment value of ' + CAST(c.seq_increment   AS NVARCHAR(20)),N'')
+ IIF(c.seq_start_value <  0,N' has seed value of '      + CAST(c.seq_start_value AS NVARCHAR(20)),N'')
+ N' (BI74)'
  FROM tempdb.dbo.SQLXL_Index_sys_columns AS c
  JOIN tempdb.dbo.SQLXL_Index_sys_types   AS t
    ON c.database_id                     = t.database_id
   AND c.user_type_id                    = t.user_type_id
 WHERE c.seq_increment   <> 1
    OR c.seq_start_value <  0

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Completed Parent/Table diagnostics'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Index diagnostics',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************\
*** INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX ***
\******************************************************************************************************************************************/
SET ANSI_WARNINGS ON
----------------------------------------------------------------------------------------------------
-- Index Critical = 1 - non-rowstore/relational index types
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 1,diagnostic = STUFF(
 IIF(i.type = N'3'

-- Diagnostic - Index - is XML (BI60)
    ,NCHAR(10)+ QUOTENAME(i.type_desc) + N' - ' +i.sub_type_desc + N' (BI60)' -- XML

-- Diagnostic - Index - XML index - SECONDARY type description
    +IIF(i.xml_secondary_type_desc IS NOT NULL,NCHAR(10) + N'XML Secondary Type desc: ' + i.xml_secondary_type_desc,N'')

-- Diagnostic - Index - XML index - PATH ID
    +IIF(i.xml_path_id > 0,NCHAR(10) + N'XML Path ID: ' + CAST(i.xml_path_id AS NVARCHAR(20)),N''),N'')

-- Diagnostic - Index - is Spatial (BI62)
+IIF(i.type = N'4',NCHAR(10)+ QUOTENAME(i.type_desc) + N' - ' + i.sub_type_desc + N' (BI62)',N'') -- Spatial

  -- i.type = N'5' Clustered Columnstore covered above

-- Diagnostic - Index - is Nonclustered Columnstore (BI61)
+IIF(i.type = N'6',NCHAR(10) + QUOTENAME(i.type_desc) + N' (BI61)',N'') -- Nonclustered Columnstore

-- Diagnostic - Index - is Nonclustered Hash on in-memory table (BI61)
+IIF(i.type = N'7',NCHAR(10) + QUOTENAME(i.type_desc) + N' (BI61)',N'') -- Nonclustered Hash

----------------------------------------------------------------------------------------------------
-- Index All Types
----------------------------------------------------------------------------------------------------
-- HEAPS flagged later on

+IIF(   i.is_disabled                > 0
     OR i.is_not_trusted             > 0
     OR i.is_ignored_in_optimization = 1

-- Diagnostic - Index - is DISABLED (BI42)
    ,NCHAR(10)+LTRIM(IIF(i.is_disabled = 1,N' *Disabled* (BI42)',N'')

-- Diagnostic - Index - is NOT TRUSTED
                    +IIF(i.is_not_trusted = 1,N' *Not trusted*',N'')

-- Diagnostic - Index - is IGNORED IN OPTIMIZATION
                    +IIF(i.is_ignored_in_optimization = 1,N' *Ignored in optimization*',N'')
                    )
    ,N'')
-- Diagnostic - Index - Duplicate keys ignored
+IIF(i.ignore_dup_key            = 1,NCHAR(10) + N'DUP keys ignored, inserted rows can be discarded',N'')

-- Diagnostic - Index - Duplicate key warning suppressed on rebuild
+IIF(i.suppress_dup_key_messages = 1,NCHAR(10) + N'DUP key messages are suppressed on rebuild',N'')

-- Diagnostic - Index - is Hypothetical (BI41)
+IIF(i.is_hypothetical           = 1,NCHAR(10) + N'Hypothetical, can''t be used, holds stats (BI41)',N'')
------------------------------------------------------------
,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  LEFT OUTER
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS p
    ON i.database_id              = p.database_id
   AND i.parent_object_id         = p.parent_object_id
 WHERE i.type NOT IN (N'F')  -- Foreign Key Contraints handled separately
) i
 WHERE i.diagnostic IS NOT NULL

----------------------------------------------------------------------------------------------------
-- Index Warning = 2
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 2,diagnostic = STUFF(
-- Diagnostic - Index - index row locks not allowed
-- Diagnostic - Index - index page locks not allowed
 CASE WHEN (i.allow_row_locks = 0 OR i.allow_page_locks = 0)              -- locks not allowed
       AND NOT (i.obj_type IN (N'FT',N'IF',N'TF',N'V') AND i.type = N'0') -- but not for unindexed views, unordered table values functions
       AND i.tbl_is_memory_optimized = 0                                  -- memory optimized uses Row Versions
       AND i.type NOT IN (N'5',N'6',N'90')                                -- no CCS, NCS, FTX
      THEN NCHAR(10) + N'Locks not allowed - '
          +STUFF(IIF(i.allow_page_locks = 0,N', Page',N'')
                +IIF(i.allow_row_locks  = 0,N', Row' ,N'')
                ,1,1,N''
                )
      ELSE N''
 END

-- Diagnostic - Index - partition not match table partition (BI65)
-- Diagnostic - Index - table partitioned, index isn't
+IIF(ISNULL(i.partition_function_name,N'NONE') <> ISNULL(p.partition_function_name,N'NONE')
    ,IIF(i.partition_function_name IS NULL
        ,NCHAR(10) + N'Index not partitioned, table is (BI65)'
        +NCHAR(10) + N'> TBL ' + QUOTENAME(ISNULL(p.partition_function_name,N'NOT PARTITIONED'))
        ,NCHAR(10) + N'Index Partition function not match Table''s (BI65)'
        +NCHAR(10) + N'> IDX ' + QUOTENAME(ISNULL(i.partition_function_name,N'NOT PARTITIONED'))
        +NCHAR(10) + N'> TBL ' + QUOTENAME(ISNULL(p.partition_function_name,N'NOT PARTITIONED'))
        )
    ,N'')

-- Diagnostic - Index - Reminder - No statistics created for SQL Table-Valued Functions
-- Diagnostic - Index - Reminder - No statistics created for index types XML,SPT,CCS,NCS,HSH,FTX
+CASE WHEN i.parent_object_type = N'TF'
      THEN NCHAR(10) + i.parent_object_type_desc + N' doesn''t get statistics'
      WHEN TRY_CAST(i.type AS INT) = 0 -- Not Heap
        OR TRY_CAST(i.type AS INT) > 2 -- Not Clustered Rowstore or Nonclustered Rowstore
      THEN NCHAR(10) + N'Doesn''t get statistics'
      ELSE N''
 END

-- Diagnostic - Index - statistics over 30 days old (BI90)
-- Diagnostic - Index - statistics low sampling rate (BI91)
+IIF(    i.stathdr_Rows_CNT > 0
     AND i.type IN (N'1',N'2')
    ,IIF(    i.row_CNT > 0
         AND (   i.stathdr_Statistics_age_days > 31
              OR (100.0 * (i.row_CNT - i.stathdr_Rows_CNT) / i.row_CNT) > 1.0 -- divide by zero handled by IIF above
             )
        ,ISNULL(NCHAR(10)
               +N'Statistics ' + CAST(i.stathdr_Statistics_age_days AS NVARCHAR(20)) + N' days old (BI90) on '
               +tempdb.dbo.SQLXL_3SD(1.0 * i.stathdr_Rows_sampled_CNT / i.stathdr_Rows_CNT,N'%') -- divide by zero handled by IIF above
               +N' rows (BI91)'
               ,N''
               )
-- Diagnostic - Index - statistics rowcount >1% delta from current partition index record count
               +IIF(100.0 * (i.row_CNT - i.stathdr_Rows_CNT) / i.row_CNT > 1.0
                   ,N' ' 
                   +tempdb.dbo.SQLXL_3SD(1.0 * (i.row_CNT - i.stathdr_Rows_CNT) / i.row_CNT,N'%') -- divide by zero handled by IIF above
                   +N' Row Delta'
                   ,N'')
        ,N'')
    ,N'')

-- Diagnostic - Index - Rowstore indexes - No statistics found
+IIF(    i.type            IN (N'1',N'2')
     AND i.stathdr_Updated IS NULL
     AND i.tbl_row_cnt      > 0
    ,NCHAR(10) + N'No Statistics found'
    ,N'')

-- Diagnostic - Index - statistics not computed
+IIF(    i.stathdr_Statistics_age_days IS NULL
     AND i.type   IN (N'1',N'2')
     AND i.row_CNT > 0
    ,NCHAR(10) + N'Statistics not yet computed'
    ,N'')
------------------------------------------------------------
,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
    ON i.database_id                     = o.database_id
   AND i.parent_object_id                = o.parent_object_id
   AND i.OBJECT_ID                       = o.OBJECT_ID
  LEFT OUTER
  JOIN (SELECT *
         FROM tempdb.dbo.SQLXL_Index_Compilation
        WHERE rec_type = N'P'
       ) AS p
    ON i.database_id                     = p.database_id
   AND i.parent_object_id                = p.parent_object_id
 WHERE TRY_CAST(i.type AS INT)           > 0
   AND i.obj_type_short_label         NOT IN (N'HST' -- Not Change Data Capture (CDC), system versioned History, ledger history table
                                             ,N'IT') -- Not Internal Table
) i
 WHERE i.diagnostic IS NOT NULL

----------------------------------------------------------------------------------------------------
-- Index Performance = 4
-- Filtered indexes - included in Information 8 below
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4,diagnostic = STUFF(
/*** LOCAL TESTING ***
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4,diagnostic = STUFF(
--*/

-- Diagnostic - Index - fill factor - for all non-100% factors (BI40)
+IIF(   i.fill_factor         NOT IN (0,100)
     OR i.page_splits_to_write_PCT > 1.0
     OR i.page_merge_to_write_PCT  > 1.0
    ,NCHAR(10) + N'Fill ' + tempdb.dbo.SQLXL_3SD(i.fill_factor,N'I') + N'%'
               + IIF(i.fill_factor NOT IN (0,100),N' (BI40)',N''),N'')

-- Diagnostic - Index - Padding - Fill_Factor < 100% and PADDING not enabled
    +IIF(i.fill_factor < 100 AND i.is_padded = 0
        ,N', Pad DISBLD'
        ,N'') -- Fill factor < 100, PADDING not enabled

-- Diagnostic - Index - Page Splits > 1% of writes
    +IIF(i.ops_Total_page_split_CNT > 0
        , N' Splits ' + tempdb.dbo.SQLXL_3SD(i.ops_Total_page_split_CNT,N'I')
        + N' (' + tempdb.dbo.SQLXL_3SD(page_splits_to_write_PCT,N'N') + N'% INS+UPD)'
        , N'')

-- Diagnostic - Index - Page s > 1% of writes
    +IIF(i.ops_Total_page_merge_CNT > 0
        , N'  ' + tempdb.dbo.SQLXL_3SD(i.ops_Total_page_merge_CNT,N'I')
        + N' (' + tempdb.dbo.SQLXL_3SD(page_merge_to_write_PCT,N'N') + N'%Writes)'
        , N'')
----------------------------------------
,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
) i
 WHERE i.diagnostic IS NOT NULL

----------------------------------------------------------------------------------------------------
-- Diagnostic - Index - column constraint references a procedure - can force serialization (BI94)
-- Diagnostic - Index - column constraint references a function - can force serialization (BI94)
-- Diagnostic - Index - column constraint references a SQL method - can force serialization (BI94)
-- Diagnostic - Index - column constraint is disabled
-- Diagnostic - Index - column constraint is not replicated
-- Diagnostic - Index - column constraint is not trusted
-- Diagnostic - Index - column constraint uses non-database collation
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',ic.database_id,ic.object_id,ic.object_id,ic.index_id,ic.type,diagnostic_type_id = 4
      ,diagnostic = N'Constraint on column'
                   +NCHAR(10) + N'> ' + QUOTENAME(c.name)
                   +IIF(cx.uses_sql_proc           = 1,NCHAR(10) + N'> references a procedure - can force serialization (BI94)' ,N'')
                   +IIF(cx.uses_sql_ftn            = 1,NCHAR(10) + N'> references a function - can force serialization (BI94)'  ,N'')
                   +IIF(cx.uses_sql_mthd           = 1,NCHAR(10) + N'> references a SQL method - can force serialization (BI94)',N'')
                   +IIF(cx.is_disabled             = 1,NCHAR(10) + N'> is DISABLED'   ,N'')
                   +IIF(cx.is_not_for_replication  = 0,NCHAR(10) + N'> is REPLICATED' ,N'')
                   +IIF(cx.is_not_trusted          = 1,NCHAR(10) + N'> is NOT TRUSTED',N'')
                   +IIF(cx.uses_database_collation = 0,NCHAR(10) + N'> uses non-Database Collation',N'')
  FROM tempdb.dbo.SQLXL_Index_sys_check_constraints AS cx
  JOIN tempdb.dbo.SQLXL_Index_sys_index_columns     AS ic
    ON cx.database_id                              = ic.database_id
   AND cx.parent_object_id                         = ic.object_id
   AND cx.parent_column_id                         = ic.column_id
  JOIN tempdb.dbo.SQLXL_Index_column                AS c
    ON cx.database_id                              = c.database_id
   AND cx.parent_object_id                         = c.object_id
   AND cx.parent_column_id                         = c.column_id
 WHERE cx.uses_sql_proc           = 1
    OR cx.uses_sql_ftn            = 1
    OR cx.uses_sql_mthd           = 1
    OR cx.is_disabled             = 1
    OR cx.is_not_for_replication  = 0
    OR cx.is_not_trusted          = 1
    OR cx.uses_database_collation = 0;

----------------------------------------------------------------------------------------------------
-- Diagnostic - Index - computed column references a procedure - can force serialization (BI99)
-- Diagnostic - Index - computed column references a function - can force serialization (BI99)
-- Diagnostic - Index - computed column references a SQL method - can force serialization (BI99)
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',ic.database_id,ic.object_id,ic.object_id,ic.index_id,ic.type,diagnostic_type_id = 4
      ,diagnostic = N'Computed Column '
                   +NCHAR(10) + N'> ' + QUOTENAME(c.name)
                   +IIF(c.uses_sql_proc = 1,NCHAR(10) + N'> references a procedure - can force serialization (BI99)' ,N'')
                   +IIF(c.uses_sql_ftn  = 1,NCHAR(10) + N'> references a function - can force serialization (BI99)' ,N'')
                   +IIF(c.uses_sql_mthd = 1,NCHAR(10) + N'> references a SQL method - can force serialization (BI99)',N'')
  FROM tempdb.dbo.SQLXL_Index_sys_index_columns     AS ic
  JOIN tempdb.dbo.SQLXL_Index_sys_columns           AS c
    ON ic.database_id                              = c.database_id
   AND ic.object_id                                = c.object_id
   AND ic.column_id                                = c.column_id
 WHERE c.uses_sql_proc    = 1
    OR c.uses_sql_ftn     = 1
    OR c.uses_sql_mthd    = 1;

----------------------------------------------------------------------------------------------------
-- Index Performance = 4 -- Writes as a percent of table rows
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4
      ,diagnostic = N'Writes:'

-- Diagnostic - Index - writes counted by Data statistics and % of table statistics rows
                +IIF(i.Stats_Prop_modification_CNT > 0
                    ,N' Stat: '+ tempdb.dbo.SQLXL_3SD(i.Stats_Prop_modification_CNT,N'I')
                               +IIF(i.stathdr_Rows_CNT > 0
                                   ,N' ('
                                   + tempdb.dbo.SQLXL_3SD(1.0 * i.Stats_Prop_modification_CNT / i.stathdr_Rows_CNT,N'%') -- /0 by IIF
                                   + N')'
                                   ,N'')
                    ,N'')

-- Diagnostic - Index - writes counted by Usage statistics and % of total rows
                +IIF(i.ius_user_updates_CNT > 0
                    ,N' USG: ' + tempdb.dbo.SQLXL_3SD(i.ius_user_updates_CNT,N'I')
                              +IIF(i.row_CNT > 0
                                  ,N' ('
                                  + tempdb.dbo.SQLXL_3SD(1.0 * i.ius_user_updates_CNT / i.row_CNT,N'%') -- /0 by IIF
                                  + N')'
                                  ,N'')
                    ,N'')

-- Diagnostic - Index - writes counted by Operational statistics and % of total rows
                +IIF(i.ops_Total_write_CNT > 0
                    ,N' OPS: ' + tempdb.dbo.SQLXL_3SD(i.ops_Total_write_CNT,N'I')
                              +IIF(i.row_CNT > 0
                                  ,N' ('
                                  + tempdb.dbo.SQLXL_3SD(1.0 * i.ops_Total_write_CNT / i.row_CNT,N'%') -- /0 by IIF
                                  + N')'
                                  ,N'')
                    ,N'')

-- Diagnostic - Index - rowstore clustered writes greater than 10% of rows (over 100), consider enabling STATISTCS NORECOMPUTE
-- Diagnostic - Index - rowstore nonclustered writes greater than 10% of rows (over 100), consider enabling STATISTCS NORECOMPUTE
                +IIF(     i.type IN (N'1',N'2')
                     AND (   IIF(i.stathdr_Rows_CNT > 100
                                ,1.0 * i.Stats_Prop_modification_CNT / i.stathdr_Rows_CNT
                                ,0) > 0.10 -- 10%
                          OR IIF(i.row_CNT          > 100
                                ,1.0 * i.ius_user_updates_CNT        / i.row_CNT     
                                ,0) > 0.10 -- 10%
                          OR IIF(i.row_CNT          > 100
                                ,1.0 * i.ops_Total_write_CNT         / i.row_CNT     
                                ,0) > 0.10 -- 10%
                         )
                    ,NCHAR(10) + N'> ' + IIF(i.stats_no_recompute = 1
                                            ,N'STATISTICS NORECOMPUTE enabled (BI92)'
                                            ,N'Review STATISTICS NORECOMPUTE')

-- Diagnostic - Index - STATISTCS NORECOMPUTE enabled (BI92)
                    ,IIF(i.stats_no_recompute = 1
                        ,NCHAR(10) + N'> ' + N'STATISTICS NORECOMPUTE enabled (BI92)'
                        ,N''))
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.type                           <> N'0' -- HEAPS handled separately
   AND (   i.Stats_Prop_modification_CNT > 0
        OR i.ius_user_updates_CNT        > 0
        OR i.ops_Total_write_CNT         > 0
       )

----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4,diagnostic = STUFF(

+IIF(i.obj_type IN (N'FT',N'IF',N'TF')          -- no statistics for table valued functions or views
    ,NCHAR(10) + N'Execution statistics N/A'
    ,N'')

-- Diagnostic - Index - Usage Read to Write ratio (BI48)
-- Diagnostic - Index - Operations Read to Write ratio (BI48)
-- Diagnostic - Index - Usage Last Read Days
-- Diagnostic - Index - Usage Last Write days
+CASE WHEN i.obj_type NOT IN (N'F',N'FT',N'IF',N'TF')
       AND (i.ius_User_Total_CNT > 0 OR i.ops_Total_contacts_CNT > 0 OR i.Stats_Prop_modification_CNT > 0)
       AND i.type               <> N'0' -- Heap values reported below with Index Heap findings
      THEN NCHAR(10)
          +N'R/W OPS ' + CASE WHEN ISNULL(i.ops_Total_read_CNT ,0) = 0
                               AND ISNULL(i.ops_Total_write_CNT,0) = 0
                              THEN N'NONE'

                              WHEN ISNULL(i.ops_Total_contacts_CNT,0) = 0
                               AND ISNULL(i.ius_User_Total_CNT    ,0) > 0
                              THEN N'NONE, IDX rebuilt?'

                              WHEN i.ops_Total_write_CNT > 0
                              THEN tempdb.dbo.SQLXL_3SD(ISNULL(i.ios_read_to_write_RAT,0),N'N') + N'x '
                                  +N'(' + tempdb.dbo.SQLXL_3SD(ISNULL(i.ops_Total_read_CNT,0),N'I')
                                  +N'/' + tempdb.dbo.SQLXL_3SD(i.ops_Total_write_CNT,N'I') + N')'

                              ELSE N'Read Only '
                                  +N'(' + tempdb.dbo.SQLXL_3SD(ISNULL(i.ops_Total_read_CNT,0),N'I') + N')'
                         END
          +N' USG '    + CASE WHEN ISNULL(i.ius_User_read_CNT   ,0) = 0
                               AND ISNULL(i.ius_user_updates_CNT,0) = 0
                              THEN N'NONE'

                              WHEN i.ius_user_updates_CNT > 0
                              THEN tempdb.dbo.SQLXL_3SD(ISNULL(i.ius_read_to_write_RAT,0),N'N') + N'x '
                                  +N'(' + tempdb.dbo.SQLXL_3SD(ISNULL(i.ius_User_read_CNT,0),N'I')
                                  +N'/' + tempdb.dbo.SQLXL_3SD(i.ius_user_updates_CNT,N'I') + N')'

                              ELSE N'Read Only '
                                  +N'(' + tempdb.dbo.SQLXL_3SD(ISNULL(i.ius_User_read_CNT,0),N'I') + N')'
                         END
          +N' (BI48)'
        ------------------------------------------------------------------------------------------
        -- DATES - Statistics on non-empty table, last Read, last IUD (INSERT UPDATE DELETE)
        ------------------------------------------------------------------------------------------
        +CASE WHEN i.type NOT IN (N'4')     -- SPATIAL has no USAGE metrics
               AND i.type NOT IN (N'0')     -- HEAPS handled separately
               AND i.ius_User_Total_CNT > 0 -- got activity
              THEN NCHAR(10)
                  +N'Last Used - RDS: ' + ISNULL(CAST(i.ius_last_read_days_ago  AS NVARCHAR(20)) + N' days ago',N'NONE')
                  +N' WRT: '            + ISNULL(CAST(i.ius_last_write_days_ago AS NVARCHAR(20)) + N' days ago',N'NONE')
              ELSE N''   -- No usage metrics for SPATIAL
         END

-- Diagnostic - Objects - objects (Foreign Key Constraint, Table functions, Views) changed within last 90 days
      WHEN i.type IN (N'F',N'FT',N'IF',N'TF',N'V')
       AND DATEDIFF(DAY,o.modify_date,sp.collection_DTTM) <= 90
      THEN NCHAR(10) + N'Dates: Modified '
                     + CONVERT(NVARCHAR(10),o.modify_date,2)
                     + IIF(DATEDIFF(DAY,o.create_date,o.modify_date) > 0,N', Created ' + CONVERT(NVARCHAR(10),o.create_date,2),N'')
      WHEN i.obj_type IN (N'F',N'FT',N'IF',N'TF')
      THEN N''

      -- Everybody ELSE
      ELSE N''
 END

-- Diagnostic - Index - High ratio of page locks to row locks
+IIF(i.page_lock_to_row_lock_RAT >= 0.50 AND i.type NOT IN (N'5',N'6')
    ,NCHAR(10) + N'High ratio PAGE to ROW locks - '
               + tempdb.dbo.SQLXL_3SD(100.0 * i.page_lock_to_row_lock_RAT,N'N') + N'x'
    ,N'')

-- Diagnostic - Index - Statistics Row count <> Partition Physical Row Count by 0.5% or more
+IIF(    i.type IN (N'1',N'2')
     AND (   IIF(i.row_CNT          > 0
                ,ABS(100.0 * (i.row_CNT - i.stathdr_Rows_CNT) / i.row_CNT)         
                ,0) > 0.5
          OR IIF(i.stathdr_Rows_CNT > 0
                ,ABS(100.0 * (i.stathdr_Rows_CNT - i.row_CNT) / i.stathdr_Rows_CNT)
                ,0) > 0.5
         )
    ,NCHAR(10) + N'Stats Row Delta: Physical rows '
               + tempdb.dbo.SQLXL_3SD(i.row_CNT,N'I')
               + N' <> Stats ' + tempdb.dbo.SQLXL_3SD(i.stathdr_Rows_CNT,N'I')
               + IIF(i.row_CNT > 0
                    ,N' (' + tempdb.dbo.SQLXL_3SD(ABS(1.0 * (i.row_CNT - i.stathdr_Rows_CNT) / i.row_CNT         ),N'%') + N')'
                    ,IIF(i.stathdr_Rows_CNT > 0
                        ,N' (' + tempdb.dbo.SQLXL_3SD(ABS(1.0 * (i.stathdr_Rows_CNT - i.row_CNT) / i.stathdr_Rows_CNT),N'%') + N')'
                        ,N'')
                    )
    ,N'')
-- STUFF END
,1,1,N'')
/*** LOCAL TESTING ***
SELECT COUNT(1)
--*/
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
           AND obj_type_short_label NOT IN (N'TVF'
                                           ,N'VW'
                                           )
       ) AS i
 CROSS JOIN (
             SELECT ProductMajorVersion = TRY_CAST(run_value AS INT)
               FROM tempdb.dbo.SQLXL_Index_sys_instance
              WHERE source = N'SERVERPROPERTY'
                AND name   = N'ProductMajorVersion'
            ) AS mv
 CROSS JOIN
       tempdb.dbo.SQLXL_Index_sys_Startup_Parameters AS sp
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
    ON i.database_id                     = o.database_id
   AND i.parent_object_id                = o.parent_object_id
   AND i.OBJECT_ID                       = o.OBJECT_ID
) i
 WHERE i.diagnostic IS NOT NULL

----------------------------------------------------------------------------------------------------
-- Index Performance = 4 COLUMNSTORE
-- Columnstores needing possible REORGANIZE
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT rec_type = 'I',i.database_id,parent_object_id = i.object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4,diagnostic =
-- Diagnostic - Index - Columnstore has more than 1 partition
-- Diagnostic - Index - Columnstore has OPEN rowgroups
-- Diagnostic - Index - Columnstore has RESIDUAL_ROW_GROUP
-- Diagnostic - Index - Columnstore has DICTIONARY_SIZE constrained rowgroups
-- Diagnostic - Index - Columnstore has deleted rows
-- Diagnostic - Index - Review need to REORGANIZE/REBUILD
      N'Columnstore Index has'
    + N' '    + tempdb.dbo.SQLXL_3SD(c.partition_CNT,N'I') + N' Partition(s)'
    + N' in ' + tempdb.dbo.SQLXL_3SD(c.rowgroup_CNT,N'I') + N' Rowgroup(s)'
    + IIF(c.open_rowgroup_CNT > 0
         ,NCHAR(10) + N'> '
                    + tempdb.dbo.SQLXL_3SD(1.0 * c.open_rows_CNT / c.open_rowgroup_CNT,N'I')
                    + N' Average rows in '
                    + tempdb.dbo.SQLXL_3SD(c.open_rowgroup_CNT,N'I') + N' Open Rowgroup(s)'
       ,N'')
    + IIF(c.compressed_residual_CNT > 0
         ,NCHAR(10) + N'> '
                    + tempdb.dbo.SQLXL_3SD(1.0 * c.compressed_residual_rows_CNT / c.compressed_residual_CNT,N'I')
                    + N' Average rows in '
                    + tempdb.dbo.SQLXL_3SD(c.compressed_residual_CNT,N'I') + N' RESIDUAL_ROW_GROUP(S)'
       ,N'')
    + IIF(c.compressed_dictionary_CNT > 0
         ,NCHAR(10) + N'> '
                    + tempdb.dbo.SQLXL_3SD(1.0 * c.compressed_dictionary_rows_CNT / c.compressed_dictionary_CNT,N'I')
                    + N' Average rows in '
                    + tempdb.dbo.SQLXL_3SD(c.compressed_dictionary_CNT,N'I') + N' DICTIONARY_SIZE constrained rowgroup(s)'
       ,N'')
    + IIF(c.deleted_rowgroup_CNT > 0
         ,NCHAR(10) + N'> '
                    + tempdb.dbo.SQLXL_3SD(1.0 * c.deleted_rows_CNT / c.deleted_rowgroup_CNT,N'I')
                    + N' Average rows in '
                    + tempdb.dbo.SQLXL_3SD(c.deleted_rowgroup_CNT,N'I') + N' rowgroup(s)'
       ,N'')
    + IIF(c.open_rows_CNT + c.deleted_rows_CNT > 0,NCHAR(10) + N'> REORGANIZE/REBUILD?',N'')
  FROM (
        SELECT database_id
              ,object_id
              ,index_id
              ,rowgroup_CNT                   = COUNT(1)
              ,partition_CNT                  = COUNT(DISTINCT(partition_number))
              ,open_rowgroup_CNT              = SUM(IIF(state_desc = N'OPEN',1,0))
              ,open_rows_CNT                  = SUM(IIF(state_desc = N'OPEN',total_rows,0))
              ,compressed_residual_CNT        = SUM(IIF(    state_desc       = N'COMPRESSED'
                                                        AND trim_reason_desc = N'RESIDUAL_ROW_GROUP'
                                                       ,1,0))
              ,compressed_residual_rows_CNT   = SUM(IIF(    state_desc       = N'COMPRESSED'
                                                        AND trim_reason_desc = N'RESIDUAL_ROW_GROUP'
                                                       ,total_rows,0))
              ,compressed_dictionary_CNT      = SUM(IIF(    state_desc       = N'COMPRESSED'
                                                        AND trim_reason_desc = N'DICTIONARY_SIZE'
                                                       ,1,0))
              ,compressed_dictionary_rows_CNT = SUM(IIF(    state_desc       = N'COMPRESSED'
                                                        AND trim_reason_desc = N'DICTIONARY_SIZE'
                                                       ,total_rows,0))
              ,deleted_rowgroup_CNT           = SUM(IIF(deleted_rows > 0,1,0))
              ,deleted_rows_CNT               = SUM(IIF(deleted_rows > 0,deleted_rows,0))
          FROM tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats
         GROUP BY
               database_id
              ,object_id
              ,index_id
       ) c
  JOIN tempdb.dbo.SQLXL_Index_sys_indexes AS i
    ON c.database_id      = i.database_id
   AND c.object_id        = i.object_id
   AND c.index_id         = i.index_id
   AND i.type            IN (N'5',N'6')
 WHERE c.open_rowgroup_CNT         > 0
    OR c.compressed_residual_CNT   > 0
    OR c.compressed_dictionary_CNT > 0
    OR c.deleted_rowgroup_CNT      > 0
) i
 WHERE i.diagnostic IS NOT NULL

----------------------------------------------------------------------------------------------------
-- Index Performance = 4 -- Additional key DENSITY VECTOR
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4
-- Diagnostic - Index - adding another key element doesn't make index much more selective
      ,diagnostic  = i.low_selectivity_additional_keys
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.low_selectivity_additional_keys IS NOT NULL

----------------------------------------------------------------------------------------------------
-- Index Non-Default = 6
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 6,diagnostic = STUFF(    -- sys.indexes
-- Diagnostic - Index - Columnstore compression delay > 0
+IIF(i.compression_delay_mm > 0
    ,NCHAR(10) + N'Columnstore compression delay '
               + CAST(i.compression_delay_mm AS NVARCHAR(20)) + N' minutes'
    ,N'')

-- Diagnostic - Index - Created by Auto Tuning
+IIF(i.auto_created = 1,N'Created by auto tuning',N'')

+IIF(   i.stats_auto_created         = 1
     OR i.stats_no_recompute         = 1
     OR i.stats_has_filter           = 1
     OR i.stats_is_temporary         = 1
     OR i.stats_is_incremental       = 1
     OR i.stats_generation_method    > 0
     OR i.stathdr_Persisted_Sample_Percent BETWEEN 0 AND 99
    ,NCHAR(10) + N'Statistics: '
    +STUFF(  -- i.stats_has_filter covered below

-- Diagnostic - Index - Auto Created
            IIF(i.stats_auto_created   = 1,N', Auto created',N'')

-- Diagnostic - Index - temporary - on READ ONLY secondary
           +IIF(i.stats_is_temporary   = 1,N', temporary - on READ ONLY secondary',N'')

-- Diagnostic - Index - Incremental statistics update enabled
-- Diagnostic - Index - Partitioned & Incremental stats NOT ENABLED
           +IIF(i.stats_is_incremental = 1
               ,N', Incremental Update [ENABLED]'
               ,IIF((    (        mv.ProductMajorVersion >= 14  -- 2017+
                          OR (    mv.ProductMajorVersion  = 13
                              AND CAST(PARSENAME(pv.ProductVersion,2) AS INT) >= 4001
                             ) -- 2016 SP1 13.0.4001.0
                          OR (    mv.ProductMajorVersion  = 12
                              AND CAST(PARSENAME(pv.ProductVersion,2) AS INT) >= 5000
                             ) -- 2014 SP2 12.0.5000.0
                         )
                     AND i.partition_function_ID > 0
                    )
                    ,NCHAR(10) + N', Partitioned & Incremental stats [NOT ENABLED]'
                    ,N''))

-- Diagnostic - Index - Persisted Sample Percent < 100%
           +IIF(i.stathdr_Persisted_Sample_Percent BETWEEN 1 AND 99
               ,NCHAR(10) + N', persisted sample ' + CAST(i.stathdr_Persisted_Sample_Percent AS NVARCHAR(20)) + N'%'
               ,N'')

-- Diagnostic - Index - Statistics generated by method
           +IIF(i.stats_generation_method > 0,NCHAR(10) + N', generated by ' +i.stats_generation_method_desc,N'')
    ,1,2,N'')
    ,N'')
,1,1,N'')
/*** LOCAL TESTING ***
SELECT *
--*/
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 CROSS JOIN (SELECT ProductMajorVersion = TRY_CAST(run_value              AS INT)
               FROM tempdb.dbo.SQLXL_Index_sys_instance
              WHERE source = N'SERVERPROPERTY'
                AND name   = N'ProductMajorVersion'
            ) AS mv
 CROSS JOIN (SELECT ProductVersion      = TRY_CAST(PARSENAME(run_value,2) AS INT)
               FROM tempdb.dbo.SQLXL_Index_sys_instance
              WHERE source = N'SERVERPROPERTY'
                AND name   = N'ProductVersion'
            ) AS pv
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
    ON i.database_id                     = o.database_id
   AND i.parent_object_id                = o.parent_object_id
   AND i.object_id                       = o.object_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Compilation AS p
    ON i.database_id                     = p.database_id
   AND i.parent_object_id                = p.parent_object_id
   AND N'P'                              = p.rec_type
) i
 WHERE i.diagnostic IS NOT NULL

----------------------------------------------------------------------------------------------------
-- Index Information = 8
-- Skipping is_primary_key,is_unique_constraint since covered later
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 8,diagnostic = STUFF(

-- Diagnostic - Index - Covers Foreign Key(s)
 IIF(i.covered_fkc_IDs IS NOT NULL,NCHAR(10) + N'Covers Foreign Key(s) ' +i.covered_fkc_IDs,N'')

-- Diagnostic - Index - is partitioned & partitioning column (BI64)
+IIF(i.ios_partition_CNT > 1 OR i.partition_column_ID > 0
    ,NCHAR(10) + N'Partitioned on ' + QUOTENAME(COALESCE(i.partition_column_name,N'PART COL NOT FOUND')) + N' - '
               + COALESCE(CAST(i.partition_CNT AS NVARCHAR(20)),N'PART CNT NOT FOUND')
               + N' partitions (BI64)'
    ,N'')

-- Diagnostic - Index - Used by Change Data Capture
+IIF(i.name = i.cdc_index_name,NCHAR(10) + N'Used by Change Data Capture (CDC) on this table',N'')

-- system named objects. some objects (CK,DF,EC,FK,PK,AO,UQ) escape getting flagged
-- Diagnostic - Index - System named
+IIF(i.is_system_named = 1,NCHAR(10) + N'System named',N'')

-- Diagnostic - Index - Created by Database Tuning Advisor (DTA)
+IIF(CHARINDEX(N'_DTA_',i.name) > 0,NCHAR(10) + N'Created through Database Tuning Advisor (DTA)',N'')

-----------------------------------------------------
-- Diagnostic - Index - Clustered Rowstore - More than 3 Key columns or more than 16 bytes (BI24)
-- Diagnostic - Index - Nonclustered Rowstore - More than 4 Key columns or more than 16 bytes (BI23)
+IIF(    i.type IN (N'1',N'2')
     AND i.obj_type_short_label NOT IN (N'HST',N'IT')
     AND (   COALESCE(i.stathdr_Average_Key_Length,i.key_Total_datatype_length_bytes) > 16
          OR (   i.type = N'1' AND i.Key_Columns_CNT > 3
              OR i.type = N'2' AND i.Key_Columns_CNT > 4
             )
         )
   ,NCHAR(10) + N'Big key: '
              + IIF(i.stathdr_Average_Key_Length > 0
                   ,CAST(i.stathdr_Average_Key_Length      AS NVARCHAR(20)) + N' StatHdr bytes'
                   ,CAST(i.key_Total_datatype_length_bytes AS NVARCHAR(20)) + N' col bytes'
                   ) + N' (BI24)'
              + N' In ' + CAST(i.Key_Columns_CNT AS NVARCHAR(20)) + N' cols'
              + IIF(i.type <> N'1',N' excl CX',N'')
              + N' (BI23)'
    ,N'')
-----------------------------------------------------
-- Diagnostic - Index - Candidate Clustering key for HEAP
+IIF(    i.type                   IN (N'0')
     AND i.tbl_is_memory_optimized = 0
     AND c.[Column Descriptors]   IS NOT NULL
    ,NCHAR(10) + N'Candidate Clustering key' + NCHAR(10) + N'> ' + c.[Column Descriptors]
    ,N'')

-----------------------------------------------------
,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       )                                AS i
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
    ON i.database_id                     = o.database_id
   AND i.object_id                       = o.object_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_StatHeader AS sssh
    ON i.database_id                     = sssh.database_id
   AND i.object_id                       = sssh.object_id
   AND i.index_id                        = sssh.index_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_column      AS c
    ON i.database_id                     = c.database_id
   AND i.object_id                       = c.object_id
   AND COALESCE(i.tbl_cx_uniq_ordered_column_ID,i.tbl_possible_uniq_column_id) = c.column_id
) i
 WHERE i.diagnostic IS NOT NULL

----------------------------------------------------------------------------------------------------
-- Information = 8
-- Synergies
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 8
-- Diagnostic - Index - Synergies found between indexes, missing indexes, and Foreign Key Constraints (BI1&2)
      ,diagnostic = N'Synergy -'
                +STUFF( IIF(i.synergy_s > 0,N', Sequence (BI1&2)',N'')
                       +IIF(i.synergy_f > 0,N', Foreign Key'     ,N'')
                       +IIF(i.synergy_o > 0,N', Overlap'         ,N'')
                       +IIF(i.synergy_k > 0,N', Keys'            ,N'')
                      ,1,1,N'')
  FROM (---------------------------------------------------------------------------------
        --
        ---------------------------------------------------------------------------------
        SELECT database_id,parent_object_id,object_id,index_id,type
              ,synergy_s = SUM(i.matching_sequence_CNT )
              ,synergy_f = SUM(i.matching_foreign_CNT  )
              ,synergy_o = SUM(i.matching_overlap_CNT  )
              ,synergy_k = SUM(i.matching_contained_CNT)
          FROM (
                SELECT database_id,parent_object_id,object_id = l_object_id,index_id = l_index_id,type = l_type
                      ,matching_sequence_CNT  = IIF(i.matching_sequence_CNT  > 0 AND LEFT(i.matching_sequence_COL,1)=N'S',1,0)
                      ,matching_foreign_CNT   = IIF(i.matching_sequence_CNT  > 0 AND LEFT(i.matching_sequence_COL,1)=N'F',1,0)
                      ,matching_overlap_CNT   = IIF(i.matching_overlap_CNT   > 0 AND matching_overlap_COL  > N'',1,0)
                      ,matching_contained_CNT = IIF(i.matching_contained_CNT > 0 AND matching_contained_COL> N'',1,0)
                  FROM tempdb.dbo.SQLXL_Index_Synergies AS i
                 WHERE ISNULL(i.matching_sequence_CNT ,0)
                      +ISNULL(i.matching_overlap_CNT  ,0)
                      +ISNULL(i.matching_contained_CNT,0) > 0

                UNION
                SELECT database_id,parent_object_id,object_id = r_object_id,index_id = r_index_id,type = r_type
                      ,matching_sequence_CNT  = IIF(i.matching_sequence_CNT  > 0 AND LEFT(i.matching_sequence_COL,1)=N'S',1,0)
                      ,matching_foreign_CNT   = IIF(i.matching_sequence_CNT  > 0 AND LEFT(i.matching_sequence_COL,1)=N'F',1,0)
                      ,matching_overlap_CNT   = IIF(i.matching_overlap_CNT   > 0 AND matching_overlap_COL  > N'',1,0)
                      ,matching_contained_CNT = IIF(i.matching_contained_CNT > 0 AND matching_contained_COL> N'',1,0)
                  FROM tempdb.dbo.SQLXL_Index_Synergies AS i
                 WHERE ISNULL(i.matching_sequence_CNT ,0)
                      +ISNULL(i.matching_overlap_CNT  ,0)
                      +ISNULL(i.matching_contained_CNT,0) > 0
               ) i
         GROUP BY
               database_id,parent_object_id,object_id,index_id,type
       ) i

----------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Hi Scans to Reads - NOTE: No InMemory since all non-hash reads are scans
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4,diagnostic =
       N'Hi Scan %Reads: '
      + LTRIM(IIF(i.ius_user_scans_CNT > 0
                 , N' USG ' + tempdb.dbo.SQLXL_3SD(i.ius_user_scans_CNT,N'I')
                 + N' ('    + tempdb.dbo.SQLXL_3SD(i.ius_scans_to_read_PCT,N'N') + N'%)'
                 + N' (BI80)'
                 , N'')
             +IIF(i.ops_Total_scan_cnt > 0
                 , N' OPS ' + tempdb.dbo.SQLXL_3SD(i.ops_Total_scan_cnt,N'I')
                 + N' ('    + tempdb.dbo.SQLXL_3SD(i.ops_scans_to_read_PCT,N'N') + N'%)'
                 + N' (BI81)'
                 , N'')
             )
  FROM tempdb.dbo.SQLXL_Index_Compilation AS i
 CROSS
  JOIN (SELECT ius_user_read_CNT
              ,ops_Total_read_CNT
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'A'
       ) AS a
 WHERE i.rec_type = N'I'
   AND i.type NOT IN (N'5',N'6')
   AND NOT (    i.tbl_is_memory_optimized = 1
            AND i.type IN (N'0')
           )
   AND (   i.ius_scans_to_read_PCT > 5.0
        OR i.ops_scans_to_read_PCT > 5.0
       )
   AND (   IIF(a.ius_user_read_CNT  > 0
              ,100.0 * i.ius_user_scans_CNT / a.ius_user_read_CNT
              ,0) > 0.001 -- > 1/1000 of all read activity
        OR IIF(a.ops_Total_read_CNT > 0
              ,100.0 * i.ops_Total_scan_cnt / a.ops_Total_read_CNT
              ,0) > 0.001 -- > 1/1000 of all read activity
       );

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - High (> 25X) Ratio histogram bucket count Hi to low - candidate for parameter sniffing
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',ic.database_id,ic.object_id,ic.object_id,ic.index_id,ic.type,diagnostic_type_id = 8,diagnostic =
 N'Parameter sniffing candidate - Range '
+tempdb.dbo.SQLXL_3SD(ssh.param_sniff,N'N')
+N'x for Key '
+CAST(ic.key_column_sequence AS NVARCHAR(20))
  FROM tempdb.dbo.SQLXL_Index_sys_index_columns                    AS ic
  JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram_summary AS ssh
    ON ic.database_id                                             = ssh.database_id
   AND ic.object_id                                               = ssh.object_id
   AND ic.index_id                                                = ssh.index_id
   AND 0                                                          = ssh.column_id
 WHERE ic.key_column_sequence = 1
   AND ssh.param_sniff        > 25

----------------------------------------------------------------------------------------------------
-- Diagnostic - Index - with Lookups > 5% of total reads
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4,diagnostic =
 N'Lookup %Reads: '
+LTRIM(IIF(i.ius_user_lookups_CNT > 0
          , N' USG ' + tempdb.dbo.SQLXL_3SD(i.ius_user_lookups_CNT,N'I')
          + N' ('    + tempdb.dbo.SQLXL_3SD(i.ius_lookups_to_read_PCT,N'N') + N'%)'
          , N'')
      +IIF(i.ios_singleton_lookup_CNT > 0
          , N' OPS ' + tempdb.dbo.SQLXL_3SD(i.ios_singleton_lookup_CNT,N'I')
          + N' ('    + tempdb.dbo.SQLXL_3SD(i.ios_singleton_lookup_to_read_PCT,N'N') + N'%)'
          , N'')
      )
+CASE i.TYPE
      WHEN N'0' THEN N' - Create CX?'
      WHEN N'1' THEN N' - add more included col?'
      WHEN N'2' THEN N' - add more included col?'
      WHEN N'6' THEN N' - add more columns to index?'
      ELSE N' - Review'
 END
  FROM tempdb.dbo.SQLXL_Index_Compilation AS i
 CROSS
  JOIN (SELECT ius_user_read_CNT,ops_Total_read_CNT 
          FROM tempdb.dbo.SQLXL_Index_Compilation 
         WHERE rec_type = N'A'
       ) AS a
 WHERE rec_type = N'I'
   AND (   i.ius_lookups_to_read_PCT          > 5.0
        OR i.ios_singleton_lookup_to_read_PCT > 5.0
       )
   AND (   IIF(a.ius_user_read_CNT  > 0
              ,100.0 * i.ius_user_lookups_CNT     / a.ius_user_read_CNT
              ,0) > 0.005
        OR IIF(a.ops_Total_read_CNT > 0
              ,100.0 * i.ios_singleton_lookup_CNT / a.ops_Total_read_CNT
              ,0) > 0.005
       );

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Possible UNIQUEIDENTIFIER not stored as UNIQUEIDENTIFIER data type - name or %char data length (16,29,22,32,36,38,68)
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',ic.database_id,ic.object_id,ic.object_id,ic.index_id,ic.type,diagnostic_type_id = 8
-- Diagnostic - Table - has what looks like a GUID stored as something else
      ,diagnostic = IIF(ic.is_included_column = 0,N'Key ',N'')
                  + N'Column ' + QUOTENAME(cx.name)
                  + NCHAR(10)
                  + N' > Possible UNIQUEID, type is ' + UPPER(cx.user_type_name)
                  + N'(' + IIF(cx.max_length = -1,N'MAX',CAST(cx.max_length AS NVARCHAR(4))) + N')'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type             = N'I'
           AND obj_type_short_label = N'TBL'
           AND tbl_row_cnt          > 0
           AND NOT (    Key_Columns_CNT = 1
                    AND (   is_primary_key = 1
                         OR is_unique      = 1
                        )
                   )
       )  AS i
  JOIN tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
    ON i.database_id                             = ic.database_id
   AND i.object_id                               = ic.object_id
   AND i.index_id                                = ic.index_id
   AND i.type                                    = ic.type
  JOIN tempdb.dbo.SQLXL_Index_sys_columns       AS cx
    ON ic.database_id                          = cx.database_id
   AND ic.object_id                            = cx.object_id
   AND ic.column_id                            = cx.column_id
 WHERE cx.system_type_id NOT IN (36,104) -- N'uniqueidentifier',N'BIT'
   AND cx.user_type_name NOT LIKE N'%INT%'
   AND (   cx.name LIKE N'%IDENTIFIER%'
        OR cx.name LIKE N'%GUID%'        -- globally unique identifier
        OR cx.name LIKE N'%UUID%'        -- universally unique identifier
        OR (    cx.name LIKE N'%ID%'
            AND cx.user_type_name LIKE N'%CHAR'
            AND cx.max_length IN (16 -- ASCII256 encoded
                                 ,20 -- ASCII85 encoded
                                 ,22 -- Base64 encoded
                                 ,32 -- Readable, no dashes or braces/parenttheses
                                 ,36 -- Readable, dashes no braces/parenttheses
                                 ,38 -- Readable, dashes and braces/parenttheses
                                 ,68 -- Dot.Net ToString "X" format - Four braced hex values, 4th value is subset of 8 braced hex values
                                 )
           )
       )
   AND (   cx.name NOT LIKE N'%_IDENTIFIER'
       );

--------------------------------------------------------------------------------------------------------------------------------------------
-- Filtered indexes
--------------------------------------------------------------------------------------------------------------------------------------------
SET ANSI_WARNINGS ON;

INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',i.database_id,i.object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4,diagnostic =
 N'Index Filtered: ' + STUFF(
-- Diagnostic - index - has filter on lead key column
+IIF(ed.lead_key > 0,N' Lead Key',N'')

-- Diagnostic - index - has filter on non-lead key column
+IIF(ed.non_lead_key > 0
    ,IIF(ed.lead_key > 0,N', ',N' ') + CAST(ed.non_lead_key AS NVARCHAR(20)) + N' non-Lead Key(s)'
    ,N'')

-- Diagnostic - index - has filter on included column
+IIF(ed.non_key > 0
    ,IIF(ed.lead_key > 0 OR ed.non_lead_key > 0,N', ',N' ') + CAST(ed.non_key AS NVARCHAR(20)) + N' Included column(s)'
    ,N'')

-- Diagnostic - index - filtered on a column not in the index (BI34) - with column name(s)
+IIF(ed.non_index > 0
    ,N', ' + CAST(ed.non_index    AS NVARCHAR(20)) + N' non-key column(s) (BI34) '
          +ISNULL((SELECT NCHAR(10) + N'> ' + QUOTENAME(c.name)
                     FROM tempdb.dbo.SQLXL_Index_sys_sql_expression_dependencies AS edc
                     LEFT OUTER
                     JOIN tempdb.dbo.SQLXL_Index_sys_columns       AS c
                       ON edc.database_id                         = c.database_id
                      AND edc.referencing_id                      = c.object_id
                      AND edc.referenced_minor_id                 = c.column_id
                     LEFT OUTER
                     JOIN tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
                       ON edc.database_id                         = ic.database_id
                      AND edc.referencing_id                      = ic.object_id
                      AND edc.referencing_minor_id                = ic.index_id
                      AND edc.referenced_minor_id                 = ic.column_id
                    WHERE ed.non_index                            > 0
                      AND ed.database_id                          = edc.database_id
                      AND ed.object_id                            = edc.referencing_id
                      AND ed.index_id                             = edc.referencing_minor_id
                      AND 7                                       = edc.referencing_class
                      AND 1                                       = edc.referenced_class
                      AND ic.column_id                           IS NULL
                      FOR XML PATH(N''), TYPE
                  ).value('(./text())[1]',N'NVARCHAR(4000)')
                  ,NCHAR(10) + N'> Column not found')
    ,N'')
,1,1,N'')
  FROM (
        SELECT database_id      = ed.database_id
              ,object_id        = ed.referencing_id
              ,index_id         = ed.referencing_minor_id
              ,lead_key         = SUM(IIF(ic.key_column_sequence = 1,1,0))
              ,non_lead_key     = SUM(IIF(ic.key_column_sequence > 1,1,0))
              ,non_key          = SUM(IIF(ic.is_included_column  = 1,1,0))
              ,non_index        = SUM(IIF(ic.column_id       IS NULL,1,0))
          FROM tempdb.dbo.SQLXL_Index_sys_sql_expression_dependencies AS ed
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_index_columns               AS ic
            ON ed.database_id          = ic.database_id
           AND ed.referencing_id       = ic.object_id
           AND ed.referencing_minor_id = ic.index_id
           AND ed.referenced_minor_id  = ic.column_id
         WHERE ed.referencing_class    = 7
           AND ed.referenced_class     = 1
         GROUP BY
               ed.database_id
              ,ed.referencing_id
              ,ed.referencing_minor_id
       ) ed
  JOIN tempdb.dbo.SQLXL_Index_sys_indexes AS i
    ON ed.database_id                    = i.database_id
   AND ed.object_id                      = i.object_id
   AND ed.index_id                       = i.index_id
   AND TRY_CAST(i.type AS INT)          IS NOT NULL;

SET ANSI_WARNINGS OFF;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Capture Filtered Statistics on key columns (Index, Missing, FKC) NOT on an Index
--------------------------------------------------------------------------------------------------------------------------------------------
SET ANSI_WARNINGS ON;

IF (OBJECT_ID(N'tempdb..#key_column_filtered_statistics') IS NOT NULL) DROP TABLE #key_column_filtered_statistics;

SELECT x.database_id
      ,x.parent_object_id
      ,ic.object_id
      ,ic.column_id
      ,ic.index_id
      ,ic.type
      ,ic.key_column_sequence
      ,c.name
      ,cnt                          = COUNT(1)
      ,auto_created                 = SUM(IIF(s.auto_created         = 1,1,0))
      ,no_recompute                 = SUM(IIF(s.no_recompute         = 1,1,0))
      ,is_temporary                 = SUM(IIF(s.is_temporary         = 1,1,0))
      ,is_incremental               = SUM(IIF(s.is_incremental       = 1,1,0))
      ,has_persisted_sample         = SUM(IIF(s.has_persisted_sample = 1,1,0))
  INTO #key_column_filtered_statistics
  FROM (SELECT database_id,parent_object_id = object_id,object_id,stats_id
          FROM tempdb.dbo.SQLXL_Index_sys_stats
         WHERE has_filter = 1
        EXCEPT
        SELECT database_id,parent_object_id = object_id,object_id,index_id
          FROM tempdb.dbo.SQLXL_Index_sys_indexes
         WHERE has_filter = 1
       ) AS x
  JOIN tempdb.dbo.SQLXL_Index_sys_stats AS s
    ON x.database_id            = s.database_id
   AND x.object_id              = s.object_id
   AND x.stats_id               = s.stats_id
  JOIN tempdb.dbo.SQLXL_Index_sys_sql_expression_dependencies AS sep
    ON s.database_id            = sep.database_id
   AND s.object_id              = sep.referencing_id
   AND s.stats_id               = sep.referencing_minor_id
   AND 9                        = sep.referencing_class
  JOIN (
        SELECT database_id,parent_object_id = object_id,object_id,index_id,type,column_id,key_column_sequence
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns
         WHERE is_included_column = 0
        UNION ALL
        SELECT database_id,parent_object_id,constraint_object_id,constraint_object_id,N'F',parent_column_id,constraint_column_id
          FROM tempdb.dbo.SQLXL_Index_sys_foreign_key_columns
       ) AS ic
    ON x.database_id            = ic.database_id
   AND x.parent_object_id       = ic.parent_object_id
-- AND x.object_id              = ic.object_ID -- Commented out since we're only looking for filters on Table columns
   AND sep.referenced_minor_id  = ic.column_id
  JOIN tempdb.dbo.SQLXL_Index_sys_columns AS c
    ON x.database_id            = c.database_id
   AND x.object_id              = c.object_id
   AND sep.referenced_minor_id  = c.column_id
 GROUP BY
       x.database_id
      ,x.parent_object_id
      ,ic.object_id
      ,ic.column_id
      ,ic.index_id
      ,ic.type
      ,ic.key_column_sequence
      ,c.name;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Statistics - Filtered Statistics on key columns (Index, Missing, FKC) NOT on an Index
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 8,diagnostic =
 N'Column Filtered Statistics (BI93)'
          +ISNULL((SELECT N' Key '
                         +CAST(cfs.key_column_sequence AS NVARCHAR(20))
                         +N': '+tempdb.dbo.SQLXL_3SD(cfs.cnt,N'I')
                     FROM #key_column_filtered_statistics AS cfs
                    WHERE i.database_id      = cfs.database_id
                      AND i.parent_object_id = cfs.parent_object_id
                      AND i.object_id        = cfs.object_id
                      AND i.index_id         = cfs.index_id
                      AND i.type             = cfs.type
                      FOR XML PATH(N''), TYPE
                  ).value('(./text())[1]',N'NVARCHAR(4000)')
                  ,NCHAR(10) + N'> Column not found')
  FROM (
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
          FROM #key_column_filtered_statistics
         GROUP BY
               database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
       ) i;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Lead key 2-19 steps, hi parameter sniff (>25X), candidate for Filter
-- Diagnostic - Index - non-Lead key 2-19 steps, hi parameter sniff (>25X), candidate for Filter
-- Diagnostic - Index - BIT data type, candidate for Filter
-- Diagnostic - Index - name implies potential for filtering (BI33)
-- Diagnostic - Index - SPARSE column, potential for filtering
-- Diagnostic - Index - Ratio hi histogram bucket to low is HIGH, candidate for parameter sniffing
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',ic.database_id,ic.object_id,ic.object_id,ic.index_id,ic.type,diagnostic_type_id = 8,diagnostic =
 N'Key ' + CAST(ic.key_column_sequence AS NVARCHAR(20)) + N':'
+CASE WHEN c.data_type = N'BIT'
      THEN N' BIT, '
      WHEN c.is_sparse = 1
      THEN N' SPARSE, '
      WHEN c.histogram_steps BETWEEN 2 AND 19
       AND c.param_sniff          >= 25.0
      THEN N''
      WHEN ic.is_index_column_filtered = 1
      THEN N''
      ELSE N' named like filter, '
 END
+CASE WHEN c.histogram_steps > 0
      THEN CAST(c.histogram_steps AS NVARCHAR(20)) + N' steps'
          +CASE WHEN c.param_sniff > 0
                THEN N', sniffs ' + tempdb.dbo.SQLXL_3SD(c.param_sniff,N'N') + N'x'
                ELSE N', no sniff'
           END
      ELSE CASE WHEN i.tbl_is_empty = 1
                THEN N'Empty'
                ELSE N'No stats'
           END
 END
+IIF(ic.is_index_column_filtered = 1,N', is filtered',N', add filter? (BI33)')
  FROM (--------------------------------------------------------------------------------------------
        -- All KEY index columns for candidate index types
        --------------------------------------------------------------------------------------------
        SELECT database_id
              ,object_id
              ,index_id
              ,type
              ,key_column_sequence
              ,is_index_column_filtered
              ,column_id
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns
         WHERE is_included_column = 0
           AND partition_ordinal  = 0
           AND type          NOT IN (N'0',N'1',N'5',N'F') -- exclude HEAPS, CLUSTERED, CLUSTERED COLUMNSTORE, Foreign Key Constraints
       ) ic
  JOIN tempdb.dbo.SQLXL_Index_column AS c
    ON ic.database_id               = c.database_id
   AND ic.object_id                 = c.object_id
   AND ic.Column_ID                 = c.column_id
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
    ON ic.database_id               = i.database_id
   AND ic.object_id                 = i.parent_object_id
   AND ic.object_id                 = i.object_id
   AND ic.index_id                  = i.index_id
   AND ic.type                      = i.type
   AND 0                            = i.is_primary_key
   AND 0                            = i.is_unique_constraint
 WHERE (    c.histogram_steps     BETWEEN 2 AND 19
        AND c.param_sniff              >= 25.0              -- greater than 25 times rowcounts between high and low
        AND c.is_identity               = 0                 -- if IDENTITY ignore Stats Steps
        AND c.is_sequence               = 0                 -- if SEQUENCE ignore Stats Steps
        AND c.is_newsequentialid        = 0                 -- if NEWSEQUENTIALID ignore Stats Steps
        AND c.data_type          NOT LIKE N'%DATE%'         -- omit DATE/DATETIME
        AND i.obj_type_short_label NOT IN (N'HST',N'IT') -- can't modify System internal or history tables
       )
    ---------------------------------------------------------
    OR N'bit'                    = c.data_type
    OR  c.is_sparse              = 1
    ---------------------------------------------------------
    OR  c.name LIKE N'is%'
    OR (c.name LIKE N'%archive%' AND c.data_type NOT LIKE N'%DATE%')
    OR  c.name LIKE N'%active%'
    OR  c.name LIKE N'%_band'
    OR  c.name LIKE N'%_band_%'
    OR  c.name LIKE N'%flag%'
    OR  c.name LIKE N'%status%'
    OR  c.name LIKE N'%_open%'
    ---------------------------------------------------------
    OR ic.is_index_column_filtered = 1;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Another key has better lead uniqueness, does not cover foreign key
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',xc.database_id,xc.object_id,xc.object_id,xc.index_id,xc.type,diagnostic_type_id = 8
      ,diagnostic = N'Key ' + u.[Column Descriptors] + N' is more unique than key 1'
  FROM (
        SELECT bc.database_id
              ,bc.object_id
              ,bc.index_id
              ,bc.type
              ,bc.column_id
          FROM (
                SELECT u.database_id
                      ,u.object_id
                      ,u.index_id
                      ,u.type
                      ,u.key_column_sequence
                      ,u.column_id
                      ,rn = ROW_NUMBER() OVER (PARTITION BY u.database_id
                                                           ,u.object_id
                                                           ,u.index_id
                                                           ,u.type
                                                   ORDER BY u.col_uniqueness ASC
                                              )
                  FROM tempdb.dbo.SQLXL_Index_uniqueness  AS u
                  JOIN tempdb.dbo.SQLXL_Index_Compilation AS c
                    ON u.database_id = c.database_id
                   AND u.object_id   = c.object_ID
                   AND N'P'          = c.rec_type              -- parents only
                   AND N'TBL'        = c.obj_type_short_label  -- tables only
                 WHERE TRY_CAST(u.type AS INT)  BETWEEN 1 AND 2
                   AND u.is_included_column           = 0
                   AND u.key_column_sequence          > 0
                   AND CHARINDEX(N'CX(',u.col_prefix) = 0
                   AND u.col_uniqueness               > 0
                   AND c.covered_fkc_IDs IS NULL
               ) bc
         WHERE bc.rn = 1
        EXCEPT
        SELECT u.database_id
              ,u.object_id
              ,u.index_id
              ,u.type
              ,u.column_id
          FROM tempdb.dbo.SQLXL_Index_uniqueness AS u
         WHERE TRY_CAST(u.type AS INT) BETWEEN 1 AND 2
           AND u.is_included_column    = 0
           AND u.key_column_sequence   = 1
       ) xc
  JOIN tempdb.dbo.SQLXL_Index_uniqueness u
    ON xc.database_id = u.database_id
   AND xc.object_id   = u.object_id
   AND xc.index_id    = u.index_id
   AND xc.type        = u.type
   AND xc.column_id   = u.Column_ID

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Rowstore index has more than 5 included columns
-- Diagnostic - Index - Rowstore index included columns 100 or more bytes
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',ic.database_id,ic.object_id,ic.object_id,ic.index_id,ic.type,diagnostic_type_id = 8
      ,diagnostic = N'Bulky includes: '
                +STUFF(                N', ' + CAST(ic.cnt AS VARCHAR(10)) + N' cols'
                       +IIF(ic.len > 0,N', ' + CAST(ic.len AS VARCHAR(10)) + N' bytes',N'')
                       +IIF(ic.big > 0,N', ' + CAST(ic.big AS VARCHAR(10)) + N' MAX',N'')
                       ,1,1,N'')
  FROM (
        SELECT ic.database_id,ic.object_id,ic.index_id,ic.type
              ,cnt = COUNT(1)
              ,len = SUM(IIF(c.max_length < 0,0,c.max_length))
              ,big = SUM(IIF(c.max_length < 0,1,0))
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
          JOIN tempdb.dbo.SQLXL_Index_column            AS c
            ON ic.database_id                          = c.database_id
           AND ic.object_id                            = c.object_id
           AND ic.column_id                            = c.Column_ID
          LEFT OUTER
          JOIN tempdb.dbo.SQLXL_Index_sys_index_columns AS ix                  -- filter out CLUSTERED index columns
            ON ic.database_id                          = ix.database_id
           AND ic.object_id                            = ix.object_id
           AND 1                                       = ix.index_id
           AND N'1'                                    = ix.type
           AND ic.column_id                            = ix.Column_ID
         WHERE ic.type                            NOT IN (N'5',N'6')
           AND ic.is_included_column                   = 1
           AND ix.column_id                           IS NULL
         GROUP BY
               ic.database_id,ic.object_id,ic.index_id,ic.type
       ) AS ic
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS p
    ON ic.database_id  = p.database_id
   AND ic.object_id    = p.parent_object_id
   AND ic.object_id    = p.object_id
   AND p.obj_type_short_label NOT IN (N'HST',N'IT')
 WHERE ic.cnt > 5
    OR ic.len > 99
    OR ic.big > 0;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - with resumable operations and metrics
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = 'I',i.database_id,i.object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 0
      ,diagnostic = N'[RESUMABLE OPERATION - ' + r.state_desc + N']'
                  +NCHAR(10) + N'> Started: ' + CAST(DATEDIFF(DAY,r.start_time,GETDATE()) AS NVARCHAR(20)) + N' days ago)'
                  +NCHAR(10) + N'> Paused:'  + CONVERT(NVARCHAR(10),r.last_pause_time,11) + N'@' +CONVERT(NVARCHAR(8),r.last_pause_time,114)
                             + N' Complete: ' + CAST(r.percent_complete_MAX AS NVARCHAR(2)) + N'%'
  FROM tempdb.dbo.SQLXL_Index_sys_index_resumable_operations AS r
  JOIN tempdb.dbo.SQLXL_Index_sys_indexes                    AS i
    ON r.database_id                                        = i.database_id
   AND r.object_id                                          = i.object_id
   AND r.index_id                                           = i.index_id
   AND TRY_CAST(i.type AS INT) > 0

--------------------------------------------------------------------------------------------------------------------------------------------
-- LEAD KEY - ALL ELEMENTS
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT *
  FROM (
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4,diagnostic = STUFF(
-- Diagnostic - Index - Lead Key - is SEQUENTIAL UNIQUE and index is NOT UNIQUE
-- Diagnostic - Index - Lead Key - is SEQUENTIAL UNIQUE and optimize_for_sequential_key not enabled (2019+) (BI121)
+IIF(   i.Lead_Element_is_Identity        = 1
     OR i.Lead_Element_is_Sequence        = 1
     OR i.Lead_Element_is_newsequentialid = 1
    ,NCHAR(10) + N'Lead Key is '
               +IIF(i.Lead_Element_is_Identity        = 1,N'IDENTITY'       ,N'')
               +IIF(i.Lead_Element_is_Sequence        = 1,N'SEQUENCE'       ,N'')
               +IIF(i.Lead_Element_is_newsequentialid = 1,N'NEWSEQUENTIALID',N'')
               +IIF(i.is_unique                       = 0,N', index not UNIQUE',N'')
               +IIF(mv.ProductMajorVersion >= 15 AND i.tbl_is_clustered_columnstore = 0
                   , NCHAR(10) + N'> Sequential key option '
                   + IIF(i.optimize_for_sequential_key = 0,N'NOT ',N'') + N'ENABLED (2019+) (BI121)'
                        ,N'')
    ,N'')

-- Diagnostic - Index - Lead Key - optimize_for_sequential_key is enabled & lead key not SEQUENTIAL UNIQUE (2019+) (BI121)
+IIF(    i.optimize_for_sequential_key = 1
     AND NOT (   i.Lead_Element_is_Identity        = 1
              OR i.Lead_Element_is_Sequence        = 1
              OR i.Lead_Element_is_newsequentialid = 1
             )
    ,NCHAR(10) + N'Seq key optimization ENABLED, lead key not SEQ UNIQ (BI121)'
    ,N'')

-- Diagnostic - Index - Lead Key - is NEWID and index is not unique
+IIF(i.Lead_Element_is_newid = 1
    ,NCHAR(10) + N'Lead Key is ' + N'NEWID'
    +IIF(i.is_unique = 0,N', index not UNIQUE',N'')
    ,N'')

-- Diagnostic - Index - Lead Key - lead element uniqueness is >5% of table row count
-- Lead_Element_Uniqueness is the stats density factor X # of rows when stats last computed
+IIF(i.stathdr_Unfiltered_Rows > 0
    ,IIF(    100.0 * i.Lead_Element_Uniqueness / i.stathdr_Unfiltered_Rows > 5.0
         AND i.Key_Columns_CNT > (1 + IIF(i.partition_function_ID > 0,1,0)) -- if partitioned must have partitioned column
        ,NCHAR(10) + N'Lead key low uniqueness - ' + tempdb.dbo.SQLXL_3SD(i.Lead_Element_Uniqueness,N'N') + N' rows, '
        +tempdb.dbo.SQLXL_3SD(1.0 * I.Lead_Element_Uniqueness / i.stathdr_Unfiltered_Rows,N'%') + N' of table'
        ,N'')
    ,N'')

-- Diagnostic - Index - Lead Key - clustered index lead is unique & has extraneous key columns
-- Diagnostic - Index - Lead Key - Nonclustered index lead key is unique, extraneous columns can be included
+IIF(    (   i.Lead_Element_is_Identity        = 1
          OR i.Lead_Element_is_Sequence        = 1
          OR i.Lead_Element_is_newsequentialid = 1
          OR i.Lead_Element_is_newid           = 1
         )
     AND i.Key_Columns_CNT > (1 + IIF(i.partition_function_ID > 0,1,0)) -- if partitioned must have partitioned column
    ,NCHAR(10)+IIF(i.type = N'1'
                  ,N'> has ' +CAST(i.Key_Columns_CNT - 1 AS NVARCHAR(20)) + N' unneeded col(s)'
                  ,N'> move ' + CAST(i.Key_Columns_CNT - 1 AS NVARCHAR(20)) + N' unneeded columns to Include')
    ,N'')
-- Diagnostic - Index - Lead Key - another column may be a better clustering lead key
+IIF(    i.type                          IN (N'1')
     AND i.tbl_is_memory_optimized        = 0                        -- base mem opt table is always HEAP
     AND i.tbl_cx_uniq_ordered_column_ID <> i.Lead_Element_Column_ID
    ,NCHAR(10) + N'Candidate Rebuilding key ' + NCHAR(10) + N'> ' + c.[Column Descriptors]
    ,N'')
-- Diagnostic - Index - Lead Key - is string/text and summary statistics have not been computed
+IIF(    i.parent_object_type = N'U'
     AND (   i.Lead_Element_Data_Type LIKE N'%CHAR%'
          OR i.Lead_Element_Data_Type LIKE N'%TEXT%'
         )
     AND i.stathdr_String_index IS NULL
     AND i.tbl_row_cnt           > 0
    ,NCHAR(10) + N'Lead key ' + UPPER(i.Lead_Element_Data_Type) + N', String Summary statistics are '
    +IIF(i.stathdr_String_index = N'YES',N'',N'*NOT* ') + N'computed'
    ,N'')
------------------------------------------------------------
,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
           AND TYPE    IN (N'1'  -- clustered rowstore
                          ,N'2'  -- Nonclustered rowstore
                          )
       ) AS i
 CROSS
  JOIN (SELECT ProductMajorVersion = TRY_CAST(run_value AS INT)
          FROM tempdb.dbo.SQLXL_Index_sys_instance
         WHERE source = N'SERVERPROPERTY'
           AND name   = N'ProductMajorVersion'
       ) AS mv
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_column    AS c
    ON i.database_id                   = c.database_id
   AND i.object_id                     = c.object_id
   AND i.tbl_cx_uniq_ordered_column_ID = c.column_id
) i
WHERE i.diagnostic IS NOT NULL;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index key columns Nullable, non-standard type, string or LOB
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Key Element(s) is NULLable (BI25)
-- Diagnostic - Index - Count of NULL rows and percent of table
-- Diagnostic - Index - Key Element is non-standard data type
-- Diagnostic - Index - Key Element is string or LOB type (BI27)
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT TOP 100 PERCENT
       i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic_type_id = 8
      ,diagnostic = STUFF(
 IIF(c.is_nullable = 1
    ,NCHAR(10) + N'Key ' + QUOTENAME(ic.key_column_sequence) + N' is NULLable'
                         + IIF(ic.key_column_sequence = 1
                              ,IIF(hsi.null_rows > 0
                                  ,N' - NULL rows ' + tempdb.dbo.SQLXL_3SD(hsi.null_rows,N'I')
                                  +N' ('
                                  +tempdb.dbo.SQLXL_3SD(1.0 * hsi.null_rows / i.tbl_row_CNT,N'%') -- /zero handled by WHERE clause below
                                  +N' table)'
                                  ,N'')
                              ,N'')
                         + N' (BI25)'
    ,N'')
+IIF(typ.name IN (N'binary',N'image',N'ntext',N'real',N'sql_variant',N'varbinary')
    ,NCHAR(10) + N'Key ' +  QUOTENAME(ic.key_column_sequence) + N' is type ' + UPPER(typ.name)
    ,N'')
+IIF(   (typ.name = N'VARCHAR'  AND c.max_length > 8)
     OR (typ.name = N'NVARCHAR' AND c.max_length > 4)
     OR (typ.name = N'CHAR'     AND c.max_length > 8)
     OR (typ.name = N'NCHAR'    AND c.max_length > 8)
     OR c.max_length = -1
    ,NCHAR(10) + N'Index Key ' + QUOTENAME(ic.key_column_sequence)
               + N' is ' + UPPER(typ.name)
               + N'(' + IIF(c.max_length = -1,N'MAX',CAST(c.max_length AS NVARCHAR(20)))  + N') (BI27)'
    ,N'')
+IIF(c.collation_name <> d.collation_name
    ,NCHAR(10) + N'Index Key ' + QUOTENAME(ic.key_column_sequence)
               + N' Collation ' + c.collation_name
               + N' <> DB ' + d.collation_name + N' (BI69)'
    ,N'')
,1,1,N'')
/*** LOCAL TESTING
SELECT COUNT(1)
--*/
  FROM (-- list of all "user" CX & NCX indexes 
        SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type    = N'I'
           AND obj_type_short_label NOT IN (N'HST',N'IT')
           AND TYPE       IN (N'1',N'2')
           AND tbl_row_CNT > 0 -- only non-empty tables
       )                                        AS i
  JOIN tempdb.dbo.SQLXL_Index_sys_databases     AS d
    ON i.database_id                             = d.database_id
  JOIN tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
    ON i.database_id                             = ic.database_id
   AND i.object_id                               = ic.object_id
   AND i.index_id                                = ic.index_id
   AND i.type                                    = ic.type
   AND 0                                         = ic.is_included_column
  JOIN tempdb.dbo.SQLXL_Index_sys_columns       AS c
    ON ic.database_id                            = c.database_id
   AND ic.object_id                              = c.object_id
   AND ic.column_id                              = c.column_id
  JOIN tempdb.dbo.SQLXL_Index_sys_types         AS typ
    ON c.database_id                             = typ.database_id
   AND c.user_type_id                            = typ.user_type_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram_summary AS hsi
    ON i.database_id = hsi.database_id
   AND i.object_id   = hsi.object_id
   AND i.index_id    = hsi.index_id
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_ShowStatistics_Histogram_summary AS hsc
    ON i.database_id = hsc.database_id
   AND i.object_id   = hsc.object_id
   AND ic.column_id  = hsc.column_id
 ORDER BY -- to get columns in key sequence order
       i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,ic.key_column_sequence
) i
WHERE i.diagnostic IS NOT NULL

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Completed Index diagnostics'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************\
** INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES IN **
\******************************************************************************************************************************************/
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 2,diagnostic =
-----------------------------------------------------------------
-- Diagnostic - Index - Memory table with query activity. NOTE - Memory base table is a HEAP - index type "0"
     IIF(p.xtp_rows_touched_CNT  > 0,N'Touch: '   + tempdb.dbo.SQLXL_3SD(       p.xtp_rows_touched_CNT    ,N'I'),N' No activity')
    +IIF(p.xtp_rows_returned_CNT > 0,N' Return: ' + tempdb.dbo.SQLXL_3SD(       p.xtp_rows_returned_CNT   ,N'I'),N'')
    +IIF(p.xtp_scans_started_CNT > 0,N' Scan: '   + tempdb.dbo.SQLXL_3SD(       p.xtp_scans_started_CNT   ,N'I'),N'')
    +IIF(p.xtp_scans_started_CNT > 0,N' Retry: '  + tempdb.dbo.SQLXL_3SD(ISNULL(p.xtp_scans_retries_CNT,0),N'I'),N'')
  FROM (-- All index records
        SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       )                          AS i
  JOIN (-- ALl parent/object records
        SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       )                          AS p
    ON i.database_id               = p.database_id
   AND i.parent_object_id          = p.parent_object_id
 WHERE i.obj_type_short_label    NOT IN (N'HST',N'IT',N'TVF') -- don't care about history tables & table functions
   AND i.type                      = N'0'            -- HEAP
   AND i.parent_object_type        = N'U'            -- table
   AND p.Clustered_ColumnStore_CNT = 0               -- not a clustered columnstore
   AND i.tbl_is_memory_optimized   = 1
) AS i WHERE i.diagnostic > N''

UNION ALL -- HEAPS WITH ACTIVITY
SELECT * FROM (
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 2,diagnostic =
 N'Heap '
+STUFF(
+IIF(   ip.is_primary_key       = 1
     OR ip.is_unique_constraint = 1
     OR ip.is_unique            = 1
    ,NCHAR(10)+N'- With '
    +STUFF(
-- Diagnostic - Index - Heap - with PRIMARY KEY (BI47)
            IIF(ip.is_primary_key = 1
               ,N', Primary Key (BI47)'
               ,N'')
-- Diagnostic - Index - Heap - with UNIQUE CONSTRAINT (BI47)
           +IIF(    ip.is_primary_key = 0
                AND ip.is_unique_constraint = 1
               ,N', Unique Constraint (BI47)'
               ,N'')
-- Diagnostic - Index - Heap - with unique index (BI47)
           +IIF(    ip.is_primary_key = 0
                AND ip.is_unique_constraint = 0
                AND ip.is_unique = 1
               ,N', Unique index (BI47)'
               ,N'')
           ,1,2,N'')
    ,N'')
------------------------------------------------------------
+IIF(   p.row_CNT            > 0
     OR p.index_CNT          > 0
     OR p.Missing_index_CNT  > 0
     OR p.ius_User_Total_CNT > 0

-- Diagnostic - Index - Heap - Number of data rows or empty
    ,NCHAR(10)
    +N'> Rows: ' + IIF(p.row_CNT > 0,tempdb.dbo.SQLXL_3SD(p.row_CNT,N'I'),N'0')                           -- number of rows else empty

-- Diagnostic - Index - Heap - with indexes - Count
    +N' Idx: '   + IIF(p.index_CNT > 0,tempdb.dbo.SQLXL_3SD(p.index_CNT,N'I'),N'0')                       -- Indexes

-- Diagnostic - Index - Heap - with Missing indexes - Count
    +N' MIX: '   + IIF(p.Missing_index_CNT > 0,tempdb.dbo.SQLXL_3SD(p.Missing_index_CNT,N'I'),N'0')       -- missing indexes

-- Diagnostic - Index - Heap - with query Usage (reads, writes)
    +N' USG'
    +N' RDS: '   + IIF(p.ius_user_read_CNT    > 0,tempdb.dbo.SQLXL_3SD(p.ius_user_read_CNT   ,N'I'),N'0') -- User (Query) reads
    +N' WRT: '   + IIF(p.ius_user_updates_CNT > 0,tempdb.dbo.SQLXL_3SD(p.ius_user_updates_CNT,N'I'),N'0') -- User (Query) updates
    ,N'')
------------------------------------------------------------
    +NCHAR(10)
    +N'> OPS'
-- Diagnostic - Index - Heap - with query operations - Reads
-- Diagnostic - Index - Heap - with query operations - Writes (BI44-46)
-- Diagnostic - Index - Heap - with query operations - Deletes (BI49)
    +N' RDS: ' +IIF(p.ops_Total_read_CNT   > 0,tempdb.dbo.SQLXL_3SD(p.ops_Total_read_CNT  ,N'I'),N'0')
    +N' WRT: ' +IIF(p.ops_Total_write_CNT  > 0,tempdb.dbo.SQLXL_3SD(p.ops_Total_write_CNT ,N'I'),N'0') + N' (BI44-46)'
    +N' DEL: ' +IIF(p.ops_Total_delete_CNT > 0,tempdb.dbo.SQLXL_3SD(p.ops_Total_delete_CNT,N'I'),N'0') + N' (BI49)'
------------------------------------------------------------
    +NCHAR(10)
    +N'> Read to Write ratio:'
-- Diagnostic - Index - Heap - Usage read to write ratio
-- Diagnostic - Index - Heap - Operations read to write ratio
    +N' USG ' + tempdb.dbo.SQLXL_3SD(ISNULL(i.ius_read_to_write_RAT,0),N'N') + N'x '
    +N' OPS ' + tempdb.dbo.SQLXL_3SD(ISNULL(i.ios_read_to_write_RAT,0),N'N') + N'x '
------------------------------------------------------------
+IIF(p.ios_forwarded_fetch_CNT > 0
    ,NCHAR(10)
    +N'> FWD FETCH:'
-- Diagnostic - Index - Heap - with Forwarded Fetches (BI43)
    +tempdb.dbo.SQLXL_3SD(p.ios_forwarded_fetch_CNT,N'I')
    +IIF(p.row_CNT > 0
        ,N' (' + tempdb.dbo.SQLXL_3SD(ISNULL(1.0 * p.ios_forwarded_fetch_CNT / p.row_CNT,0),N'N') + N'x)'
        ,N' (No rows)')
    +N' (BI43)'
-- NOTE: Heaps with Waits covered later
    ,N'')
,1,1,N'')
------------------------------------------------------------
/*** LOCAL TESTING ***
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,p.type,i.type,i.type
--*/
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  LEFT OUTER
  JOIN (----------------------------------------------------------------------------------------
        -- Tables with Primary Key, Unique Constraint, or Unique index
        ----------------------------------------------------------------------------------------
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,is_primary_key       = SUM(IIF(is_primary_key = 1,1,0))
              ,is_unique_constraint = SUM(IIF(is_unique_constraint = 1,1,0))
              ,is_unique            = SUM(IIF(is_unique = 1,1,0))
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type        = N'I'
           AND parent_object_type = N'U'
         GROUP BY
               database_id
              ,parent_object_id
              ,object_id
        HAVING 0 < SUM(IIF(is_primary_key       = 1,1,0))
            OR 0 < SUM(IIF(is_unique_constraint = 1,1,0))
            OR 0 < SUM(IIF(is_unique            = 1,1,0))
       )                           AS ip
    ON i.database_id                = ip.database_id
   AND i.parent_object_id           = ip.parent_object_id
   AND i.object_id                  = ip.object_id
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type IN (N'P',N'S')
       )                           AS p
    ON i.database_id                = p.database_id
   AND i.parent_object_id           = p.parent_object_id
 WHERE i.obj_type_short_label    NOT IN (N'HST',N'IT',N'TVF') -- don't care about history tables, internal tables, & table functions
   AND i.type                      = N'0'            -- HEAP
   AND i.parent_object_type           = N'U'            -- table
   AND p.Clustered_ColumnStore_CNT = 0               -- not a clustered columnstore
   AND i.tbl_is_memory_optimized   = 0               -- not memory optimized
) AS i
 WHERE i.diagnostic > N'' -- only get non-null Diagnostics

----------------------------------------------------------------------------------------------------
-- Performance = 4 - By type of index
----------------------------------------------------------------------------------------------------
UNION ALL
SELECT * FROM ( -- pairs with "WHERE i.diagnostic IS NOT NULL" below
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4,diagnostic = STUFF(
 -- 1   Clustered - ignore System Versioned Temporal Tables as appropriate -------------------------
+IIF(i.type = N'1'
-- Diagnostic - Index - Clustered Rowstore - index Not Unique (BI28)
-- Diagnostic - Index - Clustered Rowstore - index candidate for Uniqueness
-- Diagnostic - Index - Clustered Rowstore - index not very selective
    ,IIF(i.Is_Unique = 0
        ,NCHAR(10) + N'CX not UNIQUE (BI28)'
        +IIF(iu.uniqueness >  1.10,N', not selective ' + QUOTENAME(tempdb.dbo.SQLXL_3SD(iu.uniqueness,N'N')) + N' rows/key',N'')
        +IIF(iu.uniqueness <= 1.10,N', UNIQ candidate ' + QUOTENAME(tempdb.dbo.SQLXL_3SD(iu.uniqueness,N'N')) + N' rows/key',N'')
        ,N'')

-- Diagnostic - Index - Clustered Rowstore - index is unique but statistics are not - out of date?
    +IIF(i.is_unique = 1 AND iu.uniqueness > 1.005
        ,NCHAR(10) + N'CX unique - ' + QUOTENAME(tempdb.dbo.SQLXL_3SD(iu.uniqueness,N'N')) + N' records per key, check stats'
        ,N'')

-- Diagnostic - Index - Clustered Rowstore index - lots of range scans (> 20%)
    +IIF(    i.obj_type_short_label NOT IN (N'HST',N'IT')          -- don't care about history tables, internal tables
         AND i.ops_Total_read_CNT     > 0                          -- gotta been read
        ,IIF(100.0 * i.ops_Total_scan_cnt / i.ops_Total_read_CNT > 20.0 -- range scans > 20% of total reads
            ,NCHAR(10) + N'OPS  CX Scans are ' + tempdb.dbo.SQLXL_3SD(1.0 * I.ops_Total_scan_cnt / i.ops_Total_read_CNT,N'%')
                       + N' of RDS - more indexes?'
            ,N'')
        ,N'')
    ,N'')

 -- 2   Nonclustered -------------------------------------------------------------------------------
+IIF(i.type = N'2'
-- Diagnostic - Index - Nonclustered Rowstore - lots of range scans (> 20%)
     ,IIF(    i.ius_User_read_CNT > 0 
          AND 100.*i.ius_user_scans_CNT / i.ius_User_read_CNT > 20.0 -- 2nd IIF boolean element not evaluated if first is FALSE
         ,NCHAR(10) + N'Usage Scans '
         +tempdb.dbo.SQLXL_3SD(1.0 * I.ius_user_scans_CNT / i.ius_User_read_CNT,N'%') + N' of RDS - add keys to index?'
         ,N'')
   ,N'')

,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
    ON i.database_id                     = o.database_id
   AND i.object_id                       = o.object_id
  LEFT OUTER
  JOIN (--------------------------------------------------------------------------------------------
        -- since the STATS DENSITY VECTOR includes the Clustered columns (if not in the index),
        -- we want to get the index's KEY columns only
        --------------------------------------------------------------------------------------------
        SELECT database_id
              ,object_id
              ,index_id
              ,cnt         = COUNT(1)
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns
         WHERE 0 = is_included_column
         GROUP BY
               database_id
              ,object_id
              ,index_id
       )            AS ic
    ON i.database_id = ic.database_id
   AND i.object_id   = ic.object_id
   AND i.index_id    = ic.index_id
 OUTER
 APPLY (--------------------------------------------------------------------------------------------
        -- Get uniqueness from the last indexed column. don't include the CLUSTERED index columns
        -- which is included automagically
        --------------------------------------------------------------------------------------------
        SELECT uniqueness = 1.0*dv.All_Density * i.stathdr_Rows_CNT
          FROM tempdb.dbo.SQLXL_Index_sys_ShowStatistics_DensityVector AS dv
         WHERE i.database_id                                          = dv.database_id
           AND i.object_id                                            = dv.object_id
           AND i.index_id                                             = dv.index_ID
           AND ic.cnt                                                 = dv.Row_ID
       ) iu
 WHERE i.obj_type_short_label NOT IN (N'DRP',N'HST',N'IT',N'TVF',N'VW')
   AND i.reserved_page_CNT      > 32 -- size bigger than 256KB (8KBx32Pages)
   AND i.type                  IN (N'1',N'2')
) AS i WHERE i.diagnostic > N''

----------------------------------------------------------------------------------------------------
-- Index Information = 8
----------------------------------------------------------------------------------------------------
UNION ALL
SELECT * FROM ( -- pairs with "WHERE i.diagnostic IS NOT NULL" below
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 8,diagnostic = STUFF(

 IIF(i.type = N'2' AND i.partition_CNT > 1 AND i.tbl_is_heap = 1
-- Diagnostic - Index - Partitioned Nonclustered index found on Heap
    ,NCHAR(10) + N'Heap - Nonclustered index has ' + tempdb.dbo.SQLXL_3SD(i.partition_CNT,N'I') + N' partitions'
    ,N'')

+IIF(i.type = N'2' AND i.is_primary_key = 1 AND i.tbl_is_heap = 1
-- Diagnostic - Index - Primary Key index found on Heap (BI47)
    ,NCHAR(10) + N'PRIMARY KEY on Heap - (BI47)'
    ,N'')

+IIF(i.type = N'2' AND i.is_primary_key = 0 AND i.is_unique_constraint = 1 AND i.tbl_is_heap = 1
-- Diagnostic - Index - Unique Constraint found on Heap (BI47)
    ,NCHAR(10) + N'Unique Constraint on Heap - (BI47)'
    ,N'')

+IIF(i.type = N'2' AND i.is_primary_key = 0 AND i.is_unique_constraint = 0 AND i.is_unique = 1 AND i.tbl_is_heap = 1
-- Diagnostic - Index - Unique index found on Heap (BI47)
    ,NCHAR(10) + N'Unique index found on Heap - (BI47)'
    ,N'')

-- i.type = N'3' covered above in Critical all index

+IIF(i.type = N'4'
-- Diagnostic - Index - Spatial index - tesselation, grid, cells per object
    ,NCHAR(10)
    +i.si_tessellation_scheme
    +IIF(i.si_bounding_box_xmin IS NOT NULL,N', box_xmin:' + CAST(i.si_bounding_box_xmin AS NVARCHAR(20)),N'')
    +IIF(i.si_bounding_box_ymin IS NOT NULL,N', box_ymin:' + CAST(i.si_bounding_box_ymin AS NVARCHAR(20)),N'')
    +IIF(i.si_bounding_box_xmax IS NOT NULL,N', box_xmax:' + CAST(i.si_bounding_box_xmax AS NVARCHAR(20)),N'')
    +IIF(i.si_bounding_box_ymax IS NOT NULL,N', box_ymax:' + CAST(i.si_bounding_box_ymax AS NVARCHAR(20)),N'')
    +NCHAR(10)
    +N'Grid1:' +COALESCE(i.si_level_1_grid_desc,N'AUTO')
    +N' Grid2:' +COALESCE(i.si_level_2_grid_desc,N'AUTO')
    +N' Grid3:' +COALESCE(i.si_level_3_grid_desc,N'AUTO')
    +N' Grid4:' +COALESCE(i.si_level_4_grid_desc,N'AUTO')
    +NCHAR(10)
    +N' Cells per object: ' + CAST(i.si_cells_per_object AS NVARCHAR(20))
    ,N'')

+IIF(i.tbl_is_memory_optimized = 1
-- Diagnostic - Index - Memory Optimized - Write Conflicts
    ,IIF(i.xtp_write_conflicts_CNT > 0
        ,NCHAR(10) + N'XTP Memory table - Write Conflicts:' + tempdb.dbo.SQLXL_3SD(i.xtp_write_conflicts_CNT,N'I')
        ,N'')
-- Diagnostic - Index - Memory Optimized - Constraint Violations
    +IIF(i.xtp_unique_constraint_violations_CNT > 0
        ,NCHAR(10) + N'XTP Memory table - Constraint Violations:' + tempdb.dbo.SQLXL_3SD(i.xtp_unique_constraint_violations_CNT,N'I')
        ,N'')
-- Diagnostic - Index - Memory Optimized - Rows contacted & returned
    +IIF(i.xtp_rows_returned_CNT + i.xtp_rows_touched_CNT > 0
        ,NCHAR(10) + N'XTP Memory table - Rows Touched:' +tempdb.dbo.SQLXL_3SD(i.xtp_rows_touched_CNT ,N'I')
        +NCHAR(32) + N' Returned:' + tempdb.dbo.SQLXL_3SD(i.xtp_rows_returned_CNT,N'I')
        ,N'')
    ,N'')
,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_sys_objects AS o
    ON i.database_id                  = o.database_id
   AND i.object_id                    = o.object_id
  LEFT OUTER
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS p
    ON i.database_id                  = p.database_id
   AND i.parent_object_id             = p.parent_object_id
 WHERE i.obj_type_short_label       NOT IN (N'HST',N'IT') -- Not a system maintained history table or internal table
-----------------------------------------------------------------------------
-- End of the UNION ALLS
-----------------------------------------------------------------------------
) i
 WHERE i.diagnostic > N''

/******************************************************************************************************************************************\
-- Index Compression, Type_ID = 8
\******************************************************************************************************************************************/
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT i.* FROM (
-- Diagnostic - Index - Compression - count of compressed Partitions (BI63)
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 8,diagnostic =
  N'Compression: '
+ CASE WHEN i.rec_type = N'I'
        AND (   i.Partition_none_compress_CNT                    > 1
             OR (   i.Partition_row_compress_CNT                 > 0
                 OR i.Partition_page_compress_CNT                > 0
                 OR i.Partition_columnstore_compress_CNT         > 0
                 OR i.Partition_columnstore_archive_compress_CNT > 0
                )
            )
       THEN  IIF(i.Partition_none_compress_CNT > 0
                ,N' NON('+tempdb.dbo.SQLXL_3SD(i.Partition_none_compress_CNT,N'I')+N')'
                ,N'')
            +IIF(i.Partition_row_compress_CNT > 0
                ,N' ROW('+tempdb.dbo.SQLXL_3SD(i.Partition_row_compress_CNT,N'I')+N')'
                ,N'')
            +IIF(i.Partition_page_compress_CNT > 0
                ,N' PG(' +tempdb.dbo.SQLXL_3SD(i.Partition_page_compress_CNT,N'I')+N')'
                ,N'')
            +IIF(i.Partition_columnstore_compress_CNT > 0
                ,N' CS('+tempdb.dbo.SQLXL_3SD(i.Partition_columnstore_compress_CNT,N'I')+N')'
                ,N'')
            +IIF(i.Partition_columnstore_archive_compress_CNT > 0
                ,N' ARC('+tempdb.dbo.SQLXL_3SD(i.Partition_columnstore_archive_compress_CNT,N'I')+N')'
                ,N'')
            +N' (BI63)'

-- Diagnostic - Index - Compression - Page Compression Failure Rate
            + IIF(i.Partition_page_compress_CNT > 0 AND i.ios_page_compression_fail_PCT > 0.0
                 ,NCHAR(10)+N' > Page Comp Fails: ' 
                           + tempdb.dbo.SQLXL_3SD(i.ios_page_compression_fail_PCT / 100.0,N'%') -- /zero hard code
                 ,N'')

       WHEN i.rec_type IN (N'P',N'S')
        AND (   raw.partition_none_compress_CNT                    > 1
             OR (   raw.partition_row_compress_CNT                 > 0
                 OR raw.partition_page_compress_CNT                > 0
                 OR raw.partition_columnstore_compress_CNT         > 0
                 OR raw.partition_columnstore_archive_compress_CNT > 0
                )
            )
       THEN  IIF(raw.partition_none_compress_CNT > 0
                ,N' NON('+tempdb.dbo.SQLXL_3SD(raw.partition_none_compress_CNT,N'I')+N')'
                ,N'')
            +IIF(raw.partition_row_compress_CNT > 0
                ,N' ROW('+tempdb.dbo.SQLXL_3SD(raw.partition_row_compress_CNT,N'I')+N')'
                ,N'')
            +IIF(raw.partition_page_compress_CNT > 0
                ,N' PG(' +tempdb.dbo.SQLXL_3SD(raw.partition_page_compress_CNT,N'I')+N')'
                ,N'')
            +IIF(raw.partition_columnstore_compress_CNT > 0
                ,N' CS('+tempdb.dbo.SQLXL_3SD(raw.partition_columnstore_compress_CNT,N'I')+N')'
                ,N'')
            +IIF(raw.partition_columnstore_archive_compress_CNT > 0
                ,N' ARC('+tempdb.dbo.SQLXL_3SD(raw.partition_columnstore_archive_compress_CNT,N'I')+N')'
                ,N'')
  END
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type NOT IN (N'A',N'D')
       ) AS i
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE type IN (N'0',N'1',N'5')
       )                                    AS raw
    ON i.database_id                         = raw.database_id
   AND i.parent_object_id                    = raw.object_id
   AND i.object_id                           = raw.object_id
) i
 WHERE diagnostic IS NOT NULL;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Completed Index Types diagnostics'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************\
** FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CON**
\******************************************************************************************************************************************/
-- NOTE: fk.is_not_trusted & fk.is_disabled are covered by index Diagnostics
SET ANSI_WARNINGS ON; -- Needed for FOR XML PATH

INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
-- Diagnostic - Foreign Key Constraint - Self Referencing
SELECT rec_type          = N'I'
      ,fk.database_id
      ,fk.parent_object_id
      ,fk.object_id
      ,index_id          = fk.object_id
      ,type              = N'F'
      ,diagnostic_type_id   = 0
      ,diagnostic           = QUOTENAME(N'Self referencing FKC')
  FROM tempdb.dbo.SQLXL_Index_sys_foreign_keys AS fk
 WHERE fk.parent_object_id = fk.referenced_object_id

-- Diagnostic - Foreign Key Constraint - *DISABLED*
-- Diagnostic - Foreign Key Constraint - *NOT TRUSTED*
-- Diagnostic - Foreign Key Constraint - *ENABLED FOR REPLICATION*
-- Diagnostic - Foreign Key Constraint - *IGNORED IN OPTIMIZATION*
UNION ALL
SELECT rec_type           = N'I'
      ,fk.database_id
      ,fk.parent_object_id
      ,fk.object_id
      ,index_id           = fk.object_id
      ,type               = N'F'
      ,diagnostic_type_id = 2
      ,diagnostic         = STUFF(IIF(fk.is_disabled                = 1,N' *DISABLED*',N'')
                                 +IIF(fk.is_not_trusted             = 1,N' *NOT TRUSTED*',N'')
                                 +IIF(fk.fkc_is_not_for_replication = 1 AND fk.tbl_is_replicated = 1,N' *NOT ENABLED FOR REPLICATION*',N'')
                                 +IIF(fk.is_ignored_in_optimization = 1,N' *IGNORED IN OPTIMIZATION*',N'')
                                 ,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE type = N'F'
       ) AS fk
 WHERE (   (fk.fkc_is_not_for_replication = 0 AND fk.tbl_is_replicated = 1)
        OR fk.is_not_trusted             = 1
        OR fk.is_disabled                = 1
        OR fk.is_ignored_in_optimization = 1
       )

-- Diagnostic - Foreign Key Constraint - key Duplicates
UNION ALL
SELECT DISTINCT
       rec_type          = N'I'
      ,o.database_id
      ,o.parent_object_id
      ,object_id         = o.l_index_id
      ,index_id          = o.l_index_id
      ,type              = N'F'
      ,diagnostic_type_id   = 2
      ,diagnostic           = N'*Duplicate FKC*'
  FROM tempdb.dbo.SQLXL_Index_Synergies AS o
 WHERE o.l_type     = N'F'
   AND o.r_type     = N'F'
   AND o.matching_sequence_CNT = o.lc_key_CNT
   AND o.matching_sequence_CNT = o.rc_key_CNT

-- Diagnostic - Foreign Key Constraint - key elements contained in another FKC
UNION ALL
SELECT DISTINCT
       rec_type          = N'I'
      ,o.database_id
      ,o.parent_object_id
      ,object_id         = o.l_index_id
      ,index_id          = o.l_index_id
      ,type              = N'F'
      ,diagnostic_type_id   = 2
      ,diagnostic           = N'*Included FKC*'
  FROM tempdb.dbo.SQLXL_Index_Synergies AS o
 WHERE o.l_type     = N'F'
   AND o.r_type     = N'F'
   AND o.lc_key_CNT < o.rc_key_CNT
   AND o.matching_sequence_CNT > 0

-- Diagnostic - Foreign Key Constraint - Key Overlaps
UNION ALL
SELECT DISTINCT
       rec_type          = N'I'
      ,o.database_id
      ,o.parent_object_id
      ,object_id         = o.l_index_id
      ,index_id          = o.l_index_id
      ,type              = N'F'
      ,diagnostic_type_id   = 2
      ,diagnostic           = N'*Overlapping FKC*'
  FROM tempdb.dbo.SQLXL_Index_Synergies AS o
 WHERE o.l_type     = N'F'
   AND o.r_type     = N'F'
   AND o.matching_overlap_CNT = o.lc_key_CNT
   AND o.matching_overlap_CNT = o.rc_key_CNT

-- Diagnostic - Foreign Key Constraint - elements contained in another FKC
UNION ALL
SELECT DISTINCT
       rec_type          = N'I'
      ,o.database_id
      ,o.parent_object_id
      ,object_id         = o.l_index_id
      ,index_id          = o.l_index_id
      ,type              = N'F'
      ,diagnostic_type_id   = 2
      ,diagnostic           = N'*Contained FKC*'
  FROM tempdb.dbo.SQLXL_Index_Synergies AS o
 WHERE o.l_type     = N'F'
   AND o.r_type     = N'F'
   AND o.matching_contained_CNT > 0
   AND o.lc_key_CNT < o.rc_key_CNT

-- Diagnostic - Foreign Key Constraint - Referential Actions - Delete
-- Diagnostic - Foreign Key Constraint - Referential Actions - Update
UNION ALL
SELECT rec_type           = N'I'
      ,fk.database_id
      ,fk.parent_object_id
      ,fk.object_id
      ,index_id           = fk.object_id
      ,type               = N'F'
      ,diagnostic_type_id = 4
      ,diagnostic         = N'FKC Action:'
                           +N' Delete ' + fk.delete_referential_action_desc
                           +N' Update ' + fk.update_referential_action_desc
                           +IIF(   fk.delete_referential_action > 0
                                OR fk.update_referential_action > 0
                               ,NCHAR(10) + N'> NOTE: action forces serializable isolation (BI71)'
                               ,N'')
  FROM tempdb.dbo.SQLXL_Index_sys_foreign_keys AS fk
 WHERE fk.delete_referential_action > 0
) fk
 WHERE fk.diagnostic IS NOT NULL;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Uncovered Foreign Key Constraints, if candidate covering Missing index(es) (sequence,overlap,contained) found show that too.
-- are there missing indexes found? See "Update Foreign Key Constraints" for rules
-- Note: as of Mar 2023 BlitzIndex refers to 2 CHECK_ID 72's - Woo!
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT rec_type= N'I',i.database_id,i.parent_object_id,i.object_id,index_id=i.object_id,type=N'F',diagnostic_type_id=4,diagnostic =
-- Diagnostic - Foreign Key Constraint - No covering index lead key element (BI72)
 N'No covering IDX (BI72)'
+IIF(i.fkc_Missing_index_CNT > 0 -- candidate missing indexes found
-- Diagnostic - Foreign Key Constraint - elements found in Missing indexes
    ,NCHAR(10) + N'> In ' + CAST(i.fkc_Missing_index_CNT AS NVARCHAR(20)) + N' MIX '
               +N' Adv: '   + IIF(a.mix_Advantage_AMT > 0
                                 ,tempdb.dbo.SQLXL_3SD(1.0 * ISNULL(i.mix_Advantage_AMT,0) / a.mix_Advantage_AMT,N'%')
                                 ,N'')
               ---------------------------------
               +N' Cost: '  + IIF((a.mix_avg_Total_user_cost_AMT + a.mix_avg_Total_system_cost_AMT) > 0
                                 ,tempdb.dbo.SQLXL_3SD(1.0 * ISNULL((i.mix_avg_Total_user_cost_AMT + i.mix_avg_Total_system_cost_AMT),0)
                                                           / (a.mix_avg_Total_user_cost_AMT + a.mix_avg_Total_system_cost_AMT)
                                                      ,N'%')
                                 ,N'')
               ---------------------------------
               +N' Impact: ' +IIF((a.mix_avg_user_impact_AMT + a.mix_avg_system_impact_AMT) > 0
                                 ,tempdb.dbo.SQLXL_3SD(1.0 * ISNULL((i.mix_avg_user_impact_AMT + i.mix_avg_system_impact_AMT),0)
                                                           / (a.mix_avg_user_impact_AMT + a.mix_avg_system_impact_AMT)
                                                      ,N'%')
                                 ,N'')
    +NCHAR(10) + N'> MIX Compiles: ' + tempdb.dbo.SQLXL_3SD(ISNULL(i.mix_unique_compiles_CNT,0),N'I')
               +N' Usage: '          + tempdb.dbo.SQLXL_3SD(ISNULL(i.ius_User_Total_CNT     ,0),N'I')
                                     + IIF(p.ius_User_Total_CNT > 0
                                          , N' ('
                                          + tempdb.dbo.SQLXL_3SD(1.0 * ISNULL(i.ius_User_Total_CNT,0) / p.ius_User_Total_CNT,N'%')
                                          + N')'
                                          ,N'')
               +N' Last: '   + ISNULL(CONVERT(NVARCHAR(10),(SELECT MAX(dt)
                                                              FROM (VALUES (i.ius_last_user_seek_DTTM)
                                                                          ,(i.ius_last_user_scan_DTTM)
                                                                          ,(i.ius_last_system_seek_DTTM)
                                                                          ,(i.ius_last_system_scan_DTTM)
                                                                   ) AS value(dt)
                                                           ),2)
                                     ,N'N/A')
    ,N' - no candidate covering MIX')
/*** LOCAL TESTING ***
SELECT COUNT(1)
--*/
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
           AND type = N'F'
       )                   AS i
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type IN (N'P',N'S')
           AND type      = N'U'
       )                   AS p
    ON i.database_id        = p.database_id
   AND i.parent_object_id   = p.parent_object_id
   AND i.parent_object_id   = p.object_id
 CROSS
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'A'
       )                   AS a
 WHERE N'F'                 = i.type
   AND i.fkc_covered_by_idx_IDS IS NULL -- no covering index

-- Diagnostic - Foreign Key Constraint - count of referring FKC to this reference
UNION ALL
SELECT rec_type   = N'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id= 8
      ,diagnostic = N'FKC References - ' + QUOTENAME(CAST(i.rk_referencing_fkc_CNT AS NVARCHAR(20)))
  FROM tempdb.dbo.SQLXL_Index_Compilation AS i
 WHERE i.rec_type               = N'I'
   AND i.rk_referencing_fkc_CNT > 0

-- Diagnostic - Foreign Key Constraint - indexes with lead key(s) covering this FKC, in size order
UNION ALL
SELECT rec_type = N'I',fk.database_id,fk.parent_object_id,fk.object_id,index_id=fk.object_id,type=N'F',diagnostic_type_id=8
      ,diagnostic = N'Covered by index ID(s) ' + fk.fkc_covered_by_idx_IDS
  FROM tempdb.dbo.SQLXL_Index_Compilation AS fk
 WHERE fk.rec_type                = N'I'
   AND fk.type                    = 'F'
   AND fk.fkc_covered_by_idx_IDS IS NOT NULL
) fk
 WHERE fk.diagnostic IS NOT NULL;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Completed Foreign Key Constraints diagnostics'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************\
** MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING**
\******************************************************************************************************************************************/
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT * FROM (
SELECT -- Index level
       rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 4,diagnostic =

-- Diagnostic - Index - High Missing Index Advantage (BI50)
-- Diagnostic - Index - High Missing Index Count (BI50)
-- Diagnostic - Index - High Missing Index Compiles (BI50)
       N'MIX Adv %Table ' + ISNULL(m.diagnostic + N' (BI50)',N'<Metric not found>')
      +N' RDS: '          + ISNULL(tempdb.dbo.SQLXL_3SD(i.ius_User_read_CNT,N'I')
                                  + N' (' + tempdb.dbo.SQLXL_3SD(ius_read_to_parent_RAT,N'%') + N')'
                                  ,N'<NONE>'
                                  )
      +N' Compiles: '     + ISNULL(tempdb.dbo.SQLXL_3SD(i.mix_unique_compiles_CNT,N'I'),N'<NONE>')
      +ISNULL(N' Last '   + TRY_CAST(i.ius_last_read_days_ago AS NVARCHAR(20)) + N' days ago',N'<NEVER>')

-- Diagnostic - Missing index - candidate to cover foreign key constraint
      +IIF(mix.fkc_id IS NOT NULL
          ,NCHAR(10) + N'> Possible cover for Foreign Key(s) ' + STUFF(mix.fkc_id,1,1,N'')
          ,N'')
  FROM tempdb.dbo.SQLXL_Index_Compilation AS i
 LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Metrics     AS m
    ON i.database_id                     = m.database_id
   AND i.parent_object_id                = m.parent_object_id
   AND i.object_ID                       = m.object_id

   AND i.index_ID                        = m.index_id
   AND i.type                            = m.type
   AND N'mix_Advantage_AMT'              = m.metric
 OUTER APPLY
       (SELECT N',N' + CAST(syn.l_index_id AS VARCHAR(10))
          FROM tempdb.dbo.SQLXL_Index_Synergies   AS syn
               -- uncovered Foreign Key Constraints ------------------------------------
          JOIN tempdb.dbo.SQLXL_Index_Compilation AS fkc
            ON syn.database_id                   = fkc.database_id
           AND syn.parent_object_id              = fkc.parent_object_id
           AND syn.l_index_id                    = fkc.index_id
           AND syn.l_type                        = fkc.type
           AND fkc.fkc_covered_by_idx_IDS        IS NULL                  -- no covering index on FKC
         WHERE i.database_id       = syn.database_id
           AND i.parent_object_id  = syn.parent_object_id
           AND N'F'                = syn.l_type
           AND i.index_ID          = syn.r_index_ID
           AND i.type              = syn.r_type -- Missing index type = 'M'
           AND N'I'                = fkc.type
           FOR XML PATH(N'')
       ) mix(fkc_id)
 WHERE i.rec_type = N'I'
   AND i.type     = N'M'

UNION ALL -- Index Level
SELECT rec_type = 'I',i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 8

-- Diagnostic - Missing index - table is Clustered Columnstore or has Nonclustered Columnstore
      ,diagnostic = N'> Table '
                +IIF(p.Clustered_ColumnStore_CNT > 0,N'is Clustered Columnstore',N'')
                +IIF(p.Nonclustered_ColumnStore_CNT > 0,N'has Nonclustered Columnstore (FK can''t use)',N'')
  FROM tempdb.dbo.SQLXL_Index_Compilation  AS i
  JOIN tempdb.dbo.SQLXL_Index_Compilation  AS p
    ON i.database_id                      = p.database_id
   AND i.parent_object_id                 = p.parent_object_id
   AND p.rec_type                        IN (N'P',N'S')
 WHERE i.type = N'M'
   AND (   p.Clustered_ColumnStore_CNT    > 0
        OR p.Nonclustered_ColumnStore_CNT > 0
       )

UNION ALL -- Table Level
SELECT rec_type = 'P',p.database_id,p.parent_object_id,p.object_id,p.index_id,p.type,diagnostic_type_id = 4

-- Diagnostic - Table - candidate for Nonclustered Columnstore due to missing index count
      ,diagnostic = N'Missing index CNT: ' + CAST(p.Missing_index_CNT AS VARCHAR(10))
                  + IIF(a.mix_Advantage_AMT > 0
                       ,N' Advantage: ' + tempdb.dbo.SQLXL_3SD(1.0 * p.mix_Advantage_AMT / a.mix_Advantage_AMT,N'%')
                       ,N'')
                  + IIF(    (SELECT version_major
                               FROM tempdb.dbo.SQLXL_Index_sys_Startup_Parameters
                            ) >= 13 -- SQL 2016+
                        AND (SELECT CAST(run_value AS INT)
                               FROM tempdb.dbo.SQLXL_Index_sys_instance
                              WHERE source = N'SERVERPROPERTY'
                                AND name   = N'EngineEdition'
                                AND (   CAST(run_value AS INT)  = 3 -- Enterprise (For Evaluation, Developer, and Enterprise editions)
                                     OR CAST(run_value AS INT) >= 5 -- As Of 06/20/2023
                                                                    -- 5 = SQL Database
                                                                    -- 6 = Azure Synapse Analytics
                                                                    -- 8 = Azure SQL Managed Instance
                                                                    -- 9 = Azure SQL Edge (For all editions of Azure SQL Edge)
                                                                    -- 11 = Azure Synapse serverless SQL pool
                                    )
                            ) > 0
                        AND IIF(a.mix_Advantage_AMT > 0.0
                               ,p.mix_Advantage_AMT / a.mix_Advantage_AMT
                               ,0.0) > 0.02
                       ,NCHAR(10) + N'> Consider Nonclustered Columnstore?'
                       ,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS p
 CROSS
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'A'
       ) AS a
 WHERE ISNULL(p.Missing_index_CNT           ,0) >= 3
   AND ISNULL(p.Nonclustered_ColumnStore_CNT,0)  = 0
) i
 WHERE i.diagnostic IS NOT NULL;

SET ANSI_WARNINGS OFF;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Completed Missing Indexes diagnostics'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start possible temporary object based on name',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************\
** OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS **
\******************************************************************************************************************************************/
-- Diagnostic - Object - possible temporary object based on name
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT DISTINCT
       c.rec_type
      ,c.database_id
      ,c.parent_object_id
      ,c.object_ID
      ,c.index_ID
      ,c.type
      ,diagnostic_type_id = 1
      ,diagnostic         = N'[POTENTIAL TEMPORARY OBJECT]'
  FROM (
        SELECT c.rec_type,c.database_id,c.parent_object_id,c.object_id,c.index_id,c.type,diagnostic=
               IIF(    c.name NOT LIKE N'%TEMPLATE%'
                   AND c.name NOT LIKE N'%HOLD'
                   AND c.name NOT LIKE N'%ERRORLOG%'
                   AND (
                           c.name LIKE N'BAK%'       OR c.name LIKE N'%BAK'
                        OR c.name LIKE N'BK%'        OR c.name LIKE N'%BK'
                        OR c.name LIKE N'%BACKUP%'
                        OR c.name LIKE N'%BCKUP%'
                        OR c.name LIKE N'%BKP%'
                        OR c.name LIKE N'%BKUP%'
                        OR c.name LIKE N'%_BK_%'
                        OR c.name LIKE N'COPY%'      OR c.name LIKE N'%COPY'
                        OR c.name LIKE N'%DELETE%'
                        OR c.name LIKE N'%DEMO%'
                        OR c.name LIKE N'%DEPRECATE%'
                        OR c.name LIKE N'%ERROR%'    OR c.name LIKE N'%ERR'  OR c.name LIKE N'ERR%'
                        OR c.name LIKE N'HIDE%'
                        OR c.name LIKE N'%[_]PERF[_]%'
                        OR c.name LIKE N'REN_%'
                        OR c.name LIKE N'%REFRESH%'
                        OR c.name LIKE N'%ROLLBACK%'
                        OR c.name LIKE N'%TBD%'
                        OR c.name LIKE N'%TEMP'      OR c.name LIKE N'TEMP%' OR c.name LIKE N'%TMP'  OR c.name LIKE N'TMP%'
                        OR c.name LIKE N'%$%'
                        OR c.name LIKE N'zz%'
                        -----------------------------------------------------------------
                        OR (c.name LIKE N'%OLD'     AND c.name NOT LIKE N'%THRESHOLD')
                        -----------------------------------------------------------------
                        OR c.name LIKE N'%\_TRACE'
                        OR c.name LIKE N'TRACE%'
                        -----------------------------------------------------------------
                        OR ISDATE(LEFT(n.nbr,6)) = 1
                        OR ISDATE(LEFT(n.nbr,8)) = 1
                        OR ISDATE(RIGHT(n.nbr,6)) = 1
                        OR ISDATE(RIGHT(n.nbr,8)) = 1
                        OR ISDATE(RIGHT(n.nbr,4)+LEFT(n.nbr,4)) = 1
                        OR TRY_CAST(n.nbr AS INT) BETWEEN YEAR(GETDATE()) - 40 AND YEAR(GETDATE()) + 40
                       )
                  ,N'[POTENTIAL TEMPORARY OBJECT]',NULL)
              ,c.name
              ,n.nbr
              ,c.is_system_named
          FROM tempdb.dbo.SQLXL_Index_Compilation AS c
         OUTER APPLY
               (SELECT string FROM tempdb.dbo.SQLXL_Parse_Strings(c.name,N' ')) AS p1
         OUTER APPLY
               (SELECT string FROM tempdb.dbo.SQLXL_Parse_Strings(p1.string,N'_')) AS p2
         OUTER APPLY
               (SELECT string FROM tempdb.dbo.SQLXL_Parse_Strings(p2.string,N'-')) AS p3
         OUTER APPLY
               (SELECT nbr = tempdb.dbo.SQLXL_Keep_Strings(p3.string,N'0-9',N'')) AS n -- get the numbers in the name to check if they are a date
         WHERE c.is_system_named = 0
           AND c.is_ms_shipped   = 0
           AND c.obj_type   NOT IN (N'IT')
       ) c
 WHERE c.diagnostic IS NOT NULL

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Completed possible temporary object based on name'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/*#########################################################################################################################################\
Prescriptions
\#########################################################################################################################################*/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @cover_foreign_keys TINYINT = 1
--*/

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Start SQLXL Index Prescriptions --------------------------------------',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

SET ANSI_WARNINGS ON;

----------------------------------------------------------------------------------------------------
-- Start from a clean slate of prescriptions
----------------------------------------------------------------------------------------------------
UPDATE tempdb.dbo.SQLXL_Index_Compilation
   SET prescription = NULL;

----------------------------------------------------------------------------------------------------
-- Temp table to house prescribed ACTIONS!
----------------------------------------------------------------------------------------------------
IF OBJECT_ID(N'tempdb..#prescription',N'U') IS NOT NULL DROP TABLE #prescription;

SELECT TOP 0
       database_id
      ,parent_object_id
      ,object_ID
      ,index_ID
      ,type
      ,action_desc  = CAST(NULL AS NVARCHAR(20))
      ,srt          = CAST(NULL AS INT)
      ,prescription = CAST(NULL AS NVARCHAR(1000))
  INTO #prescription
  FROM tempdb.dbo.SQLXL_Index_Compilation;

CREATE CLUSTERED index ixuc_#prescription
    ON #prescription
      (database_id,parent_object_id,OBJECT_ID,index_id,TYPE,srt);

DECLARE @srt INT = 0; -- used to control the sequence of Prescriptions

/******************************************************************************************************************************************\
** FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CO **
\******************************************************************************************************************************************/
-- This code stands alone since only 3 choices available for FKCs
-- RETAIN - Foreign Key Constraints that are enabled, trusted, and replicable
-- REVIEW - Foreign Key Constraints that are NOT enabled, trusted, or replicable
-- REMOVE - Foreign Key Constraints that are redundant (same or overlapping key sequence)
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = CASE WHEN sx.index_id <> s.index_id
                           THEN N'Remove FKC' + NCHAR(10) + N' Redundant'
                           WHEN (   sx.index_id = s.index_id
                                 OR s.index_id IS NULL
                                )
                            AND i.is_disabled                = 0
                            AND i.is_not_trusted             = 0
                            AND (   i.fkc_is_not_for_replication = 1
                                 OR i.tbl_is_replicated          = 0
                                )
                            AND ISNULL(s.ovl,0)              = 0
                            AND ISNULL(s.con,0)              = 0
                           THEN N'Retain FKC'
                           ELSE N'Review FKC'
                               +IIF(   i.is_disabled                = 1
                                    OR i.is_not_trusted             = 1
                                    OR i.fkc_is_not_for_replication = 0
                                   ,NCHAR(10)
                                   +STUFF(IIF(is_disabled           = 1,N' & Enable' ,N'')
                                         +IIF(is_not_trusted        = 1,N' & Trust'  ,N'')
                                         +IIF(fkc_is_not_for_replication = 0 AND i.tbl_is_replicated = 1
                                             ,N' & Disable Replication'
                                             ,N'')
                                         ,1,2,N'')
                                   ,N'')
                               +IIF(   ISNULL(s.ovl,0)              = 1
                                    OR ISNULL(s.con,0)              = 1
                                   ,NCHAR(10)
                                   +STUFF(IIF(ISNULL(s.ovl,0)       = 1,N', Overlaps' ,N'')
                                         +IIF(ISNULL(s.con,0)       = 1,N', Contained',N'')
                                         ,1,1,N'')
                                   ,N'')
                      END
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
           AND type     = N'F'
       ) AS i
  LEFT OUTER
  JOIN (
        SELECT s.database_id
              ,s.parent_object_id
              ,index_id = s.l_index_id
              ,seq = MAX(IIF(s.matching_sequence_CNT > 0,1,0))
              ,ovl = MAX(IIF(s.matching_overlap_CNT  > 0,1,0))
              ,con = MAX(IIF(s.matching_contained_CNT> 0 AND s.lc_key_CNT < s.rc_key_CNT,1,0))
          FROM tempdb.dbo.SQLXL_Index_Synergies AS s
         WHERE s.l_type     = N'F'
           AND s.r_type     = N'F'
           AND s.matching_sequence_CNT = s.lc_key_CNT
           AND s.matching_sequence_CNT = s.rc_key_CNT
         GROUP BY
               s.database_id
              ,s.parent_object_id
              ,s.l_index_id
       )                 AS s
    ON i.database_id      = s.database_id
   AND i.parent_object_id = s.parent_object_id
   AND i.index_id         = s.index_id
 OUTER
 APPLY (--------------------------------------------------------------------------------------------
        -- If redundant Foreign Key sequence found, choose one who's heart will live on
        -- enabled, trusted, replicable, with most columns, not system named, published
        -- schema published, delete action enabled, update action enabled, first built
        --------------------------------------------------------------------------------------------
        SELECT TOP (1)
               index_id = sy.r_index_id
          FROM tempdb.dbo.SQLXL_Index_Synergies        AS sx
          JOIN tempdb.dbo.SQLXL_Index_Synergies        AS sy
            ON sx.database_id                         = sy.database_id
           AND sx.parent_object_id                    = sy.parent_object_id
           AND sx.matching_sequence_col               = sy.matching_sequence_col
           AND N'F'                                   = sy.l_type
           AND N'F'                                   = sy.r_type
          JOIN tempdb.dbo.SQLXL_Index_sys_foreign_keys AS fk
            ON sy.database_id                         = fk.database_id
           AND sy.parent_object_id                    = fk.parent_object_id
           AND sy.l_index_id                          = fk.object_id
         WHERE s.seq              > 0
           AND s.database_id      = sx.database_id
           AND s.parent_object_id = sx.parent_object_id
           AND s.index_id         = sx.l_index_id
           AND N'F'               = sx.l_type
           AND N'F'               = sx.r_type
           AND 0                  < sx.matching_sequence_CNT
         ORDER BY
               fk.is_disabled
              ,fk.is_not_trusted
              ,sx.matching_sequence_CNT  DESC
              ,CASE fk.delete_referential_action WHEN 0 THEN 4 ELSE fk.delete_referential_action END
              ,CASE fk.update_referential_action WHEN 0 THEN 4 ELSE fk.update_referential_action END
              ,fk.is_system_named
              ,fk.is_published           DESC
              ,fk.is_schema_published    DESC
              ,fk.is_not_for_replication
              ,fk.object_id
       ) AS sx;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Foreign Key Constraints - Retain, Review, Remove'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END
--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - Nonclustered rowstore with key sequence matching Clustered index
-- Moved here since to good reason for index to exist except full scans on key elements
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription =  N'Remove'
                     + NCHAR(10) + N' Overlaps CX Seq'
                                 + CASE WHEN i.is_primary_key         = 1
                                        THEN NCHAR(10) + N' Add PK to CX'
                                        WHEN i.is_unique_constraint   = 1
                                         AND ncr.is_primary_key       = 0
                                         AND ncr.is_unique_constraint = 0
                                        THEN NCHAR(10) + N' Add UQ to CX'
                                        WHEN i.is_unique              = 1
                                         AND ncr.is_primary_key       = 0
                                         AND ncr.is_unique_constraint = 0
                                         AND ncr.is_unique            = 0
                                        THEN NCHAR(10) + N' Add UNIQ to CX'
                                        ELSE N''
                                   END
                     + NCHAR(10)+N'Review'
                     + NCHAR(10)+N' Check app for key scan'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (
        SELECT s.database_id
              ,s.parent_object_id
              ,s.l_index_id
              ,s.l_type
              ,il.is_primary_key
              ,il.is_unique_constraint
              ,il.is_unique
              ,s.r_index_id
              ,s.r_type
              ,s.rc_key_CNT
              ,s.matching_sequence_CNT
              ,s.matching_sequence_COL
              ,pct_of_table            = 1.0 * s.matching_sequence_all_density * il.row_CNT
          FROM tempdb.dbo.SQLXL_Index_Synergies   AS s
          JOIN tempdb.dbo.SQLXL_Index_Compilation AS il
            ON N'I'                              = il.rec_type
           AND s.database_id                     = il.database_id
           AND s.parent_object_id                = il.parent_object_id
           AND s.l_index_id                      = il.index_ID
           AND s.l_type                          = il.type
         WHERE s.matching_sequence_CNT           > 0
           AND s.l_type                          = N'1'                          -- Clustered index
           AND s.r_type                          = N'2'                          -- Nonclustered index
           -----------------------------------------------------------
           AND (   (    il.is_unique  = 1                                        -- Clustered index unique (include PK & UQ) and all keys match
                    AND s.lc_key_CNT  = s.matching_sequence_CNT
                   )
                OR s.rc_key_CNT BETWEEN s.matching_sequence_CNT AND s.lc_key_CNT -- Nonclustered fully contained in clustered
               )
       ) ncr
    ON i.database_id              = ncr.database_id
   AND i.parent_object_id         = ncr.parent_object_id
   AND i.object_id                = ncr.parent_object_id
   AND i.index_id                 = ncr.r_index_id
   AND i.type                     = ncr.r_type
 WHERE i.prescription IS NULL;                                        -- Keep index if flagged previously  ;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Remove - Nonclustered rowstore with key sequence matching Clustered index'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

----------------------------------------------------------------------------------------------------
-- RETAIN - System-Maintained History Table - CDC
-- RETAIN - System-Maintained History Table - Temporal
-- RETAIN - System-Maintained History Table - Ledger
-- RETAIN - Internal Tables - Temporal
-- RETAIN - Internal Tables - XML
-- RETAIN - Internal Tables - FullText
-- RETAIN - Internal Tables - Spatial
----------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,action_desc = N'Retain',@srt
      ,prescription = i.obj_type_hdr
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.obj_type_short_label IN (N'HST',N'IT') -- History table or internal table

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Retain - System Internal & History tables'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

----------------------------------------------------------------------------------------------------
-- RETAIN - Base Table Objects - Clustered index on Rowstore
-- RETAIN - Base Table Objects - Clustered Columnstore table
-- RETAIN - Base Table Objects - Heaps on Memory Tables
----------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,action_desc = N'Retain',@srt
      ,prescription = IIF(    i.type                    = N'0'
                          AND i.tbl_is_memory_optimized = 1
                         ,N'XTP HP'
                         ,i.type_short_desc)
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.type IN (N'1',N'5') -- Clustered, Clustered Columnstore
    OR (    i.type                    = N'0'
        AND i.tbl_is_memory_optimized = 1
       )

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Retain - underlying persisted data tables - HP, CX, CCS, XTP'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

----------------------------------------------------------------------------------------------------
-- RETAIN - index types - XML
-- RETAIN - index types - Spatial
-- RETAIN - index types - Nonclustered Columnstore
-- RETAIN - index types - Full Text
----------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,action_desc = N'Retain',@srt
      ,prescription = COALESCE(i.type_short_desc,N'Missing Desc') + N' Idx'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE TRY_CAST(i.type AS INT) IN (3,4,6,90) -- XML,Spatial,Nonclustered ColumnStore,FullText

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Retain - specialty indexes - XML, SPT, NCS, FTX'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

----------------------------------------------------------------------------------------------------
-- RETAIN - Required by others: Foreign Key Constraint reference
-- RETAIN - Required by others: Change Data Capture (CDC)
-- RETAIN - Required by others: Temporal (SVN)
-- RETAIN - Required by others: Ledger (LDG)
-- RETAIN - Required by others: XML
-- RETAIN - Required by others: Spatial (SPT)
-- RETAIN - Required by others: Full Text (FTX)
-- RETAIN - Required by others: Constraints - Primary Key - NOTE: does not filter out NOCHECKS
-- RETAIN - Required by others: Constraints - Unique Key - NOTE: does not filter out NOCHECKS
----------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- Indexes used by other objects - Foreign Key Constraint reference --------------------------------
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,action_desc = N'Retain',@srt
      ,prescription = N'FKC Reference'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.rk_referencing_fkc_CNT > 0

-- Indexes used by other objects - Change Data Capture - Primary Key or unique ---------------------
UNION ALL
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,action_desc = N'Retain',@srt
      ,prescription = N'Used by CDC'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS p
    ON i.database_id              = p.database_id
   AND i.object_id                = p.object_id
   AND i.name                     = p.cdc_index_name

-- Indexes used by other objects - Temporal - Primary Key ------------------------------------------
UNION ALL
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,action_desc = N'Retain',@srt
      ,prescription = N'Used by SVN'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN tempdb.dbo.SQLXL_Index_sys_tables AS tbl
    ON i.database_ID = tbl.database_id
   AND i.object_id   = tbl.object_id
 WHERE 2 = tbl.temporal_type -- SYSTEM_VERSIONED_TEMPORAL_TABLE
   AND 1 = i.is_primary_key

-- Indexes used by other objects - Ledger (2022+) - Primary Key ------------------------------------
UNION ALL
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,action_desc = N'Retain',@srt
      ,prescription = N'Used by Ledger'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN tempdb.dbo.SQLXL_Index_sys_tables AS tbl
    ON i.database_ID = tbl.database_id
   AND i.object_id   = tbl.object_id
 WHERE (   2 = tbl.ledger_type -- UPDATABLE_LEDGER_TABLE
        OR 3 = tbl.ledger_type -- APPEND_ONLY_LEDGER_TABLE
       )
   AND 1     = i.is_primary_key

-- Indexes used by other objects - XML, Spatial (Clustered Primary Key) ----------------------------
UNION ALL
SELECT DISTINCT -- can be multiple spatial indexes using a primary key
       i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,action_desc = N'Retain',@srt
      ,prescription = N'Used by ' +x.type_short_desc
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS x
    ON i.database_id              = x.database_id
   AND i.parent_object_id         = x.parent_object_id
   AND i.object_ID                = x.object_ID
 WHERE (   N'3'                   = x.type -- XML
        OR N'4'                   = x.type -- Spatial
       )
   AND i.is_primary_key           = 1
   AND i.type                     = N'1'

-- Indexes used by other objects - Full Text index - Primary Key or Unique -------------------------
UNION ALL
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,action_desc = N'Retain',@srt
      ,prescription = N'Used by ' +f.type_short_desc
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS f
    ON i.database_id              = f.database_id
   AND i.parent_object_id         = f.parent_object_id
   AND i.object_ID                = f.object_ID
   AND i.index_id                 = f.ft_unique_index_ID

-- Indexes used by other objects - Constraints -------------------------
UNION ALL
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,action_desc = N'Retain',@srt
      ,prescription = N'Used by ' + kc.type
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN tempdb.dbo.SQLXL_Index_sys_key_constraints AS kc
    ON i.database_id                             = kc.database_id
   AND i.parent_object_id                        = kc.parent_object_id
   AND TRY_CAST(i.index_id AS INT)               = kc.unique_index_id;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Retain - index required by others - FKC, CDC, SVN, LDG, XML, SPT, FTX, PK, UQ'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

----------------------------------------------------------------------------------------------------
-- RETAIN - "Best" covering index for Active Foreign Key - CX over NCX, no filter, most read, narrowest, fewest keys, narrowest includes
-- REVIEW - "Best" covering index for InActive Foreign Key - CX over NCX, no filter, most read, narrowest, fewest keys, narrowest includes
--          "Best" previously computed in "Foreign Key Analysis". Grouped in case multiple FK covered by same index
-- NOTE: Can't use Nonclustered Columnstore to cover a Foreign Key Parent
-- NOTE: Returns values only if variable @cover_foreign_keys = 1
-- @cover_foreign_keys:
--  0 = no need to continue to cover Foreign Key Constraints, do not create new indexes based on MISSING index recommendations
--  1 = continue to cover keys that are TRUSTED, ENABLED, and REPLICATED & are DELETE or UPDATE referential action enabled
--      Includes creating new indexes based on MISSING index recommendations
--  2 = continue to cover all Foreign Key Constraints that are TRUSTED, ENABLED, and REPLICATED
--      Includes creating new indexes based on MISSING index recommendations
--  3 = continue to cover all Foreign Key Constraints regardless of status
--      Includes creating new indexes based on MISSING index recommendations
----------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0
       ,@cover_foreign_keys TINYINT = 2;
--*/
SELECT DISTINCT -- needed because there can be redundant foreign keys
       fk.database_id
      ,fk.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,IIF(fk.active = 1,N'Retain',N'Review')
      ,@srt
      ,prescription = N'Covers ' + IIF(fk.active = 1,N'',N'NFC ') + N'FKC'
  FROM (--------------------------------------------------------------------------------------------
        -- get Foreign Key Constraints to cover based on passed in parameter
        --------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DECLARE @srt INT = 0
       ,@cover_foreign_keys TINYINT = 2;
--*/
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,is_disabled
              ,is_not_for_replication
              ,is_not_trusted
              ,delete_referential_action
              ,update_referential_action
              ,active = IIF(    is_disabled             = 0    -- are enabled
                            AND is_not_trusted          = 0    -- and trusted
                            ,1
                            ,0)
          FROM tempdb.dbo.SQLXL_Index_sys_foreign_keys  AS fk
         WHERE 1 = 1
           AND (   (    @cover_foreign_keys = 1
                    AND (is_disabled = 0 AND is_not_trusted = 0)
                    AND (delete_referential_action > 0 OR update_referential_action > 0)
                   )
                OR (    @cover_foreign_keys = 2
                    AND (is_disabled = 0 AND is_not_trusted = 0)
                   )
                OR (    @cover_foreign_keys = 3
                   )
               )
       ) fk
  JOIN (
        SELECT database_id,parent_object_id,object_id,index_id,type,fkc_covering_primary_idx_ID
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
           AND N'F'     = type
           AND 0        < fkc_covering_primary_idx_ID
       ) AS fx
    ON fk.database_id                 = fx.database_id
   AND fk.parent_object_id            = fx.parent_object_id
   AND fk.object_id                   = fx.object_id
   AND fk.object_id                   = fx.index_id
  JOIN (
        SELECT database_id,parent_object_id,object_id,index_id,type
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
           AND type    IN (N'1',N'2')
       )    AS i
    ON fk.database_id                  = i.database_id
   AND fk.parent_object_id             = i.parent_object_id
   AND fk.parent_object_id             = i.object_id
   AND fx.fkc_covering_primary_idx_ID  = i.index_id
OPTION (FAST 1,MAXDOP 1);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Retain - Best existing covering index for FKC'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update all RETAINed objects up to this point
/******************************************************************************************************************************************/
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = N'Retain'
                     +STUFF(
                      (SELECT NCHAR(10) + N' ' + rex.prescription
                         FROM #prescription    AS rex
                        WHERE i.database_id                = rex.database_id
                          AND i.parent_object_id           = rex.parent_object_id
                          AND i.object_ID                  = rex.object_ID
                          AND i.index_ID                   = rex.index_ID
                          AND i.type                       = rex.type
                          AND N'Retain'                    = rex.action_desc
                        ORDER BY
                              rex.srt
                          FOR XML PATH(N''),TYPE
                      ).value('(./text())[1]',N'NVARCHAR(4000)')
                      ,1,1,N'')
  FROM (-- just get list of indexes to update
        SELECT DISTINCT
               database_id,parent_object_id,object_id,index_id,TYPE
          FROM #prescription
         WHERE action_desc   = N'Retain'
           AND prescription IS NOT NULL
       ) ref
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
    ON ref.database_id            = i.database_id
   AND ref.parent_object_id       = i.parent_object_id
   AND ref.object_ID              = i.object_ID
   AND ref.index_ID               = i.index_ID
   AND ref.type                   = i.type
   AND i.prescription IS NULL;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Apply Retain labels to indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE FROM #prescription WHERE action_desc = N'Retain'; -- already updated appropriate values

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Clear out interim results table - Retain'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - Heaps - Create CX on used table's unique auto-generated column - Identity, Sequence, NEWID, SEQUENTIALID
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Request',@srt
      ,prescription = N'CX ' +i.tbl_cx_uniq_ordered_column_TYP -- get autogen type
      +IIF(uniq_idx.index_id IS NOT NULL
          ,IIF(   uniq_idx.is_primary_key       = 1
               OR uniq_idx.is_unique_constraint = 1
              ,IIF(uniq_idx.is_primary_key       = 1,N' USE IDX PK ' + QUOTENAME(uniq_idx.index_id),N'')
              +IIF(uniq_idx.is_unique_constraint = 1,N' USE IDX UQ ' + QUOTENAME(uniq_idx.index_id),N'')
              ,N' USE IDX ' + QUOTENAME(uniq_idx.index_id)
              )
          +IIF(uniq_idx.is_primary_key       = 1,NCHAR(10) + N' Make PK',N'')
          +IIF(uniq_idx.is_unique_constraint = 1,NCHAR(10) + N' Make UNIQUE',N'')
          ,N' See candidate')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS p
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.parent_object_id
 OUTER
 APPLY (SELECT TOP 1
               ic.index_id
              ,ix.is_primary_key
              ,ix.is_unique_constraint
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
          JOIN tempdb.dbo.SQLXL_Index_sys_indexes       AS ix
            ON ic.database_id                          = ix.database_id
           AND ic.object_id                            = ix.object_id
           AND ic.index_id                             = ix.index_id
           AND ic.type                                 = ix.type
         WHERE i.database_id                           = ic.database_id
           AND i.object_id                             = ic.object_id
           AND i.tbl_cx_uniq_ordered_column_ID         = ic.column_id
           AND ic.type                                IN (N'2')
           AND 1                                       = ic.key_column_sequence
         ORDER BY
               ix.is_primary_key       DESC
              ,ix.is_unique_constraint DESC
              ,ix.index_id
       ) uniq_idx
 WHERE i.parent_object_type         = N'U'
   AND i.type                       = N'0'
   AND i.tbl_is_memory_optimized    = 0    -- Memory-optimized tables don't have CLUSTERED INDEXES, just HEAPS
   AND i.tbl_cx_uniq_ordered_column_TYP IS NOT NULL
   ---------------------------------------------------------
   AND (   p.ius_User_Total_CNT     > 0    -- gotta hafta be used
        OR p.ops_Total_contacts_CNT > 0    -- gotta hafta be used
       );

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Request - clustered index on heaps with UNIQUE ORDERED columns'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - Nonclustered indexes on HEAPS replaced by new CLUSTERED index using Sequential Unique key column
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,tgt.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = N'Remove' + NCHAR(10) + N' Use new CX on ' +tgt.tbl_cx_uniq_ordered_column_TYP
  FROM (
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,tbl_cx_uniq_ordered_column_ID
              ,tbl_cx_uniq_ordered_column_TYP
              ,prescription
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type                      = N'I'
           AND type                          = N'0'
           AND tbl_cx_uniq_ordered_column_ID > 0
           AND tbl_is_memory_optimized       = 0
       )                                      AS tgt
  JOIN tempdb.dbo.SQLXL_Index_sys_index_columns AS i
    ON tgt.database_id                         = i.database_id
   AND tgt.object_id                           = i.object_id
   AND N'2'                                    = i.type
   AND tgt.tbl_cx_uniq_ordered_column_ID       = i.column_id
   AND 1                                       = i.key_column_sequence
  JOIN tempdb.dbo.SQLXL_Index_Compilation       AS p
    ON N'P'                                    = p.rec_type
   AND i.database_id                           = p.database_id
   AND i.object_id                             = p.object_id
 WHERE (   p.ius_User_Total_CNT     > 0    -- gotta hafta be used
        OR p.ops_Total_contacts_CNT > 0    -- gotta hafta be used
       );

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Remove - replace nonclustered on former heaps'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - "Best" Missing index for covering uncovered Foreign Key Constraints - key columns only
--------------------------------------------------------------------------------------------------------------------------------------------
IF @cover_foreign_keys > 0
BEGIN
   SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
   SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Request',@srt
         ,prescription = N'MIX > FKC'
     FROM (SELECT *
             FROM tempdb.dbo.SQLXL_Index_Compilation
            WHERE rec_type = N'I'
          )                               AS i
     JOIN (SELECT *
             FROM tempdb.dbo.SQLXL_Index_Compilation
            WHERE rec_type = N'I'
          )                               AS fk
       ON i.database_id                    = fk.database_id
      AND i.parent_object_id               = fk.parent_object_id
      AND i.index_ID                       = fk.fkc_candidate_covering_MIX_ID
      AND i.Key_Columns_CNT                = fk.Key_Columns_CNT
      AND i.Included_Columns_CNT           = 0
    WHERE i.TYPE                           = N'M'
      AND fk.fkc_candidate_covering_MIX_ID > 0
      AND fk.fkc_covering_primary_idx_ID  IS NULL;
END

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Request - best missing index to cover FKC'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - Heaps - Create CX using unique NCX (no auto-generated unique Column) - smallest, uniquest, fewest keys, most usedest
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Request',@srt
      ,prescription = N'CX from NCX ' + CAST(i.tbl_smallest_uniq_Nonclustered_idx AS NVARCHAR(20))
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       )                        AS p
    ON i.database_id             = p.database_id
   AND i.parent_object_id        = p.parent_object_id
   AND i.object_id               = p.parent_object_id
  LEFT OUTER
  JOIN #prescription            AS a
    ON i.database_id             = a.database_id
   AND i.parent_object_id        = a.parent_object_id
   AND i.object_id               = a.object_ID
   AND i.index_ID                = a.index_ID
   AND i.type                    = a.type
 WHERE i.parent_object_type      = N'U'
   AND i.type                    = N'0'
   AND i.tbl_is_memory_optimized = 0       -- Memory-optimized tables don't have CLUSTERED INDEXES
   ---------------------------------------------------------
   AND (   p.ius_User_Total_CNT     > 0    -- gotta hafta be used
        OR p.ops_Total_contacts_CNT > 0    -- gotta hafta be used
       )
   ---------------------------------------------------------
   AND i.tbl_smallest_uniq_Nonclustered_idx IS NOT NULL
   AND a.type                     IS NULL; -- not already flagged above

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Request - Promote NCX to CX on HEAP'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - Heaps - Create CX from smallest "unique" column greater than a BIT
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Request',@srt
      ,prescription = N'CX Candidate Col'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i

  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       )                        AS p
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.parent_object_id
  LEFT OUTER
  JOIN #prescription               AS a
    ON i.database_id                = a.database_id
   AND i.parent_object_id           = a.parent_object_id
   AND i.object_id                  = a.object_ID
   AND i.index_ID                   = a.index_ID
   AND i.type                       = a.type
 WHERE i.parent_object_type         = N'U'
   AND i.type                       = N'0'
   AND i.tbl_is_memory_optimized    = 0     -- Memory-optimized tables don't have CLUSTERED INDEXES
   ---------------------------------------------------------
   AND (   p.ius_User_Total_CNT     > 0     -- gotta hafta be used
        OR p.ops_Total_contacts_CNT > 0    -- gotta hafta be used
       )
   ---------------------------------------------------------
   AND a.type                     IS NULL  -- not already flagged above
   AND i.key_column_info        LIKE N'<HEAP> Candidate clustering column:%'

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Request - Unique-est column on HEAP'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - Heaps with Activity - Indicate a clustered index will help
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Request',@srt
      ,prescription = N'Create Uniq CX'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i

  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       )                        AS p
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.parent_object_id

  LEFT OUTER
  JOIN #prescription              AS a
    ON i.database_id               = a.database_id
   AND i.parent_object_id          = a.parent_object_id
   AND i.object_id                 = a.object_ID
   AND i.index_ID                  = a.index_ID
   AND i.type                      = a.type

 WHERE i.parent_object_type           = N'U'
   AND i.type                      = N'0'
   AND i.tbl_is_memory_optimized   = 0     -- Memory-optimized tables don't have CLUSTERED INDEXES
   ---------------------------------------------------------
   AND (   p.ius_User_Total_CNT     > 0    -- gotta hafta be used
        OR p.ops_Total_contacts_CNT > 0    -- gotta hafta be used
       )
   ---------------------------------------------------------
   AND a.type                     IS NULL -- not already flagged above

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Request - Heap benefitting from CX'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - SQL Table-Valued Functions without Unique index
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Request',@srt
      ,prescription = N' Create Uniq CX'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i

  LEFT OUTER
  JOIN #prescription     AS a
    ON i.database_id      = a.database_id
   AND i.parent_object_id = a.parent_object_id
   AND i.object_id        = a.object_ID
   AND i.index_ID         = a.index_ID
   AND i.type             = a.type
 WHERE i.parent_object_type = N'TF'
   AND i.type               = N'0'
   AND a.type              IS NULL -- not already flagged above

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Request - TVF without unique CX'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

-------------------------------------------------------------------------------------------------------------------------------------------
-- Update REQUEST (CREATE)
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = ISNULL(i.prescription + NCHAR(10),N'')
                     + N'Request'
                     + (SELECT NCHAR(10) + N' ' + rex.prescription
                          FROM #prescription    AS rex
                         WHERE i.database_id                = rex.database_id
                           AND i.parent_object_id           = rex.parent_object_id
                           AND i.object_ID                  = rex.object_ID
                           AND i.index_ID                   = rex.index_ID
                           AND i.type                       = rex.type
                           AND N'Request'                   = rex.action_desc
                         ORDER BY
                               rex.srt
                           FOR XML PATH(N''),TYPE
                       ).value('(./text())[1]',N'NVARCHAR(4000)')

  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i

  JOIN (
        SELECT DISTINCT
               database_id,parent_object_id,object_id,index_id,TYPE
          FROM #prescription
         WHERE action_desc              = N'Request'
       ) ref
    ON i.database_id      = ref.database_id
   AND i.parent_object_id = ref.parent_object_id
   AND i.object_ID        = ref.object_ID
   AND i.index_ID         = ref.index_ID
   AND i.type             = ref.type;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Apply Request labels to indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE FROM #prescription WHERE action_desc = N'Request'; -- already updated appropriate values

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Clear out interim results table - Request'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- BEGIN Special Case - Heaps not flagged as candidates for Clustered index
/******************************************************************************************************************************************/
-- RETAIN - Unused Heaps not flagged as candidates for Clustering index
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = N'Retain HP'
  FROM tempdb.dbo.SQLXL_Index_Compilation AS i
 WHERE i.rec_type                  = N'I'
   AND i.parent_object_type        = N'U'
   AND i.type                      = N'0'  -- Heaps
   AND i.tbl_is_memory_optimized   = 0     -- Memory-optimized tables don't have CLUSTERED INDEXES
   AND i.prescription             IS NULL; -- not already flagged above

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Retain - unused heap'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- END Special Case
/******************************************************************************************************************************************/

/******************************************************************************************************************************************/
-- What about a Nonclustered ColumnStore? Gotta be on 2016+ to be updatable
/******************************************************************************************************************************************/

IF OBJECT_ID('tempdb..#index_Key_DataType_Not_Eligible_for_NCS') IS NOT NULL DROP TABLE #index_Key_DataType_Not_Eligible_for_NCS;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Find indexes with table options and key column data types that can't be included in Nonclustered Columnstore indexes
-- Create temp table and use this list to exclude them below
-- For further reference see https:/docs.microsoft.com/en-us/sql/t-sql/statements/create-columnstore-index-transact-sql
--------------------------------------------------------------------------------------------------------------------------------------------
SELECT ic.database_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
  INTO #index_Key_DataType_Not_Eligible_for_NCS
/*** LOCAL TESTING ***
SELECT ic.database_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
--*/
  FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
  JOIN tempdb.dbo.SQLXL_Index_column            AS c
    ON ic.database_id                          = c.database_id
   AND ic.object_id                            = c.object_id
   -- No Object_ID column in XL_IDX_column table
   AND ic.column_id                            = c.column_id
 WHERE 13 <= (--------------------------------------------------------------------------------------
              -- Get SQL version from source server. 2016 allows updatable Nonclustered columnstore
              --------------------------------------------------------------------------------------
              SELECT version = TRY_CAST(run_value AS TINYINT)
                FROM tempdb.dbo.SQLXL_Index_sys_instance
               WHERE name   = N'ProductMajorVersion'
                 AND source = N'SERVERPROPERTY'
             )
   AND 2  <> (--------------------------------------------------------------------------------------
              -- Can't run columnstore on STANDARD EDITION (2)
              --------------------------------------------------------------------------------------
              SELECT edition = TRY_CAST(run_value AS TINYINT)
                FROM tempdb.dbo.SQLXL_Index_sys_instance
               WHERE name   = N'EngineEdition'
                 AND source = N'SERVERPROPERTY'
             )
   AND ic.type                                IN (N'2',N'M')               -- Nonclustered, missing index
   AND ic.is_included_column                   = 0                         -- only care about KEY columns in new index
   AND 0                                       = c.is_columnstore_eligible -- previously computed
 GROUP BY
       ic.database_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type;

--------------------------------------------------------------------------------------------------------------------------------------------
-- List all Nonclustered and missing indexes that are candidates to be replaced by a Nonclustered Columnstore index
-- For Nonclustered index, must have been read/written to, and is not a "principally" used index
--------------------------------------------------------------------------------------------------------------------------------------------
IF OBJECT_ID('tempdb..#Candidate_indexes_for_NCS') IS NOT NULL DROP TABLE #Candidate_indexes_for_NCS;

SELECT i.database_id,i.object_id,i.index_id,i.type
      ,excluded = CAST(CASE WHEN i.is_primary_key  = 1        THEN 1
                            WHEN i.cdc_index_name  = i.name   THEN 1
                            ELSE 0
                       END AS TINYINT)
      ,ius      = i.ius_read_to_parent_RAT
      ,rtw      = i.ius_read_to_write_RAT
      ,ios      = i.ios_read_to_parent_RAT
      ,stw      = i.ios_read_to_write_RAT
  INTO #Candidate_indexes_for_NCS
/*** LOCAL TESTING ***
SELECT i.database_id,i.object_id,i.index_id,i.type
      ,excluded = CAST(CASE WHEN i.is_primary_key  = 1        THEN 1
                            WHEN i.cdc_index_name  = i.name   THEN 1
                            ELSE 0
                       END AS TINYINT)
      ,ius      = i.ius_read_to_parent_RAT
      ,rtw      = i.ius_read_to_write_RAT
      ,ios      = i.ios_read_to_parent_RAT
      ,stw      = i.ios_read_to_write_RAT
--*/
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  LEFT OUTER
  JOIN #index_Key_DataType_Not_Eligible_for_NCS AS x
    ON i.database_id                             = x.database_id
   AND i.object_ID                               = x.object_id
   AND i.index_ID                                = x.index_id
 WHERE 1 = 1
   AND 13 <= (----------------------------------------------------------------------------------------
              -- Get SQL version from source server. 2016 allow for updatable Nonclustered columnstore
              ----------------------------------------------------------------------------------------
              SELECT version = TRY_CAST(run_value AS TINYINT)
                FROM tempdb.dbo.SQLXL_Index_sys_instance
               WHERE name   = N'ProductMajorVersion'
                 AND source = N'SERVERPROPERTY'
             )
   AND 2  <> (----------------------------------------------------------------------------------------
              -- Can't run columnstore on STANDARD EDITION (2)
              ----------------------------------------------------------------------------------------
              SELECT edition = TRY_CAST(run_value AS TINYINT)
                FROM tempdb.dbo.SQLXL_Index_sys_instance
               WHERE name   = N'EngineEdition'
                 AND source = N'SERVERPROPERTY'
             )
   --------------------------------------------------------
   AND obj_type_short_label                    NOT IN (N'HST',N'IT') -- Not a system maintained history or internal table
   AND ISNULL(i.Nonclustered_ColumnStore_CNT,0)  = 0              -- Nonclustered columnstore doesn't alreay exist on table
   AND x.index_id                               IS NULL           -- all index key columns are eligible to be in Nonclustered columnstore
   --------------------------------------------------------
   AND (   (    i.type                           = N'2'           -- Nonclustered indexes
            AND (   i.ios_read_to_parent_RAT     < 0.02           -- Read Usage < 2% of all reads on this table/view
                 OR i.ios_read_to_write_RAT      < 4.0            -- Reads/Writes < 4 Usage stats - writes = 4: memory lock, memory, index, log
                )
           )
        OR (    i.type                           = N'M'           -- missing indexes
            AND i.ios_read_to_parent_RAT         < 0.02           -- MIX Usage > 2.0% of all reads on this table/view
           )
       )
   AND ISNULL(i.prescription,N'') NOT LIKE N'Remove%'  -- not flagged above
   AND ISNULL(i.prescription,N'') NOT LIKE N'Retain%'  -- not flagged above
   AND ISNULL(i.prescription,N'') NOT LIKE N'Request%' -- not flagged above as Missing index to create to cover a Foreign Key
                                                                  -- NOTE: Nonclustered Columnstores cannot cover a Foreign Key!

/*** LOCAL TESTING ***
SELECT * FROM #index_Key_DataType_Not_Eligible_for_NCS ORDER BY 1,2,3
SELECT * FROM #Candidate_indexes_for_NCS ORDER BY 1,2,4,3
*/

--------------------------------------------------------------------------------------------------------------------------------------------
-- Total up the unique key columns & identify Nonclustered Columnstore candidates
--------------------------------------------------------------------------------------------------------------------------------------------
IF OBJECT_ID('tempdb..#Candidate_for_NCS') IS NOT NULL DROP TABLE #Candidate_for_NCS;

;WITH cte AS (
SELECT database_id
      ,object_ID
      ,ncx = SUM(IIF(type = N'2',1,0))
      ,mix = SUM(IIF(type = N'M',1,0))
  FROM #Candidate_indexes_for_NCS
 WHERE excluded = 0
 GROUP BY
       database_id
      ,object_ID
)
SELECT database_id
      ,object_ID
  INTO #Candidate_for_NCS
  FROM cte
 WHERE ISNULL(ncx,0)+ISNULL(mix,0) > 3

--------------------------------------------------------------------------------------------------------------------------------------------
-- REPLACE - NEW Nonclustered Columnstore index to replace existing lo-use Nonclustered rowstores and candidate missing indexes
-- DOES NOT NEED a unique index to refer to
-- Omit tables with an already existing Nonclustered Columnstore
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.object_id,i.index_id,i.type,
--*/
       prescription = ISNULL(i.prescription + NCHAR(10),N'') -- should not be anything added before this point
                    + N'Request new NCS'                     -- NOTE: keep in synch with below ACTION codes
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS i
  LEFT OUTER
  JOIN (-- tables that already have a Nonclustered or a Clustered Columnstore
        SELECT database_id
              ,parent_object_id
              ,object_id
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
           AND type IN (N'5'  -- Clustered columnstore - SQL 2016+ allows for Nonclustered rowstore indexes on clustered Columnstore
                       ,N'6'  -- Nonclustered columnstore - updatable with SQL 2016+
                       )
         GROUP BY
               database_id
              ,parent_object_id
              ,object_id
       )                  AS ncs
    ON i.database_id       = ncs.database_id
   AND i.parent_object_id  = ncs.object_ID
   AND i.object_ID         = ncs.object_ID
  JOIN #Candidate_for_NCS AS c
    ON i.database_id       = c.database_id
   AND i.parent_object_id  = c.object_ID
   AND i.object_ID         = c.object_ID
   AND i.index_id          = c.object_ID
   AND i.type              = N'U'
 WHERE 13 <= (----------------------------------------------------------------------------------------
              -- Get SQL version from source server. 2016 allow for updatable Nonclustered columnstore
              ----------------------------------------------------------------------------------------
              SELECT version = TRY_CAST(run_value AS TINYINT)
                FROM tempdb.dbo.SQLXL_Index_sys_instance
               WHERE name   = N'ProductMajorVersion'
                 AND source = N'SERVERPROPERTY'
             )
   AND 2  <> (----------------------------------------------------------------------------------------
              -- Can't run columnstore on STANDARD EDITION (2)
              ----------------------------------------------------------------------------------------
              SELECT edition = TRY_CAST(run_value AS TINYINT)
                FROM tempdb.dbo.SQLXL_Index_sys_instance
               WHERE name   = N'EngineEdition'
                 AND source = N'SERVERPROPERTY'
             )
  AND ncs.object_ID       IS NULL  -- no existing Nonclustered columnstore on table

--------------------------------------------------------------------------------------------------------------------------------------------
-- REPLACE - Nonclustered rowstore indexes, not Retained, replace with EXISTING Nonclustered Columnstore
-- REPLACE - Nonclustered rowstore indexes, not Retained, replace with NEW Nonclustered Columnstore
-- REJECT - Missing indexes, not Requested, accomodated by EXISTING Nonclustered Columnstore index
-- REJECT - Missing indexes, not Requested, accomodated by NEW Nonclustered Columnstore
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.object_id,i.index_id,i.type,
--*/
       prescription = IIF(i.type = N'M',N'Reject',N'Replace')
                     + NCHAR(10)
                     + N' Use ' + IIF(p.new_ncs = 1,N'new',N'existing') + N' NCS'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE type IN (N'2',N'M')  -- Nonclustered index, Missing index, less than 5% of total reads
       )                                       AS i
  JOIN (
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,new_ncs          = CAST(1 AS BIT)
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
           AND prescription = N'Request new NCS'       -- NOTE: keep in synch with above ACTION codes

        UNION
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,new_ncs = CAST(0 AS BIT)
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
           AND type     = N'6'
       )                                       AS p
    ON i.database_id                            = p.database_id
   AND i.parent_object_id                       = p.parent_object_id
   AND i.object_ID                              = p.object_ID
  LEFT OUTER
  JOIN #index_Key_DataType_Not_Eligible_for_NCS AS x              -- Indexes that have columns unusable in Nonclustered columnstore
    ON i.database_id                            = x.database_id
   AND i.object_ID                              = x.object_id
   AND i.index_ID                               = x.index_id
 WHERE 13 <= (----------------------------------------------------------------------------------------
              -- Get SQL version from source server. 2016 allow for updatable Nonclustered columnstore
              ----------------------------------------------------------------------------------------
              SELECT version = TRY_CAST(run_value AS TINYINT)
                FROM tempdb.dbo.SQLXL_Index_sys_instance
               WHERE name   = N'ProductMajorVersion'
                 AND source = N'SERVERPROPERTY'
             )
   AND 2  <> (----------------------------------------------------------------------------------------
              -- Can't run columnstore on STANDARD EDITION (2)
              ----------------------------------------------------------------------------------------
              SELECT edition = TRY_CAST(run_value AS TINYINT)
                FROM tempdb.dbo.SQLXL_Index_sys_instance
               WHERE name   = N'EngineEdition'
                 AND source = N'SERVERPROPERTY'
             )
   AND x.index_id                              IS NULL            -- Index keys data types are allowed in Nonclustered columnstore
   AND (   ISNULL(i.ius_read_to_parent_RAT,0.0) < 0.01            -- not used too much
        OR i.type = N'M'                                          -- include all Missing indexes
       )
   -- Index hasn't been called out before for action
   AND ISNULL(i.prescription,N'') NOT LIKE N'Remove%'  -- not flagged above
   AND ISNULL(i.prescription,N'') NOT LIKE N'Retain%'  -- not flagged above
   AND ISNULL(i.prescription,N'') NOT LIKE N'Request%' -- not flagged above as Missing index to create to cover a Foreign Key

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Nonclustered Columnstores - Request, Replace, Reject'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - High Value Missing indexes - Large Advantage & significant usage not matching existing rowstore index
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = N'Request' + NCHAR(10) + N' MIX Hi Gain'
                    + IIF(i.Overlap_Code IS NOT NULL,NCHAR(10) + N' MIX Synergies',N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 CROSS
  JOIN (SELECT mix_Advantage_AMT
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type          = N'A'
           AND mix_Advantage_AMT > 0
       ) AS ins
 WHERE i.type                      = N'M'                     -- Missing index
   AND (  100.0 * i.ius_read_to_parent_RAT                    -- percent of READS if this index were created on the table
        + 100.0 * i.mix_Advantage_AMT / ins.mix_Advantage_AMT -- /zero handled by WHERE clause above
                                                              -- percent of total benefit across instance for this missing index
       ) > 4.0                                                -- seems like a good enough number to include all reasonable missings
   AND i.prescription  IS NULL                                -- not already flagged above
   AND NOT
       EXISTS (SELECT NULL
                 FROM tempdb.dbo.SQLXL_Index_Synergies AS o
                WHERE i.database_id                   = o.database_id
                  AND i.parent_object_id              = o.parent_object_id
                  AND i.index_ID                      = o.l_index_id
                  AND i.type                          = o.l_type
                  AND N'2'                            = o.r_type
                  AND (   o.matching_sequence_CNT    >= o.lc_key_CNT
                       OR o.matching_overlap_CNT     >= o.lc_key_CNT
                      )
              );

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Request - High Value Missing indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REJECT - Low value Missing indexes
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription  = N'Reject' + NCHAR(10) + N' MIX low Gain'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.type             = N'M' -- Missing index
   ------------------------------------------
   AND i.prescription IS NULL  -- haven't been flagged up to this point

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Reject - Low value Missing indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- RETAIN - keep "best" sequence-matching non-filtered Nonclustered rowstore - not previously actioned and has statistics
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = N'Retain' + NCHAR(10) + N' Lead Sequence NCX'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (
        SELECT rn = ROW_NUMBER() OVER (PARTITION BY seq.database_id
                                                   ,seq.parent_object_id
                                                   ,seq.matching_sequence_COL
                                           ORDER BY ----------------------------------------------------------------------------------------
                                                    -- find the bestest index based on their properties
                                                    ----------------------------------------------------------------------------------------
                                                 -- il.is_primary_key                  DESC -- PRIMARY KEY already retained above
                                                 -- il.is_unique_constraint            DESC -- UNIQUE CONSTRAINT already retained above
                                                    il.is_unique                       DESC -- is UNIQUE
                                                   ,il.ius_read_to_parent_RAT          DESC -- most used
                                                   ,il.stathdr_Average_Key_Length      DESC -- biggest
                                                   ,il.Key_Columns_CNT                 DESC -- most key elements
                                                   ,il.key_Total_datatype_length_bytes DESC -- widest key
                                                   ,il.inc_Total_datatype_length_bytes      -- fewest included columns
                                                   ,il.index_id
                                      )
               ,seq.database_id
               ,seq.parent_object_id
               ,il.object_ID
               ,il.index_ID
               ,il.type
          FROM (----------------------------------------------------------------------------------------------------------------------------
                -- Get list of all synergy SEQUENCES shared between Nonclustered rowstores
                -- NOTE: only UNFILTERED indexes appear
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT DISTINCT
                       o.database_id
                      ,o.parent_object_id
                      ,o.matching_sequence_COL
                  FROM tempdb.dbo.SQLXL_Index_Synergies AS o
                 WHERE o.l_type                        = N'2'
                   AND o.r_type                        = N'2'
                   AND LEFT(o.matching_sequence_COL,1) = N'S'
                ----------------------------------------------------------------------------------------------------------------------------
                -- Get list of all synergy SEQUENCES already used by RETAINed Clustered and Nonclustered rowstores
                -- PRIMARY KEY, UNIQUE CONSTRAINT, Clustered index already retained above
                ----------------------------------------------------------------------------------------------------------------------------
                EXCEPT
                SELECT DISTINCT
                       il.database_id
                      ,il.parent_object_id
                      ,o.matching_sequence_COL
                  FROM (SELECT *
                          FROM tempdb.dbo.SQLXL_Index_Compilation
                         WHERE rec_type = N'I'
                       ) AS il
                  JOIN tempdb.dbo.SQLXL_Index_Synergies AS o
                    ON o.database_id                   = il.database_id
                   AND o.parent_object_id              = il.parent_object_id
                   AND o.l_index_id                    = il.index_ID
                   AND o.l_type                        = il.type
                 WHERE il.prescription              LIKE 'RETAIN%'
                   AND il.type                        IN (N'1',N'2')
                   AND o.l_type                       IN (N'1',N'2')
                   AND o.r_type                       IN (N'1',N'2')
                   AND LEFT(o.matching_sequence_COL,1) = N'S'
               ) seq
          ---------------------------------------------------------------------------------------------------------------------------------
          -- rejoin to Synergies table to get the indexes sharing the synergy sequences found above
          ---------------------------------------------------------------------------------------------------------------------------------
          JOIN tempdb.dbo.SQLXL_Index_Synergies   AS o
            ON seq.database_id                   = o.database_id
           AND seq.parent_object_id              = o.parent_object_id
           AND seq.matching_sequence_COL         = o.matching_sequence_COL
           AND N'2'                              = o.l_type
           AND N'2'                              = o.r_type
          ---------------------------------------------------------------------------------------------------------------------------------
          -- Get properties for candidate sequence indexes
          ---------------------------------------------------------------------------------------------------------------------------------
          JOIN (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type = N'I'
               ) AS il
            ON seq.database_id                   = il.database_id
           AND seq.parent_object_id              = il.parent_object_id
           AND seq.parent_object_id              = il.object_ID
           AND o.l_index_id                      = il.index_ID
           AND o.l_type                          = il.type
       ) ix
    ON i.database_id      = ix.database_id
   AND i.parent_object_id = ix.parent_object_id
   AND i.object_ID        = ix.object_ID
   AND i.index_ID         = ix.index_ID
   AND i.type             = ix.type
 WHERE ix.rn = 1
   AND i.prescription IS NULL

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Retain - keep "best" synergy key SEQUENCE index'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - previously marked 'Retain' NCX with same key sequence as another Retained index, not flagged as replaced by NCS
--<BS> review with next for purpose. is previous RETAIN removed by new REMOVE?
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = N'Remove' + NCHAR(10) + N' Use Retained NCX'
  FROM (
        SELECT DISTINCT
               o.database_id
              ,o.parent_object_id
              ,index_id           = o.r_index_id  -- checking left side of overlap against right side retained index
              ,type               = o.r_type      -- checking left side of overlap against right side retained index
              ,o.matching_sequence_CNT
          FROM tempdb.dbo.SQLXL_Index_Synergies  AS o
          JOIN (SELECT *
                  FROM tempdb.dbo.SQLXL_Index_Compilation
                 WHERE rec_type = N'I'
               ) AS l
            ON o.database_id                   = l.database_id
           AND o.parent_object_id              = l.parent_object_id
           AND o.l_index_id                    = l.index_ID
           AND o.l_type                        = l.type
         WHERE 1 = 1
           AND o.l_type                        = N'2'
           AND o.r_type                        = N'2'
           AND o.matching_sequence_CNT         > 0
           AND (   o.matching_sequence_all_density < 0.01       -- 1% of all records
                OR (    o.lc_key_CNT >= o.matching_sequence_CNT
                    AND o.rc_key_CNT  = o.matching_sequence_CNT
                   )
               )
           AND l.prescription LIKE N'Retain%' -- hold on if flagged previously to Retain
       ) cte
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
    ON cte.database_id            = i.database_id
   AND cte.parent_object_id       = i.parent_object_id
   AND cte.parent_object_id       = i.object_id
   AND cte.index_id               = i.index_id
   AND cte.type                   = i.type
 WHERE i.prescription IS NULL

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Remove - NCX synergy key SEQUENCE with successor NCX'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - un/lighly used Nonclustered rowstore with same key sequence as Nonclustered rowstore not already flagged
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH cte AS (
SELECT o.database_id
      ,o.parent_object_id
      ,o.matching_sequence_COL
      ,o.matching_sequence_all_density
      ,o.l_index_id
      ,o.l_type
      ,l_reads = (ISNULL(l.ops_Total_read_CNT,0) + ISNULL(l.ius_User_read_CNT,0))
      ,o.r_index_id
      ,o.r_type
      ,r_reads = (ISNULL(r.ops_Total_read_CNT,0) + ISNULL(r.ius_User_read_CNT,0))
  FROM tempdb.dbo.SQLXL_Index_Synergies AS o
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS l
    ON o.database_id               = l.database_id
   AND o.parent_object_id          = l.parent_object_id
   AND o.l_index_id                = l.index_ID
   AND o.l_type                    = l.type
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS r
    ON o.database_id               = r.database_id
   AND o.parent_object_id          = r.parent_object_id
   AND o.r_index_id                = r.index_ID
   AND o.r_type                    = r.type
 WHERE o.l_type                         = N'2'
   AND o.r_type                         = N'2'
   AND o.matching_sequence_CNT          > 0
   AND o.matching_sequence_all_density  < 0.01  -- 1% of all records
   -----------------------------------------------
   AND l.prescription                  IS NULL
   AND r.prescription                  IS NULL
   -----------------------------------------------
   AND (l.ops_Total_read_CNT + l.ius_User_read_CNT) < (r.ops_Total_read_CNT + r.ius_User_read_CNT)
)
UPDATE i
   SET
       prescription = N'Remove' + NCHAR(10) + N' Overlaps NCX Seq'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN cte
    ON i.database_id              = cte.database_id
   AND i.parent_object_id         = cte.parent_object_id
   AND i.object_id                = cte.parent_object_id
   AND i.index_id                 = cte.l_index_id
   AND i.type                     = cte.l_type
 WHERE i.prescription IS NULL

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Remove - NCX synergy key SEQUENCE with low usage'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - Nonclustered rowstores on used tables with Poor Read/Write ratio (< 4X) & low usage (< 2%)
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = N'Remove' + NCHAR(10) + N' low R/W Ratio'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       )  AS p
    ON i.database_id              = p.database_id
   AND i.parent_object_id         = p.parent_object_id
   AND i.object_id                = p.parent_object_id
 WHERE i.prescription              IS NULL
   ---------------------------------------------------------------------------
   AND i.obj_type                   = N'U'
   AND i.type                       = N'2' -- Nonclustered index
   AND i.tbl_is_heap                = 0
   AND (   p.ius_User_Total_CNT     > 0    -- gotta hafta be used
        OR p.ops_Total_contacts_CNT > 0    -- gotta hafta be used
       )
   AND i.row_CNT                    > 0
   ---------------------------------------------------------
   AND ISNULL(i.ius_read_to_write_RAT,0.0)  < 4.0
   AND ISNULL(i.ios_read_to_write_RAT,0.0)  < 4.0
   AND ISNULL(i.ius_read_to_parent_RAT,0.0) < 0.02
   AND ISNULL(i.ios_read_to_parent_RAT,0.0) < 0.02;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Remove - low read/write ratio & low usage'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - Nonclustered indexes with Poor usage or operational activity
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = N'Remove' + NCHAR(10) + N' Lo/No Activity'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       )  AS p
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.parent_object_id
 WHERE i.prescription    IS NULL
   ---------------------------------------------------------------------------
   AND i.obj_type                   = N'U'
   AND i.type                       = N'2' -- Nonclustered index
   AND i.tbl_is_heap                = 0
   AND (   p.ius_User_Total_CNT     > 0    -- gotta hafta be used
        OR p.ops_Total_contacts_CNT > 0    -- gotta hafta be used
       )
   AND i.row_CNT                    > 0
   ---------------------------------------------------------
   AND ISNULL(i.ius_read_to_parent_RAT,0) < 0.005
   AND ISNULL(i.ios_read_to_parent_RAT,0) < 0.005;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Remove - low usage'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE FROM #prescription WHERE action_desc = N'Remove'; -- already updated appropriate values

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Clear out interim results table - Remoove'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- RETAIN - Heaps, Clustered, Nonclustered Leftovers - some Activity OR few waits OR is small
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT database_id,parent_object_id,object_id,index_id,type,
--*/
       prescription = N'Retain ' + type_short_desc
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE (   (    obj_type  = N'U'
            AND type     IN (N'0',N'1',N'2') -- Heap, Clustered, Nonclustered. All other types should have been flagged by now
           )
        OR (    obj_type  = N'V'
            AND type     IN (N'1',N'2') -- Clustered, Nonclustered
           )
       )
   AND prescription IS NULL

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Retain - not flagged above'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Clustered index not created with Identity, Sequence, NEWID, SEQUENTIALID as lead CLUSTERED key.
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Refactor',@srt,
       prescription = N'Use ' + tbl_cx_uniq_ordered_column_TYP
                                    +IIF(fill_factor < 100.0,NCHAR(10) + N' FillFactor 100',N'')
                                     -- check if covering Foreign Key Constraint, if do gonna need another index created to provide cover
                                    +IIF(CHARINDEX(N'Covers FKC',prescription) > 0
                                        ,NCHAR(10) + N' Recreate FKC cover'
                                        ,N'')
                                    +IIF(partition_Column_ID > 0
                                        ,NCHAR(10) + N' Include Partition'
                                        ,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE type                           = N'1'
   AND tbl_cx_uniq_ordered_column_ID <> Lead_Element_Column_ID;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - CX not using existing unique ordered column'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Lead Key UNIQUE (or nearly so) & has extra key columns
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Refactor',@srt,
       prescription    = N'Drop Xtra Keys'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.obj_type_short_label NOT IN (N'HST',N'IT')   -- Not a system maintained history or internal table
   AND TRY_CAST(type AS INT)  >= 0
   ---------------------------------------------------------
   AND Lead_Element_Column_ID  = COALESCE(tbl_cx_uniq_ordered_column_ID,tbl_possible_uniq_column_id)
   AND Key_Columns_CNT         > 1
   --------------------------------------
   AND prescription         LIKE N'Retain%' -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - unneeded key columns - lead key UNIQUE'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Lead Key Element is ORDERED UNIQUE and optimize for sequential key not enabled - 2019+
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Refactor',@srt
      ,prescription = N'Enable Opt Seq Key'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE (SELECT ProductMajorVersion = TRY_CAST(run_value AS INT)
          FROM tempdb.dbo.SQLXL_Index_sys_instance
         WHERE source = N'SERVERPROPERTY'
           AND name   = N'ProductMajorVersion'
       ) >= 15 -- 2019+
   AND i.obj_type_short_label            NOT IN (N'HST',N'IT') -- Not a system maintained history or internal table
   AND TRY_CAST(type AS INT)               > 0
   ---------------------------------------------------------
   AND (   Lead_Element_is_Identity        = 1
        OR Lead_Element_is_Sequence        = 1
        OR Lead_Element_is_newsequentialid = 1
       )
   AND optimize_for_sequential_key         = 0
   --------------------------------------
   AND prescription LIKE N'Retain%' -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - enable Opt for Seq Key'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Lead Key Element is ORDERED UNIQUE data type and is_unique = 0
-- REFACTOR - Lead Key Element is ORDERED UNIQUE data type and Stat uniqueness <> 1, Not PK or Unique Constraint
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Refactor',@srt
      ,prescription = N'Key '
                    +IIF(Lead_Element_is_Identity        = 1,N'IDN' ,N'')
                    +IIF(Lead_Element_is_Sequence        = 1,N'SEQ' ,N'')
                    +IIF(Lead_Element_is_newsequentialid = 1,N'SUID',N'')
                    +IIF(Lead_Element_is_newid           = 1,N'NUID',N'')
                    +IIF(is_unique                       = 0
                        ,N' NOT UNIQ'
                        ,IIF(i.is_primary_key = 1 OR i.is_unique_constraint = 1,N'',N' BAD STATS'))
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.obj_type_short_label   NOT IN (N'HST',N'IT')   -- Not a system maintained history or internal table
   AND TRY_CAST(type AS INT)         >= 0
   ---------------------------------------------------------
   AND Lead_Element_Column_ID         = COALESCE(tbl_cx_uniq_ordered_column_ID,tbl_possible_uniq_column_id)
   AND (   is_unique                  = 0
        OR (    ROUND(i.Lead_Element_Uniqueness,4) > 1.0
            AND i.is_primary_key       = 0
            AND i.is_unique_constraint = 0
            AND i.is_unique            = 0
           )
       )
   --------------------------------------
   AND prescription LIKE N'Retain%' -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - lead key unique index not unique'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - index partition not match table partition
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Refactor',@srt
      ,prescription          = N'Use Tbl Part'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       )                 AS p
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_ID        = p.object_ID
   --------------------------------------
 WHERE i.obj_type_short_label    NOT IN (N'HST',N'IT')   -- Not a system maintained history or internal table
   AND ISNULL(i.partition_function_name,N'NONE') <> ISNULL(p.partition_function_name,N'NONE')
   AND i.prescription          NOT LIKE N'Remove%'   -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - match index to table partition'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Non-Empty index with writes and FILL FACTOR < 100% AND low page splits (< 2% since restart/REFACTOR)
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Refactor',@srt
      ,prescription = N'FillFactor 100%'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE obj_type_short_label   NOT IN (N'HST',N'IT')   -- Not a system maintained history or internal table
   AND fill_factor                          < 100.0
   AND ISNULL(page_splits_to_write_PCT,0.0) BETWEEN 0.0 AND 2.0
   AND reserved_page_CNT                    > 0
   ---------------------------------------------------------
   AND prescription   LIKE N'Retain%'   -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - low splits low fill factor'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - index with FILL FACTOR = 100% AND hi page splits (> 5% since restart/REFACTOR)
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Refactor',@srt
      ,prescription = N'FillFactor <100%'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE obj_type_short_label NOT IN (N'HST',N'IT')         -- Not a system maintained history or internal table
   AND fill_factor               = 100.0
   AND page_splits_to_write_PCT  >   5.0
   --------------------------------------
   AND prescription     LIKE N'Retain%'          -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - hi splits hi fill factor'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - index with IGNORE_DUP_KEY property ON
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Refactor',@srt
      ,prescription = N'IGNORE_DUP_KEY [ON]'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.obj_type_short_label NOT IN (N'HST',N'IT')       -- Not a system maintained history or internal table
   AND TRY_CAST(type AS INT)       >= 0
   ---------------------------------------------------------
   AND ignore_dup_key               = 1
   ---------------------------------------------------------
   AND prescription LIKE N'Retain%'              -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - ignore duplicate key ON'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - indexes with Page/Row Locks OFF (not Non-Memory Optimized Heaps)
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Refactor',@srt
      ,prescription = N'Enable '
                     +STUFF(IIF(i.allow_page_locks = 0,N',Page',N'')
                           +IIF(i.allow_row_locks  = 0,N',Row' ,N'')
                           ,1,1,N'')
                     +N' Locks'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.obj_type_short_label   NOT IN (N'HST',N'IT')       -- Not a system maintained history or internal table
   AND TRY_CAST(i.type AS INT)       >= 0
   AND i.type                     NOT IN (N'5',N'6')        -- BOL "Always 0 for clustered columnstore indexes."
   AND NOT (    i.type = N'0'
            AND i.tbl_is_memory_optimized = 1
           )
   ---------------------------------------------------------
   AND (   i.allow_page_locks           = 0
        OR i.allow_row_locks            = 0
       )
   ---------------------------------------------------------
   AND prescription LIKE N'Retain%' -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - Page/Row locks OFF'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

---------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - index with additional keys not improving record selectivity
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Refactor',@srt
      ,prescription              = N'Chk Key Selectivity'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.obj_type_short_label   NOT IN (N'HST',N'IT')       -- Not a system maintained history or internal table
   AND i.low_selectivity_additional_keys IS NOT NULL
   AND i.prescription LIKE N'Retain%'            -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - unneeded key columns pt 2'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - index with column collations not matching database collation
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT DISTINCT
       i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Refactor',@srt
      ,prescription              = N'Check Collation'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
    ON i.database_id                        = ic.database_id
   AND i.object_id                          = ic.object_id
   AND i.index_id                           = ic.index_id
   AND i.type                               = ic.type
  JOIN tempdb.dbo.SQLXL_Index_sys_columns       AS c
    ON ic.database_id                       = c.database_id
   AND ic.object_id                         = c.object_id
   AND ic.column_id                         = c.column_id
 WHERE i.obj_type_short_label   NOT IN (N'HST',N'IT')       -- Not a system maintained history or internal table
   AND c.collation_name                    IS NOT NULL
   AND c.uses_database_collation            = 0
   ---------------------------------------------------------
   AND i.prescription         LIKE N'Retain%'    -- NOTE: no leading "%", filters out MISSING indexES

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - match index column collation to database collation'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Big included columns
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Refactor',@srt
      ,prescription = N'Check Incl Len'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.obj_type_short_label   NOT IN (N'HST',N'IT')       -- Not a system maintained history or internal table
   ---------------------------------------------------------
   AND inc_Total_datatype_length_bytes >= 128
   ---------------------------------------------------------
   AND prescription   LIKE N'Retain%';           -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - index with BIG included columns'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Nonclustered Columnstores - to replace nonclustered rowstores need to add index key columns
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Refactor',@srt
      ,prescription = N'Add IDX Keys'
  FROM tempdb.dbo.SQLXL_Index_Compilation AS i
 WHERE i.rec_type = N'I'
   AND i.type    IN (N'6')
   AND CHARINDEX(N'<IDXKEY>',i.included_column_info) > 0

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - add Replaced NCX KEY columns to existing NCS index'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Non-Partitioned Table and LOCK_ESCALATION is DISABLED - should be AUTO or TABLE
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Refactor',@srt
      ,prescription =  N'Enable Auto Lock Esc'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS p
 WHERE obj_type_short_label NOT IN (N'HST',N'IT')   -- Not a system maintained history or internal table
   AND partition_Column_ID  IS NULL
   AND tbl_lock_escalation  = 1
   ---------------------------------------------------------
   AND (   prescription LIKE N'Retain%'          -- NOTE: no leading "%"
        OR prescription IS NULL
       )

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - Non-Partitioned Table and LOCK_ESCALATION is DISABLED'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Partitioned Table and LOCK_ESCALATION is TABLE or DISABLE - should be AUTO
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Refactor',@srt
      ,prescription =  N'Enable Auto Lock Esc'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'P'
       ) AS p
 WHERE obj_type_short_label       NOT IN (N'HST',N'IT')   -- Not a system maintained history or internal table
   AND partition_Column_ID            > 0
   AND tbl_lock_escalation            < 2
   ---------------------------------------------------------
   AND (   prescription LIKE N'Retain%'          -- NOTE: no leading "%"
        OR prescription IS NULL
       )

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - Partitioned Table and LOCK_ESCALATION is TABLE or DISABLE'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - SQL Table-Valued Functions with Clustered index that is not UNIQUE
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Refactor',@srt
      ,prescription = N'TVF Unique IDX'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.parent_object_type        = N'TF'
   AND i.type                     IN (N'1')
   AND i.is_unique                 = 0;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Refactor - SQL Table-Valued Functions with Clustered index that is not UNIQUE'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update REFACTOR
/******************************************************************************************************************************************/
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription       = ISNULL(i.prescription + NCHAR(10),N'')
                          + N'Refactor'
                          + (SELECT NCHAR(10) + N' ' + rex.prescription
                               FROM #prescription     AS rex
                              WHERE i.database_id      = rex.database_id
                                AND i.parent_object_id = rex.parent_object_id
                                AND i.object_ID        = rex.object_ID
                                AND i.index_ID         = rex.index_ID
                                AND i.type             = rex.type
                                AND N'Refactor'        = rex.action_desc
                              ORDER BY
                                    rex.srt
                                FOR XML PATH(N''),TYPE
                            ).value('(./text())[1]',N'NVARCHAR(4000)')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (SELECT DISTINCT
               database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
          FROM #prescription
         WHERE action_desc = N'Refactor'
       )                 AS ref
    ON i.database_id      = ref.database_id
   AND i.parent_object_id = ref.parent_object_id
   AND i.object_ID        = ref.object_ID
   AND i.index_ID         = ref.index_ID
   AND i.type             = ref.type
 WHERE i.prescription LIKE N'Retain%';           -- only want to rebuild indexes marked to RETAIN

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Apply refactor label to indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE FROM #prescription WHERE action_desc = N'Refactor'; -- already updated appropriate values

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Clean up interim results table - Refactor'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - index to remove/replace has Non-Persisted Computed Column in definition
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Review',@srt
      ,prescription = N'IDX has Non Prst Col'

  FROM (-- Computed columns not persisted
        SELECT database_id
              ,object_id
              ,column_id
          FROM tempdb.dbo.SQLXL_Index_column
         WHERE computed_column_definition IS NOT NULL
           AND is_persisted                = 0
       ) AS cp
  JOIN tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
    ON cp.database_id                          = ic.database_id
   AND cp.object_id                            = ic.object_id
   AND cp.column_id                            = ic.column_id
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
    ON ic.database_id                          = i.database_id
   AND ic.object_id                            = i.object_id
   AND ic.index_id                             = i.index_id
   AND ic.type                                 = i.type
 WHERE i.prescription LIKE N'Remove%'
    OR i.prescription LIKE N'Replace%';

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - index to Remove has Non-Persisted Computed Column'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - indexes with non-default properties - Ignored in optimization ENABLED
-- REVIEW - indexes with non-default properties - Is Hypothetical
-- REVIEW - indexes with non-default properties - Is Disabled
-- REVIEW - indexes with non-default properties - Duplicate keys are ignored
-- REVIEW - indexes with non-default properties - Duplicate key messages are suppressed
-- REVIEW - indexes with non-default properties - Compression delay > 0
-- REVIEW - indexes with non-default properties - index was Auto created
-- NOTE - indexes with non-default properties. allow_row_locks, allow_page_locks covered in REBUILD
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Review',@srt
      ,prescription = STUFF(
      +IIF(i.is_ignored_in_optimization = 1,NCHAR(10) + N' Ignored in optimization'                                      ,N'')
      +IIF(i.is_hypothetical            = 1,NCHAR(10) + N' Hypothetical'                                                 ,N'')
      +IIF(i.is_disabled                = 1,NCHAR(10) + N' Disabled'                                                     ,N'')
      +IIF(i.ignore_dup_key             = 1,NCHAR(10) + N' Dupl keys ignored'                                            ,N'')
      +IIF(i.suppress_dup_key_messages  = 1,NCHAR(10) + N' Dupl key msg suppressed'                                      ,N'')
      +IIF(i.compression_delay_mm       > 0,NCHAR(10) + N' Compression delay ' + CAST(i.compression_delay_mm AS NVARCHAR(20)),N'')
      +IIF(i.auto_created               = 1,NCHAR(10) + N' Auto created'                                                 ,N'')
      ,1,2,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE TRY_CAST(i.type AS INT)      > 0
   AND i.prescription LIKE N'Retain%'
   AND i.obj_type_short_label        NOT IN (N'HST',N'IT',N'TVF')
   AND (   i.is_ignored_in_optimization = 1
        OR i.is_hypothetical            = 1
        OR i.is_disabled                = 1
        OR i.ignore_dup_key             = 1
        OR i.suppress_dup_key_messages  = 1
        OR i.compression_delay_mm       > 0
        OR i.auto_created               = 1
       );

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - index with non-default properties - ignore, hypo, disabled, dupl keys, comp delay, auto created'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - indexes with resumable operations
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.object_id,i.object_id,i.index_id,i.type,N'Review',@srt
      ,prescription = N'Resumable operation'
  FROM tempdb.dbo.SQLXL_Index_sys_index_resumable_operations AS r
  JOIN tempdb.dbo.SQLXL_Index_sys_indexes                    AS i
    ON r.database_id                                        = i.database_id
   AND r.object_id                                          = i.object_id
   AND r.index_id                                           = i.index_id
   AND TRY_CAST(i.type AS INT) > 0;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - index with resumable operations'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - Retained Foreign Key Constraints that are uncovered by an index
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Review',@srt
      ,prescription = N'Covering index?'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.type = N'F'
   AND prescription LIKE N'Retain%'
   AND i.fkc_covered_by_idx_IDS IS NULL

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - uncovered FKC'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - Clustered indexes that are not UNIQUE
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Review',@srt
      ,prescription  = N'Make CX Uniq'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE type                           = N'1'                -- clustered index
   AND is_unique                      = 0
   AND i.obj_type_short_label         NOT IN (N'HST',N'IT') -- Not a system maintained history table or internal table

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - CX that are not UNIQUE'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - Views that do not have a Clustered index
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Review',@srt
      ,prescription  = N'Add index?'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.obj_type               = N'V' -- View
   AND i.type                   = N'0'

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - Views that do not have a CX'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - Lo/No activity or Empty
-- If statistics recently updated show here
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Review',@srt
      ,prescription = STUFF(IIF(ISNULL(row_CNT,0) = 0
                               ,N' Empty IDX'
                               ,N'')
                           +IIF(    type NOT IN (N'4',N'F')          -- no Foreign Key or SPATIAL
                                AND ISNULL(ius_User_Total_CNT,0) = 0 -- no Usage activity
                               ,N' No activity'
                               ,N'')
                           ,1,1,N'')
                     +IIF(    stathdr_Rows_CNT             >  0  -- special case of no activity
                          AND stathdr_Statistics_age_days <= 30  -- and recently updated statistics
                         ,NCHAR(10) + N' Has statistics'
                         ,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE 1 = 1
   AND parent_object_type             NOT IN (N'VW',N'TVF')
   AND tbl_is_memory_optimized          = 0
   ---------------------------------------------------------
   AND NOT type                         = N'4'              -- Spatial ain't got index usage metrics
   ---------------------------------------------------------
   AND (  TRY_CAST(type AS INT)        >= 0
        OR type                         = N'M'
       )
   AND (   (    ISNULL(ius_User_Total_CNT    ,0) = 0
            AND ISNULL(ops_Total_contacts_CNT,0) = 0
           )
        OR ISNULL(row_CNT           ,0) = 0
       )
   ---------------------------------------------------------
   AND prescription   NOT LIKE N'Remove%'
   AND prescription   NOT LIKE N'Reject%'
   ---------------------------------------------------------
   AND obj_type_short_label           NOT IN (N'HST',N'IT',N'TVF');

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - Low or NO activity, or empty'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - Missing indexes with Large Advantage and significant Usage, but may have an NCX that they could roll up to
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Review',@srt
      ,prescription = N'Similar NCX'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE type                          = N'M'                 -- Missing index
   ------------------------------------------
   AND prescription LIKE N'Request' + NCHAR(10) + N' MIX Hi Gain%' -- Keep ACTION in synch
   AND EXISTS (SELECT NULL
                 FROM tempdb.dbo.SQLXL_Index_Synergies AS o
                WHERE database_id                     = o.database_id
                  AND parent_object_id                = o.parent_object_id
                  AND index_ID                        = o.l_index_id
                  AND type                            = o.l_type
                  AND N'2'                            = o.r_type
              );

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - MIX that can roll up to existing/new NCS'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - Lead Key element is a big STRING
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Review',@srt
      ,prescription = N'Lead big ' +Lead_Element_Data_Type
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE i.type                     IN (N'1',N'2')
   AND i.obj_type_short_label NOT IN (N'HST',N'IT') -- Not a system maintained history table or internal table
   --------------------------------------------
   AND (   Lead_Element_Max_Len > 16
        OR Lead_Element_Max_Len = -1
       )
   AND (   prescription LIKE N'Retain%'
        OR prescription LIKE N'Request%'
       )

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - Lead Key element is a big STRING'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - index to be replaced by Nonclustered Columnstore has 1 or more non-lead keys that are big STRINGS
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Review',@srt
      ,prescription = N'Idx has big keys'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 CROSS
 APPLY (SELECT COUNT(1)
          FROM tempdb.dbo.SQLXL_Index_sys_index_columns AS ic
          JOIN tempdb.dbo.SQLXL_Index_sys_columns       AS c
            ON ic.database_id                          = c.database_id
           AND ic.object_id                            = c.object_id
           AND ic.column_id                            = c.column_id
          JOIN tempdb.dbo.SQLXL_Index_sys_types         AS t
            ON c.database_id                           = t.database_id
           AND c.user_type_id                          = t.user_type_id
         WHERE i.database_id                           = ic.database_id
           AND i.object_id                             = ic.object_id
           AND i.index_id                              = ic.index_id
           AND i.type                                  = ic.type
           AND 0                                       = ic.is_included_column
           AND (   (t.name  = N'NVARCHAR' AND c.max_length > 16)
                OR (t.name <> N'NVARCHAR' AND c.max_length > 32)
                OR c.max_length = -1
               )
       ) AS c(cnt)
 WHERE 1 = 1
   AND i.prescription        LIKE N'Replace%'
   AND i.obj_type_short_label NOT IN (N'HST',N'IT')     -- Not a system maintained history table or internal table
   AND c.cnt                    > 0

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - index to be replaced by NCS has included big STRING'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - index to be Removed or Replaced by Nonclustered Columnstore that are filtered
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Review',@srt
      ,prescription  = N'Filtered IDX'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE (   ISNULL(prescription,N'') LIKE N'Remove%'
        OR ISNULL(prescription,N'') LIKE N'Replace%'
       )
   AND i.has_filter = 1;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - index to be replaced by NCS is filtered'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - index with Page Compression Failures > 40 Percent
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Review',@srt
      ,prescription = N'Chk PageCompress'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE ios_page_compression_fail_PCT > 40
   --------------------------------------
   AND prescription LIKE N'Retain%'           -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - index with Page Compression Failures > 40 Percent'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - Potential Temporary Parents & indexes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT DISTINCT
       f.database_id,f.parent_object_id,f.object_id,f.index_id,f.type,N'Review',@srt
      ,prescription =  N'Check Temp Object'
  FROM (------------------------------------------------------------------------------------------------------------------------------------
        -- get list of all objects previously flagged as potentially temporary
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT DISTINCT
               database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
          FROM tempdb.dbo.SQLXL_Index_Diagnostics
         WHERE diagnostic = N'[POTENTIAL TEMPORARY OBJECT]'
       ) f
  JOIN tempdb.dbo.SQLXL_Index_Compilation AS i
    ON f.database_id                     = i.database_id
   AND f.parent_object_id                = i.parent_object_id
   AND f.object_id                       = i.object_id
   AND f.index_id                        = i.index_id
   AND f.type                            = i.type
 WHERE i.prescription LIKE N'Retain%'                         -- NOTE: no leading "%"
    OR i.rec_type        = N'P'

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - Potential Temporary Parents & indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - Potential Filtered Index
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT DISTINCT
       f.database_id,f.parent_object_id,f.object_id,f.index_id,f.type,N'Review',@srt
      ,prescription =  N'Possible Filter'
  FROM (------------------------------------------------------------------------------------------------------------------------------------
        -- get list of all objects previously flagged as potentially temporary
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT DISTINCT
               database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
          FROM tempdb.dbo.SQLXL_Index_Diagnostics
         WHERE diagnostic LIKE N'%add filter?%'
       ) f
  JOIN tempdb.dbo.SQLXL_Index_Compilation AS i
    ON f.database_id                     = i.database_id
   AND f.parent_object_id                = i.parent_object_id
   AND f.object_id                       = i.object_id
   AND f.index_id                        = i.index_id
   AND f.type                            = i.type
 WHERE (   i.prescription LIKE N'Retain%'        -- NOTE: no leading "%"
        OR i.prescription LIKE N'Request%'       -- NOTE: no leading "%"
       )
    OR i.rec_type                   = N'P'

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - Potential Filtered Index'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - Synergies found on RETAIN, REJECT indexes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Review',@srt,
       STUFF(
             IIF(s.seq_CNT > 0,NCHAR(10) + N' Synergy: Sequence' ,N'')
            +IIF(s.ovl_CNT > 0,NCHAR(10) + N' Synergy: Overlap' ,N'')
            +IIF(s.con_CNT > 0,NCHAR(10) + N' Synergy: Contained',N'')
            ,1,2,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (
        SELECT database_id
              ,parent_object_id
              ,index_id = r_index_id
              ,type     = r_type
              ,seq_CNT = SUM(IIF(matching_sequence_CNT > 0,1,0))
              ,ovl_CNT = SUM(IIF(matching_overlap_CNT  > 0,1,0))
              ,con_CNT = SUM(IIF(matching_contained_CNT> 0,1,0))
          FROM tempdb.dbo.SQLXL_Index_Synergies
         WHERE l_type <> N'F' -- foreign key previously reported
           AND r_type <> N'F' -- foreign key previously reported
         GROUP BY
               database_id
              ,parent_object_id
              ,r_index_id
              ,r_type
        HAVING SUM(IIF(matching_sequence_CNT > 0,1,0)) > 0
            OR SUM(IIF(matching_overlap_CNT  > 0,1,0)) > 0
            OR SUM(IIF(matching_contained_CNT> 0,1,0)) > 0
       )                 AS s
    ON i.database_id      = s.database_id
   AND i.parent_object_id = s.parent_object_id
   AND i.object_id        = s.parent_object_id
   AND i.index_ID         = s.index_id
   AND i.type             = s.type
 WHERE i.obj_type         = N'U'
   AND (   (    i.prescription LIKE N'Retain%'
            AND i.type            = N'2'
           )
        OR (    i.prescription LIKE N'Reject' + NCHAR(10) + N' MIX low Gain' -- only indexes not getting built or replaced
            AND i.type            = N'M'
           )
       )

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - Synergies found on RETAIN, REJECT indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - indexes Auto Created
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Review',@srt
      ,prescription = N'Auto Created'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE auto_created    = 1
   --------------------------------------
   AND prescription LIKE N'Retain%'           -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - indexes Auto Created'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REVIEW - SQL Table Valued Function - Check ORDER BY
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Review',@srt
      ,prescription = N'Check ORDER BY'
  FROM tempdb.dbo.SQLXL_Index_Compilation
 WHERE rec_type  = N'I'
   AND type      = N'0'
   AND obj_type IN (N'FT',N'IF')
   AND prescription IS NULL;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Review - SQL Table Valued Function - Check ORDER BY'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update REVIEW
/******************************************************************************************************************************************/
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = ISNULL(i.prescription + NCHAR(10),N'') + N'Review'
                     +(SELECT NCHAR(10) + N' ' + rex.prescription
                         FROM #prescription    AS rex
                        WHERE i.database_id                = rex.database_id
                          AND i.parent_object_id           = rex.parent_object_id
                          AND i.object_ID                  = rex.object_ID
                          AND i.index_ID                   = rex.index_ID
                          AND i.type                       = rex.type
                          AND N'Review'                    = rex.action_desc
                        ORDER BY
                              rex.srt
                          FOR XML PATH(N''),TYPE
                      ).value('(./text())[1]',N'NVARCHAR(4000)')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type IN (N'I',N'P')
       ) AS i
  JOIN (SELECT DISTINCT
               database_id,parent_object_id,object_id,index_id,TYPE
          FROM #prescription
         WHERE action_desc = N'Review'
       ) ref
    ON i.database_id      = ref.database_id
   AND i.parent_object_id = ref.parent_object_id
   AND i.object_ID        = ref.object_ID
   AND i.index_ID         = ref.index_ID
   AND i.type             = ref.type;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Apply Review label to indexes'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE FROM #prescription WHERE action_desc = N'Review'; -- already updated appropriate values

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Clean up interim results table - Review'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************\
** REBUILD REBUILD REBUILD REBUILD REBUILD REBUILD REBUILD REBUILD REBUILD REBUILD REBUILD REBUILD REBUILD REBUILD REBUILD REBUILD REBUIL **
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
-- REBUILD - Columnstores with > 1024 Deleted rows or > 2048 Open rows
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,N'Rebuild',@srt
      ,prescription = STUFF(IIF(cs.deleted_rows_CNT > 1024,NCHAR(10)+IIF(i.type = N'5',N'CCS',N'NCS') + N' Deleted rows',N'')
                                      +IIF(cs.open_rows_CNT    > 2048,NCHAR(10)+IIF(i.type = N'5',N'CCS',N'NCS') + N' Open rows' ,N'')
                                      ,1,1,N'')
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
  JOIN (
        SELECT database_id
              ,object_id
              ,index_id
              ,open_rowgroup_CNT    = SUM(CASE WHEN state_desc   = N'OPEN' THEN 1 ELSE 0 END)
              ,open_rows_CNT        = SUM(CASE WHEN state_desc   = N'OPEN' THEN total_rows ELSE 0 END)
              ,deleted_rowgroup_CNT = SUM(CASE WHEN deleted_rows > 0       THEN 1 ELSE 0 END)
              ,deleted_rows_CNT     = SUM(deleted_rows)
          FROM tempdb.dbo.SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats
         GROUP BY
               database_id
              ,object_id
              ,index_id
        HAVING SUM(deleted_rows) > 1024
            OR SUM(CASE WHEN state_desc = N'OPEN' THEN total_rows ELSE 0 END) > 2048
       ) cs
    ON i.database_id      = cs.database_id
   AND i.object_id        = cs.object_id
   AND i.index_id         = cs.index_id
   AND i.type            IN (N'5',N'6');

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Rebuild - Columnstores with > 1024 Deleted rows or > 2048 Open rows'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REBUILD - index takes up more buffer than reserved size - opportunity for cleanup
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Rebuild',@srt
      ,prescription = N'BUF > Rsrvd Size'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE 1 = 1
   AND prescription  LIKE N'Retain%'              -- NOTE: no leading "%", filters out MISSING indexes
   AND i.buffer_Total_KB_CNT > (i.reserved_page_CNT * 8.0)

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Rebuild - index takes up more buffer than reserved size'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REBUILD - Buffer Free > 20%
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt        INT      = 0
       ,@ssms       TINYINT  = 1
       ,@debug      NVARCHAR(1000)
       ,@debug_DTTM DATETIME = GETDATE()
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Rebuild',@srt
      ,prescription = N'BUF free > 20%'
  FROM tempdb.dbo.SQLXL_Index_Compilation
 WHERE rec_type = N'I'
   AND tbl_is_memory_optimized = 0 -- exclude memoryoptimized
   AND buffer_Total_KB_CNT > 0.0
   AND prescription  LIKE N'Retain%' -- NOTE: no leading "%", filters out MISSING indexes
   AND 100.0 * buffer_free_KB_CNT / buffer_Total_KB_CNT > 20.0; -- /zero handled by WHERE clause element above

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Rebuild - index Buffer Free > 20 percent'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REBUILD - statistics over 30 days old
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt        INT      = 0
       ,@ssms       TINYINT  = 1
       ,@debug      NVARCHAR(1000)
       ,@debug_DTTM DATETIME = GETDATE()
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Rebuild',@srt
      ,prescription = N'Old Stats'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE 1 = 1
   AND prescription  LIKE N'Retain%'             -- NOTE: no leading "%", filters out MISSING indexes
   AND obj_type_short_label NOT IN (N'HST',N'IT')           -- Not a system maintained history table -or- Internal table
   AND TRY_CAST(i.type AS INT)     >  0
   AND row_CNT                     >  0
   AND stathdr_Statistics_age_days > 30;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Rebuild - statistics over 30 days old'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REBUILD - statistics <= 30 days old and stats row count +/- 0.5% different than index row count
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt        INT      = 0
       ,@ssms       TINYINT  = 1
       ,@debug      NVARCHAR(1000)
       ,@debug_DTTM DATETIME = GETDATE()
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Rebuild',@srt
      ,prescription = N'Stats Row Delta'
  FROM tempdb.dbo.SQLXL_Index_Compilation
 WHERE rec_type = N'I'
   AND TRY_CAST(type AS INT)        >  0
   AND stathdr_Statistics_age_days <= 30 -- NOTE: stats over 30 days old handled separately
   AND row_CNT                      >  0
   AND stathdr_Rows_CNT             >  0
   AND (   ABS(100.0 * (row_CNT - stathdr_Rows_CNT) / row_CNT)          > 0.5 -- /zero handled by WHERE clause above
        OR ABS(100.0 * (stathdr_Rows_CNT - row_CNT) / stathdr_Rows_CNT) > 0.5 -- /zero handled by WHERE clause above
       )
   ---------------------------------------------------------
   AND prescription LIKE N'Retain%';     -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Rebuild - statistics <= 30 days old and stats row count +/- 1% different than index row count'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REBUILD - statistics <= 30 days old and stats modification_counter > 0.5% index row count
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Rebuild',@srt
      ,prescription = N'Stats Row Delta'
  FROM tempdb.dbo.SQLXL_Index_Compilation
 WHERE rec_type = N'I'
   AND TRY_CAST(type AS INT)        >  0
   AND stathdr_Statistics_age_days <= 30 -- NOTE: stats over 30 days old handled separately
   AND row_CNT                      >  0
   AND Stats_Prop_modification_CNT  >  0
   AND ABS(100.0 * Stats_Prop_modification_CNT / row_CNT) > 0.5  -- /zero handled by WHERE clause above
   ---------------------------------------------------------
   AND prescription LIKE N'Retain%';     -- NOTE: no leading "%"

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Rebuild - statistics <= 30 days old and stats modification_counter > 0.5% index row count'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- REBUILD - Statistics not computed on Rowstore Clustered and Nonclustered, XML, and Spatial indexes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;INSERT INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,parent_object_id,object_id,index_id,type,N'Rebuild',@srt
      ,prescription = N'No Stats'
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE TRY_CAST(type AS INT)    BETWEEN 1 AND 4             -- no HEAPS, Clustered ColStore, NonClus ColStore, FulltText
   AND obj_type_short_label NOT IN (N'HST',N'IT',N'TVF')    -- Not a system maintained history table or table valued function
   ---------------------------------------------------------
   AND stathdr_Statistics_age_days    IS NULL
   ---------------------------------------------------------
   AND prescription       LIKE N'Retain%'        -- NOTE: no leading "%"
   AND CHARINDEX(N'REBUILD',prescription) = 0;   -- don't need if already called out for REBUILD

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Rebuild - Statistics not computed on CX, NCX, XML, SPT'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Update REBUILD
/******************************************************************************************************************************************/
UPDATE i
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON;
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = ISNULL(i.prescription + NCHAR(10),N'') + N'Rebuild'
                     +(SELECT TOP 1
                              NCHAR(10) + N' ' + rex.prescription
                         FROM #prescription AS rex
                        WHERE i.database_id             = rex.database_id
                          AND i.parent_object_id        = rex.parent_object_id
                          AND i.object_ID               = rex.object_ID
                          AND i.index_ID                = rex.index_ID
                          AND i.type                    = rex.type
                          AND N'Rebuild'               = rex.action_desc
                        ORDER BY
                              rex.srt
                          FOR XML PATH(N''),TYPE
                      ).value('(./text())[1]',N'NVARCHAR(4000)')
  FROM tempdb.dbo.SQLXL_Index_Compilation AS i -- NOTE: parents can be REFACTORED too
  JOIN (SELECT DISTINCT
               database_id,parent_object_id,object_id,index_id,TYPE
          FROM #prescription
         WHERE action_desc = N'Rebuild'
       ) ref
    ON i.database_id      = ref.database_id
   AND i.parent_object_id = ref.parent_object_id
   AND i.object_ID        = ref.object_ID
   AND i.index_ID         = ref.index_ID
   AND i.type             = ref.type;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Apply Rebuild label to indexes '
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE FROM #prescription WHERE action_desc = N'Rebuild'; -- already updated appropriate values

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Clear out interim results table - Rebuild'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Flag indexes not ACTIONed
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = N'TBD ' + obj_type_hdr + NCHAR(10) + type_short_desc
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'I'
       ) AS i
 WHERE TRY_CAST(type AS INT) >= 0
   AND i.prescription        IS NULL

SET ANSI_WARNINGS OFF;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Flag indexes without a prescription'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Delete all empty Diagnostics
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM tempdb.dbo.SQLXL_Index_Diagnostics
 WHERE diagnostic IS NULL;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Clear out empty interim diagnostic records'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************\
** PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PR **
\******************************************************************************************************************************************/
UPDATE p
   SET
/*** LOCAL TESTING ***
SELECT p.database_id,p.parent_object_id,p.object_id,p.obj_type,p.obj_name,
*/
       tbl_priority_metric =
-- Waiting -------------------------------------------------
 IIF(a.ios_Total_wait_MS_CNT       > 0,1.0 * ISNULL(p.ios_Total_wait_MS_CNT      ,0) / a.ios_Total_wait_MS_CNT      ,0) * @Prio_wait_time
+IIF(a.ios_Total_wait_CNT          > 0,1.0 * ISNULL(p.ios_Total_wait_CNT         ,0) / a.ios_Total_wait_CNT         ,0) * @Prio_wait_count

-- Locking -------------------------------------------------
+IIF(a.ios_Total_Lock_CNT          > 0,1.0 * ISNULL(p.ios_Total_Lock_CNT         ,0) / a.ios_Total_Lock_CNT         ,0) * @Prio_locks
+IIF(a.ios_lock_promotion_CNT      > 0,1.0 * ISNULL(p.ios_lock_promotion_CNT     ,0) / a.ios_lock_promotion_CNT     ,0) * @Prio_lock_promotions
+IIF(a.ios_lock_promotion_fail_CNT > 0,1.0 * ISNULL(p.ios_lock_promotion_fail_CNT,0) / a.ios_lock_promotion_fail_CNT,0) * @Prio_lock_promotion_fails

-- Splits, s, Heap Forwarded Fetches ------------------
+IIF(a.ops_Total_page_split_CNT    > 0,1.0 * ISNULL(p.ops_Total_page_split_CNT   ,0) / a.ops_Total_page_split_CNT   ,0) * @Prio_page_splits
+IIF(a.ops_Total_page_merge_CNT    > 0,1.0 * ISNULL(p.ops_Total_page_merge_CNT   ,0) / a.ops_Total_page_merge_CNT   ,0) * @Prio_page_merges
+IIF(a.ios_forwarded_fetch_CNT     > 0,1.0 * ISNULL(p.ios_forwarded_fetch_CNT    ,0) / a.ios_forwarded_fetch_CNT    ,0) * @Prio_OPS_forwarded_fetches

-- Missing index Advantage Weighted ------------------------
+IIF(a.mix_Advantage_weighted_AMT  > 0,1.0 * ISNULL(p.mix_Advantage_weighted_AMT ,0) / a.mix_Advantage_weighted_AMT ,0) * @Prio_missing_indexes

-- Table Total Writes percent ------------------------------
+IIF(a.ops_Total_write_CNT         > 0,1.0 * ISNULL(p.ops_Total_write_CNT        ,0) / a.ops_Total_write_CNT        ,0) * @Prio_OPS_writes
+IIF(a.ius_user_updates_CNT        > 0,1.0 * ISNULL(p.ius_user_updates_CNT       ,0) / a.ius_user_updates_CNT       ,0) * @Prio_USG_writes

-- Hi buffer cache usage percent - omit XTP InMemory/Memory Optimized ---------------------------
+IIF(    p.tbl_is_memory_optimized = 0
     AND p.buffer_Total_KB_CNT     > 64
     AND p.reserved_page_CNT       > 9
     AND m.SQLmem                  > 0
    ,IIF(    p.tbl_is_memory_optimized = 1
        ,IIF(1.0 * p.buffer_Total_KB_CNT / (p.reserved_page_CNT * 8.0) <= 1.0
            -- 2% of total buffer = 100% of priority, so (100/2)*100 for value
            ,5000.0 * p.buffer_Total_KB_CNT / m.SQLmem / (p.reserved_page_CNT * 8.0) -- /zero handled by WHERE clause above
            ,1.0)
        ,100.0 * p.buffer_Total_KB_CNT / m.SQLmem)
    ,0)                                                                                  * @Prio_buffer_cache_used

-- Read to Write Ratio -------------------------------------
+IIF(ISNULL(p.ios_read_to_write_RAT,0) < 4.0
    ,(4.0 - ISNULL(p.ios_read_to_write_RAT,0)) * ISNULL(p.ios_write_to_instance_RAT,0)
    ,0.0)                                                                                * @Prio_OPS_read_write_ratio
+IIF(ISNULL(p.ius_read_to_write_RAT,0) < 4.0
    ,(4.0 - ISNULL(p.ius_read_to_write_RAT,0)) * ISNULL(p.ius_write_to_instance_RAT,0)
    ,0.0)                                                                                * @Prio_USG_read_write_ratio

-- Reads, Scans, and Lookups -------------------------------
+IIF(      (ISNULL(a.ius_user_read_CNT,0) + ISNULL(a.ops_Total_read_CNT,0))> 0
    ,1.0 * (ISNULL(p.ius_user_read_CNT,0) + ISNULL(p.ops_Total_read_CNT,0))
         / (ISNULL(a.ius_user_read_CNT,0) + ISNULL(a.ops_Total_read_CNT,0))
    ,0)                                                                                  * @Prio_reads
+IIF(      (ISNULL(a.ius_user_scans_CNT,0) + ISNULL(a.ops_Total_scan_cnt,0))> 0
    ,1.0 * (ISNULL(p.ius_user_scans_CNT,0) + ISNULL(p.ops_Total_scan_cnt,0))
         / (ISNULL(a.ius_user_scans_CNT,0) + ISNULL(a.ops_Total_scan_cnt,0))
    ,0)                                                                                  * @Prio_scans
+IIF(      (ISNULL(a.ius_user_lookups_CNT,0) + ISNULL(a.ios_singleton_lookup_CNT,0))> 0
    ,1.0 * (ISNULL(p.ius_user_lookups_CNT,0) + ISNULL(p.ios_singleton_lookup_CNT,0))
         / (ISNULL(a.ius_user_lookups_CNT,0) + ISNULL(a.ios_singleton_lookup_CNT,0))
    ,0)                                                                                  * @Prio_lookups

-- LOB data ------------------------------------------------
+IIF(    (ISNULL(a.ios_lob_fetch_pages_CNT            ,0)
--       +ISNULL(a.ios_lob_orphan_create_CNT          ,0) -- commented out. Bulk operations only, not counted toward read/write ratio
--       +ISNULL(a.ios_lob_orphan_insert_CNT          ,0) -- commented out. Bulk operations only, not counted toward read/write ratio
         +ISNULL(a.ios_row_overflow_fetch_in_pages_CNT,0)
         +ISNULL(a.ios_column_value_pull_in_row_CNT   ,0)
         +ISNULL(a.ios_column_value_push_off_row_CNT  ,0))> 0
    ,1.0*(ISNULL(p.ios_lob_fetch_pages_CNT            ,0)
--       +ISNULL(p.ios_lob_orphan_create_CNT          ,0) -- commented out. Bulk operations only, not counted toward read/write ratio
--       +ISNULL(p.ios_lob_orphan_insert_CNT          ,0) -- commented out. Bulk operations only, not counted toward read/write ratio
         +ISNULL(p.ios_row_overflow_fetch_in_pages_CNT,0)
         +ISNULL(p.ios_column_value_pull_in_row_CNT   ,0)
         +ISNULL(p.ios_column_value_push_off_row_CNT  ,0))
     /   (ISNULL(a.ios_lob_fetch_pages_CNT            ,0)
--       +ISNULL(a.ios_lob_orphan_create_CNT          ,0) -- commented out. Bulk operations only, not counted toward read/write ratio
--       +ISNULL(a.ios_lob_orphan_insert_CNT          ,0) -- commented out. Bulk operations only, not counted toward read/write ratio
         +ISNULL(a.ios_row_overflow_fetch_in_pages_CNT,0)
         +ISNULL(a.ios_column_value_pull_in_row_CNT   ,0)
         +ISNULL(a.ios_column_value_push_off_row_CNT  ,0))
     ,0)                                                                                                                * @Prio_LOB

-- Flagged to create new NCS -------------------------------
+IIF(CHARINDEX(N'Request new NCS',p.prescription) > 0,50.0,0)  -- NOTE: keep in synch with above ACTION codes
  FROM (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type IN (N'H',N'P')
           AND (   type IN (N'IT',N'U')
                OR index_cnt > 1
               )
       ) AS p
 CROSS
  JOIN (SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'A'
       ) AS a
 CROSS
  JOIN (SELECT CAST(run_value AS BIGINT) * 1024 -- kb/MB
            FROM tempdb.dbo.SQLXL_Index_sys_instance
           WHERE source = N'sp_configure'
             AND name   = N'max server memory (MB)'
       ) AS m (SQLmem);

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Compute Parent Prescription Priority - Percent of Totals'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Add significant Metric diagnostics to Parent. Added here to make sure they end up on the bottom of the diagnostics
--<BS> confirm rec_types below
/******************************************************************************************************************************************/
----------------------------------------------------------------------------------------------------
-- Parent - Priorities = 9
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = i.rec_type,i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 9
      ,diagnostic = i.diagnostic
  FROM tempdb.dbo.SQLXL_Index_Diagnostics AS i
 WHERE rec_type IN (N'P',N'H',N'S')
   AND (
-- Diagnostic - Table - High Wait ms
-- Diagnostic - Table - High Wait CNT
           CHARINDEX(N'OPS Wait Tm'       ,i.diagnostic) = 1
-- Diagnostic - Table - High Locks
-- Diagnostic - Table - High Successful Lock Promotion Attempts
        OR CHARINDEX(N'OPS Locks'         ,i.diagnostic) = 1
-- Diagnostic - Table - High Lock Promotion Attempts
-- Diagnostic - Table - High Failed Lock Promotion Attempts
        OR CHARINDEX(N'OPS Lock Promo Att',i.diagnostic) = 1
-- Diagnostic - Table - High Missing Index Advantage
-- Diagnostic - Table - High Missing Index Count
-- Diagnostic - Table - High Missing Index Compiles
        OR CHARINDEX(N'MIX Adv'           ,i.diagnostic) = 1
-- Diagnostic - Table - High Operations Page Splits Total
-- Diagnostic - Table - High Operations Page Splits Leaf level
-- Diagnostic - Table - High Operations Page Splits NonLeaf level
        OR CHARINDEX(N'OPS Split CNT'     ,i.diagnostic) = 1
-- Diagnostic - Table - High Operations Page  Total
-- Diagnostic - Table - High Operations Page  Leaf level
-- Diagnostic - Table - High Operations Page  NonLeaf level
        OR CHARINDEX(N'OPS  CNT'     ,i.diagnostic) = 1
-- Diagnostic - Table - High Operations Page Splits InMemory
-- Diagnostic - Table - High Operations Page  InMemory
        OR CHARINDEX(N'XTP Splits'        ,i.diagnostic) = 1
-- Diagnostic - Table - High Operations Reads
-- Diagnostic - Table - High Operations Scans
-- Diagnostic - Table - High Operations Lookups
        OR CHARINDEX(N'OPS Reads'         ,i.diagnostic) = 1
-- Diagnostic - Table - High Operations Writes
-- Diagnostic - Table - High Operations Inserts
-- Diagnostic - Table - High Operations Updates
-- Diagnostic - Table - High Operations Deletes
        OR CHARINDEX(N'OPS Writes'        ,i.diagnostic) = 1
-- Diagnostic - Table - High Usage Total
-- Diagnostic - Table - High Usage Read
-- Diagnostic - Table - High Usage Write
        OR CHARINDEX(N'USG Total'         ,i.diagnostic) = 1
-- Diagnostic - Table - High Usage Scan
-- Diagnostic - Table - High Usage Lookup
-- Diagnostic - Table - High Operations Forwarded Fetches
        OR CHARINDEX(N'USG Scans'         ,i.diagnostic) = 1
-- Diagnostic - Table - High Operations LOB Fetch
-- Diagnostic - Table - High Operations Orphan Create
-- Diagnostic - Table - High Operations Orphan Insert
        OR CHARINDEX(N'OPS LOB Fetch'     ,i.diagnostic) = 1
-- Diagnostic - Table - High Operations Overflow Fetch
-- Diagnostic - Table - High Operations Pull In Row
-- Diagnostic - Table - High Operations Push Off Row
        OR CHARINDEX(N'OPS Overflow Fetch',i.diagnostic) = 1
       )

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Added significant metrics diagnostic records to Parent'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Add Priority Metric computations to Parent & Indexes - Buffer Cache
/******************************************************************************************************************************************/
-- Diagnostic - Table - Hi buffer cache usage (> 4MB reserved size, > 20% in buffer cache)
-- Diagnostic - Index - Hi buffer cache usage (> 2MB reserved size, > 20% in buffer cache)
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = i.rec_type,i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 9
      ,diagnostic =
  N'BUF Cache: '+ tempdb.dbo.SQLXL_3SD(i.buffer_Total_KB_CNT,N'KB')
+ N' ('+ tempdb.dbo.SQLXL_3SD(1.0 * i.buffer_Total_KB_CNT / (i.reserved_page_CNT * 8.0),N'%') + N')' -- /0 handled in WHERE clause below
+ N' Reserve: '  + tempdb.dbo.SQLXL_3SD(i.reserved_page_CNT,N'P')
   FROM tempdb.dbo.SQLXL_Index_Compilation AS i
  WHERE i.rec_type           NOT IN (N'A',N'D')
    AND i.tbl_is_memory_optimized = 0
    AND (   (i.rec_type = N'I' AND i.reserved_page_CNT > 256) -- 2MB
         OR (i.rec_type = N'H' AND i.reserved_page_CNT > 512) -- 4MB
         OR (i.rec_type = N'P' AND i.reserved_page_CNT > 512) -- 4MB
         OR (i.rec_type = N'S' AND i.reserved_page_CNT > 512) -- 4MB
        )
    AND i.buffer_Total_KB_CNT > (8.0 * i.reserved_page_CNT * 0.20); -- 8.0 to convert PAGE to KB

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Added Buffer Cache metric diagnostic records to Parent'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start significant index metrics diagnostic records',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/******************************************************************************************************************************************/
-- Add Priority Metric computations to Index
-- Checking not performed of denominators since any value in any index should mean that the Instance value is also non-zero
/******************************************************************************************************************************************/
----------------------------------------------------------------------------------------------------
-- Index - Priorities = 9
----------------------------------------------------------------------------------------------------
INSERT INTO tempdb.dbo.SQLXL_Index_Diagnostics (rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic_type_id,diagnostic)
SELECT rec_type = i.rec_type,i.database_id,i.parent_object_id,i.object_id,i.index_id,i.type,diagnostic_type_id = 9
      ,diagnostic = i.diagnostic
  FROM tempdb.dbo.SQLXL_Index_Diagnostics AS i
 WHERE rec_type IN (N'I')
   AND (
-- Diagnostic - Index - High Wait ms
-- Diagnostic - Index - High Wait CNT
           CHARINDEX(N'OPS Wait Tm'       ,i.diagnostic) = 1
-- Diagnostic - Index - High Locks
-- Diagnostic - Index - High Lock Promotion Attempts
-- Diagnostic - Index - High Failed Lock Promotion Attempts
-- Diagnostic - Index - High Successful Lock Promotion Attempts
        OR CHARINDEX(N'OPS Locks'         ,i.diagnostic) = 1
-- Diagnostic - Index - High Operations Page Splits Total
-- Diagnostic - Index - High Operations Page Splits Leaf level
-- Diagnostic - Index - High Operations Page Splits NonLeaf level
        OR CHARINDEX(N'OPS Split CNT'     ,i.diagnostic) = 1
-- Diagnostic - Index - High Operations Page  Total
-- Diagnostic - Index - High Operations Page  Leaf level
-- Diagnostic - Index - High Operations Page  NonLeaf level
        OR CHARINDEX(N'OPS  CNT'     ,i.diagnostic) = 1
-- Diagnostic - Index - High Operations Page Splits InMemory
-- Diagnostic - Index - High Operations Page  InMemory
        OR CHARINDEX(N'XTP Splits'        ,i.diagnostic) = 1
-- Diagnostic - Index - High Operations Reads
-- Diagnostic - Index - High Operations Scans
-- Diagnostic - Index - High Operations Lookups
        OR CHARINDEX(N'OPS Reads'         ,i.diagnostic) = 1
-- Diagnostic - Index - High Operations Writes
-- Diagnostic - Index - High Operations Inserts
-- Diagnostic - Index - High Operations Updates
-- Diagnostic - Index - High Operations Deletes
        OR CHARINDEX(N'OPS Writes'        ,i.diagnostic) = 1
-- Diagnostic - Index - High Usage Total
-- Diagnostic - Index - High Usage Read
-- Diagnostic - Index - High Usage Write
        OR CHARINDEX(N'USG Total'         ,i.diagnostic) = 1
-- Diagnostic - Index - High Usage Scan
-- Diagnostic - Index - High Usage Lookup
-- Diagnostic - Index - High Operations Forwarded Fetches
        OR CHARINDEX(N'USG Scans'         ,i.diagnostic) = 1
-- Diagnostic - Index - High Operations LOB Fetch
-- Diagnostic - Index - High Operations Orphan Create
-- Diagnostic - Index - High Operations Orphan Insert
        OR CHARINDEX(N'OPS LOB Fetch'     ,i.diagnostic) = 1
-- Diagnostic - Index - High Operations Overflow Fetch
-- Diagnostic - Index - High Operations Pull In Row
-- Diagnostic - Index - High Operations Push Off Row
        OR CHARINDEX(N'OPS Overflow Fetch',i.diagnostic) = 1
       )

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Added significant index metrics diagnostic records'
   RAISERROR(@debug,0,0) WITH NOWAIT;
   RAISERROR(N'          Start Buffer Cache index metric diagnostic records',0,0) WITH NOWAIT;
   SET @debug_DTTM = GETDATE();
END

/**************************************************************************************************/
-- UPDATE tempdb.dbo.SQLXL_Index_Compilation table with Diagnostics & Metrics
/**************************************************************************************************/
SET ANSI_WARNINGS ON;

UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON;
SELECT parent_object_id,object_id,index_id,
--*/
       Diagnostics         = STUFF((SELECT NCHAR(10) + f.diagnostic
                                         FROM tempdb.dbo.SQLXL_Index_Diagnostics AS f WITH (READUNCOMMITTED)
                                        WHERE tgt.database_id      = f.database_id
                                          AND tgt.parent_object_id = f.parent_object_id
                                          AND tgt.object_id        = f.object_id
                                          AND tgt.index_id         = f.index_id
                                          AND tgt.type             = f.type                 -- COLLATE DATABASE_DEFAULT
                                          AND 10                   > f.diagnostic_type_id   -- 10+ are metrics
                                          AND f.diagnostic        IS NOT NULL
                                        ORDER BY f.diagnostic_type_id
                                                ,f.diagnostic_ID
                                                ,f.diagnostic DESC
                                          FOR XML PATH(N''), TYPE
                                      ).value('(./text())[1]', 'NVARCHAR(MAX)')
                                      ,1,1,N''
                                     )
      ,Diagnostics_metrics = STUFF((SELECT NCHAR(10) + f.diagnostic
                                      FROM tempdb.dbo.SQLXL_Index_Diagnostics AS f WITH (READUNCOMMITTED)
                                     WHERE tgt.database_id      = f.database_id
                                       AND tgt.parent_object_id = f.parent_object_id
                                       AND tgt.object_id        = f.object_id
                                       AND tgt.index_id         = f.index_id
                                       AND tgt.type             = f.type                 -- COLLATE DATABASE_DEFAULT
                                       AND 10                  <= f.diagnostic_type_id   -- 10+ are metrics
                                       AND f.diagnostic        IS NOT NULL
                                     ORDER BY f.diagnostic_type_id
                                             ,f.diagnostic_ID
                                             ,f.diagnostic_max_pct DESC
                                       FOR XML PATH(N''), TYPE
                                   ).value('(./text())[1]', 'NVARCHAR(MAX)')
                                   ,1,1,N''
                                  )
  FROM tempdb.dbo.SQLXL_Index_Compilation AS tgt;

IF @ssms > 0 BEGIN -- display status to SSMS Messages tab
   SET @debug = tempdb.dbo.SQLXL_DTTM_HMSM(DATEADD(ms,DATEDIFF(ms,@debug_DTTM,GETDATE()),0))
               +N' Added Buffer Cache index metric diagnostic records'
   RAISERROR(@debug,0,0) WITH NOWAIT;
END

GO -- end of stored procedure/function/T-SQL script/CREATE VIEW/CREATE VIEW - SQLXL_Index

RAISERROR ('Creating procedure tempdb.dbo.SQLXL_Index_Present ...',0,0) WITH NOWAIT;

/******************************************************************************************************************************************/
-- Session Environment settings
/******************************************************************************************************************************************/
SET ANSI_NULL_DFLT_ON,ANSI_NULLS,ANSI_PADDING,ARITHABORT,CONCAT_NULL_YIELDS_NULL,CURSOR_CLOSE_ON_COMMIT,NOCOUNT,QUOTED_IDENTIFIER ON;
SET ANSI_WARNINGS,ARITHIGNORE,FMTONLY,FORCEPLAN,IMPLICIT_TRANSACTIONS,NOEXEC,NUMERIC_ROUNDABORT,XACT_ABORT OFF;
SET STATISTICS IO,PROFILE,TIME,XML OFF;
SET DATEFORMAT                  YMD;
SET DEADLOCK_PRIORITY           -10;  -- Lowest priority
SET LOCK_TIMEOUT              10000;  -- in milliseconds
SET QUERY_GOVERNOR_COST_LIMIT     0;  -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute.
SET TEXTSIZE             2147483647;  -- Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

-- Change to tempdb NOTE: tempdb must be lower case if server installed with CASE SENSITIVE collation
USE tempdb;

IF OBJECT_ID('dbo.SQLXL_Index_Present') IS NULL EXEC ('CREATE PROCEDURE dbo.SQLXL_Index_Present AS RETURN 0;');
GO

/*******************************************************************************************************************************************
PARAMETERS:
   @show_fulltext_internals
      0 = NO
      1 = YES - DEFAULT
NOTES:
- column headers/names with "|" (pipe) character code to identify numeric columns to be formatted:
  N  - numeric with no formatting
  N# - numeric with commas and # decimals
  E  - exponential formatting with no decimals (same as E0)
  E# - exponential formatting with # decimals
  P# - precent formatting with # decimals

- column headers/names with "\" (backslash) character code to identify numeric columns to be formatted with a COLOR SCALE:
  \B - NBR with TOP BAD
  \G - NBR with TOP GUD

- column headers/names with "!" (exclamation) character code to identify columns to be formatted BOLD:
  !H - Bold Font and bigger size

- column headers/names with "~" (tilda) character code to identify column label elements to be replaced with LINE FFED CHARW(10)

*******************************************************************************************************************************************/

ALTER PROCEDURE dbo.SQLXL_Index_Present
      (@show_fulltext_internals TINYINT = 1
      )
AS
/*** LOCAL TESTING
DECLARE @show_fulltext_internals TINYINT = 0
--*/
SET TEXTSIZE                  32767;  -- Max length of Excel cell contents

SELECT
--     TOP (3)
/******************************************************************************************************************************************/
--
/******************************************************************************************************************************************/
 [Priority\B|N0]          = IIF(i.rec_type IN (N'P'),i.tbl_priority_metric,NULL)
,[FLT *DRILL DOWN >>>|NW] =
                           -- Top Level
                           +CASE WHEN i.rec_type  = N'A'  -- All
                                 THEN i.rec_type 
                                 WHEN i.rec_type  = N'D'  -- Database
                                 THEN i.rec_type 
                                     +CAST(i.database_id AS NVARCHAR(10)) 
                                 WHEN i.rec_type  = N'P'  -- Parent Table/History Source
                                 THEN i.rec_type
                                     +CAST(i.database_id AS NVARCHAR(10)) 
                                     +N'.'
                                     +CAST(COALESCE(i.history_source_object_id,i.parent_object_id) AS NVARCHAR(10))
                                 ELSE N'T'                         -- Index
                                     +CAST(i.database_id AS NVARCHAR(10)) 
                                     +N'.'
                                     +CAST(COALESCE(i.history_source_object_id,i.parent_object_id) AS NVARCHAR(10))
                            END
                           -- Parent/History Table source table. "pipe" added to delimit drill down term in Excel filter
                           +IIF(i.rec_type NOT IN (N'A',N'D') -- All (Instance), Database
                               -- Type of "table". Parents/sources first, history seconds, internal third
                               ,N'|'
                               +CASE i.obj_type_short_label
                                     WHEN N'HST'  -- history table
                                     THEN N'3|' + RIGHT(N'0000000000'+CAST(i.object_id AS NVARCHAR(20)),10)
                                     WHEN N'IT'   -- system internal table
                                     THEN N'6|' + RIGHT(N'0000000000'+CAST(i.object_id AS NVARCHAR(20)),10) 
                                     ELSE N'1|'   -- origin/parent table, Clustered column store
                                END 
                               +IIF(i.rec_type IN (N'I')
                                   ,CASE RTRIM(i.type)
                                         WHEN N'0' THEN N'0' -- Heap
                                         WHEN N'1' THEN N'0' -- clustered rowstore
                                         WHEN N'5' THEN N'0' -- clustered columnstore
                                         WHEN N'6' THEN N'1' -- nonclustered columnstore
                                         ELSE RTRIM(i.type)
                                    END 
                                   +N'|'
                                   +IIF(TRY_CAST(i.type AS INT) IS NOT NULL
                                       ,RIGHT(N'000000000'+CAST(i.index_id AS NVARCHAR(20)),10)
                                       ,N'')
                                   +IIF(i.type = N'F'
                                       ,IIF(i.fkc_covered_by_idx_IDS IS NULL,N'U',N'C')
                                       +RIGHT(N'0000000000'+CAST(i.object_id AS NVARCHAR(20)),10)
                                       ,N'') -- Foreign Key index coverage
                                   +IIF(i.type = N'M'
                                       ,RIGHT(N'0000000000'+CAST(i.object_id AS NVARCHAR(20)),10)
                                       ,N'') -- Foreign Key index coverage
                                   ,N'')
                               ,N'')

/******************************************************************************************************************************************/
-- Records Types:
-- A - All sample/instance level
-- D - Database(s)
-- P - Parent object - rowstore table, clustered colunstore
-- S - internal table or system object
-- I - Index, foreign key, missing index, heap,
/******************************************************************************************************************************************/
,[Parent Type & Object Type~Object Properties & Index Type] =
--------------------------------------------------------------------------------------------------------------------------------------------
 CASE WHEN i.rec_type = N'A' THEN N'#ALL'
      WHEN i.rec_type = N'D' THEN N'#DB'
      WHEN i.rec_type = N'P' THEN N'*' + i.obj_type_label
      WHEN i.rec_type = N'H' THEN N'*' + i.obj_type_label
      WHEN i.rec_type = N'S' THEN N'>' + i.obj_type_label
      ELSE i.obj_type_label + IIF(i.type = N'F'
                                 ,IIF(i.fkc_covered_by_idx_IDS IS NULL,N' UNC',N' COV')  -- Foreign Key index coverage
                                 ,N'')
 END

/******************************************************************************************************************************************/
--
/******************************************************************************************************************************************/
,[Names~Database~Schema~Table~Index~FK Name of FK~REF sch.tbl.col~FLT Idx Filter~EP EXT Prop~OID Object IDs]
--------------------------------------------------------------------------------------------------------------------------------------------
-- Line 1 - Instance,Database
--------------------------------------------------------------------------------------------------------------------------------------------
=IIF(i.rec_type = N'A'
    ,N'Instance/Sample'
    ,N'DB '+ ISNULL(QUOTENAME(i.Database_name),N'<Database_name?>')   -- Database
    )
-- Schema -----------------------------------------------------------
+IIF(i.rec_type NOT IN (N'A',N'D')
    ,N' SCH ' + ISNULL(QUOTENAME(i.Schema_Name),N'<Schema_Name?>')
    ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
-- Line 2 - Parent Object (and Object if History or Internal Table)
--------------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.obj_type_short_label = N'HST'
    ,NCHAR(10) + N'PAR ' + QUOTENAME(op.schema_name)+N'.'+QUOTENAME(op.obj_name)
    ,N'')
+IIF(i.obj_type_short_label = N'IT'
    ,NCHAR(10) + N'PAR ' + QUOTENAME(i.parent_schema_name)+N'.'+QUOTENAME(i.parent_object_name)
    ,N'')
+IIF(i.rec_type NOT IN (N'A',N'D')
    ,NCHAR(10) + i.obj_type_short_label + N' ' + QUOTENAME(i.obj_name)
    ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
-- Line 3 Index
--------------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.rec_type = N'I'
    ,NCHAR(10) + ISNULL(i.type_short_desc,N'<type_short_desc>')
    +N' '+ ISNULL(QUOTENAME(CASE WHEN i.internal_type > 202 THEN i.obj_name
                                 ELSE i.name
                            END),N'<type_name?>')
    ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
 -- Line 4 - "Index" Special Properties
--------------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.rec_type = N'I'
    ,IIF(   i.is_primary_key = 1
         OR i.is_unique_constraint = 1
         OR i.is_unique = 1
         OR (i.type = N'1' AND i.is_unique = 0)
         OR i.has_filter = 1
         OR i.type IN (N'3',N'4')
         OR i.internal_type_desc IS NOT NULL
        ,NCHAR(10)
        +STUFF(IIF(i.is_primary_key = 1
                 ,N' PRIMARY KEY'
                 ,IIF(i.is_unique_constraint = 1
                     ,N' UNIQUE CONSTRAINT'
                     ,IIF(i.is_unique = 1
                         ,N' UNIQUE'
                         ,IIF(i.TYPE = N'1'
                             ,N' *NOT UNIQUE*'  -- special flag for CLUSTERED ROWSTORE
                             ,N'')
                         )
                     )
                 )
              +IIF(i.internal_type_desc IS NOT NULL,N' ' + i.internal_type_desc,N'')
              +IIF(i.has_filter = 1,N' FILTERED',N'')                     -- index filter
              +IIF(i.TYPE = N'3'                                          -- XML
                  ,N' '+ ISNULL(i.sub_type_desc,N'<sub_type_desc>')
                  ,N'')
              +IIF(i.TYPE = N'4'                                          -- spatial
                  ,N' '     + ISNULL(i.sub_type_desc,N'<sub_type_desc>')
                  +N' SCH: '+ ISNULL(i.si_tessellation_scheme,N'<i.si_tessellation_scheme?>')
                  ,N'')
              ,1,1,N'')
        ,N'')
    ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
 -- Line 5 - Object IDs for all objects
--------------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.rec_type IN (N'A')
    ,N''
    ,NCHAR(10))
+IIF(i.rec_type NOT IN (N'A')
    ,N'OID DB '+ ISNULL(QUOTENAME(i.database_id),N'<database_id?>')
    ,N'')
+IIF(i.rec_type NOT IN (N'A',N'D')
    ,IIF(i.obj_type_short_label IN (N'HST',N'IT')
        ,N' PAR ' + QUOTENAME(COALESCE(i.history_source_object_id,i.parent_object_id,N'<parent_object_id?>'))
        ,N'')
    ,N'')
+IIF(i.rec_type NOT IN (N'A',N'D')
    ,IIF(i.obj_type_hdr NOT IN (N'TBL FKC')
        ,ISNULL(N' ' + i.obj_type_short_label + N' ',N' <OSTL> ') + ISNULL(QUOTENAME(i.object_id),N'<object_id?>')
        ,N' TBL '                                                 + ISNULL(QUOTENAME(i.parent_object_id),N'<parent_object_id?>')
        )
    ,N'')
+IIF(i.rec_type IN (N'I')
    ,IIF(i.type = N'F'
        ,N' FKC '
        ,N' IDX ')
    +ISNULL(QUOTENAME(i.Index_ID),N'<index_id?>')
    ,N'')

/******************************************************************************************************************************************/
--
/******************************************************************************************************************************************/
,[Actions]              = i.prescription

/******************************************************************************************************************************************/
--
/******************************************************************************************************************************************/
,[diagnostics]             = LEFT(IIF(    @show_fulltext_internals = 0
                                      AND i.type_desc = N'FULL TEXT'
                                     ,N'[FULLTEXT INDEX INTERNALS NOT INCLUDED]'+NCHAR(10)
                                     ,N'')
                                 +i.[diagnostics]
                                 ,32767)

/******************************************************************************************************************************************/
--
/******************************************************************************************************************************************/
,[Idx Element Uniqueness~Stats Density X RowCount~F = Filtered~(%) of Table Rows]
                        = i.element_uniqueness
,[Columns~CX(#) Clustered Idx&Key~Name~Type+bytes~Identity & attributes~ANSI settings~Partition~(Uniqueness)~Statistics Steps]
                        = i.key_column_info
                         +IIF(i.Included_column_info IS NOT NULL
                             ,IIF(i.TYPE IN (N'2',N'5',N'M')
                                 ,NCHAR(10) +N'-- Included --------------------------'
                                 ,N'')
                             +NCHAR(10) +i.Included_column_info
                             ,N'')
,[Index Synergies~Sequence,Overlap,Keys]
                        = i.Overlap_Code

/******************************************************************************************************************************************/
--
/******************************************************************************************************************************************/
,[Index~RSZ Rsrvd size (%Tbl)~BSZ Buffer size (%Rsrv)~Tbl ROW Rows COL cols~LEN Wor Length~FCT Factor & Pad~Idx KEY Cnt & Len]
=CASE WHEN i.obj_type IN (N'FT',N'IF',N'TF')
      THEN N'TVF No data'  -- table functions w/o indexes have no stats other than PLAN CACHE

      WHEN i.is_disabled = 1
      THEN N'*Disabled*'

      WHEN i.type = N'F'
      THEN N'KEY '
          + tempdb.dbo.SQLXL_3SD(i.Key_Columns_CNT ,N'I')
          +N' LEN '
          +tempdb.dbo.SQLXL_3SD(i.key_Total_datatype_length_bytes,N'I') + N'B'

      WHEN i.type = N'M'
      THEN N'KEY '
          +tempdb.dbo.SQLXL_3SD(i.Key_Columns_CNT,N'I')
          +N' LEN '
          +tempdb.dbo.SQLXL_3SD(i.key_Total_datatype_length_bytes,N'I') + N'B'
          +NCHAR(10)
          +N'INC '
          +tempdb.dbo.SQLXL_3SD(i.Included_Columns_CNT,N'I')
          +N' LEN '
          +tempdb.dbo.SQLXL_3SD(i.inc_Total_datatype_length_bytes,N'I') + N'B'

      ELSE -- Table, index Reserved size
           N'RSZ '
          +IIF(i.xtp_allocated_bytes_CNT > 0
              ,tempdb.dbo.SQLXL_3SD(i.xtp_allocated_bytes_CNT,N'B')
              +CASE WHEN p.xtp_allocated_bytes_CNT > 0
                    THEN N' ('+tempdb.dbo.SQLXL_3SD(1.0 * i.xtp_allocated_bytes_CNT / p.xtp_allocated_bytes_CNT,N'%')+N')'
                    ELSE N''
               END
              ,tempdb.dbo.SQLXL_3SD(ISNULL(i.reserved_page_CNT,0),N'P')  -- for TABLE PARENT level includes indexes & INTENRAL TABLES
              +CASE WHEN i.rec_type = N'I' 
                     AND raw.reserved_page_CNT > 0
                    THEN N' ('+tempdb.dbo.SQLXL_3SD(1.0 * i.reserved_page_CNT / raw.reserved_page_CNT,N'%')+N')'
                    ELSE N''
               END)
           --------------------------------------------------------------------------------------------------------------
          +NCHAR(10)
          +N'BSZ ' + tempdb.dbo.SQLXL_3SD(ISNULL(i.buffer_Total_KB_CNT,0),N'KB')
          +CASE WHEN i.reserved_page_CNT > 0
                THEN N' ('+tempdb.dbo.SQLXL_3SD(ISNULL(1.0 * i.buffer_Total_KB_CNT / (i.reserved_page_CNT*8.0),0),N'%')+N')'
                ELSE N''
           END
           --------------------------------------------------------------------------------------------------------------
          +NCHAR(10) + N'ROW ' + tempdb.dbo.SQLXL_3SD(i.row_CNT,'I') + IIF(i.has_filter = 1,N'(F)',N'')
                     + IIF(i.rec_type IN (N'H',N'P',N'S')
                          ,N' COL '+tempdb.dbo.SQLXL_3SD(p.tbl_column_CNT,'I')
                          +NCHAR(10)+N'AVG '+IIF(i.row_CNT > 0,tempdb.dbo.SQLXL_3SD(i.tbl_row_size_byte_AVG,'B'),N'MT')
                          ,N'')
           --------------------------------------------------------------------------------------------------------------
          +IIF(i.rec_type = N'I'
              ,NCHAR(10) + N'KEY '  + tempdb.dbo.SQLXL_3SD(i.Key_Columns_CNT ,N'I')
                         + N' LEN ' + tempdb.dbo.SQLXL_3SD(i.key_Total_datatype_length_bytes,N'I') + N'B'
              +NCHAR(10) + N'INC '  + tempdb.dbo.SQLXL_3SD(i.Included_Columns_CNT,N'I')
                                    + IIF(i.Included_Columns_CNT > 0
                                         ,N' LEN '+tempdb.dbo.SQLXL_3SD(i.inc_Total_datatype_length_bytes,N'I') + N'B'
                                         ,N'')
               --------------------------------------------------------------------------------------------------------------
              +NCHAR(10) +N'FCT ' + CASE WHEN i.TYPE = N'0' THEN N'HEAP'
                                         WHEN TRY_CAST(i.TYPE AS INT) > 0
                                         THEN ISNULL(tempdb.dbo.SQLXL_3SD(i.fill_factor,N'I') + N'%',N'<??>')
                                             +N' PAD '+ ISNULL(CASE i.is_padded WHEN 0 THEN N'No' WHEN 1 THEN N'Yes' ELSE N'' END,N'<??>')
                                         ELSE N'N/A'
                                    END
              ,N'')
 END

/******************************************************************************************************************************************/
--
/******************************************************************************************************************************************/
,[Total Use (%Nxt Lvl)~OPS/CMP TOT CNT~USR USG Contact TOT CNT~R/W OPS & USG Read/Write~WTC Wait CNT~WTS Wait SEC~LCK Lock CNT]
=CASE WHEN i.obj_type = N'V' AND i.type = N'0'              -- views without indexes don't record any usage stats other than in PLAN CACHE
      THEN N'View Heap'  + NCHAR(10) + N'No data'
      WHEN i.obj_type = N'F'                   THEN N'Foreign Key'+NCHAR(10) +N'No data'
      ELSE N'OPS '                                                       -- everything else
          +tempdb.dbo.SQLXL_3SD(ISNULL(i.ops_Total_contacts_CNT,0),'I')
          +CASE WHEN CASE i.rec_type WHEN N'P' THEN d.ops_Total_contacts_CNT
                                     WHEN N'H' THEN d.ops_Total_contacts_CNT
                                     WHEN N'S' THEN d.ops_Total_contacts_CNT
                                     WHEN N'I' THEN p.ops_Total_contacts_CNT
                                     ELSE           a.ops_Total_contacts_CNT
                     END > 0
                 AND i.ops_Total_contacts_CNT > 0
                THEN N' '
                    +N'('+tempdb.dbo.SQLXL_3SD(1.0 * i.ops_Total_contacts_CNT / CASE i.rec_type
                                                                                     WHEN N'P' THEN d.ops_Total_contacts_CNT
                                                                                     WHEN N'H' THEN d.ops_Total_contacts_CNT
                                                                                     WHEN N'S' THEN d.ops_Total_contacts_CNT
                                                                                     WHEN N'I' THEN p.ops_Total_contacts_CNT
                                                                                     ELSE           a.ops_Total_contacts_CNT
                                                                                END,N'%')+N')'
                ELSE N''
           END
           --------------------------------------------------------------------------------------------------------------
          +NCHAR(10)
          +CASE i.type
                WHEN N'M'                                                                  -- Missing Index
                THEN N'MIX '
                    +tempdb.dbo.SQLXL_3SD(i.mix_unique_compiles_CNT,N'I')
                    +CASE WHEN CASE i.rec_type WHEN N'P' THEN d.ius_user_total_cnt
                                               WHEN N'H' THEN d.ius_user_total_cnt
                                               WHEN N'S' THEN d.ius_user_total_cnt
                                               WHEN N'I' THEN p.ius_user_total_cnt
                                               ELSE           a.ius_user_total_cnt
                               END > 0
                           AND i.mix_unique_compiles_CNT > 0
                          THEN N' '
                              +N'('+tempdb.dbo.SQLXL_3SD(1.0 * i.mix_unique_compiles_CNT / CASE i.rec_type
                                                                                                WHEN N'P' THEN d.ius_user_total_cnt
                                                                                                WHEN N'H' THEN d.ius_user_total_cnt
                                                                                                WHEN N'S' THEN d.ius_user_total_cnt
                                                                                                WHEN N'I' THEN p.ius_user_total_cnt
                                                                                                ELSE           a.ius_user_total_cnt
                                                                                           END,N'%')+N')'
                          ELSE N''
                     END
                ELSE N'USG '
                    +CASE WHEN i.type = N'F'                        THEN N'N/A'
                          WHEN i.obj_type = N'V'  AND i.type = N'0' THEN N'N/A'
                          ELSE tempdb.dbo.SQLXL_3SD(ISNULL(i.ius_user_Total_CNT,0),'I')
                              +CASE WHEN CASE i.rec_type WHEN N'P' THEN d.ius_user_Total_CNT
                                                         WHEN N'H' THEN d.ius_user_Total_CNT
                                                         WHEN N'S' THEN d.ius_user_Total_CNT
                                                         WHEN N'I' THEN p.ius_user_Total_CNT
                                                         ELSE           a.ius_user_Total_CNT
                                         END > 0
                                     AND i.ius_user_Total_CNT > 0
                                    THEN N' ('+tempdb.dbo.SQLXL_3SD(1.0 * i.ius_user_Total_CNT / CASE i.rec_type
                                                                                                      WHEN N'P' THEN d.ius_user_Total_CNT
                                                                                                      WHEN N'H' THEN d.ius_user_Total_CNT
                                                                                                      WHEN N'S' THEN d.ius_user_Total_CNT
                                                                                                      WHEN N'I' THEN p.ius_user_Total_CNT
                                                                                                      ELSE           a.ius_user_Total_CNT
                                                                                                 END,N'%')+N')'
                                    ELSE N''
                               END
                     END
           END
           --------------------------------------------------------------------------------------------------------------
          +NCHAR(10)
          +N'RW OPS '
          +CASE WHEN i.ops_Total_write_CNT >  0
                 AND i.ops_Total_read_CNT  >  0
                THEN tempdb.dbo.SQLXL_3SD(1.0 * i.ops_Total_read_CNT / i.ops_Total_write_CNT,N'N')
                WHEN i.ops_Total_write_CNT > 0 AND i.ops_Total_read_CNT = 0 THEN N'wrt'
                WHEN i.ops_Total_write_CNT = 0 AND i.ops_Total_read_CNT > 0 THEN N'rds'
                ELSE N'ntx'
           END --COLLATE DATABASE_DEFAULT
          +N' USG '
          +CASE WHEN i.ius_user_updates_CNT > 0
                 AND i.ius_User_read_CNT    > 0
                THEN tempdb.dbo.SQLXL_3SD(1.0 * i.ius_User_read_CNT / i.ius_user_updates_CNT,N'N')
                WHEN i.ius_user_updates_CNT > 0 AND i.ius_User_read_CNT = 0 THEN N'wrt'
                WHEN i.ius_user_updates_CNT = 0 AND i.ius_User_read_CNT > 0 THEN N'rds'
                ELSE N'ntx'
           END
           --------------------------------------------------------------------------------------------------------------
          +NCHAR(10)
          +N'WTC '
          +CASE WHEN i.type IN (N'F',N'M')               THEN N'N/A'
                WHEN i.obj_type = N'V' AND i.type = N'0' THEN N'N/A'
                ELSE tempdb.dbo.SQLXL_3SD(i.ios_Total_wait_CNT,'I')
                    +CASE WHEN CASE i.rec_type WHEN N'I' THEN p.ios_Total_wait_CNT
                                               WHEN N'D' THEN a.ios_Total_wait_CNT
                                               ELSE           d.ios_Total_wait_CNT
                               END > 0
                           AND i.ios_Total_wait_CNT > 0
                          THEN N' ('+tempdb.dbo.SQLXL_3SD(1.0 * i.ios_Total_wait_CNT / CASE i.rec_type
                                                                                           WHEN N'I' THEN p.ios_Total_wait_CNT
                                                                                           WHEN N'D' THEN a.ios_Total_wait_CNT
                                                                                           ELSE           d.ios_Total_wait_CNT
                                                                                       END,N'%')+N')'
                          ELSE IIF(i.ios_Total_wait_CNT = 0,N'(0.00%)',N'<?>')
                     END
           END
           --------------------------------------------------------------------------------------------------------------
          +NCHAR(10)
          +N'WTS '
          +CASE WHEN i.type IN (N'F',N'M')
                THEN N'N/A'
                WHEN i.obj_type = N'V' AND i.type = N'0'
                THEN N'N/A'
                ELSE tempdb.dbo.SQLXL_3SD(i.ios_Total_wait_MS_CNT,'ms')
                    +CASE WHEN CASE i.rec_type WHEN N'P' THEN d.ios_Total_wait_MS_CNT
                                               WHEN N'H' THEN d.ios_Total_wait_MS_CNT
                                               WHEN N'S' THEN d.ios_Total_wait_MS_CNT
                                               WHEN N'I' THEN p.ios_Total_wait_MS_CNT
                                               ELSE           a.ios_Total_wait_MS_CNT
                               END > 0
                           AND i.ios_Total_wait_MS_CNT > 0
                          THEN N' ('+tempdb.dbo.SQLXL_3SD(1.0 * i.ios_Total_wait_MS_CNT / CASE i.rec_type
                                                                                               WHEN N'P' THEN d.ios_Total_wait_MS_CNT
                                                                                               WHEN N'H' THEN d.ios_Total_wait_MS_CNT
                                                                                               WHEN N'S' THEN d.ios_Total_wait_MS_CNT
                                                                                               WHEN N'I' THEN p.ios_Total_wait_MS_CNT
                                                                                               ELSE a.ios_Total_wait_MS_CNT
                                                                                          END,N'%')+N')'
                          ELSE IIF(i.ios_Total_wait_MS_CNT = 0,N'(0.00%)',N'<?>')
                     END
           END
           --------------------------------------------------------------------------------------------------------------
          +NCHAR(10)
          +N'LCK '
          +CASE WHEN i.type IN (N'F',N'M')               THEN N'N/A'
                WHEN i.obj_type = N'V' AND i.type = N'0' THEN N'N/A'
                ELSE tempdb.dbo.SQLXL_3SD(i.ios_Total_Lock_CNT,'I')
                    +CASE WHEN CASE i.rec_type WHEN N'P' THEN d.ios_Total_Lock_CNT
                                               WHEN N'H' THEN d.ios_Total_Lock_CNT
                                               WHEN N'S' THEN d.ios_Total_Lock_CNT
                                               WHEN N'I' THEN p.ios_Total_Lock_CNT
                                               ELSE           a.ios_Total_Lock_CNT
                               END > 0
                           AND i.ios_Total_Lock_CNT > 0
                          THEN N' ('+tempdb.dbo.SQLXL_3SD(1.0 * i.ios_Total_Lock_CNT / CASE i.rec_type
                                                                                           WHEN N'P' THEN d.ios_Total_Lock_CNT
                                                                                           WHEN N'H' THEN d.ios_Total_Lock_CNT
                                                                                           WHEN N'S' THEN d.ios_Total_Lock_CNT
                                                                                           WHEN N'I' THEN p.ios_Total_Lock_CNT
                                                                                           ELSE a.ios_Total_Lock_CNT
                                                                                       END,N'%')+N')'
                          ELSE IIF(i.ios_Total_Lock_CNT = 0,N'(0.00%)',N'<?>')
                     END
           END
 END

/******************************************************************************************************************************************/
--
/******************************************************************************************************************************************/
,[Statistics~STP Steps~SMP Sample% Persisted%~MOD Modifications(%)~UPD Days Since Update~SNF Parm Sniffing~FLT Filtered STR String]
= CASE
      WHEN i.rec_type IN (N'A',N'D',N'P',N'H',N'S')                 THEN NULL
      WHEN i.obj_type = N'V' AND i.type = N'0'        -- views without indexes don't record usage stats other than PLAN CACHE
      THEN N'View Heap n/a'
      WHEN i.obj_type = N'F'                                   THEN N'Foreign Key n/a' -- Foreign Key Constraints have no statistics
      WHEN i.obj_type IN (N'FT',N'IF',N'TF') AND i.type = N'0' -- table functions without indexes have no stats other than in PLAN CACHE
      THEN N'TVF HEAP n/a'

      WHEN i.stathdr_Updated IS NOT NULL
      THEN             N'STP ' + IIF(i.stathdr_steps IS NULL,N'<??>',tempdb.dbo.SQLXL_3SD(i.stathdr_steps,N'I'))
                     + N' SNF ' + CASE WHEN i.rec_type = N'I'
                                       THEN CASE WHEN i.Lead_Element_is_Identity = 1
                                                 THEN N'IDN'
                                                 WHEN i.Lead_Element_is_Sequence = 1
                                                 THEN N'SEQ'
                                                 WHEN i.Lead_Element_is_newsequentialid = 1
                                                 THEN N'SUID'
                                                 WHEN i.stathist_range_rows_LO > 0.0
                                                 THEN tempdb.dbo.SQLXL_3SD(i.stathist_param_sniff,N'N')+N'x'
                                                 ELSE N'N/A'
                                            END
                                       ELSE N'N/A'
                                  END

          +NCHAR(10) + N'SMP ' + IIF(i.stathdr_Rows_CNT > 0
                                    ,tempdb.dbo.SQLXL_3SD(1.0 * i.stathdr_Rows_sampled_CNT / i.stathdr_Rows_CNT,'%')
                                    ,N'N/A')
                     + N' PST ' + IIF(i.stathdr_Persisted_Sample_Percent > 0
                                     ,tempdb.dbo.SQLXL_3SD(i.stathdr_Persisted_Sample_Percent,N'I') + N'%'
                                     ,N'N/A')

          +NCHAR(10) + N'MOD ' + IIF(TRY_CAST(i.type AS INT) > 0
                                    ,ISNULL(tempdb.dbo.SQLXL_3SD(i.Stats_Prop_modification_CNT,N'I'),N'<??>')
                                    ,N'')
                               + IIF(i.Row_CNT > 0
                                    ,N' (' + tempdb.dbo.SQLXL_3SD(1.0 * i.Stats_Prop_modification_CNT / i.Row_CNT,N'%') + N')'
                                    ,N'')

          +NCHAR(10) + N'UPD ' + ISNULL(tempdb.dbo.SQLXL_3SD(DATEDIFF(DAY,i.stathdr_Updated,sp.collection_DTTM),N'I')+N' days',N'')

          +NCHAR(10) + N'FLT ' + IIF(i.stats_has_filter = 1,N'Yes',IIF(i.stats_has_filter = 0,N'No',N''))
                     + N' STR ' + IIF(   i.lead_element_data_type LIKE N'%CHAR%'
                                      OR i.lead_element_data_type LIKE N'%TEXT%'
                                     ,ISNULL(RTRIM(i.stathdr_String_Index),N'<?>')
                                     ,N'N/A')

          +NCHAR(10) + N'LEN ' + IIF(i.stathdr_Average_Key_Length > 0
                                    ,CAST(i.stathdr_Average_Key_Length AS NVARCHAR(20))
                                    ,IIF(i.key_Total_datatype_length_bytes > 0
                                         ,CAST(i.key_Total_datatype_length_bytes    AS NVARCHAR(20))
                                         ,N'<??>'))
                     + N' NUL ' + IIF(CAST(i.type AS INT) IS NOT NULL
                                     ,tempdb.dbo.SQLXL_3SD(i.stathist_null_rows,N'I')
                                     ,N'N/A')

      ELSE N'No data'
  END

-- Lead Element & Size
-- key total length

/******************************************************************************************************************************************/
--
/******************************************************************************************************************************************/
,[Metrics
% of Instance Totals
#Rank within Index/Parent] = LEFT(i.[diagnostics_Metrics],32767)

/******************************************************************************************************************************************/
-- Honkers
/******************************************************************************************************************************************/
,[Foreign Key Constraint reference]
       = IIF(i.type = N'F'
            ,ISNULL(i.fkc_reference,N'<fkc_reference?>')             -- Referenced schema+table+column(s)
            +NCHAR(10)
            +N'OID DB ' + QUOTENAME(i.database_id)                                                   -- Referenced Database ID
            +N' TBL '   + ISNULL(QUOTENAME(i.fkc_referenced_object_id),N'fkc_referenced_object_id?') -- Referenced Table ID
            +N' IDX '   + ISNULL(QUOTENAME(i.fkc_referenced_index_id) ,N'fkc_referenced_index_id?')  -- Referenced Index ID
            ,NULL)
,[Constraints & Computed~CHK-Check, Key, DEF-Default~CCOL-Computed Column~Index Filters]
                        = STUFF(IIF(i.constraints IS NOT NULL
                                   ,NCHAR(10) + i.constraints
                                   ,N'')
                               +IIF(i.has_filter = 1
                                   ,NCHAR(10) + N'FLT:' + i.filter_definition
                                   ,N'')
                               ,1,1,N'')
,[Statistics Names~& Filters]
                        = STUFF(IIF(LTRIM(RTRIM(i.filter_definition)) > N''
                                   ,NCHAR(10) +N'FLT:'+CAST(i.filter_definition AS NVARCHAR(4000))
                                   ,N'')
                               +NCHAR(10) +i.stats_Name
                               ,1,1,N'')

/******************************************************************************************************************************************/
-- Table Logical & Physical File Info
/******************************************************************************************************************************************/
,[Table File & Partitions] =
 CASE WHEN i.Type = N'U'
      THEN STUFF(--
                 CASE WHEN p.data_space_id         > 0
                      THEN NCHAR(10) +N'Data Space'+N' '+QUOTENAME(i.data_space_name)
                          +N' '+N'('+CAST(i.data_space_id AS NVARCHAR(20))+N')'
                      ELSE N''
                 END --COLLATE DATABASE_DEFAULT
                 --
                +CASE WHEN p.data_space_logical_filename IS NOT NULL
                      THEN NCHAR(10) +N'Logical file name' +N' '+QUOTENAME(i.data_space_logical_filename)
                      ELSE N''
                 END --COLLATE DATABASE_DEFAULT
                 --
                +CASE WHEN p.data_space_logical_filename IS NOT NULL
                      THEN NCHAR(10) +N'Logical file name' +N' '+QUOTENAME(i.data_space_logical_filename)
                      ELSE N''
                 END --COLLATE DATABASE_DEFAULT
                 --
                +CASE WHEN p.partition_Column_ID   > 0
                      THEN NCHAR(10) +N'Partition COLUMN' +N' '+QUOTENAME(p.partition_Column_Name)
                          + N' '+N'('+CAST(p.partition_Column_ID AS NVARCHAR(20))+N')'
                      ELSE N''
                 END --COLLATE DATABASE_DEFAULT
                 --
                +CASE WHEN p.partition_schemes_name      IS NOT NULL
                      THEN NCHAR(10) +N'Partition scheme'  + N' '+QUOTENAME(p.partition_schemes_name)
                      ELSE N''
                 END --COLLATE DATABASE_DEFAULT
                 --
                +CASE WHEN p.partition_function_id > 0
                      THEN NCHAR(10) +N'Partition function' + N' '+QUOTENAME(p.partition_function_name)
                          +N' '+N'('+CAST(p.partition_function_id  AS NVARCHAR(20))+N')'
                      ELSE N''
                 END --COLLATE DATABASE_DEFAULT
                ,1,1,N'')
      ELSE N''
 END
-------------------------------------------------------------------------------------
,[Extended Properties]  = i.extended_properties

/******************************************************************************************************************************************/
--Table Priority Metrics
/******************************************************************************************************************************************/
,[Table OPS Wait TM!H\B|N0]
                        = IIF(    i.rec_type IN (N'P',N'H') AND a.ios_Total_wait_MS_CNT > 0
                             ,100.0 * i.ios_Total_wait_MS_CNT / a.ios_Total_wait_MS_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table OPS Wait CNT!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')  AND a.ios_Total_wait_CNT > 0
                             ,100.0 * i.ios_Total_wait_CNT / a.ios_Total_wait_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table OPS Locks CNT!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')  AND a.ios_Total_Lock_CNT > 0
                             ,100.0 * i.ios_Total_Lock_CNT / a.ios_Total_Lock_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table OPS Lock Promo!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')              AND a.ios_lock_promotion_attempt_CNT > 0
                             ,100.0 * i.ios_lock_promotion_attempt_CNT / a.ios_lock_promotion_attempt_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table OPS Promo Fail!H\B|N0]
                        = IIF(    i.rec_type IN (N'P',N'H') 
                              AND a.ios_lock_promotion_attempt_CNT > 0
                             ,100.0 * (i.ios_lock_promotion_attempt_CNT - i.ios_lock_promotion_CNT)
                                    / A.ios_lock_promotion_attempt_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
----------------------------------------------
,[Table OPS Page Split!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')        AND a.ops_Total_page_split_CNT > 0
                             ,100.0 * i.ops_Total_page_split_CNT / a.ops_Total_page_split_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table OPS Splits to Write PCT!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H') AND i.page_splits_to_write_PCT > 0.0
                             ,i.page_splits_to_write_PCT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table OPS Page Merge!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')        AND a.ops_Total_page_merge_CNT > 0
                             ,100.0 * i.ops_Total_page_merge_CNT / a.ops_Total_page_merge_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table OPS Merge to Write PCT!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H') AND i.page_Merge_to_write_PCT > 0.0
                             ,i.page_Merge_to_write_PCT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
----------------------------------------------
,[Table MIX Advantage Weighted!H\G|N0]
                        = IIF(    i.rec_type IN (N'P',N'H')      AND a.mix_Advantage_weighted_AMT > 0  
                              AND i.mix_Advantage_weighted_AMT > 0
                             ,100.0 * i.mix_Advantage_weighted_AMT / a.mix_Advantage_weighted_AMT
                             ,NULL)
,[Table MIX Advantage!H\G|N0]
                        = IIF(    i.rec_type IN (N'P',N'H') AND a.mix_Advantage_AMT > 0
                              AND i.mix_Advantage_AMT > 0
                             ,100.0 * i.mix_Advantage_AMT / a.mix_Advantage_AMT
                             ,NULL)
----------------------------------------------
,[Table OPS Writes!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')   AND a.ops_Total_write_CNT > 0
                             ,100.0 * i.ops_Total_write_CNT / a.ops_Total_write_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table USG Writes!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')    AND a.ius_user_updates_CNT > 0
                             ,100.0 * i.ius_user_updates_CNT / a.ius_user_updates_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
----------------------------------------------
,[Table BUF Percent in Buffer!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')
                             ,CASE WHEN tbl.is_memory_optimized = 1 AND i.buffer_Total_KB_CNT > 0.0
                                   THEN 100
                                   WHEN i.reserved_page_CNT > 0
                                   THEN 100.0 * i.buffer_Total_KB_CNT / (i.reserved_page_CNT * 8.0)
                                   ELSE NULL
                              END
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
----------------------------------------------
,[Table OPS R/W Ratio!H\G|N0]
                        = IIF(    i.rec_type IN (N'P',N'H')
                              AND i.ops_Total_write_CNT > 0
                             ,IIF(i.ops_Total_read_CNT / i.ops_Total_write_CNT < 100
                                 ,1.0 * i.ops_Total_read_CNT / i.ops_Total_write_CNT
                                 ,99)
                             ,NULL) -- show NULL if no writes found
,[Table USG R/W Ratio!H\G|N0]
                        = IIF(    i.rec_type IN (N'P',N'H')
                              AND i.ius_user_updates_CNT > 0
                             ,IIF(i.ius_User_read_CNT / i.ius_user_updates_CNT < 100
                                 ,1.0 * i.ius_User_read_CNT / i.ius_user_updates_CNT
                                 ,99)
                             ,NULL) -- show NULL if no writes found
----------------------------------------------
,[Table OPS Reads PCT!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')  AND a.ops_Total_read_CNT > 0
                             ,100.0 * i.ops_Total_read_CNT / a.ops_Total_read_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table OPS Scans PCT!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')  AND a.ops_Total_scan_cnt > 0
                             ,100.0 * i.ops_Total_scan_cnt / a.ops_Total_scan_cnt
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table OPS Lookups PCT!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')        AND a.ios_singleton_lookup_CNT > 0
                             ,100.0 * i.ios_singleton_lookup_CNT / a.ios_singleton_lookup_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table OPS Forwarded Fetch!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')       AND a.ios_forwarded_fetch_CNT > 0
                             ,100.0 * i.ios_forwarded_fetch_CNT / a.ios_forwarded_fetch_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
----------------------------------------------
,[Table USG Reads PCT!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H') AND a.ius_user_read_CNT > 0
                             ,100.0 * i.ius_User_read_CNT / a.ius_user_read_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table USG Scans PCT!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')  AND a.ius_user_scans_CNT > 0
                             ,100.0 * i.ius_user_scans_CNT / a.ius_user_scans_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
,[Table USG Lookups PCT!H\B|N0]
                        = IIF(i.rec_type IN (N'P',N'H')    AND a.ius_user_lookups_CNT > 0
                             ,100.0 * i.ius_user_lookups_CNT / a.ius_user_lookups_CNT
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))
----------------------------------------------
,[Table OPS LOB Contacts PCT!H\B|N0]
                        = IIF(    i.rec_type IN (N'P',N'H')
                              AND     ( a.ios_lob_fetch_pages_CNT
                                      + a.ios_lob_orphan_create_CNT
                                      + a.ios_lob_orphan_insert_CNT
                                      + a.ios_row_overflow_fetch_in_pages_CNT
                                      + a.ios_column_value_pull_in_row_CNT
                                      + a.ios_column_value_push_off_row_CNT
                                      ) > 0
                             ,100.0 * ( i.ios_lob_fetch_pages_CNT
                                      + i.ios_lob_orphan_create_CNT
                                      + i.ios_lob_orphan_insert_CNT
                                      + i.ios_row_overflow_fetch_in_pages_CNT
                                      + i.ios_column_value_pull_in_row_CNT
                                      + i.ios_column_value_push_off_row_CNT
                                      )
                                   /  ( a.ios_lob_fetch_pages_CNT
                                      + a.ios_lob_orphan_create_CNT
                                      + a.ios_lob_orphan_insert_CNT
                                      + a.ios_row_overflow_fetch_in_pages_CNT
                                      + a.ios_column_value_pull_in_row_CNT
                                      + a.ios_column_value_push_off_row_CNT
                                      )
                             ,IIF(i.rec_type NOT IN (N'P',N'H'),NULL,0))

/******************************************************************************************************************************************/
--Index Priority Metrics
/******************************************************************************************************************************************/
,[Index OPS Wait TM!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ios_Total_wait_MS_CNT > 0
                                 ,100.0 * i.ios_Total_wait_MS_CNT / p.ios_Total_wait_MS_CNT
                                 ,0)
                             ,NULL)
,[Index OPS Wait CNT!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ios_Total_wait_CNT > 0
                                 ,100.0 * i.ios_Total_wait_CNT / p.ios_Total_wait_CNT
                                 ,0)
                             ,NULL)
,[Index OPS Locks CNT!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ios_Total_Lock_CNT > 0
                                 ,100.0 * i.ios_Total_Lock_CNT / p.ios_Total_Lock_CNT
                                 ,0)
                             ,NULL)
,[Index OPS Lock Promo!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ios_lock_promotion_attempt_CNT > 0
                                 ,100.0 * i.ios_lock_promotion_attempt_CNT / p.ios_lock_promotion_attempt_CNT
                                 ,0)
                             ,NULL)
,[Index OPS Promo Fail!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ios_lock_promotion_attempt_CNT > 0
                                 ,100.0 * (i.ios_lock_promotion_attempt_CNT - i.ios_lock_promotion_CNT) / p.ios_lock_promotion_attempt_CNT
                                 ,0)
                             ,NULL)
----------------------------------------------
,[Index OPS Page Split!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ops_Total_page_split_CNT > 0
                                 ,100.0 * i.ops_Total_page_split_CNT / p.ops_Total_page_split_CNT
                                 ,0)
                             ,NULL)
,[Index OPS Splits to Write PCT!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(i.ops_Total_write_CNT > 0
                                 ,i.page_splits_to_write_PCT
                                 ,0)
                             ,NULL)
,[Index OPS Page Merge!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ops_Total_page_merge_CNT > 0
                                 ,100.0 * i.ops_Total_page_merge_CNT / p.ops_Total_page_merge_CNT
                                 ,0)
                             ,NULL)
,[Index OPS Merges to Write PCT!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(i.ops_Total_write_CNT > 0
                                 ,i.page_Merge_to_write_PCT
                                 ,0)
                             ,NULL)
----------------------------------------------
,[Index MIX Advantage Weighted!H\G|N0]
                        = IIF(    i.type = N'M'
                              AND p.mix_Advantage_weighted_AMT > 0
                             ,100.0 * i.mix_Advantage_weighted_AMT / p.mix_Advantage_weighted_AMT
                             ,NULL)
,[Index MIX Advantage!H\G|N0]
                        = IIF(    i.type = N'M'
                              AND p.mix_Advantage_AMT > 0
                             ,100.0 * i.mix_Advantage_AMT / p.mix_Advantage_AMT
                             ,NULL)
----------------------------------------------
,[Index OPS Writes!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ops_Total_write_CNT > 0
                                 ,100.0 * i.ops_Total_write_CNT / p.ops_Total_write_CNT
                                 ,0)
                             ,NULL)
,[Index USG Writes!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ius_user_updates_CNT > 0
                                 ,100.0 * i.ius_user_updates_CNT / p.ius_user_updates_CNT
                                 ,0)
                             ,NULL)
----------------------------------------------
,[Index BUF Percent in Buffer!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,CASE WHEN tbl.is_memory_optimized = 1 AND i.buffer_Total_KB_CNT > 0.0
                                   THEN 100
                                   WHEN i.reserved_page_CNT > 0
                                   THEN 100.0 * i.buffer_Total_KB_CNT / (i.reserved_page_CNT * 8.0)
                                   ELSE NULL
                              END
                             ,NULL)
----------------------------------------------
,[Index OPS R/W Ratio!H\G|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(i.ops_Total_write_CNT > 0
                                 ,IIF(i.ops_Total_read_CNT / i.ops_Total_write_CNT < 100
                                     ,1.0 * i.ops_Total_read_CNT / i.ops_Total_write_CNT
                                     ,99)
                                 ,NULL)
                             ,NULL)
,[Index USG R/W Ratio!H\G|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(i.ius_user_updates_CNT > 0
                                 ,IIF(i.ius_User_read_CNT / i.ius_user_updates_CNT < 100
                                     ,1.0 * i.ius_User_read_CNT / i.ius_user_updates_CNT
                                     ,99)
                                 ,NULL)
                             ,NULL)
----------------------------------------------
,[Index OPS Reads PCT!H\G|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,100.0 * i.ios_read_to_parent_RAT
                             ,NULL)
,[Index OPS Scans PCT!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ops_Total_scan_cnt > 0
                                 ,100.0 * i.ops_Total_scan_cnt / p.ops_Total_scan_cnt
                                 ,0)
                             ,NULL)
,[Index OPS Lookups PCT!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ios_singleton_lookup_CNT > 0
                                 ,100.0 * i.ios_singleton_lookup_CNT / p.ios_singleton_lookup_CNT
                                 ,0)
                             ,NULL)
,[Index OPS Forwarded Fetch!H\B|N0]
                        = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(p.ios_forwarded_fetch_CNT > 0
                                 ,100.0 * i.ios_forwarded_fetch_CNT / p.ios_forwarded_fetch_CNT
                                 ,0)
                             ,NULL)
----------------------------------------------
,[Index USG Reads PCT!H\G|N0]
                        = IIF(   TRY_CAST(i.type AS INT) IS NOT NULL
                              OR i.type = N'M'
                             ,100.0 * i.ius_read_to_parent_RAT
                             ,NULL)
,[Index USG Scans PCT!H\G|N0]
                        = IIF(   TRY_CAST(i.type AS INT) IS NOT NULL
                              OR i.type = N'M'
                             ,IIF(p.ius_user_scans_CNT > 0
                                 ,100.0 * i.ius_user_scans_CNT / p.ius_user_scans_CNT
                                 ,0)
                             ,NULL)
,[Index USG Lookups PCT!H\G|N0]
                        = IIF(   TRY_CAST(i.type AS INT) IS NOT NULL
                              OR i.type = N'M'
                             ,IIF(p.ius_user_lookups_CNT > 0
                                 ,100.0 * i.ius_user_lookups_CNT / p.ius_user_lookups_CNT
                                 ,0)
                             ,NULL)

----------------------------------------------
,[Index OPS LOB Contacts PCT!H\B|N0]
                        = IIF(    i.rec_type IN (N'I')
                              AND     ( p.ios_lob_fetch_pages_CNT
                                      + p.ios_lob_orphan_create_CNT           -- Bulk operations only
                                      + p.ios_lob_orphan_insert_CNT           -- Bulk operations only
                                      + p.ios_row_overflow_fetch_in_pages_CNT
                                      + p.ios_column_value_pull_in_row_CNT
                                      + p.ios_column_value_push_off_row_CNT
                                      ) > 0
                             ,100.0 * ( i.ios_lob_fetch_pages_CNT
                                      + i.ios_lob_orphan_create_CNT           -- Bulk operations only
                                      + i.ios_lob_orphan_insert_CNT           -- Bulk operations only
                                      + i.ios_row_overflow_fetch_in_pages_CNT
                                      + i.ios_column_value_pull_in_row_CNT
                                      + i.ios_column_value_push_off_row_CNT
                                      )
                                   /  ( p.ios_lob_fetch_pages_CNT
                                      + p.ios_lob_orphan_create_CNT           -- Bulk operations only
                                      + p.ios_lob_orphan_insert_CNT           -- Bulk operations only
                                      + p.ios_row_overflow_fetch_in_pages_CNT
                                      + p.ios_column_value_pull_in_row_CNT
                                      + p.ios_column_value_push_off_row_CNT
                                      )
                             ,NULL)
/******************************************************************************************************************************************/
--Index Priority Metrics FOR SORTING ACROSS INDEXES
/******************************************************************************************************************************************/
,[Index OPS Wait TM!H\B|N0]             = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ios_Total_wait_MS_CNT         ,NULL)
,[Index OPS Wait CNT!H\B|N0]            = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ios_Total_wait_CNT            ,NULL)
,[Index OPS Locks CNT!H\B|N0]           = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ios_Total_Lock_CNT            ,NULL)
,[Index OPS Lock Promo!H\B|N0]          = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ios_lock_promotion_attempt_CNT,NULL)
,[Index OPS Promo Fail!H\B|N0]          = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ios_lock_promotion_attempt_CNT
                                                                                 -i.ios_lock_promotion_CNT        ,NULL)
----------------------------------------------
,[Index OPS Page Split!H\B|N0]          = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ops_Total_page_split_CNT      ,NULL)
,[Index OPS Splits to Write PCT!H\B|N0] = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.page_splits_to_write_PCT      ,NULL)
,[Index OPS Page Merge!H\B|N0]          = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ops_Total_page_merge_CNT      ,NULL)
,[Index OPS Merges to Write PCT!H\B|N0] = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.page_Merge_to_write_PCT       ,NULL)
----------------------------------------------
,[Index MIX Advantage Weighted!H\G|N0]  = IIF(          i.type = N'M'            ,i.mix_Advantage_weighted_AMT    ,NULL)
,[Index MIX Advantage!H\G|N0]           = IIF(          i.type = N'M'            ,i.mix_Advantage_AMT             ,NULL)
----------------------------------------------
,[Index OPS Writes!H\B|N0]              = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ops_Total_write_CNT           ,NULL)
,[Index USG Writes!H\B|N0]              = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ius_user_updates_CNT          ,NULL)
----------------------------------------------
,[Index BUF Percent in Buffer!H\B|N0]   = IIF(TRY_CAST(i.type AS INT) IS NOT NULL
                                             ,CASE WHEN tbl.is_memory_optimized = 1 AND i.buffer_Total_KB_CNT > 0.0
                                                   THEN 100
                                                   WHEN i.reserved_page_CNT > 0
                                                   THEN 100.0 * i.buffer_Total_KB_CNT / (i.reserved_page_CNT * 8.0)
                                                   ELSE NULL
                                              END
                                             ,NULL)
----------------------------------------------
,[Index OPS R/W Ratio!H\G|N0]           = IIF(TRY_CAST(i.type AS INT) IS NOT NULL AND p.obj_type_short_label <> N'TVF'
                             ,IIF(i.ops_Total_write_CNT > 0
                                 ,IIF(i.ops_Total_read_CNT / i.ops_Total_write_CNT < 100
                                     ,1.0 * i.ops_Total_read_CNT / i.ops_Total_write_CNT
                                     ,99)
                                 ,NULL)
                             ,NULL)
,[Index USG R/W Ratio!H\G|N0]           = IIF(TRY_CAST(i.type AS INT) IS NOT NULL
                                             ,IIF(i.ius_user_updates_CNT > 0
                                                 ,IIF(i.ius_User_read_CNT / i.ius_user_updates_CNT < 100
                                                     ,1.0 * i.ius_User_read_CNT / i.ius_user_updates_CNT
                                                     ,99)
                                                 ,NULL)
                                             ,NULL)
----------------------------------------------
,[Index OPS Reads PCT!H\G|N0]           = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ios_read_to_parent_RAT        ,NULL)
,[Index OPS Scans PCT!H\B|N0]           = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ops_Total_scan_cnt            ,NULL)
,[Index OPS Lookups PCT!H\B|N0]         = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ios_singleton_lookup_CNT      ,NULL)
,[Index OPS Forwarded Fetch!H\B|N0]     = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ios_forwarded_fetch_CNT       ,NULL)
----------------------------------------------
,[Index USG Reads PCT!H\G|N0]           = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ius_read_to_parent_RAT        ,NULL)
,[Index USG Scans PCT!H\G|N0]           = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ius_user_scans_CNT            ,NULL)
,[Index USG Lookups PCT!H\G|N0]         = IIF(TRY_CAST(i.type AS INT) IS NOT NULL,i.ius_user_lookups_CNT          ,NULL)
----------------------------------------------
,[Index OPS LOB Contacts PCT!H\B|N0]    = IIF(    TRY_CAST(i.type AS INT) IS NOT NULL
                                             , i.ios_lob_fetch_pages_CNT
                                             + i.ios_lob_orphan_create_CNT           -- Bulk operations only
                                             + i.ios_lob_orphan_insert_CNT           -- Bulk operations only
                                             + i.ios_row_overflow_fetch_in_pages_CNT
                                             + i.ios_column_value_pull_in_row_CNT
                                             + i.ios_column_value_push_off_row_CNT
                                             ,NULL)
/******************************************************************************************************************************************/
-- Sorters/filters
/******************************************************************************************************************************************/
,[Table Busyness!H\B|N0]
                        = IIF(    i.rec_type IN (N'P',N'H')
                              AND  ( (CAST(ISNULL(a.buffer_Total_KB_CNT     ,0.0) AS FLOAT) *  2.0)
                                    +(CAST(ISNULL(a.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                                    +(CAST(ISNULL(a.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                                    +(CAST(ISNULL(a.ops_Total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                                   ) > 0
                             ,100.*( (CAST(ISNULL(i.buffer_Total_KB_CNT     ,0.0) AS FLOAT) *  2.0)
                                    +(CAST(ISNULL(i.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                                    +(CAST(ISNULL(i.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                                    +(CAST(ISNULL(i.ops_Total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                                   )
                               /   ( (CAST(ISNULL(a.buffer_Total_KB_CNT     ,0.0) AS FLOAT) *  2.0) -- Divide by SAMPLE total
                                    +(CAST(ISNULL(a.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                                    +(CAST(ISNULL(a.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                                    +(CAST(ISNULL(a.ops_Total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                                   )
                             ,NULL)
,[Index Busyness!H\B\B|N0]
                        = IIF(    TRY_CAST(i.type AS INT) IS NOT NULL
                              AND  ( (CAST(ISNULL(p.buffer_Total_KB_CNT     ,0.0) AS FLOAT) *  2.0)
                                    +(CAST(ISNULL(p.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                                    +(CAST(ISNULL(p.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                                    +(CAST(ISNULL(p.ops_Total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                                   ) > 0
                             ,100.*( (CAST(ISNULL(i.buffer_Total_KB_CNT     ,0.0) AS FLOAT) *  2.0)
                                    +(CAST(ISNULL(i.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                                    +(CAST(ISNULL(i.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                                    +(CAST(ISNULL(i.ops_Total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                                   )
                               /   ( (CAST(ISNULL(p.buffer_Total_KB_CNT     ,0.0) AS FLOAT) *  2.0) -- Divide by TABLE total
                                    +(CAST(ISNULL(p.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                                    +(CAST(ISNULL(p.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                                    +(CAST(ISNULL(p.ops_Total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                                   )
                             ,NULL)
,[Last Read Days\B|N0]
                        = DATEDIFF(DAY
                                  ,(SELECT MAX(dt) FROM (VALUES (i.ius_last_user_seek_DTTM)
                                                               ,(i.ius_last_user_scan_DTTM)
                                                               ,(i.ius_last_user_lookup_DTTM)) AS value(dt))
                                  ,sp.collection_DTTM
                                  )
--,[Table Stats_Prop_mod!H\B|N0] = IIF(i.rec_type IN (N'P',N'H')
--                                     ,i.Stats_Prop_modification_CNT * i.stathdr_Average_Key_Length
--                                     ,0)
--,[Index Stats_Prop_mod!H\B|N0]  = i.Stats_Prop_modification_CNT * i.stathdr_Average_Key_Length
-- ,[Table ios_writes!H\B|N0]     = IIF(i.rec_type IN (N'P',N'H')
--                                      ,i.ops_Total_write_CNT  * (i.column_width_bytes + i.Included_column_width_bytes)
--                                      ,0)
-- ,[Index ios_writes!H\B|N0]      = i.ops_Total_write_CNT  * (i.column_width_bytes + i.Included_column_width_bytes)
-- ,[Table ius_writes!H\B|N0]     = IIF(i.rec_type IN (N'P',N'H')
--                                      ,i.ius_user_updates_CNT  * (i.column_width_bytes + i.Included_column_width_bytes)
--                                      ,0)
-- ,[Index ius_writes!H\B|N0]      = i.ius_user_updates_CNT  * (i.column_width_bytes + i.Included_column_width_bytes)
---------------------------------------------------------------------------------------

-- xtp_Total_write_CNT
-- ops_Total_read_CNT
-- ius_User_read_CNT
-- xtp_Total_read_CNT

----------------------------------------------------------------------------------------------------
-- Record Key IDs
----------------------------------------------------------------------------------------------------
,i.database_id
,i.parent_object_id
,i.object_id
,i.index_id
,i.type
,i.rec_type

/******************************************************************************************************************************************/
-- Missing Index details
/******************************************************************************************************************************************/
,[mix Advantage AMT\B|N2]             = IIF(i.type = N'M',i.mix_Advantage_AMT            ,NULL)
,[mix Advantage weighted AMT\B|N2]    = IIF(i.type = N'M',i.mix_Advantage_weighted_AMT   ,NULL)
,[mix unique compiles CNT\B|N0]       = IIF(i.type = N'M',i.mix_unique_compiles_CNT      ,NULL)
,[mix user seeks CNT\B|N0]            = IIF(i.type = N'M',i.ius_user_seeks_CNT           ,NULL)
,[mix user scans CNT\B|N0]            = IIF(i.type = N'M',i.ius_user_scans_CNT           ,NULL)
,[mix avg Total user cost AMT\B|N2]   = IIF(i.type = N'M',i.mix_avg_Total_user_cost_AMT  ,NULL)
,[mix avg user impact AMT\B|N2]       = IIF(i.type = N'M',i.mix_avg_user_impact_AMT      ,NULL)
,[mix last user seek|DT]              = IIF(i.type = N'M',i.ius_last_user_seek_DTTM      ,NULL)
,[mix last user scan|DT]              = IIF(i.type = N'M',i.ius_last_user_scan_DTTM      ,NULL)
--------------------------------------
,[Table Total Reads CNT\B|N0]         = IIF(i.type = N'M',p.ius_user_read_CNT            ,NULL)
--------------------------------------
,[mix avg Total system cost AMT\B|N2] = IIF(i.type = N'M',i.mix_avg_Total_system_cost_AMT,NULL)
,[mix avg system impact AMT\B|N2]     = IIF(i.type = N'M',i.mix_avg_system_impact_AMT    ,NULL)
,[mix system seeks CNT\B|N0]          = IIF(i.type = N'M',i.ius_system_seeks_CNT         ,NULL)
,[mix system scans CNT\B|N0]          = IIF(i.type = N'M',i.ius_system_scans_CNT         ,NULL)
,[mix last system seek|DT]            = IIF(i.type = N'M',i.ius_last_system_seek_DTTM    ,NULL)
,[mix last system scan|DT]            = IIF(i.type = N'M',i.ius_last_system_scan_DTTM    ,NULL)

/******************************************************************************************************************************************/
-- TOTAL Operational Stats
/******************************************************************************************************************************************/
,[ops_Total_contacts_CNT\B|N0]                   = IIF(i.rec_type NOT IN (N'A',N'D'),i.ops_Total_contacts_CNT                   ,NULL)
,[ops_no_read_Total_write_CNT\B|N0]              = IIF(i.rec_type NOT IN (N'A',N'D'),i.ops_no_read_Total_write_CNT              ,NULL)
,[ops_Total_write_CNT\B|N0]                      = IIF(i.rec_type NOT IN (N'A',N'D'),i.ops_Total_write_CNT                      ,NULL)
,[ops_Total_insert_CNT\B|N0]                     = IIF(i.rec_type NOT IN (N'A',N'D'),i.ops_Total_insert_CNT                     ,NULL)
,[ops_Total_update_CNT\B|N0]                     = IIF(i.rec_type NOT IN (N'A',N'D'),i.ops_Total_update_CNT                     ,NULL)
,[ops_Total_delete_CNT\B|N0]                     = IIF(i.rec_type NOT IN (N'A',N'D'),i.ops_Total_delete_CNT                     ,NULL)
,[ops_Total_read_CNT\G|N0]                       = IIF(i.rec_type NOT IN (N'A',N'D'),i.ops_Total_read_CNT                       ,NULL)
,[ops_Total_scan_cnt\B|N0]                       = IIF(i.rec_type NOT IN (N'A',N'D'),i.ops_Total_scan_cnt                       ,NULL)
,[ops_Total_scan_retries_cnt\B|N0]               = IIF(i.rec_type NOT IN (N'A',N'D'),i.ops_Total_scan_retries_cnt               ,NULL)

/******************************************************************************************************************************************/
-- Index Operational Stats
/******************************************************************************************************************************************/
,[ios_singleton_lookup_CNT\B|N0]                 = IIF(i.rec_type = N'I',i.ios_singleton_lookup_CNT                 ,NULL)
,[ios_forwarded_fetch_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_forwarded_fetch_CNT                  ,NULL)
,[ios_lob_fetch_pages_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_lob_fetch_pages_CNT                  ,NULL)
,[ios_partition_CNT\B|N0]                        = IIF(i.rec_type = N'I',i.ios_partition_CNT                        ,NULL)
-------------------------------------------------
,[ios_Total_wait_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ios_Total_wait_CNT                       ,NULL)
,[ios_Total_wait_MS_CNT\B|N0]                    = IIF(i.rec_type = N'I',i.ios_Total_wait_MS_CNT                    ,NULL)
,[ios_Total_wait_MS_AVG\B|N2]                    = IIF(i.rec_type = N'I',i.ios_Total_wait_AVG                       ,NULL)
-------------------------------------------------
,[ios_leaf_insert_CNT\B|N0]                      = IIF(i.rec_type = N'I',i.ios_leaf_insert_CNT                      ,NULL)
,[ios_leaf_update_CNT\B|N0]                      = IIF(i.rec_type = N'I',i.ios_leaf_update_CNT                      ,NULL)
,[ios_leaf_delete_CNT\B|N0]                      = IIF(i.rec_type = N'I',i.ios_leaf_delete_CNT                      ,NULL)
,[ios_leaf_ghost_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ios_leaf_ghost_CNT                       ,NULL)
,[ios_Total_leaf_Contacts_CNT\B|N0]              = IIF(i.rec_type = N'I',i.ios_Total_leaf_Contacts_CNT              ,NULL)
-------------------------------------------------
,[ios_nonleaf_insert_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_nonleaf_insert_CNT                   ,NULL)
,[ios_nonleaf_delete_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_nonleaf_delete_CNT                   ,NULL)
,[ios_nonleaf_update_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_nonleaf_update_CNT                   ,NULL)
,[ios_Total_nonleaf_Contacts_CNT\B|N0]           = IIF(i.rec_type = N'I',i.ios_Total_nonleaf_Contacts_CNT           ,NULL)
-------------------------------------------------
,[ios_leaf_alloc_page_split_CNT\B|N0]            = IIF(i.rec_type = N'I',i.ios_leaf_alloc_page_split_CNT            ,NULL)
,[ios_nonleaf_alloc_page_split_CNT\B|N0]         = IIF(i.rec_type = N'I',i.ios_nonleaf_alloc_page_split_CNT         ,NULL)
,[ops_Total_page_split_CNT\B|N0]                 = IIF(i.rec_type = N'I',i.ops_Total_page_split_CNT                 ,NULL)
-------------------------------------------------
,[ios_leaf_page_merge_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_leaf_page_merge_CNT                  ,NULL)
,[ios_nonleaf_page_merge_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_nonleaf_page_merge_CNT               ,NULL)
,[ops_Total_page_merge_CNT\B|N0]                 = IIF(i.rec_type = N'I',i.ops_Total_page_merge_CNT                 ,NULL)
-------------------------------------------------
,[ios_lob_fetch_bytes_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_lob_fetch_bytes_CNT                  ,NULL)
,[ios_lob_orphan_create_CNT\B|N0]                = IIF(i.rec_type = N'I',i.ios_lob_orphan_create_CNT                ,NULL)
,[ios_lob_orphan_insert_CNT\B|N0]                = IIF(i.rec_type = N'I',i.ios_lob_orphan_insert_CNT                ,NULL)
,[ios_row_overflow_fetch_in_pages_CNT\B|N0]      = IIF(i.rec_type = N'I',i.ios_row_overflow_fetch_in_pages_CNT      ,NULL)
,[ios_row_overflow_fetch_in_bytes_CNT\B|N0]      = IIF(i.rec_type = N'I',i.ios_row_overflow_fetch_in_bytes_CNT      ,NULL)
,[ios_column_value_push_off_row_CNT\B|N0]        = IIF(i.rec_type = N'I',i.ios_column_value_push_off_row_CNT        ,NULL)
,[ios_column_value_pull_in_row_CNT\B|N0]         = IIF(i.rec_type = N'I',i.ios_column_value_pull_in_row_CNT         ,NULL)
-------------------------------------------------
,[ios_Total_lock_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ios_Total_lock_CNT                       ,NULL)
,[ios_Total_lock_wait_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_Total_lock_wait_CNT                  ,NULL)
,[ios_Total_lock_wait_MS_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_Total_lock_wait_MS_CNT               ,NULL)
,[ios_Total_lock_wait_MS_AVG\B|N2]               = IIF(i.rec_type = N'I',i.ios_Total_lock_wait_AVG                  ,NULL)
-------------------------------------------------
,[ios_row_lock_CNT\B|N0]                         = IIF(i.rec_type = N'I',i.ios_row_lock_CNT                         ,NULL)
,[ios_row_lock_wait_CNT\B|N0]                    = IIF(i.rec_type = N'I',i.ios_row_lock_wait_CNT                    ,NULL)
,[ios_row_lock_wait_MS_CNT\B|N0]                 = IIF(i.rec_type = N'I',i.ios_row_lock_wait_MS_CNT                 ,NULL)
,[ios_row_lock_wait_MS_AVG\B|N2]                 = IIF(i.rec_type = N'I',i.ios_row_lock_wait_AVG                    ,NULL)
-------------------------------------------------
,[ios_page_lock_CNT\B|N0]                        = IIF(i.rec_type = N'I',i.ios_page_lock_CNT                        ,NULL)
,[ios_page_lock_wait_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_page_lock_wait_CNT                   ,NULL)
,[ios_page_lock_wait_MS_CNT\B|N0]                = IIF(i.rec_type = N'I',i.ios_page_lock_wait_MS_CNT                ,NULL)
,[ios_page_lock_wait_MS_AVG\B|N2]                = IIF(i.rec_type = N'I',i.ios_page_lock_wait_AVG                   ,NULL)
-------------------------------------------------
,[ios_lock_promotion_attempt_CNT\B|N0]           = IIF(i.rec_type = N'I',i.ios_lock_promotion_attempt_CNT           ,NULL)
-- Fail PCT                                        IIF(i.rec_type = N'I',                                           ,NULL)
,[ios_lock_promotion_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_lock_promotion_CNT                   ,NULL)
,[ios_lock_promotion_fail_CNT\B|N0]              = IIF(i.rec_type = N'I',i.ios_lock_promotion_fail_CNT              ,NULL)
-------------------------------------------------
,[ios_page_latch_wait_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_page_latch_wait_CNT                  ,NULL)
,[ios_page_latch_wait_MS_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_page_latch_wait_MS_CNT               ,NULL)
,[ios_page_latch_wait_MS_AVG\B|N2]               = IIF(i.rec_type = N'I',i.ios_page_latch_wait_AVG                  ,NULL)
-------------------------------------------------
,[ios_page_io_latch_wait_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_page_io_latch_wait_CNT               ,NULL)
,[ios_page_io_latch_wait_MS_CNT\B|N0]            = IIF(i.rec_type = N'I',i.ios_page_io_latch_wait_MS_CNT            ,NULL)
,[ios_page_io_latch_wait_MS_AVG\B|N2]            = IIF(i.rec_type = N'I',i.ios_page_io_latch_wait_AVG               ,NULL)
-------------------------------------------------
,[ios_tree_page_latch_wait_CNT\B|N0]             = IIF(i.rec_type = N'I',i.ios_tree_page_latch_wait_CNT             ,NULL)
,[ios_tree_page_latch_wait_MS_CNT\B|N0]          = IIF(i.rec_type = N'I',i.ios_tree_page_latch_wait_MS_CNT          ,NULL)
,[ios_tree_page_latch_wait_MS_AVG\B|N2]          = IIF(i.rec_type = N'I',i.ios_tree_page_latch_wait_AVG             ,NULL)
-------------------------------------------------
,[ios_tree_page_io_latch_wait_CNT\B|N0]          = IIF(i.rec_type = N'I',i.ios_tree_page_io_latch_wait_CNT          ,NULL)
,[ios_tree_page_io_latch_wait_MS_CNT\B|N0]       = IIF(i.rec_type = N'I',i.ios_tree_page_io_latch_wait_MS_CNT       ,NULL)
,[ios_tree_page_io_latch_wait_MS_AVG\B|N2]       = IIF(i.rec_type = N'I',i.ios_tree_page_io_latch_wait_AVG          ,NULL)
-------------------------------------------------
,[ios_page_compression_attempt_CNT\B|N0]         = IIF(i.rec_type = N'I',i.ios_page_compression_attempt_CNT         ,NULL)
-- Fail PCT                                        IIF(i.rec_type = N'I',                                           ,NULL)
,[ios_page_compression_success_CNT\B|N0]         = IIF(i.rec_type = N'I',i.ios_page_compression_success_CNT         ,NULL)
,[ios_page_compression_fail_CNT\B|N0]            = IIF(i.rec_type = N'I',i.ios_page_compression_fail_CNT            ,NULL)
-------------------------------------------------
,[ios_version_generated_off_row_CNT\B|N0]        = IIF(i.rec_type = N'I',i.ios_version_generated_off_row_CNT        ,NULL)
,[ios_ghost_version_inrow_CNT\B|N0]              = IIF(i.rec_type = N'I',i.ios_ghost_version_inrow_CNT              ,NULL)
,[ios_ghost_version_off_row_CNT\B|N0]            = IIF(i.rec_type = N'I',i.ios_ghost_version_off_row_CNT            ,NULL)
,[ios_insert_over_ghost_version_inrow_CNT\B|N0]  = IIF(i.rec_type = N'I',i.ios_insert_over_ghost_version_inrow_CNT  ,NULL)
,[ios_insert_over_ghost_version_off_row_CNT\B|N0]= IIF(i.rec_type = N'I',i.ios_insert_over_ghost_version_off_row_CNT,NULL)
,[ios_Total_Column_value_off_row_CNT\B|N0]       = IIF(i.rec_type = N'I',i.ios_Total_Column_value_off_row_CNT       ,NULL)

/******************************************************************************************************************************************/
-- Index Usage Stats
/******************************************************************************************************************************************/
,[ius_User_Total_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ius_User_Total_CNT    ,NULL)
,[ius_user_updates_CNT\B|N0]                     = IIF(i.rec_type = N'I',i.ius_user_updates_CNT  ,NULL)
,[ius_User_read_CNT\B|N0]                        = IIF(i.rec_type = N'I',i.ius_User_read_CNT     ,NULL)
,[ius_user_seeks_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ius_user_seeks_CNT    ,NULL)
,[ius_user_scans_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ius_user_scans_CNT    ,NULL)
,[ius_user_lookups_CNT\B|N0]                     = IIF(i.rec_type = N'I',i.ius_user_lookups_CNT  ,NULL)
,[ius_system_seeks_CNT\B|N0]                     = IIF(i.rec_type = N'I',i.ius_system_seeks_CNT  ,NULL)
,[ius_system_scans_CNT\B|N0]                     = IIF(i.rec_type = N'I',i.ius_system_scans_CNT  ,NULL)
,[ius_system_lookups_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ius_system_lookups_CNT,NULL)
,[ius_system_updates_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ius_system_updates_CNT,NULL)
----------------------------------
,[ius_last_user_seek_DAY\B|N]                    = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_seek_DTTM    ,i.collection_DTTM),NULL)
,[ius_last_user_scan_DAY\B|N]                    = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_scan_DTTM    ,i.collection_DTTM),NULL)
,[ius_last_user_lookup_DAY\B|N]                  = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_lookup_DTTM  ,i.collection_DTTM),NULL)
,[ius_last_user_update_DAY\B|N]                  = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_update_DTTM  ,i.collection_DTTM),NULL)
,[ius_last_system_seek_DAY\B|N]                  = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_seek_DTTM  ,i.collection_DTTM),NULL)
,[ius_last_system_scan_DAY\B|N]                  = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_scan_DTTM  ,i.collection_DTTM),NULL)
,[ius_last_system_lookup_DAY\B|N]                = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_lookup_DTTM,i.collection_DTTM),NULL)
,[ius_last_system_update_DAY\B|N]                = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_update_DTTM,i.collection_DTTM),NULL)
----------------------------------
,[ius_no_read_user_updates_CNT\B]                = IIF(i.rec_type = N'I',i.ius_no_read_user_updates_CNT,NULL)
,[ius_last_read_days_ago\B]                      = IIF(i.rec_type = N'I',i.ius_last_read_days_ago      ,NULL)
,[ius_last_write_days_ago\B]                     = IIF(i.rec_type = N'I',i.ius_last_write_days_ago     ,NULL)

/******************************************************************************************************************************************/
-- InMemory (XTP) Index Stats
/******************************************************************************************************************************************/
,[xtp_Total_Contacts_CNT\B|N0]                   = IIF(tbl.is_memory_optimized = 1,i.xtp_Total_Contacts_CNT              ,NULL)
,[xtp_Total_read_CNT\B|N0]                       = IIF(tbl.is_memory_optimized = 1,i.xtp_Total_read_CNT                  ,NULL)
,[xtp_scans_started_CNT\B|N0]                    = IIF(tbl.is_memory_optimized = 1,i.xtp_scans_started_CNT               ,NULL)
,[xtp_scans_retries_CNT\B|N0]                    = IIF(tbl.is_memory_optimized = 1,i.xtp_scans_retries_CNT               ,NULL)
--------------------------------------------
,[xtp_Total_write_CNT\B|N0]                      = IIF(tbl.is_memory_optimized = 1,i.xtp_Total_write_CNT                 ,NULL)
,[xtp_unique_constraint_violations_CNT\B|N0]     = IIF(tbl.is_memory_optimized = 1,i.xtp_unique_constraint_violations_CNT,NULL)
,[xtp_write_conflicts_CNT\B|N0]                  = IIF(tbl.is_memory_optimized = 1,i.xtp_write_conflicts_CNT             ,NULL)
,[xtp_page_update_CNT\B|N0]                      = IIF(tbl.is_memory_optimized = 1,i.xtp_page_update_CNT                 ,NULL)
,[xtp_page_update_retry_CNT\B|N0]                = IIF(tbl.is_memory_optimized = 1,i.xtp_page_update_retry_CNT           ,NULL)
,[xtp_Total_insert_CNT\B|N0]                     = IIF(tbl.is_memory_optimized = 1,i.xtp_Total_insert_CNT                ,NULL)
,[xtp_row_insert_attempts_CNT\B|N0]              = IIF(tbl.is_memory_optimized = 1,i.xtp_row_insert_attempts_CNT         ,NULL)
--------------------------------------------
,[xtp_Total_update_CNT\B|N0]                     = IIF(tbl.is_memory_optimized = 1,i.xtp_Total_update_CNT                ,NULL)
,[xtp_row_update_attempts_CNT\B|N0]              = IIF(tbl.is_memory_optimized = 1,i.xtp_row_update_attempts_CNT         ,NULL)
--------------------------------------------
,[xtp_Total_delete_CNT\B|N0]                     = IIF(tbl.is_memory_optimized = 1,i.xtp_Total_delete_CNT                ,NULL)
,[xtp_row_delete_attempts_CNT\B|N0]              = IIF(tbl.is_memory_optimized = 1,i.xtp_row_delete_attempts_CNT         ,NULL)
--------------------------------------------
,[xtp_Total_Split_CNT\B|N0]                      = IIF(tbl.is_memory_optimized = 1,i.xtp_Total_Split_CNT                 ,NULL)
,[xtp_page_split_CNT\B|N0]                       = IIF(tbl.is_memory_optimized = 1,i.xtp_page_split_CNT                  ,NULL)
,[xtp_page_split_retry_CNT\B|N0]                 = IIF(tbl.is_memory_optimized = 1,i.xtp_page_split_retry_CNT            ,NULL)
,[xtp_key_split_CNT\B|N0]                        = IIF(tbl.is_memory_optimized = 1,i.xtp_key_split_CNT                   ,NULL)
,[xtp_key_split_retry_CNT\B|N0]                  = IIF(tbl.is_memory_optimized = 1,i.xtp_key_split_retry_CNT             ,NULL)
--------------------------------------------
,[xtp_Total_merge_CNT\B|N0]                      = IIF(tbl.is_memory_optimized = 1,i.xtp_Total_merge_CNT                 ,NULL)
,[xtp_page_merge_CNT\B|N0]                       = IIF(tbl.is_memory_optimized = 1,i.xtp_page_merge_CNT                  ,NULL)
,[xtp_page_merge_retry_CNT\B|N0]                 = IIF(tbl.is_memory_optimized = 1,i.xtp_page_merge_retry_CNT            ,NULL)
,[xtp_key_merge_CNT\B|N0]                        = IIF(tbl.is_memory_optimized = 1,i.xtp_key_merge_CNT                   ,NULL)
,[xtp_key_merge_retry_CNT\B|N0]                  = IIF(tbl.is_memory_optimized = 1,i.xtp_key_merge_retry_CNT             ,NULL)
--------------------------------------------
,[xtp_rows_returned_CNT\B|N0]                    = IIF(tbl.is_memory_optimized = 1,i.xtp_rows_returned_CNT               ,NULL)
,[xtp_rows_contacted_CNT\B|N0]                   = IIF(tbl.is_memory_optimized = 1,i.xtp_rows_touched_CNT                ,NULL)
,[xtp_delta_pages_CNT\B|N0]                      = IIF(tbl.is_memory_optimized = 1,i.xtp_delta_pages_CNT                 ,NULL)
,[xtp_leaf_pages_CNT\B|N0]                       = IIF(tbl.is_memory_optimized = 1,i.xtp_leaf_pages_CNT                  ,NULL)
,[xtp_page_consolidation_CNT\B|N0]               = IIF(tbl.is_memory_optimized = 1,i.xtp_page_consolidation_CNT          ,NULL)
,[xtp_page_consolidation_retry_CNT\B|N0]         = IIF(tbl.is_memory_optimized = 1,i.xtp_page_consolidation_retry_CNT    ,NULL)
,[xtp_uses_key_normalization\B]                  = IIF(tbl.is_memory_optimized = 1,i.xtp_uses_key_normalization          ,NULL)
,[xtp_allocated_bytes_CNT\B|N0]                  = IIF(tbl.is_memory_optimized = 1,i.xtp_allocated_bytes_CNT             ,NULL)
,[xtp_used_bytes_CNT\B|N0]                       = IIF(tbl.is_memory_optimized = 1,i.xtp_used_bytes_CNT                  ,NULL)
,[xtp_allocation_CNT\B|N0]                       = IIF(tbl.is_memory_optimized = 1,i.xtp_allocation_CNT                  ,NULL)

/******************************************************************************************************************************************/
-- ColumnStore Index Stats
/******************************************************************************************************************************************/
,[cs_partition_CNT\B|N0]                          = IIF(i.type IN (N'5',N'6'),i.cs_partition_CNT             ,NULL)
,[cs_row_group_CNT\B|N0]                          = IIF(i.type IN (N'5',N'6'),i.cs_row_group_CNT             ,NULL)
,[cs_index_scan_CNT\B|N0]                         = IIF(i.type IN (N'5',N'6'),i.cs_index_scan_CNT            ,NULL)
,[cs_scan_CNT\B|N0]                               = IIF(i.type IN (N'5',N'6'),i.cs_scan_CNT                  ,NULL)
,[cs_delete_buffer_scan_CNT\B|N0]                 = IIF(i.type IN (N'5',N'6'),i.cs_delete_buffer_scan_CNT    ,NULL)
--------------------------------------------
,[cs_row_group_lock_CNT\B|N0]                     = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_CNT        ,NULL)
,[cs_row_group_lock_wait_CNT\B|N0]                = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_wait_CNT   ,NULL)
,[cs_row_group_lock_wait_MS_CNT\B|N2]             = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_wait_MS_CNT,NULL)
,[cs_row_group_lock_wait_AVG\B]                   = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_wait_AVG   ,NULL)
--------------------------------------------
,[cs_returned_row_CNT\B|N0]                       = IIF(i.type IN (N'5',N'6'),i.cs_returned_row_CNT          ,NULL)
,[cs_returned_aggregate_CNT\B|N0]                 = IIF(i.type IN (N'5',N'6'),i.cs_returned_aggregate_CNT    ,NULL)
,[cs_returned_group_CNT\B|N0]                     = IIF(i.type IN (N'5',N'6'),i.cs_returned_group_CNT        ,NULL)
,[cs_input_groupby_row_CNT\B|N0]                  = IIF(i.type IN (N'5',N'6'),i.cs_input_groupby_row_CNT     ,NULL)

/******************************************************************************************************************************************/
-- FROM
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @show_fulltext_internals TINYINT = 0
SELECT i.database_id,i.history_source_object_id,i.parent_object_id,i.object_id,i.obj_name,i.index_id,i.type
      ,op.object_id,op.obj_name
--*/
  FROM tempdb.dbo.SQLXL_Index_Compilation AS i
  LEFT OUTER
  JOIN tempdb.dbo.SQLXL_Index_Compilation AS op
    ON i.database_id              = op.database_id
   AND i.history_source_object_id = op.parent_object_id
   AND i.history_source_object_id = op.OBJECT_ID
   AND i.history_source_object_id = op.index_id
   AND N'U'                       = op.type
-- WHERE i.object_id = 1653580929
-- WHERE i.obj_name LIKE N'%_archive'
 CROSS
  JOIN tempdb.dbo.SQLXL_Index_sys_Startup_Parameters AS sp
 CROSS
  JOIN (-- Instance level
        SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'A'
       )                                    AS a
  LEFT OUTER                                                       -- outer needed for ALL row
  JOIN (-- Database level
        SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'D'
       )                                    AS d
    ON i.database_id                         = d.database_id
  LEFT OUTER                                                       -- outer needed for ALL row
  JOIN tempdb.dbo.SQLXL_Index_sys_tables    AS tbl
    ON i.database_id = tbl.database_id
   AND i.object_ID   = tbl.object_id
  LEFT OUTER                                                       -- outer needed for ALL row
  JOIN (-- Object level
        SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type IN (N'H',N'P')
       )                                    AS p
    ON i.database_id                         = p.database_id
   AND i.parent_object_id                    = p.parent_object_id
  LEFT OUTER                                                       -- outer needed for ALL row
  JOIN (-- History table level
        SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE rec_type = N'H'
       )                                    AS s
    ON i.database_id                         = s.database_id
   AND i.parent_object_id                    = s.parent_object_id
   AND i.object_id                           = s.object_id
  LEFT OUTER
  JOIN (-- physical table metrics. Views included for their clustering index
        SELECT *
          FROM tempdb.dbo.SQLXL_Index_Compilation
         WHERE type IN (N'0',N'1',N'5')
       )                                    AS raw
    ON i.database_id                         = raw.database_id
   AND i.parent_object_id                    = raw.object_id
   AND i.object_id                           = raw.object_id
 WHERE 1 = 1
   AND (   @show_fulltext_internals = 1
        OR (    @show_fulltext_internals = 0
            AND (   i.internal_type IS NULL
                 OR i.rec_type      <> N'I'
                 OR (i.rec_type      = N'I' AND i.internal_type_DESC NOT LIKE N'FULLTEXT%')
                )
           )
       )
-- Omitting non SQL Table Values Functions for now
   AND i.obj_type NOT IN (N'FT',N'IF')

 ORDER BY
       i.tbl_priority_metric DESC
      ,i.database_ID
      ,i.parent_object_ID
      ,i.index_id
      ,i.type

GO -- end of stored procedure/function/T-SQL script/CREATE VIEW

/*** LOCAL TESTING ***
EXEC tempdb.dbo.SQLXL_Index_Present @show_fulltext_internals = 0 -- tinyint
--*/USE tempdb
GO

/******************************************************************************************************************************************/
-- Session Environment settings
/******************************************************************************************************************************************/
SET ANSI_NULL_DFLT_ON,ANSI_NULLS,ANSI_PADDING,ARITHABORT,CONCAT_NULL_YIELDS_NULL,CURSOR_CLOSE_ON_COMMIT,NOCOUNT,QUOTED_IDENTIFIER ON;
SET ANSI_WARNINGS,ARITHIGNORE,FMTONLY,FORCEPLAN,IMPLICIT_TRANSACTIONS,NOEXEC,NUMERIC_ROUNDABORT,XACT_ABORT OFF;
SET STATISTICS IO,PROFILE,TIME,XML OFF;
SET DATEFORMAT                  YMD;
SET DEADLOCK_PRIORITY           -10;  -- Lowest priority
SET LOCK_TIMEOUT              10000;  -- in milliseconds
SET QUERY_GOVERNOR_COST_LIMIT     0;  -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute.
SET TEXTSIZE             2147483647;  -- Max length of Excel cell contents is 32767
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

RAISERROR (N'Creating SQLXL_Base_Function',0,0) WITH NOWAIT;

/******************************************************************************************************************************************/
-- function tempdb.dbo.SQLXL_Strip_Strings - remove elements found in a string
/******************************************************************************************************************************************/
RAISERROR ('... tempdb.dbo.SQLXL_Strip_Strings',0,0) WITH NOWAIT;
--------------------------------------------------------------------------------------------------------------------------------------------
EXEC ('USE tempdb;
IF EXISTS (SELECT object_id 
             FROM tempdb.sys.objects (NOLOCK) 
            WHERE object_id = OBJECT_ID(''tempdb.dbo.SQLXL_Strip_Strings'')
          ) 
DROP FUNCTION dbo.SQLXL_Strip_Strings')

EXEC(N'USE tempdb; EXEC(''
CREATE FUNCTION dbo.SQLXL_Strip_Strings (@String NVARCHAR(MAX),@Match NVARCHAR(MAX),@replace NVARCHAR(MAX))
RETURNS NVARCHAR(MAX)
WITH RETURNS NULL ON NULL INPUT
AS
BEGIN
   IF @replace IS NULL SET @replace = N''''''''
   SET @Match =  N''''%[''''+@Match+'''']%''''
   WHILE PATINDEX(@Match, @String) > 0 SET @String = STUFF(@String,PATINDEX(@Match,@String),1,@replace)
   IF @string = N'''''''' SET @string = NULL
   RETURN @String
END'')
');

GO -- end of stored procedure/function/T-SQL script/CREATE VIEW

/******************************************************************************************************************************************/
-- function tempdb.dbo.SQLXL_Keep_Strings - keep only elements found in a string
/******************************************************************************************************************************************/
RAISERROR ('... tempdb.dbo.SQLXL_Keep_Strings',0,0) WITH NOWAIT;
--------------------------------------------------------------------------------------------------------------------------------------------
EXEC ('USE tempdb;
IF EXISTS (SELECT object_id 
             FROM tempdb.sys.objects (NOLOCK) 
            WHERE object_id = OBJECT_ID(''tempdb.dbo.SQLXL_Keep_Strings'')
          ) 
DROP FUNCTION dbo.SQLXL_Keep_Strings')

EXEC(N'USE tempdb; EXEC(N''
CREATE FUNCTION dbo.SQLXL_Keep_Strings (@String NVARCHAR(MAX),@Match NVARCHAR(MAX),@replace NVARCHAR(MAX))
RETURNS NVARCHAR(MAX)
WITH RETURNS NULL ON NULL INPUT
AS
BEGIN
   IF @replace IS NULL SET @replace = N''''''''
   SET @Match =  N''''%[^''''+@Match+'''']%''''
   WHILE PATINDEX(@Match, @String) > 0 SET @String = STUFF(@String,PATINDEX(@Match,@String),1,@replace)
   IF @string = N'''''''' SET @string = NULL
   RETURN @String
END'')
');

GO -- end of stored procedure/function/T-SQL script/CREATE VIEW

/******************************************************************************************************************************************/
-- function tempdb.dbo.SQLXL_Parse_Strings -  to, unh, parse strings using native functions if available or recursive CTE
/******************************************************************************************************************************************/
RAISERROR ('... tempdb.dbo.SQLXL_Parse_Strings',0,0) WITH NOWAIT;
--------------------------------------------------------------------------------------------------------------------------------------------
EXEC ('USE tempdb;
IF EXISTS (SELECT object_id 
             FROM tempdb.sys.objects (NOLOCK) 
            WHERE object_id = OBJECT_ID(''tempdb.dbo.SQLXL_Parse_Strings'')
          ) 
DROP FUNCTION dbo.SQLXL_Parse_Strings')

-----------------------------------------------------------------------------------------------------------
-- SQL 2022+ - use function STRING_SPLIT if possible, else recursive CTE 
-----------------------------------------------------------------------------------------------------------
IF CAST(PARSENAME(CONVERT(VARCHAR(32),SERVERPROPERTY('productversion')),4) AS INT) >= 16 -- SQL 2022+
EXEC(N'USE tempdb;EXEC(N''
CREATE FUNCTION dbo.SQLXL_Parse_Strings (@string [NVARCHAR](MAX), @separator [NVARCHAR](MAX))
RETURNS @parsedString TABLE (RowNbr BIGINT, string [NVARCHAR](MAX) NULL)
WITH EXECUTE AS CALLER
AS
BEGIN

  DECLARE @lensep INT = DATALENGTH(@separator)/2;

  IF     @lensep       = 1    -- STRING_SPLIT function only accepts a single splitting charatcer
     AND LEN(@string) <= 4000 -- STRING_SPLIT function only accepts strings up to 4000 characters
  BEGIN
     INSERT INTO @parsedString
     SELECT ordinal
           ,value
       FROM STRING_SPLIT(@string,@separator,1);
  END
  ELSE
  BEGIN
     SET @string=@string+@separator;

     WITH p
     AS (SELECT CAST(1 AS BIGINT)                        AS StartPos
               ,CHARINDEX(@separator,@string)            AS EndPos
         UNION ALL
         SELECT EndPos + @lensep                         AS StartPos
               ,CHARINDEX(@separator,@string,EndPos + @lensep) AS EndPos
           FROM p
          WHERE CHARINDEX(@separator,@string,EndPos + @lensep) > 0
        )
     INSERT INTO @parsedString
     SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
           ,SUBSTRING(@string,StartPos,EndPos-StartPos)
       FROM p
     OPTION (MAXRECURSION 0)
  END

  RETURN
END'')
')

ELSE 
BEGIN
-----------------------------------------------------------------------------------------------------------
-- SQL 2016+ - use function STRING_SPLIT if possible, else recursive CTE 
-----------------------------------------------------------------------------------------------------------
   IF CAST(PARSENAME(CONVERT(VARCHAR(32),SERVERPROPERTY('productversion')),4) AS INT) >= 13 -- SQL 2016+
   EXEC(N'USE tempdb;EXEC(N''
CREATE FUNCTION dbo.SQLXL_Parse_Strings (@string [NVARCHAR](MAX), @separator [NVARCHAR](MAX))
RETURNS @parsedString TABLE (RowNbr BIGINT, string [NVARCHAR](MAX) NULL)
WITH EXECUTE AS CALLER
AS
BEGIN

  DECLARE @lensep INT = DATALENGTH(@separator)/2;

  IF     @lensep       = 1    -- STRING_SPLIT function only accepts a single splitting character
     AND LEN(@string) <= 4000 -- STRING_SPLIT function only accepts strings up to 4000 characters
  BEGIN
     INSERT INTO @parsedString
     SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)),value
       FROM STRING_SPLIT(@string,@separator);
  END
  ELSE
  BEGIN
     SET @string=@string+@separator;

     WITH p
     AS (SELECT CAST(1 AS BIGINT)                        AS StartPos
               ,CHARINDEX(@separator,@string)            AS EndPos
         UNION ALL
         SELECT EndPos + @lensep                         AS StartPos
               ,CHARINDEX(@separator,@string,EndPos + @lensep) AS EndPos
           FROM p
          WHERE CHARINDEX(@separator,@string,EndPos + @lensep) > 0
        )
     INSERT INTO @parsedString
     SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
           ,SUBSTRING(@string,StartPos,EndPos-StartPos)
       FROM p
     OPTION (MAXRECURSION 0)
  END

  RETURN
END'')
')

   ELSE
-----------------------------------------------------------------------------------------------------------
-- Use only recursive CTE
-----------------------------------------------------------------------------------------------------------
   EXEC(N'USE tempdb;EXEC(N''
CREATE FUNCTION dbo.SQLXL_Parse_Strings (@string [NVARCHAR](MAX), @separator [NVARCHAR](MAX))
RETURNS @parsedString TABLE (RowNbr BIGINT, string [NVARCHAR](MAX) NULL)
WITH EXECUTE AS CALLER
AS
BEGIN

  DECLARE @lensep INT = DATALENGTH(@separator)/2;

  BEGIN
     SET @string=@string+@separator;

     WITH p
     AS (SELECT CAST(1 AS BIGINT)                        AS StartPos
               ,CHARINDEX(@separator,@string)            AS EndPos
         UNION ALL
         SELECT EndPos + @lensep                         AS StartPos
               ,CHARINDEX(@separator,@string,EndPos + @lensep) AS EndPos
           FROM p
          WHERE CHARINDEX(@separator,@string,EndPos + @lensep) > 0
        )
     INSERT INTO @parsedString
     SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
           ,SUBSTRING(@string,StartPos,EndPos-StartPos)
       FROM p
     OPTION (MAXRECURSION 0)
  END

  RETURN
END'')
');
END

GO -- end of stored procedure/function/T-SQL script/CREATE VIEW

/******************************************************************************************************************************************/
-- function tempdb.dbo.SQLXL_Numbers
/******************************************************************************************************************************************/
RAISERROR ('... tempdb.dbo.SQLXL_Numbers',0,0) WITH NOWAIT;
--------------------------------------------------------------------------------------------------------------------------------------------
EXEC ('USE tempdb;
IF EXISTS (SELECT object_id 
             FROM tempdb.sys.objects (NOLOCK) 
            WHERE object_id = OBJECT_ID(''tempdb.dbo.SQLXL_Numbers'')
          ) 
DROP FUNCTION dbo.SQLXL_Numbers')

EXEC(N'USE tempdb;EXEC(N''
CREATE FUNCTION dbo.SQLXL_Numbers
  (@zero_or_one   BIT = 1
  ,@top           INT
  )
RETURNS TABLE WITH SCHEMABINDING AS RETURN
WITH
  P0(n) AS (SELECT NULL FROM (VALUES (1),(2),(3),(4)) n(n)),
  P1(n) AS (SELECT NULL FROM P0 A, P0 B),--        16 rows
  P2(n) AS (SELECT NULL FROM P1 A, P1 B),--       256 rows
  P3(n) AS (SELECT NULL FROM P2 A, P2 B),--     65536 rows
  P4(n) AS (SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) FROM P3 A, P3 B) -- 4294967296 rows
SELECT 0 n WHERE @zero_or_one = 0
UNION ALL
SELECT TOP(@top - CASE WHEN @zero_or_one = 0 THEN 1 ELSE 0 END) n FROM P4
'')
');

GO -- end of stored procedure/function/T-SQL script/CREATE VIEW

/******************************************************************************************************************************************/
-- function tempdb.dbo.SQLXL_3SD - return a number rounded to 3 significant digits
/******************************************************************************************************************************************/
DECLARE @collation SYSNAME = (SELECT collation_name FROM sys.databases WHERE name = N'tempdb')

RAISERROR ('... tempdb.dbo.SQLXL_3SD',0,0) WITH NOWAIT;
--------------------------------------------------------------------------------------------------------------------------------------------
EXEC ('USE tempdb;
IF EXISTS (SELECT object_id 
             FROM tempdb.sys.objects (NOLOCK) 
            WHERE object_id = OBJECT_ID(''tempdb.dbo.SQLXL_3SD'')
          ) 
DROP FUNCTION dbo.SQLXL_3SD')

EXEC (N'USE tempdb;EXEC(N''
CREATE FUNCTION dbo.SQLXL_3SD
      (@value FLOAT
      ,@type  VARCHAR(2) = ''''I''''
     )
/*
Type Parameters
"P"  = SQL Server 8KB (8192 2^12 bytes) Pages
"B"  = Bytes       2^ 0
"KB" = Kilobytes   2^10
"MB" = Megabytes   2^20
"GB" = Gigabytes   2^30
"TB" = Terabytes   2^40
"PB" = Petabytes   2^50
"EB" = Exabytes    2^60
"ZB" = Zettabytes  2^70
"YB" = Yottabytes  2^80

"u"  = Microseconds  10^-6
"us" = Microseconds  10^-6
"U"  = Microseconds  10^-6
"m"  = Milliseconds  10^-3
"ms" = Milliseconds  10^-3
"M"  = Milliseconds  10^-3
"s"  = Seconds       10^ 0
"S"  = Seconds       10^ 0
"
"I"  = Integer
"N"  = Number
"%"  = Percent

TO DO;
- incorporate QUOTENAME
- convert "seconds" > 100 to MI, DD:MI, DD:HH:MI

NOTE: cannot NVARCHAR as value input since FLOAT values get converted to exponents when converted to VARCHAR in calculating POWER DIVISOR
*/

RETURNS NVARCHAR(7) --WITH COLLATE DATABASE_DEFAULT
AS
BEGIN
   IF @value IS NULL  RETURN N''''''''

   -- Special Cases --------------------------------------------------------------------------------------------
   IF @type = ''''I''''
   BEGIN
      IF @value < 0      RETURN N''''***''''
      IF ROUND(@value,0) BETWEEN 0 AND 999 RETURN CONVERT(VARCHAR(3),FLOOR(ROUND(@value,0)))
   END

   IF @type = ''''%'''' SET @value = 100.0 * @value

   IF @type = ''''N''''
   BEGIN
      IF ROUND(@value,2) <   0.01 RETURN N''''0.00''''
      IF ROUND(@value,2) < 100.00 RETURN LEFT(ROUND(CAST(@value AS DECIMAL(5,2)),2),4)
   END

   IF @type = ''''P''''         -- SQL Server Page, 8KB
   BEGIN
      SET @value = @value * 8.0
      SET @type  = ''''KB''''
   END

   -- Declares - use COLLATE to differentiate between LOWER and UPPER @type ---------------------------------------------------------------
   DECLARE @power  VARCHAR(1) =  ''''''''  COLLATE SQL_Latin1_General_CP1_CS_AS -- which power of 10 or 2 prefix to show
          ,@factor FLOAT                                                    -- 1000 for next major power of 10 prefix. 1024 (2^10) for Bytes
          ,@suffix VARCHAR(1) = N'''''''' COLLATE SQL_Latin1_General_CP1_CS_AS  -- unit of measure - seconds, bytes

   -- SETs --------------------------------------------------------------------------------------------------------------------------------
   SET @power  = CASE WHEN @type IN (''''B'''',N''''I'''',N''''N'''',N''''s'''',N''''S'''',N''''%'''') THEN ''''''''
                      WHEN @type IN (''''u'''',N''''us'''',N''''U''''                                ) THEN ''''u''''
                      WHEN @type IN (''''m'''',N''''ms'''',N''''M''''                                ) THEN ''''m''''
                      ELSE UPPER(LEFT(@type,1))
                 END

   SET @factor = CASE WHEN @type IN (N''''u''''
                                    ,N''''us''''
                                    ,N''''U''''
                                    ,N''''m''''
                                    ,N''''ms''''
                                    ,N''''M''''
                                    ,N''''S''''
                                    ,N''''I''''
                                    ,N''''N''''
                                    ,N''''%''''
                                    ) 
                      THEN 1000.0
                      ELSE 1024.0
                 END

   SET @suffix = CASE WHEN @type IN (''''%''''                       ) THEN ''''%''''    -- percent
                      WHEN @type IN (''''u'''',N''''us'''',N''''U'''') THEN ''''s''''
                      WHEN @type IN (''''m'''',N''''ms'''',N''''M'''') THEN ''''s''''
                      WHEN @type IN (''''s'''',N''''S''''            ) THEN ''''s''''
                      WHEN @type IN (''''I'''',N''''N''''            ) THEN ''''''''     -- numbers and integers
                      ELSE ''''B''''                                                     -- bytes
                 END

   -- Special Case ------------------------------------------------------------------------------------------------------------------------
   IF @value <= 0.0000001 OR @value IS NULL RETURN ''''0.00''''+@power+@suffix

   -- Calcs - if less than 3 digits to LEFT of decimal, multiply to show next lower power -------------------------------------------------
   IF ROUND(@value,0) < 1000 AND @type <> N''''%''''
   BEGIN
      WHILE ROUND(@value * @factor,0) < 1000
      BEGIN
         SET @value = @value * @factor
         SET @power = CASE @power COLLATE SQL_Latin1_General_CP1_CS_AS -- for each loop adjust the value type to the next lower size
                           WHEN ''''n'''' THEN ''''p'''' -- nano  > pico
                           WHEN ''''u'''' THEN ''''n'''' -- micro > nano
                           WHEN ''''m'''' THEN ''''u'''' -- milli > micro
                           WHEN ''''''''  THEN ''''m'''' -- deka  > milli
                           WHEN ''''K'''' THEN ''''''''  -- kilo  > deka
                           WHEN ''''M'''' THEN ''''K'''' -- mega  > kilo
                           WHEN ''''G'''' THEN ''''M'''' -- giga  > mega
                           WHEN ''''T'''' THEN ''''G'''' -- tera  > giga
                           WHEN ''''P'''' THEN ''''T'''' -- peta  > tera
                           WHEN ''''E'''' THEN ''''P'''' -- exa   > peta
                           WHEN ''''Z'''' THEN ''''E'''' -- zetta > exa
                           WHEN ''''Y'''' THEN ''''Z'''' -- yotta > zetta
                           ELSE ''''#''''
                      END
      END -- WHILE ROUND(@value,0) < 1000
   END    -- IF ROUND(@value,0) < 1000

   -- Calcs - if more than 3 digits to LEFT of decimal, divide to show next larger power --------------------------------------------------
   ELSE IF ROUND(@value,0) > 999
   BEGIN
      WHILE ROUND(@value,0) > 999
      BEGIN
         SET @value = @value / @factor
         SET @power = CASE @power COLLATE SQL_Latin1_General_CP1_CS_AS  -- for each loop adjust the value type to the next higher size
                           WHEN ''''p'''' THEN ''''n'''' -- pico  > nano
                           WHEN ''''n'''' THEN ''''u'''' -- nano  > micro
                           WHEN ''''u'''' THEN ''''m'''' -- micro > milli
                           WHEN ''''m'''' THEN ''''''''  -- milli > deka
                           WHEN ''''''''  THEN ''''K'''' -- deka  > kilo
                           WHEN ''''K'''' THEN ''''M'''' -- kilo  > mega
                           WHEN ''''M'''' THEN ''''G'''' -- mega  > giga
                           WHEN ''''G'''' THEN ''''T'''' -- giga  > tera
                           WHEN ''''T'''' THEN ''''P'''' -- tera  > peta
                           WHEN ''''P'''' THEN ''''E'''' -- peta  > exa
                           WHEN ''''E'''' THEN ''''Z'''' -- exa   > zetta
                           WHEN ''''Z'''' THEN ''''Y'''' -- zetta > yotta
                           ELSE ''''#''''
                      END
      END -- WHILE ROUND(@value,0) > 999
   END

   RETURN CASE WHEN ROUND(@value,0) >= 100 THEN LEFT(ROUND(CAST(@value AS DECIMAL(5,2)),0),3)
               WHEN ROUND(@value,1) >=  10 THEN LEFT(ROUND(CAST(@value AS DECIMAL(5,2)),1),4)
               ELSE                             LEFT(ROUND(CAST(@value AS DECIMAL(5,2)),2),4)
          END + @power + @suffix COLLATE DATABASE_DEFAULT

END'')
');

GO -- end of stored procedure/function/T-SQL script/CREATE VIEW

/******************************************************************************************************************************************/
-- function tempdb.dbo.SQLXL_DHMSM - return a formatted date/time value
/******************************************************************************************************************************************/
RAISERROR ('... tempdb.dbo.SQLXL_DTTM_HMSM',0,0) WITH NOWAIT;

EXEC (N'USE tempdb;
      IF OBJECT_ID(N''dbo.SQLXL_DTTM_HMSM'') IS NULL 
         EXEC(N''CREATE FUNCTION dbo.SQLXL_DTTM_HMSM() RETURNS BIT AS BEGIN RETURN 0 END'')
     ')

EXEC (N'USE tempdb;
EXEC(N''
ALTER FUNCTION dbo.SQLXL_DTTM_HMSM
      (@dt DATETIME
      )
/* Returns absolute date & time value as "#.## Day" -or- "#.## Hour" -or- "MM:SS:mmm" */
RETURNS NCHAR(9)
AS
BEGIN
   IF @dt IS NULL RETURN N''''''''

   DECLARE @df FLOAT = CONVERT(FLOAT,@dt,1)

   RETURN

   CASE WHEN @df  = -1        THEN N''''NO LIMIT''''
        WHEN @df  =  0        THEN N''''00:00:000''''
                              
        WHEN @df >=  1.0      THEN tempdb.dbo.SQLXL_3SD(@df,N''''N'''')+N'''' Day''''

        WHEN @df >=  1.0/24.0 THEN tempdb.dbo.SQLXL_3SD(@df * 24.0,N''''N'''')+N'''' Hrs''''

        ELSE RIGHT(CONVERT(NVARCHAR(12),@dt,114),9)

   END COLLATE DATABASE_DEFAULT

END'')
');

GO

/******************************************************************************************************************************************/
-- function tempdb.dbo.SQLXL_INT_DTTM - Converts BIGINT time count to DATETIME (e.g. MILLISECOND)
/******************************************************************************************************************************************/
RAISERROR ('... tempdb.dbo.SQLXL_INT_DTTM',0,0) WITH NOWAIT;

EXEC (N'USE tempdb;
      IF OBJECT_ID(N''dbo.SQLXL_INT_DTTM'') IS NULL 
         EXEC(N''CREATE FUNCTION dbo.SQLXL_INT_DTTM() RETURNS BIT AS BEGIN RETURN 0 END'')
     ')

EXEC (N'USE tempdb;
EXEC(N''
ALTER FUNCTION dbo.SQLXL_INT_DTTM
      (@cnt  BIGINT   = NULL
      ,@prt  NCHAR(3) = N''''ms'''' -- datepart, defaults to MILLISECONDS
      )
/* Converts elapsed count to DateTime */
RETURNS DATETIME
AS
BEGIN
   IF @cnt IS NULL RETURN 0

   WHILE @cnt > 2147483647 -- max size for DATEADD parameter
   BEGIN 
      IF @prt = N''''dd''''  BEGIN SET @prt = N''''wk''''  SET @cnt = @cnt /   7 END
      IF @prt = N''''hh''''  BEGIN SET @prt = N''''dd''''  SET @cnt = @cnt /  24 END
      IF @prt = N''''mi''''  BEGIN SET @prt = N''''hh''''  SET @cnt = @cnt /  60 END
      IF @prt = N''''ss''''  BEGIN SET @prt = N''''mi''''  SET @cnt = @cnt /  60 END
      IF @prt = N''''ms''''  BEGIN SET @prt = N''''ss''''  SET @cnt = @cnt /1000 END
      IF @prt = N''''mcs'''' BEGIN SET @prt = N''''ms''''  SET @cnt = @cnt /1000 END
      IF @prt = N''''ns''''  BEGIN SET @prt = N''''mcs'''' SET @cnt = @cnt /1000 END
   END

   RETURN 
      CASE @prt
           WHEN N''''wk''''  THEN DATEADD(wk ,@cnt,0)
           WHEN N''''dd''''  THEN DATEADD(dd ,@cnt,0)
           WHEN N''''hh''''  THEN DATEADD(hh ,@cnt,0)
           WHEN N''''mi''''  THEN DATEADD(mi ,@cnt,0)
           WHEN N''''ss''''  THEN DATEADD(ss ,@cnt,0)
           WHEN N''''ms''''  THEN DATEADD(ms ,@cnt,0)
           WHEN N''''mcs'''' THEN DATEADD(mcs,@cnt,0)
           WHEN N''''ns''''  THEN DATEADD(ns ,@cnt,0)
           END 
END'')
');

GO
