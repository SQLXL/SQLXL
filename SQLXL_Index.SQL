-- VERSION 24.11.01
/******************************************************************************************************************************************\
NOTE: All SQLXL helper functions are created in the database your SSMS, ADS, dBeaver etc. session is connected to,
since you can't create temporary (#) functions

After clicking the "Get SQL Data" button in the spreadsheet or executing the SQLCMD script to create the text file they will be deleted.
                                                                                                                   ---------------------
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
Copyright (C) 2024 Practice Computing Management Inc.
All rights reserved.

MIT License, http://www.opensource.org/licenses/mit-license.php
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
(the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Credit to Brent Ozar Unlimited for the BI### Check IDs included in the Diagnostics. Source for these is found at
https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md

\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
SQL Server Major Versions & Default Compatibility leveld (as of September 2024)
-------------------------------------------------------------------------------------
Azure SQL DB   - 16   - 160
Azure SQL MI   - 16   - 150
        2022   - 16   - 160
        2019   - 15   - 150
        2017   - 14   - 140
        2016   - 13   - 130
        2014   - 12   - 120
        2012   - 11   - 110
        2008R2 - 10.5 - 100 * NOT SUPPORTED BY SQLXL_Index *
        2008   - 10   - 100 * NOT SUPPORTED BY SQLXL_Index *
        2005   -  9   -  90 * NOT SUPPORTED BY SQLXL_Index *
        2000   -  8   -  80 * NOT SUPPORTED BY SQLXL_Index *

SQL Server Engine Editions including Azure
-------------------------------------------------------------------------------------
 1 = Personal or Desktop Engine (Not available in SQL Server 2005 (9.x) and later versions.)
 2 = Standard (For Standard, Web, and Business Intelligence.)
 3 = Enterprise (For Evaluation, Developer, and Enterprise editions.)
 4 = Express (For Express, Express with Tools, and Express with Advanced Services)

 5 = Azure SQL Database
 6 = Azure Synapse Analytics            * NOT SUPPORTED BY SQLXL_Index *
 8 = Azure SQL Managed Instance
 9 = Azure SQL Edge                     * NOT SUPPORTED BY SQLXL_Index *
11 = Azure Synapse serverless SQL pools * NOT SUPPORTED BY SQLXL_Index *

Database Compatibility Level
-------------------------------------------------------------------------------------
If Database compatibility level is less than SQL 2012 (11) then TRY_CONVERT & TRY_CAST do not work.
They are omitted from the code for now.

\******************************************************************************************************************************************/

--------------------------------------------------------------------------------------------------------------------------
-- SQLXL does not support on-premise SQL Server prior to 2012
-- Let the user know if this won't run on their version of SQL Server
--------------------------------------------------------------------------------------------------------------------------
IF  CAST(SERVERPROPERTY(N'EngineEdition')       AS INT) <=  4 -- On premise engine editions
AND CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) <  11 -- SQL2012
   RAISERROR ('
*****************************************************************************
*****************************************************************************
*** Oops! SQLXL_INDEX requires on-prem SQL Server Version 2012 or higher  ***
***      This uses the SQL "IIF" function introduced in SQL 2012          ***
*****************************************************************************
*****************************************************************************

*****************************************************************************
***                   SQLXL creation script is exiting                    ***
*****************************************************************************

',20,-1) WITH LOG;
GO

------------------------------------------------------------------------------------------------------------------------------
-- Azure SQL Database connected to MASTER database.
-- Note - SQL DB does not allow for the "USE dbname" command and does not allow qualifying objects with their database names
-- Let the user know if this won't run on their version of SQL Server
------------------------------------------------------------------------------------------------------------------------------
IF SERVERPROPERTY(N'EngineEdition') = 5         -- Azure SQL Database
AND LOWER(DB_NAME())                = N'master' -- non-user database
   RAISERROR ('
************************************************************************
************************************************************************
***  Oops! On Azure SQL Database SQLXL_INDEX does not run on MASTER  ***
*** database. Please change your connection to your created database ***
************************************************************************
************************************************************************

************************************************************************
***               SQLXL creation script is exiting                   ***
************************************************************************

',20,-1) WITH LOG;
GO

--------------------------------------------------------------------------------------------------------------------------
-- Azure editions not supported
-- Let the user know if this won't run on their version of SQL Server
--------------------------------------------------------------------------------------------------------------------------
IF CAST(SERVERPROPERTY(N'EngineEdition') AS INT) IN ( 6 -- Azure Synapse Analytics
                                                    , 9 -- Azure SQL Edge (For all editions of Azure SQL Edge)
                                                    ,11 -- Azure Synapse serverless SQL pools
                                                    )
   RAISERROR ('
**********************************************************************
**********************************************************************
***     Oops! SQLXL_INDEX does not run on Azure products           ***
*** Synapse Analytics, Edge, and Synapse Serverless SQL Pools      ***
**********************************************************************
**********************************************************************

**********************************************************************
***               SQLXL creation script is exiting                 ***
**********************************************************************

',20,-1) WITH LOG;
GO

/******************************************************************************************************************************************\
 Creation Session settings
\******************************************************************************************************************************************/
SET ANSI_NULLS               ON; -- Specifies ISO compliant behavior of (=) and (<>) comparison operators when used with null values
SET ANSI_WARNINGS            ON; -- Specifies ISO standard behavior for several error conditions. Must be ON with FOR XML statements
SET ARITHABORT               ON; -- Terminates a query when an overflow or divide-by-zero error occurs during query execution
SET ARITHIGNORE             OFF; -- Controls whether error messages are returned from overflow or divide-by-zero errors during a query
SET CURSOR_CLOSE_ON_COMMIT  OFF; -- OFF means that the server will not close cursors when you commit a transaction
SET DATEFORMAT              YMD; -- Sets the order of the month, day, and year date parts for interpreting date&time strings
SET DEADLOCK_PRIORITY       -10; -- Specifies the relative importance of the current session if deadlocked. (-10) is lowest priority
SET FMTONLY                 OFF; -- Returns only metadata to client. Used to test the response format without actually running the query
SET FORCEPLAN               OFF; -- When ON, optimizer uses FORCE ORDER + NESTED LOOP JOIN for FROM clause tables
SET IMPLICIT_TRANSACTIONS   OFF; -- When OFF, sets the connection to autocommit transaction mode
SET LOCK_TIMEOUT           1000; -- Specifies the number of milliseconds a statement waits for a lock to be released
SET NOCOUNT                  ON; -- Stops the message showing the count of rows affected by a statement or stored procedure
SET NOEXEC                  OFF; -- Compiles each query but does not execute it
SET NUMERIC_ROUNDABORT      OFF; -- Specifies the level of error reporting generated when rounding causes a loss of precision
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute
SET QUOTED_IDENTIFIER        ON; -- Causes SQL Server to follow ISO rules using quotation mark delimiting identifiers and literal strings
SET ROWCOUNT                  0; -- Stop processing after specified number of rows are returned. "0" all rows are returned
SET STATISTICS IO,PROFILE,TIME,XML OFF; -- Displays information on statement resource usage
SET TEXTSIZE         2147483647; -- Specifies size of BLOB returned by a SELECT statement. Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON; -- Automatically roll back the current transaction when a statement raises a run-time error

/******************************************************************************************************************************************\
 Temporarily create other procs called to avoid warningmessages.
 NOTE: functions cannot be created as temporary objects
\******************************************************************************************************************************************/
BEGIN TRY
   EXEC (N'CREATE PROCEDURE [##SQLXL_Instance] AS RETURN 0;')
END TRY
BEGIN CATCH
END CATCH
GO

/******************************************************************************************************************************************\
 Create the procedure [##SQLXL_Index] - captures source index data, organizes, and investigates for improvement opportunities
\******************************************************************************************************************************************/
BEGIN TRY
   EXEC (N'CREATE PROCEDURE [##SQLXL_Index] AS RETURN 0;')
END TRY
BEGIN CATCH
END CATCH
GO

 ALTER PROCEDURE [##SQLXL_Index]
      (@database_name                    SYSNAME = N''
       -- Asterisk ("*") for all databases including system
       -- NULL for all user (non-system) databases
       -- "database name" for a single database
      ,@cover_foreign_keys               TINYINT = 2
       --  0 = no need to continue to cover Foreign Key Constraints, do not create new indexes based on MISSING index recommendations
       --  1 = continue to cover keys that are TRUSTED, ENABLED, and REPLICATED & are DELETE or UPDATE referential action enabled
       --      Includes creating new indexes based on MISSING index recommendations
       --  2 = continue to cover all Foreign Key Constraints that are TRUSTED, ENABLED, and REPLICATED
       --      Includes creating new indexes based on MISSING index recommendations
       --  3 = continue to cover all Foreign Key Constraints regardless of status
       --      Includes creating new indexes based on MISSING index recommendations
      ,@create_Nonclustered_columnstores TINYINT = 1
       -- 0 = NO
       -- 1 = YES
      --------------------------------------------------------------------------------------------------------------------------------------
      -- priority computation weightings. relative values to apply to each of the corresponding metrics.
      -- larger value means higher weighting assigned to that metric
      --------------------------------------------------------------------------------------------------------------------------------------
      ,@Prio_wait_time             SMALLINT = 100
      ,@Prio_wait_count            SMALLINT =  50
      ,@Prio_locks                 SMALLINT =  20
      ,@Prio_lock_promotions       SMALLINT =  60
      ,@Prio_lock_promotion_fails  SMALLINT = 100
      ,@Prio_page_splits           SMALLINT =  60
      ,@Prio_page_merges           SMALLINT =  60
      ,@Prio_OPS_forwarded_fetches SMALLINT =  30
      ,@Prio_missing_indexes       SMALLINT =  60
      ,@Prio_OPS_writes            SMALLINT =  30
      ,@Prio_buffer_cache_used     SMALLINT =  80
      ,@Prio_OPS_read_write_ratio  SMALLINT =  15 -- Note: starts with 4X as the "zero" value and works backwards from there
      ,@Prio_reads                 SMALLINT =  10
      ,@Prio_scans                 SMALLINT =  40
      ,@Prio_lookups               SMALLINT =  60
      ,@Prio_LOB                   SMALLINT =  80
      ,@xtp_Priority_deflator      SMALLINT =  10
      )
  WITH RECOMPILE -- forces the procedure to recompile every time it’s executed. Avoids placing queries into PLAN CACHE

AS

DECLARE @msg NVARCHAR(4000);
--------------------------------------------------------------------------------------------------------------------------------------------
-- Selected database not found from current connection
--------------------------------------------------------------------------------------------------------------------------------------------
IF @database_name COLLATE database_default NOT IN (N'' COLLATE database_default,N'*' COLLATE database_default) BEGIN
   IF NOT EXISTS (SELECT NULL
                   FROM [sys].[databases]
                  WHERE name COLLATE database_default = @database_name COLLATE database_default
                )
   BEGIN
      SET @msg = N'
**********************************************************************
--**********************************************************************
--    Oops! The selected database ' + QUOTENAME(@database_name) COLLATE database_default + N'
--***              was not found in this instance                    ***
--**********************************************************************
--**********************************************************************
--
--**********************************************************************
--***                   SQLXL_Index is exiting                       ***
--**********************************************************************
'
--      RAISERROR (@msg,20,-1) WITH LOG;
   END; -- IF NOT EXISTS (SELECT NULL FROM [sys].[databases] WHERE name = @database_name)
END;    -- IF @database_name NOT IN (N'',N'*')

/******************************************************************************************************************************************\
 Procedure Environment settings
\******************************************************************************************************************************************/
SET ANSI_NULLS               ON; -- Specifies ISO compliant behavior of (=) and (<>) comparison operators when used with null values
SET ANSI_WARNINGS            ON; -- Specifies ISO standard behavior for several error conditions. Must be ON with FOR XML statements
SET ARITHABORT               ON; -- Terminates a query when an overflow or divide-by-zero error occurs during query execution
SET ARITHIGNORE             OFF; -- Controls whether error messages are returned from overflow or divide-by-zero errors during a query
SET CURSOR_CLOSE_ON_COMMIT  OFF; -- OFF means that the server will not close cursors when you commit a transaction
SET DATEFORMAT              YMD; -- Sets the order of the month, day, and year date parts for interpreting date&time strings
SET DEADLOCK_PRIORITY       -10; -- Specifies the relative importance of the current session if deadlocked. (-10) is lowest priority
SET FMTONLY                 OFF; -- Returns only metadata to client. Used to test the response format without actually running the query
SET FORCEPLAN               OFF; -- When ON, optimizer uses FORCE ORDER + NESTED LOOP JOIN for FROM clause tables
SET IMPLICIT_TRANSACTIONS   OFF; -- When OFF, sets the connection to autocommit transaction mode
SET LOCK_TIMEOUT           1000; -- Specifies the number of milliseconds a statement waits for a lock to be released
SET NOCOUNT                  ON; -- Stops the message showing the count of rows affected by a statement or stored procedure
SET NOEXEC                  OFF; -- Compiles each query but does not execute it
SET NUMERIC_ROUNDABORT      OFF; -- Specifies the level of error reporting generated when rounding causes a loss of precision
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute
SET QUOTED_IDENTIFIER        ON; -- Causes SQL Server to follow ISO rules using quotation mark delimiting identifiers and literal strings
SET ROWCOUNT                  0; -- Stop processing after specified number of rows are returned. "0" all rows are returned
SET STATISTICS IO,PROFILE,TIME,XML OFF; -- Displays information on statement resource usage
SET TEXTSIZE         2147483647; -- Specifies size of BLOB returned by a SELECT statement. Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON; -- Automatically roll back the current transaction when a statement raises a run-time error

/******************************************************************************************************************************************\
 Local Procedure variables
\******************************************************************************************************************************************/
DECLARE -- Used for database cursor below ----------------------------------------------------------
        @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = CASE WHEN @database_name IS NULL
                                             THEN N''                       COLLATE DATABASE_DEFAULT
                                             WHEN @database_name = N'*'     COLLATE DATABASE_DEFAULT
                                             THEN @database_name            COLLATE DATABASE_DEFAULT
                                             ELSE QUOTENAME(@database_name) COLLATE DATABASE_DEFAULT
                                        END
       ---------------------------------------------------------------------------------------------
       ,@sql       NVARCHAR(MAX)
       ,@exec_dttm DATETIME = GETDATE()
       ,@i         INT      = 1            -- database cursor loop counter, starts at 1
       ,@rowcount  BIGINT
       -----------------------------
       ,@ssms_ads  TINYINT  = (SELECT (1)
                                 FROM [sys].[dm_exec_sessions]
                                WHERE session_id = @@SPID
                                  AND (   program_name LIKE N'Microsoft SQL Server Management Studio%'
                                       OR program_name LIKE N'azdata%' --azure data studio
                                       OR program_name    = N'SQLCMD'
                                      )
                              );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   RAISERROR(N'Starting SQLXL_Index data collection',0,0) WITH NOWAIT;
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'MM:SS:hhh SQLXL Index Job Step',0,0) WITH NOWAIT;
   RAISERROR(N'--------- -------------------------------------------------------------------------------------',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Create persisted tables to capture platform information.
\******************************************************************************************************************************************/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_Startup];
END TRY
BEGIN CATCH
END CATCH

-- Instance Startup Parameters
SELECT collation           = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME()) COLLATE DATABASE_DEFAULT
      ,collection_DTTM     = GETDATE()
      ,EngineEdition       = CAST(SERVERPROPERTY(N'EngineEdition')       AS INT)
      ,ProductMajorVersion = CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)
      ,ProductBuild        = CAST(SERVERPROPERTY(N'ProductBuild')        AS INT)
  INTO [##SQLXL_Index_Startup];

/******************************************************************************************************************************************\
 Get instance information
\******************************************************************************************************************************************/
EXEC [##SQLXL_Instance]

/******************************************************************************************************************************************\
 Create ##SQLXL_Index_sys_availability_replicas
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation FROM [##SQLXL_Index_Startup])
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i             INT           = 1
       ,@sql           NVARCHAR(MAX)
       ,@ssms_ads      TINYINT       = 2
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_availability_replicas];
END TRY
BEGIN CATCH
END CATCH

SELECT TOP (0)
       replica_id                            = CONVERT(UNIQUEIDENTIFIER,NULL)
      ,group_id                              = CONVERT(UNIQUEIDENTIFIER,NULL)
      ,replica_metadata_id                   = CONVERT(INT,NULL)
      ,replica_server_name                   = CONVERT(NVARCHAR(256),NULL) COLLATE DATABASE_DEFAULT
--    ,owner_sid -- varbinary(85) Security identifier (SID) registered to this server instance
      ,endpoint_url                          = CONVERT(NVARCHAR(128),NULL) COLLATE DATABASE_DEFAULT
      ,availability_mode                     = CONVERT(TINYINT,NULL)
      ,availability_mode_desc                = CONVERT(NVARCHAR(60),NULL)  COLLATE DATABASE_DEFAULT
      ,failover_mode                         = CONVERT(TINYINT,NULL)
      ,failover_mode_desc                    = CONVERT(NVARCHAR(60),NULL)  COLLATE DATABASE_DEFAULT
      ,session_timeout                       = CONVERT(INT,NULL)
      ,primary_role_allow_connections        = CONVERT(TINYINT,NULL)
      ,primary_role_allow_connections_desc   = CONVERT(NVARCHAR(60),NULL)  COLLATE DATABASE_DEFAULT
      ,secondary_role_allow_connections      = CONVERT(TINYINT,NULL)
      ,secondary_role_allow_connections_desc = CONVERT(NVARCHAR(60),NULL)  COLLATE DATABASE_DEFAULT
      ,create_date                           = CONVERT(DATETIME,NULL)
      ,modify_date                           = CONVERT(DATETIME,NULL)
      ,backup_priority                       = CONVERT(INT,NULL)
      ,read_only_routing_url                 = CONVERT(NVARCHAR(256),NULL) COLLATE DATABASE_DEFAULT
      ,read_write_routing_url                = CONVERT(NVARCHAR(256),NULL) COLLATE DATABASE_DEFAULT
      ,seeding_mode                          = CONVERT(TINYINT,NULL)
      ,seeding_mode_desc                     = CONVERT(NVARCHAR(60),NULL)  COLLATE DATABASE_DEFAULT
  INTO [##SQLXL_Index_sys_availability_replicas]
OPTION (MAXDOP 1,RECOMPILE);

/******************************************************************************************************************************************\
 Collect [sys].[availability_replicas]
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
IF object_id('[sys].[availability_replicas]') IS NOT NULL
-------------------------------------------------------------------------
WITH newcol AS (-- columns added after SQL Server 2005. Semicolon not needed since CTE is inside IF statement
SELECT -- SQL 2019+ ---------------------------------
       read_write_routing_url = CONVERT(SYSNAME,NULL)
      ,seeding_mode           = CONVERT(TINYINT,NULL)
      ,seeding_mode_desc      = CONVERT(SYSNAME,NULL)
)
INSERT
  INTO [##SQLXL_Index_sys_availability_replicas]
      (replica_id
      ,group_id
      ,replica_metadata_id
      ,replica_server_name
--    ,owner_sid -- varbinary(85) Security identifier (SID) registered to this server instance
      ,endpoint_url
      ,availability_mode
      ,availability_mode_desc
      ,failover_mode
      ,failover_mode_desc
      ,session_timeout
      ,primary_role_allow_connections
      ,primary_role_allow_connections_desc
      ,secondary_role_allow_connections
      ,secondary_role_allow_connections_desc
      ,create_date
      ,modify_date
      ,backup_priority
      ,read_only_routing_url
      ,read_write_routing_url
      ,seeding_mode
      ,seeding_mode_desc
      )
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[availability_replicas]
SELECT replica_id
      ,group_id
      ,replica_metadata_id
      ,replica_server_name                   = replica_server_name                   COLLATE DATABASE_DEFAULT
--    ,owner_sid -- varbinary(85) Security identifier (SID) registered to this server instance
      ,endpoint_url                          = endpoint_url                          COLLATE DATABASE_DEFAULT
      ,availability_mode
      ,availability_mode_desc                = availability_mode_desc                COLLATE DATABASE_DEFAULT
      ,failover_mode
      ,failover_mode_desc                    = failover_mode_desc                    COLLATE DATABASE_DEFAULT
      ,session_timeout
      ,primary_role_allow_connections
      ,primary_role_allow_connections_desc   = primary_role_allow_connections_desc   COLLATE DATABASE_DEFAULT
      ,secondary_role_allow_connections
      ,secondary_role_allow_connections_desc = secondary_role_allow_connections_desc COLLATE DATABASE_DEFAULT
      ,create_date
      ,modify_date
      ,backup_priority
      ,read_only_routing_url                 = read_only_routing_url                 COLLATE DATABASE_DEFAULT
      ,read_write_routing_url                = read_write_routing_url                COLLATE DATABASE_DEFAULT
      ,seeding_mode
      ,seeding_mode_desc                     = seeding_mode_desc                     COLLATE DATABASE_DEFAULT
  FROM [sys].[availability_replicas]
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' Instance [sys].[availability_replicas]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_hadr_availability_replica_states]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_hadr_availability_replica_states]
END TRY
BEGIN CATCH
END CATCH

SELECT TOP (0)
       replica_id                                  = CONVERT(UNIQUEIDENTIFIER,NULL)
      ,group_id                                    = CONVERT(UNIQUEIDENTIFIER,NULL)
      ,is_local                                    = CONVERT(BIT,NULL)
      ,role                                        = CONVERT(TINYINT,NULL)
      ,role_desc                                   = CONVERT(NVARCHAR(60),NULL)   COLLATE DATABASE_DEFAULT
      ,operational_state                           = CONVERT(TINYINT,NULL)
      ,operational_state_desc                      = CONVERT(NVARCHAR(60),NULL)   COLLATE DATABASE_DEFAULT
      ,connected_state                             = CONVERT(TINYINT,NULL)
      ,connected_state_desc                        = CONVERT(NVARCHAR(60),NULL)   COLLATE DATABASE_DEFAULT
      ,recovery_health                             = CONVERT(TINYINT,NULL)
      ,recovery_health_desc                        = CONVERT(NVARCHAR(60),NULL)   COLLATE DATABASE_DEFAULT
      ,synchronization_health                      = CONVERT(TINYINT,NULL)
      ,synchronization_health_desc                 = CONVERT(NVARCHAR(60),NULL)   COLLATE DATABASE_DEFAULT
      ,write_lease_remaining_ticks                 = CONVERT(BIGINT,NULL)
      ,current_configuration_commit_start_time_utc = CONVERT(DATETIMEOFFSET,NULL)
--    ,last_connect_error_number                   = CONVERT(TINYINT,NULL)                                 -- Omitted since unused
--    ,last_connect_error_description              = CONVERT(NVARCHAR(1024),NULL) COLLATE DATABASE_DEFAULT -- Omitted since unused
--    ,last_connect_error_timestamp                = CONVERT(DATETIME,NULL)                                -- Omitted since unused
--    ,write_lease_remaining_ticks                 = CONVERT(BIGINT,NULL)                                  -- Omitted since unused
--    ,current_configuration_commit_start_time_utc = CONVERT(DATETIMEOFFSET,NULL)                          -- Omitted since unused
  INTO [##SQLXL_Index_sys_dm_hadr_availability_replica_states]
OPTION (MAXDOP 1,RECOMPILE);

IF object_id('[sys].[dm_hadr_availability_replica_states]') IS NOT NULL
WITH newcol AS (-- columns added after SQL Server 2005. Semicolon not needed since CTE is inside IF statement
SELECT -- SQL 2017+ -------------------------------------------------------
       write_lease_remaining_ticks                 = CONVERT(BIGINT  ,NULL)
      ,current_configuration_commit_start_time_utc = CONVERT(DATETIMEOFFSET ,NULL)
)
INSERT
  INTO [##SQLXL_Index_sys_dm_hadr_availability_replica_states]
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[dm_hadr_availability_replica_states]
SELECT replica_id
      ,group_id
      ,is_local
      ,role
      ,role_desc                                   = role_desc                                 COLLATE DATABASE_DEFAULT
      ,operational_state
      ,operational_state_desc                      = operational_state_desc                    COLLATE DATABASE_DEFAULT
      ,connected_state
      ,connected_state_desc                        = connected_state_desc                      COLLATE DATABASE_DEFAULT
      ,recovery_health
      ,recovery_health_desc                        = recovery_health_desc                      COLLATE DATABASE_DEFAULT
      ,synchronization_health
      ,synchronization_health_desc                 = synchronization_health_desc               COLLATE DATABASE_DEFAULT
      ,write_lease_remaining_ticks
      ,current_configuration_commit_start_time_utc
--    ,last_connect_error_number                   -- Omitted since unused
--    ,last_connect_error_description              -- Omitted since unused
--    ,last_connect_error_timestamp                -- Omitted since unused
--    ,write_lease_remaining_ticks                 -- Omitted since unused
--    ,current_configuration_commit_start_time_utc -- Omitted since unused
  FROM [sys].[dm_hadr_availability_replica_states]
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' Instance [sys].[dm_hadr_availability_replica_states]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
Collect [sys].[databases] info - use collation here to avoid collation issues later.
Use the database_id's from this table to filter further data collection.

NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
      https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/

In Azure SQL Database:
---------------------
- from BOL: DB_ID may not return the same value as the database_id column in [sys].[databases] and
sys.database_service_objectives. These two views return database_id values that are unique within the logical server, while DB_ID
and the database_id column in other system views return values that are unique within a single database or within an elastic pool.

- [sys].[databases] is available in the master database and in user databases. In the master database, this view returns the
information on the master database and all user databases on the server. In a user database, this view returns information only on
the current database and the master database.

- to simplify all database references to SQLDB will use DB_ID()
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
       ,@ssms_ads      TINYINT       = 1
       ,@database_name SYSNAME       = N'WIDEWORLDIMPORTERS';

--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_databases]
END TRY
BEGIN CATCH
END CATCH

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2008+ ---------------------------------------------------------------
       log_reuse_wait                              = CONVERT(TINYINT         ,NULL)
      ,log_reuse_wait_desc                         = CONVERT(NVARCHAR(120)   ,NULL) COLLATE DATABASE_DEFAULT
      ,is_cdc_enabled                              = CONVERT(BIT             ,NULL)
      ,is_memory_optimized_elevate_to_snapshot_on  = CONVERT(BIT             ,NULL)
      -- SQL 2012+ ----------------------------------------------------------------
      ,replica_id                                  = CONVERT(UNIQUEIDENTIFIER,NULL)
      ,group_database_id                           = CONVERT(UNIQUEIDENTIFIER,NULL)
      ,default_language_lcid                       = CONVERT(SMALLINT        ,NULL)
      ,default_language_name                       = CONVERT(NVARCHAR(256)   ,NULL) COLLATE DATABASE_DEFAULT
      ,default_fulltext_language_lcid              = CONVERT(INT             ,NULL)
      ,default_fulltext_language_name              = CONVERT(NVARCHAR(256)   ,NULL) COLLATE DATABASE_DEFAULT
      ,is_nested_triggers_on                       = CONVERT(BIT             ,NULL)
      ,is_transform_noise_words_on                 = CONVERT(BIT             ,NULL)
      ,two_digit_year_cutoff                       = CONVERT(SMALLINT        ,NULL)
      ,containment                                 = CONVERT(TINYINT         ,NULL)
      ,containment_desc                            = CONVERT(NVARCHAR(120)   ,NULL) COLLATE DATABASE_DEFAULT
      ,target_recovery_time_in_seconds             = CONVERT(INT             ,NULL)
      -- SQL 2014+ ----------------------------------------------------------------
      ,resource_pool_id                            = CONVERT(INT             ,NULL)
      ,is_auto_create_stats_incremental_on         = CONVERT(BIT             ,NULL)
      -- SQL 2014+,Azure SQL Database ---------------------------------------------
      ,delayed_durability                          = CONVERT(INT             ,NULL)
      ,delayed_durability_desc                     = CONVERT(NVARCHAR(120)   ,NULL) COLLATE DATABASE_DEFAULT
      -- SQL 2016+ ----------------------------------------------------------------
      ,is_query_store_on                           = CONVERT(BIT             ,NULL)
      ,is_remote_data_archive_enabled              = CONVERT(BIT             ,NULL)
      ,is_mixed_page_allocation_on                 = CONVERT(BIT             ,NULL)
      -- SQL 2017+ ----------------------------------------------------------------
      ,is_temporal_history_retention_enabled       = CONVERT(BIT             ,NULL)
      -- SQL 2019+,Azure SQL Database ---------------------------------------------
      ,physical_database_name                      = CONVERT(NVARCHAR(256)   ,NULL) COLLATE DATABASE_DEFAULT
      ,is_accelerated_database_recovery_on         = CONVERT(BIT             ,NULL)
      ,is_memory_optimized_enabled                 = CONVERT(BIT             ,NULL)
      -- SQL 2022+ ----------------------------------------------------------------
      ,is_change_feed_enabled                      = CONVERT(BIT             ,NULL)
      ,is_data_retention_enabled                   = CONVERT(BIT             ,NULL)
      -- Azure Synapse Analytics Gen2 ---------------------------------------------
      ,is_result_set_caching_on                    = CONVERT(BIT             ,NULL)
      ,is_tempdb_spill_to_remote_store             = CONVERT(BIT             ,NULL)
      ,is_stale_page_detection_on                  = CONVERT(BIT             ,NULL)
      -- Azure SQL Database -------------------------------------------------------
      ,catalog_collation_type                      = CONVERT(INT             ,NULL)
      ,catalog_collation_type_desc                 = CONVERT(NVARCHAR(120)   ,NULL) COLLATE DATABASE_DEFAULT
      ,is_federation_member                        = CONVERT(BIT             ,NULL)
      ,is_ledger_on                                = CONVERT(BIT             ,NULL)
)
SELECT qry.*
  INTO [##SQLXL_Index_sys_databases]
  FROM newcol
 CROSS
 APPLY (-- [sys].[databases] -------------------------------------------------------------------------------------------
SELECT name                                        = db.name                                    COLLATE DATABASE_DEFAULT
                                                  -- db. required since database_id also in [sys].[change_tracking_databases]
      ,database_id                                 = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                                                        ,DB_ID()
                                                        ,db.database_id)
      ,source_database_id
--    ,owner_sid -- varbinary(85) SID (Security-Identifier) of the external owner of the database
      ,db.create_date
      ,compatibility_level
      ,collation_name                              = collation_name                             COLLATE DATABASE_DEFAULT
      ,user_access
      ,user_access_desc                            = user_access_desc                           COLLATE DATABASE_DEFAULT
      ,is_read_only
      ,is_auto_close_on
      ,is_auto_shrink_on
      ,state
      ,state_desc                                  = state_desc                                 COLLATE DATABASE_DEFAULT
      ,is_in_standby
      ,is_cleanly_shutdown
      ,is_supplemental_logging_enabled
      ,snapshot_isolation_state
      ,snapshot_isolation_state_desc               = snapshot_isolation_state_desc              COLLATE DATABASE_DEFAULT
      ,is_read_committed_snapshot_on
      ,recovery_model
      ,recovery_model_desc                         = recovery_model_desc                        COLLATE DATABASE_DEFAULT
      ,page_verify_option
      ,page_verify_option_desc                     = page_verify_option_desc                    COLLATE DATABASE_DEFAULT
      ,is_auto_create_stats_on
      ,is_auto_create_stats_incremental_on
      ,is_auto_update_stats_on
      ,is_auto_update_stats_async_on
      ,is_ansi_null_default_on
      ,is_ansi_nulls_on
      ,is_ansi_padding_on
      ,is_ansi_warnings_on
      ,is_arithabort_on
      ,is_concat_null_yields_null_on
      ,is_numeric_roundabort_on
      ,is_quoted_identifier_on
      ,is_recursive_triggers_on
      ,is_cursor_close_on_commit_on
      ,is_local_cursor_default
      ,is_fulltext_enabled
      ,is_trustworthy_on
      ,is_db_chaining_on
      ,is_parameterization_forced
      ,is_master_key_encrypted_by_server
      ,is_query_store_on
      ,is_published
      ,is_subscribed
      ,is_merge_published
      ,is_distributor
      ,is_sync_with_backup
      ,service_broker_guid
      ,is_broker_enabled
      ,log_reuse_wait
      ,log_reuse_wait_desc                         = log_reuse_wait_desc                        COLLATE DATABASE_DEFAULT
      ,is_date_correlation_on
      ,is_cdc_enabled
      ,is_encrypted
      ,is_honor_broker_priority_on
      ,db.replica_id
      ,group_database_id
      ,resource_pool_id
      ,default_language_lcid
      ,default_language_name                       = default_language_name                      COLLATE DATABASE_DEFAULT
      ,default_fulltext_language_lcid
      ,default_fulltext_language_name              = default_fulltext_language_name             COLLATE DATABASE_DEFAULT
      ,is_nested_triggers_on
      ,is_transform_noise_words_on
      ,two_digit_year_cutoff
      ,containment
      ,containment_desc                            = containment_desc                           COLLATE DATABASE_DEFAULT
      ,target_recovery_time_in_seconds
      ,delayed_durability
      ,delayed_durability_desc                     = delayed_durability_desc                    COLLATE DATABASE_DEFAULT
      ,is_memory_optimized_elevate_to_snapshot_on
      ,is_federation_member
      ,is_remote_data_archive_enabled
      ,is_mixed_page_allocation_on
      ,is_temporal_history_retention_enabled
      ,catalog_collation_type
      ,catalog_collation_type_desc                 = catalog_collation_type_desc                COLLATE DATABASE_DEFAULT
      ,physical_database_name                      = physical_database_name                     COLLATE DATABASE_DEFAULT
      ,is_result_set_caching_on
      ,is_accelerated_database_recovery_on
      ,is_tempdb_spill_to_remote_store
      ,is_stale_page_detection_on
      ,is_memory_optimized_enabled
      ,is_data_retention_enabled
      ,is_ledger_on
      ,is_change_feed_enabled
       -- [sys].[change_tracking_databases] ----------------------------------------------------------------------------
      ,is_auto_cleanup_on
      ,retention_period
      ,retention_period_units_desc                 = retention_period_units_desc                COLLATE DATABASE_DEFAULT
      ,retention_period_units
      ,ProductMajorVersion                         = CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)
       -- [sys].[availability_replicas] --------------------------------------------------------------------------------
      ,secondary_role_allow_connections_desc       = secondary_role_allow_connections_desc      COLLATE DATABASE_DEFAULT
       -- [sys].[dm_hadr_availability_replica_states] ------------------------------------------------------------------
      ,role_desc                                   = role_desc                                  COLLATE DATABASE_DEFAULT
  FROM [sys].[databases] AS db
  LEFT OUTER
  JOIN [sys].[change_tracking_databases] AS c
    ON IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
          ,c.database_id
          ,db.database_id) = c.database_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_availability_replicas] AS ar
    ON db.replica_id = ar.replica_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_hadr_availability_replica_states] AS rs
    ON ar.replica_id = rs.replica_id
) AS qry -- from CROSS APPLY
 WHERE (   (    @database_name = N'' COLLATE DATABASE_DEFAULT -- No selection made, all "user" databases
            AND (   LOWER(qry.name)
                     NOT IN (N'dbatools'
                            ,N'dbadmin'
                            ,N'dbmaintenance'
                            ,N'dwconfiguration'
                            ,N'dwdiagnostics'
                            ,N'dwqueue'
                            ,N'master'
                            ,N'managementdatawarehouse'
                            ,N'model'
                            ,N'msdb'
                            ,N'ssisdb'
                            ,N'tempdb'
                            )
                AND LOWER(qry.name) NOT LIKE N'reportserver%'
                AND LOWER(qry.name) NOT LIKE N'rdsadmin%'
               )
           )
        OR @database_name = qry.name                          -- 1 database requested
        OR @database_name = N'*'     COLLATE DATABASE_DEFAULT -- all databases including system
       )
   AND NOT (    CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL DB single database
            AND qry.name = N'Master'
           )
OPTION (MAXDOP 1,RECOMPILE);

SET @rowcount = @@ROWCOUNT;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Check if at least 1 database to be collected
--------------------------------------------------------------------------------------------------------------------------------------------
IF @rowcount = 0 BEGIN -- no database found to collect
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'*** No database(s) to process. Exiting ***',0,0) WITH NOWAIT;
   RETURN
END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' [sys].[databases],[change_tracking_databases] - '
            + CAST(@rowcount AS NVARCHAR(11))
            + N' database(s) found'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
--  create index on if not found on SQLXL_Index_sys_databases to speed up subsequent queries
--------------------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS (-- check if index already exists for this table. Create if not found
               SELECT NULL
                 FROM [sys].[indexes]
                WHERE name = N'ixuc_SQLXL_Index_sys_databases'
              )
BEGIN
   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Index_sys_databases__database_id
       ON [##SQLXL_Index_sys_databases]
         (database_id
         )
     WITH (DATA_COMPRESSION = PAGE
          ,MAXDOP = 1
          );

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
               + N' Index [ixuc_SQLXL_Index_sys_databases__database_id]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @exec_dttm = GETDATE();
   END; -- IF @ssms_ads > 0 BEGIN
END;    -- IF NOT EXISTS (

/******************************************************************************************************************************************\
Missing index details - includes [sys].[dm_db_missing_index_details]
                                 [sys].[dm_db_missing_index_groups]
                                 [sys].[dm_db_missing_index_group_stats]
Collect all missing indexes to get instance-level metrics
<FUTURE> filter using SYS_DATABASES
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT OFF
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_db_missing_index_details];
END TRY
BEGIN CATCH
END CATCH

SELECT --------------------------------------------------------------
       -- [sys].[dm_db_missing_index_details]
       --------------------------------------------------------------
       mid.index_handle
      ,database_id           = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                                  ,DB_ID()
                                  ,mid.database_id)
      ,mid.object_id
      ,statement             = mid.statement          COLLATE DATABASE_DEFAULT
      ,equality_columns      = mid.equality_columns   COLLATE DATABASE_DEFAULT
      ,inequality_columns    = mid.inequality_columns COLLATE DATABASE_DEFAULT
      ,included_columns      = mid.included_columns   COLLATE DATABASE_DEFAULT
      ,mig.index_group_handle
       --------------------------------------------------------------
       -- [sys].[dm_db_missing_index_group_stats]
       --------------------------------------------------------------
      ,migs.group_handle
      ,migs.unique_compiles
      ,migs.user_seeks
      ,migs.user_scans
      ,migs.last_user_seek
      ,migs.last_user_scan
      ,migs.avg_total_user_cost
      ,migs.avg_user_impact
      ,migs.system_seeks
      ,migs.system_scans
      ,migs.last_system_seek
      ,migs.last_system_scan
      ,migs.avg_total_system_cost
      ,migs.avg_system_impact
       --------------------------------------------------------------
       -- Added columns
       --------------------------------------------------------------
      ,mix_Advantage_AMT = 1.0 * ( (migs.user_seeks + (migs.user_scans * 4))      -- scans weighted heavier
                                  * migs.avg_total_user_cost
                                  * migs.avg_user_impact
                                 )                                                -- if values NULL retain NULL vale
                         + 1.0 * ( (migs.system_seeks + (migs.system_scans * 4))  -- scans weighted heavier
                                  * migs.avg_total_system_cost
                                  * migs.avg_system_impact
                                 )                                                -- if values NULL retain NULL vale
  INTO [##SQLXL_Index_sys_dm_db_missing_index_details]
  FROM [sys].[dm_db_missing_index_details]     AS mid
  LEFT OUTER MERGE
  JOIN [sys].[dm_db_missing_index_groups]      AS mig
    ON mid.index_handle       = mig.index_handle
  LEFT OUTER MERGE
  JOIN [sys].[dm_db_missing_index_group_stats] AS migs
    ON mig.index_group_handle = migs.group_handle
 WHERE mid.database_id = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                            ,DB_ID()
                            ,mid.database_id)
OPTION (MAXDOP 1,RECOMPILE,FORCE ORDER); -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' Instance [sys].[dm_db_missing_index_details] - includes index groups, group_stats'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- create index on SQLXL_Index_sys_dm_db_missing_index_details
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_missing_index_details
    ON [##SQLXL_Index_sys_dm_db_missing_index_details]
      (database_id
      ,object_id
      ,index_handle
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_dm_db_missing_index_details]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Missing index columns - [sys].[dm_db_missing_index_columns]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_db_missing_index_columns];
END TRY
BEGIN CATCH
END CATCH

SELECT --------------------------------------------------------------
       -- [sys].[dm_db_missing_index_details]
       --------------------------------------------------------------
       mid.database_id
      ,mid.object_id
      ,mid.index_handle
       --------------------------------------------------------------
       -- [sys].[dm_db_missing_index_columns]
       --------------------------------------------------------------
      ,mic.column_id
      ,column_name      = mic.column_name  COLLATE DATABASE_DEFAULT
      ,column_usage     = mic.column_usage COLLATE DATABASE_DEFAULT
  INTO [##SQLXL_Index_sys_dm_db_missing_index_columns]
  FROM [##SQLXL_Index_sys_dm_db_missing_index_details] AS mid
 CROSS
 APPLY [sys].[dm_db_missing_index_columns] (mid.index_handle) mic
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' Instance [sys].[dm_db_missing_index_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start [sys].[dm_db_missing_index_group_stats] - Most read query & query_text - Azure,SQL 2019',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Missing index Group Stats Query & query text - SQL 2019+, Azure SQL Database, Azure SQL Managed Instance
 Only get 1 query for each missing index, based on the query with highest benefit from the missing index
      and get the details for the plan with the most total reads in [sys].[dm_exec_query_stats] (if more than 1 found)

 Note from Brent Ozar:
 "The DMV is only supposed to have 600 rows in it
  If it's got more, they could see performance slowdowns from flushing out buffer and query cache due to over large memory grant"
  https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/issues/3085
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_db_missing_index_group_stats_query];
END TRY
BEGIN CATCH
END CATCH

SELECT TOP (0)
       group_handle                = CAST(NULL AS INT)
      ,query_hash                  = CAST(NULL AS BINARY(8))
      ,last_sql_handle             = CAST(NULL AS VARBINARY(64))
      ,last_statement_start_offset = CAST(NULL AS INT)
      ,last_statement_end_offset   = CAST(NULL AS INT)
      --------------------------------------------------------------------------------------------------
      -- from [sys].[dm_exec_query_stats]
      --------------------------------------------------------------------------------------------------
      ,plan_handle                 = CAST(NULL AS NVARCHAR(100))
      ,query_plan                  = CAST(NULL AS NVARCHAR(MAX))
      ,query_text                  = CAST(NULL AS NVARCHAR(MAX))
      --------------------------------------------------------------------------------------------------
      -- redundant columns OMITTED from [sys].[dm_db_missing_index_group_stats_query]
      -- May be included in a separate table in future version
      --------------------------------------------------------------------------------------------------
      -- user_seeks
      -- user_scans
      -- last_user_seek
      -- last_user_scan
      -- avg_total_user_cost
      -- avg_user_impact
      -----------------------------------------------------------------------
      -- system_seeks
      -- system_scans
      -- last_system_seek
      -- last_system_scan
      -- avg_total_system_cost
      -- avg_system_impact
      -----------------------------------------------------------------------
      -- query_hash
      -- query_plan_hash
      -- last_sql_handle
      -- last_statement_start_offset
      -- last_statement_end_offset
      -- last_statement_sql_handle -- Used by Query Store, references the statement_sql_handle
      --------------------------------------------------------------------------------------------------
  INTO [##SQLXL_Index_sys_dm_db_missing_index_group_stats_query]
OPTION (MAXDOP 1,RECOMPILE);

IF object_id('[sys].[dm_db_missing_index_group_stats_query]') IS NOT NULL BEGIN
--------------------------------------------------------------------------------------------------------------------------------------------
   SET @sql = N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO [##SQLXL_Index_sys_dm_db_missing_index_group_stats_query]
SELECT group_handle
      ,query_hash
      ,last_sql_handle
      ,last_statement_start_offset
      ,last_statement_end_offset
      ,plan_handle = CONVERT(VARCHAR(100),qs.plan_handle,1) COLLATE ' + @collation + N'
      ,query_plan  = CONVERT(VARCHAR(MAX),qp.query_plan   ) COLLATE ' + @collation + N'
      ,query_text  = CONVERT(VARCHAR(MAX)
                            ,SUBSTRING(st.text
                                      ,(migs.last_statement_start_offset / 2) + 1
                                      ,((IIF(migs.last_statement_end_offset = -1
                                            ,DATALENGTH(st.text)
                                            ,migs.last_statement_end_offset)
                                         - migs.last_statement_start_offset
                                        )/2) + 1)
                                      ) COLLATE ' + @collation + N'
  FROM (SELECT migs.*
          FROM (SELECT q.group_handle
                      ,q.query_hash
                      ,q.last_sql_handle
                      ,q.last_statement_start_offset
                      ,q.last_statement_end_offset
                      ,rn = ROW_NUMBER() OVER (PARTITION BY q.group_handle
                                                   ORDER BY ( q.avg_total_user_cost
                                                            * q.avg_user_impact)
                                                            * (   q.user_seeks
                                                               + (q.user_scans * 4.0)
                                                              ) DESC  -- scans count 4X seeks
                                              )
                 FROM [sys].[dm_db_missing_index_group_stats_query]   AS q
                 JOIN [##SQLXL_Index_sys_dm_db_missing_index_details] AS m
                   ON q.group_handle = m.group_handle
               ) AS migs
          WHERE migs.rn = 1
       ) AS migs
 OUTER
 APPLY ( -- get top query plan from [sys].[dm_exec_query_stats] for query_hash with the most reads and worker time if in-memory (XTP)
        SELECT TOP (1)
               qs.plan_handle
          FROM [sys].[dm_exec_query_stats] AS qs
         WHERE migs.query_hash = qs.query_hash
         ORDER BY
               (qs.total_physical_reads + qs.total_logical_reads) DESC -- total reads. Will always be 0 querying a memory-optimized table
              ,qs.total_worker_time                               DESC
       ) AS qs
 OUTER
 APPLY [sys].[dm_exec_query_plan] (qs.plan_handle)     AS qp
 OUTER
 APPLY [sys].[dm_exec_sql_text] (migs.last_sql_handle) AS st
OPTION (MAXDOP 1,RECOMPILE);'

   IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
   SELECT '[##SQLXL_Index_sys_dm_db_missing_index_group_stats_query PT 2]'
         ,lsql = LEN(@sql)
         ,sql1 = SUBSTRING(@sql,    1,16383)
         ,sql2 = SUBSTRING(@sql,16384,16383)
         ,sql3 = SUBSTRING(@sql,32768,16383);

   EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF object_id('[sys].[dm_db_missing_index_group_stats_query]') IS NOT NULL

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' [sys].[dm_db_missing_index_group_stats] - Most read query & query_text - Azure,SQL 2019'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
Collect [sys].[dm_db_index_usage_stats] for one or all user databases
---------------------------------------------------------------------
In Azure SQL Database, dynamic management views cannot expose information that would impact database containment or expose information
about other databases the user has access to. To avoid exposing this information, every row that contains data that doesn't belong to the
connected tenant is filtered out.
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_db_index_usage_stats];
END TRY
BEGIN CATCH
END CATCH

SELECT qry.*
  INTO [##SQLXL_Index_sys_dm_db_index_usage_stats]
  FROM (-- columns from [sys].[dm_db_index_usage_stats]
SELECT database_id       = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                              ,DB_ID()
                              ,ius.database_id)
      ,ius.object_id
      ,ius.index_id
      ,User_total_CNT    = ius.user_seeks + ius.user_scans + ius.user_lookups + ius.user_updates
      ,user_read_CNT     = ius.user_seeks + ius.user_scans + ius.user_lookups
      ,ius.user_seeks
      ,ius.user_scans
      ,ius.user_lookups
      ,ius.user_updates
      ,ius.system_seeks
      ,ius.system_scans
      ,ius.system_lookups
      ,ius.system_updates
      ,ius.last_user_seek
      ,ius.last_user_scan
      ,ius.last_user_lookup
      ,ius.last_user_update
      ,ius.last_system_seek
      ,ius.last_system_scan
      ,ius.last_system_lookup
      ,ius.last_system_update
  FROM [sys].[dm_db_index_usage_stats] AS ius
  JOIN [##SQLXL_Index_sys_databases]   AS d   -- only collect usage statistice from databases we are looking for
    ON ius.database_id = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                            ,DB_ID()
                            ,d.database_id)
) AS qry
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' [sys].[dm_db_index_usage_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Create index
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_sys_dm_db_index_usage_stats
    ON [##SQLXL_Index_sys_dm_db_index_usage_stats]
      (database_id
      ,object_id
      ,index_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' Index [ixuc_sys_dm_db_index_usage_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start [sys].[dm_db_index_operational_stats]',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_db_index_operational_stats]
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @ssms_ads  TINYINT  = 1
       ,@msg       NVARCHAR(1000)
       ,@exec_dttm DATETIME = GETDATE();
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_db_index_operational_stats];
END TRY
BEGIN CATCH
END CATCH

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT version_generated_off_row         = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,ghost_version_inrow               = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,ghost_version_off_row             = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,insert_over_ghost_version_inrow   = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,insert_over_ghost_version_off_row = CONVERT(BIGINT,NULL) -- SQL 2016+
)
SELECT qry.*
  INTO [##SQLXL_Index_sys_dm_db_index_operational_stats]
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[dm_db_index_operational_stats]
        -- multiple CROSS APPLYs required to avoid error "Aggregates on the right side of an APPLY
        -- cannot reference columns from the left side" referencing  columns from the "newcol" CTE
SELECT database_id                           = CASE WHEN CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5
                                                    THEN DB_ID()
                                                    ELSE ios.database_id
                                               END
      ,ios.object_id
      ,ios.index_id
      ---------------------------------------------------------------------------------------
      ,partition_CNT                         = COUNT(DISTINCT(ios.partition_number      ))
      ---------------------------------------------------------------------------------------
      ,leaf_insert_CNT                       = SUM(ios.leaf_insert_count                 )
      ,leaf_update_CNT                       = SUM(ios.leaf_update_count                 )
      ,leaf_delete_CNT                       = SUM(ios.leaf_delete_count                 )
      ,leaf_ghost_CNT                        = SUM(ios.leaf_ghost_count                  )
      ----------------------------------
      ,nonleaf_insert_CNT                    = SUM(ios.nonleaf_insert_count              )
      ,nonleaf_delete_CNT                    = SUM(ios.nonleaf_delete_count              )
      ,nonleaf_update_CNT                    = SUM(ios.nonleaf_update_count              )
      ----------------------------------
      ,leaf_allocation_CNT                   = SUM(ios.leaf_allocation_count             ) -- For an index, an allocation is a page split
      ,nonleaf_allocation_CNT                = SUM(ios.nonleaf_allocation_count          ) -- 0 = Heap or columnstore
      ----------------------------------
      ,leaf_page_merge_CNT                   = SUM(ios.leaf_page_merge_count             ) -- 0 = Heap or columnstore
      ,nonleaf_page_merge_CNT                = SUM(ios.nonleaf_page_merge_count          ) -- 0 = Heap or columnstore
      ----------------------------------
      ,range_scan_CNT                        = SUM(ios.range_scan_count                  )
      ,singleton_lookup_CNT                  = SUM(ios.singleton_lookup_count            )
      ,forwarded_fetch_CNT                   = SUM(ios.forwarded_fetch_count             )
      ,lob_fetch_in_pages                    = SUM(ios.lob_fetch_in_pages                )
      ,lob_fetch_in_bytes                    = SUM(ios.lob_fetch_in_bytes                )
      ,lob_orphan_create_CNT                 = SUM(ios.lob_orphan_create_count           )
      ,lob_orphan_insert_CNT                 = SUM(ios.lob_orphan_insert_count           )
      ,row_overflow_fetch_in_pages           = SUM(ios.row_overflow_fetch_in_pages       )
      ,row_overflow_fetch_in_bytes           = SUM(ios.row_overflow_fetch_in_bytes       )
      ,column_value_push_off_row_CNT         = SUM(ios.column_value_push_off_row_count   )
      ,column_value_pull_in_row_CNT          = SUM(ios.column_value_pull_in_row_count    )
      ----------------------------------
      ,row_lock_CNT                          = SUM(ios.row_lock_count                    )
      ,row_lock_wait_CNT                     = SUM(ios.row_lock_wait_count               )
      ,row_lock_wait_MS                      = SUM(ios.row_lock_wait_in_ms               )
      ----------------------------------
      ,page_lock_CNT                         = SUM(ios.page_lock_count                   )
      ,page_lock_wait_CNT                    = SUM(ios.page_lock_wait_count              )
      ,page_lock_wait_MS                     = SUM(ios.page_lock_wait_in_ms              )
      ----------------------------------
      ,lock_promotion_attempt_CNT            = SUM(ios.index_lock_promotion_attempt_count)
      ,lock_promotion_CNT                    = SUM(ios.index_lock_promotion_count        )
      ----------------------------------
      ,page_latch_wait_CNT                   = SUM(ios.page_latch_wait_count             )
      ,tree_page_latch_wait_CNT              = SUM(ios.tree_page_latch_wait_count        )
      ,page_latch_wait_MS                    = SUM(ios.page_latch_wait_in_ms             )
      ,tree_page_latch_wait_MS               = SUM(ios.tree_page_latch_wait_in_ms        ) -- This is always 0 for a heap.
      ,page_io_latch_wait_CNT                = SUM(ios.page_io_latch_wait_count          )
      ,tree_page_io_latch_wait_CNT           = SUM(ios.tree_page_io_latch_wait_count     ) -- This is always 0 for a heap
      ,page_io_latch_wait_MS                 = SUM(ios.page_io_latch_wait_in_ms          )
      ,tree_page_io_latch_wait_MS            = SUM(ios.tree_page_io_latch_wait_in_ms     ) -- This is always 0 for a heap.
      ----------------------------------
      ,page_compression_attempt_CNT          = SUM(ios.page_compression_attempt_count    )
      ,page_compression_success_CNT          = SUM(ios.page_compression_success_count    )
      ----------------------------------
      ,version_generated_off_row_CNT         = SUM(COALESCE(version_generated_off_row          ,0))
      ,ghost_version_inrow_CNT               = SUM(COALESCE(ios.ghost_version_inrow            ,0))
      ,ghost_version_off_row_CNT             = SUM(COALESCE(ghost_version_off_row              ,0))
      ,insert_over_ghost_version_inrow_CNT   = SUM(COALESCE(ios.insert_over_ghost_version_inrow,0))
      ,insert_over_ghost_version_off_row_CNT = SUM(COALESCE(insert_over_ghost_version_off_row  ,0))
  FROM [##SQLXL_Index_sys_databases] AS db -- limit operational statistics to the databases we are looking for
 CROSS
 APPLY (-- required to avoid error "Aggregates on the right side of an APPLY cannot reference columns from the left side" referencing
        -- columns from the "newcol" CTE
        SELECT database_id       -- NOTE: In Azure SQL Database, the values are unique within a single database or an elastic pool,
                                 -- but not within a logical server.
              ,object_id
              ,index_id
              ,partition_number
              ,leaf_insert_count
              ,leaf_delete_count
              ,leaf_update_count
              ,leaf_ghost_count
              ,nonleaf_insert_count
              ,nonleaf_delete_count
              ,nonleaf_update_count
              ,leaf_allocation_count
              ,nonleaf_allocation_count
              ,leaf_page_merge_count
              ,nonleaf_page_merge_count
              ,range_scan_count
              ,singleton_lookup_count
              ,forwarded_fetch_count
              ,lob_fetch_in_pages
              ,lob_fetch_in_bytes
              ,lob_orphan_create_count
              ,lob_orphan_insert_count
              ,row_overflow_fetch_in_pages
              ,row_overflow_fetch_in_bytes
              ,column_value_push_off_row_count
              ,column_value_pull_in_row_count
              ,row_lock_count
              ,row_lock_wait_count
              ,row_lock_wait_in_ms
              ,page_lock_count
              ,page_lock_wait_count
              ,page_lock_wait_in_ms
              ,index_lock_promotion_attempt_count
              ,index_lock_promotion_count
              ,page_latch_wait_count
              ,page_latch_wait_in_ms
              ,page_io_latch_wait_count
              ,page_io_latch_wait_in_ms
              ,tree_page_latch_wait_count
              ,tree_page_latch_wait_in_ms
              ,tree_page_io_latch_wait_count
              ,tree_page_io_latch_wait_in_ms
              ,page_compression_attempt_count
              ,page_compression_success_count
              ,version_generated_off_row           -- SQL 2016+
              ,ghost_version_inrow                 -- SQL 2016+
              ,ghost_version_off_row               -- SQL 2016+
              ,insert_over_ghost_version_inrow     -- SQL 2016+
              ,insert_over_ghost_version_off_row   -- SQL 2016+
          FROM [sys].[dm_db_index_operational_stats] (IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                                                         ,DB_ID()
                                                         ,db.database_id)
                                                     ,NULL
                                                     ,NULL
                                                     ,NULL)
       ) AS ios
 GROUP BY
       ios.database_id
      ,ios.object_id
      ,ios.index_id
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' [sys].[dm_db_index_operational_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Create index
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_sys_dm_db_index_operational_stats
    ON [##SQLXL_Index_sys_dm_db_index_operational_stats]
      (database_id
      ,object_id
      ,index_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' Index [ixuc_sys_dm_db_index_operational_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start [sys].[dm_os_buffer_descriptors]',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Aggregate [sys].[dm_os_buffer_descriptors]
 NOTE: SQL 2022+ columns [op_history],[buffer_address],[latch_address] not found in BOL
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_os_buffer_descriptors];
END TRY
BEGIN CATCH
END CATCH

SELECT database_id = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                        ,DB_ID()
                        ,d.database_id)
      ,bd.allocation_unit_id
      ,bd.row_CNT
      ,bd.buffer_total_KB
      ,bd.buffer_free_KB
      ,bd.read_microsec_AVG
  INTO [##SQLXL_Index_sys_dm_os_buffer_descriptors]
  FROM [##SQLXL_Index_sys_databases] AS d
  JOIN (-- aggregate columns from [sys].[dm_os_buffer_descriptors]. No speed advantage using an APPLY
        SELECT database_id        = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                                       ,DB_ID()
                                       ,bd.database_id)
              ,bd.allocation_unit_id
              ,row_CNT            = SUM(CAST(COALESCE(bd.row_count,0) AS BIGINT))
              ,buffer_total_KB    = SUM(CAST(8.0 AS BIGINT))                                         -- each page is 8KB
              ,buffer_free_KB     = SUM(CAST(COALESCE(bd.free_space_in_bytes,0) AS BIGINT)) / 8192.0 -- 1KB = 8192 bytes
              ,read_microsec_AVG  = AVG(COALESCE(bd.read_microsec,0))
          FROM [sys].[dm_os_buffer_descriptors] AS bd
         GROUP BY
               IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                  ,DB_ID()
                  ,bd.database_id)
              ,bd.allocation_unit_id
       ) AS bd
    ON bd.database_id = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                           ,DB_ID()
                           ,d.database_id)
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' [sys].[dm_os_buffer_descriptors]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- create index
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_os_buffer_descriptors
    ON [##SQLXL_Index_sys_dm_os_buffer_descriptors]
      (database_id
      ,allocation_unit_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' Instance Index [ixuc_SQLXL_Index_sys_dm_os_buffer_descriptors]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Database-driven cursor',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/*##########################################################################################################################################
DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATAB
############################################################################################################################################
## Loop through requested databases - Collect database-specific information                                                               ##
## Parameter @database entered above:                                                                                                     ##
##   -- Asterisk ("*") for all databases including system                                                                                 ##
##   -- NULL for all user (non-system) databases                                                                                          ##
##   -- "database name" for a single database                                                                                             ##
##                                                                                                                                        ##
## ***DEVELOPER NOTE ***                                                                                                                  ##
## CONVERT & CAST DO NOT WORK if DATABASE COMPATIBILITY level is less than 11 (SQL 2012) !                                                ##
##                ------------                                                                                                            ##
##                                                                                                                                        ##
## Omitted Sources & reasons:                                                                                                             ##
## sys dm_exec_function_stats       BOL "does not return information about table valued functions,                                        ##
##                                       and about scalar functions that are inlined with Scalar UDF Inlining"                            ##
## sys dm_db_xtp_hash_index_stats   BOL "useful for understanding and tuning the bucket counts. It can also be used to detect cases       ##
##                                       where the index key has many duplicates.                                                         ##
##                                       Note - SCANS THE ENTIRE TABLE!"                                                                  ##
############################################################################################################################################
##########################################################################################################################################*/

/******************************************************************************************************************************************\
 Create local variables & database cursor
 List of databases to run through was previously filtered when creating [##SQLXL_Index_sys_databases]
\******************************************************************************************************************************************/
DECLARE db_crsr CURSOR LOCAL FAST_FORWARD FOR
/*** LOCAL TESTING ***
DECLARE @database_name SYSNAME = N'WideWorldImporters'
--*/
SELECT database_name_quoted = QUOTENAME(db.name)
      ,collation_name       = c.collation_name
  FROM [##SQLXL_Index_sys_databases] AS db
 CROSS
  JOIN (SELECT collation_name
          FROM [sys].[databases]
         WHERE database_id = DB_ID()
       ) AS c
 WHERE db.user_access_desc = N'MULTI_USER'
   AND db.state_desc       = N'ONLINE'
   AND db.is_distributor   = 0
   AND NOT (    COALESCE(db.secondary_role_allow_connections_desc,N'') = N'NO'
            AND COALESCE(db.role_desc                            ,N'') = N'SECONDARY'
           )
 ORDER BY
       db.name
OPTION (MAXDOP 1,RECOMPILE);

OPEN db_crsr;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' Opened Database cursor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

WHILE @i > 0 BEGIN -- Loop through database cursor
/******************************************************************************************************************************************\
 Start of database cursor loop. Collect database-specific information for the one database selected by execution parameter @database_name
   or if no database selected, all user databases.
 List of databases to loop through built above into [##SQLXL_Index_sys_databases].
 See list of excluded system databases in that script element.
\******************************************************************************************************************************************/
FETCH NEXT
 FROM db_crsr
 INTO @db_name_quoted
     ,@collation;

IF @@FETCH_STATUS < 0 BREAK;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' -- Database: ' + @db_name_quoted
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[database_scoped_configurations] - Introduced in SQL 2016
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
IF @i = 1 BEGIN  -- first time through database loop, create new objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_database_scoped_configurations];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id         = CONVERT(INT           ,NULL)
      ,configuration_id    = CONVERT(INT           ,NULL)
      ,name                = CONVERT(SYSNAME       ,NULL) COLLATE ' + @collation + N'
      ,value               = CONVERT(NVARCHAR(1000),NULL) COLLATE ' + @collation + N'
      ,value_for_secondary = CONVERT(NVARCHAR(1000),NULL)COLLATE ' + @collation + N'
      ,is_value_default    = CONVERT(BIT           ,NULL)
  INTO [##SQLXL_Index_sys_database_scoped_configurations]
OPTION (MAXDOP 1,RECOMPILE);'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1 BEGIN

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[database_scoped_configurations]'') IS NOT NULL
WITH newcol AS (-- columns added after SQL Server 2005
SELECT is_value_default = CONVERT(BIT,NULL) -- added SQL 2017
)
INSERT INTO [##SQLXL_Index_sys_database_scoped_configurations]
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[database_scoped_configurations]
SELECT database_id         = DB_ID()
      ,configuration_id
      ,name                = name                                        COLLATE ' + @collation + N' -- NVARCHAR(60)
      ,value               = CONVERT(NVARCHAR(1000),value              ) COLLATE ' + @collation + N' -- SQLVARIANT
      ,value_for_secondary = CONVERT(NVARCHAR(1000),value_for_secondary) COLLATE ' + @collation + N' -- SQLVARIANT
      ,is_value_default
  FROM [sys].[database_scoped_configurations] -- SQL Server 2016 (13.x) and later
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_database_scoped_configurations]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[database_scoped_configurations] - SQL 2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[database_automatic_tuning_options] - Introduced in SQL 2017
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, create new objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_database_automatic_tuning_options];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id        = CAST(NULL AS INT)
      ,name               = CAST(NULL AS NVARCHAR(128)) COLLATE ' + @collation + N'
      ,desired_state      = CAST(NULL AS SMALLINT)
      ,desired_state_desc = CAST(NULL AS NVARCHAR(60))  COLLATE ' + @collation + N'
      ,actual_state       = CAST(NULL AS SMALLINT)
      ,actual_state_desc  = CAST(NULL AS NVARCHAR(60))  COLLATE ' + @collation + N'
      ,reason             = CAST(NULL AS SMALLINT)
      ,reason_desc        = CAST(NULL AS NVARCHAR(60))  COLLATE ' + @collation + N'
  INTO [##SQLXL_Index_sys_database_automatic_tuning_options];'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[database_automatic_tuning_options]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_sys_database_automatic_tuning_options]' + N'
SELECT database_id        = DB_ID()
      ,name               = name               COLLATE ' + @collation + N'
      ,desired_state
      ,desired_state_desc = desired_state_desc COLLATE ' + @collation + N'
      ,actual_state
      ,actual_state_desc  = actual_state_desc  COLLATE ' + @collation + N'
      ,reason
      ,reason_desc        = reason_desc        COLLATE ' + @collation + N'
  FROM [sys].[database_automatic_tuning_options]
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_database_automatic_tuning_options]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[database_automatic_tuning_options] - SQL 2017+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[database_query_store_options] Introduced in SQL 2016
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_database_query_store_options];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP(0)
       database_id                                = CAST(NULL AS INT)
      ,desired_state                              = CAST(NULL AS SMALLINT)
      ,desired_state_desc                         = CAST(NULL AS NVARCHAR(60))   COLLATE ' + @collation + N'
      ,actual_state                               = CAST(NULL AS SMALLINT)
      ,actual_state_desc                          = CAST(NULL AS NVARCHAR(60))   COLLATE ' + @collation + N'
      ,actual_state_additional_info               = CAST(NULL AS NVARCHAR(4000)) COLLATE ' + @collation + N'
      ,readonly_reason                            = CAST(NULL AS INT)
      ,current_storage_size_mb                    = CAST(NULL AS BIGINT)
      ,flush_interval_seconds                     = CAST(NULL AS BIGINT)
      ,interval_length_minutes                    = CAST(NULL AS BIGINT)
      ,max_storage_size_mb                        = CAST(NULL AS BIGINT)
      ,stale_query_threshold_days                 = CAST(NULL AS BIGINT)
      ,max_plans_per_query                        = CAST(NULL AS BIGINT)
      ,query_capture_mode                         = CAST(NULL AS SMALLINT)
      ,query_capture_mode_desc                    = CAST(NULL AS NVARCHAR(60))   COLLATE ' + @collation + N'
      ,size_based_cleanup_mode                    = CAST(NULL AS SMALLINT)
      ,size_based_cleanup_mode_desc               = CAST(NULL AS NVARCHAR(60))   COLLATE ' + @collation + N'
      ,wait_stats_capture_mode                    = CAST(NULL AS INT)
      ,wait_stats_capture_mode_desc               = CAST(NULL AS NVARCHAR(60))   COLLATE ' + @collation + N'
      ,capture_policy_execution_count             = CAST(NULL AS INT)
      ,capture_policy_total_compile_cpu_time_ms   = CAST(NULL AS BIGINT)
      ,capture_policy_total_execution_cpu_time_ms = CAST(NULL AS BIGINT)
      ,capture_policy_stale_threshold_hours       = CAST(NULL AS INT)
  INTO [##SQLXL_Index_sys_database_query_store_options];'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[database_query_store_options]'') IS NOT NULL  -- added in SQL 2016
WITH newcol AS (-- columns added after SQL Server 2016
SELECT query_capture_mode                         = CAST(NULL AS SMALLINT)
      ,query_capture_mode_desc                    = CAST(NULL AS NVARCHAR(60))   COLLATE ' + @collation + N'
      ,capture_policy_execution_count             = CAST(NULL AS INT)
      ,capture_policy_total_compile_cpu_time_ms   = CAST(NULL AS BIGINT)
      ,capture_policy_total_execution_cpu_time_ms = CAST(NULL AS BIGINT)
      ,capture_policy_stale_threshold_hours       = CAST(NULL AS INT)
      ,wait_stats_capture_mode                    = CAST(NULL AS INT)
      ,wait_stats_capture_mode_desc               = CAST(NULL AS NVARCHAR(60))   COLLATE ' + @collation + N'
)
INSERT
  INTO [##SQLXL_Index_sys_database_query_store_options]
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- [sys].[database_query_store_options]
SELECT database_id                                = DB_ID()
      ,desired_state
      ,desired_state_desc                         = desired_state_desc                         COLLATE ' + @collation + N'
      ,actual_state
      ,actual_state_desc                          = actual_state_desc                          COLLATE ' + @collation + N'
      ,actual_state_additional_info               = actual_state_additional_info               COLLATE ' + @collation + N'
      ,readonly_reason
      ,current_storage_size_mb
      ,flush_interval_seconds
      ,interval_length_minutes
      ,max_storage_size_mb
      ,stale_query_threshold_days
      ,max_plans_per_query
      ,query_capture_mode
      ,query_capture_mode_desc                    = query_capture_mode_desc                    COLLATE ' + @collation + N'
      ,size_based_cleanup_mode
      ,size_based_cleanup_mode_desc               = size_based_cleanup_mode_desc               COLLATE ' + @collation + N'
      ,wait_stats_capture_mode
      ,wait_stats_capture_mode_desc               = wait_stats_capture_mode_desc               COLLATE ' + @collation + N'
      ,capture_policy_execution_count
      ,capture_policy_total_compile_cpu_time_ms
      ,capture_policy_total_execution_cpu_time_ms
      ,capture_policy_stale_threshold_hours
  FROM [sys].[database_query_store_options]
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_database_query_store_options]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[database_query_store_options] - SQL 2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 [cdc].[change_tables] - ONLY if Change Data Capture (CDC) has been enabled for this database
 BOL: We recommend that you don't query the system tables directly. <FUTURE>
      Instead, execute the [sys] [sp_cdc_help_change_data_capture] stored procedure
      NOTE: Up to two rows can be returned for each source table, one row for each capture instance.
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_cdc_change_tables];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id          = CAST(NULL AS INT)
      ,object_id            = CAST(NULL AS INT)
      ,version              = CAST(NULL AS INT)
      ,source_object_id     = CAST(NULL AS INT)
      ,capture_instance     = CAST(NULL AS SYSNAME) COLLATE ' + @collation + N'
      ,supports_net_changes = CAST(NULL AS BIT)
      ,has_drop_pending     = CAST(NULL AS BIT)
      ,role_name            = CAST(NULL AS SYSNAME) COLLATE ' + @collation + N'
      ,index_name           = CAST(NULL AS SYSNAME) COLLATE ' + @collation + N'
      ,filegroup_name       = CAST(NULL AS SYSNAME) COLLATE ' + @collation + N'
      ,create_date          = CAST(NULL AS DATETIME)
      ,partition_switch     = CAST(NULL AS BIT)
      ,capture_instance_ID  = CAST(NULL AS INT)
  INTO [##SQLXL_Index_cdc_change_tables]
OPTION (MAXDOP 1,RECOMPILE);'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
-- check if [cdc].[change_tables] exists. If so collect it
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[cdc].[change_tables]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_cdc_change_tables]
SELECT database_id          = DB_ID()
      ,object_id
      ,version
      ,source_object_id
      ,capture_instance     = capture_instance COLLATE ' + @collation + N'
      ,supports_net_changes
      ,has_drop_pending
      ,role_name            = role_name        COLLATE ' + @collation + N'
      ,index_name           = index_name       COLLATE ' + @collation + N'
      ,filegroup_name       = filegroup_name   COLLATE ' + @collation + N'
      ,create_date
      ,partition_switch
      ,capture_instance_ID  = ROW_NUMBER() OVER (PARTITION BY source_object_id
                                                     ORDER BY create_date      -- 1 Change table per source
                                                )
  FROM [cdc].[change_tables]
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_cdc_change_tables]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[cdc].[change_tables] (if CDC enabled)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[objects] including schemas,check_constraints ...'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
Collect [sys].[objects]
        [sys].[schemas]
        [sys].[check_constraints]
        [sys].[change_tracking_tables]
        [sys].[default_constraints]
        [sys].[foreign_keys]
        [sys].[internal_tables]
        [sys].[key_constraints]
        [sys].[tables]
        [sys].[triggers]
        [sys].[views]
Incorporates
        [##SQLXL_Index_cdc_change_tables] created above since [cdc].[change_tables] may not exist for this database

FUTURE: add [sys].[edge_constraints]

NOTE:
- HISTORY tables do not have a parent in [sys].[objects], must be captured from [cdc].[change_tables] or [sys].[tables]
  or as below in "Update historical source for a temporal/ledger table with type = 2"
- Foreign Key "parents" are the table they are constraining.

NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
      https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_objects];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @Pattern NVARCHAR(15)  = ''%[^'' + NCHAR(9) + NCHAR(13) + NCHAR(10) + NCHAR(32) + '']%'';
                               -- Includes Tabs, carriage returns, line feeds, spaces

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT is_enforced                        = CONVERT(BIT,NULL)
      ,data_retention_period              = CONVERT(INT,NULL)
      ,data_retention_period_unit         = CONVERT(INT,NULL)
      ,data_retention_period_unit_desc    = CONVERT(SYSNAME,NULL)
      ,has_snapshot                       = CONVERT(BIT,NULL)
      -- [sys].[objects] SQL 2014 ----------------------------------------------------------------
      ,is_memory_optimized                = CONVERT(BIT,NULL)
      ,uses_native_compilation            = CONVERT(BIT,NULL)
      -- [sys].[objects] SQL 2019 -----------------------------------------------------------------
      ,is_inlineable                      = CONVERT(BIT,NULL)
      ,inline_type                        = CONVERT(BIT,NULL)
      -- [sys].[objects] SQL 2022, Azure SQL Database - [sys].[views] -----------------------------
      ,ledger_view_type                   = CONVERT(TINYINT,NULL)
      ,ledger_view_type_desc              = CONVERT(SYSNAME,NULL)
      ,is_dropped_ledger_view             = CONVERT(BIT,NULL)
      -- [sys].[tables] SQL 2012+ -----------------------------------------------------------------
      ,is_filetable                       = CONVERT(BIT     ,NULL)
       -- [sys].[tables] SQL 2014+ ----------------------------------------------------------------
      ,durability                         = CONVERT(TINYINT ,NULL)
      ,durability_desc                    = CONVERT(SYSNAME ,NULL)     COLLATE ' + @collation + N'
       -- [sys].[tables] SQL 2016+ ----------------------------------------------------------------
      ,temporal_type                      = CONVERT(TINYINT ,NULL)
      ,temporal_type_desc                 = CONVERT(SYSNAME ,NULL)     COLLATE ' + @collation + N'
      ,history_table_id                   = CONVERT(INT     ,NULL)
      ,is_remote_data_archive_enabled     = CONVERT(BIT     ,NULL)
      ,is_external                        = CONVERT(BIT     ,NULL)
       -- [sys].[tables],[sequences] SQL 2017+ ----------------------------------------------------------------
      ,is_node                            = CONVERT(BIT     ,NULL)
      ,is_edge                            = CONVERT(BIT     ,NULL)
      ,last_used_value                    = CONVERT(BIGINT ,NULL)
       -- [sys].[tables] SQL 2022+, Azure SQL Database --------------------------------------------
      ,history_retention_period           = CONVERT(INT     ,NULL)
      ,history_retention_period_unit      = CONVERT(INT     ,NULL)
      ,history_retention_period_unit_desc = CONVERT(SYSNAME ,NULL)     COLLATE ' + @collation + N'
      ,ledger_type                        = CONVERT(TINYINT ,NULL)
      ,ledger_type_desc                   = CONVERT(SYSNAME ,NULL)     COLLATE ' + @collation + N'
      ,ledger_view_id                     = CONVERT(INT     ,NULL)
      ,is_dropped_ledger_table            = CONVERT(BIT     ,NULL)
       -- If change data capture (CDC) enabled on database ---------------------------------------
      ,version                            = CONVERT(INT     ,NULL)
      ,capture_instance                   = CONVERT(SYSNAME ,NULL)     COLLATE ' + @collation + N'
      ,supports_net_changes               = CONVERT(BIT     ,NULL)
      ,role_name                          = CONVERT(SYSNAME ,NULL)     COLLATE ' + @collation + N'
      ,index_name                         = CONVERT(SYSNAME ,NULL)     COLLATE ' + @collation + N'
      ,filegroup_name                     = CONVERT(SYSNAME ,NULL)     COLLATE ' + @collation + N'
      ,create_date                        = CONVERT(DATETIME,NULL)
      ,partition_switch                   = CONVERT(BIT     ,NULL)
)'
+IIF(@i = 1
    -- First database - create object using SELECT INTO
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_objects]'
    -- Subsequent databases - insert into previously created object
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_objects] WITH (TABLOCKX)'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*')
    + N'
  FROM newcol
 CROSS
 APPLY (-- get all required objects and their associated properties across related DMVs
SELECT database_id             = DB_ID()
      ,name                    = obj.name                             COLLATE ' + @collation + N'
      ,obj.object_id
      ,obj.principal_id
      ,obj.schema_id
      ,schema_name             = sch.name                             COLLATE ' + @collation + N'
      ,parent_object_id        = CASE WHEN obj.parent_object_id = 0
                                       AND obj.type NOT IN (N''TA'' -- Assembly (CLR) DML trigger
                                                           ,N''TR'' -- SQL DML trigger
                                                           )
                                      THEN obj.object_id
                                      ELSE obj.parent_object_id
                                 END
      ,type                    = obj.type                             COLLATE ' + @collation + N'
      ,type_desc               = obj.type_desc                        COLLATE ' + @collation + N'
      ,obj.create_date
      ,obj.modify_date
      ,obj.is_ms_shipped
      ,obj.is_published
      ,obj.is_schema_published
      ----------------------------------------------------------------------------------------------
      -- [sys].check_constraints, default_constraints,foreign_keys,key_constraints
      ----------------------------------------------------------------------------------------------
      ,is_disabled             = COALESCE(chk_con.is_disabled
                                         ,fkc.is_disabled
                                         ,trg.is_disabled
                                         )
      ,is_enforced             = is_enforced
      ,is_not_for_replication  = COALESCE(chk_con.is_not_for_replication
                                         ,fkc.is_not_for_replication
                                         ,trg.is_not_for_replication
                                         )
      ,is_not_trusted          = COALESCE(chk_con.is_not_trusted
                                         ,fkc.is_not_trusted
                                         )
      ,is_system_named         = COALESCE(chk_con.is_system_named
                                         ,def_con.is_system_named
                                         ,fkc.is_system_named
                                         ,key_con.is_system_named
                                         )
      ,uses_database_collation = COALESCE(chk_con.uses_database_collation
                                         ,mod.uses_database_collation
                                         )
      ,definition              = STUFF(-- strip off leading blanks, tabs, carriage returns, line feeds
                                       COALESCE(chk_con.definition
                                               ,def_con.definition
                                               ,mod.definition
                                               )
                                      ,1
                                      ,ISNULL(NULLIF(PATINDEX(@Pattern
                                                             ,COALESCE(chk_con.definition
                                                                      ,def_con.definition
                                                                      ,mod.definition
                                                                      )
                                                             )
                                                    ,0) - 1
                                             ,0)
                                      ,N''''
                                      )                               COLLATE ' + @collation + N'
      ,parent_column_id        = COALESCE(chk_con.parent_column_id,def_con.parent_column_id)
      ,key_unique_index_id     = COALESCE(fkc.key_index_id,key_con.unique_index_id)
      ----------------------------------------------------------------------------------------------
      -- [sys].tables,views
      ----------------------------------------------------------------------------------------------
      ,is_replicated               = COALESCE(tbl.is_replicated
                                             ,vw.is_replicated
                                             )
      ,has_replication_filter      = COALESCE(tbl.has_replication_filter
                                             ,vw.has_replication_filter
                                             )
      ,has_unchecked_assembly_data = COALESCE(tbl.has_unchecked_assembly_data
                                             ,vw.has_unchecked_assembly_data
                                             )
      ,is_tracked_by_cdc           = COALESCE(tbl.is_tracked_by_cdc
                                             ,vw.is_tracked_by_cdc
                                             )
      ----------------------------------------------------------------------------------------------
      -- [sys].views
      ----------------------------------------------------------------------------------------------
      ,vw.has_opaque_metadata
      ,vw.with_check_option
      ,vw.is_date_correlation_view
      ,has_snapshot
      ,ledger_view_type
      ,ledger_view_type_desc
      ,is_dropped_ledger_view
      ----------------------------------------------------------------------------------------------
      -- [sys].tables
      ----------------------------------------------------------------------------------------------
      ,history_source_object_id           = cdc_tgt.source_object_id
      ,lob_data_space_id                  = COALESCE(tbl.lob_data_space_id
                                                    ,itb.lob_data_space_id
                                                    )
      ,filestream_data_space_id           = COALESCE(tbl.filestream_data_space_id
                                                    ,itb.filestream_data_space_id
                                                    )
      ,tbl.max_column_id_used
      ,tbl.lock_on_bulk_load
      ,uses_ansi_nulls                    = COALESCE(tbl.uses_ansi_nulls
                                                    ,mod.uses_ansi_nulls
                                                    )
      ,tbl.is_merge_published
      ,tbl.is_sync_tran_subscribed
      ,tbl.text_in_row_limit
      ,tbl.large_value_types_out_of_row
      ,tbl.lock_escalation
      ,lock_escalation_desc               = tbl.lock_escalation_desc                 COLLATE ' + @collation + N'
      ,tbl.is_filetable
      ,is_memory_optimized
      ,durability
      ,durability_desc                    = durability_desc                        COLLATE ' + @collation + N'
      ,temporal_type
      ,temporal_type_desc                 = temporal_type_desc                     COLLATE ' + @collation + N'
      ,is_remote_data_archive_enabled
      ,is_external
      ,history_retention_period
      ,history_retention_period_unit
      ,history_retention_period_unit_desc = history_retention_period_unit_desc     COLLATE ' + @collation + N'
      ,is_node
      ,is_edge
      ,data_retention_period
      ,data_retention_period_unit
      ,data_retention_period_unit_desc    = data_retention_period_unit_desc        COLLATE ' + @collation + N'
      ,ledger_type
      ,ledger_type_desc                   = ledger_type_desc                       COLLATE ' + @collation + N'
      ,ledger_view_id
      ,is_dropped_ledger_table
      ,history_table_ID
      -- [sys].[change_tracking_tables] ------------------------------------------------------------
      ,ctt_is_track_columns_updated_on    = ctt.is_track_columns_updated_on
      -- [cdc].[change_tables] (source & target) ---------------------------------------------------
      ,cdc_capture_instance               = COALESCE(cdc_src.capture_instance
                                                    ,cdc_tgt.capture_instance
                                                    )                              COLLATE ' + @collation + N'
      ,cdc_supports_net_changes           = cdc_tgt.supports_net_changes
      ,cdc_role_name                      = COALESCE(cdc_src.role_name
                                                    ,cdc_tgt.role_name
                                                    )                              COLLATE ' + @collation + N'
      ,cdc_index_name                     = cdc_src.index_name                     COLLATE ' + @collation + N'
      ,cdc_filegroup_name                 = cdc_tgt.filegroup_name                 COLLATE ' + @collation + N'
      ,cdc_create_date                    = COALESCE(cdc_src.create_date
                                                    ,cdc_tgt.create_date
                                                    )
      ,cdc_partition_switch               = COALESCE(cdc_src.partition_switch
                                                    ,cdc_tgt.partition_switch
                                                    )
      ,cdc_is_history_table               = CAST(CASE WHEN tbl.object_id = cdc_tgt.object_id
                                                      THEN 1
                                                      ELSE 0
                                                 END AS BIT)
      ----------------------------------------------------------------------------------------------
      -- [sys].[foreign_keys]
      ----------------------------------------------------------------------------------------------
      ,fkc.referenced_object_id
      ,fkc.key_index_id
      ,fkc.delete_referential_action
      ,delete_referential_action_desc = fkc.delete_referential_action_desc   COLLATE ' + @collation + N'
      ,fkc.update_referential_action
      ,update_referential_action_desc = fkc.update_referential_action_desc   COLLATE ' + @collation + N'
      ----------------------------------------------------------------------------------------------
      -- Computed columns for check_constraints, default_constraints
      ----------------------------------------------------------------------------------------------
      ,uses_sql_proc           = CONVERT(BIT,NULL)
      ,uses_sql_ftn            = CONVERT(BIT,NULL)
      ,uses_sql_mthd           = CONVERT(BIT,NULL)
      ----------------------------------------------------------------------------------------------
      -- [sys].[internal_tables]
      ----------------------------------------------------------------------------------------------
      ,itb.internal_type
      ,internal_type_desc = itb.internal_type_desc COLLATE ' + @collation + N'
      ,itb.parent_id
      ,itb.parent_minor_id
      ----------------------------------------------------------------------------------------------
      -- [sys].[triggers]
      ----------------------------------------------------------------------------------------------
      ,trg.parent_class
      ,parent_class_desc = trg.parent_class_desc  COLLATE ' + @collation + N'
      ,trg.is_instead_of_trigger
      ----------------------------------------------------------------------------------------------
      -- [sys].[sql_modules]
      ----------------------------------------------------------------------------------------------
      ,mod.uses_quoted_identifier
      ,mod.is_schema_bound
      ,mod.is_recompiled
      ,mod.null_on_null_input
      ,mod.execute_as_principal_id
      ,mod.uses_native_compilation
      ,mod.inline_type
      ,mod.is_inlineable
      ----------------------------------------------------------------------------------------------
      -- [sys].[sequences]
      ----------------------------------------------------------------------------------------------
      ,start_value
      ,increment
      ,minimum_value
      ,maximum_value
      ,is_cycling
      ,is_cached
      ,cache_size
      ,user_type_id
      ,current_value
      ,is_exhausted
      ,last_used_value
/*
SELECT COUNT(1)
--*/
  FROM (-- exclude objects we are not interested in
        SELECT obj.*
          FROM [sys].[objects] AS obj WITH (READUNCOMMITTED)
         CROSS
          JOIN (SELECT schema_id FROM [sys].[schemas] WITH (READUNCOMMITTED)
                 WHERE name = N''SYS''
               ) AS sch
         WHERE NOT obj.name LIKE N''##SQLXL%'' -- omit SQLXL objects
           AND NOT obj.name LIKE N''SQLXL_%''
           AND NOT obj.type IN (N''P''  -- SQL stored procedure
                             ,N''PC'' -- Assembly (CLR) stored-procedure
                             ,N''PG'' -- Plan guide
                             ,N''RF'' -- Replication-filter-procedure
                             ,N''S''  -- System base table
                             ,N''SN'' -- Synonym
                             ,N''SP'' -- Security Policy
                             ,N''SQ'' -- Service queue
                             ,N''ST'' -- Statistics tree
                             ,N''TT'' -- table type
                             ,N''X''  -- Extended stored procedure
                             )
           AND NOT (-- system internal tables --------------------------
                        obj.parent_object_id = 0
                    AND obj.type             = N''IT''                -- system internal table
                   )
           AND NOT (-- primary keys on table types ---------------------
                        obj.schema_id        = sch.schema_id
                    AND obj.type             = N''PK''
                    AND obj.name          LIKE N''PK__TT_%''
                   )
           AND NOT (-- message queues ----------------------------------
                        obj.schema_id        = sch.schema_id
                    AND obj.type             = N''IT''                -- system internal table
                    AND obj.name          LIKE N''queue_messages_%''
                   )
           AND NOT (-- system diagrams ---------------------------------
                        obj.schema_id        = 1                      -- DBO
                    AND (   (    obj.type    = N''FN''                -- SQL scalar function
                             AND obj.name    = N''fn_diagramobjects''
                            )
                         OR (    obj.type    = N''PK''
                             AND obj.name LIKE N''PK__sysdiagr_%''
                            )
                         OR (    obj.type    = N''U''                 -- User Table
                             AND obj.name    = N''sysdiagrams''
                            )
                        )
                   )
           AND NOT (    obj.schema_id = sch.schema_id
                    AND obj.name LIKE N''fn_cdc_get_%''
                   )
       ) AS obj
  LEFT OUTER MERGE
  JOIN [sys].[schemas]                   AS sch     WITH (READUNCOMMITTED)
    ON obj.schema_id = sch.schema_id
  LEFT OUTER MERGE
  JOIN [sys].[check_constraints]         AS chk_con WITH (READUNCOMMITTED)
    ON obj.object_id = chk_con.object_id
  LEFT OUTER MERGE
  JOIN [##SQLXL_Index_cdc_change_tables] AS cdc_src -- source [##SQLXL_Index_cdc_change_tables] created previously
    ON DB_ID()       = cdc_src.database_id
   AND obj.object_id = cdc_src.source_object_id
   AND 1             = cdc_src.capture_instance_ID
  LEFT OUTER MERGE
  JOIN [##SQLXL_Index_cdc_change_tables] AS cdc_tgt -- target [##SQLXL_Index_cdc_change_tables] created previously
    ON DB_ID()       = cdc_tgt.database_id
   AND obj.object_id = cdc_tgt.object_id
   AND 1             = cdc_tgt.capture_instance_ID
  LEFT OUTER MERGE
  JOIN [sys].[change_tracking_tables]    AS ctt     WITH (READUNCOMMITTED)
    ON obj.object_id = ctt.object_id
  LEFT OUTER MERGE
  JOIN [sys].[default_constraints]       AS def_con WITH (READUNCOMMITTED)
    ON obj.object_id = def_con.object_id
  LEFT OUTER MERGE
  JOIN [sys].[foreign_keys]              AS fkc     WITH (READUNCOMMITTED)
    ON obj.object_id = fkc.object_id
  LEFT OUTER MERGE
  JOIN [sys].[internal_tables]           AS itb     WITH (READUNCOMMITTED)
    ON obj.object_id = itb.object_id
  LEFT OUTER MERGE
  JOIN [sys].[key_constraints]           AS key_con WITH (READUNCOMMITTED)
    ON obj.object_id = key_con.object_id
  LEFT OUTER MERGE
  JOIN [sys].[tables]                    AS tbl     WITH (READUNCOMMITTED)
    ON obj.object_id = tbl.object_id
  LEFT OUTER MERGE
  JOIN [sys].[triggers]                  AS trg     WITH (READUNCOMMITTED)
    ON obj.object_id = trg.object_id
  LEFT OUTER MERGE
  JOIN [sys].[views]                     AS vw      WITH (READUNCOMMITTED)
    ON obj.object_id = vw.object_id
  LEFT OUTER MERGE
  JOIN [sys].[sequences]                 AS seq     WITH (READUNCOMMITTED)
    ON obj.object_id = seq.object_id
 OUTER
 APPLY (SELECT definition
              ,uses_ansi_nulls
              ,uses_quoted_identifier
              ,is_schema_bound
              ,uses_database_collation
              ,is_recompiled
              ,null_on_null_input
              ,execute_as_principal_id
              ,uses_native_compilation
              ,inline_type
              ,is_inlineable
          FROM [sys].[sql_modules] AS mod WITH (READCOMMITTED,READPAST)
         WHERE obj.type
            IN (N''AF'' -- Aggregate function (CLR)
               ,N''FN'' -- SQL scalar function
               ,N''FS'' -- Assembly (CLR) scalar-function
               ,N''FT'' -- Assembly (CLR) table-valued function
               ,N''IF'' -- SQL inline table-valued function
               ,N''TF'' -- SQL table valued function SQL 2012+
               )
           AND obj.object_id = mod.object_id
       ) AS mod
--------------------------------------------------------------------------------------------------------------------------------
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE,FORCE ORDER,MAX_GRANT_PERCENT = 0);
       -- Force order eliminates "Warning: join order enforced because a local join hint is used."'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_objects]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[objects] including schemas,check_constraints,change_tracking_tables'
                                             + N',default_constraints,foreign_keys,internal_tables,key_constraints,tables,triggers,views'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

-- Add index to speed up subsequent queries on
IF @i = 1 BEGIN  -- first time through database loop
   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Index_sys_objects__object_id
       ON [##SQLXL_Index_sys_objects]
         (database_id
         ,object_id
         )
     WITH (DATA_COMPRESSION = PAGE
          ,MAXDOP = 1
          );

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
                + N'    ... ' + @db_name_quoted + N' Index [ixuc_SQLXL_Index_sys_objects__object_id]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @exec_dttm = GETDATE();
   END
END; -- IF @i = 1

/******************************************************************************************************************************************\
 Collect [sys].[data_spaces]
        ,[sys].[filegroups]
        ,[sys].[database_files]
        ,[sys].[partition_schemes]
        ,[sys].[partition_functions]
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_data_spaces];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id                        = CAST(NULL AS INT)
      -- [sys].[data_spaces] ------------------------------------------
      ,data_space_id                      = CAST(NULL AS INT)
      ,data_space_name                    = CAST(NULL AS SYSNAME)       COLLATE ' + @collation + N'
      ,data_space_type                    = CAST(NULL AS NVARCHAR(2))   COLLATE ' + @collation + N'
      ,data_space_type_desc               = CAST(NULL AS NVARCHAR(60))  COLLATE ' + @collation + N'
      ,data_space_is_default              = CAST(NULL AS BIT)
      ,data_space_is_system               = CAST(NULL AS BIT)
      -- [sys].[filegroups] -----------------------------------------
      ,filegroup_guid                     = CAST(NULL AS UNIQUEIDENTIFIER)
      ,filegroup_is_read_only             = CAST(NULL AS BIT)
      ,filegroup_is_autogrow_all_files    = CAST(NULL AS BIT)
      -- [sys].[database_files] --------------------------------------
      ,file_id                            = CAST(NULL AS INT)
      ,file_guid                          = CAST(NULL AS UNIQUEIDENTIFIER)
      ,file_type                          = CAST(NULL AS TINYINT)
      ,file_type_desc                     = CAST(NULL AS NVARCHAR(60))  COLLATE ' + @collation + N'
      ,file_logical_filename              = CAST(NULL AS SYSNAME)       COLLATE ' + @collation + N'
      ,file_physical_filename             = CAST(NULL AS NVARCHAR(260)) COLLATE ' + @collation + N'
      ,file_state                         = CAST(NULL AS TINYINT)
      ,file_state_desc                    = CAST(NULL AS NVARCHAR(60))  COLLATE ' + @collation + N'
      ,file_size_pages                    = CAST(NULL AS INT)
      ,file_max_size_pages                = CAST(NULL AS INT)
      ,file_is_percent_growth             = CAST(NULL AS BIT)
      ,file_growth                        = CAST(NULL AS INT)
      -- [sys].[partition_schemes] -----------------------------------
      ,partition_function_id              = CAST(NULL AS INT)
      -- [sys].[partition_functions] ---------------------------------
      ,partition_function_name            = CAST(NULL AS SYSNAME)       COLLATE ' + @collation + N'
      ,partition_function_type            = CAST(NULL AS NVARCHAR(2))   COLLATE ' + @collation + N'
      ,partition_function_type_desc       = CAST(NULL AS NVARCHAR(60))  COLLATE ' + @collation + N'
      ,partition_function_fanout          = CAST(NULL AS INT)
      ,partition_function_boundary_value  = CAST(NULL AS NVARCHAR(5))   COLLATE ' + @collation + N'
      ,partition_function_is_system       = CAST(NULL AS BIT)
      ,partition_function_create_date     = CAST(NULL AS DATETIME)
      ,partition_function_modify_date     = CAST(NULL AS DATETIME)
  INTO [##SQLXL_Index_sys_data_spaces];'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

IF  object_id('[sys].[data_spaces]')         IS NOT NULL -- BOL does not include AZURE SQL Database, does include SQL Managed Instance
AND object_id('[sys].[filegroups]')          IS NOT NULL -- BOL says in AZURE SQL Database, but this extends sys.data_spaces?
AND object_id('[sys].[database_files]')      IS NOT NULL -- BOL says in AZURE SQL Database & SQL Managed Instance
AND object_id('[sys].[partition_schemes]')   IS NOT NULL -- BOL does not include AZURE SQL Database, does include SQL Managed Instance
AND object_id('[sys].[partition_functions]') IS NOT NULL -- BOL says in AZURE SQL Database & SQL Managed Instance
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2012 -------------------------------------
       is_system                     = CONVERT(BIT,NULL)
      ,partition_function_is_system  = CONVERT(BIT,NULL)
      -- SQL 2016 --------------------------------------
      ,is_autogrow_all_files         = CONVERT(BIT,NULL)
)
INSERT INTO [##SQLXL_Index_sys_data_spaces]
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[data_spaces],[filegroups],[database_files],[partition_schemes],[partition_functions]
SELECT database_id                        = DB_ID()
      -- [sys].[data_spaces] ------------------------------------------
      ,data_space_id                      = ds.data_space_id
      ,data_space_name                    = ds.name                   COLLATE ' + @collation + N'
      ,data_space_type                    = ds.type                   COLLATE ' + @collation + N'
      ,data_space_type_desc               = ds.type_desc              COLLATE ' + @collation + N'
      ,data_space_is_default              = ds.is_default
      ,data_space_is_system               = ds.is_system
      -- [sys].[filegroups] -----------------------------------------
      ,filegroup_guid
      ,filegroup_is_read_only             = fg.is_read_only
      ,filegroup_is_autogrow_all_files    = is_autogrow_all_files
      -- [sys].[database_files] --------------------------------------
      ,file_id                            = df.file_id
      ,file_guid                          = df.file_guid
      ,file_type                          = df.type
      ,file_type_desc                     = df.type_desc              COLLATE ' + @collation + N'
      ,file_logical_filename              = df.name                   COLLATE ' + @collation + N'
      ,file_physical_filename             = df.physical_name          COLLATE ' + @collation + N'
      ,file_state                         = df.state
      ,file_state_desc                    = df.state_desc             COLLATE ' + @collation + N'
      ,file_size_pages                    = df.size
      ,file_max_size_pages                = df.max_size
      ,file_is_percent_growth             = df.is_percent_growth
      ,file_growth                        = df.growth
      -- [sys].[partition_schemes] -----------------------------------
      ,partition_function_id              = ps.function_id
      -- [sys].[partition_functions] ---------------------------------
      ,partition_function_name            = pf.name                   COLLATE ' + @collation + N'
      ,partition_function_type            = pf.type                   COLLATE ' + @collation + N'
      ,partition_function_type_desc       = pf.type_desc              COLLATE ' + @collation + N'
      ,partition_function_fanout          = pf.fanout
      ,partition_function_boundary_value  = CASE pf.boundary_value_on_right
                                                 WHEN 1 THEN N''RIGHT''
                                                 WHEN 0 THEN N''LEFT''
                                                 ELSE NULL
                                            END                       COLLATE ' + @collation + N'
      ,partition_function_is_system       = pf.is_system
      ,partition_function_create_date     = pf.create_date
      ,partition_function_modify_date     = pf.modify_date
  FROM [sys].[data_spaces]         AS ds
  LEFT OUTER
  JOIN [sys].[filegroups]          AS fg
    ON ds.data_space_id = fg.data_space_id
  LEFT OUTER
  JOIN [sys].[database_files]      AS df
    ON ds.data_space_id = df.data_space_id
  LEFT OUTER
  JOIN [sys].[partition_schemes]   AS ps
    ON ds.data_space_id = ps.data_space_id
  LEFT OUTER
  JOIN [sys].[partition_functions] AS pf
    ON ps.function_id   = pf.function_id
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_data_spaces]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[data_spaces],[filegroups],[database_files],[partition_schemes]'
                                             + N',[partition_functions]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[types]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_types];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_types]'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_types]')
    + N'
  FROM (-- columns from [sys].[types]
        SELECT database_id       = DB_ID()
              ,name              = name           COLLATE ' + @collation + N'
              ,system_type_id
              ,user_type_id
              ,schema_id
              ,principal_id
              ,max_length
              ,precision
              ,scale
              ,collation_name    = collation_name COLLATE ' + @collation + N'
              ,is_nullable
              ,is_user_defined
              ,is_assembly_type
              ,default_object_id
              ,rule_object_id
              ,is_table_type
          FROM [sys].[types]
) AS qry
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_types]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[types]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[sql_expression_dependencies]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[sql_expression_dependencies]
 Not found in AZURE SQL database
 <FUTURE> see sys.stats for how to handle the column filtered stats
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_sql_expression_dependencies];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id               = CAST(NULL AS INT)
      ,referencing_id            = CAST(NULL AS INT)
      ,referencing_type          = CAST(NULL AS NVARCHAR(2))  COLLATE ' + @collation + N'
      ,referencing_minor_id      = CAST(NULL AS INT)
      ,referencing_class         = CAST(NULL AS TINYINT)
      ,referencing_class_desc    = CAST(NULL AS NVARCHAR(60)) COLLATE ' + @collation + N'
      ,is_schema_bound_reference = CAST(NULL AS BIT)
      ,referenced_class          = CAST(NULL AS TINYINT)
      ,referenced_class_desc     = CAST(NULL AS NVARCHAR(60)) COLLATE ' + @collation + N'
      ,referenced_server_name    = CAST(NULL AS SYSNAME)      COLLATE ' + @collation + N'
      ,referenced_database_name  = CAST(NULL AS SYSNAME)      COLLATE ' + @collation + N'
      ,referenced_schema_name    = CAST(NULL AS SYSNAME)      COLLATE ' + @collation + N'
      ,referenced_entity_name    = CAST(NULL AS SYSNAME)      COLLATE ' + @collation + N'
      ,referenced_id             = CAST(NULL AS INT)
      ,referenced_type           = CAST(NULL AS NVARCHAR(2))  COLLATE ' + @collation + N'
      ,referenced_minor_id       = CAST(NULL AS INT)
      ,is_caller_dependent       = CAST(NULL AS BIT)
      ,is_ambiguous              = CAST(NULL AS BIT)
  INTO [##SQLXL_Index_sys_sql_expression_dependencies];'

  EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[sql_expression_dependencies]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_sys_sql_expression_dependencies]' + N'
SELECT database_id                  = DB_ID()
      ,ed.referencing_id
      ,referencing_type             = o_i.type COLLATE ' + @collation + N'
      ,ed.referencing_minor_id
      ,ed.referencing_class
      ,ed.referencing_class_desc               COLLATE ' + @collation + N'
      ,ed.is_schema_bound_reference
      ,ed.referenced_class
      ,ed.referenced_class_desc                COLLATE ' + @collation + N'
      ,ed.referenced_server_name               COLLATE ' + @collation + N'
      ,ed.referenced_database_name             COLLATE ' + @collation + N'
      ,ed.referenced_schema_name               COLLATE ' + @collation + N'
      ,ed.referenced_entity_name               COLLATE ' + @collation + N'
      ,ed.referenced_id
      ,referenced_type              = o_d.type COLLATE ' + @collation + N'
      ,ed.referenced_minor_id
      ,ed.is_caller_dependent
      ,ed.is_ambiguous
  FROM [sys].[sql_expression_dependencies] AS ed
  JOIN [##SQLXL_Index_sys_objects] AS o_i
    ON DB_ID()           = o_i.database_id
   AND ed.referencing_id = o_i.object_id
  JOIN [##SQLXL_Index_sys_objects] AS o_d
    ON DB_ID()           = o_d.database_id
   AND ed.referenced_id  = o_d.object_id
 WHERE (   (    o_i.type IN (N''C''  -- Check constraint
                            ,N''D''  -- Default (constraint or stand-alone)
                            ,N''IT'' -- system internal table
                            ,N''TF'' -- SQL table-valued-function (TVF)
                            ,N''U''  -- User Table
                            ,N''V''  -- View
                            )
            AND o_d.type IN (N''AF'' -- Aggregate function (CLR)
                            ,N''C''  -- Check constraint
                            ,N''D''  -- Default (constraint or stand-alone)
                            ,N''EC'' -- Edge constraint
                            ,N''FN'' -- SQL scalar function
                            ,N''FS'' -- Assembly (CLR) scalar-function
                            ,N''FT'' -- Assembly (CLR) table-valued function
                            ,N''IF'' -- SQL inline table-valued function (TVF)
                            ,N''PK'' -- Primary Key COnstraint
                            ,N''SO'' -- Sequence Object
                            ,N''TF'' -- SQL table-valued-function SQL 2012+
                            ,N''UQ'' -- Unique constraint
                            )
           )
        OR (    ed.referencing_class IN (7   -- index
                                        ,9   -- statistics
                                        )
            AND ed.referenced_class   =  1   -- OBJECT_OR_COLUMN
           )
       )
   AND NOT (-- do not include column-filtered statistics
                o_i.type = N''U'' -- User Table
            AND o_d.type = N''U'' -- User Table
           )
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_sql_expression_dependencies]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[sql_expression_dependencies]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[columns],[identity_columns],[computed_columns],[sequences]'
                                                     + N',[dm_sql_referencing_entities]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[columns]
         [sys].[identity_columns]
         [sys].[computed_columns]
         [sys].[sequences] (from OBJECTS captured previously)
         [sys].[sql_expression_dependencies]

 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_columns];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2016+, Azure SQL Database -------------------------------------------------------
       generated_always_type               = CONVERT(TINYINT,NULL)
      ,generated_always_type_desc          = CONVERT(SYSNAME,NULL)  COLLATE ' + @collation + N'
      ,encryption_type                     = CONVERT(INT    ,NULL)
      ,encryption_type_desc                = CONVERT(SYSNAME,NULL)  COLLATE ' + @collation + N'
      ,encryption_algorithm_name           = CONVERT(SYSNAME,NULL)  COLLATE ' + @collation + N'
      ,column_encryption_key_id            = CONVERT(INT    ,NULL)
      ,column_encryption_key_database_name = CONVERT(SYSNAME,NULL)  COLLATE ' + @collation + N'
       -- SQL 2017+ ---------------------------------------------------------------------------
      ,is_hidden                           = CONVERT(BIT    ,NULL)
      ,is_masked                           = CONVERT(BIT    ,NULL)
      ,graph_type                          = CONVERT(INT    ,NULL)
      ,graph_type_desc                     = CONVERT(SYSNAME,NULL)  COLLATE ' + @collation + N'
      ,last_used_value                     = CONVERT(BIGINT ,NULL)
       -- 2022+, Azure SQL Database -----------------------------------------------------------
      ,is_data_deletion_filter_column      = CONVERT(BIT    ,NULL)
      ,ledger_view_column_type             = CONVERT(TINYINT,NULL)
      ,ledger_view_column_type_desc        = CONVERT(SYSNAME,NULL)  COLLATE ' + @collation + N'
      ,is_dropped_ledger_table_column      = CONVERT(BIT    ,NULL)
)'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_columns]'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_columns]')
    + N'
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[columns],[identity_columns],[computed_columns],[sequences],[sql_expression_dependencies]
SELECT database_id             = DB_ID()
      ,object_id               = c.object_id
      ,name                    = c.name                                COLLATE ' + @collation + N'
      ,c.column_id
      ,user_type_name          = t.name
      ,c.system_type_id
      ,c.user_type_id
      ,max_length              = c.max_length
      ,max_length_unicode      = CASE WHEN c.system_type_id IN ( 99 -- NTEXT
                                                               ,231 -- NVARCHAR
                                                               ,239 -- NCHAR
                                                               )
                                       AND c.max_length <> - 1
                                      THEN c.max_length / 2
                                      ELSE NULL
                                 END
      ,c.precision
      ,c.scale
      ,collation_name          = c.collation_name                      COLLATE ' + @collation + N'
      ,c.is_nullable
      ,c.is_ansi_padded
      ,c.is_rowguidcol
      ,c.is_identity
      ,c.is_computed
      ,c.is_filestream
      ,c.is_replicated
      ,c.is_non_sql_subscribed
      ,c.is_merge_published
      ,c.is_dts_replicated
      ,c.is_xml_document
      ,c.xml_collection_id
      ,c.default_object_id
      ,c.rule_object_id
      ,c.is_sparse
      ,c.is_column_set
       -- SQL 2016+ ---------------------------------------------------------------
      ,generated_always_type
      ,generated_always_type_desc          = generated_always_type_desc            COLLATE ' + @collation + N'
      ,encryption_type
      ,encryption_type_desc                = encryption_type_desc                  COLLATE ' + @collation + N'
      ,encryption_algorithm_name           = encryption_algorithm_name             COLLATE ' + @collation + N'
      ,column_encryption_key_id
      ,column_encryption_key_database_name = column_encryption_key_database_name   COLLATE ' + @collation + N'
       -- SQL 2017+ --------------------------------------------------------------
      ,is_hidden
      ,is_masked
      ,graph_type
      ,graph_type_desc                     = graph_type_desc                       COLLATE ' + @collation + N'
       -- SQL 2022+, SQL Database ------------------------------------------------
      ,ledger_view_column_type
      ,ledger_view_column_type_desc        = ledger_view_column_type_desc          COLLATE ' + @collation + N'
      ,is_dropped_ledger_table_column
      ,is_data_deletion_filter_column
      ----------------------------------------------------------------
      -- [sys].[identity_columns]
      ----------------------------------------------------------------
      ,seed_value                          = CASE WHEN ISNUMERIC(CONVERT(NVARCHAR(20),id.seed_value)) = 1
                                                  THEN  CONVERT(BIGINT,CONVERT(NVARCHAR(20),id.seed_value))
                                                  ELSE NULL
                                             END
      ,increment_value                     = CASE WHEN ISNUMERIC(CONVERT(NVARCHAR(20),id.increment_value)) = 1
                                                  THEN  CONVERT(BIGINT,CONVERT(NVARCHAR(20),id.increment_value))
                                                  ELSE NULL
                                             END
      ,last_value                          = CASE WHEN ISNUMERIC(CONVERT(NVARCHAR(20),id.last_value)) = 1
                                                  THEN  CONVERT(BIGINT,CONVERT(NVARCHAR(20),id.last_value))
                                                  ELSE NULL
                                             END
      ,id.is_not_for_replication
      ----------------------------------------------------------------
      -- [sys].[computed_columns]
      ----------------------------------------------------------------
      ,definition              = cc.definition                       COLLATE ' + @collation + N'
      ,uses_database_collation = COALESCE(cc.uses_database_collation
                                         ,CASE WHEN c.collation_name IS NOT NULL
                                               THEN CASE WHEN c.collation_name COLLATE ' + @collation + N'
                                                            = d.collation_name COLLATE ' + @collation + N'
                                                         THEN 1
                                                      ELSE 0
                                                    END
                                               ELSE NULL
                                          END
                                         )
      ,is_persisted            = cc.is_persisted
      ,uses_sql_proc           = CAST(COALESCE(cc.uses_sql_proc,0) AS BIT)
      ,uses_sql_ftn            = CAST(COALESCE(cc.uses_sql_ftn ,0) AS BIT)
      ,uses_sql_mthd           = CAST(COALESCE(cc.uses_sql_mthd,0) AS BIT)

      ----------------------------------------------------------------
      -- [sys].[sequences]
      ----------------------------------------------------------------
      ,seq_object_id           = dep.referenced_id
      ,seq_name                = seq.name                            COLLATE ' + @collation + N'
      ,seq_definition          = seq.definition
      ,seq_user_type_name      = typ.name
      ,seq_start_value         = seq.start_value
      ,seq_increment           = seq.increment
      ,seq_minimum_value       = seq.minimum_value
      ,seq_maximum_value       = seq.maximum_value
      ,seq_is_cycling          = seq.is_cycling
      ,seq_is_cached           = seq.is_cached
      ,seq_cache_size          = seq.cache_size
      ,seq_current_value       = seq.current_value
      ,seq_is_exhausted        = seq.is_exhausted
      ,seq_last_used_value     = seq.last_used_value
  FROM [sys].[columns] AS c
 CROSS
  JOIN (-- Get database defined COLLATION
        SELECT collation_name
          FROM [##SQLXL_Index_sys_databases]
         WHERE DB_ID() = database_id
       ) AS d
 INNER MERGE
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON DB_ID()     = obj.database_id
   AND c.object_id = obj.object_id
  LEFT OUTER MERGE
  JOIN [##SQLXL_Index_sys_types]   AS t
    ON DB_ID()        = t.database_id
   AND c.user_type_id = t.user_type_id
  LEFT OUTER
  JOIN (-- additional columns only from [sys].[identity_columns]
        -- Required as sub-select since all columns from [sys].[columns] are also included in this DMV
        SELECT object_id
              ,column_id
              ,seed_value
              ,increment_value
              ,last_value
              ,is_not_for_replication
          FROM [sys].[identity_columns]
       ) AS id
    ON c.object_id = id.object_id
   AND c.column_id = id.column_id
  LEFT OUTER MERGE
  JOIN (-- columns from [sys].[computed_columns], cross-referenced to code for FUNCTIONs and PROCEDUREs
        SELECT object_id
              ,column_id
              ,definition
              ,uses_database_collation
              ,is_persisted
              ,uses_sql_proc = pf.uses_sql_proc
              ,uses_sql_ftn  = pf.uses_sql_ftn
              ,uses_sql_mthd = CAST(CASE WHEN pf.uses_sql_proc = 1 OR pf.uses_sql_ftn = 1
                                         THEN 0
                                         ELSE CASE WHEN CHARINDEX(N''].['',cc.definition COLLATE ' + @collation + N') > 0
                                                   THEN 1
                                                   ELSE 0
                                              END
                                    END AS BIT)
          FROM [sys].[computed_columns] AS cc
         OUTER
         APPLY (-- look for computed columns using FUNCTIONS
                SELECT uses_sql_ftn  = SUM(CASE WHEN o.type IN (N''AF'' -- Aggregate function (CLR)
                                                               ,N''FN'' -- SQL scalar function
                                                               ,N''FS'' -- Assembly (CLR) scalar-function
                                                               ,N''FT'' -- Assembly (CLR) table-valued function
                                                               ,N''IF'' -- SQL inline table-valued function (TVF)
                                                               ,N''TF'' -- SQL table-valued-function SQL 2012+
                                                               )
                                                THEN 1
                                                ELSE 0
                                           END)
                      ,uses_sql_proc = SUM(CASE WHEN o.type IN (N''P''  -- SQL Stored Procedure
                                                               ,N''PC'' -- Assembly (CLR) stored-procedure
                                                               ,N''X''  -- Extended stored procedure
                                                               )
                                                THEN 1
                                                ELSE 0
                                           END)
                      ,uses_sql_mthd = SUM(CASE WHEN o.type IS NULL
                                                THEN 1
                                                ELSE 0
                                           END)
                  FROM [##SQLXL_Index_sys_objects] AS o
                 WHERE DB_ID() = o.database_id
                   AND o.type IN (N''AF'' -- Aggregate function (CLR)
                                 ,N''FN'' -- SQL scalar function
                                 ,N''FS'' -- Assembly (CLR) scalar-function
                                 ,N''FT'' -- Assembly (CLR) table-valued function
                                 ,N''IF'' -- SQL inline table-valued function (TVF)
                                 ,N''TF'' -- SQL table-valued-function SQL 2012+
                                 )
                   AND CHARINDEX(o.schema_name + N''.'' + o.name COLLATE ' + @collation + N'
                                ,REPLACE(
                                 REPLACE(cc.definition
                                        ,N''['',N'''')
                                        ,N'']'',N'''') COLLATE ' + @collation + N'
                                ) > 0
               ) AS pf
       ) AS cc
    ON c.object_id = cc.object_id
   AND c.column_id = cc.column_id
  LEFT OUTER MERGE
  JOIN [##SQLXL_Index_sys_objects]                     AS odf -- default object
    ON DB_ID()             = odf.database_id
   AND c.default_object_id = odf.object_id
   AND c.column_id         = odf.parent_column_id
  LEFT OUTER MERGE
  JOIN [##SQLXL_Index_sys_sql_expression_dependencies] AS dep -- object dependencies
    ON DB_ID()             = dep.database_id
   AND odf.object_id       = dep.referencing_id
  LEFT OUTER MERGE
  JOIN [##SQLXL_Index_sys_objects]                     AS seq -- sequence object
    ON DB_ID()             = seq.database_id
   AND dep.referenced_id   = seq.object_id
  LEFT OUTER MERGE
  JOIN [##SQLXL_Index_sys_types]                       AS typ -- user data type
    ON DB_ID()             = typ.database_id
   AND seq.user_type_id    = typ.user_type_id
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE,FORCE ORDER,MAX_GRANT_PERCENT = 0);
       -- Force order eliminates "Warning: join order enforced because a local join hint is used."'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_columns]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[columns],[identity_columns],[computed_columns],[sequences]'
                                             + N',[sql_expression_dependencies]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[edge_constraints] - Introduced in SQL 2019
 FUTURE: merge into [sys].[objects] build
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_edge_constraints];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id                    = CONVERT(INT    ,NULL)
      ,parent_object_id               = CONVERT(INT    ,NULL)
      ,object_id                      = CONVERT(INT    ,NULL)
      ,index_id                       = CONVERT(INT    ,NULL)
      ,type                           = CONVERT(TINYINT,NULL)
      ,type_desc                      = CONVERT(SYSNAME,NULL) COLLATE ' + @collation + N'
      ,name                           = CONVERT(SYSNAME,NULL) COLLATE ' + @collation + N'
      ,is_disabled                    = CONVERT(BIT    ,NULL)
      ,is_not_trusted                 = CONVERT(BIT    ,NULL)
      ,delete_referential_action      = CONVERT(TINYINT,NULL)
      ,delete_referential_action_desc = CONVERT(SYSNAME,NULL) COLLATE ' + @collation + N'
      ,is_system_named                = CONVERT(BIT    ,NULL)
  INTO [##SQLXL_Index_sys_edge_constraints]
OPTION (MAXDOP 1,RECOMPILE);'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id('' [sys].[edge_constraints]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_sys_edge_constraints]' + N'
SELECT database_id      = DB_ID()
      ,parent_object_id
      ,object_id
      ,index_id         = object_id
      ,type             = type      COLLATE ' + @collation + N'
      ,type_desc        = type_desc COLLATE ' + @collation + N'
      ,name             = name      COLLATE ' + @collation + N'
      ,is_disabled
      ,is_not_trusted
      ,delete_referential_action
      ,delete_referential_action_desc = delete_referential_action_desc COLLATE ' + @collation + N'
      ,is_system_named
  FROM [sys].[edge_constraints]
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_edge_constraints]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[edge_constraints] - SQL 2019+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[edge_constraint_clauses] - Introduced in SQL 2019
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_edge_constraint_clauses];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id    = CONVERT(INT,NULL)
         ,object_id      = CONVERT(INT,NULL)
         ,from_object_id = CONVERT(INT,NULL)
         ,to_object_id   = CONVERT(INT,NULL)
         ,clause_number  = CONVERT(INT,NULL)
     INTO [##SQLXL_Index_sys_edge_constraint_clauses]
   OPTION (MAXDOP 1,RECOMPILE);
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[edge_constraint_clauses]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_sys_edge_constraint_clauses]' + N'
SELECT database_id    = DB_ID()
      ,object_id
      ,from_object_id
      ,to_object_id
      ,clause_number
  FROM [sys].[edge_constraint_clauses]
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_edge_constraint_clauses]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[edge_constraint_clauses] - SQL 2019+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[spatial_indexes]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_spatial_indexes];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id             = CAST(NULL AS INT)
      ,object_id               = CAST(NULL AS INT)
      ,index_id                = CAST(NULL AS INT)
      ,spatial_index_type      = CAST(NULL AS TINYINT)
      ,spatial_index_type_desc = CAST(NULL AS NVARCHAR(60)) COLLATE ' + @collation + N'
      ,tessellation_scheme     = CAST(NULL AS SYSNAME)      COLLATE ' + @collation + N'
  INTO [##SQLXL_Index_sys_spatial_indexes]
OPTION (MAXDOP 1,RECOMPILE);'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[spatial_indexes]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_sys_spatial_indexes]' + N'
SELECT database_id             = DB_ID()
      ,object_id
      ,index_id
      ,spatial_index_type
      ,spatial_index_type_desc
      ,tessellation_scheme
  FROM [sys].[spatial_indexes]
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_spatial_indexes]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[spatial_indexes]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[spatial_index_tessellations]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_spatial_index_tessellations];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id         = CAST(NULL AS INT)
      ,object_id           = CAST(NULL AS INT)
      ,index_id            = CAST(NULL AS INT)
      ,tessellation_scheme = CAST(NULL AS SYSNAME)      COLLATE ' + @collation + N'
      ,bounding_box_xmin   = CAST(NULL AS FLOAT(53))
      ,bounding_box_ymin   = CAST(NULL AS FLOAT(53))
      ,bounding_box_xmax   = CAST(NULL AS FLOAT(53))
      ,bounding_box_ymax   = CAST(NULL AS FLOAT(53))
      ,level_1_grid        = CAST(NULL AS SMALLINT)
      ,level_1_grid_desc   = CAST(NULL AS NVARCHAR(60)) COLLATE ' + @collation + N'
      ,level_2_grid        = CAST(NULL AS SMALLINT)
      ,level_2_grid_desc   = CAST(NULL AS NVARCHAR(60)) COLLATE ' + @collation + N'
      ,level_3_grid        = CAST(NULL AS SMALLINT)
      ,level_3_grid_desc   = CAST(NULL AS NVARCHAR(60)) COLLATE ' + @collation + N'
      ,level_4_grid        = CAST(NULL AS SMALLINT)
      ,level_4_grid_desc   = CAST(NULL AS NVARCHAR(60)) COLLATE ' + @collation + N'
      ,cells_per_object    = CAST(NULL AS INT)
  INTO [##SQLXL_Index_sys_spatial_index_tessellations]
OPTION (MAXDOP 1,RECOMPILE);'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[spatial_index_tessellations]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_sys_spatial_index_tessellations]' + N'
SELECT database_id         = DB_ID()
      ,object_id
      ,index_id
      ,tessellation_scheme
      ,bounding_box_xmin
      ,bounding_box_ymin
      ,bounding_box_xmax
      ,bounding_box_ymax
      ,level_1_grid
      ,level_1_grid_desc
      ,level_2_grid
      ,level_2_grid_desc
      ,level_3_grid
      ,level_3_grid_desc
      ,level_4_grid
      ,level_4_grid_desc
      ,cells_per_object
  FROM [sys].[spatial_index_tessellations]
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_spatial_index_tessellations]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[spatial_index_tessellations]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[xml_indexes]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_xml_indexes];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id                = CAST(NULL AS INT)
      ,object_id                  = CAST(NULL AS INT)
      ,index_id                   = CAST(NULL AS INT)
      ,xml_index_type             = CAST(NULL AS TINYINT)
      ,xml_index_type_description = CAST(NULL AS NVARCHAR(60)) COLLATE ' + @collation + N'
      ,using_xml_index_id         = CAST(NULL AS INT)
      ,secondary_type             = CAST(NULL AS CHAR(1))
      ,secondary_type_desc        = CAST(NULL AS NVARCHAR(60)) COLLATE ' + @collation + N'
      ,path_id                    = CAST(NULL AS INT)
  INTO [##SQLXL_Index_sys_xml_indexes]
OPTION (MAXDOP 1,RECOMPILE);'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[spatial_indexes]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_sys_xml_indexes]' + N'
SELECT database_id                = DB_ID()
      ,object_id
      ,index_id
      ,xml_index_type
      ,xml_index_type_description
      ,using_xml_index_id
      ,secondary_type
      ,secondary_type_desc
      ,path_id
  FROM [sys].[xml_indexes]
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_xml_indexes]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[xml_indexes]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[hash_indexes]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_hash_indexes];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP(0)
          database_id  = CAST(NULL AS INT)
         ,object_id    = CAST(NULL AS INT)
         ,index_id     = CAST(NULL AS INT)
         ,type         = CAST(NULL AS TINYINT)
         ,bucket_count = CAST(NULL AS INT)
     INTO [##SQLXL_Index_sys_hash_indexes]
   OPTION (MAXDOP 1,RECOMPILE);
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[hash_indexes]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_sys_hash_indexes]' + N'
SELECT database_id  = DB_ID()
      ,object_id
      ,index_id
      ,type
      ,bucket_count
  FROM [sys].[hash_indexes]
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_hash_indexes]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[hash_indexes]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[indexes]
 Includes [sys].[spatial_indexes], [spatial_index_tessellations], [xml_indexes], [hash_indexes]

 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_indexes];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @Pattern  NVARCHAR(15) = ''%[^'' + NChar(9) + NCHAR(10) + NCHAR(13) + NCHAR(32) + '']%'';
                               -- Includes Tabs, carriage returns, line feeds, spaces

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2016+ --------------------------------------
       compression_delay               = CONVERT(INT,NULL)
       -- SQL 2017+ --------------------------------------
      ,is_ignored_in_optimization      = CONVERT(BIT,NULL)
      ,suppress_dup_key_messages       = CONVERT(BIT,NULL)
       -- SQL 2019+ --------------------------------------
      ,optimize_for_sequential_key     = CONVERT(BIT,NULL)
       -- Azure SQL Database -----------------------------
      ,auto_created                    = CONVERT(BIT,NULL)
)'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_indexes]'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_indexes]')

+ N'
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[indexes],[spatial_indexes],[spatial_index_tessellations],[xml_indexes],[hash_indexes]
SELECT database_id                     = DB_ID()
      ,object_id                       = i.object_id
      ,name                            = i.name                               COLLATE ' + @collation + N'
      ,i.index_id
      ,type                            = CAST(i.type AS NVARCHAR(2))          COLLATE ' + @collation + N'
      ,type_desc                       = i.type_desc                          COLLATE ' + @collation + N'
      ,i.is_unique
      ,i.data_space_id
      ,i.ignore_dup_key
      ,i.is_primary_key
      ,i.is_unique_constraint
      ,i.fill_factor
      ,i.is_padded
      ,i.is_disabled
      ,i.is_hypothetical
      ,i.allow_row_locks
      ,i.allow_page_locks
      ,i.has_filter
      ,filter_definition = STUFF(-- trim off leading tabs,carriage returns,line feeds, spaces
                                 i.filter_definition
                                ,1
                                ,ISNULL(NULLIF(PATINDEX(@Pattern
                                                       ,i.filter_definition
                                                       )
                                              ,0) - 1
                                       ,0)
                                ,N''''
                                )                                            COLLATE ' + @collation + N'
      ,compression_delay
      ,is_ignored_in_optimization
      ,suppress_dup_key_messages
      ,auto_created
      ,optimize_for_sequential_key
      -----------------------------------------------------------------
      ,sub_type                        = COALESCE(si.spatial_index_type     ,xi.xml_index_type            )
      ,sub_type_desc                   = COALESCE(si.spatial_index_type_desc,xi.xml_index_type_description) COLLATE ' + @collation + N'
      -----------------------------------------------------------------
      ,si_tessellation_scheme          = si.tessellation_scheme              COLLATE ' + @collation + N'
      ,si_bounding_box_xmin            = st.bounding_box_xmin
      ,si_bounding_box_ymin            = st.bounding_box_ymin
      ,si_bounding_box_xmax            = st.bounding_box_xmax
      ,si_bounding_box_ymax            = st.bounding_box_ymax
      ,si_level_1_grid_desc            = st.level_1_grid_desc                COLLATE ' + @collation + N'
      ,si_level_2_grid_desc            = st.level_2_grid_desc                COLLATE ' + @collation + N'
      ,si_level_3_grid_desc            = st.level_3_grid_desc                COLLATE ' + @collation + N'
      ,si_level_4_grid_desc            = st.level_4_grid_desc                COLLATE ' + @collation + N'
      ,si_cells_per_object             = st.cells_per_object
      -----------------------------------------------------------------
      ,xml_index_type                  = xi.xml_index_type
      ,xml_index_type_description      = xi.xml_index_type_description       COLLATE ' + @collation + N'
      ,xml_using_xml_index_id          = xi.using_xml_index_id
      ,xml_secondary_type              = xi.secondary_type                   COLLATE ' + @collation + N'
      ,xml_secondary_type_desc         = xi.secondary_type_desc              COLLATE ' + @collation + N'
      ,xml_path_id                     = xi.path_id -- NULL for all XML indexes except secondary selective XML index.
                                                    -- Else, the ID of the promoted path over which the secondary selective XML index
                                                    -- is built. This value is the same value AS path_id from
                                                    -- sys selective_xml_index_paths system view.
      -----------------------------------------------------------------
      ,hi_bucket_CNT                   = bucket_count
  FROM [sys].[indexes]                                 AS i
  JOIN [##SQLXL_Index_sys_objects]                     AS o -- filters out SYSTEM and other unwanted objects
    ON DB_ID()     = o.database_id
   AND i.object_id = o.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_spatial_indexes]             AS si
    ON o.database_id = si.database_id
   AND o.object_id   = si.object_id
   AND i.index_id    = si.index_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_spatial_index_tessellations] AS st
    ON o.database_id = st.database_id
   AND o.object_id   = st.object_id
   AND i.index_id    = st.index_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_xml_indexes]                 AS xi
    ON o.database_id = xi.database_id
   AND o.object_id   = xi.object_id
   AND i.index_id    = xi.index_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_hash_indexes]                AS hi
    ON o.database_id = hi.database_id
   AND o.object_id   = hi.object_id
   AND i.index_id    = hi.index_id
   AND i.type        = hi.type
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_indexes]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[indexes],[spatial_indexes],[spatial_index_tessellations],[xml_indexes]'
                                             + N',[hash_indexes] (2014+)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
Collect [sys].[fulltext_indexes]
NOTE: The “incremental_timestamp” column in [sys].[fulltext_indexes is stored as a binary data type, which represents a rowversion
      (also known as timestamp). However, it’s important to note that this rowversion is not related to date and time; it’s merely an
      incrementing number used for version-stamping table rows. It does not preserve a date or time.
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_fulltext_indexes];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT property_list_id = CONVERT(INT,NULL)
)'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_fulltext_indexes]'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_fulltext_indexes]')
    + N'
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[fulltext_indexes]
SELECT database_id                = DB_ID()
      -- [sys].[fulltext_indexes] -----------------------------------------------------------
      ,object_id                  = fi.object_id
      ,unique_index_id
      ,fulltext_catalog_id        = fi.fulltext_catalog_id
      ,is_enabled
      ,change_tracking_state      = change_tracking_state      COLLATE ' + @collation + N'
      ,change_tracking_state_desc = change_tracking_state_desc COLLATE ' + @collation + N'
      ,has_crawl_completed
      ,crawl_type                 = crawl_type                 COLLATE ' + @collation + N'
      ,crawl_type_desc            = crawl_type_desc            COLLATE ' + @collation + N'
      ,crawl_start_date
      ,crawl_end_date
--    ,incremental_timestamp -- OMITTED. binary data type, which represents a rowversion
      ,stoplist_id
      ,data_space_id              = fi.data_space_ID
      ,property_list_id
  FROM [sys].[fulltext_indexes] AS fi
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_fulltext_indexes]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[fulltext_indexes]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
Collect [sys].[fulltext_catalogs]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_fulltext_catalogs];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id              = CAST(NULL AS INT)
      ,fulltext_catalog_id      = CAST(NULL AS INT)
      ,name                     = CAST(NULL AS SYSNAME) COLLATE ' + @collation + N'
      ,is_default               = CAST(NULL AS BIT)
      ,is_accent_sensitivity_on = CAST(NULL AS BIT)
      ,principal_id             = CAST(NULL AS INT)
      ,is_importing             = CAST(NULL AS BIT)
  INTO [##SQLXL_Index_sys_fulltext_catalogs];'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[fulltext_catalogs]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_sys_fulltext_catalogs]' + N'
SELECT database_id                = DB_ID()
      ,fulltext_catalog_id
      ,name                       = name COLLATE ' + @collation + N'
      ,is_default
      ,is_accent_sensitivity_on
      ,principal_id
      ,is_importing
  FROM [sys].[fulltext_catalogs]
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[fulltext_catalogs]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[foreign_key_columns]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @sql           NVARCHAR(MAX)
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_foreign_key_columns];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_foreign_key_columns]'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_foreign_key_columns]')
    + N'
  FROM (-- columns from [sys].[foreign_key_columns]
SELECT database_id           = DB_ID()
      ,constraint_object_id
      ,constraint_column_id
      ,parent_object_id
      ,parent_column_id
      ,referenced_object_id
      ,referenced_column_id
  FROM [sys].[foreign_key_columns]
) AS qry
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_foreign_key_columns]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[foreign_key_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[index_columns]
 NOTE: will contain column list for "index" objects with columns - indexes, fulltext indexes, missing indexes, Foreign Key Constraints
 NOTE: Used to drive the list of columns to get statistics details for the cursored routine below
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_index_columns];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT column_store_order_ordinal = CONVERT(INT,NULL)
)'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_index_columns]'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_index_columns]')
    + N'
  FROM newcol
 CROSS
 APPLY (-- get list of all columns across all "index" objects
SELECT database_id                = DB_ID()
      ,object_id                  = ic.object_id
      ,ic.index_id
      ,type                       = CAST(i.type AS NVARCHAR(2)) COLLATE ' + @collation + N'
      ,index_column_id
      ,column_id
      ,key_ordinal
      ,partition_ordinal
      ,is_descending_key
      ,is_included_column
      ,column_store_order_ordinal
      -- added control elements -----------------------------------
      ,key_column_sequence = CASE WHEN i.type = N''1''            -- Clustered rowstore index
                                  THEN key_ordinal                -- matches up key sequence with STATS column order for clustered index
                                  ELSE CASE WHEN column_store_order_ordinal > 0
                                            THEN column_store_order_ordinal
                                            ELSE index_column_id
                                       END
                             END
      -- For Missing index ----------------------------------------
      ,column_usage        = CAST(NULL AS NVARCHAR(40))  COLLATE ' + @collation + N' -- also used for Missing index column usage
      -- For FULLTEXT ---------------------------------------------
      ,type_column_id             = CAST(NULL AS INT)         -- fulltext, stores the user-supplied document file extension
      ,language_id                = CAST(NULL AS INT)         -- fulltext, LCID of language whose word breaker is used to index this column.
      ,statistical_semantics      = CAST(NULL AS BIT)         -- fulltext, statistical semantics enabled in addition to full-text indexing
      -- To flag columns from the CLUSTERED index to avoid key synergies (same sequence, overlaps, contained index key elements)
      ,in_Clustered_index         = CAST(0 AS BIT)
      -- To flag index columns included in filter definitions
      ,is_index_column_filtered   = CAST(0 AS BIT)
  FROM [sys].[index_columns]       AS ic
  JOIN [##SQLXL_Index_sys_objects] AS o
    ON DB_ID()      = o.database_id
   AND ic.object_id = o.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_indexes] AS i
    ON DB_ID()      = i.database_id
   AND ic.object_id = i.object_id
   AND ic.index_id  = i.index_id
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_index_columns]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[index_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Add index columns for additional index objects - missing indexes, fulltext indexes - to existing table [##SQLXL_Index_sys_index_columns]
 NOTE: Foreign Key Constraints and table functions handled separately
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT statistical_semantics = CONVERT(INT,NULL)
)
INSERT INTO [##SQLXL_Index_sys_index_columns]
      (database_id
      ,object_id
      ,index_id
      ,type
      ,index_column_id
      ,column_id
      ,key_ordinal
      ,partition_ordinal
      ,is_descending_key
      ,is_included_column
      ,key_column_sequence
      ,column_usage
      ,type_column_id
      ,language_id
      ,statistical_semantics
      ,column_store_order_ordinal
      )
SELECT database_id                = DB_ID()
      ,object_id
      ,index_id
      ,type
      ,index_column_id
      ,column_id
      ,key_ordinal
      ,partition_ordinal          = 0
      ,is_descending_key
      ,is_included_column         = CASE WHEN column_usage = N''INCLUDE''
                                         THEN 1
                                         ELSE 0
                                    END
      ,key_column_sequence        = index_column_id
      ,column_usage
      ,type_column_id
      ,language_id
      ,statistical_semantics
      ,column_store_order_ordinal = 0
  FROM (-- Missing index Columns - also used to get list of columns to get statistics for
        SELECT type                       = N''M''        -- missing nonclustered rowstore index
              ,object_id                  = object_id
              ,index_id                   = index_handle
              ,index_column_id            = 0
              ,column_id                  = column_id
              ,key_ordinal                = 0
              ,is_descending_key          = NULL
              ,column_usage               = column_usage
              ,type_column_id             = NULL
              ,language_id                = NULL
              ,statistical_semantics      = NULL
          FROM [##SQLXL_Index_sys_dm_db_missing_index_columns]
         WHERE DB_ID() = database_id
        UNION ALL -- fulltext_index_columns - also used to get list of columns to get statistics for
        SELECT type                       = N''90''       -- full-text index of a tabular object
              ,object_id                  = object_id
              ,index_id                   = object_id
              ,index_column_id            = 0
              ,column_id                  = column_id
              ,key_ordinal                = 0
              ,is_descending_key          = NULL
              ,column_usage               = NULL
              ,type_column_id             = type_column_id
              ,language_id                = language_id
              ,statistical_semantics
          FROM [sys].[fulltext_index_columns] -- from SYS object directly, only used once
       ) i
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_index_columns] - insert Missing & FUllText index columns'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N' Added Missing Index Columns,[fulltext_index_columns] to [SQLXL_Index_sys_index_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

-- Add index to speed up subsequent queries
IF @i = 1 BEGIN  -- first time through database loop
   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Index_sys_index_columns
       ON [##SQLXL_Index_sys_index_columns]
         (database_id
         ,object_id
         ,index_id
         ,type
         ,column_id
         )
     WITH (DATA_COMPRESSION = PAGE
          ,MAXDOP = 1
          );

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
                + N'    ... ' + @db_name_quoted + N' Index [ixuc_SQLXL_Index_sys_index_columns]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @exec_dttm = GETDATE();
   END -- IF @ssms_ads > 0 BEGIN
END;   -- IF @i = 1 BEGIN

/******************************************************************************************************************************************\
 Collect [sys].[extended_properties]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_extended_properties];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_extended_properties]'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_extended_properties]')
    + N'
  FROM (-- columns from [sys].[extended_properties]
SELECT database_id = DB_ID()
      ,class
      ,class_desc  = class_desc                   COLLATE ' + @collation + N'
      ,major_id
      ,minor_id
      ,name        = name                         COLLATE ' + @collation + N'
      ,value       = CONVERT(NVARCHAR(MAX),value) COLLATE ' + @collation + N' -- NOTE: source is type SQL_VARIANT
  FROM [sys].[extended_properties]
 WHERE CHARINDEX(N''MS_DiagramPane'',name) = 0
) AS qry
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_extended_properties]'
       ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[extended_properties]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[stats]
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
<FUTURE> WWI
select top (100) *
  from sys.stats AS s
  JOIN sys.stats_columns AS c
	ON s.object_id = c.object_id
   and s.stats_id = c.stats_id
 where s.object_id = 407581136
   and s.has_filter = 0
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation     SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE database_id = DB_ID())
       ,@db_name_quoted NVARCHAR(MAX) = N''
       ,@exec_dttm     DATETIME      = GETDATE()
       ,@i             INT           = 1
       ,@sql           NVARCHAR(MAX)
       ,@ssms_ads      TINYINT       = 2
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_stats];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @Pattern NVARCHAR(15) = ''%[^'' + NChar(9) + NCHAR(10) + NCHAR(13) + NCHAR(32) + '']%'';
                               -- Includes Tabs, carriage returns, line feeds, spaces

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2012 --------------------------------------------------------------------
       is_temporary                 = CONVERT(BIT    ,NULL)
       -- SQL 2014 --------------------------------------------------------------------
      ,is_incremental               = CONVERT(BIT    ,NULL)
       -- SQL 2019 --------------------------------------------------------------------
      ,has_persisted_sample         = CONVERT(BIT    ,NULL)
      ,stats_generation_method      = CONVERT(INT    ,NULL)
      ,stats_generation_method_desc = CONVERT(SYSNAME,NULL) COLLATE ' + @collation + N'
       -- SQL 2022 --------------------------------------------------------------------
      ,auto_drop                    = CONVERT(BIT    ,NULL)
)'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_stats]'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_stats]')
    + N'
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[stats]
SELECT database_id                  = DB_ID()
      ,object_id                    = s.object_id
      ,name                         = s.name                       COLLATE ' + @collation + N'
      ,s.stats_id
      ,s.auto_created
      ,s.user_created
      ,s.no_recompute
      ,s.has_filter
      ,filter_definition = STUFF(-- trim off tabs,carriage returns,line feeds, spaces
                                 s.filter_definition
                                ,1
                                ,ISNULL(NULLIF(PATINDEX(@Pattern
                                                       ,s.filter_definition
                                                       )
                                              ,0) - 1
                                       ,0)
                                ,N''''
                                )                                  COLLATE ' + @collation + N'
      ,is_temporary
      ,is_incremental
      ,has_persisted_sample
      ,stats_generation_method
      ,stats_generation_method_desc = stats_generation_method_desc COLLATE ' + @collation + N'
      ,auto_drop
  FROM [##SQLXL_Index_sys_objects] AS o
  JOIN [sys].[stats]               AS s
    ON DB_ID()     = o.database_id
   AND s.object_id = o.object_id
) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[stats_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[stats_columns]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_stats_columns];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_stats_columns]'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_stats_columns]')
    + N'
  FROM (-- columns from [sys].[stats_columns]
SELECT database_id       = DB_ID()
      ,object_id         = s.object_id
      ,s.stats_id
      ,s.stats_column_id
      ,s.column_id
  FROM [sys].[stats_columns]       AS s
  JOIN [##SQLXL_Index_sys_objects] AS o
    ON DB_ID()     = o.database_id
   AND s.object_id = o.object_id
) AS qry
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_stats_columns]'
       ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[stats_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[dm_db_partition_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_db_partition_stats]
 NOTE: memory optimized table row_counts don't show up in [sys].[dm_db_partition_stats]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
USE [WideWorldImporters]
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_partition_stats];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_dm_db_partition_stats]'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_dm_db_partition_stats]')
    + N'
  FROM (-- columns from [sys].[dm_db_partition_stats]
SELECT database_id                = DB_ID()
      ,object_id                  = ps.object_id
      ,index_id                   = ps.index_id
      ,Partition_CNT              = COUNT(ps.partition_id)
      ,used_page_CNT              = SUM(ps.used_page_count)
      ,in_row_data_page           = SUM(ps.in_row_data_page_count)
      ,in_row_used_page           = SUM(ps.in_row_used_page_count)
      ,in_row_reserved_page       = SUM(ps.in_row_reserved_page_count)
      ,lob_used_page              = SUM(ps.lob_used_page_count)
      ,lob_reserved_page          = SUM(ps.lob_reserved_page_count)
      ,row_overflow_used_page     = SUM(ps.row_overflow_used_page_count)
      ,row_overflow_reserved_page = SUM(ps.row_overflow_reserved_page_count)
      ,reserved_page              = SUM(ps.reserved_page_count)
                                    -- in_row_reserved_page_count + lob_reserved_page_count + row_overflow_reserved_page_count
      ,row_CNT                    = SUM(ps.row_count)
  FROM [sys].[dm_db_partition_stats] AS ps
 GROUP BY
       ps.object_id
      ,ps.index_id
) AS qry
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_partition_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_partition_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[dm_db_stats_properties] - used for modification_counter if SQL 2012+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_db_stats_properties]
 Use STATS_DATE function to only get stats_properties after they have been computed. Filtered stats are not created if table/partition empty
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_stats_properties];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT persisted_sample_percent = CONVERT(FLOAT,NULL)
)'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_dm_db_stats_properties]'
    + NCHAR(13) + NCHAR(10) + N'SELECT dsp.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT dsp.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_dm_db_stats_properties]')
    + N'
  FROM newcol
 CROSS
  JOIN (-- list of all statistics for database
        SELECT TOP (100) PERCENT
               object_id
              ,stats_id
          FROM [##SQLXL_Index_sys_stats]
         WHERE database_id = DB_ID()
           AND STATS_DATE(object_id,stats_id) IS NOT NULL -- filter out stats not yet created
         ORDER BY
               object_id
              ,stats_id
       ) AS i
 CROSS
 APPLY (-- get [sys].[dm_db_stats_properties] for each index
        SELECT database_id      = DB_ID()
              ,object_id
              ,stats_id
              ,partition_number = CONVERT(INT,0)
              ,last_updated
              ,rows
              ,rows_sampled
              ,steps
              ,unfiltered_rows
              ,modification_counter
              ,persisted_sample_percent
              --------------------------------------------------------
              ,updated_days_ago = DATEDIFF(DAY,last_updated,GETDATE())
         FROM [sys].[dm_db_stats_properties] (i.object_id, i.stats_id)
       ) AS dsp
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_stats_properties]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_stats_properties] - used for modification_counter if SQL 2012+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[dm_db_incremental_stats_properties]'
            + N' - partition modification_counter - SQL 2012SP2+,2016SP1+,2017+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_db_incremental_stats_properties]
 This function was introduced in SQL Server 2014 (12.x) Service Pack 2 and SQL Server 2016 (13.x) Service Pack 1.
 Function returns same basic structure as above
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_incremental_stats_properties];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id
         ,object_id
         ,stats_id
         ,partition_number
         ,last_updated
         ,rows
         ,rows_sampled
         ,steps
         ,unfiltered_rows
         ,modification_counter
         ,persisted_sample_percent
          --------------------------------------------------------
         ,updated_days_ago
     INTO [##SQLXL_Index_sys_dm_db_incremental_stats_properties]
     FROM [##SQLXL_Index_sys_dm_db_stats_properties]
END; -- IF @i = 1

-----------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-----------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[dm_db_incremental_stats_properties]'') IS NOT NULL
WITH newcol AS (-- columns added after SQL Server 2005
SELECT persisted_sample_percent = CONVERT(FLOAT,NULL)
)
INSERT INTO [##SQLXL_Index_sys_dm_db_incremental_stats_properties]
SELECT dsp.*
  FROM newcol
 CROSS
  JOIN (-- list of all indexes for database
        SELECT object_id
              ,index_id
          FROM [##SQLXL_Index_sys_indexes]
         WHERE database_id = DB_ID()
       ) AS i
 CROSS
 APPLY (-- get [sys].[dm_db_incremental_stats_properties] for indexes
        SELECT database_id              = DB_ID()
              ,object_id
              ,stats_id
              ,partition_number
              ,last_updated
              ,rows
              ,rows_sampled
              ,steps
              ,unfiltered_rows
              ,modification_counter
              ,persisted_sample_percent
              ----------------------------------------------------------
              ,updated_days_ago = DATEDIFF(DAY,last_updated,GETDATE())
         FROM [sys].[dm_db_incremental_stats_properties] (i.object_id, i.index_id)
       ) AS dsp
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_incremental_stats_properties] '
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_incremental_stats_properties]'
             + N' - partition modification_counter - SQL 2012SP2+,2016SP1+,2017+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[partitions]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[partitions]
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_partitions];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

-----------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT xml_compression = CONVERT(BIT,NULL)
)'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_partitions]'
    + NCHAR(13) + NCHAR(10) + N'SELECT p.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT p.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_partitions]')
    + N'
  FROM newcol
 CROSS
 APPLY (-- aggregate columns from [sys].[partitions]
        SELECT database_id             = DB_ID()
              ,object_id               = object_id
              ,index_id
              ,hobt_id
              ,partition_id
              ,rows                    = SUM(rows)
              ,none_comp               = SUM(CASE WHEN data_compression = CAST(0 AS TINYINT) THEN 1 ELSE 0 END) -- NONE
              ,row_comp                = SUM(CASE WHEN data_compression = CAST(1 AS TINYINT) THEN 1 ELSE 0 END) -- ROW
              ,page_comp               = SUM(CASE WHEN data_compression = CAST(2 AS TINYINT) THEN 1 ELSE 0 END) -- PAGE
              ,colstore_comp           = SUM(CASE WHEN data_compression = CAST(3 AS TINYINT) THEN 1 ELSE 0 END) -- COLUMNSTORE
              ,colstore_arch           = SUM(CASE WHEN data_compression = CAST(4 AS TINYINT) THEN 1 ELSE 0 END) -- COLUMNSTORE_ARCHIVE
              ,xml_comp                = SUM(CASE WHEN xml_compression  = CAST(1 AS BIT    ) THEN 1 ELSE 0 END) -- XML index
          FROM (SELECT object_id
                      ,index_id
                      ,hobt_id
                      ,partition_id
                      ,rows
                      ,data_compression
                      ,xml_compression
                  FROM [sys].[partitions]
               ) AS sp
         GROUP BY
               object_id
              ,index_id
              ,hobt_id
              ,partition_id
       ) AS p
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_partitions]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[partitions]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Create index
--------------------------------------------------------------------------------------------------------------------------------------------
IF @i = 2 BEGIN  -- only execute on second database if more than one
   IF @ssms_ads > 0 RAISERROR(N'             ... Start index ixuc_SQLXL_Index_sys_partitions',0,0) WITH NOWAIT;
   CREATE CLUSTERED
    index ixuc_SQLXL_Index_sys_partitions
       ON [##SQLXL_Index_sys_partitions]
         (database_id
         ,object_id
         ,index_id
         )
     WITH (DATA_COMPRESSION = PAGE
          ,MAXDOP = 1
          );

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
                + N'    ... Index ixuc_SQLXL_Index_sys_partitions'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @exec_dttm = GETDATE();
   END -- IF @ssms_ads > 0 BEGIN
END;   -- IF @i = 2 BEGIN

/******************************************************************************************************************************************\
 Collect [sys].[internal_partitions] - Introduced in SQL 2016
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_internal_partitions];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP(0)
       database_id                 = CONVERT(INT    ,NULL)
      ,partition_id                = CONVERT(BIGINT ,NULL)
      ,object_id                   = CONVERT(INT    ,NULL)
      ,index_id                    = CONVERT(INT    ,NULL)
      ,partition_number            = CONVERT(INT    ,NULL)
      ,hobt_id                     = CONVERT(BIGINT ,NULL)
      ,internal_object_type        = CONVERT(TINYINT,NULL)
      ,internal_object_type_desc   = CONVERT(SYSNAME,NULL) COLLATE ' + @collation + N'
      ,row_group_id                = CONVERT(INT    ,NULL)                             -- integer
      ,rows                        = CONVERT(BIGINT ,NULL)
      ,data_compression            = CONVERT(TINYINT,NULL)
      ,data_compression_desc       = CONVERT(SYSNAME,NULL) COLLATE ' + @collation + N'
      ,optimize_for_sequential_key = CONVERT(BIT    ,NULL)
  INTO [##SQLXL_Index_sys_internal_partitions];'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[internal_partitions]'') IS NOT NULL
WITH newcol AS (-- columns added after SQL Server 2005
SELECT optimize_for_sequential_key = CONVERT(BIT,NULL) -- SQL 2019+, Azure SQL Database
)
INSERT INTO [##SQLXL_Index_sys_internal_partitions]' + N'
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[internal_partitions]
        SELECT database_id               = DB_ID()
              ,partition_id
              ,object_id
              ,index_id
              ,partition_number
              ,hobt_id
              ,internal_object_type
              ,internal_object_type_desc = internal_object_type_desc COLLATE ' + @collation + N'
              ,row_group_id                                                                       -- integer
              ,rows
              ,data_compression
              ,data_compression_desc     = data_compression_desc     COLLATE ' + @collation + N'
              ,optimize_for_sequential_key
          FROM [sys].[internal_partitions]
       ) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_internal_partitions]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[internal_partitions] - 2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect statistics on In-Memory (XTP) Objects
 NOTE: [sys].[dm_db_xtp_hash_index_stats] ARE OMITTED, since it scans the entire table
       Used to understand and tune the HASH bucket counts. It can also be used to detect cases where the index key has many duplicates.
 Columns marked "Internal use only" are omitted
 Column "xtp_object_id" is the Internal ID corresponding to the current version of the object. Note: Applies to SQL Server 2016 (13.x)
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_xtp_index_stats];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id                    = CAST(NULL AS INT    )
      ,object_id                      = CAST(NULL AS INT    )
      ,table_name                     = CAST(NULL AS SYSNAME)     COLLATE ' + @collation + N'
      ,index_id                       = CAST(NULL AS INT    )
      ,type                           = CAST(NULL AS NVARCHAR(2)) COLLATE ' + @collation + N'
      ,type_desc                      = CAST(NULL AS SYSNAME)     COLLATE ' + @collation + N'
      ,index_name                     = CAST(NULL AS SYSNAME)     COLLATE ' + @collation + N'
      ,is_unique                      = CAST(NULL AS BIT    )
      -- [sys].[dm_db_xtp_object_stats] -----------------------
      ,row_insert_attempts            = CAST(NULL AS BIGINT )
      ,row_update_attempts            = CAST(NULL AS BIGINT )
      ,row_delete_attempts            = CAST(NULL AS BIGINT )
      ,write_conflicts                = CAST(NULL AS BIGINT )
      ,unique_constraint_violations   = CAST(NULL AS BIGINT )
      -- [sys].[dm_db_xtp_index_stats] ------------------------
      ,scans_started                  = CAST(NULL AS BIGINT )
      ,scans_retries                  = CAST(NULL AS BIGINT )
      ,rows_returned                  = CAST(NULL AS BIGINT )
      ,rows_touched                   = CAST(NULL AS BIGINT )
      -- [sys].[dm_db_xtp_Nonclustered_index_stats] -----------
      ,delta_pages                    = CAST(NULL AS BIGINT )
      ,leaf_pages                     = CAST(NULL AS BIGINT )
      ,page_update_CNT                = CAST(NULL AS BIGINT )
      ,page_update_retry_CNT          = CAST(NULL AS BIGINT )
      ,page_consolidation_CNT         = CAST(NULL AS BIGINT )
      ,page_consolidation_retry_CNT   = CAST(NULL AS BIGINT )
      ,page_split_CNT                 = CAST(NULL AS BIGINT )
      ,page_split_retry_CNT           = CAST(NULL AS BIGINT )
      ,key_split_CNT                  = CAST(NULL AS BIGINT )
      ,key_split_retry_CNT            = CAST(NULL AS BIGINT )
      ,page_merge_CNT                 = CAST(NULL AS BIGINT )
      ,page_merge_retry_CNT           = CAST(NULL AS BIGINT )
      ,key_merge_CNT                  = CAST(NULL AS BIGINT )
      ,key_merge_retry_CNT            = CAST(NULL AS BIGINT )
      ,uses_key_normalization         = CAST(NULL AS BIT    )
      -- [sys].[dm_db_xtp_memory_consumers] -------------------
      ,allocated_bytes                = CAST(NULL AS BIGINT )
      ,used_bytes                     = CAST(NULL AS BIGINT )
      ,allocation_CNT                 = CAST(NULL AS BIGINT )
  INTO [##SQLXL_Index_sys_dm_db_xtp_index_stats]
OPTION (MAXDOP 1,RECOMPILE);'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[dm_db_xtp_index_stats]'') IS NOT NULL
WITH newcol AS (-- columns added after SQL Server 2005
SELECT uses_key_normalization = CONVERT(BIT   ,NULL) -- 2016+
)
INSERT INTO [##SQLXL_Index_sys_dm_db_xtp_index_stats]' + N'
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[dm_db_xtp_index_stats]
        SELECT database_id         = DB_ID()
              ,object_id           = t.object_id
              ,table_name          = t.name                      COLLATE ' + @collation + N'
              ,i.index_id
              ,type                = CAST(i.type AS NVARCHAR(2)) COLLATE ' + @collation + N'
              ,i.type_desc
              ,index_name          = COALESCE(i.name COLLATE ' + @collation + N',i.type_desc COLLATE ' + @collation + N')
              ,i.is_unique
              -- [sys].[dm_db_xtp_object_stats] ------------- Columns marked "Internal use only" are omitted
              ,xos.row_insert_attempts
              ,xos.row_update_attempts
              ,xos.row_delete_attempts
              ,xos.write_conflicts
              ,xos.unique_constraint_violations
              -- [sys].[dm_db_xtp_index_stats] -------------- Columns marked "Internal use only" are omitted
              ,xis.scans_started
              ,xis.scans_retries
              ,xis.rows_returned
              ,xis.rows_touched
              -- [sys].[dm_db_xtp_Nonclustered_index_stats] ---
              ,nis.delta_pages
              ,nis.leaf_pages
              ,page_update_CNT              = nis.page_update_count
              ,page_update_retry_CNT        = nis.page_update_retry_count
              ,page_consolidation_CNT       = nis.page_consolidation_count
              ,page_consolidation_retry_CNT = nis.page_consolidation_retry_count
              ,page_split_CNT               = nis.page_split_count
              ,page_split_retry_CNT         = nis.page_split_retry_count
              ,key_split_CNT                = nis.key_split_count
              ,key_split_retry_CNT          = nis.key_split_retry_count
              ,page_merge_CNT               = nis.page_merge_count
              ,page_merge_retry_CNT         = nis.page_merge_retry_count
              ,key_merge_CNT                = nis.key_merge_count
              ,key_merge_retry_CNT          = nis.key_merge_retry_count
              ,nis.uses_key_normalization
              -- [sys].[dm_db_xtp_memory_consumers] --------- Columns marked "Internal use only" are omitted
              ,mc.allocated_bytes
              ,mc.used_bytes
              ,mc.allocation_CNT
          FROM (-- List of candidate memory optimized tables in this database
                SELECT database_id
                      ,object_id   = object_id
                      ,name        = name
                  FROM [##SQLXL_Index_sys_objects]
                 WHERE DB_ID() = database_id
                   AND N''U''  = type                -- User Table
                   AND 1       = is_memory_optimized -- only returns tables that are memory optimized
               ) AS t
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_indexes]    AS i
            ON t.database_id = i.database_id
           AND t.object_id   = i.object_id   -- only XTP memory optimized tables selected above
          LEFT OUTER
          JOIN [sys].[dm_db_xtp_object_stats] AS xos
            ON i.object_id   = xos.object_id
           AND i.index_id    = 0
          LEFT OUTER
          JOIN [sys].[dm_db_xtp_index_stats]  AS xis
            ON i.object_id   = xis.object_id
           AND i.index_id    = xis.index_id
          LEFT OUTER
          JOIN (-- Add up memory optimized index stats from [sys].[dm_db_xtp_Nonclustered_index_stats]
                SELECT object_id
                      ,index_id
                      ,delta_pages                    = SUM(delta_pages                   )
                      ,leaf_pages                     = SUM(leaf_pages                    )
                      ,page_update_count              = SUM(page_update_count             )
                      ,page_update_retry_count        = SUM(page_update_retry_count       )
                      ,page_consolidation_count       = SUM(page_consolidation_count      )
                      ,page_consolidation_retry_count = SUM(page_consolidation_retry_count)
                      ,page_split_count               = SUM(page_split_count              )
                      ,page_split_retry_count         = SUM(page_split_retry_count        )
                      ,key_split_count                = SUM(key_split_count               )
                      ,key_split_retry_count          = SUM(key_split_retry_count         )
                      ,page_merge_count               = SUM(page_merge_count              )
                      ,page_merge_retry_count         = SUM(page_merge_retry_count        )
                      ,key_merge_count                = SUM(key_merge_count               )
                      ,key_merge_retry_count          = SUM(key_merge_retry_count         )
                      ,uses_key_normalization         = CAST(MAX(CAST(uses_key_normalization AS TINYINT)) AS BIT)
                                                        -- tinyint needed for MAX()
                  FROM (-- required to avoid error message:
                        -- "Aggregates on the right side of an APPLY cannot reference columns from the left side"
                        -- when referencing newcol CTE
                        SELECT object_id
                              ,index_id
                              ,delta_pages
                              ,leaf_pages
                              ,page_update_count
                              ,page_update_retry_count
                              ,page_consolidation_count
                              ,page_consolidation_retry_count
                              ,page_split_count
                              ,page_split_retry_count
                              ,key_split_count
                              ,key_split_retry_count
                              ,page_merge_count
                              ,page_merge_retry_count
                              ,key_merge_count
                              ,key_merge_retry_count
                              ,uses_key_normalization
                          FROM [sys].[dm_db_xtp_Nonclustered_index_stats]
                       ) AS xnis
                 GROUP BY
                       object_id
                      ,index_id
               ) AS nis
            ON i.object_id = nis.object_id
           AND i.index_id  = nis.index_id
          LEFT OUTER
          JOIN (-- [sys].[dm_db_xtp_memory_consumers] aggregated to the object & index level
                -- NOTE: [sys].[dm_db_xtp_table_memory_stats] sums up xtp_memory_consumer to the table level
                SELECT object_id
                      ,index_id         = CASE WHEN index_id IS NULL THEN 0 ELSE index_id END
                      ,allocated_bytes  = SUM(allocated_bytes )
                      ,used_bytes       = SUM(used_bytes      )
                      ,allocation_CNT   = SUM(allocation_count)
                  FROM [sys].[dm_db_xtp_memory_consumers]
                 WHERE object_id  > 0                     -- omit system objects
                 GROUP BY
                       object_id
                      ,CASE WHEN index_id IS NULL
                            THEN 0
                            ELSE index_id
                       END
               ) AS mc
            ON i.object_id = mc.object_id
           AND i.index_id  = mc.index_id
       ) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_xtp_index_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_xtp_index_stats],[xtp_object_stats],[xtp_Nonclustered_index_stats]'
                                             + N',[xtp_memory_consumers]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[dm_os_buffer_descriptors] (database aggregates)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect partition & object/index name info to [sys].[dm_os_buffer_descriptors]
 to create SQLXL_Index_sys_dm_os_buffer_descriptors_EXT
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_os_buffer_descriptors_EXT];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    , NCHAR(13) + NCHAR(10) + N'INSERT INTO [##SQLXL_Index_sys_dm_os_buffer_descriptors_EXT]'
    + NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    , NCHAR(13) + NCHAR(10) + N'SELECT qry.*'
    + NCHAR(13) + NCHAR(10) + N'  INTO [##SQLXL_Index_sys_dm_os_buffer_descriptors_EXT]')
    + N'
  FROM (-- convert buffer allocations to physical objects
        SELECT database_id       = DB_ID()
              ,object_id         = o.object_id
              ,obj_name          = o.name          COLLATE ' + @collation + N'
              ,index_id          = i.index_id
              ,index_name        = COALESCE(i.name COLLATE ' + @collation + N',i.type_desc COLLATE ' + @collation + N')
              ,type              = i.type
              ,type_desc         = i.type_desc     COLLATE ' + @collation + N'
              ,row_CNT           = SUM(obd.row_CNT)
              ,buffer_total_KB   = SUM(obd.buffer_total_KB)
              ,buffer_free_KB    = SUM(obd.buffer_free_KB )
              ,read_microsec_AVG = SUM(obd.buffer_total_KB * obd.read_microsec_AVG)/SUM(obd.buffer_total_KB)
          FROM (-- get all buffer allocations for database
                SELECT database_id
                      ,allocation_unit_id
                      ,row_CNT
                      ,buffer_free_KB
                      ,buffer_total_KB
                      ,read_microsec_AVG
                  FROM [##SQLXL_Index_sys_dm_os_buffer_descriptors]
                 WHERE DB_ID() = database_id
               ) AS obd
          LEFT OUTER
          JOIN [sys].[allocation_units]       AS au
            ON obd.allocation_unit_id = au.allocation_unit_id
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_partitions] AS ph
            ON 1 = 1
           AND obd.database_id = ph.database_id
           AND au.container_id = ph.hobt_id
           AND au.type        IN (1 -- In-row data (all data types, except LOB data types)
                                 ,3 -- Row-overflow data
                                 )
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_partitions] AS pp
            ON 1 = 1
           AND obd.database_id = pp.database_id
           AND au.container_id = pp.partition_id
           AND au.type         = 2    -- Large object (LOB) data (text,ntext,image,xml,large value types,and CLR UDT)
          JOIN [##SQLXL_Index_sys_objects]    AS o  -- OUTER JOIN not used in order to filter out system objects
            ON 1 = 1
           AND obd.database_id                     = o.database_id
           AND COALESCE(ph.object_id,pp.object_id) = o.object_id
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_indexes]    AS i
            ON obd.database_id                     = i.database_id
           AND COALESCE(ph.object_id,pp.object_id) = i.object_id
           AND COALESCE(ph.index_id ,pp.index_id ) = i.index_id
         GROUP BY
               o.object_id
              ,o.name      COLLATE ' + @collation + N'
              ,i.index_id
              ,COALESCE(i.name COLLATE ' + @collation + N',i.type_desc COLLATE ' + @collation + N')
              ,i.type
              ,i.type_desc COLLATE ' + @collation + N'
       ) AS qry
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_dm_os_buffer_descriptors_EXT]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N' [sys].[dm_os_buffer_descriptors] (database aggregates)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
SQL 2016+
Collect [sys].[dm_db_column_store_row_group_physical_stats]
NOTE: includes all columns in [sys].[column_store_row_groups]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id                         = CAST(NULL AS INT     )
      ,object_id                           = CAST(NULL AS INT     )
      ,index_id                            = CAST(NULL AS INT     )
      --------------------------------------------------------------
      ,partition_number                    = CAST(NULL AS INT     )
      ,row_group_id                        = CAST(NULL AS INT     )                             -- integer
      ,delta_store_hobt_id                 = CAST(NULL AS BIGINT  )
      ,state                               = CAST(NULL AS TINYINT )
      ,state_desc                          = CAST(NULL AS SYSNAME ) COLLATE ' + @collation + N'
      ,total_rows                          = CAST(NULL AS BIGINT  )
      ,deleted_rows                        = CAST(NULL AS BIGINT  )
      ,size_in_bytes                       = CAST(NULL AS BIGINT  )
      ,trim_reason                         = CAST(NULL AS TINYINT )
      ,trim_reason_desc                    = CAST(NULL AS SYSNAME ) COLLATE ' + @collation + N'
      ,transition_to_compressed_state      = CAST(NULL AS TINYINT )
      ,transition_to_compressed_state_desc = CAST(NULL AS SYSNAME ) COLLATE ' + @collation + N'
      ,has_vertipaq_optimization           = CAST(NULL AS BIT     )
      ,generation                          = CAST(NULL AS BIGINT  )
      --------------------------------------------------------------
      ,created_time                        = CAST(NULL AS DATETIME)
      ,closed_time                         = CAST(NULL AS DATETIME)
  INTO [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats];'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[dm_db_column_store_row_group_physical_stats]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats]' + N'
SELECT database_id                         = DB_ID()
      ,object_id                           = object_id
      ,index_id
      ,partition_number
      ,row_group_id                                                                                          -- integer
      ,delta_store_hobt_id
      ,state
      ,state_desc                          = state_desc                          COLLATE ' + @collation + N'
      ,total_rows
      ,deleted_rows
      ,size_in_bytes
      ,trim_reason
      ,trim_reason_desc                    = trim_reason_desc                    COLLATE ' + @collation + N'
      ,transition_to_compressed_state
      ,transition_to_compressed_state_desc = transition_to_compressed_state_desc COLLATE ' + @collation + N'
      ,has_vertipaq_optimization
      ,generation
      ,created_time
      ,closed_time
  FROM [sys].[dm_db_column_store_row_group_physical_stats]
OPTION (MAXDOP 1,RECOMPILE,FORCE ORDER);' -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_column_store_row_group_physical_stats] - 2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_db_column_store_row_group_operational_stats] - SQL 2016+
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats];
   END TRY
   BEGIN CATCH
   END CATCH

SELECT TOP (0)
       database_id             = CAST(NULL AS INT)
      ,object_id               = CAST(NULL AS INT)
      ,index_id                = CAST(NULL AS INT)
      ,partition_CNT           = CAST(NULL AS INT)
      ,row_group_CNT           = CAST(NULL AS INT)
      ,index_scan_CNT          = CAST(NULL AS BIGINT)
      ,scan_CNT                = CAST(NULL AS BIGINT)
      ,delete_buffer_scan_CNT  = CAST(NULL AS BIGINT)
      ,row_group_lock_CNT      = CAST(NULL AS BIGINT)
      ,row_group_lock_wait_CNT = CAST(NULL AS BIGINT)
      ,row_group_lock_wait_MS  = CAST(NULL AS BIGINT)
      ,returned_row_CNT        = CAST(NULL AS BIGINT)
      ,returned_aggregate_CNT  = CAST(NULL AS BIGINT)
      ,returned_group_CNT      = CAST(NULL AS BIGINT)
      ,input_groupby_row_CNT   = CAST(NULL AS BIGINT)
  INTO [##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats];

END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[dm_db_column_store_row_group_operational_stats]'') IS NOT NULL
WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2019+ -----------------------------------
       returned_row_COUNT        = CONVERT(BIGINT,NULL)
      ,returned_aggregate_COUNT  = CONVERT(BIGINT,NULL)
      ,returned_group_COUNT      = CONVERT(BIGINT,NULL)
      ,input_groupby_row_COUNT   = CONVERT(BIGINT,NULL)
)
INSERT INTO [##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats]' + N'
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- columns from [sys].[dm_db_column_store_row_group_operational_stats]
        SELECT database_id             = DB_ID()
              ,object_id               = object_id
              ,index_id
              ,partition_CNT           = COUNT(partition_number)
              ,row_group_CNT           = COUNT(row_group_id)
              ,index_scan_CNT          = SUM(index_scan_count)
              ,scan_CNT                = SUM(scan_count)
              ,delete_buffer_scan_CNT  = SUM(delete_buffer_scan_count)
              ,row_group_lock_CNT      = SUM(row_group_lock_count)
              ,row_group_lock_wait_CNT = SUM(row_group_lock_wait_count)
              ,row_group_lock_wait_MS  = SUM(row_group_lock_wait_in_ms)
              ,returned_row_CNT        = SUM(returned_row_count)
              ,returned_aggregate_CNT  = SUM(returned_aggregate_count)
              ,returned_group_CNT      = SUM(returned_group_count)
              ,input_groupby_row_CNT   = SUM(input_groupby_row_count)
          FROM (SELECT object_id
                      ,index_id
                      ,partition_number
                      ,row_group_id                        -- integer
                      ,index_scan_count
                      ,scan_count
                      ,delete_buffer_scan_count
                      ,row_group_lock_count
                      ,row_group_lock_wait_count
                      ,row_group_lock_wait_in_MS
                      ,returned_row_count
                      ,returned_aggregate_count
                      ,returned_group_count
                      ,input_groupby_row_count
                 FROM [sys].[dm_db_column_store_row_group_operational_stats]
               ) AS qry
         GROUP BY
               object_id
              ,index_id
      ) AS qry -- from CROSS APPLY
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_column_store_row_group_operational_stats] - 2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[index_resumable_operations] - SQL 2017+
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_index_resumable_operations];
   END TRY
   BEGIN CATCH
   END CATCH

   SET @sql = N'
SELECT TOP (0)
       database_id          = CAST(NULL AS INT)
      ,object_id            = CAST(NULL AS INT)
      ,index_id             = CAST(NULL AS INT)
      ,state_desc           = CAST(NULL AS SYSNAME) COLLATE ' + @collation + N'
      ,partition_CNT        = CAST(NULL AS BIGINT)
      ,start_time           = CAST(NULL AS DATETIME)
      ,last_pause_time      = CAST(NULL AS DATETIME)
      ,total_execution_time = CAST(NULL AS INT)
      ,page_CNT             = CAST(NULL AS BIGINT)
      ,percent_complete_MIN = CAST(NULL AS FLOAT)
      ,percent_complete_MAX = CAST(NULL AS FLOAT)
      ,sql_text             = CAST(NULL AS NVARCHAR(MAX)) COLLATE ' + @collation + N'
  INTO [##SQLXL_Index_sys_index_resumable_operations];'

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(''[sys].[index_resumable_operations]'') IS NOT NULL
INSERT INTO [##SQLXL_Index_sys_index_resumable_operations]' + N'
SELECT database_id          = DB_ID()
      ,object_id            = object_id
      ,index_id
      ,state_desc           = state_desc                COLLATE ' + @collation + N'
      ,partition_CNT        = COUNT(partition_number)
      ,start_time           = MIN(start_time)
      ,last_pause_time      = MAX(last_pause_time)
      ,total_execution_time = MAX(total_execution_time)
      ,page_CNT             = SUM(page_count)
      ,percent_complete_MIN = MIN(percent_complete)
      ,percent_complete_MAX = MAX(percent_complete)
      ,sql_text             = MAX(sql_text)             COLLATE ' + @collation + N'
  FROM [sys].[index_resumable_operations]
 GROUP BY
       object_id
      ,index_id
      ,state_desc
OPTION (MAXDOP 1,RECOMPILE);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS and first database only
SELECT '[##SQLXL_Index_sys_index_resumable_operations]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[index_resumable_operations] - SQL 2017+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
END;

/******************************************************************************************************************************************\
 Cursor through all DBCC statistics options for all indexes, Foreign Key Constraints & Columns used across indexable objects
 Statistics are not returned on all objects - e.g. Column Stores, empty tables
\******************************************************************************************************************************************/
IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = N'           Start ' + @db_name_quoted + N' DBCC SHOW_STATISTICS - DensityVector,StatHeader,Histogram'
   RAISERROR(@msg,0,0) WITH NOWAIT
   SET @exec_dttm = GETDATE();
END;

/*** LOCAL TESTING ***
DECLARE @collation      SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = DB_NAME())
       ,@db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_NAME())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_ShowStatistics_StatHeader];
   END TRY
   BEGIN CATCH
   END CATCH

   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_ShowStatistics_DensityVector];
   END TRY
   BEGIN CATCH
   END CATCH

   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_ShowStatistics_Histogram_summary];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
SET XACT_ABORT ON;             -- automatically roll back the current transaction when a statement raises a run-time error
SET IMPLICIT_TRANSACTIONS OFF; -- occasionally implicit transactions are created by the DBCC SHOW_STATISTICS function

--------------------------------------------------------------------------------------------------------------------------------------------
-- [##SQLXL_Index_sys_ShowStatistics_StatHeader]
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE
 TABLE #XL_IDX_sys_ShowStatistics_StatHeader
      (Name                     NVARCHAR(128)  COLLATE ' + @collation + N' NULL
      ,Updated                  DATETIME       NULL
      ,Rows                     BIGINT         NULL
      ,Rows_sampled             BIGINT         NULL
      ,Steps                    INT            NULL
      ,Density                  FLOAT          NULL
      ,Average_Key_Length       INT            NULL
      ,String_index             NVARCHAR(3)    COLLATE ' + @collation + N' NULL
      ,Filter_Expression        NVARCHAR(4000) COLLATE ' + @collation + N' NULL
      ,Unfiltered_Rows          BIGINT         NULL
      ,Persisted_Sample_Percent TINYINT        NULL
      );'

+IIF(@i = 1
    ,N'
CREATE
 TABLE [##SQLXL_Index_sys_ShowStatistics_StatHeader]
      (database_id              INT            NOT NULL
      ,object_id                INT            NOT NULL
      ,object_name              SYSNAME            COLLATE ' + @collation + N' NULL
      ,stats_target_name        SYSNAME            COLLATE ' + @collation + N' NULL
      ,index_id                 INT                NULL
      ,column_id                INT                NULL
      ,Statistics_age_days      INT                NULL
      ,Updated                  DATETIME           NULL
      ,Rows                     BIGINT             NULL
      ,Rows_sampled             BIGINT             NULL
      ,Steps                    INT                NULL
      ,Density                  FLOAT              NULL
      ,Average_Key_Length       INT                NULL
      ,String_index             NVARCHAR(3)        COLLATE ' + @collation + N' NULL
      ,Filter_Expression        NVARCHAR(4000)     COLLATE ' + @collation + N' NULL
      ,Unfiltered_Rows          BIGINT             NULL
      ,Persisted_Sample_Percent TINYINT            NULL
      )
  WITH (DATA_COMPRESSION = PAGE
       );'
    ,N'')

+ N'
--------------------------------------------------------------------------------------------------------------------------------------------
-- [##SQLXL_Index_sys_ShowStatistics_DensityVector]
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE
 TABLE #XL_IDX_sys_ShowStatistics_DensityVector
      (Row_ID                   INT IDENTITY(1,1) NOT NULL
      ,All_Density              FLOAT             NOT NULL
      ,Average_Length           FLOAT             NOT NULL
      ,[Columns]                NVARCHAR(MAX)         COLLATE ' + @collation + N' NOT NULL
      );'

+IIF(@i = 1
    ,N'
CREATE
 TABLE [##SQLXL_Index_sys_ShowStatistics_DensityVector]
      (database_id              INT           NOT NULL
      ,object_id                INT           NOT NULL
      ,object_name              SYSNAME           COLLATE ' + @collation + N' NULL
      ,stats_target_name        SYSNAME           COLLATE ' + @collation + N' NULL
      ,index_id                 INT               NULL
      ,column_id                INT               NULL
      ,Row_ID                   SMALLINT      NOT NULL
      ,All_Density              FLOAT         NOT NULL
      ,Average_Length           FLOAT         NOT NULL
      ,[Columns]                NVARCHAR(MAX)     COLLATE ' + @collation + N' NOT NULL
      )
  WITH (DATA_COMPRESSION = PAGE
       );'
    ,N'')

+ N'
--------------------------------------------------------------------------------------------------------------------------------------------
-- [##SQLXL_Index_sys_ShowStatistics_Histogram
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE
 TABLE #XL_IDX_sys_ShowStatistics_Histogram
      (Range_Hi_Key             SQL_VARIANT NULL
      ,Range_Rows               FLOAT       NULL
      ,EQ_Rows                  FLOAT       NULL
      ,Distinct_Range_Rows      BIGINT      NULL
      ,Avg_Range_Rows           FLOAT       NULL
      );'

+IIF(@i = 1
    ,N'
CREATE
 TABLE [##SQLXL_Index_sys_ShowStatistics_Histogram_summary]
      (database_id              INT     NOT NULL
      ,object_id                INT     NOT NULL
      ,object_name              SYSNAME     COLLATE ' + @collation + N' NULL
      ,stats_target_name        SYSNAME     COLLATE ' + @collation + N' NULL
      ,index_id                 INT         NULL
      ,column_id                INT         NULL
      ,min_rows_per_value       FLOAT       NULL
      ,max_rows_per_value       FLOAT       NULL
      ,null_rows                FLOAT       NULL
      ,param_sniff              FLOAT       NULL
      )
  WITH (DATA_COMPRESSION = PAGE
       );'
    ,N'')

+ N'
--------------------------------------------------------------------------------------------------------------------------------------------
-- Local Variables
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @database_name     SYSNAME       = N'''' COLLATE ' + @collation + N'
       ,@object_id         INT
       ,@index_ID          NVARCHAR(11)  = N'''' COLLATE ' + @collation + N'
       ,@column_id         INT
       ,@object_name       NVARCHAR(257) = N'''' COLLATE ' + @collation + N'
       ,@stats_target_name NVARCHAR(MAX) = N'''' COLLATE ' + @collation + N'
       ,@ssms_ads          TINYINT = (SELECT (1)
                                        FROM [sys].[dm_exec_sessions]
                                       WHERE session_id = @@spid
                                         AND (   program_name LIKE N''Microsoft SQL Server Management Studio%''
                                              OR program_name like N''azdata%'' -- azure data studio
                                              OR program_name    = N''SQLCMD''  -- SQL command
                                             )
                                     );

DECLARE stats_crsr CURSOR LOCAL FAST_FORWARD FOR
SELECT database_name = QUOTENAME(DB_NAME())
      ,c.object_id
      ,c.index_ID
      ,c.column_id
      ,c.object_name
      ,c.stats_target_name
  FROM (-- All relational indexes
        SELECT i.database_id
              ,i.object_id
              ,i.index_ID
              ,column_id             = CAST(NULL AS INT)
              ,object_name           = QUOTENAME(o.schema_name) + N''.'' + QUOTENAME(o.name) COLLATE ' + @collation + N'
              ,stats_target_name     = QUOTENAME(i.name)                                     COLLATE ' + @collation + N'
          FROM (-- Get statistics for all index types, including FullText
                SELECT database_id
                      ,object_id
                      ,index_id
                      ,name
                  FROM [##SQLXL_Index_sys_indexes]
                 WHERE DB_ID() = database_id
                   AND name   IS NOT NULL
                UNION -- get Full text indexes
                SELECT database_id
                      ,object_id
                      ,unique_index_id
                      ,name          = N''FULLTEXT''
                  FROM [##SQLXL_Index_sys_fulltext_indexes]
                 WHERE DB_ID() = database_id
               ) AS i
          JOIN [##SQLXL_Index_sys_objects] AS o
            ON i.database_id = o.database_id
           AND i.object_id   = o.object_id
         WHERE o.type  NOT IN (-- Statistics not available for types
                               N''TT'' -- Table Type
                              ,N''TF'' -- SQL table-valued-function (TVF)
                              )
        ------------------------------------------------------------------------------------------------------------------------------------
        -- Columns that have stats computed for them
        ------------------------------------------------------------------------------------------------------------------------------------
        UNION
        SELECT ic.database_id
              ,ic.object_id
              ,index_id              = CAST(NULL AS INT)
              ,ic.column_id
              ,object_name           = QUOTENAME(o.schema_name) + N''.'' + QUOTENAME(o.name) COLLATE ' + @collation + N'
              ,stats_target_name     = QUOTENAME(c.name)                                     COLLATE ' + @collation + N'
          FROM (-- All Columns that have had stats computed, including by Statistics Auto Create
                -- find candidate unique columns for HEAPS, columns that can takes advantage of new/existing NCS if added
                SELECT database_id
                      ,object_id
                      ,column_id
                  FROM [##SQLXL_Index_sys_stats_columns] -- all columns that have statistics created on them
                 WHERE DB_ID() = database_id
                 GROUP BY
                       database_id
                      ,object_id
                      ,column_id
               ) AS ic
          JOIN [##SQLXL_Index_sys_objects] AS o
            ON ic.database_id = o.database_id
           AND ic.object_id   = o.object_id                    -- want parent objects only
          JOIN [##SQLXL_Index_sys_columns] AS c
            ON ic.database_id  = c.database_id
           AND ic.object_id    = c.object_id
           AND ic.column_id    = c.column_id
           AND N''timestamp'' <> c.user_type_name -- no statistics returned for TIMESTAMP
         WHERE o.type  NOT IN (-- Statistics not available for types
                               N''TT'' -- Table Type
                              ,N''TF'' -- SQL table-valued-function (TVF)
                              )
      ) AS c
 ORDER BY
       object_id
      ,index_ID
      ,column_id
OPTION (MAXDOP 1,RECOMPILE);

OPEN stats_crsr;
WHILE 1 = 1 BEGIN

   FETCH NEXT
    FROM stats_crsr
    INTO @database_name
        ,@object_id
        ,@index_ID
        ,@column_id
        ,@object_name
        ,@stats_target_name;

   IF @@Fetch_Status <> 0
      BREAK

   BEGIN TRY
      --------------------------------------------------------------------------------------------------------------------------------------
      -- [##SQLXL_Index_sys_ShowStatistics_StatHeader]
      -- Cannot use CTE since executing system procedure DBCC SHOW_STATISTICS
      --------------------------------------------------------------------------------------------------------------------------------------
      INSERT
        INTO #XL_IDX_sys_ShowStatistics_StatHeader
            (Name
            ,Updated
            ,Rows
            ,Rows_sampled
            ,Steps
            ,Density
            ,Average_Key_Length
            ,String_index
            ,Filter_Expression
            ,Unfiltered_Rows'
      + CASE WHEN (         CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 14    -- SQL 2017+         */
                   OR (     CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)  = 13    -- SQL 2016 SP1      */
                       AND  CAST(SERVERPROPERTY(N'ProductBuild')        AS INT) >= 4446  -- SQL 2016 SP1 CU4+ */
                      )
                  )
             THEN N',Persisted_Sample_Percent'
             ELSE N''
        END + N'
            )
        EXEC(''' + IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
                      ,N'USE ' + @db_name_quoted + N';'
                      ,N'')
                  + N'
DBCC SHOW_STATISTICS ('''''' + @object_name        + N'''''','' + @stats_target_name + N'')
     WITH STAT_HEADER, NO_INFOMSGS'');

      -- insert into persisted table [##SQLXL_Index_sys_ShowStatistics_StatHeader] ----------
      INSERT
        INTO [##SQLXL_Index_sys_ShowStatistics_StatHeader]
            (database_id
            ,object_id
            ,object_name
            ,stats_target_name
            ,index_ID
            ,column_id
            ,Statistics_age_days
            ,Updated
            ,Rows
            ,Rows_sampled
            ,Steps
            ,Density
            ,Average_Key_Length
            ,String_index
            ,Filter_Expression
            ,Unfiltered_Rows'
      + CASE WHEN (         CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 14   -- SQL 2017+
                   OR (     CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)  = 13   -- SQL 2016
                       AND  CAST(SERVERPROPERTY(N'ProductBuild')        AS INT) >= 4446 -- SQL 2016 SP1 CU4+
                      )
                  )
             THEN N',Persisted_Sample_Percent'
             ELSE N''
        END + N'
            )
      SELECT DB_ID()
            ,@object_id
            ,@object_name
            ,@stats_target_name
            ,@index_ID
            ,@column_id
            ,Statistics_age_days = DATEDIFF(DAY,Updated,GETDATE())
            ,Updated
            ,Rows
            ,Rows_sampled
            ,Steps
            ,Density
            ,Average_Key_Length
            ,String_index
            ,Filter_Expression
            ,Unfiltered_Rows'
      + CASE WHEN (         CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 14   -- SQL 2017+
                   OR (     CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)  = 13   -- SQL 2016
                       AND  CAST(SERVERPROPERTY(N'ProductBuild')        AS INT) >= 4446 -- SQL 2016 SP1 CU4+
                      )
                  )
             THEN N',Persisted_Sample_Percent = CASE WHEN Persisted_Sample_Percent = 0 THEN 100 ELSE Persisted_Sample_Percent END'
             ELSE N''
        END + N'
        FROM #XL_IDX_sys_ShowStatistics_StatHeader
      OPTION (MAXDOP 1,RECOMPILE);

   END TRY
   BEGIN CATCH
      IF @ssms_ads > 0
      AND CHARINDEX(N''.[#'',@object_name) = 0
      AND CHARINDEX(N''.[ifts'',@object_name) = 0 -- full text indexes before processing
         SELECT warning        = N''DBCC SHOW_STATISTICS STAT_HEADER NOT FOUND''
               ,object          = @database_name + N''.'' + @object_name
               ,index_id        = @index_ID
               ,column_id       = @column_id
               ,statistics_name = @stats_target_name
         OPTION (MAXDOP 1,RECOMPILE);
   END CATCH

   BEGIN TRY
      --------------------------------------------------------------------------------------------------------------------------------------
      -- [##SQLXL_Index_sys_ShowStatistics_DensityVector]
      --------------------------------------------------------------------------------------------------------------------------------------
      INSERT
        INTO #XL_IDX_sys_ShowStatistics_DensityVector
        EXEC(''' + IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
                      ,N'USE ' + @db_name_quoted + N';'
                      ,N'')
                 + N'
DBCC SHOW_STATISTICS ('''''' + @object_name + N'''''','' + @stats_target_name + N'')
     WITH DENSITY_VECTOR, NO_INFOMSGS'')

      -- insert into persisted table [##SQLXL_Index_sys_ShowStatistics_DensityVector]
      INSERT
        INTO [##SQLXL_Index_sys_ShowStatistics_DensityVector]
      SELECT DB_ID()
            ,@object_id
            ,@object_name
            ,@stats_target_name
            ,@index_ID
            ,@column_id
            ,Row_ID = ROW_NUMBER() OVER (ORDER BY LEN([Columns]))
            ,All_Density
            ,Average_Length
            ,LTRIM(RTRIM([Columns]))
        FROM #XL_IDX_sys_ShowStatistics_DensityVector
      OPTION (MAXDOP 1,RECOMPILE);

   END TRY
   BEGIN CATCH
      IF @ssms_ads > 0
      AND CHARINDEX(N''.[#'',@object_name) = 0
      AND CHARINDEX(N''.[ifts'',@object_name) = 0 -- full text indexes before processing
         SELECT warning         = N''DBCC SHOW_STATISTICS DENSITY_VECTOR NOT FOUND''
               ,object          = @database_name + N''.'' + @object_name
               ,index_id        = @index_ID
               ,column_id       = @column_id
               ,statistics_name = @stats_target_name
         OPTION (MAXDOP 1,RECOMPILE);
   END CATCH

   BEGIN TRY
      --------------------------------------------------------------------------------------------------------------------------------------
      -- [##SQLXL_Index_sys_ShowStatistics_Histogram
      --------------------------------------------------------------------------------------------------------------------------------------
      INSERT
        INTO #XL_IDX_sys_ShowStatistics_Histogram
        EXEC(''' + IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
                      ,N'USE ' + @db_name_quoted + N';'
                      ,N'')
                 + N'
DBCC SHOW_STATISTICS ('''''' + @object_name + N'''''','' + @stats_target_name + N'')
     WITH HISTOGRAM, NO_INFOMSGS'')

      --------------------------------------------------------------------------------------------------------------------------------------
      -- Insert into [##SQLXL_Index_sys_ShowStatistics_Histogram
      -- BOL says:
      -- "AVG_RANGE_ROWS = Average number of rows with duplicate column values within a histogram step, excluding the upper bound.
      --  When DISTINCT_RANGE_ROWS is greater than 0, AVG_RANGE_ROWS is calculated by dividing RANGE_ROWS by DISTINCT_RANGE_ROWS.
      --  When DISTINCT_RANGE_ROWS is 0, AVG_RANGE_ROWS returns 1 for the histogram step."

      -- Since the histogram "upper bound" is not included in the AVG_RANGE_ROWS, compute parameter sniffing range by adding
      --    the EQ_ROWS to the RANGE_ROWS to get all records in a histogram step,
      --    then divide by the DISTINCT_RANGE_ROWS plus 1 to account for the upper bound.
      --------------------------------------------------------------------------------------------------------------------------------------
      -- insert into persisted table [##SQLXL_Index_sys_ShowStatistics_Histogram_summary]
      INSERT INTO [##SQLXL_Index_sys_ShowStatistics_Histogram_summary]
      SELECT DB_ID()
            ,@object_id
            ,@object_name
            ,@stats_target_name
            ,@index_ID
            ,@column_id
            ,e.min_rows_per_value
            ,e.max_rows_per_value
            ,e.null_rows
            ,param_sniff = CASE WHEN e.min_rows_per_value > 0
                                THEN e.max_rows_per_value / e.min_rows_per_value
                                ELSE NULL
                           END
        FROM (-- compute MIN & MAX rows per range, MAX null rows per range
              SELECT min_rows_per_value = MIN(e.arr)
                    ,max_rows_per_value = MAX(e.arr)
                    ,null_rows          = MAX(e.Nrr)
                FROM (-- compute average rows per range, null rows per range
                      SELECT arr = 1.0 * (Range_Rows + EQ_Rows) / (distinct_range_rows + 1)
                            ,nrr = CASE WHEN range_hi_key IS NULL
                                        THEN EQ_Rows
                                        ELSE 0
                                   END
                        FROM #XL_IDX_sys_ShowStatistics_Histogram
                     ) e
             ) e
      OPTION (MAXDOP 1,RECOMPILE);

   END TRY
   BEGIN CATCH
      IF @ssms_ads > 0
      AND CHARINDEX(N''.[#'',@object_name) = 0
      AND CHARINDEX(N''.[ifts'',@object_name) = 0 -- full text indexes before processing
         SELECT warning        = N''DBCC SHOW_STATISTICS HISTOGRAM NOT FOUND''
               ,object          = @database_name + N''.'' + @object_name
               ,index_id        = @index_ID
               ,column_id       = @column_id
               ,statistics_name = @stats_target_name
         OPTION(RECOMPILE);
   END CATCH

   -- Reset temp table for next batch of statistics
   TRUNCATE TABLE #XL_IDX_sys_ShowStatistics_DensityVector;
   TRUNCATE TABLE #XL_IDX_sys_ShowStatistics_StatHeader;
   TRUNCATE TABLE #XL_IDX_sys_ShowStatistics_Histogram;

END;

CLOSE stats_crsr;
DEALLOCATE stats_crsr;' -- end of SQL Statement

   EXECUTE [sys].[sp_executesql] @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

   SET @i = @i + 1

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
                + N'    ... ' + @db_name_quoted + N' DBCC SHOW_STATISTICS - DensityVector,StatHeader,Histogram'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @exec_dttm = GETDATE()
   END -- IF @ssms_ads > 0 BEGIN

END;   -- WHILE @i > 0 Database Cursor Loop

/******************************************************************************************************************************************\
********************************************************************************************************************************************
 END of database cursor
********************************************************************************************************************************************
\******************************************************************************************************************************************/
CLOSE db_crsr;
DEALLOCATE db_crsr;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
             + N' Closed Database cursor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
*** INDEX BUILDS  INDEX BUILDS  INDEX BUILDS  INDEX BUILDS  INDEX BUILDS  INDEX BUILDS  INDEX BUILDS  INDEX BUILDS  INDEX BUILDS  INDEX  ***
\******************************************************************************************************************************************/
IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Index builds on SQLXL_Index tables ------------------------------',0,0) WITH NOWAIT;
   RAISERROR(N'    Start Index [ixuc_SQLXL_Index_sys_stats]',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
Notes on Indexing collected temp tables:

-- Indexes not created since contents just getting bulk joined with another table
--------------------------------------------------------------------------------------------------------------
[##SQLXL_Index_sys_dm_db_missing_index_columns] into [##SQLXL_Index_sys_index_columns]
[##SQLXL_Index_sys_dm_db_missing_index_group_stats_query]

-- Clustered Index created in above data collection steps for: (in order of appearance)
-----------------------------------------------------------------------
[##SQLXL_Index_sys_databases]
[##SQLXL_Index_sys_dm_os_buffer_descriptors]
[##SQLXL_Index_sys_objects]
[##SQLXL_Index_sys_indexes]
[##SQLXL_Index_sys_index_columns]
[##SQLXL_Index_sys_partitions]

-- "SMALL"ish tables NOT INDEXED
-----------------------------------------------------------------------
[##SQLXL_Index_sys_availability_replicas]
[##SQLXL_Index_sys_dm_hadr_availability_replica_states]
[##SQLXL_Index_sys_edge_constraint_clauses]
[##SQLXL_Index_sys_edge_constraints]
[##SQLXL_Index_sys_edge_constraint_clauses]
[##SQLXL_Index_sys_edge_constraints]
[##SQLXL_Index_Startup]

\******************************************************************************************************************************************/
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_stats
    ON [##SQLXL_Index_sys_stats]
      (database_id
      ,object_id
      ,stats_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_database_scoped_configurations
    ON [##SQLXL_Index_sys_database_scoped_configurations]
      (database_id
      ,name
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_database_scoped_configurations'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_database_automatic_tuning_options
    ON [##SQLXL_Index_sys_database_automatic_tuning_options]
      (database_id
      ,name
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_database_automatic_tuning_options'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_database_query_store_options
    ON [##SQLXL_Index_sys_database_query_store_options]
      (database_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_database_query_store_options'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_cdc_change_tables__object_id
    ON [##SQLXL_Index_cdc_change_tables]
      (database_id
      ,object_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_cdc_change_tables__object_id]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE NONCLUSTERED
 INDEX ixuc_SQLXL_Index_cdc_change_tables__source_object_id
    ON [##SQLXL_Index_cdc_change_tables]
      (database_id
      ,source_object_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_cdc_change_tables__source_object_id]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_data_spaces
    ON [##SQLXL_Index_sys_data_spaces]
      (database_id
      ,data_space_id
      ,file_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_data_spaces]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_types
    ON [##SQLXL_Index_sys_types]
      (database_id
      ,user_type_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_types]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_columns
    ON [##SQLXL_Index_sys_columns]
      (database_id
      ,object_id
      ,column_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_indexes
    ON [##SQLXL_Index_sys_indexes]
      (database_id
      ,object_id
      ,index_id
      ,type
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_indexes]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_fulltext_indexes
    ON [##SQLXL_Index_sys_fulltext_indexes]
      (database_id
      ,object_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_fulltext_indexes]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_foreign_key_columns
    ON [##SQLXL_Index_sys_foreign_key_columns]
      (database_id
      ,constraint_object_id
      ,constraint_column_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_foreign_key_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE
 INDEX ix_SQLXL_Index_sys_foreign_key_columns_parent
    ON [##SQLXL_Index_sys_foreign_key_columns]
      (database_id
      ,parent_object_id
      ,parent_column_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ix_SQLXL_Index_sys_foreign_key_columns_parent]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE
 INDEX ix_SQLXL_Index_sys_foreign_key_columns_refer
    ON [##SQLXL_Index_sys_foreign_key_columns]
      (database_id
      ,referenced_object_id
      ,referenced_column_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ix_SQLXL_Index_sys_foreign_key_columns_refer]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_extended_properties
    ON [##SQLXL_Index_sys_extended_properties]
      (database_id
      ,class
      ,major_id
      ,minor_id
      ,name
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_extended_properties]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Index [ixuc_SQLXL_Index_sys_stats_columns]',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_stats_columns
    ON [##SQLXL_Index_sys_stats_columns]
      (database_id
      ,object_id
      ,stats_id
      ,stats_column_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_stats_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_partition_stats
    ON [##SQLXL_Index_sys_dm_db_partition_stats]
      (database_id
      ,object_id
      ,index_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_dm_db_partition_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_stats_properties
    ON [##SQLXL_Index_sys_dm_db_stats_properties]
      (database_id
      ,object_id
      ,stats_id
      ,partition_number
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_dm_db_stats_properties]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_xtp_index_stats
    ON [##SQLXL_Index_sys_dm_db_xtp_index_stats]
      (database_id
      ,object_id
      ,index_id
      ,type
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_dm_db_xtp_index_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_os_buffer_descriptors_EXT
    ON [##SQLXL_Index_sys_dm_os_buffer_descriptors_EXT]
      (database_id
      ,object_id
      ,index_id
      ,type
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_dm_os_buffer_descriptors_EXT]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats
    ON [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats]
       (database_id
       ,object_id
       ,index_id
       )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats
    ON [##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats]
      (database_id
      ,object_id
      ,index_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_index_resumable_operations
    ON [##SQLXL_Index_sys_index_resumable_operations]
      (database_id
      ,object_id
      ,index_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_index_resumable_operations]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_ShowStatistics_StatHeader
    ON [##SQLXL_Index_sys_ShowStatistics_StatHeader]
      (database_id
      ,object_id
      ,index_ID
      ,column_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_ShowStatistics_StatHeader]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_ShowStatistics_DensityVector
    ON [##SQLXL_Index_sys_ShowStatistics_DensityVector]
      (database_id
      ,object_id
      ,index_ID
      ,column_id
      ,Row_ID
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_ShowStatistics_DensityVector]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_ShowStatistics_Histogram_summary
    ON [##SQLXL_Index_sys_ShowStatistics_Histogram_summary]
      (database_id
      ,object_id
      ,index_ID
      ,column_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_ShowStatistics_Histogram_summary]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_internal_partitions
    ON [##SQLXL_Index_sys_internal_partitions]
      (database_id
      ,object_id
      ,index_ID
      ,partition_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_internal_partitions]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
Completed index builds on collected tables
\******************************************************************************************************************************************/
 IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Completed Index builds on SQLXL_IDX tables'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/*#########################################################################################################################################\
*** Organize Organize Organize Organize Organize Organize Organize Organize Organize Organize Organize Organize Organize Organize Organ ****
\#########################################################################################################################################*/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql  NVARCHAR(MAX)
       ,@name SYSNAME
       ,@ssms_ads  TINYINT = (SELECT (1)
                                FROM [sys].[dm_exec_sessions]
                               WHERE session_id = @@spid
                                 AND (   program_name LIKE N'Microsoft SQL Server Management Studio%'
                                      OR program_name like N'azdata%' --azure data studio
                                     )
                             )
       ,@msg       NVARCHAR(1000)
       ,@exec_dttm DATETIME      = GETDATE()
SET NOCOUNT OFF
--*/

/******************************************************************************************************************************************/
IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Start SQLXL Index Data Organization ----------------------------------',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
Update historical source for a temporal/ledger table - for temporal_type = 2 or ledger_type = 2
Temporal/ledger tables do not have a parent in [sys].[objects], must be captured as below
[history_table_id] returns the object_id of the table that maintains historical data for a temporal/ledger table, otherwise returns NULL.
\******************************************************************************************************************************************/
UPDATE tgt
   SET tgt.parent_object_id         = COALESCE(src.object_id,tgt.parent_object_id)
      ,tgt.history_source_object_id = COALESCE(src.object_id,tgt.history_source_object_id)
  FROM [##SQLXL_Index_sys_objects] AS tgt
  JOIN [##SQLXL_Index_sys_objects] AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.history_table_id;

 IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update historical source for a temporal/ledger table with type = 2, SQL2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- CREATE - TABLE [##SQLXL_Index_Compilation]
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_Compilation];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Index_Compilation]
(collection_DTTM                            DATETIME                                    NULL -- FUTURE KEY from task start time
--------------------------------------------------------------------------------------------------------------------------------------------
-- MASTER RECORD KEYS
-- rec_type is level in the collected data
-- 'A' = All or instance level
-- 'D' = is database
-- 'P' is for parent
-- 'H' for History
-- 'S' for System Internal Table
-- 'I' for "Index"
-- object_id is same as parent except for Foreign Key Constraints, History (CDC, SVN, LDG) tables, and System Internal Tables
-- Index Sub_Type sourced from [sys].[xml_indexes].[xml_index_type], [sys].[spatial_indexes].[spatial_index_type]
--------------------------------------------------------------------------------------------------------------------------------------------
,rec_type                                   NCHAR(1)       COLLATE DATABASE_DEFAULT NOT NULL
,database_ID                                SMALLINT                                    NULL -- KEY from [sys].[databases]
,parent_object_id                           BIGINT                                  NOT NULL -- KEY from [sys].[objects] - Parent level
,object_id                                  BIGINT                                  NOT NULL -- KEY from [sys].[objects] - Object level
,index_id                                   BIGINT                                  NOT NULL -- KEY from [sys].[indexes] etc.
,type                                       NVARCHAR(2)    COLLATE DATABASE_DEFAULT NOT NULL
,sub_type                                   TINYINT                                 NOT NULL
--------------------------------------------------------------------------------------------------------------------------------------------
-- Element Names & Descriptions
--------------------------------------------------------------------------------------------------------------------------------------------
,Database_Name                              SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,collation_name                             SYSNAME        COLLATE DATABASE_DEFAULT     NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- COMPUTED Diagnostics & Actions to take by Index & Table
--------------------------------------------------------------------------------------------------------------------------------------------
,diagnostics                                NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL
,prescription                               NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- History source tables - source records for Change Data Capture, System Versioned, and Ledger tables
--------------------------------------------------------------------------------------------------------------------------------------------
,history_source_schema_id                   INT                                         NULL
,history_source_schema_name                 SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,history_source_object_id                   INT                                         NULL
,history_source_object_name                 SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,history_source_object_type                 NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,history_source_object_type_desc            SYSNAME        COLLATE DATABASE_DEFAULT     NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent object values - from [sys].[objects] - Only different from object for INTERNAL TABLES & HISTORY TABLES
-- INTERNAL TABLES roll up to their OBJECT table, HISTORY rollup to their OBJECT table
--------------------------------------------------------------------------------------------------------------------------------------------
,parent_schema_id                           INT                                         NULL
,parent_schema_name                         SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,parent_object_name                         SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,parent_object_type                         NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,parent_object_type_desc                    SYSNAME        COLLATE DATABASE_DEFAULT     NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[objects] - Object columns
--------------------------------------------------------------------------------------------------------------------------------------------
,obj_name                                   SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_type                                   NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,obj_type_desc                              SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_create_date                            DATETIME                                    NULL
,obj_modify_date                            DATETIME                                    NULL
,obj_is_published                           BIT                                     NOT NULL DEFAULT(0)
,obj_is_schema_published                    BIT                                     NOT NULL DEFAULT(0)
,obj_definition                             NVARCHAR(MAX)                               NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Object schema - [sys].[schemas]
--------------------------------------------------------------------------------------------------------------------------------------------
,SCHEMA_ID                                  BIGINT                                  NOT NULL DEFAULT(0)
,SCHEMA_NAME                                SYSNAME        COLLATE DATABASE_DEFAULT     NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Object Computed values
--------------------------------------------------------------------------------------------------------------------------------------------
,obj_type_hdr                               SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_type_dtl                               SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_type_label                             SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_type_short_label                       SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,obj_principal_ID                           BIGINT                                      NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[tables], [sys].[views], [sys].[triggers] - useful to know across indexes, MIX, FKC, etc.
--------------------------------------------------------------------------------------------------------------------------------------------
,tbl_history_table_ID                       BIGINT                                      NULL
,tbl_history_table_schema                   SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,tbl_history_table_name                     SYSNAME        COLLATE DATABASE_DEFAULT     NULL

,tbl_is_replicated                          BIT                                     NOT NULL DEFAULT(0) -- used in multiple places
,tbl_lock_escalation                        TINYINT                                     NULL
,tbl_lock_escalation_desc                   SYSNAME        COLLATE DATABASE_DEFAULT     NULL

,tbl_is_memory_optimized                    BIT                                     NOT NULL DEFAULT(0)
,tbl_max_column_used_ID                     BIGINT                                      NULL
,tbl_has_unchecked_assembly_data            BIT                                     NOT NULL DEFAULT(0)
,tbl_is_filetable                           BIT                                     NOT NULL DEFAULT(0)
--------------------------------------------------------------------------------------------------------------------------------------------
,tbl_row_size_byte_AVG                      FLOAT                                       NULL
--------------------------------------------------------------------------------------------------------------------------------------------
,clr_trigger_CNT                            BIGINT                                  NOT NULL DEFAULT(0)
,sql_trigger_CNT                            BIGINT                                  NOT NULL DEFAULT(0)
,is_instead_of_trigger_CNT                  BIGINT                                  NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Table computed properties
--------------------------------------------------------------------------------------------------------------------------------------------
,tbl_is_clustered_columnstore               BIT                                     NOT NULL DEFAULT(0)
,tbl_column_CNT                             BIGINT                                  NOT NULL DEFAULT(0)
,tbl_is_heap                                BIT                                     NOT NULL DEFAULT(0)
,tbl_is_empty                               BIT                                     NOT NULL DEFAULT(0)
,tbl_priority_metric                        FLOAT                                       NULL
,tbl_cx_uniq_ordered_column_TYP             SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,tbl_cx_uniq_ordered_column_ID              BIGINT                                      NULL
,tbl_possible_uniq_column_ID                BIGINT                                      NULL
,tbl_smallest_uniq_Nonclustered_idx         BIGINT                                      NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [cdc].[change_tables]
--------------------------------------------------------------------------------------------------------------------------------------------
,cdc_capture_instance                       SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,cdc_supports_net_changes                   BIT                                         NULL
,cdc_role_name                              SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,cdc_index_name                             SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,cdc_filegroup_name                         SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,cdc_create_date                            DATETIME                                    NULL
,cdc_partition_switch                       BIT                                         NULL
,cdc_is_history_table                       BIT                                         NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[sql_modules]
--------------------------------------------------------------------------------------------------------------------------------------------
,obj_uses_ansi_nulls                        BIT                                         NULL
,obj_uses_quoted_identifier                 BIT                                         NULL
,obj_is_schema_bound                        BIT                                         NULL
,obj_uses_database_collation                BIT                                         NULL
,obj_is_recompiled                          BIT                                         NULL
,obj_null_on_null_input                     BIT                                         NULL
,obj_execute_as_principal_ID                BIGINT                                      NULL
,obj_uses_native_compilation                BIT                                         NULL
,obj_is_inlineable                          BIT                                         NULL
,obj_inline_type                            BIT                                         NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[indexes] - NOTE: other elements below in Shared Elements
--------------------------------------------------------------------------------------------------------------------------------------------
,type_desc                                  SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,sub_type_desc                              SYSNAME        COLLATE DATABASE_DEFAULT     NULL
                                            -- Sources: [sys].[xml_indexes xml_index_type_description
                                            --          [sys].[spatial_indexes spatial_index_type_desc
,is_unique                                  BIT                                     NOT NULL DEFAULT(0)  -- 1 = unique
,IGNORE_DUP_KEY                             BIT                                     NOT NULL DEFAULT(0)  -- 1 = ON
,suppress_dup_key_messages                  BIT                                     NOT NULL DEFAULT(0)  -- 1 = ON
,is_primary_key                             BIT                                     NOT NULL DEFAULT(0)  -- 1 = PRIMARY KEY
,is_unique_constraint                       BIT                                     NOT NULL DEFAULT(0)  -- 1 = UNIQUE constraint
,fill_factor                                TINYINT                                     NULL             -- for creation or rebuilding
,is_padded                                  BIT                                     NOT NULL DEFAULT(0)  -- 1 = ON
,is_hypothetical                            BIT                                     NOT NULL DEFAULT(0)  -- 1 = is hypothetical
,is_ignored_in_optimization                 BIT                                     NOT NULL DEFAULT(0)  -- NOTE: not found in BOL
,ALLOW_ROW_LOCKS                            BIT                                         NULL             -- 1 = allows row locks
,ALLOW_PAGE_LOCKS                           BIT                                         NULL             -- 1 = allows page locks
,has_filter                                 BIT                                     NOT NULL DEFAULT(0)  -- 1 = has a filter
,compression_delay_mm                       BIGINT                                      NULL             -- NOTE: not found in BOL
,auto_created                               BIT                                     NOT NULL DEFAULT(0)  -- 1 = created by auto tuning
,OPTIMIZE_FOR_SEQUENTIAL_KEY                BIT                                     NOT NULL DEFAULT(0)  -- 1 = last-page insert opt enabled

--------------------------------------------------------------------------------------------------------------------------------------------
-- Shared elements index & parent
-- parent_id INT excluded because same as [sys].[objects] columns [history_source_object_id] for SVN & [parent_object_id]
-- Sources: [sys].[internal_tables], [sys].[triggers]
--------------------------------------------------------------------------------------------------------------------------------------------
,NAME                                       SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,type_short_desc                            SYSNAME        COLLATE DATABASE_DEFAULT     NULL
                                            -- Sources: [sys].[indexes]
                                            --          [sys].[xml_indexes] xml_index_type_description
,is_disabled                                BIT                                     NOT NULL DEFAULT(0)
                                            -- Sources: [sys].[indexes],[sys].foreign_keys
                                            --          [sys].[fulltext_indexes] is_enabled (note value IS flipped)
,is_not_trusted                             BIT                                     NOT NULL DEFAULT(0)
                                            -- Sources: [sys].[edge_constraints], [sys].[foreign_keys], [sys].[check_constraints]
,is_system_named                            BIT                                     NOT NULL DEFAULT(0)
                                            -- Sources: [sys].[edge_constraints], [sys].[foreign_keys], [sys].[check_constraints]
                                            --          [sys].[default_constraints], [sys].[key_constraints]
,filter_definition                          NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL
                                            -- Sources: [sys].[indexes], [sys].[xml_indexes].[filter_definition]

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[internal_tables] & ms_shipped objects
--------------------------------------------------------------------------------------------------------------------------------------------
,is_ms_shipped                              BIT                                         NULL
,internal_type                              TINYINT                                     NULL
,internal_type_DESC                         SYSNAME                                     NULL
,parent_minor_ID                            BIGINT                                      NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[xml_indexes]
--------------------------------------------------------------------------------------------------------------------------------------------
,xml_index_type                             TINYINT                                     NULL
,xml_index_type_description                 SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,xml_using_xml_index_ID                     BIGINT                                      NULL
,xml_secondary_type                         CHAR(1)                                     NULL
,xml_secondary_type_desc                    SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,xml_path_ID                                BIGINT                                      NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[spatial_indexes]
--------------------------------------------------------------------------------------------------------------------------------------------
,si_tessellation_scheme                     SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,si_bounding_box_xmin                       FLOAT                                       NULL
,si_bounding_box_ymin                       FLOAT                                       NULL
,si_bounding_box_xmax                       FLOAT                                       NULL
,si_bounding_box_ymax                       FLOAT                                       NULL
,si_level_1_grid_desc                       NVARCHAR(120)  COLLATE DATABASE_DEFAULT     NULL
,si_level_2_grid_desc                       NVARCHAR(120)  COLLATE DATABASE_DEFAULT     NULL
,si_level_3_grid_desc                       NVARCHAR(120)  COLLATE DATABASE_DEFAULT     NULL
,si_level_4_grid_desc                       NVARCHAR(120)  COLLATE DATABASE_DEFAULT     NULL
,si_cells_per_object                        BIGINT                                      NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[hash_indexes]
--------------------------------------------------------------------------------------------------------------------------------------------
,hi_bucket_CNT                              BIGINT                                  NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[fulltext_indexes]
--------------------------------------------------------------------------------------------------------------------------------------------
,ftx_unique_index_ID                        BIGINT                                      NULL
,ftx_fulltext_catalog_ID                    BIGINT                                      NULL
,ftx_fulltext_catalog_name                  SYSNAME                                     NULL
,ftx_change_tracking_state                  CHAR(1)        COLLATE DATABASE_DEFAULT     NULL
,ftx_change_tracking_state_desc             SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,ftx_has_crawl_completed                    BIT                                         NULL
,ftx_crawl_type                             CHAR(1)        COLLATE DATABASE_DEFAULT     NULL
,ftx_crawl_type_desc                        SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,ftx_crawl_start_date                       DATETIME                                    NULL
,ftx_crawl_end_date                         DATETIME                                    NULL
--,ftx_incremental_timestamp                BINARY(8)                                   NULL -- OMITTED. binary type, represents rowversion
,ftx_stoplist_ID                            BIGINT                                      NULL
,ftx_property_list_ID                       BIGINT                                      NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[foreign_keys]
--------------------------------------------------------------------------------------------------------------------------------------------
,fkc_referenced_object_id                   BIGINT                                      NULL
,fkc_referenced_index_ID                    BIGINT                                      NULL  -- ID of index supporting referenced object
,fkc_reference                              NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL
,fkc_is_not_for_replication                 BIT                                         NULL
,fkc_delete_referential_action              TINYINT                                     NULL
,fkc_delete_referential_action_desc         SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,fkc_update_referential_action              TINYINT                                     NULL
,fkc_update_referential_action_desc         SYSNAME        COLLATE DATABASE_DEFAULT     NULL
--------------------------------------------------------------------------------------------------------------------------------------------
-- derived values for Foreign Key Constraints - index(es) covering Foreign Key Constraint, non-filtered, in order of enabled, shortest
--------------------------------------------------------------------------------------------------------------------------------------------
,fkc_covering_primary_idx_name              SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,fkc_covering_primary_idx_ID                BIGINT                                      NULL
,fkc_covering_primary_idx_Type              NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,fkc_covered_by_idx_IDS                     NVARCHAR(1000) COLLATE DATABASE_DEFAULT     NULL -- list of all covering indexes
--------------------------------------------
,fkc_candidate_covering_MIX_CNT             BIGINT                                  NOT NULL DEFAULT(0)
,fkc_candidate_covering_MIX_ID              BIGINT                                      NULL
--------------------------------------------
-- Referenced Key information
--------------------------------------------
,rk_referencing_fkc_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_disabled_CNT            BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_not_replicated_CNT      BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_not_trusted_CNT         BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_action_none_CNT         BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_action_cascade_CNT      BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_action_null_CNT         BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_action_default_CNT      BIGINT                                  NOT NULL DEFAULT(0)
,rk_referencing_fkc_system_named_CNT        BIGINT                                  NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Missing index details. See index_Usage_Stats (IUS_*) for remainder of Missing Index columns
--------------------------------------------------------------------------------------------------------------------------------------------
,mix_avg_total_user_cost_AMT                FLOAT                                       NULL
,mix_avg_total_system_cost_AMT              FLOAT                                       NULL
,mix_avg_user_impact_AMT                    FLOAT                                       NULL
,mix_avg_system_impact_AMT                  FLOAT                                       NULL
,mix_unique_compiles_CNT                    BIGINT                                      NULL
,mix_Advantage_AMT                          FLOAT                                       NULL
,mix_Advantage_weighted_AMT                 FLOAT                                       NULL
    -- computed  (((i.user_seeks  + i.user_scans) * i.avg_total_user_cost * i.avg_user_impact  )
    --         + ((i.system_seeks + i.system_scans) * i.avg_total_system_cost * i.avg_system_impact))
--------------------------------------------------------------------------------------------------------------------------------------------
-- missing_index_group_stats_query system view
-- NOTE: since this should total to the existing MISSING index values omitting for this version of SQLXL_Index
--------------------------------------------------------------------------------------------------------------------------------------------
--,mqy_user_seeks_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_user_scans_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_last_user_seek_DTTM                  DATETIME                                    NULL
--,mqy_last_user_scan_DTTM                  DATETIME                                    NULL
--,mqy_system_seeks_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_system_scans_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_last_system_seek_DTTM                DATETIME                                    NULL
--,mqy_last_system_scan_DTTM                DATETIME                                    NULL
--,mqy_Advantage_AMT                        FLOAT                                   NOT NULL DEFAULT(0)
--,mqy_query_hash                           BINARY(8)                               NOT NULL DEFAULT(0)
--,mqy_query_plan_hash                      BINARY(8)                               NOT NULL DEFAULT(0)
--,mqy_last_sql_handle                      VARBINARY(64)                           NOT NULL DEFAULT(0)
--,mqy_last_statement_start_offset          BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_last_statement_end_offset            BIGINT                                  NOT NULL DEFAULT(0)
--,mqy_last_statement_sql_handle            VARBINARY(64)                           NOT NULL DEFAULT(0)
,mqy_query_text                             NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL
,mqy_query_plan                             XML                                         NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[stats]
--------------------------------------------------------------------------------------------------------------------------------------------
,stats_ID                                   BIGINT                                      NULL
,stats_Name                                 NVARCHAR(132) COLLATE DATABASE_DEFAULT      NULL
                                            -- FUTURE - accomodate multiple statistic names for index key & included columns too
,stats_auto_created                         BIT                                         NULL
,stats_user_created                         BIT                                         NULL
,stats_no_recompute                         BIT                                         NULL
,stats_has_filter                           BIT                                         NULL
,stats_filter_definition                    NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL
,stats_is_temporary                         BIT                                         NULL
,stats_is_incremental                       BIT                                         NULL
,stats_has_persisted_sample                 BIT                                         NULL
,stats_generation_method                    BIGINT                                      NULL
,stats_generation_method_desc               SYSNAME        COLLATE DATABASE_DEFAULT     NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- ShowStatistics.StatHeader
--------------------------------------------------------------------------------------------------------------------------------------------
,stathdr_Updated                            DATETIME                                    NULL
,stathdr_Rows_CNT                           BIGINT                                  NOT NULL DEFAULT(0)
,stathdr_Rows_Sampled_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,stathdr_Steps                              BIGINT                                  NOT NULL DEFAULT(0)
,stathdr_Density                            FLOAT                                   NOT NULL DEFAULT(0)
,stathdr_Average_Key_Length                 BIGINT                                  NOT NULL DEFAULT(0)
,stathdr_String_index                       NVARCHAR(3)    COLLATE DATABASE_DEFAULT     NULL
,stathdr_Filter_Expression                  NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL
,stathdr_Unfiltered_Rows                    BIGINT                                  NOT NULL DEFAULT(0)
,stathdr_Persisted_Sample_Percent           TINYINT                                 NOT NULL DEFAULT(0)
,stathdr_Statistics_age_days                INT                                         NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- ShowStatistics.StatHistogram
--------------------------------------------------------------------------------------------------------------------------------------------
,stathist_range_rows_LO                     FLOAT                                   NOT NULL DEFAULT(0)
,stathist_range_rows_HI                     FLOAT                                   NOT NULL DEFAULT(0)
,stathist_null_rows                         BIGINT                                  NOT NULL DEFAULT(0)
,stathist_param_sniff                       FLOAT                                   NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[dm_db_stats_properties] -- Note: [sys].[dm_db_stats_properties] only used for modification_counter
--------------------------------------------------------------------------------------------------------------------------------------------
,Stats_Prop_modification_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,Stats_Prop_last_updated                    DATETIME                                    NULL
,Stats_Prop_updated_days_ago                BIGINT                                      NULL

----------------------------------------------------------------------------------------------------------
-- Aggregate Operational Metrics Values
-- [sys].[dm_db_index_operational_stats] + [sys].[dm_db_xtp_index_stats] + [sys].[dm_db_xtp_Nonclustered_index_stats]
----------------------------------------------------------------------------------------------------------
,ops_total_contacts_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
   -- includes XTP scans_started,row_insert_attempts,row_update_attempts,row_delete_attempts,delta_pages,page_update_count
   -- includes columnstore - scan_CNT, delete_buffer_scan_CNT,row_group_lock_CNT
,ops_total_read_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP scans_started
   -- Includes columnstore - scan_CNT, delete_buffer_scan_CNT
,ops_total_write_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
   -- Include XTP - row_insert_attempts, row_update_attempts, row_delete_attempts, delta_pages, page_update_count
   -- included columnstore row_group_lock_CNT
,ops_total_insert_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP row_insert_attempts
,ops_total_update_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP -row_update_attempts,p age_update_count
,ops_total_delete_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP row_delete_attempts
,ops_total_scan_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP -scans_started, columnstore scan_CNT
,ops_total_scan_retries_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP -scans_started, columnstore scan_CNT
,ops_total_page_split_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
   -- Includes XTP - page_split_count, key_split_count
,ops_total_page_merge_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes XTP - page_merge_count, key_merge_count & page_consolidation_count
,ops_total_wait_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes
,ops_total_wait_MS_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes
,ops_total_wait_MS_AVG                      FLOAT                                       NULL
 -- Includes
,ops_no_read_total_write_CNT                BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes
,ops_total_lock_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
   -- includes columnstore row_group_lock_CNT
,ops_total_lock_wait_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
   -- includes [dm_db_column_store_row_group_operational_stats].row_group_lock_wait_CNT
,ops_total_lock_wait_MS_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
   -- includes [dm_db_column_store_row_group_operational_stats].row_group_lock_wait_MS_CNT
,ops_total_lock_wait_MS_AVG                 FLOAT                                       NULL
   -- includes [dm_db_column_store_row_group_operational_stats].row_group_lock_wait_CNT
   --         ,dm_db_column_store_row_group_operational_stats.row_group_lock_wait_MS_CNT

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[dm_db_index_operational_stats] + [sys].[dm_db_xtp_index_stats] + [sys].[dm_db_xtp_Nonclustered_index_stats]
--------------------------------------------------------------------------------------------------------------------------------------------
,ios_total_Column_value_off_row_CNT         BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_partition_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_leaf_insert_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,ios_leaf_update_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,ios_leaf_delete_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,ios_leaf_ghost_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,ios_total_leaf_Contacts_CNT                BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_nonleaf_insert_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ios_nonleaf_delete_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ios_nonleaf_update_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ios_total_nonleaf_Contacts_CNT             BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_leaf_allocation_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,ios_nonleaf_allocation_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_leaf_page_merge_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,ios_nonleaf_page_merge_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_range_scan_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,ios_singleton_lookup_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,ios_forwarded_fetch_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_lob_fetch_pages_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
 -- Cumulative count of large object (LOB) pages retrieved from the LOB_DATA allocation unit
,ios_lob_fetch_bytes_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
 -- Cumulative count of LOB data bytes retrieved
,ios_lob_orphan_create_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
 -- Cumulative count of orphan LOB values created for bulk operations
,ios_lob_orphan_insert_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
 -- Cumulative count of orphan LOB values inserted during bulk operations.
,ios_row_overflow_fetch_in_pages_CNT        BIGINT                                  NOT NULL DEFAULT(0)
,ios_row_overflow_fetch_in_bytes_CNT        BIGINT                                  NOT NULL DEFAULT(0)
,ios_column_value_push_off_row_CNT          BIGINT                                  NOT NULL DEFAULT(0)
,ios_column_value_pull_in_row_CNT           BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_row_lock_CNT                           BIGINT                                  NOT NULL DEFAULT(0)
,ios_row_lock_wait_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,ios_row_lock_wait_MS_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,ios_row_lock_wait_MS_AVG                   FLOAT                                       NULL
-------------------------------------
,ios_page_lock_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_lock_wait_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_lock_wait_MS_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_lock_wait_MS_AVG                  FLOAT                                       NULL
-------------------------------------
,ios_lock_promotion_attempt_CNT             BIGINT                                  NOT NULL DEFAULT(0)
,ios_lock_promotion_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ios_lock_promotion_fail_CNT                BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
,ios_page_latch_wait_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_latch_wait_MS_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_latch_wait_MS_AVG                 FLOAT                                       NULL
-------------------------------------
,ios_page_io_latch_wait_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_io_latch_wait_MS_CNT              BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_io_latch_wait_MS_AVG              FLOAT                                       NULL
-------------------------------------
,ios_tree_page_latch_wait_CNT               BIGINT                                  NOT NULL DEFAULT(0)
 -- Subset of ios_page_latch_wait_CNT
,ios_tree_page_latch_wait_MS_CNT            BIGINT                                  NOT NULL DEFAULT(0)
 -- Subset of ios_page_latch_wait_MS_CNT
,ios_tree_page_latch_wait_MS_AVG            FLOAT                                       NULL
 -- Subset of ios_page_latch_wait_MS_AVG
-------------------------------------
,ios_tree_page_io_latch_wait_CNT            BIGINT                                  NOT NULL DEFAULT(0)
 -- Subset of ios_page_io_latch_wait_CNT
,ios_tree_page_io_latch_wait_MS_CNT         BIGINT                                  NOT NULL DEFAULT(0)
 -- Subset of ios_page_io_latch_wait_MS_CNT
,ios_tree_page_io_latch_wait_MS_AVG         FLOAT                                       NULL
 -- Subset of ios_page_io_latch_wait_MS_AVG
-------------------------------------
,ios_page_compression_attempt_CNT           BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_compression_success_CNT           BIGINT                                  NOT NULL DEFAULT(0)
,ios_page_compression_fail_CNT              BIGINT                                  NOT NULL DEFAULT(0)
-------------------------------------
-- New for 2019
-------------------------------------
,ios_version_generated_inrow_CNT            BIGINT                                  NOT NULL DEFAULT(0)
 -- In-row version records retained by Snapshot isolation
,ios_version_generated_off_row_CNT          BIGINT                                  NOT NULL DEFAULT(0)
 -- off_row version records retained by Snapshot isolation
,ios_ghost_version_inrow_CNT                BIGINT                                  NOT NULL DEFAULT(0)
 -- Ghost in-row version records retained by Snapshot isolation
,ios_ghost_version_off_row_CNT              BIGINT                                  NOT NULL DEFAULT(0)
 -- Ghost off_row version records retained by Snapshot isolation
,ios_insert_over_ghost_version_inrow_CNT    BIGINT                                  NOT NULL DEFAULT(0)
 -- Inserts over Ghost in-row version records retained by Snapshot isolation
,ios_insert_over_ghost_version_off_row_CNT  BIGINT                                  NOT NULL DEFAULT(0)
 -- Inserts over Ghost off_row version records retained by Snapshot isolation

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[dm_db_index_usage_stats] + [sys].[dm_db_missing_index_group_stats] for missing indexes
--------------------------------------------------------------------------------------------------------------------------------------------
,ius_user_total_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,ius_user_read_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,ius_user_seeks_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
                                            -- includes: [sys].[dm_db_missing_index_group_stats] user_seeks
,ius_user_scans_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
                                            -- includes: [sys].[dm_db_missing_index_group_stats] user_scans
,ius_user_lookups_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
,ius_user_updates_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
,ius_system_seeks_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
                                            -- includes: [sys].[dm_db_missing_index_group_stats] system_seeks
,ius_system_scans_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
                                            -- includes: [sys].[dm_db_missing_index_group_stats] system_scans
,ius_system_lookups_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,ius_system_updates_CNT                     BIGINT                                  NOT NULL DEFAULT(0)

,ius_last_user_seek_DTTM                    DATETIME                                    NULL
                                            -- includes: [sys].[dm_db_missing_index_group_stats] last_user_seek
,ius_last_user_scan_DTTM                    DATETIME                                    NULL
                                            -- includes: [sys].[dm_db_missing_index_group_stats] last_user_scan
,ius_last_user_lookup_DTTM                  DATETIME                                    NULL
,ius_last_user_update_DTTM                  DATETIME                                    NULL

,ius_last_system_seek_DTTM                  DATETIME                                    NULL
                                            -- includes: [sys].[dm_db_missing_index_group_stats] last_system_seek
,ius_last_system_scan_DTTM                  DATETIME                                    NULL
                                            -- includes: [sys].[dm_db_missing_index_group_stats] last_system_scan
,ius_last_system_lookup_DTTM                DATETIME                                    NULL
,ius_last_system_update_DTTM                DATETIME                                    NULL
----------------------------
,ius_no_read_user_updates_CNT               BIGINT                                  NOT NULL DEFAULT(0)
,ius_last_read_days_ago                     BIGINT                                      NULL
,ius_last_write_days_ago                    BIGINT                                      NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Column Store - [sys].[dm_db_column_store_row_group_operational_stats]
--------------------------------------------------------------------------------------------------------------------------------------------
,cs_partition_CNT                           BIGINT                                  NOT NULL DEFAULT(0)
,cs_row_group_CNT                           BIGINT                                  NOT NULL DEFAULT(0)
,cs_index_scan_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,cs_scan_CNT                                BIGINT                                  NOT NULL DEFAULT(0)
,cs_delete_buffer_scan_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
,cs_row_group_lock_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,cs_row_group_lock_wait_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
,cs_row_group_lock_wait_MS_CNT              BIGINT                                  NOT NULL DEFAULT(0)
,cs_row_group_lock_wait_MS_AVG              FLOAT                                       NULL
,cs_returned_row_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,cs_returned_aggregate_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
,cs_returned_group_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,cs_input_groupby_row_CNT                   BIGINT                                  NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- XTP In-Memory tables & indexes - [sys].[dm_db_xtp_index_stats],[sys].[dm_db_xtp_Nonclustered_index_stats]
--                                 ,[sys].[dm_db_xtp_memory_consumers]
--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[dm_db_xtp_object_stats] -------------
,xtp_row_insert_attempts_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,xtp_row_update_attempts_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,xtp_row_delete_attempts_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,xtp_write_conflicts_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,xtp_unique_constraint_violations_CNT       BIGINT                                  NOT NULL DEFAULT(0)
-- [sys].[dm_db_xtp_index_stats] --------------
,xtp_object_id                              INT                                         NULL
,xtp_scans_started_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,xtp_scans_retries_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,xtp_rows_returned_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,xtp_rows_touched_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
-- [sys].[dm_db_xtp_Nonclustered_index_stats] -
,xtp_delta_pages_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,xtp_leaf_pages_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_update_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_update_retry_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_consolidation_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_consolidation_retry_CNT           BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_split_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_split_retry_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,xtp_key_split_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,xtp_key_split_retry_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_merge_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,xtp_page_merge_retry_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,xtp_key_merge_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,xtp_key_merge_retry_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,xtp_uses_key_normalization                 BIT                                     NOT NULL DEFAULT(0)
-- [sys].[dm_db_xtp_memory_consumers] ---------
,xtp_allocated_bytes_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,xtp_used_bytes_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,xtp_allocation_CNT                         BIGINT                                  NOT NULL DEFAULT(0)

-------------------------------------------------------------------------------------------------------------
-- Shared - [sys].[dm_db_partition_stats], [sys].[dm_db_xtp_memory_consumers]
-------------------------------------------------------------------------------------------------------------
,row_CNT                                    BIGINT                                  NOT NULL DEFAULT(0)
,reserved_page_PG_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes XTP allocated_bytes/8192.0
,used_page_PG_CNT                           BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes XTP CEILING(used_bytes/8192.0)
,in_row_data_page_PG_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,in_row_used_page_PG_CNT                    BIGINT                                  NOT NULL DEFAULT(0)
,in_row_reserved_page_PG_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,lob_used_page_PG_CNT                       BIGINT                                  NOT NULL DEFAULT(0)
,lob_reserved_page_PG_CNT                   BIGINT                                  NOT NULL DEFAULT(0)
,row_overflow_used_page_PG_CNT              BIGINT                                  NOT NULL DEFAULT(0)
,row_overflow_reserved_page_PG_CNT          BIGINT                                  NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Data Space, filegroup
--------------------------------------------------------------------------------------------------------------------------------------------
,data_space_ID                              BIGINT                                      NULL
 -- ID of the data space for this index. Data space is either a filegroup or partition scheme
 -- 0 = object_id is a table-valued function or in-memory index
 -- Also sys.fulltext_indexes.data_space_ID
,data_space_name                            SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,data_space_logical_filename                SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,data_space_type                            NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,data_space_type_desc                       SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,data_space_is_default                      BIT                                     NOT NULL DEFAULT(0)
,data_space_is_system                       BIT                                     NOT NULL DEFAULT(0)
,filegroup_guid                             UNIQUEIDENTIFIER                            NULL
,filegroup_is_read_only                     BIT                                     NOT NULL DEFAULT(0)
,filegroup_is_autogrow_all_files            BIT                                     NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Partition Info
--------------------------------------------------------------------------------------------------------------------------------------------
,partition_CNT                              BIGINT                                  NOT NULL DEFAULT(0)
,partition_Column_ID                        BIGINT                                      NULL
,partition_Column_Name                      SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,partition_schemes_function_ID              BIGINT                                      NULL
,partition_schemes_name                     SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,partition_function_ID                      BIGINT                                      NULL
,partition_function_name                    SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,partition_function_type                    NVARCHAR(2)    COLLATE DATABASE_DEFAULT     NULL
,partition_function_type_desc               SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,partition_function_fanout                  BIGINT                                      NULL
,partition_function_boundary_value          NVARCHAR(5)    COLLATE DATABASE_DEFAULT     NULL
,partition_function_is_system               BIT                                         NULL
,partition_function_create_DTTM             DATETIME                                    NULL
,partition_function_modify_DTTM             DATETIME                                    NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Partition Compression
--------------------------------------------------------------------------------------------------------------------------------------------
,Partition_none_compress_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,Partition_row_compress_CNT                 BIGINT                                  NOT NULL DEFAULT(0)
,Partition_page_compress_CNT                BIGINT                                  NOT NULL DEFAULT(0)
,Partition_columnstore_compress_CNT         BIGINT                                  NOT NULL DEFAULT(0)
,Partition_columnstore_archive_compress_CNT BIGINT                                  NOT NULL DEFAULT(0)
,Partition_xml_compress_CNT                 BIGINT                                  NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[dm_os_buffer_descriptors]
--------------------------------------------------------------------------------------------------------------------------------------------
,buffer_total_KB_CNT                        BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes XTP allocated_bytes/1024.0
,buffer_free_KB_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
 -- Includes (allocated_bytes - used_bytes)/1024.0

--------------------------------------------------------------------------------------------------------------------------------------------
-- Computed/derived Values
--------------------------------------------------------------------------------------------------------------------------------------------
,key_column_IDs                             NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL -- concatenated key ordered list of column IDs
,covered_fkc_IDs                            NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL -- list of FKs covered by this index
--------------------------------------------
,index_CNT                                  BIGINT                                  NOT NULL DEFAULT(0)
,heap_index_CNT                             BIGINT                                  NOT NULL DEFAULT(0)
,Clustered_index_CNT                        BIGINT                                  NOT NULL DEFAULT(0) -- no _CNT only 1 per table
,Nonclustered_index_CNT                     BIGINT                                  NOT NULL DEFAULT(0)
,XML_index_CNT                              BIGINT                                  NOT NULL DEFAULT(0)
,Spatial_index_CNT                          BIGINT                                  NOT NULL DEFAULT(0)
,Clustered_ColumnStore_CNT                  BIGINT                                  NOT NULL DEFAULT(0)
,Nonclustered_ColumnStore_CNT               BIGINT                                  NOT NULL DEFAULT(0)
,Nonclustered_Hash_CNT                      BIGINT                                  NOT NULL DEFAULT(0)
,Fulltext_index_CNT                         BIGINT                                  NOT NULL DEFAULT(0)
,Missing_index_CNT                          BIGINT                                  NOT NULL DEFAULT(0) -- used for TABLES
,fkc_missing_index_CNT                      BIGINT                                  NOT NULL DEFAULT(0) -- used for FKC
,Foreign_Key_CNT                            BIGINT                                  NOT NULL DEFAULT(0)
,Relates_Fulltext_index_ID                  BIGINT                                      NULL
--------------------------------------------
,key_total_datatype_length_bytes            BIGINT                                      NULL
,inc_total_datatype_length_bytes            BIGINT                                      NULL
,idx_total_datatype_length_bytes            BIGINT                                      NULL
,Key_Columns_CNT                            BIGINT                                  NOT NULL DEFAULT(0)
,Included_Columns_CNT                       BIGINT                                  NOT NULL DEFAULT(0)

,Stats_CNT                                  BIGINT                                  NOT NULL DEFAULT(0)
,is_activity_for_period                     TINYINT                                     NULL
,low_selectivity_additional_keys            NVARCHAR(200)  COLLATE DATABASE_DEFAULT     NULL

,Element_Uniqueness                         NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL -- 249 max columns in index
,Indexed_Columns                            NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL
,Density                                    FLOAT                                   NOT NULL DEFAULT(0)

,key_column_info                            NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL -- 249 max columns in index
,Included_column_info                       NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL -- 249 max columns in index

,key_element_length                         NVARCHAR(4000) COLLATE DATABASE_DEFAULT     NULL -- shows increasing length of each key element
                                                                                             -- 249 max columns in index

,Lead_Element_Column_ID                     SMALLINT                                    NULL
,Lead_Element_Uniqueness                    FLOAT                                       NULL
,Lead_Element_Max_Len                       SMALLINT                                    NULL
,Lead_Element_Data_Type                     SYSNAME        COLLATE DATABASE_DEFAULT     NULL
,Lead_Element_is_Identity                   BIT                                     NOT NULL DEFAULT(0)
,Lead_Element_is_Sequence                   BIT                                     NOT NULL DEFAULT(0)
,Lead_Element_is_newsequentialid            BIT                                     NOT NULL DEFAULT(0)
,Lead_Element_is_newid                      BIT                                     NOT NULL DEFAULT(0)
,Lead_Element_is_Nullable                   BIT                                     NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Computed Ratios
--------------------------------------------------------------------------------------------------------------------------------------------
,ius_read_to_write_RAT                      FLOAT                                       NULL
,ops_read_to_write_RAT                      FLOAT                                       NULL
,page_lock_to_row_lock_RAT                  FLOAT                                       NULL

,ius_scans_to_read_PCT                      FLOAT                                       NULL
,ius_lookups_to_read_PCT                    FLOAT                                       NULL
,ius_seeks_to_read_PCT                      FLOAT                                       NULL
,ius_read_to_parent_PCT                     FLOAT                                       NULL
,ius_write_to_parent_PCT                    FLOAT                                       NULL
,ius_write_to_instance_PCT                  FLOAT                                       NULL

,ops_scans_to_read_PCT                      FLOAT                                       NULL
,ios_singleton_lookup_to_read_PCT           FLOAT                                       NULL
,ios_forwarded_fetch_to_read_PCT            FLOAT                                       NULL
,ops_read_to_parent_PCT                     FLOAT                                       NULL
,ops_write_to_parent_PCT                    FLOAT                                       NULL
,ops_write_to_instance_PCT                  FLOAT                                       NULL
,page_splits_to_write_PCT                   FLOAT                                       NULL
,page_merge_to_write_PCT                    FLOAT                                       NULL
,ios_page_compression_fail_PCT              FLOAT                                       NULL

,used_pages_in_buffer_PCT                   FLOAT                                       NULL
,free_pages_in_buffer_PCT                   FLOAT                                       NULL

,xtp_page_update_retry_PCT                  FLOAT                                       NULL
,xtp_page_consolidation_retry_PCT           FLOAT                                       NULL
,xtp_page_split_retry_PCT                   FLOAT                                       NULL
,xtp_key_split_retry_PCT                    FLOAT                                       NULL
,xtp_page_merge_retry_PCT                   FLOAT                                       NULL
,xtp_key_merge_retry_PCT                    FLOAT                                       NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Overlappers
--------------------------------------------------------------------------------------------------------------------------------------------
,Overlap_Code                               NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL -- keys common across "indexes", w/o includes
,constraints                                NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL
,extended_properties                        NVARCHAR(MAX)  COLLATE DATABASE_DEFAULT     NULL
)
  WITH (DATA_COMPRESSION = PAGE
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Created Creating table of consolidated index properties and attributes '
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Insert - [##SQLXL_Index_Compilation] - user table indexes, Internal table indexes, Foreign Key Constraints, View indexes
/******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Compilation]
      (rec_type
      ,database_id
      ----------------------------------------------------------------------------------------------------
      ,history_source_object_id
      ,parent_object_id
      ----------------------------------------------------------------------------------------------------
      ,object_id
      ,obj_name
      ,obj_principal_ID
      ,obj_type
      ,obj_type_desc
      ,obj_create_date
      ,obj_modify_date
      ,obj_is_published
      ,obj_is_schema_published
      ----------------------------------------------------------------------------------------------------
      ,collection_DTTM
      ----------------------------------------------------------------------------------------------------
      ,index_id
      ,name
      ,type
      ,type_desc
      ,type_short_desc
      ,is_unique
      ,data_space_id
      ,ignore_dup_key
      ,is_primary_key
      ,is_unique_constraint
      ,fill_factor
      ,is_padded
      ,is_disabled
      ,is_hypothetical
      ,allow_row_locks
      ,allow_page_locks
      ,has_filter
      ,filter_definition
      ---------------------
      ,Partition_Column_ID
      ,Partition_Column_Name
      ---------------------
      ,compression_delay_mm
      ,is_ignored_in_optimization
      ,suppress_dup_key_messages
      ,auto_created
      ,optimize_for_sequential_key
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - [sys].[internal_tables]
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped
      ,internal_type
      ,internal_type_desc
      ,parent_minor_id
      -------------------------
      ,sub_type
      ,sub_type_desc
      ----------------------------------------------------------------------------------------------------
      -- [sys].[xml_indexes]
      ----------------------------------------------------------------------------------------------------
      ,xml_index_type
      ,xml_index_type_description
      ,xml_using_xml_index_id
      ,xml_secondary_type
      ,xml_secondary_type_desc
      ,xml_path_id
      ----------------------------------------------------------------------------------------------------
      -- [sys].[spatial_indexes]
      ----------------------------------------------------------------------------------------------------
      ,si_tessellation_scheme
      ,si_bounding_box_xmin
      ,si_bounding_box_ymin
      ,si_bounding_box_xmax
      ,si_bounding_box_ymax
      ,si_level_1_grid_desc
      ,si_level_2_grid_desc
      ,si_level_3_grid_desc
      ,si_level_4_grid_desc
      ,si_cells_per_object
      ----------------------------------------------------------------------------------------------------
      -- [sys].[hash_indexes]
      ----------------------------------------------------------------------------------------------------
      ,hi_bucket_CNT
      ----------------------------------------------------------------------------------------------------
      -- [sys].[foreign_keys]
      ----------------------------------------------------------------------------------------------------
      ,fkc_referenced_object_id
      ,fkc_referenced_index_ID
      ,fkc_is_not_for_replication
      ,fkc_delete_referential_action
      ,fkc_delete_referential_action_desc
      ,fkc_update_referential_action
      ,fkc_update_referential_action_desc
      ----------------------------------------------------------------------------------------------------
      -- [sys].[dm_os_buffer_descriptors]
      ----------------------------------------------------------------------------------------------------
      ,buffer_total_KB_CNT
      ,buffer_free_KB_CNT
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,is_system_named
      ,index_CNT
      ,heap_index_CNT
      ,Clustered_index_CNT
      ,Nonclustered_index_CNT
      ,XML_index_CNT
      ,Spatial_index_CNT
      ,Clustered_ColumnStore_CNT
      ,Nonclustered_ColumnStore_CNT
      ,Nonclustered_Hash_CNT
      ,Fulltext_index_CNT
      ,Missing_index_CNT
      ,Foreign_Key_CNT
)
SELECT rec_type                 = N'I'
      ,database_id              = o.database_id
      ---------------------
      ,history_source_object_id = o.history_source_object_id
      ,parent_object_id         = COALESCE(o.history_source_object_id,o.parent_object_id)
      ---------------------
      ,object_id                = o.object_id
      ,obj_name                 = o.name
      ,obj_principal_ID         = o.principal_ID
      ,obj_type                 = o.type
      ,obj_type_desc            = o.type_desc
      ,obj_create_date          = o.create_date
      ,obj_modify_date          = o.modify_date
      ,obj_is_published         = o.is_published
      ,obj_is_schema_published  = o.is_schema_published
      ---------------------
      ,collection_DTTM          = p.collection_DTTM
      -----------------------------------------------------------------------------------------------------
      -- Index info consolidated
      -- NOTE: SQL_INLINE_TABLE_VALUED_FUNCTION have no index records
      -----------------------------------------------------------------------------------------------------
      ,index_id                    = CASE -- Missing indexes handled in INSERT MISSING INDEX code below
                                          WHEN o.type = N'F'    -- foreign key constraint
                                          THEN o.object_id      -- Foreign KEY "index" ID is same as OBJECT ID
                                          WHEN o.type IN (N'IT' -- system internal table
                                                         ,N'TF' -- SQL table-valued-function SQL 2012+
                                                         ,N'U'  -- User Table
                                                         ,N'V'  -- View
                                                         )
                                          THEN COALESCE(i.index_id,0) -- if no index defaults to a HEAP
                                          ELSE NULL
                                     END
      ,name                        = COALESCE(i.name,i.type_desc,o.name)
      ,type                        = COALESCE(i.type,o.type)
      ,type_desc                   = COALESCE(i.type_desc,o.type_desc,N'HEAP')
      ,type_short_desc             = CASE COALESCE(i.type
                                                  ,o.type
                                                  ,N'0'          -- rowstore heap
                                                  )
                                          WHEN N'0'  THEN N'HP'  -- rowstore heap
                                          WHEN N'1'  THEN N'CX'  -- clustered rowstore index
                                          WHEN N'2'  THEN N'NCX' -- nonclustered rowstore index
                                          WHEN N'3'  THEN N'XML' -- XML index
                                          WHEN N'4'  THEN N'SPT' -- Spatial index
                                          WHEN N'5'  THEN N'CCS' -- clustered columnstore
                                          WHEN N'6'  THEN N'NCS' -- nonclustered columnstore index
                                          WHEN N'7'  THEN N'NHX' -- Hash index on In-Memory Clustered Columnstore
                                          WHEN N'90' THEN N'FTX' -- full-text index of a tabular object. See Insert code below
                                          ----------------------
                                          WHEN N'F'  THEN N'FKC' -- foreign key constraint
                                          WHEN N'IT' THEN N'IT'  -- system internal table
                                          WHEN N'M'  THEN N'MIX' -- missing nonclustered rowstore index - see below
                                          WHEN N'TF' THEN N'TVF' -- SQL table-valued-function SQL 2012+
                                          WHEN N'U'  THEN N'TBL' -- user table
                                          WHEN N'V'  THEN N'UIV' -- unindexed view type
                                          ELSE            COALESCE(i.type,o.type,N'??')
                                     END
      ,is_unique                   = COALESCE(i.is_unique,0)
      ,data_space_id               = COALESCE(i.data_space_id,0)
      ,ignore_dup_key              = COALESCE(i.ignore_dup_key,0)
      ,is_primary_key              = COALESCE(i.is_primary_key,0)
      ,is_unique_constraint        = COALESCE(i.is_unique_constraint,0)
      ,fill_factor                 = IIF(i.fill_factor = 0,100,i.fill_factor)
      ,is_padded                   = COALESCE(i.is_padded,0)
      ,is_disabled                 = COALESCE(i.is_disabled,0)
      ,is_hypothetical             = COALESCE(i.is_hypothetical,0)
      ,allow_row_locks             = i.allow_row_locks
      ,allow_page_locks            = i.allow_page_locks
      ,has_filter                  = COALESCE(i.has_filter,0)
      ,filter_definition           = i.filter_definition
      ----------------------------------------------------------------------------------------------------
      ,Partition_Column_ID         = idx_partition.Partition_Column_ID
      ,Partition_Column_Name       = idx_partition.Partition_Column_Name
      ----------------------------------------------------------------------------------------------------
      ,compression_delay_mm        = i.compression_delay
      ,is_ignored_in_optimization  = COALESCE(i.is_ignored_in_optimization,0)
      ,suppress_dup_key_messages   = COALESCE(i.suppress_dup_key_messages,0)
      ,auto_created                = COALESCE(i.auto_created,0)
      ,optimize_for_sequential_key = COALESCE(i.optimize_for_sequential_key,0)
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - [sys].[internal_tables
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped               = o.is_ms_shipped
      ,internal_type               = o.internal_type
      ,internal_type_desc          = o.internal_type_desc
      ,parent_minor_id             = o.parent_minor_id
      ----------------------------------------------------------------------------------------------------
      -- Index sub-types
      ----------------------------------------------------------------------------------------------------
      ,sub_type                    = COALESCE(i.sub_type,0) -- spatial_index_type     ,xml_index_type
      ,sub_type_desc               = i.sub_type_desc        -- spatial_index_type_desc,xml_index_type_description
      ----------------------------------------------------------------------------------------------------
      -- XML indexes
      ----------------------------------------------------------------------------------------------------
      ,xml_index_type              = i.xml_index_type
      ,xml_index_type_description  = i.xml_index_type_description
      ,xml_using_xml_index_id      = i.xml_using_xml_index_id
      ,xml_secondary_type          = i.xml_secondary_type
      ,xml_secondary_type_desc     = i.xml_secondary_type_desc
      ,xml_path_id                 = i.xml_path_id
      ----------------------------------------------------------------------------------------------------
      -- Spatial indexes
      ----------------------------------------------------------------------------------------------------
      ,si_tessellation_scheme      = i.si_tessellation_scheme
      ,si_bounding_box_xmin        = i.si_bounding_box_xmin
      ,si_bounding_box_ymin        = i.si_bounding_box_ymin
      ,si_bounding_box_xmax        = i.si_bounding_box_xmax
      ,si_bounding_box_ymax        = i.si_bounding_box_ymax
      ,si_level_1_grid_desc        = i.si_level_1_grid_desc
      ,si_level_2_grid_desc        = i.si_level_2_grid_desc
      ,si_level_3_grid_desc        = i.si_level_3_grid_desc
      ,si_level_4_grid_desc        = i.si_level_4_grid_desc
      ,si_cells_per_object         = i.si_cells_per_object
      ----------------------------------------------------------------------------------------------------
      -- HASH indexes
      ----------------------------------------------------------------------------------------------------
      ,hi_bucket_CNT                     = COALESCE(i.hi_bucket_CNT,0)
      ----------------------------------------------------------------------------------------------------
      -- [sys].[foreign_keys
      ----------------------------------------------------------------------------------------------------
      ,fkc_referenced_object_id           = o.referenced_object_id
      ,fkc_referenced_index_ID            = o.key_index_id
      ,fkc_is_not_for_replication         = o.is_not_for_replication
      ,fkc_delete_referential_action      = o.delete_referential_action
      ,fkc_delete_referential_action_desc = o.delete_referential_action_desc
      ,fkc_update_referential_action      = o.update_referential_action
      ,fkc_update_referential_action_desc = o.update_referential_action_desc
      ----------------------------------------------------------------------------------------------------
      -- [sys].[dm_os_buffer_descriptors]
      ----------------------------------------------------------------------------------------------------
      ,buffer_total_KB_CNT                = COALESCE(bd.buffer_total_KB,0)
      ,buffer_free_KB_CNT                 = COALESCE(bd.buffer_free_KB ,0)
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,is_system_named                    = COALESCE(o.is_system_named,0)
      ,index_CNT                          = IIF(i.type NOT IN (-- index "types" to omit from index count
                                                               N'0' -- rowstore heap
                                                              ,N'F' -- foreign key constraint
                                                              ,N'M' -- missing nonclustered rowstore index
                                                              )
                                               ,1
                                               ,0) -- NOTE: includes full text indexes (type = N'90')
      ,heap_index_CNT                     = IIF(i.type = N'0' ,1,0) -- rowstore heap
      ,Clustered_index_CNT                = IIF(i.type = N'1' ,1,0) -- clustered rowstore index
      ,Nonclustered_index_CNT             = IIF(i.type = N'2' ,1,0) -- nonclustered rowstore index
      ,XML_index_CNT                      = IIF(i.type = N'3' ,1,0) -- XML index
      ,Spatial_index_CNT                  = IIF(i.type = N'4' ,1,0) -- Spatial index
      ,Clustered_ColumnStore_CNT          = IIF(i.type = N'5' ,1,0) -- Clustered columnstore
      ,Nonclustered_ColumnStore_CNT       = IIF(i.type = N'6' ,1,0) -- nonclustered columnstore index
      ,Nonclustered_Hash_CNT              = IIF(i.type = N'7' ,1,0) -- Hash index on In-Memory Clustered Columnstore
      ,Fulltext_index_CNT                 = IIF(i.type = N'90',1,0) -- full-text index of a tabular object
      ,Missing_index_CNT                  = 0
      ,Foreign_Key_CNT                    = IIF(o.type = N'F',1,0)  -- foreign key constraint

/*** LOCAL TESTING ***
SELECT o.history_source_object_id,o.parent_object_id,op.name,o.object_id,o.name,o.type
      ,op.object_id
      ,i.index_id
      ,i.type
--*/
  FROM [##SQLXL_Index_Startup] AS p
 CROSS
  JOIN (-- Candidate objects
        SELECT *
          FROM [##SQLXL_Index_sys_objects]
         WHERE type IN (N'F'  -- Foreign Key Constraint
                       ,N'IT' -- system internal table
                       ,N'TF' -- SQL Table Valued Function SQL2012+
                       ,N'U'  -- User Table
                       ,N'V'  -- View
                       )
       ) AS o

------------------------------------------------------------------------------------------------------
-- match up objects to their indexes
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_indexes] AS i
    ON o.database_id = i.database_id
   AND o.object_id   = i.object_id

------------------------------------------------------------------------------------------------------
-- add buffer cache summary usage
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_os_buffer_descriptors_EXT] AS bd
    ON o.database_id = bd.database_id
   AND o.object_id   = bd.object_id
   AND i.index_id    = bd.index_id
   AND i.type   NOT IN (-- avoid "indexes" with IDs that could match up with physical indexes
                        N'90' -- full-text index of a tabular object
                       ,N'F'  -- foreign key constraint
                       ,N'M'  -- missing nonclustered rowstore index
                       ,N'V'  -- View
                       )

------------------------------------------------------------------------------------------------------
-- Index Partition information
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- Index Column Partition information
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,Partition_Column_ID   = ic.column_id
              ,Partition_Column_Name = c.name
              ,rn                    = ROW_NUMBER() OVER (PARTITION BY ic.database_id
                                                                      ,ic.object_id
                                                                      ,ic.index_id
                                                              ORDER BY ic.column_id
                                                         )
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_columns]       AS c
            ON ic.database_id = c.database_id
           AND ic.object_id   = c.object_id
           AND ic.column_id   = c.column_id
         WHERE ic.partition_ordinal = 1
       ) AS idx_partition
    ON i.database_id = idx_partition.database_id
   AND i.object_id   = idx_partition.object_id
   AND i.index_id    = idx_partition.index_id
   AND (   1         = idx_partition.rn
        OR idx_partition.rn IS NULL
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Insert heaps, indexes, FKC, TVF, Views'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Insert - [##SQLXL_Index_Compilation] - Full Text indexes
/******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Compilation]
      (rec_type
      ,database_id
      ---------------------
      ,history_source_object_id
      ,parent_object_id
      ,object_id
      ,obj_name
      ,obj_principal_ID
      ,obj_type
      ,obj_type_desc
      ,obj_create_date
      ,obj_modify_date
      ,obj_is_published
      ,obj_is_schema_published
      ---------------------
      ,collection_DTTM
      ---------------------
      ,index_id
      ,name
      ,type
      ,type_desc
      ,sub_type
      ,type_short_desc
      ,data_space_id
      ,is_disabled
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - [sys].[internal_tables
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped
      ,internal_type
      ,internal_type_desc
      ,parent_minor_id
      --------------------
      ,key_column_info
      --------------------
      ,ftx_unique_index_id
      ,ftx_fulltext_catalog_id
      ,ftx_fulltext_catalog_name
      ,ftx_change_tracking_state
      ,ftx_change_tracking_state_desc
      ,ftx_has_crawl_completed
      ,ftx_crawl_type
      ,ftx_crawl_type_desc
      ,ftx_crawl_start_date
      ,ftx_crawl_end_date
--    ,ftx_incremental_timestamp -- OMITTED. binary data type, which represents a rowversion
      ,ftx_stoplist_id
      ,ftx_property_list_id
      ----------------------------------------------------------------------------------------------------
      -- [sys].[dm_os_buffer_descriptors]
      ----------------------------------------------------------------------------------------------------
      ,buffer_total_KB_CNT
      ,buffer_free_KB_CNT
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT
      ,heap_index_CNT
      ,Clustered_index_CNT
      ,Nonclustered_index_CNT
      ,XML_index_CNT
      ,Spatial_index_CNT
      ,Clustered_ColumnStore_CNT
      ,Nonclustered_ColumnStore_CNT
      ,Nonclustered_Hash_CNT
      ,Fulltext_index_CNT
      ,Missing_index_CNT
      ,Foreign_Key_CNT
       )
SELECT rec_type                          = N'I'                      -- index level composite record
      ---------------------
      ,database_id                       = o.database_id
      ---------------------
      ,history_source_object_id          = o.history_source_object_id
      ,parent_object_id                  = COALESCE(o.history_source_object_id,o.parent_object_id)
      ---------------------
      ,object_id                         = o.object_id
      ,obj_name                          = o.name
      ,obj_principal_ID                  = o.principal_ID
      ,obj_type                          = o.type
      ,obj_type_desc                     = o.type_desc
      ,obj_create_date                   = o.create_date
      ,obj_modify_date                   = o.modify_date
      ,obj_is_published                  = o.is_published
      ,obj_is_schema_published           = o.is_schema_published
      ---------------------
      ,collection_DTTM                   = p.collection_DTTM
      ---------------------
      ,index_id                          = i.object_id
      ,name                              = N'FULL TEXT'              -- HARD CODED for FULL TEXT index
      ,type                              = N'90'                     -- full-text index. maintains sort order on XL sheet by index TYPE
      ,type_desc                         = N'FULL TEXT'              -- HARD CODED for FULL TEXT index
      ,sub_type                          = 0
      ,type_short_desc                   = N'FTX'                    -- HARD CODED for FULL TEXT index
      ,data_space_id                     = i.data_space_id
      ,is_disabled                       = IIF(i.is_enabled = 1,0,1) -- NOTE: opposite of [sys].[indexES]
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - [sys].[internal_tables
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped                     = o.is_ms_shipped
      ,internal_type                     = o.internal_type
      ,internal_type_desc                = o.internal_type_desc
      ,parent_minor_id                   = o.parent_minor_id
      --------------------
      ,key_column_info                   = NULL
      --------------------
      ,ftx_unique_index_id               = i.unique_index_id         -- unique index used to uniquely relate the full-text index to the rows
      ,ftx_fulltext_catalog_id           = i.fulltext_catalog_id
      ,ftx_fulltext_catalog_name         = c.name
      ,ftx_change_tracking_state         = i.change_tracking_state
      ,ftx_change_tracking_state_desc    = i.change_tracking_state_desc
      ,ftx_has_crawl_completed           = i.has_crawl_completed
      ,ftx_crawl_type                    = i.crawl_type
      ,ftx_crawl_type_desc               = i.crawl_type_desc
      ,ftx_crawl_start_date              = i.crawl_start_date
      ,ftx_crawl_end_date                = i.crawl_end_date
--    ,ftx_incremental_timestamp         = i.incremental_timestamp   -- OMITTED. binary data type, which represents a rowversion
      ,ftx_stoplist_id                   = i.stoplist_id
      ,ftx_property_list_id              = i.property_list_id
      ---------------------------------------------------------------------------------------------------------
      -- [sys].[dm_os_buffer_descriptors] - no links between buffer cache and FUllText indexes found as of yet
      ---------------------------------------------------------------------------------------------------------
      ,buffer_total_KB_CNT               = 0 -- bd.buffer_total_KB_CNT
      ,buffer_free_KB_CNT                = 0 -- bd.buffer_free_KB_CNT
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT                         = 1
      ,heap_index_CNT                    = 0
      ,Clustered_index_CNT               = 0
      ,Nonclustered_index_CNT            = 0
      ,XML_index_CNT                     = 0
      ,Spatial_index_CNT                 = 0
      ,Clustered_ColumnStore_CNT         = 0
      ,Nonclustered_ColumnStore_CNT      = 0
      ,Nonclustered_Hash_CNT             = 0
      ,Fulltext_index_CNT                = 1
      ,Missing_index_CNT                 = 0
      ,Foreign_Key_CNT                   = 0

  FROM [##SQLXL_Index_Startup] AS p
 CROSS
  JOIN [##SQLXL_Index_sys_fulltext_indexes]   AS i
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_fulltext_catalogs]  AS c
    ON i.database_id         = c.database_id
   AND i.fulltext_catalog_id = c.fulltext_catalog_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects]            AS o
    ON i.database_id = o.database_id
   AND i.object_id   = o.object_id
------------------------------------------------------------------------------------------------------
-- <FUTURE> Not sure how buffer cache links to Fulltext index
------------------------------------------------------------------------------------------------------
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Insert Full Text indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Insert - [##SQLXL_Index_Compilation] - Missing indexes
/******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Compilation]
      (rec_type
      ,database_id
      ---------------------
      ,history_source_object_id
      ,parent_object_id
      ,object_id
      ,obj_name
      ,obj_principal_ID
      ,obj_type
      ,obj_type_desc
      ,obj_create_date
      ,obj_modify_date
      ,obj_is_published
      ,obj_is_schema_published
      ---------------------
      ,collection_DTTM
      ---------------------
      ,index_id
      ,name
      ,type
      ,type_desc
      ,sub_type
      ,type_short_desc
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - [sys].[internal_tables
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped
      ,internal_type
      ,internal_type_desc
      ,parent_minor_id
      ---------------------
      ,mix_avg_total_user_cost_AMT
      ,mix_avg_total_system_cost_AMT
      ,mix_avg_user_impact_AMT
      ,mix_avg_system_impact_AMT
      ,mix_unique_compiles_CNT
      ,mix_Advantage_AMT
      -------------------------------------------------------------------------------------------------------------------------------
      -- missing_index_group_stats_query - multiple queries may exist per missing index, only get the query with the biggest benefit
      -- Logic contained in the instance/database data capture queries
      -------------------------------------------------------------------------------------------------------------------------------
      ,mqy_query_text
      ,mqy_query_plan
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT
      ,heap_index_CNT
      ,Clustered_index_CNT
      ,Nonclustered_index_CNT
      ,XML_index_CNT
      ,Spatial_index_CNT
      ,Clustered_ColumnStore_CNT
      ,Nonclustered_ColumnStore_CNT
      ,Nonclustered_Hash_CNT
      ,Fulltext_index_CNT
      ,Missing_index_CNT
      ,Foreign_Key_CNT
      )
SELECT rec_type                          = N'I'                       -- index level composite record
      ,database_id                       = i.database_id
      ---------------------
      ,history_source_object_id          = o.history_source_object_id
      ,parent_object_id                  = COALESCE(o.history_source_object_id,o.parent_object_id)
      ,object_id                         = o.object_id
      ,obj_name                          = o.name
      ,obj_principal_ID                  = o.principal_ID
      ,obj_type                          = o.type
      ,obj_type_desc                     = o.type_desc
      ,obj_create_date                   = o.create_date
      ,obj_modify_date                   = o.modify_date
      ,obj_is_published                  = o.is_published
      ,obj_is_schema_published           = o.is_schema_published
      ---------------------
      ,collection_DTTM                   = p.collection_DTTM
      ---------------------
      ,index_id                          = i.index_handle
      ,name                              = N'MISSING'
      ,type                              = N'M'             -- missing nonclustered rowstore index
      ,type_desc                         = N'MISSING'
      ,sub_type                          = 0
      ,type_short_desc                   = N'MIX'
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables & objects - [sys].[internal_tables
      ----------------------------------------------------------------------------------------------------
      ,is_ms_shipped                     = o.is_ms_shipped
      ,internal_type                     = o.internal_type
      ,internal_type_desc                = o.internal_type_desc
      ,parent_minor_id                   = o.parent_minor_id
      ---------------------
      ,mix_avg_total_user_cost_AMT       = i.avg_total_user_cost
      ,mix_avg_total_system_cost_AMT     = i.avg_total_system_cost
      ,mix_avg_user_impact_AMT           = i.avg_user_impact
      ,mix_avg_system_impact_AMT         = i.avg_system_impact
      ,mix_unique_compiles_CNT           = i.unique_compiles
      ,mix_Advantage_AMT                 = i.mix_Advantage_AMT
      ----------------------------------------
      -- missing_index_group_stats_query
      ----------------------------------------
      ,mqy_query_text                    = mqy.query_text
      ,mqy_query_plan                    = mqy.query_plan
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT                         = 0
      ,heap_index_CNT                    = 0
      ,Clustered_index_CNT               = 0
      ,Nonclustered_index_CNT            = 0
      ,XML_index_CNT                     = 0
      ,Spatial_index_CNT                 = 0
      ,Clustered_ColumnStore_CNT         = 0
      ,Nonclustered_ColumnStore_CNT      = 0
      ,Nonclustered_Hash_CNT             = 0
      ,Fulltext_index_CNT                = 0
      ,Missing_index_CNT                 = 1
      ,Foreign_Key_CNT                   = 0

/*** LOCAL TESTING ***
SELECT COUNT(1)
--*/

  FROM [##SQLXL_Index_Startup]                         AS p
 CROSS
  JOIN [##SQLXL_Index_sys_dm_db_missing_index_details] AS i
    -- NOTE: includes [sys].[dm_db_missing_index_details],[sys].[dm_db_missing_index_groups],[sys].[dm_db_missing_index_group_stats]
  JOIN [##SQLXL_Index_sys_objects]                     AS o
    ON i.database_id = o.database_id
   AND i.object_id   = o.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_missing_index_group_stats_query] AS mqy
    ON i.group_handle = mqy.group_handle
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Insert Missing indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Index Compilation Table
/******************************************************************************************************************************************/
CREATE UNIQUE CLUSTERED INDEX ixuc_SQLXL_Index_Compilation
    ON [##SQLXL_Index_Compilation]
      (database_id
      ,object_id
      ,index_ID
      ,type
      ,sub_type
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

CREATE NONCLUSTERED INDEX ix_SQLXL_Index_Compilation__rec_type
    ON [##SQLXL_Index_Compilation]
      (rec_type)
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Indexed Compilation Table [##SQLXL_Index_Compilation]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - source table unique index used by FullText index
/******************************************************************************************************************************************/
;WITH ftx AS (-- get all fulltext index records
SELECT database_id
      ,parent_object_id
      ,object_id
      ,ftx_unique_index_id
      ,index_id
  FROM [##SQLXL_Index_Compilation]
 WHERE rec_type = N'I'  -- index level composite record
   AND type     = N'90' -- full-text index of a tabular object
)
UPDATE tgt
   SET tgt.Relates_Fulltext_index_ID = ftx.index_id
  FROM [##SQLXL_Index_Compilation] AS tgt
  JOIN ftx                         AS ftx
    ON tgt.database_id      = ftx.database_id
   AND tgt.parent_object_id = ftx.parent_object_id
   AND tgt.object_id        = ftx.object_id
   AND tgt.index_ID         = ftx.ftx_unique_index_ID
   AND tgt.type            IN (N'1' -- clustered rowstore index
                              ,N'2' -- nonclustered rowstore index
                              )
 WHERE tgt.rec_type         = N'I'  -- index level composite record
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update source unique index used by FullText index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Concatenate list of index key column IDs in corrected sequence order "key_column_sequence"
-- computed previously to account for clustered index key order not matching [index_column_id] order
/******************************************************************************************************************************************/
SET ANSI_WARNINGS ON;
UPDATE tgt
   SET key_column_IDs = N',' + key_columns.col_id
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.name
      ,key_column_IDs = N',' + key_columns.col_id
--*/
   FROM [##SQLXL_Index_Compilation] AS tgt
  CROSS
  APPLY (-- get comma-separated list of all KEY column ID's. Include leading comma so IDs are stand out from one another
         -- includes ALL "indexes" except HEAP & Columnstore. Foreign Key Constraints added below
         SELECT (-- SELECT added to allow for .value('(./text())[1]',N'NVARCHAR(MAX)') below
                 SELECT CAST(ic.column_id AS NVARCHAR(MAX)) + N','
                   FROM [##SQLXL_Index_sys_index_columns] ic
                  WHERE tgt.database_id = ic.database_id
                    AND tgt.object_id   = ic.object_id
                    AND tgt.index_id    = ic.index_id
                    AND tgt.type        = ic.type
                    AND 0               = ic.is_included_column
                  ORDER BY
                        ic.key_column_sequence
                    FOR XML PATH(N''), TYPE
                ).value('(./text())[1]',N'NVARCHAR(MAX)')
        ) key_columns(col_id)
 WHERE tgt.rec_type  = N'I'  -- index level composite record
   AND tgt.type NOT IN (N'0' -- rowstore heap
                       ,N'5' -- Clustered columnstore
                       ,N'6' -- nonclustered columnstore index
                       ,N'F' -- foreign key constraint
                       ,N'M' -- missing nonclustered rowstore index
                       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Concatenated list of index key column IDs in corrected sequence order'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Concatenate Foreign Key Constraint column IDs in [constraint_column_id] order
/******************************************************************************************************************************************/
SET ANSI_WARNINGS ON;
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.name,
--*/

        key_column_IDs = N',' +key_columns.col_id
   FROM [##SQLXL_Index_Compilation] AS tgt
 CROSS
 APPLY (-- DOuble select needed FOR XML .VALUE
        SELECT (-- get comma-separated list of all KEY column ID's, include leading column so IDs stand out from one another
                -- includes ALL "indexes" except HEAP & Columnstore
                SELECT CAST(fkc.parent_column_id AS NVARCHAR(MAX)) + N','
                  FROM [##SQLXL_Index_sys_foreign_key_columns] AS fkc
                 WHERE tgt.database_id = fkc.database_id
                   AND tgt.object_id   = fkc.constraint_object_id
                 ORDER BY
                       fkc.constraint_column_id
                   FOR XML PATH(N''), TYPE
               ).value('(./text())[1]',N'NVARCHAR(MAX)')
       ) key_columns(col_id)
 WHERE tgt.rec_type = N'I' -- index level composite record
   AND tgt.type     = N'F' -- foreign key constraint
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Concatenated Foreign Key Constraint column IDs in [constraint_column_id] order'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Insert Compilation records - Base "P" (Table, View, TVF), HISTORY TABLE "H", and INTERNAL TABLE "S" records',0,0)
            WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Insert - [##SQLXL_Index_Compilation] - Object records - Base "P" (Table, View), HISTORY TABLE "H", and INTERNAL TABLE "S" records
-- Top-level "Parent" "P" tables include:
--    object type "U" "Base" tables - Rowstore HEAP, Rowstore Clustered, and Clustered Columnstore
--    object type "U" "History" tables created by Change Data Capture and System Versioning
-- Internal tables roll up to their respective parent BASE or HISTORY table
-- Other top-level objects include Views
/******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Compilation]
      (rec_type
      --------------------------------------------
      -- [sys].[databases]
      --------------------------------------------
      ,database_id
      ---------------------
      ,collection_DTTM
      --------------------------------------------
      -- [sys].[objects]
      --------------------------------------------
      ,history_source_object_id
      ,parent_object_id
      --------------------------------------------
      ,object_id
      ,obj_name
      ,obj_principal_ID
      ,obj_type
      ,obj_type_desc
      ,obj_create_date
      ,obj_modify_date
      ,obj_is_published
      ,obj_is_schema_published
      --------------------------------------------
      ,obj_definition
      ,obj_uses_ansi_nulls
      ,obj_uses_quoted_identifier
      ,obj_is_schema_bound
      ,obj_uses_database_collation
      ,obj_is_recompiled
      ,obj_null_on_null_input
      ,obj_execute_as_principal_id
      ,obj_uses_native_compilation
      ,obj_is_inlineable
      ,obj_inline_type
      --------------------------------------------
      ,index_id
      ,name
      ,type
      ,type_desc
      ,sub_type
      --------------------------------------------
      -- [sys].[internal_tables
      --------------------------------------------
      ,internal_type
      ,internal_type_desc
      ,parent_minor_id
      --------------------------------------------
      -- [sys].[stats]
      --------------------------------------------
      ,Stats_CNT
      --------------------------------------------
      -- [sys].[partitions]
      --------------------------------------------
      ,Partition_none_compress_CNT
      ,Partition_row_compress_CNT
      ,Partition_page_compress_CNT
      ,Partition_columnstore_compress_CNT
      ,Partition_columnstore_archive_compress_CNT
      ,Partition_xml_compress_CNT
      ,row_CNT
      )
SELECT rec_type = IIF(o.type = N'IT' -- system internal table
                     ,N'S'           -- system/internal table composite record
                     ,N'P')          -- parent level composite record
      ----------------------------
      -- [sys].[databases]
      ----------------------------
      ,database_id                 = o.database_id
      ,collection_DTTM             = p.collection_DTTM
      ----------------------------
      -- [sys].[objects]
      ----------------------------
      ,history_source_object_id    = o.history_source_object_id
      ,parent_object_id            = COALESCE(o.history_source_object_id,o.parent_object_id)
      ----------------------------
      ,object_id                   = o.object_id
      ,obj_name                    = o.name
      ,obj_principal_ID            = o.principal_id
      ,obj_type                    = o.type
      ,obj_type_desc               = o.type_desc
      ,obj_create_date             = o.create_date
      ,obj_modify_date             = o.modify_date
      ,obj_is_published            = o.is_published
      ,obj_is_schema_published     = o.is_schema_published
      -- SQL_MODULES --------------------------
      ,obj_definition              = o.definition
      ,obj_uses_ansi_nulls         = o.uses_ansi_nulls
      ,obj_uses_quoted_identifier  = o.uses_quoted_identifier
      ,obj_is_schema_bound         = o.is_schema_bound
      ,obj_uses_database_collation = o.uses_database_collation
      ,obj_is_recompiled           = o.is_recompiled
      ,obj_null_on_null_input      = o.null_on_null_input
      ,obj_execute_as_principal_id = o.execute_as_principal_id
      ,obj_uses_native_compilation = o.uses_native_compilation
      ,obj_is_inlineable           = o.is_inlineable
      ,obj_inline_type             = o.inline_type
      ----------------------------
      ,index_id                    = o.object_id
      ,name                        = o.name
      ,type                        = o.type
      ,type_desc                   = o.type_desc
      ,sub_type                    = 0
      ----------------------------------------------------------------------------------------------------
      -- Internal Tables
      ----------------------------------------------------------------------------------------------------
      ,internal_type               = o.internal_type
      ,internal_type_desc          = o.internal_type_desc
      ,parent_minor_id             = o.parent_minor_id
      ----------------------------------------------------------------------------------------------------
      -- [sys].[stats]
      ----------------------------------------------------------------------------------------------------
      ,Stats_CNT                   = COALESCE(stats.Statistics_CNT,0)
      --------------------------------------------
      -- [sys].[partitions]
      --------------------------------------------
      ,row_CNT                                    = ISNULL(part.rows         ,0)
      ,Partition_none_compress_CNT                = ISNULL(part.none_comp    ,0)
      ,Partition_row_compress_CNT                 = ISNULL(part.row_comp     ,0)
      ,Partition_page_compress_CNT                = ISNULL(part.page_comp    ,0)
      ,Partition_columnstore_compress_CNT         = ISNULL(part.colstore_comp,0)
      ,Partition_columnstore_archive_compress_CNT = ISNULL(part.colstore_arch,0)
      ,Partition_xml_compress_CNT                 = ISNULL(part.xml_comp     ,0)
  FROM [##SQLXL_Index_Startup] AS p
 CROSS
  JOIN (-- indexable objects
        SELECT *
          FROM [##SQLXL_Index_sys_objects]
         WHERE type
            IN (N'IT' -- Internal Table
               ,N'TF' -- SQL table-valued-function SQL 2012+
               ,N'U'  -- User Table
               ,N'V'  -- View
               )
       ) AS o

  LEFT OUTER
  JOIN (-- Get count of rows, compressed and archived partitions - OBJECT LEVEL ONLY
        SELECT p.database_id
              ,p.object_id
              ,rows                = SUM(p.rows)
              ,none_comp           = SUM(p.none_comp    )
              ,row_comp            = SUM(p.row_comp     )
              ,page_comp           = SUM(p.page_comp    )
              ,colstore_comp       = SUM(p.colstore_comp)
              ,colstore_arch       = SUM(p.colstore_arch)
              ,xml_comp            = SUM(p.xml_comp     )
          FROM [##SQLXL_Index_sys_partitions] AS p
          JOIN [##SQLXL_Index_sys_indexes]    AS i
            ON p.database_id = i.database_id
           AND p.object_id   = i.object_id
           AND p.index_id    = i.index_id
         WHERE i.type IN (N'0' -- rowstore heap
                         ,N'1' -- clustered rowstore index
                         ,N'5' -- Clustered columnstore
                         )
         GROUP BY
               p.database_id
              ,p.object_id
       ) AS part
    ON o.database_id        = part.database_id
   AND o.object_id          = part.object_id

------------------------------------------------------------------------------------------------------
-- Stats Counts - OBJECT LEVEL ONLY
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- count of statistics for each table & indexed view
        SELECT s.database_id
              ,s.object_id
              ,Statistics_CNT          = COUNT(1)
              ,Statistics_Filtered_CNT = SUM(IIF(has_filter = 1,1,0))
          FROM [##SQLXL_Index_sys_stats]   AS s
         GROUP BY
               s.database_id
              ,s.object_id
       ) stats
    ON o.database_id = stats.database_id
   AND o.object_id   = stats.object_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Insert Object records - Base "P" (Table, View, TVF), HISTORY TABLE "H", and INTERNAL TABLE "S" records'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Insert - [##SQLXL_Index_Compilation] - DATABASE records
/******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Compilation]
      (rec_type
      ,database_id
      ,database_name
      ,collation_name
      ---------------------
      ,collection_DTTM
      ,parent_object_id
      ,parent_object_name
      ,object_id
      ,obj_name
      ,obj_type
      ,obj_type_desc
      ,index_id
      ,name
      ,type
      ,type_desc
      ,sub_type
      ,CLR_trigger_CNT
      ,SQL_trigger_CNT
      ,is_instead_of_trigger_CNT
      )
SELECT rec_type           = N'D'               -- database level composite record
      ,database_id        = d.database_id
      ,database_name      = d.name
      ,collation_name     = d.collation_name
      ---------------------
      ,collection_DTTM    = p.collection_DTTM
      ,parent_object_id   = d.database_id
      ,parent_object_name = d.name
      ,object_id          = d.database_id
      ,obj_name           = d.name
      ,obj_type           = N'DB'
      ,obj_type_desc      = N'Database'
      ,index_id           = d.database_id
      ,name               = d.name
      ,type               = N'DB'
      ,type_desc          = N'Database'
      ,sub_type           = 0
      ------------------------------------------------------------------------------------------------
      ,CLR_trigger_CNT    = COALESCE(tr.CLR_trigger_CNT             ,0)
      ,SQL_trigger_CNT    = COALESCE(tr.SQL_trigger_CNT             ,0)
      ,is_instead_of_trigger_CNT = COALESCE(tr.is_instead_of_trigger_CNT   ,0)
  FROM [##SQLXL_Index_sys_databases] AS d
  LEFT OUTER
  JOIN (-- Summarize DML triggers
        SELECT database_id
              ,CLR_trigger_CNT           = SUM(IIF(type = N'TA',1,0))                 -- Assembly (CLR) DML trigger
              ,SQL_trigger_CNT           = SUM(IIF(type = N'TR',1,0))                 -- SQL DML trigger
              ,is_instead_of_trigger_CNT = SUM(IIF(is_instead_of_trigger = 1,1,0))
          FROM [##SQLXL_Index_sys_objects]
         WHERE parent_class  = 0 -- Database, for the DDL triggers.
           AND is_ms_shipped = 0 -- Trigger NOT created on behalf of the user by an internal SQL Server component
         GROUP BY
               database_id
       ) AS tr
    ON d.database_id = tr.database_id
 CROSS
  JOIN [##SQLXL_Index_Startup] AS p
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Insert DATABASE records'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Insert - [##SQLXL_Index_Compilation] - INSTANCE record
/******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Compilation]
      (rec_type
      ,database_id
      ,database_name
      ,collation_name
      ---------------------
      ,collection_DTTM
      ,parent_object_id
      ,parent_object_name
      ,object_id
      ,obj_name
      ,obj_type
      ,obj_type_desc
      ,index_id
      ,name
      ,type
      ,type_desc
      ,sub_type
      )
SELECT rec_type                = N'A'        -- instance level composite record
      ,database_id             = 0
      ,database_name           = N'Instance'
      ,collation_name          = CONVERT(nvarchar(128), SERVERPROPERTY('collation'))
      ---------------------
      ,collection_DTTM         = p.collection_DTTM
      ,parent_object_id        = 0
      ,parent_object_name      = N'Instance'
      ,object_id               = 0
      ,obj_name                = N'Instance'
      ,obj_type                = N'A'        -- instance level composite record
      ,obj_type_desc           = N'Instance'
      ,index_id                = 0
      ,name                    = N'Instance'
      ,type                    = N'A'        -- instance level composite record
      ,type_desc               = N'Instance'
      ,sub_type                = 0
  FROM [##SQLXL_Index_Startup] AS p
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Insert INSTANCE record'
   RAISERROR(@msg,0,0) WITH NOWAIT;
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - "Parent"-level fields across records
-- Assign HISTORY TABLES their own rec_type = N'H'
-- NOTE: columns named "tbl_%" are not to be aggregated since they are at the parent level already
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type
      ,tgt.database_id
      ,tgt.object_id
      ,tgt.index_id
      ,tgt.type,
--*/
       rec_type = IIF(tgt.rec_type = N'P'                              -- parent level composite record
                     ,CASE WHEN tbl.temporal_type        = 1 THEN N'H' -- historical/archive table composite record
                           WHEN tbl.cdc_is_history_table = 1 THEN N'H' -- historical/archive table composite record
                           WHEN his.ledger_type          > 0 THEN N'H' -- historical/archive table composite record
                           ELSE tgt.rec_type
                      END
                     ,tgt.rec_type)
----------------------------------------------------------------------------------------------------
-- [sys].[databases]
----------------------------------------------------------------------------------------------------
      ,database_name                     = d.name
      ,collation_name                    = d.collation_name
----------------------------------------------------------------------------------------------------
-- [sys].[schemas] - object level
----------------------------------------------------------------------------------------------------
      ,schema_id                         = o.schema_id
      ,schema_name                       = o.schema_name
----------------------------------------------------------------------------------------------------
-- [sys].[objects]
----------------------------------------------------------------------------------------------------
      ,obj_name                           = o.name
      ,obj_type                           = o.type
      ,obj_type_desc                      = o.type_desc
      ,obj_create_date                    = o.create_date
      ,obj_modify_date                    = o.modify_date
      ,obj_is_published                   = o.is_published
      ,obj_is_schema_published            = o.is_schema_published
----------------------------------------------------------------------------------------------------
-- Parent Objects - mostly for Internal Tables - [sys].[tables]
----------------------------------------------------------------------------------------------------
      ,parent_schema_id                  = op.schema_id
      ,parent_schema_name                = op.schema_name
      ,parent_object_name                = op.name
      ,parent_object_type                = op.type
      ,parent_object_type_desc           = op.type_desc
----------------------------------------------------------------------------------------------------
-- History Table sources - [sys].[schemas], [sys].[tables]
----------------------------------------------------------------------------------------------------
      ,history_source_schema_id          = oh.schema_id
      ,history_source_schema_name        = oh.schema_name
      ,history_source_object_name        = oh.name
      ,history_source_object_type        = oh.type
      ,history_source_object_type_desc   = oh.type_desc
----------------------------------------------------------------------------------------------------
-- [sys].[tables]
----------------------------------------------------------------------------------------------------
      ,tbl_max_column_used_ID          = tbl.max_column_id_used
      ,tbl_is_replicated               = COALESCE(tbl.is_replicated,0)
      ,tbl_has_unchecked_assembly_data = COALESCE(tbl.has_unchecked_assembly_data,0)
      ,tbl_lock_escalation             = tbl.lock_escalation
      ,tbl_lock_escalation_desc        = tbl.lock_escalation_desc
      ,tbl_is_filetable                = COALESCE(tbl.is_filetable,0)
      ,tbl_is_memory_optimized         = COALESCE(tbl.is_memory_optimized
                                                 ,itt.is_memory_optimized -- internal table parent is optimized
                                                 ,0)
      ,tbl_is_clustered_columnstore    = COALESCE(ccs.is_clustered_columnstore,0)
      ,tbl_history_table_id            = tbl.history_table_id
      ,tbl_history_table_schema        = his.schema_name
      ,tbl_history_table_name          = his.name
      ------------------------------------------------------------------------------------------------
      ,CLR_trigger_CNT                 = COALESCE(tr.CLR_trigger_CNT             ,0)
      ,SQL_trigger_CNT                 = COALESCE(tr.SQL_trigger_CNT             ,0)
      ,is_instead_of_trigger_CNT       = COALESCE(tr.is_instead_of_trigger_CNT   ,0)
--------------------------------------------------------------
-- Physical Table computed properties
--------------------------------------------------------------
      ,tbl_is_heap                     = COALESCE(IIF(ccs.is_heap = 1 AND tbl.is_memory_optimized = 0,1,0),0)
      ,tbl_column_CNT                  = COALESCE(tc.column_CNT,0)

--------------------------------------------------------------
-- SQLXL Object labels
--------------------------------------------------------------
      ,obj_type_hdr              = COALESCE(otl.obj_type_hdr,N'')
      ,obj_type_dtl              = COALESCE(otl.obj_type_dtl,N'')
      ,obj_type_label            = COALESCE(otl.obj_type_hdr,N'')
                                 + IIF(LTRIM(otl.obj_type_dtl) > N''
                                      ,N' ' + otl.obj_type_dtl
                                      ,N'')
      ,obj_type_short_label      = COALESCE(RTRIM(LEFT(otl.obj_type_hdr,3)),N'')

----------------------------------------------------------------------------------------------------
-- [cdc] Change Data Capture tables
----------------------------------------------------------------------------------------------------
      ,cdc_capture_instance      = tbl.cdc_capture_instance
      ,cdc_supports_net_changes  = tbl.cdc_supports_net_changes
      ,cdc_role_name             = tbl.cdc_role_name
      ,cdc_index_name            = tbl.cdc_index_name
      ,cdc_filegroup_name        = tbl.cdc_filegroup_name
      ,cdc_create_date           = tbl.cdc_create_date
      ,cdc_partition_switch      = tbl.cdc_partition_switch
      ,cdc_is_history_table      = tbl.cdc_is_history_table

/*** LOCAL TESTING ***
SELECT *
--*/

  FROM (SELECT * FROM [##SQLXL_Index_Compilation]
         WHERE rec_type NOT IN (N'A' -- instance level composite record
                               ,N'D' -- database level composite record
                               )
       ) AS tgt

 INNER
  JOIN [##SQLXL_Index_sys_databases] AS d
    ON tgt.database_id = d.database_id
  -----------------------------------------------------------
  -- schemas
  -----------------------------------------------------------
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS oh -- history source object
    ON tgt.database_ID              = oh.database_id
   AND tgt.history_source_object_id = oh.object_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS op -- parent objects
    ON tgt.database_ID      = op.database_id
   AND tgt.parent_object_id = op.object_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS o -- objects
    ON tgt.database_ID = o.database_id
   AND tgt.object_id   = o.object_id

  -----------------------------------------------------------
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects]   AS tbl -- all records get TABLE level information
    ON tgt.database_ID = tbl.database_id
   AND (   (    tgt.TYPE             = N'F' -- foreign key constraint
            AND tgt.parent_object_id = tbl.object_id
           )
        OR (    tgt.TYPE            <> N'F' -- foreign key constraint
            AND tgt.object_id        = tbl.object_id
           )
       )

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects]   AS his -- system versioned history table
    ON tbl.database_id      = his.database_id
   AND tbl.history_table_id = his.object_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects]   AS itt -- internal table parent
    ON tbl.database_id = itt.database_id
   AND tbl.parent_id   = itt.object_id

  -----------------------------------------------------------
  LEFT OUTER
  JOIN (-- list of data spaces for Large Objects (LOB)
        SELECT database_id
              ,data_space_id
              ,data_space_name
          FROM [##SQLXL_Index_sys_data_spaces]
         GROUP BY
               database_id
              ,data_space_id
              ,data_space_name
       ) AS lob_ds
    ON tbl.database_id       = lob_ds.database_id
   AND tbl.lob_data_space_id = lob_ds.data_space_id

  LEFT OUTER
  JOIN (-- list of data spaces for Filestream objects
        SELECT database_id
              ,data_space_id
              ,data_space_name
          FROM [##SQLXL_Index_sys_data_spaces]
         GROUP BY
               database_id
              ,data_space_id
              ,data_space_name
       ) AS fst_ds
    ON tbl.database_id              = fst_ds.database_id
   AND tbl.filestream_data_space_id = fst_ds.data_space_id

  LEFT OUTER
  JOIN (-- Is table a Heap or Clustered Columnstore?
        SELECT database_id
              ,object_id
              ,is_clustered_columnstore = SUM(IIF(type = N'5',1,0)) -- Clustered columnstore
              ,is_heap                  = SUM(IIF(type = N'0',1,0)) -- rowstore heap
          FROM [##SQLXL_Index_sys_indexes]
         GROUP BY
               database_id
              ,object_id
        HAVING  (  SUM(IIF(type = N'5',1,0)) -- Clustered columnstore
                 + SUM(IIF(type = N'0',1,0)) -- rowstore heap
                ) > 0
       ) AS ccs
    ON tgt.database_id                                = ccs.database_id
   AND (   (    tgt.type  = N'F'             -- foreign key constraint
            AND tgt.parent_object_id = ccs.object_id
           )
        OR (    tgt.type <> N'F'             -- foreign key constraint
            AND tgt.object_id        = ccs.object_id
           )
       )

  LEFT OUTER
  JOIN (-- Size of of rows by table. Row count computed above from [sys].[partitions]
        SELECT p.database_id
              ,p.object_id
              ,used_page_CNT = SUM(p.used_page_CNT)
          FROM [##SQLXL_Index_sys_dm_db_partition_stats] AS p
          JOIN [##SQLXL_Index_sys_indexes]               AS i
            ON p.database_id = i.database_id
           AND p.object_id   = i.object_id
           AND p.index_id    = i.index_id
           AND i.type IN (N'0' -- rowstore heap
                         ,N'1' -- clustered rowstore index
                         ,N'5' -- clustered columnstore
                         )
         GROUP BY
               p.database_id
              ,p.object_id
       ) AS rc
    ON tgt.database_id = rc.database_id
   AND tgt.object_id   = rc.object_id

  LEFT OUTER
  JOIN (-- count of columns in:
        -- Table-valued assembly functions (FT)
        -- Inline table-valued SQL functions (IF)
        -- Internal tables (IT)
        -- Table-valued SQL functions (TF)
        -- User tables     (U)
        -- Views           (V)
        SELECT database_id
              ,object_id
              ,column_CNT = COUNT(1)
          FROM [##SQLXL_Index_sys_columns]
         GROUP BY
               database_id
              ,object_id
       ) AS tc
    ON tgt.database_id  = tc.database_id
   AND (   (    tgt.type  = N'F'                    -- foreign key constraint
            AND tgt.parent_object_id = tc.object_id
           )
        OR (    tgt.type <> N'F'                    -- foreign key constraint
            AND tgt.object_id        = tc.object_id
           )
       )

  LEFT OUTER
  JOIN (-- Summarize DML triggers
        SELECT database_id
              ,parent_object_id
              ,CLR_trigger_CNT           = SUM(IIF(type = N'TA',1,0)) -- Assembly (CLR) DML trigger
              ,SQL_trigger_CNT           = SUM(IIF(type = N'TR',1,0)) -- SQL DML trigger
              ,is_instead_of_trigger_CNT = SUM(IIF(is_instead_of_trigger = 1,1,0))
          FROM [##SQLXL_Index_sys_objects]
         WHERE parent_class  = 1 -- Object or column for the DML triggers
           AND is_ms_shipped = 0 -- Trigger NOT created on behalf of the user by an internal SQL Server component
         GROUP BY
               database_id
              ,parent_object_id
       ) AS tr
    ON tgt.database_id = tr.database_id
   AND tgt.object_id   = tr.parent_object_id

 OUTER
 APPLY (-- Standardized object type labels
        SELECT obj_type_hdr = CASE tgt.obj_type
                                   WHEN N'F'  -- foreign key constraint
                                   THEN CASE WHEN ccs.is_clustered_columnstore = 1 THEN N'CCS'
                                              WHEN tbl.temporal_type           = 1 THEN N'HST'
                                              WHEN tbl.ledger_type             = 1 THEN N'HST'
                                              WHEN tbl.cdc_is_history_table    = 1 THEN N'HST'
                                              ELSE                                      N'TBL'
                                         END
                                   WHEN N'IT'  -- system internal table
                                   THEN N'IT'
                                   WHEN N'TF'  -- SQL table-valued-function SQL 2012+
                                   THEN N'TVF'
                                   WHEN N'U'   -- User Table
                                   THEN CASE WHEN ccs.is_clustered_columnstore = 1 THEN N'CCS'
                                             WHEN tbl.temporal_type            = 1 THEN N'HST'
                                             WHEN tbl.ledger_type              = 1 THEN N'HST'
                                             WHEN tbl.cdc_is_history_table     = 1 THEN N'HST'
                                             ELSE                                       N'TBL'
                                        END
                                   WHEN N'V'  -- View
                                   THEN IIF(tgt.is_ms_shipped = 1,N'I',N'') + N'VW'
                                   ELSE            tgt.obj_type
                              END
                            + IIF(tbl.is_memory_optimized                        = 1,N' XTP',N'')
                            + CASE WHEN tgt.obj_type IN (N'F'  -- foreign key constraint
                                                        ,N'IT' -- system internal table
                                                        ,N'U'  -- User Table
                                                        )
                                   THEN  IIF(tbl.cdc_is_history_table            = 1,N' CDC'    ,N'')
                                       + IIF(tbl.ctt_is_track_columns_updated_on = 1,N' CTT'    ,N'')
                                       + IIF(tbl.is_external                     = 1,N' EXT'    ,N'')
                                       + IIF(tbl.is_filetable                    = 1,N' FIL'    ,N'')
                                       + IIF(tbl.is_node                         = 1,N' GPH NOD',N'')
                                       + IIF(tbl.is_edge                         = 1,N' GPH EDG',N'')
                                       + IIF(tbl.is_dropped_ledger_table         = 1,N' LDG DRP',N'') -- is_dropped_ledger_table
                                       + IIF(tbl.ledger_type                     = 1,N' LDG HST',N'') -- HISTORY_TABLE
                                       + IIF(tbl.ledger_type                     = 2,N' LDG UPD',N'') -- UPDATABLE_LEDGER_TABLE
                                       + IIF(tbl.ledger_type                     = 3,N' LDG APP',N'') -- APPEND_ONLY_LEDGER_TABLE
                                       + IIF(tbl.is_merge_published              = 1,N' MRG'    ,N'')
                                       + IIF(tbl.is_remote_data_archive_enabled  = 1,N' RDA'    ,N'')
                                       + IIF(    tbl.is_replicated               = 1
                                             AND tbl.is_tracked_by_cdc           = 0,N' REP'    ,N'')
                                       + IIF(tbl.is_sync_tran_subscribed         = 1,N' SYN'    ,N'')
                                       + IIF(tbl.temporal_type                   = 1,N' SVN'    ,N'') -- SYSTEM_VERSIONED_TEMPORAL_TABLE
                                       + IIF(tbl.temporal_type                   = 2,N' SVN'    ,N'') -- SYSTEM_VERSIONED_TEMPORAL_TABLE
                                       ------------------------------------------------------------
                                       + IIF(tgt.obj_type                        = N'F',N' FKC' ,N'') -- foreign key constraint
                                       ------------------------------------------------------------
                                   ELSE N''
                              END

/* <FUTURE> internal type detail labels. removed for simplicity. May be useful later
                            + CASE tgt.internal_type
                                   WHEN   3 THEN N' QDS HNT' -- QUERY_DISK_STORE_QUERY_HINTS
                                   WHEN   4 THEN N' QDS PRM' -- QUERY_DISK_STORE_QUERY_TEMPLATE_PARAMETERIZATION
                                   WHEN   6 THEN N' QDS WTS' -- QUERY_DISK_STORE_WAIT_STATS
                                   WHEN   8 THEN N' QDS QVT' -- PLAN_PERSIST_QUERY_VARIANT_TABLE
                                   WHEN   9 THEN N' QDS REP' -- QUERY_DISK_STORE_REPLICAS
                                   WHEN  10 THEN N' QDS PFL' -- QUERY_DISK_STORE_PLAN_FORCING_LOCATIONS
                                   WHEN  11 THEN N' QDS RTS' -- QUERY_DISK_STORE_RUNTIME_STATS_V2
                                   WHEN  12 THEN N' QDS WT2' -- QUERY_DISK_STORE_WAIT_STATS_V2
                                   -----------------------------------------------------------------
                                   WHEN 201 THEN N' QUE QMS' -- QUEUE_MESSAGES
                                   WHEN 202 THEN N' XML IXN' -- XML_INDEX_NODES
                                   WHEN 203 THEN N' FTX CFL' -- FULLTEXT_CATALOG_FREELIST
                                   WHEN 204 THEN N' FTX MAP' -- FULLTEXT_CATALOG_MAP (BOL)/FULLTEXT_INDEX_MAP (REALITY)
                                   WHEN 205 THEN N' QRY NOT' -- QUERY_NOTIFICATION
                                   WHEN 206 THEN N' SVC BMP' -- SERVICE_BROKER_MAP
                                   WHEN 207 THEN N' EXT IND' -- EXTENDED_INDEXES (such as a spatial index)
                                   WHEN 208 THEN N' FST TMB' -- FILESTREAM_TOMBSTONE
                                   WHEN 209 THEN N' CHG TRK' -- CHANGE_TRACKING
                                   WHEN 210 THEN N' TRK TXN' -- TRACKED_COMMITTED_TRANSACTIONS
                                   WHEN 211 THEN N' FTX AVD' -- FULLTEXT_AVDL
                                   WHEN 212 THEN N' FTX CFR' -- FULLTEXT_COMP_FRAGMENT
                                   WHEN 213 THEN N' FTX DST' -- FULLTEXT_DOCID_STATUS
                                   WHEN 214 THEN N' FTX IDI' -- FULLTEXT_INDEXED_DOCID
                                   WHEN 215 THEN N' FTX DFL' -- FULLTEXT_DOCID_FILTER
                                   WHEN 216 THEN N' FTX DMP' -- FULLTEXT_DOCID_MAP
                                   WHEN 217 THEN N' FTX TMT' -- FULLTEXT_THESAURUS_METADATA_TABLE
                                   WHEN 218 THEN N' FTX TST' -- FULLTEXT_THESAURUS_STATE_TABLE
                                   WHEN 219 THEN N' FTX TPT' -- FULLTEXT_THESAURUS_PHRASE_TABLE
                                   WHEN 220 THEN N' CON FTR' -- CONTAINED_FEATURES
                                   WHEN 221 THEN N' SMP DOC' -- SEMPLAT_DOCUMENT_INDEX_TABLE
                                   WHEN 222 THEN N' SMP TIT' -- SEMPLAT_TAG_INDEX_TABLE
                                   WHEN 223 THEN N' SMP MMT' -- SEMPLAT_MODEL_MAPPING_TABLE
                                   WHEN 224 THEN N' SMP LMT' -- SEMPLAT_LANGUAGE_MODEL_TABLE
                                   WHEN 225 THEN N' FTB UPF' -- FILETABLE_UPDATES
                                   -----------------------------------------------------------------
                                   WHEN 236 THEN N' XML SND' -- SELECTIVE_XML_INDEX_NODE_TABLE
                                   WHEN 237 THEN N' IT* 237' -- UNKNOWN INTERNAL TABLE TYPE 237
                                   WHEN 238 THEN N' IT* 238' -- UNKNOWN INTERNAL TABLE TYPE 238
                                   WHEN 239 THEN N' IT* 239' -- UNKNOWN INTERNAL TABLE TYPE 239
                                   -----------------------------------------------------------------
                                   WHEN 240 THEN N' QDS TXT' -- QUERY_DISK_STORE_QUERY_TEXT
                                   WHEN 241 THEN N' QDS QDQ' -- QUERY_DISK_STORE_QUERY
                                   WHEN 242 THEN N' QDS PLN' -- QUERY_DISK_STORE_PLAN
                                   WHEN 243 THEN N' QDS RST' -- QUERY_DISK_STORE_RUNTIME_STATS
                                   WHEN 244 THEN N' QDS RSI' -- QUERY_DISK_STORE_RUNTIME_STATS_INTERVAL
                                   WHEN 245 THEN N' QRY CNS' -- QUERY_CONTEXT_SETTINGS
                                   WHEN 246 THEN N' IT* 246' -- UNKNOWN INTERNAL TABLE TYPE 246
                                   WHEN 247 THEN N' IT* 247' -- UNKNOWN INTERNAL TABLE TYPE 247
                                   WHEN 248 THEN N' IT* 248' -- UNKNOWN INTERNAL TABLE TYPE 248
                                   WHEN 249 THEN N' IT* 249' -- UNKNOWN INTERNAL TABLE TYPE 249
                                   WHEN 250 THEN N' QDS PFB' -- QUERY_DISK_STORE_PLAN_FEEDBACK
                                   WHEN 251 THEN N' IT* 251' -- UNKNOWN INTERNAL TABLE TYPE 251
                                   WHEN 252 THEN N' HST SVN' -- INTERNAL_TEMPORAL_HISTORY_TABLE
                                   ELSE IIF(tgt.internal_type > 0
                                           ,COALESCE(N' IT* ' + RIGHT(N'00' + CAST(tgt.internal_type AS NVARCHAR(3)),3)
                                                    ,N' MSG ITT')
                                           ,N'')
                              END
*/
              ,obj_type_dtl = CASE WHEN tgt.rec_type = N'I'                               -- index level composite record
                                    AND tgt.type     = N'V'                               -- View
                                   THEN N'UIV' -- unindexed view
                                   WHEN tgt.tbl_is_heap = 1 AND tbl.is_memory_optimized = 0
                                   THEN N'HP'
                                   ELSE CASE tgt.type
                                             WHEN N'0'  THEN N'HP'                        -- rowstore heap
                                             WHEN N'1'  THEN N'CX'                        -- clustered rowstore index
                                             WHEN N'2'  THEN N'NCX'                       -- nonclustered rowstore index
                                             WHEN N'3'  THEN N'XML'                       -- XML index
                                                            + CASE tgt.sub_type           -- XML index
                                                                   WHEN 0 THEN N' PRI'    -- 0 = Primary XML index
                                                                   WHEN 1 THEN N' SEC'    -- 1 = Secondary XML index
                                                                   WHEN 2 THEN N' SEL'    -- 2 = Selective XML index
                                                                   WHEN 3 THEN N' SSEL'   -- 3 = Secondary selective XML index
                                                                   ELSE  N' <'
                                                                       + IIF(tgt.sub_type IS NULL
                                                                            ,N'subtype?'
                                                                            ,[dbo].[SQLXL_3SD](tgt.sub_type,N'I'))
                                                                       + N'>'
                                                              END
                                             WHEN N'4'  THEN  N'SPT'                     -- Spatial index
                                                            + CASE tgt.sub_type          -- spatial subtypes
                                                                   WHEN 1 THEN N' GEM'   -- 1 = Geometry
                                                                   WHEN 2 THEN N' GEG'   -- 2 = Geographic
                                                                   WHEN 4 THEN N' GEG'   -- 4 = Geographic
                                                                   ELSE  N' <'
                                                                       + IIF(tgt.sub_type IS NULL
                                                                            ,N'subtype?'
                                                                            ,[dbo].[SQLXL_3SD](tgt.sub_type,N'I'))
                                                                       + N'>'
                                                              END
                                             WHEN N'5'  THEN N'CCS' -- Clustered columnstore
                                             WHEN N'6'  THEN N'NCS' -- nonclustered columnstore index
                                             WHEN N'7'  THEN N'NHX' -- Hash index on In-Memory Clustered Columnstore
                                             WHEN N'90' THEN N'FTX' -- full-text index of a tabular object. See Insert FULL TEXT below
                                             WHEN N'M'  THEN N'MIX' -- missing nonclustered rowstore index
                                             ELSE N''
                                        END
                              END
       ) otl
OPTION (MAXDOP 1,RECOMPILE,FORCE ORDER,MAX_GRANT_PERCENT = 0);
       -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update "Parent"-level fields across records'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Flag index columns that are filtered using [sys].[sql_expression_dependencies]',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [SQLXL_Index_sys_index_columns] - Flag index columns that are filtered using [sys].[sql_expression_dependencies]
/******************************************************************************************************************************************/
UPDATE tgt
   SET is_index_column_filtered = 1
/*** LOCAL TESTING
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.column_id,ed.*
--*/
  FROM [##SQLXL_Index_sys_index_columns]               AS tgt
  JOIN [##SQLXL_Index_sys_sql_expression_dependencies] AS ed
    ON ed.database_id          = tgt.database_id
   AND ed.referencing_id       = tgt.object_id
   AND ed.referencing_minor_id = tgt.index_id
   AND ed.referenced_minor_id  = tgt.column_id
 WHERE ed.referencing_class    = 7
   AND ed.referenced_class     = 1
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Flag index columns that are filtered using [sys].[sql_expression_dependencies]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Create table of all used and referenced columns',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Create - [SQLXL_Index_column] - table of all used and referenced columns from [sys].[columns]
\******************************************************************************************************************************************/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_column];
END TRY
BEGIN CATCH
END CATCH

SELECT qry.*
  INTO [##SQLXL_Index_column]
/*** LOCAL TESTING ***
SELECT qry.*
--*/
  FROM (-- all columns
SELECT database_id       = sc.database_id
      ,object_id         = sc.object_id
      ,column_id         = sc.column_id
      ,obj_name          = o.name
      ,name              = sc.name
      ,stats_target_name = QUOTENAME(sc.name,1)
      --------------------------------------------------------------------------------------------------------------------------------------
      ,All_Density       = col_stats.All_Density
      ,Average_Length    = IIF(sc.user_type_name = N'decimal'
                              ,sc.max_length
                              ,col_stats.Average_Length)
      ,Uniqueness        = COALESCE(1.0 * col_stats.Rows * col_stats.All_Density -- if computed separately for this column
                                   ,iles.uniqueness                              -- from index lead element
                                   ,IIF(sc.is_identity = 1                    ,1.0,NULL)
                                   ,IIF(sc.seq_object_id IS NOT NULL          ,1.0,NULL)
                                   ,IIF(dc.definition = N'(newsequentialid())',1.0,NULL)
                                   ,IIF(dc.definition = N'(newid())'          ,1.0,NULL)
                                   ,NULL
                                   )
      ,histogram_steps   = COALESCE(col_stats.steps,iles.steps)
      ,param_sniff       = COALESCE(col_stats.param_sniff,iles.param_sniff)
      --------------------------------------------------------------------------------------------------------------------------------------
      ,stats_name                 = col_stats_prop.name
      ,stats_no_recompute         = col_stats_prop.no_recompute
      ,stats_filter_definition    = col_stats_prop.filter_definition
      ,stats_is_incremental       = col_stats_prop.is_incremental
      ,stats_has_persisted_sample = col_stats_prop.has_persisted_sample
      ,stats_auto_drop            = col_stats_prop.auto_drop
      --------------------------------------------------------------------------------------------------------------------------------------
      ,max_length             = sc.max_length
      ,max_length_unicode     = sc.max_length_unicode
      ,Precision              = sc.Precision
      ,Scale                  = sc.Scale
      ,user_type_id           = sc.user_type_id
      ,data_type              = typ.name
      ,is_nullable            = COALESCE(sc.is_nullable,0)
      ,Seed_Value             = sc.Seed_Value
      ,Increment_Value        = sc.Increment_Value
      ,Last_Value             = sc.Last_Value
      ,is_not_for_replication = COALESCE(sc.is_not_for_replication,0)
      ,is_persisted           = COALESCE(sc.is_persisted,0)
      ,is_identity            = COALESCE(sc.is_identity,0)
      ,is_sequence            = CAST(IIF(sc.seq_object_id > 0                  ,1,0) AS BIT)
      ,is_newsequentialid     = CAST(IIF(dc.definition = N'(newsequentialid())',1,0) AS BIT)
      ,is_newid               = CAST(IIF(dc.definition = N'(newid())'          ,1,0) AS BIT)
      ,is_sparse              = COALESCE(sc.is_sparse,0)
      --------------------------------------------------------------------------------------------------------------------------------------
      ,Indexed_Columns        = kc.idx
      ,indexed_sort           = kc.idx_sort
      ,default_object_id      = sc.default_object_id
      --------------------------------------------------------------------------------------------------------------------------------------
      -- Long Descriptors
      --------------------------------------------------------------------------------------------------------------------------------------
      ,computed_column_definition = IIF(sc.uses_sql_proc = 1,N'*PROC* ',N'')
                                  + IIF(sc.uses_sql_ftn  = 1,N'*FTN* ' ,N'')
                                  + IIF(sc.uses_sql_mthd = 1,N'*MTHD* ',N'')
                                  + sc.definition
                                  + IIF(sc.is_persisted = 1,N'',NCHAR(167) + N'NOT PERSISTED')
                                  + IIF(sc.uses_database_collation = 1,N'',NCHAR(167) + N'NOT DB COLLATED')
      -------------------------------------------
      ,cc_uses_database_collation = COALESCE(sc.uses_database_collation,0)
      ,is_columnstore_eligible    = CASE WHEN (   sc.system_type_id IN (  34 -- image
                                                                        , 35 -- text
                                                                        , 98 -- sqlvariant
                                                                        , 99 -- ntext
                                                                        ,189 -- timestamp/rowversion
                                                                        ,240 -- geography,geometry,hierarchyid
                                                                        ,241 -- XML index
                                                                       )
                                              )
                                           OR (   sc.system_type_id IN (231 -- nvarchar
                                                                       ,167 -- varchar
                                                                       ,165 -- varbinary
                                                                       )
                                               AND sc.max_length      = -1  -- MAX length
                                              )
                                           OR (    sc.is_sparse       =  1
                                               OR  sc.is_filestream   =  1
                                               OR  sc.is_computed     =  1
                                              )
                                         THEN 0
                                         ELSE 1
                                    END
      --------------------------------------------------------------------------------------------------------------------------------------
      -- Column name and attributes for display
      --------------------------------------------------------------------------------------------------------------------------------------
      ,[Column Descriptors] = QUOTENAME(COALESCE(sc.name,'###c.name NOT FOUND###')) + N' '
      --------------------------------------------------------------------------------------------------------------------------------------
      + CASE typ.name
             WHEN NULL                THEN N''
             -------------------------------------
             WHEN N'tinyint'          THEN N'ti'
             WHEN N'smallint'         THEN N'si'
             WHEN N'int'              THEN N'i'
             WHEN N'bigint'           THEN N'bi'
             -------------------------------------
             WHEN N'char'             THEN N'c'
             WHEN N'nchar'            THEN N'nc'
             WHEN N'varchar'          THEN N'vc'
             WHEN N'nvarchar'         THEN N'nv'
             WHEN N'text'             THEN N'tx'
             WHEN N'ntext'            THEN N'nt'
             -------------------------------------
             WHEN N'date'             THEN N'd'
             WHEN N'smalldatetime'    THEN N'sdt'
             WHEN N'datetime'         THEN N'dt'
             WHEN N'datetime2'        THEN N'dtt'
             WHEN N'datetimeoffset'   THEN N'dto'
             -------------------------------------
             WHEN N'time'             THEN N'tm'
             WHEN N'timestamp'        THEN N'ts'
             -------------------------------------
             WHEN N'money'            THEN N'm'
             WHEN N'smallmoney'       THEN N'sm'
             -------------------------------------
             WHEN N'geography'        THEN N'gg'
             WHEN N'geometry'         THEN N'gm'
             WHEN N'hierarchyid'      THEN N'h'
             -------------------------------------
             WHEN N'decimal'          THEN N'de'
             WHEN N'binary'           THEN N'bn'
             WHEN N'float'            THEN N'f'
             WHEN N'numeric'          THEN N'num'
             WHEN N'real'             THEN N'r'
             -------------------------------------
             WHEN N'image'            THEN N'im'
             WHEN N'sql_variant'      THEN N'v'
             WHEN N'SYSNAME'          THEN N's'
             WHEN N'uniqueidentifier' THEN N'uid'
             WHEN N'varbinary'        THEN N'vb'
             WHEN N'xml'              THEN N'xml'
             ELSE COALESCE(typ.name,'###typ.name NOT FOUND###')
        END  -- CASE typ.name
      + CASE WHEN typ.name = N'BIT' THEN N''
             ELSE IIF(sc.max_length = -1
                     ,N'MAX'
                     ,COALESCE(CAST(COALESCE(sc.max_length_unicode,sc.max_length) AS NVARCHAR(MAX)),N'<??>'))
        END
      --------------------------------------------------------------------------------------------------------------------------------------
      + IIF(chk.con IS NOT NULL
           ,chk.con + CASE WHEN dc.definition = N'(newsequentialid())' THEN N'(SUID)'
                           WHEN dc.definition = N'(newid())'           THEN N'(NUID)'
                           WHEN LEN(dc.definition) <= 21               THEN dc.definition
                           ELSE N''
                      END -- only get definition for DEFAULT constraints
           ,N'')
      + IIF(sc.is_identity   = 1        ,N' IDN(' + CAST(COALESCE(sc.increment_value,1) AS NVARCHAR(20)) + N')',N'')
      + IIF(sc.seq_object_id IS NOT NULL,N' SEQ(' + CAST(COALESCE(sc.seq_increment  ,1) AS NVARCHAR(20)) + N')',N'')
      + IIF(sc.is_nullable   = 1        ,N' NULL',N'')
      --------------------------------------------------------------------------------------------------------------------------------------
      + IIF(sc.is_computed   = 1        ,N' CCOL:' + IIF(sc.is_persisted = 1,N'Prst',N'*NOTPrst*'),N'')
      --------------------------------------------------------------------------------------------------------------------------------------
      -- Density & incremental uniqueness
      + CASE WHEN 1.0 * col_stats.Rows * col_stats.All_Density > 0.0
             THEN N' (' + [dbo].[SQLXL_3SD](1.0 * col_stats.Rows * col_stats.All_Density,N'N') + N')'
             WHEN iles.uniqueness    > 0.0      THEN N' (' + [dbo].[SQLXL_3SD](iles.uniqueness,N'N') + N')'
             WHEN sc.is_identity     = 1        THEN N''               -- identity column alreadu flagged above
             WHEN sc.seq_object_id  IS NOT NULL THEN N''               -- sequence column alreadu flagged above
             WHEN dc.definition      = N'(newsequentialid())' THEN N'' -- newsequentialid column alreadu flagged above
             WHEN o.type             = N'TF'    THEN N''               -- SQL table-valued-function SQL 2012+
             WHEN o.type             = N'V'     THEN N''               -- view
             ELSE N''
        END

      --------------------------------------------------------------------------------------------------------------------------------------
       -- Per BOL "ANSI_PADDING should always be set to ON. SET ANSI_PADDING setting does not affect the nchar, nvarchar, ntext, text
       --         ,image, varbinary(max), varchar(max), and nvarchar(max) data types.
       --         They always display the SET ANSI_PADDING ON behavior. This means trailing spaces and zeros are not trimmed."
      + IIF(sc.is_ansi_padded = 0 AND typ.name IN ('CHAR',N'NCHAR',N'BINARY',N'VARBINARY'),N' ' + N'PADOFF',N'')
      --------------------------------------------------------------------------------------------------------------------------------------
      + IIF(o.is_replicated          = 1 AND sc.is_replicated      = 0,N' ' + N'NOTREPL',N'')
      + IIF(o.is_merge_published     = 1 AND sc.is_merge_published = 0,N' ' + N'NOTMRG' ,N'')
      + IIF(sc.xml_collection_id     > 0,N' ' + N'XMLCID ' + QUOTENAME(sc.xml_collection_id   ),N'')
      + IIF(sc.rule_object_id        > 0,N' ' + N'RULEID ' + QUOTENAME(sc.rule_object_id      ),N'')
      + IIF(sc.encryption_type       > 0,N' ' + N'ENCTYPE' + QUOTENAME(sc.encryption_type_desc),N'')
      + IIF(sc.is_rowguidcol         = 1,N' ' + N'ROWUID'   ,N'')
      + IIF(sc.is_filestream         = 1,N' ' + N'FLSTRM'   ,N'')
      + IIF(sc.is_non_sql_subscribed = 1,N' ' + N'NonSQLSub',N'')
      + IIF(sc.is_dts_replicated     = 1,N' ' + N'DTSREPL'  ,N'')
      + IIF(sc.is_xml_document       = 1,N' ' + N'XMLDOC'   ,N'')
      + IIF(sc.is_hidden             = 1,N' ' + N'HIDN'     ,N'')
      + IIF(sc.is_masked             = 1,N' ' + N'MSKD'     ,N'')
      + IIF(sc.is_sparse             = 1,N' ' + N'SPARSE'   ,N'')
      + IIF(sc.is_column_set         = 1,N' ' + N'COLSET'   ,N'')
       ----------------------------------------------------------------------
      + IIF(sc.generated_always_type > 0,N' ' + N'GenAlwaysType(' + sc.generated_always_type_desc+ N')',N'')
      + IIF(sc.graph_type            > 0,N' ' + N'GrphTyp ' + sc.graph_type_desc                       ,N'')
       -- Encryption --------------------------------------------------------
      + IIF(sc.column_encryption_key_id > 0,N' ' + N'ENCKEYID' + QUOTENAME(sc.column_encryption_key_id),N'')
      + IIF(sc.column_encryption_key_database_name IS NOT NULL
           ,N' ' + N'ENCKEYDB' + QUOTENAME(sc.column_encryption_key_database_name)
           ,N'')
       -- Non-Database Collation --------------------------------------------------------
      + IIF(sc.uses_database_collation = 0,N' COLL:' + sc.collation_name,N'')

      -- Empty tables
      + IIF(mt_ps.object_id IS NOT NULL AND mt_pt.object_id IS NOT NULL
           ,N' (MT)'          -- table is empty
           ,N'')

      -- Full Text ---------------------------------------------------------
      +IIF(ftic.column_id IS NOT NULL
          ,IIF(ftic.language_id           > 0,N' LCID ' + QUOTENAME(ftic.language_id),N'')
          + N' Smntcs ' + IIF(ftic.statistical_semantics = 1,N'ON',N'OFF')
          ,N'')

      -- Statistics Properties - substitute lead index key column stats if none found for column --------------------------------------
      + IIF(COALESCE(col_stats.Steps,iles.steps) IS NULL
           ,N''                                                                       -- NO STATS
           , IIF(COALESCE(col_stats.Steps,iles.steps) > 0
                ,N' STP ' + CAST(COALESCE(col_stats.Steps,iles.steps) AS NVARCHAR(20))
                ,N'')
           + IIF(COALESCE(col_stats.param_sniff,iles.param_sniff) IS NOT NULL
                ,N' SNF ' + [dbo].[SQLXL_3SD](COALESCE(col_stats.param_sniff,iles.param_sniff),N'N') + N'x'
                ,N'')
           + IIF(col_stats_prop.filter_definition IS NOT NULL,N' FLTR'  ,N'')
           + IIF(col_stats_prop.has_persisted_sample      = 1
                ,N' SMPLPRST ' + [dbo].[SQLXL_3SD](col_stats_prop.persisted_sample_percent,N'N') + N'%'
                ,N'')
           + IIF(col_stats_prop.is_incremental            = 1,N' INCR'  ,N'')
           + IIF(col_stats_prop.no_recompute              = 1,N' NORECO',N'')
           + IIF(col_stats_prop.auto_drop                 = 0,N' NODROP',N'')
           )

  FROM [##SQLXL_Index_Startup] AS sp

 --------------------------------------------------------------------------------------------------------------------------------------
 -- get all columns, since we want to get columns:
 --    not included in NonClustered Columnstores
 --    that are candidates for clustered indexes on HEAPS
 --    that are candidates for "better" clustering index keys
 --    that are foreign key referenced columns
 --    that are columns not replicated
 --    that are columns with non-default properties
 --------------------------------------------------------------------------------------------------------------------------------------
 CROSS
  JOIN
/*** LOCAL TESTING ***
SELECT COUNT(1)
  FROM
--*/
       [##SQLXL_Index_sys_columns]       AS sc

  -- Only get use/internal columns
 INNER MERGE
  JOIN [##SQLXL_Index_sys_objects]       AS o
    ON sc.database_id = o.database_id
   AND sc.object_id   = o.object_id

  LEFT OUTER MERGE
  JOIN [##SQLXL_Index_sys_types]         AS typ
    ON sc.database_id  = typ.database_id
   AND sc.user_type_id = typ.user_type_id

  LEFT OUTER MERGE
  JOIN [##SQLXL_Index_sys_index_columns] AS ftic -- info for full text columns
    ON sc.database_id = ftic.database_id
   AND sc.object_id   = ftic.object_id
   AND sc.column_id   = ftic.column_id
   AND N'90'          = ftic.type                -- full-text index of a tabular object

  ------------------------------------------------------------------------------------------------------------------------------------------
  -- how often each column is used across all indexes
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER MERGE
  JOIN (-- create display for column index usage representation
        SELECT kc.database_id
              ,kc.object_id
              ,kc.column_id
              ,idx = LTRIM( IIF(CX_Lead_CNT > 0,N' CXLead ' + CAST(CX_Lead_CNT AS NVARCHAR(20)),N'')
                          + IIF(CX_Key_CNT  > 0,N' CXKey '  + CAST(CX_Key_CNT  AS NVARCHAR(20)),N'')
                          + IIF(lead_CNT    > 0,N' Lead '   + CAST(lead_CNT    AS NVARCHAR(20)),N'')
                          + IIF(key_CNT     > 0,N' Key '    + CAST(key_CNT     AS NVARCHAR(20)),N'')
                          + IIF(include_CNT > 0,N' Inc '    + CAST(include_CNT AS NVARCHAR(20)),N'')
                          + IIF(desc_CNT    > 0,N' Dsc '    + CAST(desc_CNT    AS NVARCHAR(20)),N'')
                          + IIF(filter_CNT  > 0,N' Flt '    + CAST(filter_CNT  AS NVARCHAR(20)),N'')
                          + IIF(MIX_Key_CNT > 0,N' MXKey '  + CAST(MIX_Key_CNT AS NVARCHAR(20)),N'')
                          + IIF(MIX_Inc_CNT > 0,N' MXInc '  + CAST(MIX_Inc_CNT AS NVARCHAR(20)),N'')
                          + IIF(NCS_CNT     > 0,N' NCS '    + CAST(NCS_CNT     AS NVARCHAR(20)),N'')
                          )
              ,idx_sort = ROW_NUMBER() OVER (PARTITION BY kc.database_id
                                                         ,kc.object_id
                                                 ORDER BY CASE WHEN CX_Lead_CNT > 0 THEN 1
                                                               WHEN CX_Key_CNT  > 0 THEN 2
                                                               WHEN lead_CNT    > 0 THEN 3
                                                               WHEN Key_CNT     > 0 THEN 4
                                                               WHEN MIX_Key_CNT > 0 THEN 5
                                                               ELSE                      6
                                                          END
                                                         ,cx_lead_CNT    DESC
                                                         ,cx_key_CNT     DESC
                                                         ,include_CNT    DESC
                                                         ,MIX_Key_CNT    DESC
                                                         ,MIX_Inc_CNT    DESC
                                                         ,kc.column_id
                                                         ,kc.column_id
                                            )
          FROM (-- count each columns representation in index types
                -- '1' -- clustered rowstore index
                -- '2' -- nonclustered rowstore index
                -- '6' -- nonclustered columnstore index
                -- 'M' -- missing nonclustered rowstore index
                SELECT database_id
                      ,object_id
                      ,column_id
                      ,cnt           = COUNT(1)
                      -- Clustered rowstore indexes
                      ,CX_Lead_CNT   = SUM(IIF(type = N'1' AND key_column_sequence = 1,1,0))   -- clustered rowstore index
                      ,CX_Key_CNT    = SUM(IIF(type = N'1' AND key_column_sequence > 1,1,0))   -- clustered rowstore index
                      -- nonclustered rowstore index
                      ,lead_CNT      = SUM(IIF(type = N'2' AND is_included_column  = 0         -- nonclustered rowstore index
                                                           AND key_column_sequence = 1 ,1,0))
                      ,key_CNT       = SUM(IIF(TYPE = N'2' AND is_included_column  = 0         -- nonclustered rowstore index
                                                           AND key_column_sequence > 1 ,1,0))
                      ,include_CNT   = SUM(IIF(type = N'2' AND is_included_column  = 1,1,0))   -- nonclustered rowstore index
                      ,desc_CNT      = SUM(IIF(is_descending_key = 1,1,0))
                      ,filter_CNT    = SUM(IIF(is_index_column_filtered = 1,1,0))
                      -- missing nonclustered rowstore index
                      ,MIX_Key_CNT   = SUM(IIF(type = N'M' AND is_included_column  = 0,1,0))   -- missing nonclustered rowstore index
                      ,MIX_Inc_CNT   = SUM(IIF(type = N'M' AND is_included_column  = 1,1,0))   -- missing nonclustered rowstore index
                     -- nonclustered columnstore index
                      ,NCS_CNT       = SUM(IIF(type = N'6'                            ,1,0))   -- Nonclustered columnstore index
                  FROM [##SQLXL_Index_sys_index_columns] AS ic
                 WHERE 1 = 1
                 GROUP BY
                       database_id
                      ,object_id
                      ,column_id
               ) AS kc
       ) AS kc
    ON sc.database_id = kc.database_id
   AND sc.object_id   = kc.object_id
   AND sc.column_id   = kc.column_id

  ------------------------------------------------------------------------------------------------------------------------------------------
  -- Column Statistics
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER MERGE
  JOIN (--
        SELECT sssh.database_id
              ,sssh.object_id
              ,sssh.column_id
              ,sssh.Rows
              ,sssh.steps
              ,ssdv.All_Density
              ,ssdv.Average_Length
              ,sshs.param_sniff
          FROM [##SQLXL_Index_sys_ShowStatistics_StatHeader]        AS sssh
          LEFT OUTER MERGE
          JOIN [##SQLXL_Index_sys_ShowStatistics_DensityVector]     AS ssdv
            ON sssh.database_id = ssdv.database_id
           AND sssh.object_id   = ssdv.object_id
           AND sssh.column_id   = ssdv.column_id         -- column statistics. index computed separately
           AND 1                = ssdv.Row_ID            -- some column_IDs have more than one row. looks like broken references
          LEFT OUTER MERGE
          JOIN [##SQLXL_Index_sys_ShowStatistics_Histogram_summary] AS sshs
            ON sssh.database_id = sshs.database_id
           AND sssh.object_id   = sshs.object_id
           AND sssh.column_id   = sshs.column_id
         WHERE sssh.Filter_Expression IS NULL -- only unfiltered statistics for now <FUTURE>
      ) col_stats
    ON sc.database_id = col_stats.database_id
   AND sc.object_id   = col_stats.object_id
   AND sc.column_id   = col_stats.column_id

  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER MERGE
  JOIN (-- Column Statistics - properties
        SELECT st.database_id
              ,st.object_id
              ,sc.column_id
              ,st.name
              ,st.no_recompute
              ,st.filter_definition
              ,st.is_incremental
              ,st.has_persisted_sample
              ,st.auto_drop
              ,sp.persisted_sample_percent
              ,rn = ROW_NUMBER() OVER (PARTITION BY st.database_id
                                                   ,st.object_id
                                                   ,sc.column_id
                                           ORDER BY st.no_recompute         DESC
                                                   ,st.has_filter           DESC
                                                   ,st.has_persisted_sample DESC
                                      )
          FROM [##SQLXL_Index_sys_stats]                  AS st
         INNER MERGE
          JOIN [##SQLXL_Index_sys_stats_columns]          AS sc
            ON st.database_id = sc.database_id
           AND st.object_id   = sc.object_id
           AND st.stats_id    = sc.stats_id
          LEFT OUTER MERGE
          JOIN [##SQLXL_Index_sys_dm_db_stats_properties] AS sp
            ON sc.database_id = sp.database_id
           AND sc.object_id   = sp.object_id
           AND sc.stats_id    = sp.stats_id
         WHERE 1 = 1
           AND st.auto_created = 1
       ) col_stats_prop
    ON sc.database_id = col_stats_prop.database_id
   AND sc.object_id   = col_stats_prop.object_id
   AND sc.column_id   = col_stats_prop.column_id
   AND 1              = col_stats_prop.rn

  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER MERGE
  JOIN (-- identify objects that are empty - no rows in any partition stats
        SELECT database_id
              ,object_id
          FROM [##SQLXL_Index_sys_dm_db_partition_stats]
         GROUP BY
               database_id
              ,object_id
        HAVING SUM(row_CNT) = 0
       ) AS mt_ps
    ON sc.database_id = mt_ps.database_id
   AND sc.object_id   = mt_ps.object_id

  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER MERGE
  JOIN (-- identify objects that are empty - no rows in any partitions
        SELECT database_id
              ,object_id
          FROM [##SQLXL_Index_sys_partitions]
         GROUP BY
               database_id
              ,object_id
        HAVING SUM(rows) = 0
       ) AS mt_pt
    ON sc.database_id = mt_pt.database_id
   AND sc.object_id   = mt_pt.object_id

  ------------------------------------------------------------------------------------------------------------------------------------------
  -- Column CHECK & DEFAULT constraints
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER MERGE
  JOIN (-- list of columns with check &/or default constraints - get one record per column in case of multiple constraints
        SELECT database_id
              ,parent_object_id
              ,parent_column_id
              ,con = MAX(IIF(type = N'C',N' CHK:',N''))  -- check constraint
                   + MAX(IIF(type = N'D',N' DEF:',N'')) -- default constraint
          FROM [##SQLXL_Index_sys_objects]
         WHERE type IN (N'C' -- check constraint
                       ,N'D' -- default constraint
                       )
           AND parent_column_id > 0    -- not a table constraint
         GROUP BY
               database_id
              ,parent_object_id
              ,parent_column_id
       ) AS chk
    ON sc.database_id = chk.database_id
   AND sc.object_id   = chk.parent_object_id -- chk.object_id is the check constraint ID
   AND sc.column_id   = chk.parent_column_id

  ------------------------------------------------------------------------------------------------------------------------------------------
  -- Column DEFAULT constraint definition
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER MERGE
  JOIN [##SQLXL_Index_sys_objects] AS dc
    ON sc.database_id       = dc.database_id
   AND sc.default_object_id = dc.object_id   -- link to "D" object types

  ------------------------------------------------------------------------------------------------------------------------------------------
  -- Index lead element statistics
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER MERGE
  JOIN (-- If statistics have not been computed individually for a column try the lead element from index statistics
        -- if more than 1 found take the averages
        SELECT ssdv.database_id
              ,ssdv.object_id
              ,ssdv.columns
              ,steps            = AVG(sssh.steps)
              ,uniqueness       = AVG(1.0 * sssh.rows * ssdv.All_Density)
              ,param_sniff      = MIN(sshs.param_sniff) -- if multiples get the best case scenario
         FROM (--
                SELECT database_id
                      ,object_id
                      ,index_ID
                      ,All_Density
                      ,Columns
                  FROM [##SQLXL_Index_sys_ShowStatistics_DensityVector]
                 WHERE index_id > 0
                   AND Row_ID   = 1
               ) AS ssdv
          LEFT OUTER MERGE
          JOIN [##SQLXL_Index_sys_ShowStatistics_StatHeader] AS sssh
            ON ssdv.database_id = sssh.database_id
           AND ssdv.object_id   = sssh.object_id
           AND ssdv.index_id    = sssh.index_id
          LEFT OUTER MERGE
          JOIN [##SQLXL_Index_sys_ShowStatistics_Histogram_summary] AS sshs
            ON ssdv.database_id = sshs.database_id
           AND ssdv.object_id   = sshs.object_id
           AND ssdv.index_id    = sshs.index_id
         GROUP BY
               ssdv.database_id
              ,ssdv.object_id
              ,ssdv.columns
       ) iles -- Index lead element statistics
    ON sc.database_id = iles.database_id
   AND sc.object_id   = iles.object_id
   AND sc.name        = iles.columns
) AS qry
OPTION (MAXDOP 1,RECOMPILE,FORCE ORDER,MAX_GRANT_PERCENT = 0);
       -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Create table of all used and referenced columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

-- add index
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_column
    ON [##SQLXL_Index_column]
      (database_id
      ,object_id
      ,column_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Indexed [##SQLXL_Index_column]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Column Descriptors for Full Text indexes
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.parent_object_id,
--*/
       key_column_info = COALESCE(--
                                  STUFF(-- Strip off leading unnecessary characters
                                        (--
                                         SELECT NCHAR(167) + eix.[Column Descriptors]
                                            FROM [##SQLXL_Index_sys_index_columns] AS ftic
                                            JOIN [##SQLXL_Index_column]            AS eix
                                              ON ftic.database_id = eix.database_id
                                             AND ftic.object_id   = eix.object_id
                                             -- No object_id column in XL_IDX_column
                                             AND ftic.column_id   = eix.column_id
                                           WHERE tgt.Database_ID  = ftic.Database_ID
                                             AND tgt.object_id    = ftic.object_id
                                             AND N'90'            = ftic.type        -- full-text index of a tabular object
                                             FOR XML PATH(N''), TYPE
                                        ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                       ,1,1,N'')
                                 ,N'<Column Description not found>')
  FROM [##SQLXL_Index_Compilation] AS tgt
 WHERE tgt.type = N'90' -- full-text index of a tabular object
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update Column Descriptors for Full Text indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Columns for Objects
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/
       key_column_info = STUFF((SELECT  NCHAR(167)
                                      + COALESCE(icol.[Column Descriptors],N'')
                                  FROM [##SQLXL_Index_column] AS icol
                                 WHERE tgt.database_id = icol.database_id
                                   AND tgt.object_id   = icol.object_id
                                 ORDER BY
                                       COALESCE(icol.indexed_sort,9999)
                                      ,icol.column_id
                                   FOR XML PATH(N''), TYPE
                               ).value('(./text())[1]',N'NVARCHAR(MAX)')
                              ,1,1,N'')
      ,Indexed_Columns = STUFF((SELECT  NCHAR(167)
                                      + COALESCE(icol.indexed_columns,N'')
                                  FROM [##SQLXL_Index_column] AS icol
                                 WHERE tgt.database_id = icol.database_id
                                   AND tgt.object_id   = icol.object_id
                                   AND icol.indexed_columns IS NOT NULL
                                 ORDER BY
                                       COALESCE(icol.indexed_sort,9999)
                                      ,icol.column_id
                                   FOR XML PATH(N''), TYPE
                               ).value('(./text())[1]',N'NVARCHAR(MAX)')
                              ,1,1,N'')
       ,stathdr_Filter_Expression =  STUFF((SELECT  NCHAR(167)
                                                  + N'COL STAT: ' + QUOTENAME(ss.name)
                                                  + NCHAR(167)
                                                  + N'> FLTR: ' + ss.filter_definition
                                              FROM [##SQLXL_Index_sys_stats] AS ss
                                             WHERE tgt.database_id = ss.database_id
                                               AND tgt.object_id   = ss.object_id
                                               AND 1               = ss.user_created
                                               AND 1               = ss.has_filter
                                             ORDER BY
                                                   ss.stats_id
                                               FOR XML PATH(N''), TYPE
                                           ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                          ,1,1,N'')
  FROM [##SQLXL_Index_Compilation] AS tgt
 WHERE tgt.rec_type IN (N'H' -- historical/archive table composite record
                       ,N'P' -- parent level composite record
                       ,N'S' -- system/internal table composite record
                       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update Column Descriptors for Objects'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;
/******************************************************************************************************************************************/
-- Update - [SQLXL_Index_sys_index_columns] - index columns to identify those also included from CLUSTERED index
/******************************************************************************************************************************************/
UPDATE tgt
   SET in_clustered_index = 1
  FROM [##SQLXL_Index_sys_index_columns] AS tgt
  JOIN [##SQLXL_Index_sys_index_columns] AS ci
    ON tgt.database_id = ci.database_id
   AND tgt.object_id   = ci.object_id
   AND tgt.column_id   = ci.column_id
   AND N'1'            = ci.type                -- clustered rowstore index
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update index columns to identify those also included in CLUSTERED index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [SQLXL_Index_sys_index_columns] - Missing index column key sequence based on uniqueness
-- Sort by EQUALITY before INEQUALITY, followed by increasing uniqueness
/******************************************************************************************************************************************/
UPDATE tgt
   SET tgt.key_column_sequence = mic.rn
  FROM [##SQLXL_Index_sys_index_columns] AS tgt
  JOIN (-- get key column "order" for missing indexes tied to increasing uniqueness
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,ic.column_id
              ,rn = ROW_NUMBER() OVER (PARTITION BY ic.database_id
                                                   ,ic.object_id
                                                   ,ic.index_id
                                                   ,ic.type
                                           ORDER BY CASE ic.column_usage
                                                         WHEN N'EQUALITY'   THEN 1
                                                         WHEN N'INEQUALITY' THEN 2
                                                         WHEN N'INCLUDE'    THEN 3
                                                         ELSE 4
                                                    END
                                                   ,c.Uniqueness    -- most unique-est
                                                   ,IIF(c.max_length = -1,2147483647,c.max_length)  -- shortest
                                                   ,c.Precision     -- bits before tinyints
                                                   ,c.is_nullable   -- NULLable last
                                      )
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_column]            AS c
            ON ic.database_id   = c.database_id
           AND ic.object_id     = c.object_id
           AND ic.column_id     = c.column_id
         WHERE ic.type          = N'M'          -- missing nonclustered rowstore index
           AND ic.column_usage <> N'INCLUDE'
      ) mic
    ON tgt.database_id = mic.database_id
   AND tgt.object_id   = mic.object_id
   AND tgt.index_id    = mic.index_id
   AND tgt.type        = mic.type
   AND tgt.column_id   = mic.column_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update Missing index key sequence based on column uniqueness'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Build table of column uniqueness & display values',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Create - [SQLXL_Index_uniqueness] - Build table of index column uniqueness & display values
/******************************************************************************************************************************************/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_uniqueness];
END TRY
BEGIN CATCH
END CATCH

SELECT icol.database_id
      ,object_id          = IIF(icol.type = N'F' -- foreign key constraint
                               ,icol.index_id
                               ,icol.object_id)
      ,icol.index_id
      ,icol.type
      ,icol.key_column_sequence
      ,icol.is_included_column
      ,icol.rn
      ,icol.srt
      ,icol.column_id
      ,icol.uniqueness_flag
      ,icol.col_prefix
      ,icol.[Column Descriptors]
      ,icol.col_suffix
      ,uniqueness         = COALESCE(1.0 * icol.index_row_CNT * ssdv.All_Density,icol.col_uniqueness)
      ,idx_uniqueness_3sd = [dbo].[SQLXL_3SD](COALESCE(1.0 * icol.index_row_CNT * ssdv.All_Density,icol.col_uniqueness),N'N')
      ,col_uniqueness     = CAST(icol.col_uniqueness AS FLOAT)
      ,stat_uniqueness    = 1.0 * icol.index_row_CNT * ssdv.All_Density
      ,icol.index_row_CNT
      ,ssdv.All_Density
  INTO [##SQLXL_Index_uniqueness]
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT icol.database_id
      ,icol.object_id
      ,icol.index_id
      ,icol.type
      ,icol.key_column_sequence
      ,icol.is_included_column
      ,icol.rn
      ,icol.srt
      ,icol.column_id
      ,icol.col_prefix
      ,icol.[Column Descriptors]
      ,icol.col_suffix
      ,uniqueness         = COALESCE(1.0 * icol.index_row_CNT * ssdv.All_Density,icol.col_uniqueness)
      ,idx_uniqueness_3sd = [dbo].[SQLXL_3SD](COALESCE(1.0 * icol.index_row_CNT * ssdv.All_Density,icol.col_uniqueness),N'N')
      ,col_uniqueness     = CAST(icol.col_uniqueness AS FLOAT)
      ,stat_uniqueness    = 1.0 * icol.index_row_CNT * ssdv.All_Density
      ,icol.index_row_CNT
      ,ssdv.All_Density
--*/
  FROM (--
        SELECT icol.database_id
              ,icol.object_id
              ,icol.index_id
              ,icol.type
              ,key_column_sequence = COALESCE(ic.key_column_sequence,fkc.constraint_column_id)
              ,icol.is_included_column
              ,icol.srt
              ,icol.column_id
              ,rn = ROW_NUMBER()
                    OVER (PARTITION BY icol.database_id
                                      ,icol.object_id
                                      ,icol.index_id
                                      ,icol.type
                                      ,icol.is_included_column
                              ORDER BY icol.srt           -- Index KEY columns first, then elements from clustered index
                                                          -- not in Missing index or Foreign Key
                                      ------------------------------------------------------------------------------------------------------
                                      ,CASE WHEN icol.srt = 1
                                            THEN CASE WHEN icol.type = N'M'            -- missing nonclustered rowstore index
                                                        OR icol.is_included_column = 1
                                                           -- missing index EQUALITY first.
                                                           -- Note: inequality predicate column and columns to the left of it can be used
                                                           -- for index seeks. Columns to the right of the inequality are not seek eligible
                                                      THEN CASE ic.column_usage
                                                                WHEN N'EQUALITY'   THEN 1
                                                                WHEN N'INEQUALITY' THEN 2
                                                                ELSE 3
                                                           END
                                                      ELSE ic.key_column_sequence
                                                 END
                                            ELSE 0
                                       END
                                      ------------------------------------------------------------------------------------------------------
                                      ,CASE WHEN icol.srt = 1
                                            THEN CASE WHEN icol.type = N'M'       -- missing nonclustered rowstore index
                                                   OR icol.is_included_column = 1
                                                      THEN c.[Uniqueness]         -- default behavior - SQL Server sorts missing columns
                                                                                  -- by ordinal position in the table itself.
                                                                                  -- Instead start with column_usage (equality, inequality)
                                                                                  -- then greatest uniqueness
                                                      ELSE 0
                                                 END
                                            WHEN icol.srt = 2
                                            THEN cix.key_column_sequence
                                            ELSE 0
                                       END
                         )
              -------------------------------------
              ,uniqueness_flag = CASE WHEN icol.srt = 0      -- foreign key constraint columns
                                      THEN N'>'
                                      WHEN icol.srt = 1      -- index columns
                                       AND icol.type <> N'M' -- missing nonclustered rowstore index
                                      THEN N'>'
                                      WHEN icol.srt = 2      -- elements of the clustered rowstore index -or- already included
                                      THEN N'&'
                                      WHEN icol.srt = 3      -- UNIQUEIFIER for rowstore HEAP table
                                      THEN N'#'
                                      WHEN icol.srt = 4      -- ROW LOCATOR for clustered table
                                      THEN N'#'
                                      ELSE N''
                                 END
              -------------------------------------
              ,col_prefix = CASE WHEN icol.type = N'2' -- nonclustered rowstore index
                                  AND icol.srt  = 2
                                 THEN  -- CLUSTERED index elements added to index for unique reference to table
                                       N'CX('
                                     + CAST(cix.key_column_sequence AS NVARCHAR(20))
                                     + N')>'
                                 ELSE N''
                            END
              ,[Column Descriptors] = CASE icol.srt
                                           WHEN 3 THEN N'UNIQUIFIER i4 (1.00)'
                                           WHEN 4 THEN N'ROW LOCATOR i4 (1.00)'
                                           ELSE c.[Column Descriptors]
                                      END
                                     +IIF(ic.is_index_column_filtered = 1,N' FLT',N'')
              ,col_suffix = IIF(ic.partition_ordinal  = 1,N' PART',N'')
                           +IIF(ic.is_descending_key  = 1,N' DESC',N'')
                           +IIF(ic.column_usage       = N'INEQUALITY',N' {' + NCHAR(60) + NCHAR(62) + N'}',N'')
                           +IIF(    icol.srt = 1
                                AND icol.type IN (N'2'  -- nonclustered rowstore index
                                                 ,N'M'  -- missing nonclustered rowstore index
                                                 )
                                AND (ic.in_clustered_index > 0 OR cix.column_id > 0)
                               ,N' =CX(' + CAST(cix.key_column_sequence AS NVARCHAR(20)) + N')' -- Index elements that are keys in
                                                                                                -- the CLUSTERED index
                               ,N'')
                           +IIF(    icol.srt = 2
                                AND icol.type = N'M'                                            -- missing nonclustered rowstore index
                               ,N' <CX(' + CAST(cix.key_column_sequence AS NVARCHAR(20)) + N')' -- CLUSTERED index keys added to index
                                                                                                -- for unique reference to table)
                               ,N'')
              ,col_uniqueness = IIF(-- Candidates for Clustered indexes
                                       1             = c.is_identity
                                    OR 1             = c.is_sequence
                                    OR dc.definition = N'(newsequentialid())'
                                    OR dc.definition = N'(newid())'
                                    OR icol.srt     IN (3,4)
                                   ,1.00
                                   ,c.uniqueness
                                   )
              ,index_row_CNT = sssh.Rows
          FROM (-- Get all candidate columns from across collected data
                ----------------------------------------------------------------------------------------------------------------------------
                -- Index columns - includes all [sys].[index_columns], [sys].[function_order_columns], [sys].[dm_db_missing_index_columns]
                --                             ,[sys].[fulltext_index_columns]
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT database_id
                      ,object_id
                      ,index_id
                      ,type
                      ,is_included_column
                      ,srt                = 1
                      ,column_id
                  FROM [##SQLXL_Index_sys_index_columns]
                ----------------------------------------------------------------------------------------------------------------------------
                UNION ALL -- Foreign Key Constraint columns
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT database_id
                      ,object_id          = parent_object_id
                      ,index_id           = constraint_object_id
                      ,type               = N'F'                -- foreign key constraint
                      ,is_included_column = 0
                      ,srt                = 0
                      ,column_id          = parent_column_id
                  FROM [##SQLXL_Index_sys_foreign_key_columns]
                ----------------------------------------------------------------------------------------------------------------------------
                UNION ALL -- elements of the CLUSTERED index to add to the KEY display that are not in the current index, missing index
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT i.database_id
                      ,i.object_id
                      ,i.index_id
                      ,i.type
                      ,is_included_column = CAST(0 AS BIT)
                      ,srt                = 2
                      ,cli.column_id
                  FROM (--
                        SELECT database_id
                              ,object_id
                              ,index_id
                              ,type
                          FROM [##SQLXL_Index_Compilation]
                         WHERE rec_type  = N'I'             -- index level composite record
                           AND type NOT IN (N'F'            -- foreign key constraint
                                           ,N'1'            -- clustered rowstore index
                                           )
                       ) AS i
                  JOIN [##SQLXL_Index_sys_index_columns] AS cli
                    ON i.database_id = cli.database_id
                   AND i.object_id   = cli.object_id
                   AND N'1'          = cli.type             -- clustered rowstore index
                   AND 0             = cli.is_included_column
                ----------------------------------------------------------------------------------------------------------------------------
                EXCEPT -- KEY elements of the current index if they are also already in the Clustered index
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT database_id
                      ,object_id
                      ,index_id
                      ,type
                      ,is_included_column = CAST(0 AS BIT)
                      ,srt                = 2
                      ,column_id
                  FROM [##SQLXL_Index_sys_index_columns]
                 WHERE is_included_column = 0
                ----------------------------------------------------------------------------------------------------------------------------
                UNION ALL -- Add [UNIQUIFIER]  if table is rowstore and a HEAP or non-Unique CLUSTERED
                          -- Add [ROW LOCATOR] if table is columnstore
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT i.database_id
                      ,i.object_id
                      ,i.index_id
                      ,i.type
                      ,is_included_column = CAST(0 AS BIT)
                      ,srt                = IIF(u.type = N'5' -- Clustered columnstore
                                               ,4             -- is ROW LOCATOR
                                               ,3)            -- is UNIQUIFIER
                      ,column_id          = 0
                  FROM (--
                        SELECT database_id
                              ,object_id
                              ,index_id
                              ,type
                          FROM [##SQLXL_Index_Compilation]
                         WHERE rec_type = N'I'  -- index level composite record
                           AND type    IN (N'1' -- clustered rowstore index
                                          ,N'2' -- nonclustered rowstore index
                                          ,N'7' -- Hash index on In-Memory Clustered Columnstore
                                          )
                       ) AS i
                  JOIN (--
                        SELECT database_id
                              ,object_id
                              ,type
                          FROM [##SQLXL_Index_Compilation]
                         WHERE rec_type  = N'I'  -- index level composite record
                           AND type     IN (N'0' -- rowstore heap
                                           ,N'1' -- clustered rowstore index
                                           ,N'5' -- Clustered columnstore
                                           )
                           AND is_unique = 0
                       ) AS u
                    ON i.database_id = u.database_id
                   AND i.object_id   = u.object_id
               ) AS icol
          LEFT OUTER
          JOIN [##SQLXL_Index_column]            AS c                -- object all columns
            ON icol.database_id = c.database_id
           AND icol.object_id   = c.object_id
           AND icol.column_id   = c.column_id

          -- Column DEFAULT constraint definition
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_objects]       AS dc
            ON c.database_id       = dc.database_id
           AND c.default_object_id = dc.object_id                    -- link to "D" object types

          LEFT OUTER
          JOIN [##SQLXL_Index_sys_index_columns] AS ic               -- column by index, FKC, MIX
            ON icol.database_id = ic.database_id
           AND icol.object_id   = ic.object_id
           AND icol.index_id    = ic.index_id
           AND icol.type        = ic.type
           AND icol.column_id   = ic.column_id

          LEFT OUTER
          JOIN [##SQLXL_Index_sys_foreign_key_columns] AS fkc
            ON icol.database_id = fkc.database_id
           AND icol.object_id   = fkc.parent_object_id
           AND icol.index_id    = fkc.constraint_object_id
           AND icol.column_id   = fkc.parent_column_id

          LEFT OUTER
          JOIN [##SQLXL_Index_sys_index_columns] AS cix              -- clustered index if available
            ON icol.database_id = cix.database_id
           AND icol.object_id   = cix.object_id
           AND N'1'             = cix.type                           -- clustered rowstore index
           AND icol.column_id   = cix.column_id

          LEFT OUTER
          JOIN [##SQLXL_Index_sys_ShowStatistics_StatHeader] AS sssh -- 1 row per index/column
            ON icol.database_id = sssh.database_id
           AND icol.object_id   = sssh.object_id
           AND icol.index_id    = sssh.index_ID
           AND icol.type   NOT IN (N'90' -- full-text index of a tabular object
                                  ,N'F'  -- foreign key constraint
                                  ,N'M'  -- missing nonclustered rowstore index
                                  ) -- No sssh.type
       ) AS icol

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_ShowStatistics_DensityVector] AS ssdv
    ON icol.database_id = ssdv.database_id
   AND icol.object_id   = ssdv.object_id
   AND icol.index_id    = ssdv.index_ID
                        -- No ssdv.type column
   AND icol.type   NOT IN (-- avoid "indexes" with IDs that could match up with physical indexes
                           N'90' -- full-text index of a tabular object
                          ,N'F'  -- foreign key constraint
                          ,N'M'  -- missing nonclustered rowstore index
                          )
   AND icol.rn          = ssdv.Row_ID
OPTION (MAXDOP 1,RECOMPILE,FORCE ORDER); -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Build table of column uniqueness & display values'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

-- add index
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_uniqueness
    ON [##SQLXL_Index_uniqueness]
      (database_id
      ,object_id
      ,index_id
      ,type
      ,is_included_column
      ,rn
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Indexed [##SQLXL_Index_uniqueness]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Update index statistics',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - index statistics
/******************************************************************************************************************************************/
SET ANSI_WARNINGS OFF
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/
      -- [sys].[stats] ----------------------------------------------------------
       stats_id                         = src.stats_id
      ,stats_Name                       = QUOTENAME(tgt.type_short_desc) + IIF(src.name IS NOT NULL,N' ' + src.name,N' N/A')
      ,stats_user_created               = src.user_created
      ,stats_auto_created               = src.auto_created
      ,stats_no_recompute               = src.no_recompute
      ,stats_has_filter                 = src.has_filter
      ,stats_filter_definition          = src.filter_definition
      ,stats_is_temporary               = COALESCE(src.is_temporary        ,0)
      ,stats_is_incremental             = COALESCE(src.is_incremental      ,0)
      ,stats_has_persisted_sample       = COALESCE(src.has_persisted_sample,0)
      ,stats_generation_method          = src.stats_generation_method
      ,stats_generation_method_desc     = src.stats_generation_method_desc
      -- [sys].[ShowStatistics_StatHeader] --------------------------------------
      ,stathdr_Updated                  = iss.Updated
      ,stathdr_Rows_CNT                 = COALESCE(iss.Rows              ,0)
      ,stathdr_Rows_sampled_CNT         = COALESCE(iss.Rows_sampled      ,0)
      ,stathdr_Steps                    = COALESCE(iss.Steps             ,0)
      ,stathdr_Density                  = COALESCE(iss.Density           ,0)
      ,stathdr_Average_key_Length       = COALESCE(iss.Average_Key_Length,0)
      ,stathdr_String_index             = iss.String_index
      ,stathdr_Filter_Expression        = iss.Filter_Expression
      ,stathdr_Unfiltered_Rows          = COALESCE(iss.Unfiltered_Rows         ,0)
      ,stathdr_Persisted_Sample_Percent = COALESCE(iss.Persisted_Sample_Percent,0)
      ,stathdr_Statistics_age_days      = COALESCE(iss.Statistics_age_days     ,0)
      -- [sys].[ShowStatistics_Histogram_summary] -------------------------------
      ,stathist_range_rows_LO           = COALESCE(ssh.min_rows_per_value,0)
      ,stathist_range_rows_HI           = COALESCE(ssh.max_rows_per_value,0)
      ,stathist_null_rows               = COALESCE(ssh.null_rows         ,0)
      ,stathist_param_sniff             = COALESCE(ssh.param_sniff       ,0)
      -- [sys].[dm_db_stats_properties], [sys].[dm_db_incremental_stats_properties] --
      ,Stats_Prop_modification_CNT      = COALESCE(dsp.modification_counter,dip.modification_counter,0)
      ,Stats_Prop_last_updated          = COALESCE(dsp.last_updated,dip.last_updated)
      ,Stats_Prop_updated_days_ago      = COALESCE(dsp.updated_days_ago,dip.updated_days_ago)
/*** LOCAL TESTING ***
SELECT *
--*/
  FROM (-- index level records, statistics eligible only
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type  = N'I'   -- index level composite record
           AND type NOT IN (N'90' -- full-text index of a tabular object
                           ,N'F'  -- foreign key constraint
                           ,N'M'  -- missing nonclustered rowstore index
                           )      -- statistics eligible only
       )                                              AS tgt

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_stats]                      AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
   AND tgt.index_id    = src.stats_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_ShowStatistics_StatHeader]  AS iss
    ON tgt.database_id = iss.database_id
   AND tgt.object_id   = iss.object_id
   AND tgt.index_id    = iss.index_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_ShowStatistics_Histogram_summary] AS ssh
    ON tgt.database_id = ssh.database_id
   AND tgt.object_id   = ssh.object_id
   AND tgt.index_id    = ssh.index_id

  LEFT OUTER
  JOIN (-- sum up all of the modifications to this index
        SELECT database_id
              ,object_id
              ,stats_id
              ,modification_counter = SUM(COALESCE(modification_counter,0))
              ,last_updated         = MAX(last_updated)
              ,updated_days_ago     = MIN(updated_days_ago)
          FROM [##SQLXL_Index_sys_dm_db_stats_properties]
         GROUP BY
               database_id
              ,object_id
              ,stats_id
       ) AS dsp
    ON tgt.database_id = dsp.database_id
   AND tgt.object_id   = dsp.object_id
   AND tgt.index_id    = dsp.stats_id

  LEFT OUTER
  JOIN (-- SUm up incremental statistics across partitions for this index
        -- introduced in 2014 (12.x) SP2 and 2016 (13.x) SP1
        SELECT database_id
              ,object_id
              ,stats_id
              ,modification_counter = SUM(COALESCE(modification_counter,0))
              ,last_updated         = MAX(last_updated)
              ,updated_days_ago     = MIN(updated_days_ago)
          FROM [##SQLXL_Index_sys_dm_db_incremental_stats_properties]
         GROUP BY
               database_id
              ,object_id
              ,stats_id
       ) AS dip
    ON tgt.database_id = dip.database_id
   AND tgt.object_id   = dip.object_id
   AND tgt.index_id    = dip.stats_id

OPTION (MAXDOP 1,RECOMPILE);
SET ANSI_WARNINGS ON

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update index statistics'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - index size & count attributes
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/

       Key_Columns_CNT                 = COALESCE(fkc.key_columns_CNT      ,lng.key_columns_CNT      ,0)
      ,Included_Columns_CNT            = COALESCE(fkc.Included_Columns_CNT ,lng.Included_Columns_CNT ,0)
      ------------------------------------------------------------------------------------------------------
      ,key_total_datatype_length_bytes = COALESCE(fkc.key_column_width     ,lng.key_column_width     ,0)
      ,inc_total_datatype_length_bytes = COALESCE(fkc.included_column_width,lng.included_column_width,0)
      ,idx_total_datatype_length_bytes = COALESCE(fkc.total_width          ,lng.total_width          ,0)
      -----------------------------------------------------------------------------------------------------
      -- row_cnt is not maintained in sys.dm_db_partition_stats for XTP objects
      -----------------------------------------------------------------------------------------------------
      ,row_CNT                           = CASE WHEN ISNULL(ps.row_CNT,0) = 0 THEN tgt.row_CNT ELSE ps.row_CNT END
      -----------------------------------------------------------------------------------------------------
      ,Partition_CNT                     = COALESCE(ps.Partition_CNT             ,0)
      ,used_page_PG_CNT                  = COALESCE(ps.used_page_CNT             ,0)
      ,in_row_data_page_PG_CNT           = COALESCE(ps.in_row_data_page          ,0)
      ,in_row_used_page_PG_CNT           = COALESCE(ps.in_row_used_page          ,0)
      ,in_row_reserved_page_PG_CNT       = COALESCE(ps.in_row_reserved_page      ,0)
      ,lob_used_page_PG_CNT              = COALESCE(ps.lob_used_page             ,0)
      ,lob_reserved_page_PG_CNT          = COALESCE(ps.lob_reserved_page         ,0)
      ,row_overflow_used_page_PG_CNT     = COALESCE(ps.row_overflow_used_page    ,0)
      ,row_overflow_reserved_page_PG_CNT = COALESCE(ps.row_overflow_reserved_page,0)
      ,reserved_page_PG_CNT              = COALESCE(ps.reserved_page             ,0)

  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS tgt     -- index level composite record

  LEFT OUTER -- LEFT OUTER required since HEAPS have no columns and get excluded from subquery
  JOIN (-- Index sizes and counts
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,key_column_width      = SUM(IIF(ic.is_included_column = 0 AND ic.type NOT IN (N'5',N'6') -- columnstores
                                              ,IIF(ac.Average_Length > 0,ac.Average_Length,COALESCE(ac.max_length_unicode,ac.max_length))
                                              ,0)
                                          )
              ,included_column_width = SUM(IIF(ic.is_included_column = 1 AND ic.type NOT IN (N'5',N'6') -- columnstores
                                              ,IIF(ac.Average_Length > 0,ac.Average_Length,COALESCE(ac.max_length_unicode,ac.max_length))
                                              ,0)
                                          )
              ,total_width           = SUM(IIF(ac.Average_Length > 0 AND ic.type NOT IN (N'5',N'6')     -- columnstores
                                              ,ac.Average_Length
                                              ,COALESCE(ac.max_length_unicode,ac.max_length))
                                          )
              ,key_columns_CNT       = SUM(IIF(ic.is_included_column = 0,1,0))
              ,Included_Columns_CNT  = SUM(IIF(ic.is_included_column = 1,1,0))
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_column]            AS ac
            ON ic.database_id = ac.database_id
           AND ic.object_id   = ac.object_id
               -- No parent_object_id column in XL_IDX_column
           AND ic.column_id   = ac.column_id
         WHERE 1 = 1
         GROUP BY
               ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
       ) AS lng
    ON tgt.database_id = lng.database_id
   AND tgt.object_id   = lng.object_id
   AND tgt.index_id    = lng.index_id
   AND tgt.type        = lng.type

  LEFT OUTER -- LEFT OUTER required since HEAPS have no columns and get excluded from subquery
  JOIN (-- Index sizes and counts
        SELECT database_id                 = fkc.database_id
              ,object_id                   = fkc.constraint_object_id
              ,key_column_width            = SUM(IIF(ac.Average_Length > 0
                                                    ,ac.Average_Length
                                                    ,COALESCE(ac.max_length_unicode,ac.max_length))
                                                )
              ,included_column_width       = 0
              ,total_width                 = SUM(IIF(ac.Average_Length > 0
                                                    ,ac.Average_Length
                                                    ,COALESCE(ac.max_length_unicode,ac.max_length))
                                                )
              ,key_columns_CNT             = COUNT(1)
              ,Included_columns_CNT        = 0
          FROM [##SQLXL_Index_sys_foreign_key_columns] AS fkc
          JOIN [##SQLXL_Index_column]                  AS ac
            ON fkc.database_id      = ac.database_id
           AND fkc.parent_object_id = ac.object_id
           AND fkc.parent_column_id = ac.column_id
         GROUP BY
               fkc.database_id
              ,fkc.constraint_object_id
       ) AS fkc
    ON tgt.database_id = fkc.database_id
   AND tgt.object_id   = fkc.object_id
   AND tgt.index_id    = fkc.object_id
   AND tgt.type        = N'F'            -- foreign key constraint

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_partition_stats] AS ps
    ON tgt.database_id = ps.database_id
   AND tgt.object_id   = ps.object_id
   AND tgt.index_id    = ps.index_id
   AND tgt.type   NOT IN (-- avoid "indexes" with IDs that could match up with physical index partitions
                          N'90' -- full-text index of a tabular object
                         ,N'F'  -- foreign key constraint
                         ,N'M'  -- missing nonclustered rowstore index
                         )

OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update index size & count attributes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - row count for foreign keys
-- <FUTURE> candidate to be incorporated to above code
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/
       row_CNT                           = ps.row_CNT
  FROM (SELECT * FROM [##SQLXL_Index_Compilation]
         WHERE type = N'F'
       ) AS tgt
  JOIN (SELECT * FROM [##SQLXL_Index_sys_indexes]
         WHERE type IN (N'0'   -- rowstore heap
                       ,N'1'   -- clustered rowstore index
                       ,N'5'   -- clustered columnstore
                       )
       ) AS tbl
    ON tgt.database_id      = tbl.database_id
   AND tgt.parent_object_id = tbl.object_id
  JOIN [##SQLXL_Index_sys_dm_db_partition_stats] AS ps
    ON tgt.database_id      = ps.database_id
   AND tgt.parent_object_id = ps.object_id
   AND tbl.index_id         = ps.index_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update foreign key constraint table row counts'
   RAISERROR(@msg,0,0) WITH NOWAIT;
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - table columns with attributes Unique, Ordered IDs
-- Table Unique Ordered IDs - Identity, Sequence, GUID, Sequence GUID
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.parent_object_id,tgt.index_id,tgt.type,c.UNQ,c.column_id,ncx.index_id,
--*/
       tbl_cx_uniq_ordered_column_TYP       = c.UNQ
      ,tbl_cx_uniq_ordered_column_ID        = c.column_id
      ,tbl_smallest_uniq_Nonclustered_idx   = ncx.index_id
  FROM [##SQLXL_Index_Compilation] AS tgt
  LEFT OUTER
  JOIN (-- find all tables with columns that are unique/incrementing
        SELECT c.database_id
              ,c.object_id
              ,c.Column_ID
              ,UNQ = CASE WHEN c.is_identity   = 1                      THEN N'IDN'
                          WHEN c.seq_object_id > 0                      THEN N'SEQ'
                          WHEN dc.definition   = N'(newsequentialid())' THEN N'SUID'
                          WHEN dc.definition   = N'(newid())'           THEN N'NUID'
                          ELSE N''
                     END
              ,rn = ROW_NUMBER() OVER (PARTITION BY c.database_id
                                                   ,c.object_id
                                           ORDER BY c.max_length          -- smallest one first if more than one
                                                   ,c.is_identity   DESC
                                                   ,c.seq_object_id DESC
                                                   ,dc.definition         -- for NUID & SUID
                                      )
          FROM [##SQLXL_Index_sys_columns] AS c
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_objects] AS dc -- default objects
            ON c.database_id       = dc.database_id
           AND c.default_object_id = dc.object_id
         WHERE (   c.is_identity   = 1
                OR c.seq_object_id > 0
                OR dc.definition   = N'(newsequentialid())'
                OR dc.definition   = N'(newid())'
               )
       ) AS c
    ON tgt.database_id = c.database_id
   AND tgt.object_id   = c.object_id
   AND 1               = c.rn
  LEFT OUTER
  JOIN (-- find smallest unique index to replace heap
        SELECT i.database_id
              ,i.parent_object_id
              ,i.index_id
              ,rn = ROW_NUMBER() OVER (PARTITION BY i.database_id
                                                   ,i.parent_object_id
                                           ORDER BY i.stathdr_Average_Key_Length  -- smallest one first if more than one
                                                   ,i.Lead_Element_Uniqueness     -- most uniquest first key element next
                                                   ,i.Key_Columns_CNT             -- fewest key columns
                                                   ,ius.user_total_CNT  DESC    -- most used
                                      )
          FROM [##SQLXL_Index_Compilation] AS i
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_dm_db_index_usage_stats] AS ius
            ON i.database_ID      = ius.database_id
           AND i.parent_object_id = ius.object_id
           AND i.index_ID         = ius.index_id
         WHERE i.rec_type                 = N'I' -- index level composite record
           AND i.type                     = N'2' -- nonclustered rowstore index
           AND (   i.is_primary_key       = 1
                OR i.is_unique_constraint = 1
                OR i.is_unique            = 1
               )
       ) AS ncx
    ON tgt.database_id      = ncx.database_id
   AND tgt.parent_object_id = ncx.parent_object_id
   AND 1                    = ncx.rn
 WHERE tgt.type IN (N'0' -- rowstore heap
                   ,N'1' -- clustered rowstore index
                   ,N'5' -- clustered columnstore
                   )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update table columns with attributes Unique, Ordered,IDs'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Update index column statistics and attributes',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - index column, statistics, uniqueness, compression
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/

       element_uniqueness      = CASE WHEN tgt.type = N'0' -- rowstore heap
                                      THEN N'HEAP' + IIF(tgt.parent_object_type IN (N'TF' -- SQL table-valued-function SQL 2012+
                                                                                   ,N'V'  -- View
                                                                                   )
                                                        ,NCHAR(167) + tgt.obj_type_short_label
                                                        ,N'')
                                      WHEN tgt.type = N'5'  THEN N'CCS' -- Clustered columnstore
                                      WHEN tgt.type = N'6'  THEN N'NCS' -- nonclustered columnstore index
                                      WHEN tgt.type = N'90' THEN N'FTX' -- full-text index of a tabular object
                                      ------------------------------------------------------------------------------------------------------
                                      WHEN LEN(REPLACE(un.uniq,NCHAR(167),N'')) > 0
                                      THEN STUFF(un.uniq,1,1,N'')
                                      ------------------------------------------------------------------------------------------------------
                                      ELSE COALESCE((--
                                                     SELECT TOP (1) -- And there is a candidate CLUSTERING index column
                                                            NCHAR(167) + [dbo].[SQLXL_3SD](xic.uniqueness,'N')
                                                       FROM [##SQLXL_Index_column] AS xic
                                                      WHERE tgt.tbl_is_clustered_columnstore = 0 -- not a CLUSTERED COLUMNSTORE
                                                        AND tgt.database_id = xic.database_id
                                                        AND tgt.object_id   = xic.object_id
                                                        AND (   1                      = xic.is_identity
                                                             OR 1                      = xic.is_sequence
                                                             OR xic.is_newid           = 1
                                                             OR xic.is_newsequentialid = 1
                                                             OR 1.05                   > xic.Uniqueness
                                                            )
                                                      ORDER BY
                                                            xic.is_identity        DESC
                                                           ,xic.is_sequence        DESC
                                                           ,CAST(xic.is_newid           AS BIT) DESC
                                                           ,CAST(xic.is_newsequentialid AS BIT) DESC
                                                           ,xic.Uniqueness         ASC
                                                    )
                                                   ,N''
                                                 )
                                 END
      ,Lead_Element_Uniqueness = (--
                                  SELECT TOP 1
                                         COALESCE(icol.stat_uniqueness,icol.col_uniqueness)
                                    FROM [##SQLXL_Index_uniqueness] AS icol
                                   WHERE tgt.database_id = icol.database_id
                                     AND tgt.object_id   = icol.object_id
                                     AND tgt.index_id    = icol.index_id
                                     AND tgt.type        = icol.type
                                     AND 0               = icol.is_included_column
                                     AND 1               = icol.srt
                                   ORDER BY
                                         icol.rn
                                 )
      ,key_element_length      = STUFF(-- Strip off leading unnecessary characters
                                       (--
                                        SELECT NCHAR(167) + [dbo].[SQLXL_3SD](ssdv.Average_Length,N'N')
                                          FROM [##SQLXL_Index_sys_ShowStatistics_DensityVector] ssdv
                                         WHERE tgt.database_id = ssdv.database_id
                                           AND tgt.object_id   = ssdv.object_id
                                           --- No object_id in SSDV
                                           AND tgt.Index_Id    = ssdv.index_id
                                           AND tgt.type   NOT IN (-- avoid "indexes" with IDs that could match up with physical indexes
                                                                  N'90' -- full-text index of a tabular object
                                                                 ,N'F'  -- foreign key constraint
                                                                 ,N'M'  -- missing nonclustered rowstore index
                                                                 )
                                         ORDER BY ssdv.Row_ID
                                           FOR XML PATH (N''), TYPE
                                       ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                       ,1,1,N'')
     ---------------------------------------------------------------------------------------------------------------------------------------
      ,key_column_info = STUFF(-- Strip off leading unnecessary characters
                               CASE WHEN N'CDC' = tgt.schema_name
                                     AND tgt.name LIKE N'fn_cdc_get_%'  -- Exclude Change Data Capture (CDC) functions
                                    THEN NCHAR(167) + N'<CDC>'
                                    --------------------------------------------------------------------------------------------------------
                                    WHEN tgt.type = N'0'                -- rowstore heap
                                    THEN  NCHAR(167)
                                        + CASE WHEN tgt.tbl_is_memory_optimized = 1
                                               THEN N'<XTP HEAP>'
                                               WHEN tgt.obj_type = N'U' -- User Table
                                               THEN COALESCE( N'<HEAP> Candidate Clustered Unique ordered column:'
                                                            + NCHAR(167)
                                                            + (-- If unique ordered column found show it here
                                                               SELECT xic.[column descriptors]
                                                                 FROM [##SQLXL_Index_column] AS xic
                                                                WHERE tgt.database_id                   = xic.database_id
                                                                  AND tgt.object_id                     = xic.object_id
                                                                  AND tgt.tbl_cx_uniq_ordered_column_ID = xic.column_id
                                                              )
                                                            ,N'<HEAP> Candidate clustering column:'
                                                            + NCHAR(167)
                                                            + (-- If no Unique Ordered column found, look for next best candidate
                                                               SELECT TOP 1
                                                                      xic.[column descriptors]
                                                                 FROM [##SQLXL_Index_column] AS xic
                                                                WHERE tgt.database_id = xic.database_id
                                                                  AND tgt.object_id   = xic.object_id
                                                                  AND xic.Uniqueness  < 1.1
                                                                  AND xic.data_type NOT LIKE N'%DATE%'
                                                                ORDER BY
                                                                      xic.uniqueness * COALESCE(xic.average_length,xic.max_length)
                                                              )
                                                            ,N'<HEAP> No candidate clustering column')
                                              WHEN tgt.obj_type = N'V' -- View
                                              THEN N'<Unindexed View>'
                                              ELSE N'<Unordered table-valued function>'
                                          END
                                    --------------------------------------------------------------------------------------------------------
                                    WHEN tgt.type = N'5' -- Clustered columnstore
                                    THEN  NCHAR(167) + N'<Clustered Columnstore>'
                                        + COALESCE( NCHAR(167)
                                                  + (--
                                                     SELECT TOP (1)
                                                             COALESCE(ip.col_prefix + N' ',N'')
                                                           + COALESCE(ip.[column descriptors],N'')
                                                           + COALESCE(N' ' +ip.col_suffix,N'')
                                                      FROM [##SQLXL_Index_uniqueness] AS ip
                                                     WHERE tgt.database_id = ip.database_id
                                                       AND tgt.object_id   = ip.object_id
                                                       AND tgt.index_id    = ip.index_id
                                                       AND tgt.type        = ip.type
                                                       AND ip.col_suffix LIKE N'PART%'
                                                    )
                                                  ,N'')
                                    --------------------------------------------------------------------------------------------------------
                                    WHEN tgt.type = N'6' -- nonclustered columnstore index
                                    THEN NCHAR(167) + N'<Nonclustered Columnstore>'
                                        + COALESCE((--
                                                    SELECT TOP (1)
                                                            NCHAR(167)
                                                          + COALESCE(ip.col_prefix + N' ',N'')
                                                          + COALESCE(ip.[column descriptors],N'')
                                                          + COALESCE(N' ' + ip.col_suffix,N'')
                                                     FROM [##SQLXL_Index_uniqueness] AS ip
                                                    WHERE tgt.database_id = ip.database_id
                                                      AND tgt.object_id   = ip.object_id
                                                      AND tgt.index_id    = ip.index_id
                                                      AND tgt.type        = ip.type
                                                      AND ip.col_suffix LIKE N'PART%'
                                                   )
                                                  ,N'')
                                    --------------------------------------------------------------------------------------------------------
                                    ELSE (--
                                          SELECT  NCHAR(167)
                                                + IIF(LEN(icol.col_prefix) > 0,icol.col_prefix,N'')
                                                      -- clustered index, don't include Stats Steps  since it's not useful
                                                + CASE WHEN tgt.type = N'1'                       -- clustered rowstore index
                                                        AND CHARINDEX(N'STP(',icol.[Column Descriptors]) > 0
                                                       THEN LEFT(icol.[Column Descriptors],CHARINDEX(N'STP(',icol.[Column Descriptors]) - 2)
                                                       WHEN tgt.type = N'0'   -- rowstore heap
                                                        AND icol.srt = 3      -- don't show uniquifier for HEAPS
                                                       THEN N''
                                                       ELSE COALESCE(icol.[Column Descriptors],N'')
                                                  END
                                                + IIF(LEN(icol.col_suffix) > 0,icol.col_suffix,N'')
                                            FROM [##SQLXL_Index_uniqueness] AS icol
                                           WHERE tgt.database_id = icol.database_id
                                             AND tgt.object_id = icol.object_id
                                             AND tgt.index_id  = icol.index_id
                                             AND tgt.type      = icol.type
                                             AND 0             = icol.is_included_column
                                           ORDER BY
                                                 icol.rn
                                             FOR XML PATH(N''), TYPE
                                         ).value('(./text())[1]',N'NVARCHAR(MAX)')
                               END
                              ,1,1,N'')
     ---------------------------------------------------------------------------------------------------------------------------------------
      ,Included_column_info = CASE tgt.type
                                   WHEN N'5'             -- Clustered Column Store
                                   THEN N'<All Columns>' -- NCHAR(167) included with concatenation of KEY & INCLUDED in PRESENT.SQL
                                   WHEN N'6'             -- nonclustered columnstore index
                                   THEN (-- Nonclustered Column Store
                                         SELECT COALESCE( N'-- Eligible Table Columns to Include -----------'
                                                        + (--
                                                           SELECT NCHAR(167)
                                                                 +ac.[Column Descriptors]
                                                                 +IIF(ic.column_id IS NOT NULL,N' <IDXKEY>',N'')
                                                            FROM (-- table columns not found in the Nonclustered Column Store
                                                                  SELECT c.column_id
                                                                    FROM [##SQLXL_Index_column] AS c
                                                                   WHERE tgt.database_id = c.database_id
                                                                     AND tgt.object_id   = c.object_id
                                                                     AND 1               = c.is_columnstore_eligible
                                                                  EXCEPT
                                                                  SELECT ic.column_id
                                                                    FROM [##SQLXL_Index_sys_index_columns] AS ic
                                                                   WHERE tgt.database_id = ic.database_id
                                                                     AND tgt.object_id   = ic.object_id
                                                                     AND tgt.index_id    = ic.index_id
                                                                     AND tgt.type        = ic.type
                                                                 ) AS c
                                                            JOIN [##SQLXL_Index_column] AS ac
                                                              ON tgt.database_id = ac.database_id
                                                             AND tgt.object_id   = ac.object_id
                                                             AND c.column_id     = ac.column_id
                                                            LEFT OUTER
                                                            JOIN (--
                                                                  SELECT ic.column_id
                                                                    FROM [##SQLXL_Index_sys_index_columns] AS ic
                                                                   WHERE tgt.database_id = ic.database_id
                                                                     AND tgt.object_id   = ic.object_id
                                                                     AND 0               = ic.is_included_column
                                                                   GROUP BY
                                                                         ic.column_id
                                                                 ) AS ic
                                                              ON c.column_id = ic.column_id
                                                           ORDER BY
                                                                 ac.name
                                                             FOR XML PATH(N''), TYPE
                                                          ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                                        ,N'<All Columns>')
                                        )
                                   WHEN N'F'             -- foreign key constraint
                                   THEN N'' -- No included columns for Foreign Key Constraints
                                   ELSE STUFF(-- Strip off leading unnecessary characters
                                              (--
                                               SELECT NCHAR(167)
                                                     +IIF(LEN(icol.col_prefix) > 0,icol.col_prefix,N'')
                                                      -- clustered index, don't include Stats Steps since it's not typically useful
                                                     + CASE WHEN tgt.type = N'1' -- clustered rowstore index
                                                             AND CHARINDEX(N'STP(',icol.[Column Descriptors]) > 0
                                                           THEN LEFT(icol.[Column Descriptors]
                                                                    ,CHARINDEX(N'STP(',icol.[Column Descriptors])-2)
                                                           ELSE COALESCE(icol.[Column Descriptors],N'')
                                                      END
                                                     +IIF(LEN(icol.col_suffix) > 0,icol.col_suffix,N'')
                                                 FROM [##SQLXL_Index_uniqueness] AS icol
                                                WHERE tgt.database_id = icol.database_id
                                                  AND tgt.object_id   = icol.object_id
                                                  AND tgt.index_id    = icol.index_id
                                                  AND tgt.type        = icol.type
                                                  AND 1               = icol.is_included_column
                                                ORDER BY
                                                      icol.rn
                                                  FOR XML PATH(N''), TYPE
                                              ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                             ,1,1,N'')
                              END
     ---------------------------------------------------------------------------------------------------------------------------------------
      ,row_CNT                                    = COALESCE(p.rows         ,0)
      ,Partition_none_compress_CNT                = COALESCE(p.none_comp    ,0)
      ,Partition_row_compress_CNT                 = COALESCE(p.row_comp     ,0)
      ,Partition_page_compress_CNT                = COALESCE(p.page_comp    ,0)
      ,Partition_columnstore_compress_CNT         = COALESCE(p.colstore_comp,0)
      ,Partition_columnstore_archive_compress_CNT = COALESCE(p.colstore_arch,0)
      ,Partition_xml_compress_CNT                 = COALESCE(p.xml_comp     ,0)

  FROM (-- Index records except unindexed views - may have IDENTITY or SEQUENCE columns
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type           = N'I'      -- index level composite record
           AND NOT obj_type_label = N'VW UIV' -- excludes unindexed views - may have IDENTITY or SEQUENCE columns
       ) AS tgt

  LEFT OUTER
  JOIN (-- Get count of compressed and archived partitions
        SELECT p.database_id
              ,p.object_id
              ,p.index_id
              ,rows          = SUM(p.rows         )
              ,none_comp     = SUM(p.none_comp    )
              ,row_comp      = SUM(p.row_comp     )
              ,page_comp     = SUM(p.page_comp    )
              ,colstore_comp = SUM(p.colstore_comp)
              ,colstore_arch = SUM(p.colstore_arch)
              ,xml_comp      = SUM(p.xml_comp     )
          FROM [##SQLXL_Index_sys_partitions] AS p
         GROUP BY
               p.database_id
              ,p.object_id
              ,p.index_id
       ) AS p
    ON tgt.database_id = p.database_id
   AND tgt.object_id   = p.object_id
   AND tgt.index_id    = p.index_id
   AND tgt.type   NOT IN (-- avoid "indexes" with IDs that could match up with physical index partitions
                          N'90' -- full-text index of a tabular object
                         ,N'F'  -- foreign key constraint
                         ,N'M'  -- missing nonclustered rowstore index
                         ,N'V'  -- View
                         )
 OUTER
 APPLY (-- Assemble index statistics in uniqueness descending "corrected key" order
        SELECT (-- double select to accomodate .value('(./text())[1]',N'NVARCHAR(MAX)') below
                SELECT  NCHAR(167)
                      + IIF(CHARINDEX(N' gg22 ',ucol.[Column Descriptors]) > 0,N'Geog',N'')
                      + IIF(CHARINDEX(N' gm22 ',ucol.[Column Descriptors]) > 0,N'Geom',N'')
                      + IIF(CHARINDEX(N'] xml' ,ucol.[Column Descriptors]) > 0,N'XML' ,N'')
                      ----------------------------------------------------------------------------------------------------------------------
                       -- add indicator showing cumulative statistics as columns are added
                      + IIF(tgt.stathdr_Rows_CNT    > 0  ,ucol.uniqueness_flag   ,N'')
                      + IIF(ucol.idx_uniqueness_3sd > N'',ucol.idx_uniqueness_3sd,N'(N/A)')
                      + CASE WHEN ucol.stat_uniqueness > 0 -- use index stat uniqueness
                              AND i.row_CNT            > 0
                             THEN N' (' + [dbo].[SQLXL_3SD](ucol.stat_uniqueness / i.row_CNT,N'%') + N')' -- percent of all rows in table
                             WHEN ucol.col_uniqueness > 0 -- use column level uniqueness
                              AND i.row_CNT           > 0
                             THEN N' (' + [dbo].[SQLXL_3SD](ucol.col_uniqueness / i.row_CNT,N'%') + N')'
                             ELSE N''
                        END
                      + IIF(tgt.has_filter = 1, N' F',N'')      -- add indicator showing uniqueness values are on filtered index
                  FROM [##SQLXL_Index_uniqueness]  AS ucol
                  LEFT OUTER
                  JOIN [##SQLXL_Index_Compilation] AS i          -- get parent row count from HEAP, CLUSTERED, or Columnstore record
                    ON N'I'    = i.rec_type                      -- index level composite record
                   AND i.type IN (N'0' -- rowstore heap
                                 ,N'1' -- clustered rowstore index
                                 ,N'5' -- Clustered columnstore
                                 )
                   AND ucol.database_id = i.database_id
                   AND ucol.object_id   = i.object_id
                 WHERE tgt.database_id  = ucol.database_id
                   AND tgt.object_id    = ucol.object_id
                   AND tgt.index_id     = ucol.index_id
                   AND tgt.type         = ucol.type
                   AND 0                = ucol.is_included_column
                 ORDER BY
                       ucol.rn
                   FOR XML PATH(N''), TYPE
               ).value('(./text())[1]',N'NVARCHAR(MAX)')
       ) AS un(uniq)
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update index column statistics and attributes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - index lead element. all but CCS, NCS, Missing indexes, TVFs
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/
       Lead_Element_Column_ID           = src.Lead_Element_Column_ID
--    ,Lead_Element_Uniqueness          = src.Lead_Element_Uniqueness -- computed above
      ,Lead_Element_Max_Len             = COALESCE(src.Lead_Element_Max_Len,0)
      ,Lead_Element_Data_Type           = src.Lead_Element_Data_Type
      ,Lead_Element_is_Identity         = src.Lead_Element_is_Identity
      ,Lead_Element_is_Sequence         = src.Lead_Element_is_Sequence
      ,Lead_Element_is_newsequentialid  = src.Lead_Element_is_newsequentialid
      ,Lead_Element_is_newid            = src.Lead_Element_is_newid
      ,Lead_Element_is_Nullable         = src.Lead_Element_is_Nullable

  FROM [##SQLXL_Index_Compilation] AS tgt
  JOIN (--
        SELECT database_id                     = ic.database_id
              ,object_id                       = ic.object_id
              ,index_id                        = ic.index_id
              ,type                            = ic.type
              ,Lead_Element_Max_Len            = sc.max_length
              ,Lead_Element_Data_Type          = t.name
              ,Lead_Element_Column_ID          = ic.column_id
              ,Lead_Element_is_Identity        = sc.is_identity
              ,Lead_Element_is_Sequence        = sc.is_sequence
              ,Lead_Element_is_newsequentialid = IIF(sc.is_newid           = 1,1,0)
              ,Lead_Element_is_newid           = IIF(sc.is_newsequentialid = 1,1,0)
              ,Lead_Element_is_Nullable        = sc.is_nullable
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_column]            AS sc
            ON ic.database_id  = sc.database_id
           AND ic.object_id    = sc.object_id
               -- No object_id column in XL_IDX_column
           AND ic.column_id    = sc.column_id
          JOIN [##SQLXL_Index_sys_types]         AS t
            ON ic.database_id  = t.database_id
           AND sc.user_type_id = t.user_type_id
         WHERE ic.type IN (N'1' -- clustered rowstore index
                          ,N'2' -- nonclustered rowstore index
                          ,N'3' -- XML index
                          ,N'4' -- Spatial index
                          )
           AND ic.key_column_sequence = 1
       ) AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
   AND tgt.index_id    = src.index_id
   AND tgt.type        = src.type
 WHERE tgt.rec_type = N'I'               -- index level composite record
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update index lead key element'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Partitions & Partition Functions
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/

       data_space_name                   = ds.data_space_name
      ,data_space_type                   = ds.data_space_type
--    ,data_space_logical_filename       = ds.file_logical_filename              -- can be many per object,omitting for now
      ,data_space_type_desc              = ds.data_space_type_desc
      ,data_space_is_default             = COALESCE(ds.data_space_is_default,0)
      ,data_space_is_system              = COALESCE(ds.data_space_is_system,0)
--    ,filegroup_guid                    = ds.filegroup_guid                     -- can be many per object,omitting for now
--    ,filegroup_is_read_only            = ds.filegroup_is_read_only             -- can be many per object,omitting for now
--    ,filegroup_is_autogrow_all_files   = ds.filegroup_is_autogrow_all_files    -- can be many per object,omitting for now
      ,partition_function_id             = ds.partition_function_id
      ,partition_function_name           = ds.partition_function_name
      ,partition_function_type           = ds.partition_function_type
      ,partition_function_type_desc      = ds.partition_function_type_desc
      ,partition_function_fanout         = ds.partition_function_fanout
      ,partition_function_boundary_value = ds.partition_function_boundary_value
      ,partition_function_is_system      = COALESCE(ds.partition_function_is_system,0)
      ,partition_function_create_DTTM    = ds.partition_function_create_date
      ,partition_function_modify_DTTM    = ds.partition_function_modify_date
  FROM [##SQLXL_Index_Compilation] AS tgt
  LEFT OUTER
  JOIN (-- list of data spaces for Filestream objects
        SELECT database_id
              ,data_space_id
              ,data_space_name
              ,data_space_type
              ,data_space_type_desc
              ,data_space_is_default
              ,data_space_is_system
              ,filegroup_guid
              ,filegroup_is_read_only
              ,filegroup_is_autogrow_all_files
              ,partition_function_id
              ,partition_function_name
              ,partition_function_type
              ,partition_function_type_desc
              ,partition_function_fanout
              ,partition_function_boundary_value
              ,partition_function_is_system
              ,partition_function_create_date
              ,partition_function_modify_date
          FROM [##SQLXL_Index_sys_data_spaces]
         GROUP BY
               database_id
              ,data_space_id
              ,data_space_name
              ,data_space_type
              ,data_space_type_desc
              ,data_space_is_default
              ,data_space_is_system
              ,filegroup_guid
              ,filegroup_is_read_only
              ,filegroup_is_autogrow_all_files
              ,partition_function_id
              ,partition_function_name
              ,partition_function_type
              ,partition_function_type_desc
              ,partition_function_fanout
              ,partition_function_boundary_value
              ,partition_function_is_system
              ,partition_function_create_date
              ,partition_function_modify_date
       ) AS ds
    ON tgt.database_id   = ds.database_id
   AND tgt.data_space_id = ds.data_space_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update Partitions & Functions'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - metrics - Usage, Operational, missing index, row group operations, InMemory, ColumnStore
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
       ios.*,
--*/
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_index_usage_stats], [sys].[dm_db_missing_index_details]
      -------------------------------------------------------------------------------------------------------------------------------------
       ius_user_total_CNT          = IIF(tgt.type = N'M'                -- missing nonclustered rowstore index
                                        , COALESCE(mix.user_seeks    ,0)
                                        + COALESCE(mix.user_scans    ,0)
                                        , COALESCE(ius.user_total_CNT,0))
      ,ius_user_read_CNT           = COALESCE(mix.user_seeks     ,0)
                                   + COALESCE(mix.user_scans     ,0)
                                   + COALESCE(ius.user_read_CNT  ,0)
      ----------------------------------------------------------------------------------------------
      ,ius_user_seeks_CNT          = COALESCE(mix.user_seeks     ,0)
                                   + COALESCE(ius.user_seeks     ,0)
      ,ius_user_scans_CNT          = COALESCE(mix.user_scans     ,0)
                                   + COALESCE(ius.user_scans     ,0)
      ,ius_user_lookups_CNT        = IIF(tgt.type = N'M'                -- missing nonclustered rowstore index
                                        ,0
                                        ,COALESCE(ius.user_lookups,0))
      ----------------------------------------------------------------------------------------------
      -- missing nonclustered rowstore index metric elements
      ,ius_user_updates_CNT        = IIF(tgt.type = N'M',0,COALESCE(ius.user_updates,0))              -- missing nonclustered rowstore index
      ,ius_system_seeks_CNT        = IIF(tgt.type = N'M'                                              -- missing nonclustered rowstore index
                                        ,COALESCE(mix.system_seeks,0)
                                        ,COALESCE(ius.system_seeks,0))
      ,ius_system_scans_CNT        = IIF(tgt.type = N'M'                                              -- missing nonclustered rowstore index
                                        ,COALESCE(mix.system_scans,0)
                                        ,COALESCE(ius.system_scans,0))
      ,ius_system_lookups_CNT      = IIF(tgt.type = N'M',0,COALESCE(ius.system_lookups,0))            -- missing nonclustered rowstore index
      ,ius_system_updates_CNT      = IIF(tgt.type = N'M',0,COALESCE(ius.system_updates,0))            -- missing nonclustered rowstore index
      -- missing nonclustered rowstore index usage date elements. NULL values OK for Dates
      ,ius_last_user_seek_DTTM     = IIF(tgt.type = N'M',mix.last_user_seek  ,ius.last_user_seek    ) -- missing nonclustered rowstore index
      ,ius_last_user_scan_DTTM     = IIF(tgt.type = N'M',mix.last_user_scan  ,ius.last_user_scan    ) -- missing nonclustered rowstore index
      ,ius_last_user_lookup_DTTM   = IIF(tgt.type = N'M',NULL                ,ius.last_user_lookup  ) -- missing nonclustered rowstore index
      ,ius_last_user_update_DTTM   = IIF(tgt.type = N'M',NULL                ,ius.last_user_update  ) -- missing nonclustered rowstore index
      ,ius_last_system_seek_DTTM   = IIF(tgt.type = N'M',mix.last_system_seek,ius.last_system_seek  ) -- missing nonclustered rowstore index
      ,ius_last_system_scan_DTTM   = IIF(tgt.type = N'M',mix.last_system_scan,ius.last_system_scan  ) -- missing nonclustered rowstore index
      ,ius_last_system_lookup_DTTM = IIF(tgt.type = N'M',NULL                ,ius.last_system_lookup) -- missing nonclustered rowstore index
      ,ius_last_system_update_DTTM = IIF(tgt.type = N'M',NULL                ,ius.last_system_update) -- missing nonclustered rowstore index
      ---------------------------------------------------------------------------------------------
      ,ius_last_read_days_ago   = DATEDIFF(DAY,(SELECT TOP (1) dt
                                                  FROM (VALUES (mix.last_user_seek)
                                                              ,(mix.last_user_scan)
                                                              ,(ius.last_user_seek)
                                                              ,(ius.last_user_scan)
                                                              ,(ius.last_user_lookup)
                                                              ,(ius.last_user_update)
                                                       ) AS v(dt)
                                                 ORDER BY
                                                       v.dt DESC
                                               )
                                              ,sis.collection_DTTM
                                          )
      ,ius_last_write_days_ago  = DATEDIFF(DAY
                                          ,ius.last_user_update
                                          ,sis.collection_DTTM
                                          )

      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_index_operational_stats]
      -- ios.leaf_ghost_CNT NOT INCLUDED in ops stats
      -------------------------------------------------------------------------------------------------------------------------------------
      ,ios_partition_CNT                         = COALESCE(ios.partition_CNT                ,0)
      -----------------------------------------
      --Index Leaf/Key writes -----------------
      ,ios_leaf_insert_CNT                       = COALESCE(ios.leaf_insert_CNT              ,0)
      ,ios_leaf_update_CNT                       = COALESCE(ios.leaf_update_CNT              ,0)
      ,ios_leaf_delete_CNT                       = COALESCE(ios.leaf_delete_CNT              ,0)
      ,ios_leaf_ghost_CNT                        = COALESCE(ios.leaf_ghost_CNT               ,0)
      ,ios_total_leaf_Contacts_CNT               = COALESCE(ios.leaf_insert_CNT              ,0)
                                                 + COALESCE(ios.leaf_update_CNT              ,0)
                                                 + COALESCE(ios.leaf_delete_CNT              ,0)
      --Index NonLeaf/Key writes --------------
      ,ios_nonleaf_insert_CNT                    = COALESCE(ios.nonleaf_insert_CNT           ,0)
      ,ios_nonleaf_delete_CNT                    = COALESCE(ios.nonleaf_delete_CNT           ,0)
      ,ios_nonleaf_update_CNT                    = COALESCE(ios.nonleaf_update_CNT           ,0)
      ,ios_total_nonleaf_Contacts_CNT            = COALESCE(ios.nonleaf_insert_CNT           ,0)
                                                 + COALESCE(ios.nonleaf_update_CNT           ,0)
                                                 + COALESCE(ios.nonleaf_delete_CNT           ,0)
      -----------------------------------------
      ,ios_leaf_allocation_CNT                   = COALESCE(ios.leaf_allocation_CNT          ,0)
                                                 + COALESCE(xis.page_split_CNT               ,0)
      ,ios_nonleaf_allocation_CNT                = COALESCE(ios.nonleaf_allocation_CNT       ,0)
                                                 + COALESCE(xis.key_split_CNT                ,0)
      -----------------------------------------
      ,ios_leaf_page_merge_CNT                   = COALESCE(ios.leaf_page_merge_CNT          ,0)
                                                 + COALESCE(xis.page_merge_CNT               ,0)
                                                 + COALESCE(xis.page_consolidation_CNT       ,0)
      ,ios_nonleaf_page_merge_CNT                = COALESCE(ios.nonleaf_page_merge_CNT       ,0)
                                                 + COALESCE(xis.key_merge_CNT                ,0)
      -----------------------------------------
      ,ios_range_scan_CNT                        = COALESCE(ios.range_scan_CNT               ,0) -- rolls up to TOTAL SCAN
      ,ios_singleton_lookup_CNT                  = COALESCE(ios.singleton_lookup_CNT         ,0)
      ,ios_forwarded_fetch_CNT                   = COALESCE(ios.forwarded_fetch_CNT          ,0)
      -----------------------------------------
      ,ios_lob_fetch_pages_CNT                   = COALESCE(ios.lob_fetch_in_pages           ,0)
      ,ios_lob_fetch_bytes_CNT                   = COALESCE(ios.lob_fetch_in_bytes           ,0)
      ,ios_lob_orphan_create_CNT                 = COALESCE(ios.lob_orphan_create_CNT        ,0)
      ,ios_lob_orphan_insert_CNT                 = COALESCE(ios.lob_orphan_insert_CNT        ,0)
      ,ios_row_overflow_fetch_in_pages_CNT       = COALESCE(ios.row_overflow_fetch_in_pages  ,0)
      ,ios_row_overflow_fetch_in_bytes_CNT       = COALESCE(ios.row_overflow_fetch_in_bytes  ,0)
      ,ios_column_value_push_off_row_CNT         = COALESCE(ios.column_value_push_off_row_CNT,0)
      ,ios_column_value_pull_in_row_CNT          = COALESCE(ios.column_value_pull_in_row_CNT ,0)
      -----------------------------------------
      ,ios_page_compression_attempt_CNT          = COALESCE(ios.page_compression_attempt_CNT,0)
      ,ios_page_compression_success_CNT          = COALESCE(ios.page_compression_success_CNT,0)
      ,ios_page_compression_fail_CNT             = COALESCE(ios.page_compression_attempt_CNT,0)
                                                 - COALESCE(ios.page_compression_success_CNT,0)
      -----------------------------------------
      ,ios_version_generated_off_row_CNT         = COALESCE(ios.version_generated_off_row_CNT        ,0)
      ,ios_ghost_version_inrow_CNT               = COALESCE(ios.ghost_version_inrow_CNT              ,0)
      ,ios_ghost_version_off_row_CNT             = COALESCE(ios.ghost_version_off_row_CNT            ,0)
      ,ios_insert_over_ghost_version_inrow_CNT   = COALESCE(ios.insert_over_ghost_version_inrow_CNT  ,0)
      ,ios_insert_over_ghost_version_off_row_CNT = COALESCE(ios.insert_over_ghost_version_off_row_CNT,0)

      -----------------------------------------
      ,ios_row_lock_CNT                          = COALESCE(ios.row_lock_CNT                 ,0)
      ,ios_row_lock_wait_CNT                     = COALESCE(ios.row_lock_wait_CNT            ,0)
      ,ios_row_lock_wait_MS_CNT                  = COALESCE(ios.row_lock_wait_MS             ,0)
--NOTE:ios_row_lock_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ios_page_lock_CNT                         = COALESCE(ios.page_lock_CNT     ,0)
      ,ios_page_lock_wait_CNT                    = COALESCE(ios.page_lock_wait_CNT,0)
      ,ios_page_lock_wait_MS_CNT                 = COALESCE(ios.page_lock_wait_MS ,0)
--NOTE:ios_page_lock_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ios_lock_promotion_attempt_CNT            = COALESCE(ios.lock_promotion_attempt_CNT,0)
      ,ios_lock_promotion_CNT                    = COALESCE(ios.lock_promotion_CNT        ,0)
      ,ios_lock_promotion_fail_CNT               = COALESCE(ios.lock_promotion_attempt_CNT,0)
                                                 - COALESCE(ios.lock_promotion_CNT        ,0)
      -----------------------------------------
      ,ios_page_latch_wait_CNT                   = COALESCE(ios.page_latch_wait_CNT,0)
      ,ios_page_latch_wait_MS_CNT                = COALESCE(ios.page_latch_wait_MS ,0)
--NOTE:ios_page_latch_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ios_page_io_latch_wait_CNT                = COALESCE(ios.page_io_latch_wait_CNT,0)
      ,ios_page_io_latch_wait_MS_CNT             = COALESCE(ios.page_io_latch_wait_MS ,0)
--NOTE:ios_page_io_latch_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ios_tree_page_latch_wait_CNT              = COALESCE(ios.tree_page_latch_wait_CNT,0)
      ,ios_tree_page_latch_wait_MS_CNT           = COALESCE(ios.tree_page_latch_wait_MS ,0)
--NOTE:ios_tree_page_latch_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ios_tree_page_io_latch_wait_CNT           = COALESCE(ios.tree_page_io_latch_wait_CNT,0)
      ,ios_tree_page_io_latch_wait_MS_CNT        = COALESCE(ios.tree_page_io_latch_wait_MS ,0)
--NOTE:ios_tree_page_io_latch_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      --------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_index_operational_stats] Lock & Wait Aggregates - includes ColumnStore & InMemory if found
      --------------------------------------------------------------------------------------------------------
      ,ops_total_lock_CNT                        = COALESCE(ios.row_lock_CNT       ,0)
                                                 + COALESCE(ios.page_lock_CNT      ,0)
                                                 + COALESCE(rgos.row_group_lock_CNT,0)
      -----------------------------------------
      ,ops_total_lock_wait_CNT                   = COALESCE(ios.row_lock_wait_CNT       ,0)
                                                 + COALESCE(ios.page_lock_wait_CNT      ,0)
                                                 + COALESCE(rgos.row_group_lock_wait_CNT,0)
      -----------------------------------------
      ,ops_total_lock_wait_MS_CNT                = COALESCE(ios.row_lock_wait_ms       ,0)
                                                 + COALESCE(ios.page_lock_wait_ms      ,0)
                                                 + COALESCE(rgos.row_group_lock_wait_MS,0)
      -----------------------------------------
--NOTE:ops_total_lock_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ops_total_wait_CNT                      = (  COALESCE(ios.row_lock_wait_CNT             ,0)
                                                  + COALESCE(ios.page_lock_wait_CNT            ,0)
                                                  + COALESCE(ios.page_latch_wait_CNT           ,0)
                                                  + COALESCE(ios.page_io_latch_wait_CNT        ,0)
                                                  + COALESCE(rgos.row_group_lock_wait_CNT      ,0)
                                                  -- ios.tree_page_latch_wait_CNT, ios.tree_page_io_latch_wait_CNT are subsets
                                                 )
      --------------------------------------
      ,ops_total_wait_MS_CNT                   = (  COALESCE(ios.row_lock_wait_MS          ,0)
                                                  + COALESCE(ios.page_lock_wait_MS         ,0)
                                                  + COALESCE(ios.page_latch_wait_MS        ,0)
                                                  + COALESCE(ios.page_io_latch_wait_MS     ,0)
                                                  + COALESCE(rgos.row_group_lock_wait_MS   ,0)
                                                  -- ios.tree_page_latch_wait_MS, ios.tree_page_io_latch_wait_MS are subsets
                                                 )
      --------------------------------------
--NOTE:ops_total_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_xtp_object_stats]
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_row_insert_attempts_CNT          = COALESCE(xis.row_insert_attempts         ,0)
      ,xtp_row_update_attempts_CNT          = COALESCE(xis.row_update_attempts         ,0)
      ,xtp_row_delete_attempts_CNT          = COALESCE(xis.row_delete_attempts         ,0)
      ,xtp_write_conflicts_CNT              = COALESCE(xis.write_conflicts             ,0)
      ,xtp_unique_constraint_violations_CNT = COALESCE(xis.unique_constraint_violations,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_xtp_index_stats]
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_scans_started_CNT                = COALESCE(xis.scans_started,0)
      ,xtp_scans_retries_CNT                = COALESCE(xis.scans_retries,0)                 -- rolled up to TOTAL
      ,xtp_rows_returned_CNT                = COALESCE(xis.rows_returned,0)
      ,xtp_rows_touched_CNT                 = COALESCE(xis.rows_touched ,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_xtp_Nonclustered_index_stats]
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_delta_pages_CNT                  = COALESCE(xis.delta_pages                   ,0)
      ,xtp_leaf_pages_CNT                   = COALESCE(xis.leaf_pages                    ,0)
      ,xtp_page_update_CNT                  = COALESCE(xis.page_update_CNT               ,0)
      ,xtp_page_update_retry_CNT            = COALESCE(xis.page_update_retry_CNT         ,0)
      ,xtp_page_consolidation_CNT           = COALESCE(xis.page_consolidation_CNT        ,0)
      ,xtp_page_consolidation_retry_CNT     = COALESCE(xis.page_consolidation_retry_CNT  ,0)
      ,xtp_page_split_CNT                   = COALESCE(xis.page_split_CNT                ,0)
      ,xtp_page_split_retry_CNT             = COALESCE(xis.page_split_retry_CNT          ,0)
      ,xtp_key_split_CNT                    = COALESCE(xis.key_split_CNT                 ,0)
      ,xtp_key_split_retry_CNT              = COALESCE(xis.key_split_retry_CNT           ,0)
      ,xtp_page_merge_CNT                   = COALESCE(xis.page_merge_CNT                ,0)
      ,xtp_page_merge_retry_CNT             = COALESCE(xis.page_merge_retry_CNT          ,0)
      ,xtp_key_merge_CNT                    = COALESCE(xis.key_merge_CNT                 ,0)
      ,xtp_key_merge_retry_CNT              = COALESCE(xis.key_merge_retry_CNT           ,0)
      ,xtp_uses_key_normalization           = COALESCE(xis.uses_key_normalization        ,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_xtp_memory_consumers]
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_allocated_bytes_CNT              = COALESCE(xis.allocated_bytes ,0)
      ,xtp_used_bytes_CNT                   = COALESCE(xis.used_bytes      ,0)
      ,xtp_allocation_CNT                   = COALESCE(xis.allocation_CNT  ,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_column_store_row_group_operational_stats]
      -------------------------------------------------------------------------------------------------------------------------------------
      ,cs_partition_CNT                     = COALESCE(rgos.partition_CNT          ,0) --<FUTURE> move to appropriate OPS_ value
      ,cs_row_group_CNT                     = COALESCE(rgos.row_group_CNT          ,0)
      ,cs_index_scan_CNT                    = COALESCE(rgos.index_scan_CNT         ,0)
      ,cs_scan_CNT                          = COALESCE(rgos.scan_CNT               ,0)
      ,cs_delete_buffer_scan_CNT            = COALESCE(rgos.delete_buffer_scan_CNT ,0) --<FUTURE> move to appropriate OPS_ value
      ,cs_row_group_lock_CNT                = COALESCE(rgos.row_group_lock_CNT     ,0) --<FUTURE> eliminate in favor of ops_total values
      ,cs_row_group_lock_wait_CNT           = COALESCE(rgos.row_group_lock_wait_CNT,0) --<FUTURE> eliminate in favor of ops_total values
      ,cs_row_group_lock_wait_MS_CNT        = COALESCE(rgos.row_group_lock_wait_MS ,0) --<FUTURE> eliminate in favor of ops_total values
--NOTE:cs_row_group_lock_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      ,cs_returned_row_CNT                  = COALESCE(rgos.returned_row_CNT       ,0)
      ,cs_returned_aggregate_CNT            = COALESCE(rgos.returned_aggregate_CNT ,0)
      ,cs_returned_group_CNT                = COALESCE(rgos.returned_group_CNT     ,0)
      ,cs_input_groupby_row_CNT             = COALESCE(rgos.input_groupby_row_CNT  ,0)

      /************************************************************************************************************************************/
      -- Operational Metrics Aggregates
      ---------------------------------------------------------------------------------------
      ,ops_total_contacts_CNT = -----------------------------------------------
                                -- WRITES
                                -----------------------------------------------
                                  COALESCE(ios.leaf_insert_CNT              ,0)
                                + COALESCE(ios.leaf_update_CNT              ,0)
                                + COALESCE(ios.leaf_delete_CNT              ,0)
                                + COALESCE(ios.nonleaf_insert_CNT           ,0)
                                + COALESCE(ios.nonleaf_delete_CNT           ,0)
                                + COALESCE(ios.nonleaf_update_CNT           ,0)
                                + COALESCE(ios.lob_orphan_create_CNT        ,0)
                                + COALESCE(ios.column_value_push_off_row_CNT,0)
                                + COALESCE(ios.column_value_pull_in_row_CNT ,0)
                                + COALESCE(ios.page_compression_success_CNT ,0)
                                ---------------------------------
                                + COALESCE(xis.row_insert_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                                + COALESCE(xis.row_update_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                                + COALESCE(xis.row_delete_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                                ---------------------------------
                                + COALESCE(xis.page_update_CNT              ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                                + COALESCE(xis.page_consolidation_CNT       ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                                + COALESCE(xis.page_split_CNT               ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                                + COALESCE(xis.key_split_CNT                ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                                + COALESCE(xis.page_merge_CNT               ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                                + COALESCE(xis.key_merge_CNT                ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                                -----------------------------------------------
                                -- READS
                                -----------------------------------------------
                                + COALESCE(ios.range_scan_CNT               ,0)
                                + COALESCE(ios.singleton_lookup_CNT         ,0)
                                + COALESCE(ios.forwarded_fetch_CNT          ,0)
                                + COALESCE(ios.lob_fetch_in_pages           ,0)
                                + COALESCE(ios.page_compression_attempt_CNT ,0)
                                -- InMemory [sys].[dm_db_xtp_index_stats]
                                + COALESCE(xis.scans_started                ,0)
--                              + COALESCE(xis.rows_touched                 ,0)
                                -- Columnstore [dm_db_column_store_row_group_operational_stats]
                                + COALESCE(rgos.scan_CNT                    ,0)
                                + COALESCE(rgos.delete_buffer_scan_CNT      ,0)
                                + COALESCE(rgos.index_scan_CNT              ,0)
                                + COALESCE(rgos.row_group_lock_CNT          ,0)
      /********************************************************************************/
      ,ops_total_read_CNT =   COALESCE(ios.range_scan_CNT               ,0)
                            + COALESCE(ios.singleton_lookup_CNT         ,0)
                            + COALESCE(ios.forwarded_fetch_CNT          ,0)
                            + COALESCE(ios.lob_fetch_in_pages           ,0)
                            + COALESCE(ios.page_compression_attempt_CNT ,0)
                            + COALESCE(xis.scans_started                ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                            + COALESCE(rgos.index_scan_CNT              ,0) -- Columnstore [dm_db_column_store_row_group_operational_stats]
                            + COALESCE(rgos.scan_CNT                    ,0) -- Columnstore [dm_db_column_store_row_group_operational_stats]
                            + COALESCE(rgos.delete_buffer_scan_CNT      ,0) -- Columnstore [dm_db_column_store_row_group_operational_stats]
      --------------------------------
      ,ops_total_scan_CNT =   COALESCE(ios.range_scan_CNT               ,0)
                            + COALESCE(xis.scans_started                ,0) -- InMemory [sys].[dm_db_xtp_index_stats]
                            + COALESCE(rgos.index_scan_CNT              ,0) -- Columnstore [dm_db_column_store_row_group_operational_stats]
                            + COALESCE(rgos.scan_CNT                    ,0) -- Columnstore [dm_db_column_store_row_group_operational_stats]
                            + COALESCE(rgos.delete_buffer_scan_CNT      ,0) -- Columnstore [dm_db_column_store_row_group_operational_stats]
      --------------------------------
      ,ops_total_scan_retries_CNT     =   COALESCE(xis.scans_retries                ,0)
      /********************************************************************************/
      ,ops_total_write_CNT =   COALESCE(ios.leaf_insert_CNT              ,0)
                             + COALESCE(ios.leaf_update_CNT              ,0)
                             + COALESCE(ios.leaf_delete_CNT              ,0)
                             + COALESCE(ios.nonleaf_insert_CNT           ,0)
                             + COALESCE(ios.nonleaf_update_CNT           ,0)
                             + COALESCE(ios.nonleaf_delete_CNT           ,0)
                             -----------------------------------------------
                             + COALESCE(ios.leaf_allocation_CNT          ,0)
                             + COALESCE(ios.leaf_page_merge_CNT          ,0)
                             + COALESCE(ios.nonleaf_allocation_CNT       ,0)
                             + COALESCE(ios.nonleaf_page_merge_CNT       ,0)
                             -----------------------------------------------
                             + COALESCE(ios.lob_orphan_create_CNT        ,0)
                             + COALESCE(ios.lob_orphan_insert_CNT        ,0)
                             + COALESCE(ios.column_value_push_off_row_CNT,0)
                             + COALESCE(ios.column_value_pull_in_row_CNT ,0)
--                           + COALESCE(ios.page_compression_success_CNT ,0) -- excluded since is a system process
                             + COALESCE(rgos.row_group_lock_CNT          ,0) -- Columnstore
                             -----------------------------------------------
                             + COALESCE(xis.row_insert_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                             + COALESCE(xis.row_update_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                             + COALESCE(xis.row_delete_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                             + COALESCE(xis.page_update_CNT              ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                             -----------------------------------------------
                             + COALESCE(xis.page_consolidation_CNT       ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                             + COALESCE(xis.page_split_CNT               ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                             + COALESCE(xis.key_split_CNT                ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                             + COALESCE(xis.page_merge_CNT               ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                             + COALESCE(xis.key_merge_CNT                ,0) -- InMemory [sys].[dm_db_xtp_Nonclustered_index_stats]
                             + COALESCE(xis.write_conflicts              ,0)
                             + COALESCE(xis.unique_constraint_violations ,0)
      --------------------------------
      ,ops_total_insert_CNT           =   COALESCE(ios.leaf_insert_CNT              ,0)
                                        + COALESCE(ios.nonleaf_insert_CNT           ,0)
                                        + COALESCE(ios.lob_orphan_insert_CNT        ,0) -- bulk operations
                                        ---------------------------------
                                        + COALESCE(xis.row_insert_attempts          ,0) -- InMemory
      --------------------------------
      ,ops_total_update_CNT           =   COALESCE(ios.leaf_update_CNT              ,0)
                                        + COALESCE(ios.nonleaf_update_CNT           ,0)
                                        ---------------------------------
                                        + COALESCE(xis.row_update_attempts          ,0) -- InMemory
                                        + COALESCE(xis.page_update_CNT              ,0) -- InMemory
      --------------------------------
      ,ops_total_delete_CNT           =   COALESCE(ios.leaf_delete_CNT              ,0)
                                        + COALESCE(ios.nonleaf_delete_CNT           ,0)
--                                      + COALESCE(ios.leaf_ghost_CNT               ,0)
                                        ---------------------------------
                                        + COALESCE(xis.row_delete_attempts          ,0) -- InMemory
      --------------------------------
      ,ops_total_page_split_CNT       =   COALESCE(ios.leaf_allocation_CNT    ,0)
                                        + COALESCE(ios.nonleaf_allocation_CNT ,0)
                                        + COALESCE(ios.column_value_push_off_row_CNT,0)
                                        + COALESCE(xis.page_split_CNT               ,0) -- InMemory
                                        + COALESCE(xis.key_split_CNT                ,0) -- InMemory
      --------------------------------
      ,ops_total_page_merge_CNT       =   COALESCE(ios.leaf_page_merge_CNT          ,0)
                                        + COALESCE(ios.nonleaf_page_merge_CNT       ,0)
                                        + COALESCE(ios.column_value_pull_in_row_CNT ,0)
                                        + COALESCE(xis.page_merge_CNT               ,0) -- InMemory
                                        + COALESCE(xis.key_merge_CNT                ,0) -- InMemory
                                        + COALESCE(xis.page_consolidation_CNT       ,0) -- InMemory
      /********************************************************************************/
      ,reserved_page_PG_CNT           = IIF(  COALESCE(xis.allocated_bytes,0) / 8192.0    -- InMemory
                                            > COALESCE(tgt.reserved_page_PG_CNT,0)
                                           ,COALESCE(xis.allocated_bytes,0) / 8192.0      -- InMemory
                                           ,COALESCE(tgt.reserved_page_PG_CNT,0))
      --------------------------------
      ,used_page_PG_CNT               = IIF(  CEILING(COALESCE(xis.used_bytes,0) / 8192.0) -- InMemory
                                            > COALESCE(tgt.used_page_PG_CNT,0)
                                           ,CEILING(COALESCE(xis.used_bytes,0) / 8192.0)  -- InMemory
                                           ,COALESCE(tgt.used_page_PG_CNT,0))
      /********************************************************************************/
      ,buffer_total_KB_CNT            = IIF(  COALESCE(xis.allocated_bytes,0) / 1024.0    -- InMemory
                                            > COALESCE(tgt.buffer_total_KB_CNT,0)
                                           ,COALESCE(xis.allocated_bytes,0) / 1024.0      -- InMemory
                                           ,COALESCE(tgt.buffer_total_KB_CNT,0))
      --------------------------------
      ,buffer_free_KB_CNT             = IIF(  (COALESCE(xis.allocated_bytes,0) - COALESCE(xis.used_bytes,0)) / 1024.0 -- InMemory
                                            > COALESCE(tgt.buffer_free_KB_CNT,0)
                                           ,(COALESCE(xis.allocated_bytes,0) - COALESCE(xis.used_bytes,0)) / 1024.0   -- InMemory
                                           ,COALESCE(tgt.buffer_free_KB_CNT,0))
/*** LOCAL TESTING ***
SELECT COUNT(1)
--*/
  FROM [##SQLXL_Index_Startup] AS sis
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS tgt -- index level composite record
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_index_operational_stats] AS ios
    ON tgt.database_id = ios.database_id
   AND tgt.object_id   = ios.object_id
   AND tgt.index_id    = ios.index_id
   AND tgt.type   NOT IN (N'F' -- foreign key constraint
                         ,N'M' -- missing nonclustered rowstore index
                         )     -- avoids overlapping index IDs for FKC, MIX
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_index_usage_stats]       AS ius
    ON tgt.database_id = ius.database_id
   AND tgt.object_id   = ius.object_id
   AND tgt.index_id    = ius.index_id
   AND tgt.type   NOT IN (N'F' -- foreign key constraint
                         ,N'M' -- missing nonclustered rowstore index
                         )     -- avoids overlapping index IDs for FKC, MIX
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_missing_index_details]   AS mix
    ON tgt.database_id = mix.database_id
   AND tgt.object_id   = mix.object_id
   AND tgt.index_id    = mix.index_handle
   AND tgt.type        = N'M'  -- missing nonclustered rowstore index. avoids overlapping index IDs
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_xtp_index_stats]         AS xis
    ON tgt.database_id = xis.database_id
   AND tgt.object_id   = xis.object_id
   AND tgt.index_id    = xis.index_id
   AND tgt.type        = xis.type
   AND tgt.type   NOT IN (N'F' -- foreign key constraint
                         ,N'M' -- missing nonclustered rowstore index
                         )     -- avoids overlapping index IDs for FKC, MIX
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats] AS rgos
    ON tgt.database_id = rgos.database_id
   AND tgt.object_id   = rgos.object_id
   AND tgt.index_id    = rgos.index_id
   AND tgt.type       IN (N'5' -- Clustered columnstore
                         ,N'6' -- nonclustered columnstore index
                         ) -- avoids overlapping index IDs for FKC, MIX
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update metrics - Usage, Operational, missing index, row group operational'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - indexes with WRITEs and Zero READs. Final partition count update
/******************************************************************************************************************************************/
UPDATE [##SQLXL_Index_Compilation]
   SET
       ius_no_read_user_updates_CNT = IIF(ius_user_updates_CNT > 0 AND ius_user_read_CNT  = 0,ius_user_updates_CNT,0)
      ,ops_no_read_total_write_CNT  = IIF(ops_total_write_CNT  > 0 AND ops_total_read_CNT = 0,ops_total_write_CNT ,0)
      ,partition_CNT                = CASE WHEN ios_partition_CNT > 0 THEN ios_partition_CNT
                                           WHEN partition_CNT     > 0 THEN partition_CNT
                                           WHEN cs_partition_CNT  > 0 THEN cs_partition_CNT
                                           ELSE 0
                                      END
  FROM [##SQLXL_Index_Compilation]
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update indexes with WRITEs and Zero READs, partition counts'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Parent partition information, using HEAP or CLUSTERED values
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/

       partition_CNT                     = CASE WHEN hoc.cs_partition_CNT  > 0 THEN hoc.cs_partition_CNT
                                                WHEN hoc.ios_partition_CNT > 0 THEN hoc.ios_partition_CNT
                                                WHEN hoc.partition_CNT     > 0 THEN hoc.partition_CNT
                                                ELSE 0
                                           END
      ,partition_Column_ID               = hoc.partition_Column_ID
      ,partition_Column_Name             = hoc.partition_Column_Name
      ,partition_schemes_function_id     = hoc.partition_schemes_function_id
      ,partition_schemes_name            = hoc.partition_schemes_name
      ,partition_function_id             = hoc.partition_function_id
      ,partition_function_name           = hoc.partition_function_name
      ,partition_function_type           = hoc.partition_function_type
      ,partition_function_type_desc      = hoc.partition_function_type_desc
      ,partition_function_fanout         = hoc.partition_function_fanout
      ,partition_function_boundary_value = hoc.partition_function_boundary_value
      ,partition_function_is_system      = hoc.partition_function_is_system
      ,partition_function_create_DTTM    = hoc.partition_function_create_DTTM
      ,partition_function_modify_DTTM    = hoc.partition_function_modify_DTTM
      --------------------------------------------------------------------------------------------------------------------------------------
      -- average table rows size - computed here in order to make sure all reserved sizes are captured, especially in memory
      --------------------------------------------------------------------------------------------------------------------------------------
      ,tbl_row_size_byte_AVG            = IIF(hoc.row_CNT > 0
                                             ,(8192.0 * hoc.reserved_page_PG_CNT) / hoc.row_CNT
                                             ,NULL)
      ,tbl_is_empty                     = IIF(ISNULL(hoc.row_CNT,0) = 0,1,0)

  FROM (-- Parent objects only
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type NOT IN (N'A'  -- instance level composite record
                               ,N'D'  -- database level composite record
                               ,N'I') -- Index level
       ) AS tgt
  JOIN [##SQLXL_Index_Compilation] AS hoc
    ON tgt.database_id = hoc.database_id
   AND tgt.object_id   = hoc.object_id
   AND hoc.type       IN (N'0'  -- rowstore heap
                         ,N'1'  -- clustered rowstore index
                         ,N'5') -- clustered columnstore
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update Parent partition information, using HEAP or CLUSTERED values'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- [##SQLXL_Index_additional_key_selectivity] to identify additional keys don't improve selectivity much (1 out of 3 ain't bad).
/******************************************************************************************************************************************/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_additional_key_selectivity];
END TRY
BEGIN CATCH
END CATCH

SELECT dv1.database_id
      ,dv1.object_id
      ,dv1.index_ID
      ,ic.type
      ,dlt    = [dbo].[SQLXL_3SD](dv1.Row_ID,N'I')
              + N'('
              + [dbo].[SQLXL_3SD](dv1.All_Density / dv0.All_Density,N'%') -- divide by zero handled by JOIN clause below
              + N')'
      ,row_id = ROW_NUMBER() OVER (PARTITION BY dv1.database_id
                                            ,dv1.object_id
                                            ,dv1.index_ID
                                    ORDER BY dv1.Row_ID
                               )
  INTO [##SQLXL_Index_additional_key_selectivity]
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT dv1.database_id
      ,dv1.object_id
      ,dv1.index_ID
      ,dlt    = [dbo].[SQLXL_3SD](dv1.Row_ID,N'I')
              + N'('
              + [dbo].[SQLXL_3SD](dv1.All_Density / dv0.All_Density,N'%') -- divide by zero handled by JOIN clause below
              + N')'
      ,row_id = ROW_NUMBER() OVER (PARTITION BY dv1.database_id
                                            ,dv1.object_id
                                            ,dv1.index_ID
                                    ORDER BY dv1.Row_ID
                               )
--*/
  FROM [##SQLXL_Index_sys_ShowStatistics_DensityVector] AS dv1
  JOIN [##SQLXL_Index_sys_index_columns]                AS ic
    ON dv1.database_id  = ic.database_id
   AND dv1.object_id    = ic.object_id
   AND dv1.index_ID     = ic.index_ID
   AND dv1.Row_ID       = ic.key_column_sequence
   AND 0                = ic.is_included_column      -- only KEY index elements are to be compared
  JOIN [##SQLXL_Index_sys_ShowStatistics_DensityVector] AS dv0
    ON dv1.database_id  = dv0.database_id
   AND dv1.object_id    = dv0.object_id
   AND dv1.index_ID     = dv0.index_ID
   AND (dv1.Row_ID - 1) = dv0.row_id
   AND 0.0              < dv0.All_Density            -- avoide divide by zero below
 WHERE 1 = 1
   AND dv1.All_Density / dv0.All_Density > 1.0 / 3.0 -- if more then 1/3 of previous keys records returned
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update index records - additional keys don''t improve selectivity - support'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_additional_key_selectivity
    ON [##SQLXL_Index_additional_key_selectivity]
      (database_id
      ,object_id
      ,index_ID
      ,row_id
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Indexed [##SQLXL_Index_additional_key_selectivity]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - indexes without activity and low key additional selectivity
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,
--*/
       is_activity_for_period = IIF(   COALESCE(tgt.ius_user_total_CNT    ,0) > 0
                                    OR COALESCE(tgt.ops_total_contacts_CNT,0) > 0
                                   ,1
                                   ,0)
      ,low_selectivity_additional_keys
       = (-- List of keys not making the index that much more selective
          SELECT  CASE WHEN d.row_id      = 1 THEN             N'Key Selectivity LO > '
                       WHEN d.row_id % 13 = 0 THEN NCHAR(167) + N'> ' -- add line feed after every 12 key values to wrap in cell
                       ELSE N' '
                  END
                + d.dlt
             FROM [##SQLXL_Index_additional_key_selectivity] AS d
            WHERE tgt.database_id = d.database_id
              AND tgt.object_id   = d.object_id
              AND tgt.index_ID    = d.index_ID
              AND tgt.type        = d.type
            ORDER BY
                  d.row_id
              FOR XML PATH(N''), TYPE
           ).value('(./text())[1]',N'NVARCHAR(MAX)')
  FROM [##SQLXL_Index_Compilation] AS tgt
 WHERE tgt.rec_type                  = N'I'    -- index level composite record
   AND tgt.type                     IN (N'1'   -- clustered rowstore index
                                       ,N'2'   -- nonclustered rowstore index
                                       )
   AND tgt.obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                       ,N'IT'  -- system internal table
                                       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update indexes without activity and low key additional selectivity'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Identify indexes, Primary Keys, Foreign Keys that are "system named"
/******************************************************************************************************************************************/
UPDATE tgt
   SET is_system_named = 1

/*** LOCAL TESTING ***
SELECT tgt.database_name
      ,tgt.obj_name
      ,tgt.obj_name
      ,name
      ,object_id
      ,is_system_named
--*/

  FROM [##SQLXL_Index_Compilation] AS tgt
 WHERE rec_type = N'I'                                        -- index level composite record
   AND (   (   (    LEFT(name,2) = N'PK'
                AND CHARINDEX(N'__',name, 3) = 3
                AND (   CHARINDEX(N'__',REVERSE(name),1) = 9
                     OR CHARINDEX(N'__',REVERSE(name),1) = 17
                    )
               )
            OR (    LEFT(name,2) = N'FK'
                AND CHARINDEX(N'__',name, 3) = 3
                AND CHARINDEX(N'__',name,14) = 14
                AND CHARINDEX(N'__',name,21) = 21
               )
            OR (    LEFT(name,3) = N'UQ_'
                AND CHARINDEX(N'__',name, 3) = 3
                AND CHARINDEX(N'__',name,13) = 13
                AND LEN(name)                = 30
               )
           )
        OR is_system_named = 1
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Identified "system named" indexes, Primary Keys, Foreign Keys'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Table Check & Default Constraints
/******************************************************************************************************************************************/
UPDATE tgt
   SET constraints = STUFF(chk.constraints,1,1,N'')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS tgt  -- parent level composite record
  JOIN (-- Column-level Check Constraints
        SELECT cc.database_id
              ,cc.parent_object_id
              ,(-- check constraints for this table - full definitions.
                -- FOR XML PATH used since there can be multiple constraints on a column. STUFF applied above
                SELECT  NCHAR(167)
                      + IIF(cx.parent_column_id = 0,N'TBL ',N'')
                      + IIF(cx.type = N'C'                       -- Check constraint
                           ,N'CHK '
                           ,N'DEF ')
                      + IIF(cx.parent_column_id = 0,N'CON: ',N'COL: ' + QUOTENAME(c.name))
                      + NCHAR(167)
                      + N'> Name: ' + QUOTENAME(cx.name)
                      + NCHAR(167)
                      + N'> Defn: ' + cx.definition
                  FROM [##SQLXL_Index_sys_objects] AS cx
                  LEFT OUTER
                  JOIN [##SQLXL_Index_column]      AS c
                    ON cx.database_id      = c.database_id
                   AND cx.parent_object_id = c.object_id
                   AND cx.parent_column_id = c.column_id
                 WHERE cc.database_id      = cx.database_id
                   AND cc.parent_object_id = cx.parent_object_id
                   AND cc.parent_column_id = cx.parent_column_id
                   FOR XML PATH (N''), TYPE
               ).value('(./text())[1]',N'NVARCHAR(MAX)') AS constraints
          FROM (-- list of tables with check constraints - get one record per table in case of multiple constraints
                SELECT database_id
                      ,parent_object_id
                      ,parent_column_id
                  FROM [##SQLXL_Index_sys_objects]
                 WHERE type IN (N'C' -- check constraint
                               ,N'D' -- default constraint
                               )
                 GROUP BY
                       database_id
                      ,parent_object_id
                      ,parent_column_id
               ) AS cc
          LEFT OUTER
          JOIN (-- indexed columns - used to exclude here since will be covered in each index they occur below
                SELECT database_id
                      ,object_id
                      ,column_id
                  FROM [##SQLXL_Index_sys_index_columns]
                 GROUP BY
                       database_id
                      ,object_id
                      ,column_id
               ) AS ic
            ON cc.database_id      = ic.database_id
           AND cc.parent_object_id = ic.object_id
           AND cc.parent_column_id = ic.column_id
         WHERE ic.column_id IS NULL
            OR cc.parent_column_id = 0
       ) AS chk
    ON tgt.database_id      = chk.database_id
   AND tgt.parent_object_id = chk.parent_object_id
   AND tgt.object_id        = chk.parent_object_id
OPTION (MAXDOP 1,RECOMPILE,FORCE ORDER); -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Check & Default Constraint Definitions'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Check Index & Default Constraint Definitions',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Index Check & Default Constraints
/******************************************************************************************************************************************/
UPDATE tgt
   SET constraints = STUFF(chk.constraints,1,1,N'')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS tgt -- index level composite record
  JOIN (-- Column-level Check Constraints
        SELECT cc.database_id
              ,cc.parent_object_id
              ,ic.index_id
              ,ic.type
              ,(-- check constraints for this table - full definitions.
                -- FOR XML PATH used since there can be multiple constraints on a column. STUFF applied above
                SELECT  NCHAR(167)
                      + IIF(cx.type = N'C' -- Check constraint
                           ,N'CHK '
                           ,N'DEF ')
                      + IIF(cx.parent_column_id = 0,N'CON: ',N'COL: ' + QUOTENAME(c.name))
                      + NCHAR(167)
                      + N'> Name: ' + QUOTENAME(cx.name)
                      + NCHAR(167)
                      + N'> Defn: ' + cx.definition
                  FROM [##SQLXL_Index_sys_objects] AS cx
                  LEFT OUTER
                  JOIN [##SQLXL_Index_column]      AS c
                    ON cx.database_id      = c.database_id
                   AND cx.parent_object_id = c.object_id
                   AND cx.parent_column_id = c.column_id
                 WHERE cc.database_id      = cx.database_id
                   AND cc.parent_object_id = cx.parent_object_id
                   AND cc.parent_column_id = cx.parent_column_id
                   FOR XML PATH (N''), TYPE
               ).value('(./text())[1]',N'NVARCHAR(MAX)') AS constraints
          FROM (-- list of tables with check constraints - get one record per table in case of multiple constraints
                SELECT database_id
                      ,parent_object_id
                      ,parent_column_id
                  FROM [##SQLXL_Index_sys_objects]
                 WHERE type IN (N'C' -- check constraint
                               ,N'D' -- default constraint
                               )
                   AND parent_column_id > 0
                 GROUP BY
                       database_id
                      ,parent_object_id
                      ,parent_column_id
               ) AS cc
         INNER MERGE
          JOIN [##SQLXL_Index_sys_index_columns] AS ic
            ON cc.database_id      = ic.database_id
           AND cc.parent_object_id = ic.object_id
           AND cc.parent_column_id = ic.column_id
       ) AS chk
    ON tgt.database_id      = chk.database_id
   AND tgt.parent_object_id = chk.parent_object_id
   AND tgt.object_id        = chk.parent_object_id
   AND tgt.index_id         = chk.index_id
   AND tgt.type             = chk.type
OPTION (MAXDOP 1,RECOMPILE,FORCE ORDER); -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Check Index & Default Constraint Definitions'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Check if Table has Computed Columns
/******************************************************************************************************************************************/
UPDATE tgt
   SET constraints = COALESCE(tgt.constraints,N'') + chk.computed_column
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS tgt  -- parent level composite record
  JOIN (-- Computed columns
        SELECT cc.database_id
              ,cc.object_id
              ,(-- Computed constraints for this column - full definitions.
                -- FOR XML PATH used since there can be multiple constraints on a column. STUFF applied above
                SELECT  NCHAR(167)
                      + QUOTENAME(cx.name) + N' CCOL:'
                      + IIF(cx.uses_sql_proc = 1,N' *PROCEDURE*' ,N'')
                      + IIF(cx.uses_sql_ftn  = 1,N' *FUNCTION*'  ,N'')
                      + IIF(cx.uses_sql_mthd = 1,N' *SQL METHOD*',N'')
                      + N' ' + cx.definition
                      + IIF(cx.is_persisted = 0 OR cx.uses_database_collation = 0
                           , NCHAR(167)
                           + STUFF(-- Strip off leading unnecessary characters
                                    IIF(cx.is_persisted = 0           ,N' NOT PERSISTED'  ,N'')
                                  + IIF(cx.uses_database_collation = 0,N' NOT DB COLLATED',N'')
                                  ,1,1,N'')
                          ,N'')
                  FROM [##SQLXL_Index_sys_columns] AS cx
                  JOIN [##SQLXL_Index_sys_objects] AS cxo
                    ON cx.database_id = cxo.database_id
                   AND cx.object_id   = cxo.object_id
                 WHERE cc.database_id = cx.database_id
                   AND cc.object_id   = cx.object_id
                   FOR XML PATH (N''), TYPE
               ).value('(./text())[1]',N'NVARCHAR(MAX)') AS computed_column
          FROM (-- list of columns with check constraints - get one record per column in case of multiple constraints
                SELECT cc.database_id
                      ,cc.object_id
                  FROM [##SQLXL_Index_sys_columns] AS cc
                 WHERE cc.definition IS NOT NULL
                   AND (   uses_sql_proc = 1
                        OR uses_sql_ftn  = 1
                        OR uses_sql_mthd = 1
                       )
                 GROUP BY
                       cc.database_id
                      ,cc.object_id
               ) AS cc
       ) AS chk
    ON tgt.database_id = chk.database_id
   AND tgt.object_id   = chk.object_id
OPTION (MAXDOP 1,RECOMPILE,FORCE ORDER); -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Check if Table has Computed Columns using SQL procedures, functions, or methods'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Consolidate contraints - Key Constraints
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT
--*/
       constraints = STUFF(-- Strip off leading unnecessary characters
                           (--
                            SELECT  NCHAR(167) + QUOTENAME(kx.type + N'C')
                                  + IIF(kx.is_enforced = 0,N' *NOT ENFORCED* ',N'')
                                  + N' ' + kx.name
                              FROM [##SQLXL_Index_sys_objects] AS kx
                             WHERE tgt.database_id = kx.database_id
                               AND tgt.object_id   = kx.parent_object_id
                               AND tgt.index_id    = kx.key_unique_index_id
                               AND N'F'           <> kx.type                -- foreign key constraint
                               FOR XML PATH(N''), TYPE
                           ).value('(./text())[1]',N'NVARCHAR(MAX)')
                          ,1,1,N'')
  FROM [##SQLXL_Index_Compilation] AS tgt
  JOIN (--
        SELECT database_id
              ,parent_object_id                -- target table object id
              ,key_unique_index_id
          FROM [##SQLXL_Index_sys_objects]
         WHERE key_unique_index_id IS NOT NULL
           AND type <> N'F'                    -- foreign key constraint
         GROUP BY
               database_id
              ,parent_object_id
              ,key_unique_index_id
       ) AS kc
    ON tgt.database_id = kc.database_id
   AND tgt.object_id   = kc.parent_object_id
   AND tgt.index_id    = kc.key_unique_index_id
 WHERE tgt.rec_type = N'I'  -- index level composite record
   AND tgt.type    IN (N'1' -- clustered rowstore index
                      ,N'2' -- nonclustered rowstore index
                      )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Consolidated Key Constraints'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Consolidate contraints - Cpmputed COlumns
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT
--*/
       -- NOTE: after "*/" this must be a new line, else syntax error
       constraints = COALESCE(constraints + NCHAR(167),N'') + STUFF(c.txt,1,1,N'')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS tgt -- index level composite record
  JOIN (--
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_column]            AS c
            ON ic.database_id = c.database_id
           AND ic.object_id   = c.object_id
           AND ic.Column_ID   = c.column_id
         WHERE c.computed_column_definition IS NOT NULL
         GROUP BY
               ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
       ) AS ic
     ON ic.database_id = tgt.database_id
    AND ic.object_id   = tgt.object_id
    AND ic.index_id    = tgt.index_id
    AND ic.type        = tgt.type
 CROSS
 APPLY (-- double select to accomodate .value('(./text())[1]',N'NVARCHAR(MAX)') below
        SELECT(--
               SELECT  COALESCE(NCHAR(167) + QUOTENAME(c2.name) + N' CCOL: ' + c2.computed_column_definition,N'')
                 FROM [##SQLXL_Index_sys_index_columns] AS ic2
                 JOIN [##SQLXL_Index_column]            AS c2
                   ON ic2.database_id = c2.database_id
                  AND ic2.object_id   = c2.object_id
                  AND ic2.Column_ID   = c2.column_id
                WHERE ic.database_id  = ic2.database_id
                  AND ic.object_id    = ic2.object_id
                  AND ic.index_id     = ic2.index_id
                  AND ic.type         = ic2.type
                  FOR XML PATH(N''), TYPE
              ).value('(./text())[1]',N'NVARCHAR(MAX)')
       ) AS c(txt)
 WHERE tgt.rec_type = N'I'   -- index level composite record
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Incorporate Column Constraints'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Consolidate contraints - Parent Edge Constraints
/******************************************************************************************************************************************/
UPDATE tgt
   SET constraints = COALESCE(constraints + NCHAR(167),N'')
                   + STUFF(chk.chkcon,1,1,N'')
  FROM [##SQLXL_Index_Compilation] AS tgt
  JOIN (-- table-level Check Constraints

/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
--*/
        SELECT cc.database_id
              ,cc.parent_object_id
              ,(-- get check constraint names for this table. [STUFF] function applied above
                SELECT  NCHAR(167) +cx.typ + N':'
                      + NCHAR(32) + QUOTENAME(LTRIM(RTRIM(cx.name)))
                      + COALESCE(IIF(cx.definition LIKE '%~].~[%' ESCAPE '~',N' ,*FTN*',N'')
                                +IIF(cx.is_disabled             = 1,N' ,DISABLED'    ,N'')
                                +IIF(cx.is_not_for_replication  = 1,N' ,NOT_REPL'    ,N'')
                                +IIF(cx.is_not_trusted          = 1,N' ,NOT TRUSTED' ,N'')
                                +IIF(cx.is_system_named         = 1,N' ,SYSTEM_NAMED',N'')
                                +IIF(cx.uses_database_collation = 0,N' ,NON-DB_COLL' ,N'')
                                +IIF(cx.delete_referential_action_desc IS NOT NULL
                                                                   ,N' ,DEL_REF ' +cx.delete_referential_action_desc,N'')
                                +IIF(cxo.is_published           = 1,N' ,PBLSHD'      ,N'')
                                +IIF(cxo.is_schema_published    = 1,N' ,SCH_PBLSHD'  ,N'')
                                ,N'')
                      + N' ' + LTRIM(RTRIM(cx.definition))
                  FROM (--
                        SELECT typ = N'EDG'
                              ,database_id
                              ,parent_object_id
                              ,object_id
                              ,type
                              ,type_desc
                              ,name
                              ,parent_column_id        = NULL
                              ,definition              = NULL
                              ,is_disabled
                              ,is_not_for_replication  = NULL
                              ,is_not_trusted
                              ,delete_referential_action
                              ,delete_referential_action_desc
                              ,uses_database_collation = NULL
                              ,is_system_named
                          FROM [##SQLXL_Index_sys_edge_constraints]  AS cx
                         WHERE cc.database_id      = cx.database_id
                           AND cc.parent_object_id = cx.parent_object_id
                       ) AS cx
                  JOIN [##SQLXL_Index_sys_objects] AS cxo
                    ON cx.database_id = cxo.database_id
                   AND cx.object_id   = cxo.object_id
                 ORDER BY
                       cx.object_id
                   FOR XML PATH (N''), TYPE
               ).value('(./text())[1]',N'NVARCHAR(MAX)')
          FROM (-- list of tables (parent objects) with check constraints
                SELECT cc.database_id
                      ,cc.parent_object_id
                  FROM [##SQLXL_Index_sys_objects] cc
                 WHERE cc.parent_column_id = 0            -- table constraint
                 GROUP BY
                       cc.database_id
                      ,cc.parent_object_id
               ) AS cc
       ) chk (database_id
             ,parent_object_id
             ,chkcon
             )
    ON tgt.database_id = chk.database_id
   AND tgt.object_id   = chk.parent_object_id
   AND tgt.index_id    = chk.parent_object_id
 WHERE rec_type = N'P'                                    -- parent level composite record
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Incorporate Parent Constraints'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Add Extended Properties',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
Update - [##SQLXL_Index_Compilation] - Incorporate Extended Properties for all objects.
Column "value" previously converted to NVARCHAR(MAX)
Class:  0 = Database
        1 = Object or column
        2 = Parameter
        3 = Schema
        4 = Database principal
        5 = Assembly
        6 = Type
        7 = index
        8 = User defined table type column
       10 = XML schema collection
       15 = Message type
       16 = Service contract
       17 = Service
       18 = Remote service binding
       19 = Route
       20 = Dataspace (filegroup or partition scheme)
       21 = Partition function -- <future> add
       22 = Database file
       27 = Plan guide
\******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT
--*/
       extended_properties = STUFF(-- Strip off leading unnecessary characters
                                     COALESCE((-- Database
                                              SELECT NCHAR(10) + N'Database: ' + ep.name + N': ' + ep.value
                                                FROM [##SQLXL_Index_sys_extended_properties] AS ep
                                               WHERE tgt.database_id = ep.database_id
                                                 AND 0               = ep.class
                                                 AND 0               = ep.major_id
                                                 AND 0               = ep.minor_id
                                                 AND tgt.rec_type    = N'D' -- database level composite record
                                               ORDER BY
                                                     ep.name
                                                    ,ep.value
                                                 FOR XML PATH(N''), TYPE
                                             ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                            ,N'')

                                  + COALESCE((-- Parent schema
                                              SELECT NCHAR(10) + N'Schema: ' + ep.name + N': ' + ep.value
                                                FROM [##SQLXL_Index_sys_extended_properties] AS ep
                                               WHERE tgt.database_id = ep.database_id
                                                 AND 3               = ep.class
                                                 AND tgt.schema_id   = ep.major_id
                                                 AND 0               = ep.minor_id
                                                 AND tgt.rec_type    = N'P'                         -- parent level composite record
                                               ORDER BY
                                                     ep.name
                                                    ,ep.value
                                                 FOR XML PATH(N''), TYPE
                                             ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                             ,N'')

                                  + COALESCE((-- Parent object
                                              SELECT NCHAR(10) + ep.name + N': ' + ep.value
                                                FROM [##SQLXL_Index_sys_extended_properties] AS ep
                                               WHERE tgt.database_id      = ep.database_id
                                                 AND 1                    = ep.class
                                                 AND tgt.parent_object_id = ep.major_id
                                                 AND 0                    = ep.minor_id
                                                 AND tgt.rec_type         = N'P'                    -- parent level composite record
                                               ORDER BY
                                                     ep.name
                                                    ,ep.value
                                                 FOR XML PATH(N''), TYPE
                                             ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                             ,N'')

                                  + COALESCE((-- Foreign Key Constraints
                                              SELECT NCHAR(10) + ep.name + N': ' + ep.value
                                                FROM [##SQLXL_Index_sys_extended_properties] AS ep
                                               WHERE tgt.database_id = ep.database_id
                                                 AND 1               = ep.class
                                                 AND tgt.object_id   = ep.major_id
                                                 AND 0               = ep.minor_id
                                                 AND tgt.rec_type    = N'I' -- index level composite record
                                                 AND tgt.type        = N'F' -- foreign key constraint
                                               ORDER BY
                                                     ep.name
                                                    ,ep.value
                                                 FOR XML PATH(N''), TYPE
                                             ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                             ,N'')

                                  + COALESCE((-- Indexes
                                              SELECT NCHAR(10) + ep.name + N': ' + ep.value
                                                FROM [##SQLXL_Index_sys_extended_properties] AS ep
                                               WHERE tgt.database_id      = ep.database_id
                                                 AND 7                    = ep.class
                                                 AND tgt.parent_object_id = ep.major_id
                                                 AND tgt.index_id         = ep.minor_id
                                                 AND tgt.rec_type         = N'I'                    -- index level composite record
                                               ORDER BY
                                                     ep.name
                                                    ,ep.value
                                                 FOR XML PATH(N''), TYPE
                                             ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                             ,N'')

                                  + COALESCE((-- Index Key & Included Columns
                                              SELECT  NCHAR(10) + QUOTENAME(c.name) + N' ' + ep.name + N': ' + ep.value
                                                FROM [##SQLXL_Index_sys_index_columns]       AS ic
                                                JOIN [##SQLXL_Index_sys_columns]             AS c
                                                  ON ic.database_id = c.database_id
                                                 AND ic.object_id   = c.object_id
                                                 AND ic.column_id   = c.column_id
                                                JOIN [##SQLXL_Index_sys_extended_properties] AS ep
                                                  ON ic.database_id  = ep.database_id
                                                 AND 1               = ep.class
                                                 AND ic.object_id    = ep.major_id
                                                 AND ic.column_id    = ep.minor_id
                                               WHERE tgt.database_id = ic.database_id
                                                 AND tgt.object_id   = ic.object_id
                                                 AND tgt.index_id    = ic.index_id
                                                 AND tgt.type        = ic.type
                                               ORDER BY
                                                     ic.key_column_sequence
                                                    ,c.name
                                                 FOR XML PATH(N''), TYPE
                                             ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                             ,N'')
                                  ,1,1,N'') COLLATE DATABASE_DEFAULT
  FROM [##SQLXL_Index_Compilation] AS tgt
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Add Extended Properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Referenced Foreign Keys, Referred Foreign Key Constraints, & Index Covers
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT tgt.database_id
      ,tgt.object_id
      ,tgt.index_id
      ,tgt.type,
--*/
       ---------------------------------------------------------------------------------------------
       -- Foreign Key Constraint reference
       ---------------------------------------------------------------------------------------------
       fkc_reference = (-- get Foreign Key Constraint referenced schema + table + column(s)
                        SELECT  N'SCH '
                              + QUOTENAME(ref_obj.schema_name)
                              + NCHAR(167)
                              + N'TBL '
                              + QUOTENAME(ref_obj.name)
                              + NCHAR(167)
                              + N'COL '
                              + STUFF(-- Strip off leading unnecessary characters
                                      (-- loop through columns in foreign key since can have more than one
                                       SELECT  NCHAR(167)
                                             + N'        ,'         -- extra space added for multi-column display in spreadsheet
                                             + QUOTENAME(eix.name)
                                         FROM [##SQLXL_Index_sys_foreign_key_columns] AS fkc
                                         JOIN [##SQLXL_Index_column]                  AS eix
                                           ON fkc.database_id          = eix.database_id
                                          AND fkc.referenced_object_id = eix.object_id
                                          AND fkc.referenced_column_id = eix.column_id
                                        WHERE tgt.database_id = fkc.database_id
                                          AND tgt.object_id   = fkc.constraint_object_id
                                        ORDER BY
                                              fkc.constraint_column_id
                                          FOR XML PATH(N''), TYPE -- can be more than 1 column in foreign key
                                      ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                     ,1,10,N'')
                         WHERE tgt.type = N'F' -- foreign key constraint
                       )
      -----------------------------------------------------------------------------------------------------
      -- For referenced indexes, count the number of referred/parent Foreign Key Constraints referring to it
      -----------------------------------------------------------------------------------------------------
      ,rk_referencing_fkc_CNT                = COALESCE(fkc_ref.rk_referencing_fkc_CNT               ,0)
      ,rk_referencing_fkc_disabled_CNT       = COALESCE(fkc_ref.rk_referencing_fkc_disabled_CNT      ,0)
      ,rk_referencing_fkc_not_replicated_CNT = COALESCE(fkc_ref.rk_referencing_fkc_not_replicated_CNT,0)
      ,rk_referencing_fkc_not_trusted_CNT    = COALESCE(fkc_ref.rk_referencing_fkc_not_trusted_CNT   ,0)
      ,rk_referencing_fkc_action_none_CNT    = COALESCE(fkc_ref.rk_referencing_fkc_action_none_CNT   ,0)
      ,rk_referencing_fkc_action_cascade_CNT = COALESCE(fkc_ref.rk_referencing_fkc_action_cascade_CNT,0)
      ,rk_referencing_fkc_action_null_CNT    = COALESCE(fkc_ref.rk_referencing_fkc_action_null_CNT   ,0)
      ,rk_referencing_fkc_action_default_CNT = COALESCE(fkc_ref.rk_referencing_fkc_action_default_CNT,0)
      ,rk_referencing_fkc_system_named_CNT   = COALESCE(fkc_ref.rk_referencing_fkc_system_named_CNT  ,0)
  FROM (-- rowstore indexes and foreign keys
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'  -- index level composite record
           AND type    IN (N'1' -- clustered rowstore index
                          ,N'2' -- nonclustered rowstore index
                          ,N'F' -- foreign key constraint
                          )
       ) AS tgt
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS fkc_par
    ON tgt.database_id = fkc_par.database_id
   AND tgt.object_id   = fkc_par.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS ref_obj                    -- cross reference to get referenced object properties
    ON fkc_par.database_id          = ref_obj.database_id
   AND fkc_par.referenced_object_id = ref_obj.object_id
  LEFT OUTER
  JOIN (-- get count of Foreign Key Constraints ("Parent" or referring) to each referenced table and unique index
        SELECT database_id
              ,referenced_object_id
              ,referenced_index_id                  = key_index_id
              ------------------------------------------------------------------------------------
              ,rk_referencing_fkc_CNT                = COUNT(1)
              ,rk_referencing_fkc_disabled_CNT       = SUM(IIF(is_disabled               = 1,1,0))
              ,rk_referencing_fkc_not_replicated_CNT = SUM(IIF(is_not_for_replication    = 1,1,0))
              ,rk_referencing_fkc_not_trusted_CNT    = SUM(IIF(is_not_trusted            = 1,1,0))
              ,rk_referencing_fkc_action_none_CNT    = SUM(IIF(delete_referential_action = 0,1,0))
              ,rk_referencing_fkc_action_cascade_CNT = SUM(IIF(delete_referential_action = 1,1,0))
              ,rk_referencing_fkc_action_null_CNT    = SUM(IIF(delete_referential_action = 2,1,0))
              ,rk_referencing_fkc_action_default_CNT = SUM(IIF(delete_referential_action = 3,1,0))
              ,rk_referencing_fkc_system_named_CNT   = SUM(IIF(is_system_named           = 1,1,0))
          FROM [##SQLXL_Index_sys_objects]
         GROUP BY
               database_id
              ,referenced_object_id
              ,key_index_id
       ) AS fkc_ref
    ON tgt.database_id      = fkc_ref.database_id
   AND tgt.parent_object_id = fkc_ref.referenced_object_id
   AND tgt.object_id        = fkc_ref.referenced_object_id
   AND tgt.index_id         = fkc_ref.referenced_index_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Referenced Foreign Keys, Referred Foreign Key Constraints, & Index Covers'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Parent "Referred" Foreign Key Constraints "covered" by indexes and vice-versa',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Parent "Referred" Foreign Key Constraints "covered" by indexes and vice-versa
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.index_id,tgt.type,tgt.name,
--*/
       ---------------------------------------------------------------------------------------------
       -- All indexes covering this Foreign Key
       ---------------------------------------------------------------------------------------------
       fkc_covered_by_idx_IDS        = STUFF(covering_indexes.idx_id,1,1,N'') -- list of all indexes covering this Foreign Key
       ---------------------------------------------------------------------------------------------
       -- Primary index covering this Foreign Key
       ---------------------------------------------------------------------------------------------
      ,fkc_covering_primary_idx_name = covering_index.name     -- name of the "primary" (smallest) index covering the foreign key
      ,fkc_covering_primary_idx_ID   = covering_index.index_id -- id of the "primary" (smallest)index covering the foreign key
      ,fkc_covering_primary_idx_Type = covering_index.type     -- type of the "primary" (smallest)index covering the foreign key
       ---------------------------------------------------------------------------------------------
       -- All Foreign Key Constraints covered by this index
       ---------------------------------------------------------------------------------------------
      ,covered_fkc_IDs               = STUFF(covering_fk.idx_id,1,1,N'')
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'  -- index level composite record
           AND type    IN (N'1' -- clustered rowstore index
                          ,N'2' -- nonclustered rowstore index
                          ,N'F' -- foreign key constraint
                          )
       ) AS tgt
 OUTER APPLY
       (-- Find "best" index covering ALL the Foreign Key Constraint column(s) - not filtered
        -- clustered over Nonclustered, most readest, most narrowest, fewest key columns, and narrowest included columns
        -- Columnstores can't be used for FKC!
        SELECT TOP (1)
               i.index_id
              ,i.type
              ,i.name
              ,i.Key_Columns_CNT
              ,i.ius_user_read_CNT
              ,i.stathdr_Average_Key_Length
              ,i.key_total_datatype_length_bytes
              ,i.inc_total_datatype_length_bytes
          FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i -- index level composite record
         WHERE tgt.type             = N'F'  -- foreign key constraint
           AND tgt.database_id      = i.database_id
           AND tgt.parent_object_id = i.parent_object_id
           AND i.type              IN (N'1' -- clustered rowstore index
                                      ,N'2' -- nonclustered rowstore index
                                      )     -- Columnstores can't be used for FKC!
           AND i.has_filter         = 0           -- can't be filtered since won't cover the whole key
           AND CHARINDEX(tgt.key_column_IDs,i.key_column_IDs) = 1 -- comma separated list of column_ids in the index or foreign key
         ORDER BY
               i.type                             -- use clustered if found
              ,i.is_primary_key              DESC -- Primary Key
              ,i.is_unique_constraint        DESC -- is a CONSTRAINT
              ,i.is_unique                   DESC -- is UNIQUE
              ,i.ius_user_read_CNT           DESC -- most read
              ,i.stathdr_Average_Key_Length  DESC -- biggest
              ,i.Key_Columns_CNT             DESC -- most key elements
              ,i.key_total_datatype_length_bytes          DESC -- widest key
              ,i.inc_total_datatype_length_bytes      -- fewest included columns
              ,i.index_id
       ) covering_index

 OUTER APPLY
       (-- Find all indexes covering all Foreign Key Constraint column(s)
        -- Where:   not filtered
        -- Ordered: clustered over Nonclustered, most readest, most narrowest, fewest key columns,
        --          and narrowest included columns
        -- Columnstores can't be used for FKC!
        SELECT(--
               SELECT TOP (100) PERCENT
                      N',' + QUOTENAME(i.index_id)
                 FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i -- index level composite record
                WHERE tgt.type                 = N'F'  -- foreign key constraint
                  AND tgt.database_id          = i.database_id
                  AND tgt.parent_object_id     = i.parent_object_id
                  AND i.type                  IN (N'1' -- clustered rowstore index
                                                 ,N'2' -- nonclustered rowstore index
                                                 )     -- Columnstores can't be used for FKC!
                  AND i.has_filter             = 0                       -- can't be filtered since won't cover the whole key
                  AND CHARINDEX(tgt.key_column_IDs,i.key_column_IDs) = 1 -- comma separated list of column_ids in the index or foreign key
               ORDER BY
                     i.type                             -- use clustered if found
                    ,i.is_primary_key              DESC -- Primary Key
                    ,i.is_unique_constraint        DESC -- is a CONSTRAINT
                    ,i.is_unique                   DESC -- is UNIQUE
                    ,i.ius_user_read_CNT           DESC -- most read
                    ,i.stathdr_Average_Key_Length  DESC -- biggest
                    ,i.Key_Columns_CNT             DESC -- most key elements
                    ,i.key_total_datatype_length_bytes          DESC -- widest key
                    ,i.inc_total_datatype_length_bytes      -- fewest included columns
                    ,i.index_id
                  FOR XML PATH(N''), TYPE
              ).value('(./text())[1]',N'NVARCHAR(MAX)')
       ) covering_indexes(idx_id)

 OUTER APPLY
       (-- get list of Foreign Key Constraints covered by the index
        -- NOTE - Columnstores can't be used for FKC!
        SELECT(--
               SELECT TOP 100 PERCENT
                      N',' + QUOTENAME(i.object_id)
                 FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i -- index level composite record
                WHERE i.type               = N'F'  -- foreign key constraint
                  AND tgt.type            IN (N'1' -- clustered rowstore index
                                             ,N'2' -- nonclustered rowstore index
                                             )
                  AND tgt.has_filter       = 0           -- can't be filtered since won't cover the whole key
                  AND tgt.database_id      = i.database_id
                  AND tgt.parent_object_id = i.parent_object_id
                  AND CHARINDEX(i.key_column_IDs,tgt.key_column_IDs) = 1 -- comma separated list of column_ids in the index or foreign key
                ORDER BY
                      i.object_id
                  FOR XML PATH(N''), TYPE
              ).value('(./text())[1]',N'NVARCHAR(MAX)')
       ) covering_fk(idx_id)
 WHERE covering_index.index_id IS NOT NULL
    OR covering_indexes.idx_id IS NOT NULL
    OR covering_fk.idx_id      IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Parent "Referred" Foreign Key Constraints "covered" by indexes and vice-versa'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Create table of Synergies between indexes, foreign key constraints, and missing indexes',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Create - [SQLXL_Index_Synergies] - table of Synergies between indexes, foreign key constraints, and missing indexes
-- Compare indexes within a table for synergies, run through candidates looking for match type.
-- match indexes on the "Left" side with columns in indexes in the same table on the "right" side
-- Look for the least "key" columns in both compared records - limits the iterations through SEQUENCE and OVERLAP matches below
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_Synergies];
END TRY
BEGIN CATCH
END CATCH

;WITH ico AS (--
SELECT ic.database_id
      ,parent_object_id = ic.object_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
      ,ic.column_id
      ,ic.key_column_sequence
      ,ic.partition_ordinal
      ,ic.is_included_column
  FROM [##SQLXL_Index_sys_index_columns] AS ic  -- includes missing indexes, indexes on views
  JOIN [##SQLXL_Index_sys_objects]       AS o   -- exclude indexes tied to internal tables
    ON ic.database_id = o.database_id
   AND ic.object_id   = o.object_id
   AND o.type        <> N'IT'                   -- system internal table
UNION ALL
SELECT database_id         = database_id
      ,parent_object_id    = parent_object_id
      ,object_id           = constraint_object_id
      ,index_id            = constraint_object_id
      ,type                = N'F'                 -- foreign key constraint
      ,column_id           = parent_column_id
      ,key_column_sequence = constraint_column_id
      ,partition_ordinal   = 0
      ,is_included_column  = 0
  FROM [##SQLXL_Index_sys_foreign_key_columns]
)
SELECT idx_com.database_id
      ,idx_com.parent_object_id
      --------------------------------------------------------
      ,idx_com.l_object_id
      ,idx_com.l_index_id
      ,idx_com.l_type
      ,lc_key_CNT = idx_com.lc_idx_index_Key_Columns
      --------------------------------------------------------
      ,idx_com.r_object_id
      ,idx_com.r_index_id
      ,idx_com.r_type
      ,rc_key_CNT = idx_com.rc_idx_index_Key_Columns
      --------------------------------------------------------
      ,seq.matching_sequence_CNT
      ,seq.matching_sequence_all_density
      ,matching_sequence_COL      = IIF(   idx_com.l_type = N'F' -- foreign key constraint
                                        OR idx_com.r_type = N'F' -- foreign key constraint
                                       ,N'F.'
                                       ,N'S.')
                                  + seq.matching_sequence_COL
      ,ovl.matching_overlap_CNT
      ,matching_overlap_COL       = N'O.' +ovl.matching_overlap_COL
      ,con.matching_contained_CNT
      ,matching_contained_COL     = N'C.' +con.matching_contained_COL
  INTO [##SQLXL_Index_Synergies]
  FROM (-- find all "indexes" within a table with one or more common "key" columns
        SELECT idx_com.database_id
              ,idx_com.parent_object_id
              ----------------------------------------------------------------
              ,idx_com.l_object_id
              ,idx_com.l_index_id
              ,idx_com.l_type
              ----------------------------------------------------------------
              ,idx_com.r_object_id
              ,idx_com.r_index_id
              ,idx_com.r_type
              ----------------------------------------------------------------
              ,lc_idx_index_Key_Columns = il.Key_Columns_CNT
              ,lc_filter_definition     = il.filter_definition
              ----------------------------------------------------------------
              ,rc_idx_index_Key_Columns = ir.Key_Columns_CNT
              ,rc_filter_definition     = ir.filter_definition
              ------------------------------------------------------------------------------------------------------------------------------
              -- for each common key pair get the least number of key columns to reduce loop execution below
              ------------------------------------------------------------------------------------------------------------------------------
              ,least_col_CNT = (SELECT cnt = MIN(m.cnt) FROM (VALUES (il.Key_Columns_CNT),(ir.Key_Columns_CNT)) m(cnt))
              ----------------------------------------------------------------
              ,il_xml_using_xml_index_id = il.xml_using_xml_index_id
              ,ir_xml_using_xml_index_id = ir.xml_using_xml_index_id
              ,il_xml_secondary_type     = il.xml_secondary_type
              ,ir_xml_secondary_type     = ir.xml_secondary_type
          FROM (-- matching index candidates - only look for synergy if indexes have at least one key column in common
                SELECT DISTINCT -- if multiple columns matching only want 1 reference here
                       l.database_id
                      ,l.parent_object_id
                      -------------------------------------------
                      ,l_object_id            = l.object_id
                      ,l_index_id             = l.index_id
                      ,l_type                 = l.type
                      ,l_partition_ordinal    = l.partition_ordinal
                      -------------------------------------------
                      ,r_object_id            = r.object_id
                      ,r_index_id             = r.index_id
                      ,r_type                 = r.type
                      ,r_partition_ordinal    = r.partition_ordinal
                  FROM ico AS l
                  JOIN ico AS r
                    ON l.database_id                        = r.database_id
                   AND l.parent_object_id                   = r.parent_object_id
                   -- No self referencing
                   AND (    l.index_id                     <> r.index_id      -- no self referencing
                        OR (    l.index_id                  = r.index_id      -- no self referencing, case of matching IDs
                            AND l.type                     <> r.type          -- no self referencing, case of matching IDs
                           )
                       )
                   AND l.column_id                          = r.column_id    -- synergy candidates must have at least 1 column matching
                 WHERE 1 = 1
                   ---------------------------------------------
                   AND l.type <> N'R'                           -- exclude referenced Foreign Key ('R') columns
                   AND r.type <> N'R'                           -- exclude referenced Foreign Key ('R') columns
                   ---------------------------------------------
                   AND (   l.partition_ordinal = 0              -- exclude left-side partitioning column(s) to avoid false synergies
                        OR r.type              = N'F'           -- special case for Foreign Key Constraints which are unpartitioned
                       )
                   AND l.type NOT IN (N'0'                      -- exclude left-side rowstore heaps
                                     ,N'5'                      -- exclude left-side clustered columnstore
                                     ,N'6'                      -- exclude left-side Nonclustered columnstore index
                                     )
                   AND l.is_included_column = 0                 -- exclude left side included columns, only looking for key matches
                   ---------------------------------------------
                   AND (   r.partition_ordinal = 0              -- exclude right-side partitioning column(s) to avoid false synergies
                        OR l.type              = N'F'           -- special case for Foreign Key Constraints which are unpartitioned
                       )
                   AND r.type NOT IN (N'0'                      -- exclude right-side rowstore heaps
                                     ,N'5'                      -- exclude right-side clustered columnstore
                                     ,N'6'                      -- exclude right-side Nonclustered columnstore index
                                     )
                   AND r.is_included_column = 0                 -- exclude right side included columns, only looking for key matches
               ) idx_com
          JOIN (-- indexes not tied to internal tables
                SELECT *
                  FROM [##SQLXL_Index_Compilation]
                 WHERE rec_type       = N'I'  -- index level composite record
                   AND obj_type      <> N'IT' -- system internal table, don't get compared
                   AND internal_type IS NULL
               ) AS il
            ON idx_com.database_id = il.database_id
           AND idx_com.l_object_id = il.object_id
           AND idx_com.l_index_id  = il.index_id
           AND idx_com.l_type      = il.type
          JOIN (-- indexes not tied to internal tables
                SELECT *
                  FROM [##SQLXL_Index_Compilation]
                 WHERE rec_type       = N'I'  -- index level composite record
                   AND obj_type      <> N'IT' -- system internal table, don't get compared
                   AND internal_type IS NULL
               ) AS ir
            ON idx_com.database_id = ir.database_id
           AND idx_com.r_object_id = ir.object_id
           AND idx_com.r_index_id  = ir.index_id
           AND idx_com.r_type      = ir.type
         WHERE 1 = 1
               -- for a Foreign Key Constraint to match it's gotta reference the same referenced object_id & referenced_column_id(s)
           AND NOT (    il.type          = N'F' -- foreign key constraint
                    AND ir.type          = N'F' -- foreign key constraint
                    AND CHARINDEX(il.fkc_reference,ir.fkc_reference) = 0
                    AND CHARINDEX(ir.fkc_reference,il.fkc_reference) = 0
                   )
               -- XML Secondary indexes - 3 different "secondary" types and the "primary" should not match each other
           AND NOT (    il.type = N'3' -- XML index
                    AND ir.type = N'3' -- XML index
                    AND (   COALESCE(il.xml_using_xml_index_id,0 )  = COALESCE(ir.xml_using_xml_index_id,0 )
                         OR COALESCE(il.xml_using_xml_index_id,0)   = COALESCE(ir.index_id              ,0) -- match to the primary XML
                         OR COALESCE(il.index_id              ,0)   = COALESCE(ir.xml_using_xml_index_id,0) -- match to the primary XML
                        )
                   )
       ) idx_com

 OUTER APPLY
       (-- SAME COLUMNS IN SAME ORDER - SEQUENCE
        -- "indexes" with 1 or more matching key columns in the same index key sequence
        -- Missing indexes have no key order, so look for matches in equality keys ordered by uniqueness
        -- get the largest count of matches within an "index" match pair, not counting included columns
        SELECT TOP (1)
               matching_sequence_CNT = c.cnt
              ,matching_sequence_COL = (-- list intersecting column_ids, in corrected index key column order (key_column_sequence)
                                        SELECT TOP (c.cnt)
                                               CAST(ix.column_id AS NVARCHAR(20)) + N'.'
                                          FROM ico AS ix
                                         WHERE idx_com.database_id = ix.database_id
                                           AND idx_com.l_object_id = ix.object_id
                                           AND idx_com.l_index_id  = ix.index_id
                                           AND idx_com.l_type      = ix.type
                                           AND 0                   = ix.is_included_column
                                         ORDER BY
                                               ix.key_column_sequence -- Note: Missing index key assigned by uniqueness ASC!
                                           FOR XML PATH(''), TYPE
                                       ).value('(./text())[1]',N'NVARCHAR(MAX)')
              ,matching_sequence_all_density = COALESCE(dvl.All_Density,dvr.All_Density)
          FROM -- loop through all potential matching columns in sequence looking for highest count
               [dbo].[SQLXL_Numbers](1,idx_com.least_col_CNT) loop_sequence
         CROSS
         APPLY (-- instances where the same columns appear in the same sequence in the "index". Get the highest count of matches
                SELECT cnt = COUNT(1)
                  FROM ico AS l
                  JOIN ico AS r
                    ON l.column_id           = r.column_id            -- columns must match
                   AND l.key_column_sequence = r.key_column_sequence  -- in the same sequence
                   ---------------------------------------------------------------------------------
                 WHERE 1 = 1
                   ---------------------------------------------------------------------------------
                   AND idx_com.database_id   = l.database_id
                   AND idx_com.l_object_id   = l.object_id
                   AND idx_com.l_index_id    = l.index_id
                   AND idx_com.l_type        = l.type
                   AND 0                     = l.is_included_column
                   AND loop_sequence.n       = l.key_column_sequence  -- key columns up to loop count
                                                                      -- Note: Missing index key assigned by uniqueness ASC
                   ---------------------------------------------------------------------------------
                   AND idx_com.database_id   = r.database_id
                   AND idx_com.r_object_id   = r.object_id
                   AND idx_com.r_index_id    = r.index_id
                   AND idx_com.r_type        = r.type
                   AND 0                     = r.is_included_column
                   AND loop_sequence.n       = r.key_column_sequence  -- key columns up to count
                                                                      -- Note: Missing index key assigned by uniqueness ASC
                   -------------------------------------------------------------------------------------------------------------------------
                   -- filtered indexes only match if filtered definition is the same
                   -- or there's an unfiltered version to roll up to - on the LEFT side of the sequence match
                   -------------------------------------------------------------------------------------------------------------------------
                   AND (   COALESCE(idx_com.lc_filter_definition,N'') = COALESCE(idx_com.rc_filter_definition,N'')
                        OR (idx_com.lc_filter_definition IS     NULL AND idx_com.rc_filter_definition IS NOT NULL)
                       )
                HAVING COUNT(1) = loop_sequence.n
               ) c
          ----------------------------------------------------------------------------------
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_ShowStatistics_DensityVector] AS dvl
            ON idx_com.database_id = dvl.database_id
           AND idx_com.l_object_id = dvl.object_id
           AND idx_com.l_index_id  = dvl.index_ID
               -- types restricted above
           AND loop_sequence.n     = dvl.Row_ID
          ----------------------------------------------------------------------------------
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_ShowStatistics_DensityVector] AS dvr
            ON idx_com.database_id                                    = dvr.database_id
           AND idx_com.r_object_id                                    = dvr.object_id
           AND idx_com.r_index_id                                     = dvr.index_ID
               -- types restricted above
           AND loop_sequence.n                                        = dvr.Row_ID
         ORDER BY
               loop_sequence.n DESC -- get the match with the most columns in it
       ) seq

 OUTER APPLY
       (-- SAME COLUMNS, DIFFERENT ORDER - OVERLAP
        -- Indexes with 2 or more key columns overlapping within the same count of columns.
        -- Note - missing index key order is not known, so to overlap 2 missing indexes the key count must match
        -- Note - single column overlap caught by above
        SELECT TOP (1)
               matching_overlap_CNT = c.cnt
              ,matching_overlap_COL = (-- list of column_ids for the overlap, table column_id order
                                       SELECT CAST(ix.column_id AS NVARCHAR(20)) + N'.'
                                         FROM [##SQLXL_Index_sys_index_columns] AS ix
                                        WHERE idx_com.database_id  = ix.database_id
                                          AND idx_com.l_object_id  = ix.object_id
                                          AND idx_com.l_index_id   = ix.index_id
                                          AND idx_com.l_type       = ix.type
                                          AND 0                    = ix.is_included_column
                                          AND c.cnt               >= ix.key_column_sequence
                                        ORDER BY
                                              ix.column_id -- order of columns in index not used since columns can be in any order
                                          FOR XML PATH(''), TYPE
                                      ).value('(./text())[1]',N'NVARCHAR(MAX)')
          FROM -----------------------------------------------------------------------------------------------------------------------------
               -- loop through all potential matching columns in sequence looking for highest count
               -----------------------------------------------------------------------------------------------------------------------------
               [dbo].[SQLXL_Numbers](1,idx_com.least_col_CNT) loop_sequence
         CROSS
         APPLY (-- same columns appear in different order but within the column count
                SELECT cnt = COUNT(1)
                  FROM ico AS l
                  JOIN ico AS r
                    ON l.column_id               = r.column_id               -- key columns must match
                   ---------------------------------------------------------------------------------
                 WHERE 1 = 1
                   AND loop_sequence.n > COALESCE(seq.matching_sequence_CNT,0) -- matching sequence not found above, or more OVERLAPS
                   ---------------------------------------------------------------------------------
                   AND idx_com.database_id       = l.database_id
                   AND idx_com.l_object_id       = l.object_id
                   AND idx_com.l_index_id        = l.index_id
                   AND idx_com.l_type            = l.type
                   AND 0                         = l.is_included_column
                   AND loop_sequence.n          >= l.key_column_sequence  -- key columns up to count.
                                                                          -- Note: Missing index key assigned by uniqueness ASC!
                   ---------------------------------------------------------------------------------
                   AND idx_com.database_id       = r.database_id
                   AND idx_com.r_object_id       = r.object_id
                   AND idx_com.r_index_id        = r.index_id
                   AND idx_com.r_type            = r.type
                   AND 0                         = r.is_included_column
                   AND loop_sequence.n          >= r.key_column_sequence  -- key columns up to count.
                                                                          -- Note: Missing index key assigned by uniqueness ASC!
                   ---------------------------------------------------------------------------------
                   AND (   -- key columns must overlap within the same synergy count.
                           -- Note: Missing index key assigned by uniqueness ASC, Foreign key sequence cannot be changed
                           (    l.type IN (N'1' -- clustered rowstore index
                                          ,N'2' -- nonclustered rowstore index
                                          ,N'F' -- foreign key constraint
                                          )
                            AND r.type IN (N'1' -- clustered rowstore index
                                          ,N'2' -- nonclustered rowstore index
                                          ,N'F' -- foreign key constraint
                                          )
                           )
                        OR (    l.type  = N'M'  -- missing nonclustered rowstore index
                            AND r.type IN (N'1' -- clustered rowstore index
                                          ,N'2' -- nonclustered rowstore index
                                          ,N'M' -- missing nonclustered rowstore index
                                          )
                            AND idx_com.lc_idx_index_Key_Columns >= loop_sequence.n
                            AND idx_com.rc_idx_index_Key_Columns >= loop_sequence.n
                           )
                        OR (    r.type  = N'M'  -- missing nonclustered rowstore index
                            AND l.type IN (N'1' -- clustered rowstore index
                                          ,N'2' -- nonclustered rowstore index
                                          ,N'M' -- missing nonclustered rowstore index
                                          )
                            AND idx_com.lc_idx_index_Key_Columns >= loop_sequence.n
                            AND idx_com.rc_idx_index_Key_Columns >= loop_sequence.n
                           )
                       )
                HAVING COUNT(1) = loop_sequence.n
               ) c
         ORDER BY
               loop_sequence.n DESC
       ) ovl

 OUTER APPLY
       (-- CONTAINED MATCH
        -- "indexes" with all key elements contained in another "indexes" key columns
        SELECT matching_contained_CNT = c.matching_contained_CNT
              ,matching_contained_COL = CAST((-- list of column_ids contained, in table column_id order
                                              SELECT CAST(ix.column_id AS NVARCHAR(20)) + N'.'
                                                FROM [##SQLXL_Index_sys_index_columns] AS ix
                                               WHERE idx_com.database_id                     = ix.database_id
                                                 AND idx_com.l_object_id                     = ix.object_id
                                                 AND idx_com.l_index_id                      = ix.index_id
                                                 AND idx_com.l_type                          = ix.type
                                                 AND 0                                       = ix.is_included_column
                                               ORDER BY
                                                     ix.column_id
                                                 FOR XML PATH('')
                                             ) AS NVARCHAR(1000))
          FROM (-- look for same columns appearing in different key order within the first index elements
                SELECT matching_contained_CNT = CAST(COUNT(1) AS INT)
                  FROM ico AS l
                  JOIN ico AS r
                    ON l.column_id                          = r.column_id
                 WHERE 1 = 1
                   ------------------------------------------------------------
                   AND l.index_id               > 1                            -- omit clustering column
                   ------------------------------------------------------------
                   AND idx_com.database_id      = l.database_id
                   AND idx_com.l_object_id      = l.object_id
                   AND idx_com.l_index_id       = l.index_id
                   AND idx_com.l_type           = l.type
                   AND 0                        = l.is_included_column         -- ignore included columns
                   ------------------------------------------------------------
                   AND idx_com.database_id      = r.database_id
                   AND idx_com.r_object_id      = r.object_id
                   AND idx_com.r_index_id       = r.index_id
                   AND idx_com.r_type           = r.type
                   AND 0                        = r.is_included_column         -- ignore included columns
                   ------------------------------------------------------------
                   AND idx_com.lc_idx_index_Key_Columns <= idx_com.rc_idx_index_Key_Columns -- left index has <= elements than right
                   ------------------------------------------------------------
                HAVING COUNT(1) = idx_com.lc_idx_index_Key_Columns
                   AND COUNT(1) > COALESCE(seq.matching_sequence_CNT,0)          -- matching sequence not found above
                   AND COUNT(1) > COALESCE(ovl.matching_overlap_CNT ,0)          -- overlapping columns not found above
               ) c
       ) con
 WHERE 1 = 1
   AND ---------------------------------------------------------------------------------------------
       -- filter out indexes without synergies
       ---------------------------------------------------------------------------------------------
       COALESCE(seq.matching_sequence_CNT
               ,ovl.matching_overlap_CNT
               ,con.matching_contained_CNT
               ) > 0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Create table of Synergies between indexes, foreign key constraints, and missing indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Create - [SQLXL_Index_Synergies_index] - Organize all SYNERGIES by Index - includes MISSING and FOREIGN KEYs
/******************************************************************************************************************************************/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_Synergies_index];
END TRY
BEGIN CATCH
END CATCH

SELECT s.database_id
      ,s.object_id
      ,s.index_id
      ,s.type
      ,synergy_type       = s.synergy_type
      ,synergy_direction  = s.synergy_direction
      ,s.matching_CNT
      ,matching_COL       = s.matching_COL
  INTO [##SQLXL_Index_Synergies_index]
  FROM (--
        SELECT s.database_id
              ,object_id         = s.l_object_id
              ,index_id          = s.l_index_id
              ,type              = s.l_type
              ,synergy_type      = N'S'
              ,synergy_direction = N''
              ,matching_CNT      = s.matching_sequence_CNT
              ,matching_COL      = s.matching_sequence_COL
          FROM [##SQLXL_Index_Synergies] AS s
         WHERE s.matching_sequence_CNT         > 0
           AND LEFT(s.matching_sequence_COL,1) = N'S'
        UNION
        SELECT s.database_id
              ,object_id         = s.r_object_id
              ,index_id          = s.r_index_id
              ,type              = s.r_type
              ,synergy_type      = N'S'
              ,synergy_direction = N''
              ,s.matching_sequence_CNT
              ,s.matching_sequence_COL
          FROM [##SQLXL_Index_Synergies] AS s
         WHERE s.matching_sequence_CNT         > 0
           AND LEFT(s.matching_sequence_COL,1) = N'S'
        UNION
        SELECT s.database_id
              ,object_id         = s.l_object_id
              ,index_id          = s.l_index_id
              ,type              = s.l_type
              ,synergy_type      = N'F'                    -- foreign key constraint
              ,synergy_direction = N''
              ,matching_CNT      = s.matching_sequence_CNT
              ,matching_COL      = s.matching_sequence_COL
          FROM [##SQLXL_Index_Synergies] AS s
         WHERE s.matching_sequence_CNT         > 0
           AND LEFT(s.matching_sequence_COL,1) = N'F'      -- special case where match is on foreign key constraint column(s)
        UNION
        SELECT s.database_id
              ,object_id         = s.r_object_id
              ,index_id          = s.r_index_id
              ,type              = s.r_type
              ,synergy_type      = N'F'                    -- foreign key constraint
              ,synergy_direction = N''
              ,s.matching_sequence_CNT
              ,s.matching_sequence_COL
          FROM [##SQLXL_Index_Synergies] AS s
         WHERE s.matching_sequence_CNT         > 0
           AND LEFT(s.matching_sequence_COL,1) = N'F'      -- special case where match is on foreign key constraint column(s)
        UNION
        SELECT s.database_id
              ,object_id         = s.l_object_id
              ,index_id          = s.l_index_id
              ,type              = s.l_type
              ,synergy_type      = N'O'
              ,synergy_direction = N''
              ,s.matching_overlap_CNT
              ,s.matching_overlap_COL
          FROM [##SQLXL_Index_Synergies] AS s
         WHERE s.matching_overlap_CNT > 0
        UNION
        SELECT s.database_id
              ,object_id         = s.r_object_id
              ,index_id          = s.r_index_id
              ,type              = s.r_type
              ,synergy_type      = N'O'
              ,synergy_direction = N''
              ,s.matching_overlap_CNT
              ,s.matching_overlap_COL
          FROM [##SQLXL_Index_Synergies] AS s
         WHERE s.matching_overlap_CNT > 0
        UNION
        SELECT s.database_id
              ,object_id         = s.l_object_id
              ,index_id          = s.l_index_id
              ,type              = s.l_type
              ,synergy_type      = N'C'
              ,synergy_direction = N'<'
              ,s.matching_contained_CNT
              ,s.matching_contained_COL
          FROM [##SQLXL_Index_Synergies] AS s
         WHERE s.matching_contained_CNT > 0
        UNION
        SELECT s.database_id
              ,object_id         = s.r_object_id
              ,index_id          = s.r_index_id
              ,type              = s.r_type
              ,synergy_type      = N'C'
              ,synergy_direction = N'>'
              ,s.matching_contained_CNT
              ,s.matching_contained_COL
          FROM [##SQLXL_Index_Synergies] AS s
         WHERE s.matching_contained_CNT > 0
       ) s
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Organize all SYNERGIES by Index - includes MISSING and FOREIGN KEYs'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

-- index table
CREATE CLUSTERED
 INDEX ixc_SQLXL_Index_Synergies_index
    ON [##SQLXL_Index_Synergies_index](database_id,object_id,index_id,type,synergy_type)
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index [##SQLXL_Index_Synergies_index]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - main table with SYNERGIES
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,
--*/
       overlap_code = CAST(STUFF(-- Strip off leading unnecessary characters
                                 (--
                                  SELECT  NCHAR(167)
                                        + IIF(src.synergy_direction = N'>',src.synergy_direction,N'')
                                        + src.matching_COL
                                        + IIF(src.synergy_direction = N'<',src.synergy_direction,N'')
                                    FROM [##SQLXL_Index_Synergies_index] AS src
                                   WHERE tgt.database_id = src.database_id
                                     AND tgt.object_id   = src.object_id
                                     AND tgt.index_id    = src.index_id
                                     AND tgt.type        = src.type
                                   ORDER BY
                                         CASE src.synergy_type
                                              WHEN 'S' THEN 1 -- sequence match - keys in same order starting with first
                                              WHEN 'O' THEN 2 -- overlap - same keys in different order starting with first
                                              WHEN 'C' THEN 3 -- contained - all key from index found in another index keys
                                              WHEN 'F' THEN 4 -- foreign key constraint
                                         END
                                        ,src.matching_COL
                                     FOR XML PATH(''), TYPE
                                 ).value('(./text())[1]','NVARCHAR(886)')
                                ,1,1,N'')
                          AS NVARCHAR(1000))
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS tgt -- index level composite record
  JOIN (-- only need to update indexes with one or more shared elements
        SELECT database_id
              ,object_id
              ,index_id
              ,type
          FROM [##SQLXL_Index_Synergies_index]
         GROUP BY
               database_id
              ,object_id
              ,index_id
              ,type
       ) AS src
    ON tgt.database_id  = src.database_id
   AND tgt.object_id    = src.object_id
   AND tgt.index_id     = src.index_id
   AND tgt.type         = src.type
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update SQLXL_Index_Compilation with SYNERGIES'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Weight the Missing Index Advantage with percent of table reads factor
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.mix_Advantage_AMT,tgt.ius_user_read_CNT,usg.reads,
--*/
       mix_advantage_weighted_AMT = IIF(usg.reads > 0
                                       ,tgt.mix_Advantage_AMT * (1.0 * tgt.ius_user_read_CNT / usg.reads) -- /zero handled by HAVING
                                       ,NULL)
  FROM (SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE type = N'M' -- missing nonclustered rowstore index
       ) AS tgt
  JOIN (--
        SELECT database_id
              ,parent_object_id
              ,reads = SUM(ius_user_read_CNT)
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I' -- index level composite record
           AND type    <> N'M' -- missing nonclustered rowstore index
         GROUP BY
               database_id
              ,parent_object_id
        HAVING SUM(ius_user_read_CNT) > 0
       ) usg
    ON tgt.database_id      = usg.database_id
   AND tgt.parent_object_id = usg.parent_object_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update Missing Index Advantage with percent of table reads factor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Add Missing index values to Uncovered Foreign Key Constraints
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT r.database_id,r.object_id,r.index_id,r.type,
--*/
       fkc_missing_index_CNT          = r.fkc_missing_index_CNT
      ---------------------
      ,mix_avg_total_user_cost_AMT    = r.mix_avg_total_user_cost_AMT
      ,mix_avg_total_system_cost_AMT  = r.mix_avg_total_system_cost_AMT
      ,mix_avg_user_impact_AMT        = r.mix_avg_user_impact_AMT
      ,mix_avg_system_impact_AMT      = r.mix_avg_system_impact_AMT
      ,mix_unique_compiles_CNT        = r.mix_unique_compiles_CNT
      ,mix_Advantage_AMT              = r.mix_Advantage_AMT
      ,mix_Advantage_weighted_AMT     = r.mix_Advantage_weighted_AMT
      ---------------------
      ,ius_user_total_CNT             = r.ius_user_total_CNT
      ,ius_user_read_CNT              = r.ius_user_read_CNT
      ,ius_user_seeks_CNT             = r.ius_user_seeks_CNT
      ,ius_user_scans_CNT             = r.ius_user_scans_CNT
      ,ius_system_seeks_CNT           = r.ius_system_seeks_CNT
      ,ius_system_scans_CNT           = r.ius_system_scans_CNT
      ---------------------
      ,ius_last_user_seek_DTTM        = r.ius_last_user_seek_DTTM
      ,ius_last_user_scan_DTTM        = r.ius_last_user_scan_DTTM
      ,ius_last_system_seek_DTTM      = r.ius_last_system_seek_DTTM
      ,ius_last_system_scan_DTTM      = r.ius_last_system_scan_DTTM
  FROM (-- foreign key constraint
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I' -- index level composite record
           AND type     = N'F' -- foreign key constraint
       ) AS tgt
  JOIN (-- total up impact of missing indexes on uncovered Foreign Key Constraints
        SELECT o.database_id
              ,o.parent_object_id
              ,object_id = o.fkc_object_id
              ,index_id  = o.fkc_object_id
              ,type      = o.fkc_type
              ---------------------
              ,fkc_missing_index_CNT         = COUNT(1)
              ---------------------
              ,mix_avg_total_user_cost_AMT   = AVG(COALESCE(mx.mix_avg_total_user_cost_AMT  ,0.0))
              ,mix_avg_total_system_cost_AMT = AVG(COALESCE(mx.mix_avg_total_system_cost_AMT,0.0))
              ,mix_avg_user_impact_AMT       = AVG(COALESCE(mx.mix_avg_user_impact_AMT      ,0.0))
              ,mix_avg_system_impact_AMT     = AVG(COALESCE(mx.mix_avg_system_impact_AMT    ,0.0))
              ,mix_unique_compiles_CNT       = SUM(COALESCE(mx.mix_unique_compiles_CNT      ,0.0))
              ,mix_Advantage_AMT             = SUM(COALESCE(mx.mix_Advantage_AMT            ,0.0))
              ,mix_Advantage_weighted_AMT    = SUM(COALESCE(mx.mix_Advantage_weighted_AMT   ,0.0))
              ---------------------
              ,ius_user_total_CNT            = SUM(COALESCE(mx.ius_user_total_CNT           ,0))
              ,ius_user_read_CNT             = SUM(COALESCE(mx.ius_user_read_CNT            ,0))
              ,ius_user_seeks_CNT            = SUM(COALESCE(mx.ius_user_seeks_CNT           ,0))
              ,ius_user_scans_CNT            = SUM(COALESCE(mx.ius_user_scans_CNT           ,0))
              ,ius_system_seeks_CNT          = SUM(COALESCE(mx.ius_system_seeks_CNT         ,0))
              ,ius_system_scans_CNT          = SUM(COALESCE(mx.ius_system_scans_CNT         ,0))
              ---------------------
              ,ius_last_user_seek_DTTM       = MAX(COALESCE(mx.ius_last_user_seek_DTTM      ,0))
              ,ius_last_user_scan_DTTM       = MAX(COALESCE(mx.ius_last_user_scan_DTTM      ,0))
              ,ius_last_system_seek_DTTM     = MAX(COALESCE(mx.ius_last_system_seek_DTTM    ,0))
              ,ius_last_system_scan_DTTM     = MAX(COALESCE(mx.ius_last_system_scan_DTTM    ,0))
          FROM (--
                SELECT database_id
                      ,parent_object_id
                      ,fkc_object_id = r_object_id
                      ,fkc_type      = r_type
                      ,mix_object_id = l_object_id
                      ,mix_id        = l_index_id
                  FROM [##SQLXL_Index_Synergies] WITH (READUNCOMMITTED)
                 WHERE l_type        = N'M' -- missing nonclustered rowstore index
                   AND r_type        = N'F' -- foreign key constraint
                UNION
                SELECT database_id
                      ,parent_object_id
                      ,fkc_object_id = l_object_id
                      ,fkc_type      = l_type
                      ,mix_object_id = r_object_id
                      ,mix_id        = r_index_id
                  FROM [##SQLXL_Index_Synergies] WITH (READUNCOMMITTED)
                 WHERE l_type        = N'F' -- foreign key constraint
                   AND r_type        = N'M' -- missing nonclustered rowstore index
               ) AS o
         OUTER
         APPLY (SELECT *
                  FROM [##SQLXL_Index_Compilation] AS mx WITH (READUNCOMMITTED)
                 WHERE rec_type = N'I'                       -- index level composite record
                   AND o.database_id         = mx.database_id
                   AND o.mix_object_id       = mx.object_id
                   AND o.mix_id              = mx.index_ID
                   AND N'M'                  = mx.type       -- missing nonclustered rowstore index
               ) AS mx
         GROUP BY
               o.database_id
              ,o.parent_object_id
              ,o.fkc_object_id
              ,o.fkc_object_id
              ,o.fkc_type
       ) r
    ON tgt.database_id      = r.database_id
   AND tgt.parent_object_id = r.parent_object_id
   AND tgt.object_id        = r.object_id
   AND tgt.index_id         = r.index_id
   AND tgt.type             = r.type
 WHERE tgt.fkc_covered_by_idx_IDS IS NULL -- already covered, don't add missing indexes providing coverage
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Add Missing index values to Uncovered Foreign Key Constraints'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Find best missing index to cover a foreign key
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,mix.*,
--*/
       fkc_candidate_covering_MIX_ID = mix.mix_index_ID
  FROM (-- uncovered foreign keys
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I' -- index level composite record
           AND type     = N'F' -- foreign key constraint
           AND fkc_covered_by_idx_IDS IS NULL
       ) AS tgt
  JOIN (-- total up impact of missing indexes on uncovered Foreign Key Constraints
        SELECT fkc.database_id
              ,fkc.object_id
              ,fkc.index_id
              ,fkc.type
              ,syn.matching_sequence_CNT
              ,mix.mix_Advantage_AMT
              ,mix.ius_user_read_CNT
              ---------------------
              ,mix_index_id = mix.index_id
              ,rn = ROW_NUMBER() OVER (PARTITION BY fkc.database_id
                                                   ,fkc.object_id
                                                   ,fkc.index_id
                                                   ,fkc.type
                                           ORDER BY -- try to find the most "significant" missing index to use to cover Foreign Key
                                                    syn.matching_sequence_CNT  DESC
                                                   ,syn.matching_overlap_CNT   DESC
                                                   ,syn.matching_contained_CNT DESC
                                                   ,mix.Key_Columns_CNT
                                                   ,mix.Included_Columns_CNT
                                                   ,mix.ius_user_read_CNT      DESC
                                      )
          FROM (--
                SELECT database_id
                      ,fkc_object_id              = r_object_id
                      ,mix_object_id              = l_object_id
                      ,mix_id                     = l_index_id
                      ,matching_sequence_CNT
                      ,matching_overlap_CNT
                      ,matching_contained_CNT
                  FROM [##SQLXL_Index_Synergies]
                 WHERE l_type     = N'M'             -- missing nonclustered rowstore index
                   AND r_type     = N'F'             -- foreign key constraint
                   AND (   matching_sequence_CNT  > 0
                        OR matching_overlap_CNT   > 0
                        OR matching_contained_CNT > 0
                       )
                 UNION
                SELECT database_id
                      ,fkc_object_id              = l_object_id
                      ,mix_object_id              = l_object_id
                      ,mix_id                     = r_index_id
                      ,matching_sequence_CNT
                      ,matching_overlap_CNT
                      ,matching_contained_CNT
                  FROM [##SQLXL_Index_Synergies]
                 WHERE l_type     = N'F'             -- foreign key constraint
                   AND r_type     = N'M'             -- missing nonclustered rowstore index
                   AND (   matching_sequence_CNT  > 0
                        OR matching_overlap_CNT   > 0
                        OR matching_contained_CNT > 0
                       )
               ) AS syn
          JOIN (--
                SELECT *
                  FROM [##SQLXL_Index_Compilation]
                 WHERE rec_type = N'I'               -- index level composite record
                   AND type     = N'F'               -- foreign key constraint
               ) AS fkc
            ON syn.database_id    = fkc.database_id
           AND syn.fkc_object_id  = fkc.object_id
           AND syn.fkc_object_id  = fkc.index_id
          JOIN (--
                SELECT *
                  FROM [##SQLXL_Index_Compilation]
                 WHERE rec_type = N'I'               -- index level composite record
                   AND type     = N'M'               -- missing nonclustered rowstore index
               ) AS mix
            ON syn.database_id    = mix.database_id
           AND syn.mix_object_id  = mix.object_id
           AND syn.mix_id         = mix.index_ID
       ) AS mix
    ON tgt.database_id    = mix.database_id
   AND tgt.object_id      = mix.object_id
   AND tgt.index_id       = mix.index_id
   AND tgt.type           = mix.type
   AND 1                  = mix.rn
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Find best missing index to cover a foreign key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Start numeric metrics computations -----------------------------------',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Create temp table of columns in [##SQLXL_Index_Compilation] global temp table to compute
 since unable to access column list for global temp tables on Azure SQL Database.

-- Excludes %_AVG            handled above
--          %_PCT            handled below
--          %_RAT            handled below
--          Partition_%
--          tbl_column_CNT
--          Key_Columns_CNT
--          row_CNT
--          CLR_trigger_CNT
--          SQL_trigger_CNT
--          is_instead_of_trigger_CNT

\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT ON
--*/
BEGIN TRY
   DROP TABLE [#SQLXL_Index_Compilation_Compute_Columns];
END TRY
BEGIN CATCH
END CATCH

SELECT *
  INTO #SQLXL_Index_Compilation_Compute_Columns
  FROM (VALUES
 (N'SUM',N'buffer_free_KB_CNT')
,(N'SUM',N'buffer_total_KB_CNT')
,(N'SUM',N'Clustered_ColumnStore_CNT')
,(N'SUM',N'Clustered_index_CNT')
,(N'MAX',N'collection_DTTM')
,(N'SUM',N'cs_delete_buffer_scan_CNT')
,(N'SUM',N'cs_index_scan_CNT')
,(N'SUM',N'cs_input_groupby_row_CNT')
,(N'SUM',N'cs_partition_CNT')
,(N'SUM',N'cs_returned_aggregate_CNT')
,(N'SUM',N'cs_returned_group_CNT')
,(N'SUM',N'cs_returned_row_CNT')
,(N'SUM',N'cs_row_group_CNT')
,(N'SUM',N'cs_row_group_lock_CNT')
,(N'SUM',N'cs_row_group_lock_wait_CNT')
,(N'AVG',N'cs_row_group_lock_wait_MS_AVG')
,(N'SUM',N'cs_row_group_lock_wait_MS_CNT')
,(N'SUM',N'cs_scan_CNT')
,(N'SUM',N'fkc_candidate_covering_MIX_CNT')
,(N'SUM',N'fkc_missing_index_CNT')
,(N'SUM',N'Foreign_Key_CNT')
,(N'PCT',N'free_pages_in_buffer_PCT')
,(N'SUM',N'Fulltext_index_CNT')
,(N'SUM',N'heap_index_CNT')
,(N'SUM',N'hi_bucket_CNT')
,(N'SUM',N'in_row_data_page_PG_CNT')
,(N'SUM',N'in_row_reserved_page_PG_CNT')
,(N'SUM',N'in_row_used_page_PG_CNT')
,(N'SUM',N'Included_Columns_CNT')
,(N'SUM',N'index_CNT')
,(N'SUM',N'ios_column_value_pull_in_row_CNT')
,(N'SUM',N'ios_column_value_push_off_row_CNT')
,(N'SUM',N'ios_forwarded_fetch_CNT')
,(N'PCT',N'ios_forwarded_fetch_to_read_PCT')
,(N'SUM',N'ios_ghost_version_inrow_CNT')
,(N'SUM',N'ios_ghost_version_off_row_CNT')
,(N'SUM',N'ios_insert_over_ghost_version_inrow_CNT')
,(N'SUM',N'ios_insert_over_ghost_version_off_row_CNT')
,(N'SUM',N'ios_leaf_allocation_CNT')
,(N'SUM',N'ios_leaf_delete_CNT')
,(N'SUM',N'ios_leaf_ghost_CNT')
,(N'SUM',N'ios_leaf_insert_CNT')
,(N'SUM',N'ios_leaf_page_merge_CNT')
,(N'SUM',N'ios_leaf_update_CNT')
,(N'SUM',N'ios_lob_fetch_bytes_CNT')
,(N'SUM',N'ios_lob_fetch_pages_CNT')
,(N'SUM',N'ios_lob_orphan_create_CNT')
,(N'SUM',N'ios_lob_orphan_insert_CNT')
,(N'SUM',N'ios_lock_promotion_attempt_CNT')
,(N'SUM',N'ios_lock_promotion_CNT')
,(N'SUM',N'ios_lock_promotion_fail_CNT')
,(N'SUM',N'ios_nonleaf_allocation_CNT')
,(N'SUM',N'ios_nonleaf_delete_CNT')
,(N'SUM',N'ios_nonleaf_insert_CNT')
,(N'SUM',N'ios_nonleaf_page_merge_CNT')
,(N'SUM',N'ios_nonleaf_update_CNT')
,(N'SUM',N'ios_page_compression_attempt_CNT')
,(N'SUM',N'ios_page_compression_fail_CNT')
,(N'PCT',N'ios_page_compression_fail_PCT')
,(N'SUM',N'ios_page_compression_success_CNT')
,(N'SUM',N'ios_page_io_latch_wait_CNT')
,(N'AVG',N'ios_page_io_latch_wait_MS_AVG')
,(N'SUM',N'ios_page_io_latch_wait_MS_CNT')
,(N'SUM',N'ios_page_latch_wait_CNT')
,(N'AVG',N'ios_page_latch_wait_MS_AVG')
,(N'SUM',N'ios_page_latch_wait_MS_CNT')
,(N'SUM',N'ios_page_lock_CNT')
,(N'SUM',N'ios_page_lock_wait_CNT')
,(N'AVG',N'ios_page_lock_wait_MS_AVG')
,(N'SUM',N'ios_page_lock_wait_MS_CNT')
,(N'SUM',N'ios_partition_CNT')
,(N'SUM',N'ios_range_scan_CNT')
,(N'SUM',N'ios_row_lock_CNT')
,(N'SUM',N'ios_row_lock_wait_CNT')
,(N'AVG',N'ios_row_lock_wait_MS_AVG')
,(N'SUM',N'ios_row_lock_wait_MS_CNT')
,(N'SUM',N'ios_row_overflow_fetch_in_bytes_CNT')
,(N'SUM',N'ios_row_overflow_fetch_in_pages_CNT')
,(N'SUM',N'ios_singleton_lookup_CNT')
,(N'PCT',N'ios_singleton_lookup_to_read_PCT')
,(N'SUM',N'ios_total_Column_value_off_row_CNT')
,(N'SUM',N'ios_total_leaf_Contacts_CNT')
,(N'SUM',N'ios_total_nonleaf_Contacts_CNT')
,(N'SUM',N'ios_tree_page_io_latch_wait_CNT')
,(N'AVG',N'ios_tree_page_io_latch_wait_MS_AVG')
,(N'SUM',N'ios_tree_page_io_latch_wait_MS_CNT')
,(N'SUM',N'ios_tree_page_latch_wait_CNT')
,(N'AVG',N'ios_tree_page_latch_wait_MS_AVG')
,(N'SUM',N'ios_tree_page_latch_wait_MS_CNT')
,(N'SUM',N'ios_version_generated_inrow_CNT')
,(N'SUM',N'ios_version_generated_off_row_CNT')
,(N'MAX',N'is_activity_for_period')
,(N'MAX',N'ius_last_read_days_ago')
,(N'MAX',N'ius_last_system_lookup_DTTM')
,(N'MAX',N'ius_last_system_scan_DTTM')
,(N'MAX',N'ius_last_system_seek_DTTM')
,(N'MAX',N'ius_last_system_update_DTTM')
,(N'MAX',N'ius_last_user_lookup_DTTM')
,(N'MAX',N'ius_last_user_scan_DTTM')
,(N'MAX',N'ius_last_user_seek_DTTM')
,(N'MAX',N'ius_last_user_update_DTTM')
,(N'MAX',N'ius_last_write_days_ago')
,(N'PCT',N'ius_lookups_to_read_PCT')
,(N'SUM',N'ius_no_read_user_updates_CNT')
,(N'PCT',N'ius_read_to_parent_PCT')
,(N'RAT',N'ius_read_to_write_RAT')
,(N'PCT',N'ius_scans_to_read_PCT')
,(N'PCT',N'ius_seeks_to_read_PCT')
,(N'SUM',N'ius_system_lookups_CNT')
,(N'SUM',N'ius_system_scans_CNT')
,(N'SUM',N'ius_system_seeks_CNT')
,(N'SUM',N'ius_system_updates_CNT')
,(N'SUM',N'ius_user_lookups_CNT')
,(N'SUM',N'ius_user_read_CNT')
,(N'SUM',N'ius_user_scans_CNT')
,(N'SUM',N'ius_user_seeks_CNT')
,(N'SUM',N'ius_user_total_CNT')
,(N'SUM',N'ius_user_updates_CNT')
,(N'PCT',N'ius_write_to_instance_PCT')
,(N'PCT',N'ius_write_to_parent_PCT')
,(N'SUM',N'lob_reserved_page_PG_CNT')
,(N'SUM',N'lob_used_page_PG_CNT')
,(N'SUM',N'Missing_index_CNT')
,(N'SUM',N'mix_Advantage_AMT')
,(N'SUM',N'mix_Advantage_weighted_AMT')
,(N'SUM',N'mix_avg_system_impact_AMT')
,(N'SUM',N'mix_avg_total_system_cost_AMT')
,(N'SUM',N'mix_avg_total_user_cost_AMT')
,(N'SUM',N'mix_avg_user_impact_AMT')
,(N'SUM',N'mix_unique_compiles_CNT')
,(N'SUM',N'Nonclustered_ColumnStore_CNT')
,(N'SUM',N'Nonclustered_Hash_CNT')
,(N'SUM',N'Nonclustered_index_CNT')
,(N'SUM',N'ops_no_read_total_write_CNT')
,(N'PCT',N'ops_read_to_parent_PCT')
,(N'RAT',N'ops_read_to_write_RAT')
,(N'PCT',N'ops_scans_to_read_PCT')
,(N'SUM',N'ops_total_contacts_CNT')
,(N'SUM',N'ops_total_delete_CNT')
,(N'SUM',N'ops_total_insert_CNT')
,(N'SUM',N'ops_total_lock_CNT')
,(N'SUM',N'ops_total_lock_wait_CNT')
,(N'AVG',N'ops_total_lock_wait_MS_AVG')
,(N'SUM',N'ops_total_lock_wait_MS_CNT')
,(N'SUM',N'ops_total_page_merge_CNT')
,(N'SUM',N'ops_total_page_split_CNT')
,(N'SUM',N'ops_total_read_CNT')
,(N'SUM',N'ops_total_scan_CNT')
,(N'SUM',N'ops_total_scan_retries_CNT')
,(N'SUM',N'ops_total_update_CNT')
,(N'SUM',N'ops_total_wait_CNT')
,(N'AVG',N'ops_total_wait_MS_AVG')
,(N'SUM',N'ops_total_wait_MS_CNT')
,(N'SUM',N'ops_total_write_CNT')
,(N'PCT',N'ops_write_to_instance_PCT')
,(N'PCT',N'ops_write_to_parent_PCT')
,(N'RAT',N'page_lock_to_row_lock_RAT')
,(N'PCT',N'page_merge_to_write_PCT')
,(N'PCT',N'page_splits_to_write_PCT')
,(N'MAX',N'partition_function_create_DTTM')
,(N'MAX',N'partition_function_modify_DTTM')
,(N'SUM',N'reserved_page_PG_CNT')
,(N'SUM',N'rk_referencing_fkc_action_cascade_CNT')
,(N'SUM',N'rk_referencing_fkc_action_default_CNT')
,(N'SUM',N'rk_referencing_fkc_action_none_CNT')
,(N'SUM',N'rk_referencing_fkc_action_null_CNT')
,(N'SUM',N'rk_referencing_fkc_CNT')
,(N'SUM',N'rk_referencing_fkc_disabled_CNT')
,(N'SUM',N'rk_referencing_fkc_not_replicated_CNT')
,(N'SUM',N'rk_referencing_fkc_not_trusted_CNT')
,(N'SUM',N'rk_referencing_fkc_system_named_CNT')
,(N'MAX',N'row_CNT')
,(N'SUM',N'row_overflow_reserved_page_PG_CNT')
,(N'SUM',N'row_overflow_used_page_PG_CNT')
,(N'SUM',N'Spatial_index_CNT')
,(N'SUM',N'stathdr_Rows_CNT')
,(N'SUM',N'stathdr_Rows_Sampled_CNT')
,(N'SUM',N'Stats_CNT')
,(N'SUM',N'Stats_Prop_modification_CNT')
,(N'MAX',N'Stats_Prop_updated_days_ago')
,(N'SUM',N'used_page_PG_CNT')
,(N'PCT',N'used_pages_in_buffer_PCT')
,(N'SUM',N'XML_index_CNT')
,(N'SUM',N'xtp_allocated_bytes_CNT')
,(N'SUM',N'xtp_allocation_CNT')
,(N'SUM',N'xtp_delta_pages_CNT')
,(N'SUM',N'xtp_key_merge_CNT')
,(N'SUM',N'xtp_key_merge_retry_CNT')
,(N'PCT',N'xtp_key_merge_retry_PCT')
,(N'SUM',N'xtp_key_split_CNT')
,(N'SUM',N'xtp_key_split_retry_CNT')
,(N'PCT',N'xtp_key_split_retry_PCT')
,(N'SUM',N'xtp_leaf_pages_CNT')
,(N'SUM',N'xtp_page_consolidation_CNT')
,(N'SUM',N'xtp_page_consolidation_retry_CNT')
,(N'PCT',N'xtp_page_consolidation_retry_PCT')
,(N'SUM',N'xtp_page_merge_CNT')
,(N'SUM',N'xtp_page_merge_retry_CNT')
,(N'PCT',N'xtp_page_merge_retry_PCT')
,(N'SUM',N'xtp_page_split_CNT')
,(N'SUM',N'xtp_page_split_retry_CNT')
,(N'PCT',N'xtp_page_split_retry_PCT')
,(N'SUM',N'xtp_page_update_CNT')
,(N'SUM',N'xtp_page_update_retry_CNT')
,(N'PCT',N'xtp_page_update_retry_PCT')
,(N'SUM',N'xtp_row_delete_attempts_CNT')
,(N'SUM',N'xtp_row_insert_attempts_CNT')
,(N'SUM',N'xtp_row_update_attempts_CNT')
,(N'SUM',N'xtp_rows_returned_CNT')
,(N'SUM',N'xtp_rows_touched_CNT')
,(N'SUM',N'xtp_scans_retries_CNT')
,(N'SUM',N'xtp_scans_started_CNT')
,(N'SUM',N'xtp_unique_constraint_violations_CNT')
,(N'SUM',N'xtp_used_bytes_CNT')
,(N'SUM',N'xtp_write_conflicts_CNT')
) AS v(typ,name);

/******************************************************************************************************************************************\
 Compute SUM values for Parent, Database, Instance
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Rollup totals to PARENT level - Base (includes Internal Tables) & History tables
-- USE dynamic SQL to create list of columns
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql       NVARCHAR(MAX)
       ,@name      NVARCHAR(MAX)
       ,@msg       NVARCHAR(1000)
       ,@exec_dttm DATETIME = GETDATE()
--*/
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SET @sql = N'
UPDATE tgt
   SET ' + STUFF(-- Strip off leading unnecessary characters
                 (-- list of all  columns to update
                  SELECT NCHAR(13) + NCHAR(10) + N'      ,' + c.name + N' = COALESCE(src.' + c.name + N',0)'
                    FROM #SQLXL_Index_Compilation_Compute_Columns AS c
                   WHERE c.typ = N'SUM'
                     FOR XML PATH(N''), TYPE
                 ).value('(./text())[1]',N'NVARCHAR(MAX)')
                ,1,9,N'')
+ N'
  FROM [##SQLXL_Index_Compilation] AS tgt
  JOIN (SELECT database_id
              ,parent_object_id'
              + (SELECT NCHAR(13) + NCHAR(10)
                       + N'              ,'
                       + c.name + N' = SUM(' + c.name + N')'
                   FROM #SQLXL_Index_Compilation_Compute_Columns AS c
                  WHERE c.typ = N'SUM'
                  FOR XML PATH(N''), TYPE
                ).value('(./text())[1]',N'NVARCHAR(MAX)')
+ N'
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N''I''
         GROUP BY
               database_id
              ,parent_object_id
       ) AS src
    ON tgt.database_id      = src.database_id
   AND tgt.parent_object_id = src.parent_object_id
 WHERE tgt.rec_type         = N''P'';' -- instance level composite record

SET ANSI_WARNINGS OFF; -- FOR XML PATH used above
EXECUTE sp_executesql @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Rollup totals to PARENT level - Base (includes Internal Tables) & History tables'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Rollup totals to DATABASE level - Base (includes Internal Tables) & History tables
-- USE dynamic SQL to create list of columns
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql       NVARCHAR(MAX)
       ,@name      NVARCHAR(MAX)
       ,@msg       NVARCHAR(1000)
       ,@exec_dttm DATETIME = GETDATE()
--*/
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SET @sql = N'
UPDATE tgt
   SET ' + STUFF(-- Strip off leading unnecessary characters
                 (-- list of all  columns to update
                  SELECT NCHAR(13) + NCHAR(10) + N'      ,' + c.name + N' = COALESCE(src.' + c.name + N',0)'
                    FROM #SQLXL_Index_Compilation_Compute_Columns AS c
                   WHERE c.typ = N'SUM'
                     FOR XML PATH(N''), TYPE
                 ).value('(./text())[1]',N'NVARCHAR(MAX)')
                ,1,9,N'')
+ N'
  FROM [##SQLXL_Index_Compilation] AS tgt
  JOIN (SELECT database_id'
              + (SELECT NCHAR(13) + NCHAR(10)
                       + N'              ,'
                       + c.name + N' = SUM(' + c.name + N')'
                   FROM #SQLXL_Index_Compilation_Compute_Columns AS c
                  WHERE c.typ = N'SUM'
                  FOR XML PATH(N''), TYPE
                ).value('(./text())[1]',N'NVARCHAR(MAX)')
+ N'
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N''I''
         GROUP BY
               database_id
       ) AS src
    ON tgt.database_id      = src.database_id
 WHERE tgt.rec_type         = N''D'';' -- instance level composite record

SET ANSI_WARNINGS OFF; -- FOR XML PATH used above
EXECUTE sp_executesql @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Database AMT & CNT Totals'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Rollup totals to INSTANCE level - Base (includes Internal Tables) & History tables
-- USE dynamic SQL to create list of columns
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql       NVARCHAR(MAX)
       ,@name      NVARCHAR(MAX)
       ,@msg       NVARCHAR(1000)
       ,@exec_dttm DATETIME = GETDATE()
--*/
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SET @sql = N'
UPDATE tgt
   SET ' + STUFF(-- Strip off leading unnecessary characters
                 (-- list of all  columns to update
                  SELECT NCHAR(13) + NCHAR(10) + N'      ,' + c.name + N' = COALESCE(src.' + c.name + N',0)'
                    FROM #SQLXL_Index_Compilation_Compute_Columns AS c
                   WHERE c.typ = N'SUM'
                     FOR XML PATH(N''), TYPE
                 ).value('(./text())[1]',N'NVARCHAR(MAX)')
                ,1,9,N'')
+ N'
  FROM [##SQLXL_Index_Compilation] AS tgt
 CROSS
  JOIN (SELECT na = 0'
              + (SELECT NCHAR(13) + NCHAR(10)
                       + N'              ,'
                       + c.name + N' = SUM(' + c.name + N')'
                   FROM #SQLXL_Index_Compilation_Compute_Columns AS c
                  WHERE c.typ = N'SUM'
                  FOR XML PATH(N''), TYPE
                ).value('(./text())[1]',N'NVARCHAR(MAX)')
+ N'
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N''I''
         GROUP BY
               database_id
       ) AS src
 WHERE tgt.rec_type         = N''A'';' -- instance level composite record

SET ANSI_WARNINGS OFF; -- FOR XML PATH used above
EXECUTE sp_executesql @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Instance AMT & CNT Totals'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Compute MAX values for Parent
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent MAX Values - Latest DTTM, last read/write days ago, row count
-- USE dynamic SQL to create list of columns and then populate each one
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql       NVARCHAR(MAX)
--*/
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SET @sql = N'
UPDATE tgt
   SET ' + STUFF(-- Strip off leading unnecessary characters
                 (--
                  SELECT NCHAR(13) + NCHAR(10) + N'      ,' + c.name + N' = src.' + c.name -- No COALESCE since no date is NULL
                    FROM #SQLXL_Index_Compilation_Compute_Columns AS c
                   WHERE c.typ = N'MAX'
                     FOR XML PATH(N''), TYPE
                 ).value('(./text())[1]',N'NVARCHAR(MAX)')
                ,1,9,N'') -- includes the first CR + LF too!
+ N'
  FROM [##SQLXL_Index_Compilation] AS tgt
  JOIN (SELECT database_id
              ,parent_object_id'
              + (--
                 SELECT NCHAR(13) + NCHAR(10) + N'              ,'
                       + c.name + N' = '
                       + IIF(c.name LIKE N'%days_ago%',N'MIN',N'MAX')
                       + N'(COALESCE(' + c.name + N','
                       + IIF(c.name LIKE N'%days_ago%',N'NULL',N'0') + N'))'
                    FROM #SQLXL_Index_Compilation_Compute_Columns AS c
                   WHERE c.typ = N'MAX'
                    FOR XML PATH(N''), TYPE
                ).value('(./text())[1]',N'NVARCHAR(MAX)')
+ N'
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N''I''
         GROUP BY
               database_id
              ,parent_object_id
       ) AS src
    ON tgt.database_id      = src.database_id
   AND tgt.parent_object_id = src.parent_object_id
   AND tgt.rec_type         = N''P'';'

SET ANSI_WARNINGS OFF; -- FOR XML PATH used above
EXECUTE sp_executesql @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Parent MAX Values - Latest DTTM, last read/write days ago, row count'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Compute All millisecond (_MS) average (_AVG) computed values for All Records
 Requires all other values computed. Calculates for all levels (Index->Parent->Database->Instance)
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql       NVARCHAR(MAX)
--*/
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
SET @sql = N'
UPDATE tgt
   SET ' + STUFF(-- Strip off leading unnecessary characters
                 (--
                  SELECT NCHAR(13) + NCHAR(10)
                        + N'      ,'
                        + c.name + N' = IIF(' + REPLACE(c.name,N'_MS_AVG',N'_CNT') + N' ' + NCHAR(62) + N' 0' -- NCHAR(62) is ">"
                                       + N',1.0 * COALESCE(' + REPLACE(c.name,N'_MS_AVG',N'_MS_CNT')
                                                             + N',0.0) / '
                                                             + REPLACE(c.name,N'_MS_AVG',N'_CNT')
                                                      + N',NULL)'
                   FROM #SQLXL_Index_Compilation_Compute_Columns AS c
                  WHERE c.typ = N'AVG'
                     FOR XML PATH(N''), TYPE
                 ).value('(./text())[1]',N'NVARCHAR(MAX)')
                ,1,9,N'')
+ N'
  FROM [##SQLXL_Index_Compilation] AS tgt';

EXECUTE sp_executesql @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Calculated all millisecond Averages'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Index Computed values and ratios
/******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT tgt.object_id,tgt.index_id,p.rec_type,
--*/
 ius_read_to_write_RAT     = IIF(tgt.ius_user_updates_CNT > 0,1.0 * COALESCE(tgt.ius_user_read_CNT ,0) / tgt.ius_user_updates_CNT,NULL)
,ops_read_to_write_RAT     = IIF(tgt.ops_total_write_CNT  > 0,1.0 * COALESCE(tgt.ops_total_read_CNT,0) / tgt.ops_total_write_CNT ,NULL)
,page_lock_to_row_lock_RAT = IIF(tgt.ios_row_lock_CNT     > 0,1.0 * COALESCE(tgt.ios_page_lock_CNT ,0) / tgt.ios_row_lock_CNT    ,NULL)
-------------------------------------------------
,ius_scans_to_read_PCT     = IIF(tgt.ius_user_read_CNT    > 0,100.0 * tgt.ius_user_scans_CNT   / tgt.ius_user_read_CNT ,NULL)
,ius_lookups_to_read_PCT   = IIF(tgt.ius_user_read_CNT    > 0,100.0 * tgt.ius_user_lookups_CNT / tgt.ius_user_read_CNT ,NULL)
,ius_seeks_to_read_PCT     = IIF(tgt.ius_user_read_CNT    > 0,100.0 * tgt.ius_user_seeks_CNT   / tgt.ius_user_read_CNT ,NULL)
,ius_read_to_parent_PCT    = IIF(p.ius_user_read_CNT      > 0,100.0 * tgt.ius_user_read_CNT    / p.ius_user_read_CNT   ,NULL)
,ius_write_to_parent_PCT   = IIF(p.ius_user_updates_CNT   > 0,100.0 * tgt.ius_user_updates_CNT / p.ius_user_updates_CNT,NULL)
,ius_write_to_instance_PCT = IIF(a.ius_user_updates_CNT   > 0,100.0 * tgt.ius_user_updates_CNT / a.ius_user_updates_CNT,NULL)
-------------------------------------------------
,ops_scans_to_read_PCT            = IIF(tgt.ops_total_read_CNT > 0,100.0 * tgt.ops_total_scan_CNT       / tgt.ops_total_read_CNT,NULL)
                                    -- NOTE: COLUMNSTORE excluded from above since ALL reads are SCANS
,ios_singleton_lookup_to_read_PCT = IIF(tgt.ops_total_read_CNT > 0,100.0 * tgt.ios_singleton_lookup_CNT / tgt.ops_total_read_CNT,NULL)
,ios_forwarded_fetch_to_read_PCT  = IIF(tgt.ops_total_read_CNT > 0,100.0 * tgt.ios_forwarded_fetch_CNT  / tgt.ops_total_read_CNT,NULL)
,ops_read_to_parent_PCT           = IIF(p.ops_total_read_CNT   > 0,100.0 * tgt.ops_total_read_CNT       / p.ops_total_read_CNT  ,NULL)
,ops_write_to_parent_PCT          = IIF(p.ops_total_write_CNT  > 0,100.0 * tgt.ops_total_write_CNT      / p.ops_total_write_CNT ,NULL)
,ops_write_to_instance_PCT        = IIF(a.ops_total_write_CNT  > 0,100.0 * tgt.ops_total_write_CNT      / a.ops_total_write_CNT ,NULL)
,page_splits_to_write_PCT         = IIF((COALESCE(tgt.ops_total_insert_CNT,0) + COALESCE(tgt.ops_total_update_CNT,0)) > 0
                                       ,100.0 *  tgt.ops_total_page_split_CNT / (tgt.ops_total_insert_CNT + tgt.ops_total_update_CNT)
                                       ,NULL)
,page_merge_to_write_PCT          = IIF(tgt.ops_total_write_CNT > 0
                                       ,100.0 * COALESCE(tgt.ops_total_page_merge_CNT,0) / tgt.ops_total_write_CNT
                                       ,NULL)
,ios_page_compression_fail_PCT    = IIF(tgt.ios_page_compression_attempt_CNT > 0
                                       ,100.0 * tgt.ios_page_compression_fail_CNT / tgt.ios_page_compression_attempt_CNT
                                       ,NULL)
-------------------------------------------------
,used_pages_in_buffer_PCT         = IIF(tgt.reserved_page_PG_CNT > 0
                                       ,100.0 * tgt.buffer_total_KB_CNT / (tgt.reserved_page_PG_CNT * 8.0)
                                       ,NULL)
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS tgt -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p   -- parent level composite record
    ON tgt.database_id           = p.database_id
   AND tgt.parent_object_id      = p.parent_object_id
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'A') AS a -- instance level composite record
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Calculate percents and ratios - Index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Table/Parent
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT database_id,parent_object_id,object_id,index_id,type,
--*/
 ius_read_to_write_RAT     = IIF(tgt.ius_user_updates_CNT > 0,1.0 * COALESCE(tgt.ius_user_read_CNT ,0) / tgt.ius_user_updates_CNT,NULL)
,ops_read_to_write_RAT     = IIF(tgt.ops_total_write_CNT  > 0,1.0 * COALESCE(tgt.ops_total_read_CNT,0) / tgt.ops_total_write_CNT ,NULL)
,page_lock_to_row_lock_RAT = IIF(tgt.ios_row_lock_CNT     > 0,1.0 * COALESCE(tgt.ios_page_lock_CNT ,0) / tgt.ios_row_lock_CNT    ,NULL)
-------------------------------------------------
,ius_scans_to_read_PCT     = IIF(tgt.ius_user_read_CNT  > 0,100.0 * tgt.ius_user_scans_CNT   / tgt.ius_user_read_CNT,NULL)
,ius_lookups_to_read_PCT   = IIF(tgt.ius_user_read_CNT  > 0,100.0 * tgt.ius_user_lookups_CNT / tgt.ius_user_read_CNT,NULL)
,ius_seeks_to_read_PCT     = IIF(tgt.ius_user_read_CNT  > 0,100.0 * tgt.ius_user_seeks_CNT   / tgt.ius_user_read_CNT,NULL)
,ius_read_to_parent_PCT    = IIF(a.ius_user_read_CNT    > 0,100.0 * tgt.ius_user_read_CNT    / a.ius_user_read_CNT,NULL)
,ius_write_to_parent_PCT   = IIF(a.ius_user_updates_CNT > 0,100.0 * tgt.ius_user_updates_CNT / a.ius_user_updates_CNT,NULL)
,ius_write_to_instance_PCT = IIF(a.ius_user_updates_CNT > 0,100.0 * tgt.ius_user_updates_CNT / a.ius_user_updates_CNT,NULL)
-------------------------------------------------
,ops_scans_to_read_PCT            = IIF(tgt.ops_total_read_CNT > 0,100.0 * tgt.ops_total_scan_CNT       / tgt.ops_total_read_CNT,NULL)
                                    -- NOTE: COLUMNSTORE excluded FROM above since ALL reads are SCANS
,ios_singleton_lookup_to_read_PCT = IIF(tgt.ops_total_read_CNT > 0,100.0 * tgt.ios_singleton_lookup_CNT / tgt.ops_total_read_CNT,NULL)
,ios_forwarded_fetch_to_read_PCT  = IIF(tgt.ops_total_read_CNT > 0,100.0 * tgt.ios_forwarded_fetch_CNT  / tgt.ops_total_read_CNT,NULL)
,ops_read_to_parent_PCT           = IIF(a.ops_total_read_CNT   > 0,100.0 * tgt.ops_total_read_CNT       / a.ops_total_read_CNT,NULL)
,ops_write_to_parent_PCT          = IIF(a.ops_total_write_CNT  > 0,100.0 * tgt.ops_total_write_CNT      / a.ops_total_write_CNT,NULL)
,ops_write_to_instance_PCT        = IIF(a.ops_total_write_CNT  > 0,100.0 * tgt.ops_total_write_CNT      / a.ops_total_write_CNT,NULL)
,page_splits_to_write_PCT         = IIF((COALESCE(tgt.ops_total_insert_CNT,0) + COALESCE(tgt.ops_total_update_CNT,0)) > 0
                                       ,100.0 *  tgt.ops_total_page_split_CNT / (tgt.ops_total_insert_CNT + tgt.ops_total_update_CNT)
                                       ,NULL)
,page_merge_to_write_PCT          = IIF(tgt.ops_total_write_CNT > 0
                                       ,100.0 * COALESCE(tgt.ops_total_page_merge_CNT,0) / tgt.ops_total_write_CNT
                                       ,NULL)
,ios_page_compression_fail_PCT    = IIF(tgt.ios_page_compression_attempt_CNT > 0
                                       ,100.0 * tgt.ios_page_compression_fail_CNT / tgt.ios_page_compression_attempt_CNT
                                       ,NULL)
-------------------------------------------------
,used_pages_in_buffer_PCT         = IIF(tgt.reserved_page_PG_CNT > 0
                                       ,100.0 * tgt.buffer_total_KB_CNT / (tgt.reserved_page_PG_CNT * 8.0)
                                       ,NULL)
  FROM [##SQLXL_Index_Compilation] AS tgt
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'A') AS a -- instance level composite record
 WHERE tgt.rec_type = N'P'                                                    -- parent level composite record
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Calculate percents and ratios - Table/Parent'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Compute index metrics as percent of Parent or Instance',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [##SQLXL_Index_Compilation] - Compute metrics as percent of Parent or Instance
/******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql        NVARCHAR(MAX)
       ,@ssms_ads       TINYINT = 1
       ,@msg       N(1000)
       ,@exec_dttm  DATETIME      = GETDATE()
--*/

DECLARE @column_name SYSNAME;

BEGIN TRY
   DROP TABLE [##SQLXL_Index_Metrics];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Index_Metrics]
(rec_type         NCHAR(1)       COLLATE DATABASE_DEFAULT NOT NULL  -- D-Database,P-Parent,I-index
,database_id      SMALLINT                                NOT NULL
,parent_object_id INT                                     NOT NULL
,object_id        INT                                     NOT NULL
,index_id         INT                                     NOT NULL
,type             NVARCHAR(2)    COLLATE DATABASE_DEFAULT NOT NULL
,metric           SYSNAME        COLLATE DATABASE_DEFAULT NOT NULL
,metric_AMT       FLOAT                                       NULL
,metric_FMT       NVARCHAR(7)    COLLATE DATABASE_DEFAULT     NULL
,diagnostic_PCT   FLOAT                                       NULL
-----------------------------
,diagnostic       NVARCHAR(1000) COLLATE DATABASE_DEFAULT     NULL
,diagnostic_RANK  INT                                         NULL
,previous_sum_PCT FLOAT                                       NULL
);

-- Create index on SQLXL_Index_Metrics -------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_Metrics
    ON [##SQLXL_Index_Metrics]
       (rec_type
       ,database_id
       ,parent_object_id
       ,object_id
       ,index_id
       ,type
       ,metric
       )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Created & Indexed table [##SQLXL_Index_Metrics]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Update column rankings - PARENT within TOTAL & INDEX within PARENT',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Insert All millisecond (_MS) average (_AVG) computed values into [##SQLXL_Index_Metrics]
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Metrics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,metric
      ,metric_AMT
      ,metric_FMT
      )
SELECT rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,'ops_total_wait_MS_AVG'
      ,ops_total_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ops_total_wait_MS_AVG, N'ms')
FROM   [##SQLXL_Index_Compilation] AS ic
WHERE  ops_total_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,'ops_total_lock_wait_MS_AVG'
      ,ops_total_lock_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ops_total_lock_wait_MS_AVG, N'ms')
FROM   [##SQLXL_Index_Compilation] AS ic
WHERE  ops_total_lock_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,'ios_row_lock_wait_MS_AVG'
      ,ios_row_lock_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_row_lock_wait_MS_AVG, N'ms')
FROM   [##SQLXL_Index_Compilation] AS ic
WHERE  ios_row_lock_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,'ios_page_lock_wait_MS_AVG'
      ,ios_page_lock_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_page_lock_wait_MS_AVG, N'ms')
FROM   [##SQLXL_Index_Compilation] AS ic
WHERE  ios_page_lock_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,'ios_page_latch_wait_MS_AVG'
      ,ios_page_latch_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_page_latch_wait_MS_AVG, N'ms')
FROM   [##SQLXL_Index_Compilation] AS ic
WHERE  ios_page_latch_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,'ios_page_io_latch_wait_MS_AVG'
      ,ios_page_io_latch_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_page_io_latch_wait_MS_AVG, N'ms')
FROM   [##SQLXL_Index_Compilation] AS ic
WHERE  ios_page_io_latch_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,'ios_tree_page_latch_wait_MS_AVG'
      ,ios_tree_page_latch_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_tree_page_latch_wait_MS_AVG, N'ms')
FROM   [##SQLXL_Index_Compilation] AS ic
WHERE  ios_tree_page_latch_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,'ios_tree_page_io_latch_wait_MS_AVG'
      ,ios_tree_page_io_latch_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_tree_page_io_latch_wait_MS_AVG, N'ms')
FROM   [##SQLXL_Index_Compilation] AS ic
WHERE  ios_tree_page_io_latch_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,'cs_row_group_lock_wait_MS_AVG'
      ,cs_row_group_lock_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](cs_row_group_lock_wait_MS_AVG, N'ms')
FROM   [##SQLXL_Index_Compilation] AS ic
WHERE  cs_row_group_lock_wait_MS_AVG > 0.0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Added all millisecond Averages to [##SQLXL_Index_Metrics]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;


/******************************************************************************************************************************************\
 Cursor through all Parent & index Metrics - AMT (FLOAT) & CNT (%INT)
 Excludes %_AVG            handled separately
          %_PCT            handled separately
          %_RAT            handled separately
          Partition_%
          tbl_column_CNT
          Key_Columns_CNT
          row_CNT
          CLR_trigger_CNT
          SQL_trigger_CNT
          is_instead_of_trigger_CNT
\******************************************************************************************************************************************/
DECLARE agg_crsr CURSOR LOCAL STATIC FOR
SELECT v.name COLLATE DATABASE_DEFAULT
  FROM #SQLXL_Index_Compilation_Compute_Columns AS v
 WHERE v.typ = N'SUM'
 ORDER BY
       v.name;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Loop through cursor of columns to calculate INDEX level as percent of PARENT
--------------------------------------------------------------------------------------------------------------------------------------------
OPEN agg_crsr;

WHILE 1 = 1 BEGIN
   FETCH NEXT
    FROM agg_crsr
    INTO @column_name;

   IF @@fetch_status <> 0 BREAK

   SET @sql = N'
   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Compute Percent of Parent ' + @column_name + N' for Indexes
   -----------------------------------------------------------------------------------------------------------------------------------------
   INSERT
     INTO [##SQLXL_Index_Metrics]
         (rec_type
         ,database_id
         ,parent_object_id
         ,object_id
         ,index_id
         ,type
         ,metric
         ,metric_AMT
         ,metric_FMT
         ,diagnostic_PCT
         )
   SELECT i.rec_type
         ,i.database_id
         ,i.parent_object_id
         ,i.object_id
         ,i.index_id
         ,i.type
         ,metric     = ''' + @column_name + N'''
         ,metric_AMT = i.' + @column_name + N'
         ,metric_FMT = [dbo].[SQLXL_3SD](i.' + @column_name + N'
                                                  -- Assign the numeric significance data type
                                                 ,CASE WHEN CHARINDEX(N''_KB_'',''' + @column_name + N''') > 0 THEN N''KB''
                                                       WHEN CHARINDEX(N''_MS_'',''' + @column_name + N''') > 0 THEN N''MS''
                                                       WHEN CHARINDEX(N''_PG_'',''' + @column_name + N''') > 0 THEN N''P''
                                                       WHEN ''' + @column_name + N''' LIKE N''%_CNT''          THEN N''I''
                                                       ELSE N''N''
                                                  END
                                                 )
                      + CASE WHEN ''' + @column_name + N''' LIKE N''%_PCT'' THEN N''%'' -- excluded by cursor WHERE clause
                             WHEN ''' + @column_name + N''' LIKE N''%_RAT'' THEN N''x'' -- excluded by cursor WHERE clause
                             ELSE N''''
                        END
         ,diagnostic_PCT  = CASE WHEN COALESCE(a.' + @column_name + N',0) = 0
                                 THEN 0.0
                                 ELSE 100.0 * i.' + @column_name + N' / a.' + @column_name + N'
                            END
     FROM [##SQLXL_Index_Compilation] AS i
    INNER
     JOIN (-- Sum up values for each column
           SELECT database_id
                 ,parent_object_id
                 ,' + @column_name + N' = SUM(COALESCE(' + @column_name + N',0))
             FROM [##SQLXL_Index_Compilation]
            WHERE rec_type IN (N''I'')
              AND NOT (    type = N''M'' -- Omit missing index values from where they''ve been rolled up
                       AND N''' + @column_name + N''' NOT LIKE N''MIX_%''
                      )
            GROUP BY
                  database_id
                 ,parent_object_id
          ) a
       ON i.database_id        = a.database_id
      AND i.parent_object_id   = a.parent_object_id
    WHERE i.rec_type           = N''I''
      AND i.' + @column_name + N' > 0.0
   OPTION (MAXDOP 1,RECOMPILE);'

   EXECUTE sp_executesql @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
   -- NOTE: no RAISERROR here since would occur for each column name

   SET @sql = N'
   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Compute Percent of Total ' + @column_name + N' for Parent
   -----------------------------------------------------------------------------------------------------------------------------------------
   INSERT
     INTO [##SQLXL_Index_Metrics]
         (rec_type
         ,database_id
         ,parent_object_id
         ,object_id
         ,index_id
         ,type
         ,metric
         ,metric_AMT
         ,metric_FMT
         ,diagnostic_PCT
         )
   SELECT i.rec_type
         ,i.database_id
         ,i.parent_object_id
         ,i.object_id
         ,i.index_id
         ,i.type
         ,metric          = ''' + @column_name + N'''
         ,metric_AMT      = i.' + @column_name + N'
         ,metric_FMT = [dbo].[SQLXL_3SD](i.' + @column_name + N'
                                           ,CASE WHEN CHARINDEX(N''_KB_'',''' + @column_name + N''') > 0 THEN N''KB''
                                                 WHEN CHARINDEX(N''_MS_'',''' + @column_name + N''') > 0 THEN N''MS''
                                                 WHEN CHARINDEX(N''_PG_'',''' + @column_name + N''') > 0 THEN N''P''
                                                 WHEN ''' + @column_name + N''' LIKE N''%_CNT''          THEN N''I''
                                                 ELSE N''N''
                                            END
                                           )
                      + CASE WHEN ''' + @column_name + N''' LIKE N''%_PCT'' THEN N''%'' -- excluded by cursor WHERE clause
                             WHEN ''' + @column_name + N''' LIKE N''%_RAT'' THEN N''x'' -- excluded by cursor WHERE clause
                             ELSE N''''
                        END
         ,diagnostic_PCT  = CASE WHEN COALESCE(a.' + @column_name + N',0) = 0
                                 THEN 0.0
                                 ELSE 100.0 * i.' + @column_name + N' / a.' + @column_name + N'
                            END
     FROM [##SQLXL_Index_Compilation] AS i
    CROSS
     JOIN (-- Database or Instance totals
           SELECT ' + @column_name + N'
             FROM [##SQLXL_Index_Compilation]
            WHERE database_id      = 0
              AND parent_object_id = 0
              AND object_id        = 0
              AND index_id         = 0
              AND type             = N''A'' -- instance level composite record
              AND sub_type         = 0
              AND rec_type         = N''A'' -- instance level composite record
          ) AS a
    WHERE i.rec_type = N''P''
      AND i.' + @column_name + N' > 0.0
   OPTION (MAXDOP 1,RECOMPILE);'

   EXECUTE sp_executesql @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
   -- NOTE: no RAISERROR here since would occur for each column name

END; -- WHILE 1 = 1

CLOSE agg_crsr;
DEALLOCATE agg_crsr;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Compute index metrics as percent of Parent or Instance'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Add Ratio and Percent metrics to [##SQLXL_Index_Metrics]',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Cursor through all percent & ratio columns - %_PCT (float) & %_RAT (float) - for index, parent levels
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql         NVARCHAR(MAX)
       ,@column_name SYSNAME
       ,@ssms_ads    TINYINT = 1
--*/
DECLARE agg_crsr CURSOR LOCAL FAST_FORWARD FOR
SELECT name
  FROM #SQLXL_Index_Compilation_Compute_Columns AS c
 WHERE c.typ IN (N'PCT',N'RAT')
 ORDER BY
       name
OPTION (MAXDOP 1,RECOMPILE);

--------------------------------------------------------------------------------------------------------------------------------------------
-- Loop through cursor of columns to save off Percent, Ratio computations for use below
--------------------------------------------------------------------------------------------------------------------------------------------
OPEN agg_crsr;

WHILE 1 = 1 BEGIN
   FETCH NEXT
    FROM agg_crsr
    INTO @column_name;

   IF @@fetch_status <> 0 BREAK

   SET @sql = N'
   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Add metrics records for ' + @column_name + N' for Indexes
   -----------------------------------------------------------------------------------------------------------------------------------------
   INSERT
     INTO [##SQLXL_Index_Metrics]
         (rec_type
         ,database_id
         ,parent_object_id
         ,object_id
         ,index_id
         ,type
         ,metric
         ,metric_AMT
         ,metric_FMT
         ,diagnostic_PCT
         )
   SELECT i.rec_type
         ,i.database_id
         ,i.parent_object_id
         ,i.object_id
         ,i.index_id
         ,i.type
         ,metric     = ''' + @column_name + N'''
         ,metric_AMT = i.' + @column_name + N'
         ,metric_FMT = CASE WHEN i.' + @column_name + N' IS NULL THEN N''n/a''
                            ELSE [dbo].[SQLXL_3SD](i.' + @column_name + N'
                                                  ,CASE WHEN CHARINDEX(N''_KB_'',''' + @column_name + N''') > 0
                                                        THEN N''KB'' -- excluded by cursor WHERE clause
                                                        WHEN CHARINDEX(N''_MS_'',''' + @column_name + N''') > 0
                                                        THEN N''MS'' -- excluded by cursor WHERE clause
                                                        WHEN CHARINDEX(N''_PG_'',''' + @column_name + N''') > 0
                                                        THEN N''P''  -- excluded by cursor WHERE clause
                                                        WHEN ''' + @column_name + N''' LIKE N''%_CNT''
                                                        THEN N''I''  -- excluded by cursor WHERE clause
                                                        ELSE N''N''
                                                   END
                                                  )
                                + CASE WHEN ''' + @column_name + N''' LIKE N''%_PCT'' THEN N''%''
                                       WHEN ''' + @column_name + N''' LIKE N''%_RAT'' THEN N''x''
                                       ELSE N''''
                                  END
                       END
         ,diagnostic_PCT  = i.' + @column_name + N' --NULL
     FROM [##SQLXL_Index_Compilation] AS i
    WHERE i.rec_type IN (N''I'',N''P'')
      AND i.' + @column_name + N' IS NOT NULL
   OPTION(MAXDOP 1,RECOMPILE);'

   EXECUTE sp_executesql @sql; IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
   -- NOTE: no RAISERROR here since would occur for each column name

END;  -- WHILE 1 = 1

CLOSE agg_crsr;
DEALLOCATE agg_crsr;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Add Ratio and Percent metrics to [##SQLXL_Index_Metrics]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************/
-- Update - [SQLXL_Index_Metrics] - Rank percent of parent within instance & index within Parent
/******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Update column rankings - PARENT within TOTAL
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT c.*,
--*/
       diagnostic = IIF(RIGHT(c.metric,4) IN (N'_AVG',N'_PCT',N'_RAT')
                       ,NULL -- exclude from rankings
                       ,N'(' + [dbo].[SQLXL_3SD](tgt.diagnostic_PCT,N'N') + N'%'
                             + COALESCE(N' #' + CAST(c.diagnostic_rank AS NVARCHAR(20)),N'')
                       + N')')
      ,diagnostic_rank  = c.diagnostic_rank
      ,previous_sum_PCT = COALESCE(c.previous_sum_PCT,0.0)
  FROM [##SQLXL_Index_Metrics] AS tgt
  JOIN (--
        SELECT c.rec_type
              ,c.database_id
              ,c.parent_object_id
              ,c.object_id
              ,c.index_id
              ,c.type
              ,c.metric
              ,c.diagnostic_PCT
              ,c.diagnostic_rank
              ,previous_sum_PCT = LAG(c.running_sum) OVER (PARTITION BY c.metric
                                                               ORDER BY c.running_sum
                                                                       ,c.parent_object_id
                                                          )
          FROM (--
                SELECT rec_type
                      ,database_id
                      ,parent_object_id
                      ,object_id
                      ,index_id
                      ,type
                      ,metric
                      ,diagnostic_PCT
                      ,diagnostic_rank = CASE WHEN metric IN (N'ops_read_to_write_RAT'
                                                             ,N'ius_read_to_write_RAT'
                                                             )
                                              THEN NULL
                                              WHEN diagnostic_PCT > 1.0
                                              THEN RANK() OVER (PARTITION BY metric
                                                                    ORDER BY diagnostic_PCT DESC
                                                               )
                                              ELSE NULL
                                         END
                      ,running_sum  = IIF(RIGHT(metric,4) NOT IN (N'_AVG',N'_RAT')
                                         ,SUM(diagnostic_PCT) OVER (PARTITION BY metric
                                                                        ORDER BY diagnostic_PCT DESC
                                                                   )
                                         ,NULL)
                  FROM [##SQLXL_Index_Metrics]
                 WHERE 1 = 1
                   AND rec_type = N'P'                      -- parent level composite record
               ) AS c
       ) AS c
    ON tgt.rec_type         = c.rec_type
   AND tgt.database_id      = c.database_id
   AND tgt.parent_object_id = c.parent_object_id
   AND tgt.object_id        = c.object_id
   AND tgt.index_id         = c.index_id
   AND tgt.type             = c.type
   AND tgt.metric           = c.metric
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update column rankings - PARENT within TOTAL & INDEX within PARENT'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Update column rankings - INDEX within PARENT',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Update - [SQLXL_Index_Metrics] - column rankings - INDEX within PARENT
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT c.*,
--*/
       diagnostic = IIF(RIGHT(c.metric,4) IN (N'_AVG',N'_PCT',N'_RAT')
                       ,NULL -- exclude from rankings
                       ,N'(' + [dbo].[SQLXL_3SD](tgt.diagnostic_PCT,N'N') + N'%'
                             + COALESCE(N' #' + CAST(c.diagnostic_rank AS NVARCHAR(20)),N'')
                       + N')')
      ,diagnostic_rank  = c.diagnostic_rank
      ,previous_sum_PCT = COALESCE(c.previous_sum_PCT,0.0)
  FROM [##SQLXL_Index_Metrics] AS tgt
  JOIN (--
        SELECT c.rec_type
              ,c.database_id
              ,c.parent_object_id
              ,c.object_id
              ,c.index_id
              ,c.type
              ,c.metric
              ,c.diagnostic_PCT
              ,c.diagnostic_rank
              ,previous_sum_PCT = LAG(c.running_sum) OVER (PARTITION BY c.metric
                                                                       ,c.parent_object_id
                                                               ORDER BY c.running_sum
                                                          )
          FROM (--
                SELECT rec_type
                      ,database_id
                      ,parent_object_id
                      ,object_id
                      ,index_id
                      ,type
                      ,metric
                      ,diagnostic_PCT
                      ,diagnostic_rank = CASE WHEN metric IN (N'ops_read_to_write_RAT'
                                                             ,N'ius_read_to_write_RAT'
                                                             )
                                              THEN NULL
                                              WHEN diagnostic_PCT > 1.0
                                              THEN RANK() OVER (PARTITION BY parent_object_id
                                                                            ,metric
                                                                    ORDER BY diagnostic_PCT DESC
                                                               )
                                              ELSE NULL
                                         END
                      ,running_sum  = IIF(RIGHT(metric,4) NOT IN (N'_AVG',N'_RAT')
                                         ,SUM(diagnostic_PCT) OVER (PARTITION BY parent_object_id
                                                                                ,metric
                                                                        ORDER BY diagnostic_PCT DESC
                                                                   )
                                         ,NULL)
                  FROM [##SQLXL_Index_Metrics]
                 WHERE 1 = 1
                   AND rec_type = N'I'         -- index level composite record
               ) AS c
       ) AS c
    ON tgt.rec_type         = c.rec_type
   AND tgt.database_id      = c.database_id
   AND tgt.parent_object_id = c.parent_object_id
   AND tgt.object_id        = c.object_id
   AND tgt.index_id         = c.index_id
   AND tgt.type             = c.type
   AND tgt.metric           = c.metric
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Update column rankings - INDEX within PARENT'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Create - [##SQLXL_Instance_Diagnostics] - Diagnostics Table
--------------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRY
   DROP TABLE [##SQLXL_Instance_Diagnostics];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Instance_Diagnostics]
      (diagnostic_ID    INT            IDENTITY(1,1)
      -----------------------------
      ,rec_type         CHAR(1)        DEFAULT N'A' COLLATE DATABASE_DEFAULT NOT NULL
                                       -- A-All(Instance),D-Database,P-Parent,S-System/Internal,H-History,I-Index
      ,database_id      SMALLINT       DEFAULT 0                             NOT NULL
      ,parent_object_id INT            DEFAULT 0                             NOT NULL
      ,object_id        INT            DEFAULT 0                             NOT NULL
      ,index_id         INT            DEFAULT 0                             NOT NULL
      ,type             NVARCHAR(2)    DEFAULT N'A' COLLATE DATABASE_DEFAULT NOT NULL
                                       -- A-All(Instance),D-Database,P-Parent,S-System/Internal,H-History,I-Index
                                       -- 0-90 Index Type,M-Missing Index,F-Foreign Key,V-View
                                       -- IT-system internal table,TF-SQL Table Valued Function SQL2012+
      -----------------------------
      ,diagnostic       NVARCHAR(4000)              COLLATE DATABASE_DEFAULT NULL
      );

-- Index ##SQLXL_Index_Instance_Diagnostics
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_Instance_Diagnostics
    ON [##SQLXL_Instance_Diagnostics]
      (database_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic_ID
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

--------------------------------------------------------------------------------------------------------------------------------------------
-- Create - [##SQLXL_Index_Diagnostics] - Diagnostics Table
--------------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRY
   DROP TABLE [##SQLXL_Index_Diagnostics];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Index_Diagnostics]
      (diagnostic_ID    INT            IDENTITY(1,1)
      -----------------------------
      ,rec_type         CHAR(1)        DEFAULT N'A' COLLATE DATABASE_DEFAULT NOT NULL
                                       -- A-All(Instance),D-Database,P-Parent,S-System/Internal,H-History,I-Index
      ,database_id      SMALLINT       DEFAULT 0                             NOT NULL
      ,parent_object_id INT            DEFAULT 0                             NOT NULL
      ,object_id        INT            DEFAULT 0                             NOT NULL
      ,index_id         INT            DEFAULT 0                             NOT NULL
      ,type             NVARCHAR(2)    DEFAULT N'A' COLLATE DATABASE_DEFAULT NOT NULL
                                       -- A-All(Instance),D-Database,P-Parent,S-System/Internal,H-History,I-Index
                                       -- 0-90 Index Type,M-Missing Index,F-Foreign Key,V-View
                                       -- IT-system internal table,TF-SQL Table Valued Function SQL2012+
      -----------------------------
      ,diagnostic       NVARCHAR(4000)              COLLATE DATABASE_DEFAULT NULL
      );

-- Index ##SQLXL_Index_Diagnostics
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_Diagnostics
    ON [##SQLXL_Index_Diagnostics]
      (database_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic_ID
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

--------------------------------------------------------------------------------------------------------------------------------------------
-- Create - [##SQLXL_Index_Metrics_Summary] - Diagnostics Table
--------------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRY
   DROP TABLE [##SQLXL_Index_Metrics_Summary];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Index_Metrics_Summary]
      (Diagnostic_ID       INT            IDENTITY(1,1)
      --------------------------------
      ,rec_type            CHAR(1)        COLLATE DATABASE_DEFAULT NOT NULL   -- D-Database,P-Parent,I-index
      ,database_id         SMALLINT                                NOT NULL
      ,parent_object_id    INT                                     NOT NULL
      ,object_id           INT                                     NOT NULL
      ,index_id            INT                                     NOT NULL
      ,type                NVARCHAR(2)    COLLATE DATABASE_DEFAULT NOT NULL
      --------------------------------
      ,diagnostic          NVARCHAR(4000) COLLATE DATABASE_DEFAULT NULL
      );

-- Index ##SQLXL_Index_Metrics_Summary
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_Metrics_Summary
    ON [##SQLXL_Index_Metrics_Summary]
      (database_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic_ID
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Created Instance & Index Diagnostics Tables & Metrics_Summary table'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Insert consolidated metrics into diagnostic table',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Create Metric Control tables
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_Metric_Rollup];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Index_Metric_Rollup]
      (metric_rollup_nbr INT     IDENTITY(1,1)
      ,min_value_1       FLOAT NULL
      ,Level_1           SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_1            SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,min_value_2       FLOAT NULL
      ,Level_2           SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_2            SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,min_value_3       FLOAT NULL
      ,Level_3           SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_3            SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,min_value_4       FLOAT NULL
      ,Level_4           SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_4            SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,min_value_5       FLOAT NULL
      ,Level_5           SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_5            SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,min_value_6       FLOAT NULL
      ,Level_6           SYSNAME COLLATE DATABASE_DEFAULT NULL
      ,abbr_6            SYSNAME COLLATE DATABASE_DEFAULT NULL
      );

--------------------------------------------------------------------------------------------------------------------------------------------
-- Populate Metric Control tables - adds friendlier names and chooses which totals to compute and concatenate together for display
-- ,(NULL,NULL  -- level 1
--  ,NULL,NULL,NULL  -- level 2
--  ,NULL,NULL,NULL  -- level 3
--  ,NULL,NULL,NULL  -- level 4
--  ,NULL,NULL,NULL  -- level 5
--  ,NULL,NULL,NULL) -- level 6
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Metric_Rollup]
      (min_value_1,Level_1,abbr_1
      ,min_value_2,Level_2,abbr_2
      ,min_value_3,Level_3,abbr_3
      ,min_value_4,Level_4,abbr_4
      ,min_value_5,Level_5,abbr_5
      ,min_value_6,Level_6,abbr_6)
VALUES
-- OPS RD/WRT Ratio
-- USG RD/WRT Ratio
-- OPS Reads
-- OPS Scans
-- OPS Lookups
-- OPS FWD Fetch
-- USG Reads
-- USG Scans
-- USG Lookups
-- LOB ACTVY
-- Last Read Days

/*------------------------------------------------------------------------------------------------------------------------------------------
Priority Metrics
------------------------------------------------------------------------------------------------------------------------------------------*/
-- Diagnostic - Index - Wait Time (BI11&12) & percent of next level up
-- Diagnostic - Index - Wait Counts (BI11&12) & percent of next level up
-- Diagnostic - Index - Wait Average time (BI11&12)
 ( 0.0,N'ops_total_wait_MS_CNT',N'*Waits: Time'
  ,NULL,N'ops_total_wait_CNT',N'Count'
  ,NULL,N'ops_total_wait_MS_AVG',N'Average (BI11)'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Total Locks & percent of next level up
-- Diagnostic - Index - Lock Promotion Attempts & percent of next level up
-- Diagnostic - Index - Lock Promotion Success & percent of next level up
-- Diagnostic - Index - Lock Promotion Fail & percent of next level up
,( 0.0,N'ops_total_lock_CNT',N'*Locks: Count'
  ,0.0,N'ios_lock_promotion_attempt_CNT',N'Promo Attempts'
  ,0.0,N'ios_lock_promotion_CNT',N'Success'
  ,0.0,N'ios_lock_promotion_fail_CNT',N'Fail'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Operations Page Splits - Total. Includes InMemory
-- Diagnostic - Index - Operations Page Splits - Leaf. Includes InMemory
-- Diagnostic - Index - Operations Page Splits - NonLeaf. Includes InMemory
,( 0.0,N'ops_total_page_split_CNT',N'*Splits: Count'
  ,NULL,N'page_splits_to_write_PCT',N'%WRT'
  ,NULL,N'ios_leaf_allocation_CNT',N'Leaf'
  ,NULL,N'ios_nonleaf_allocation_CNT',N'Nonleaf'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Operations Merges - Total. Includes InMemory
-- Diagnostic - Index - Operations Merges - Leaf. Includes InMemory
-- Diagnostic - Index - Operations Merges - Nonleaf. Includes InMemory
,( 0.0,N'ops_total_page_merge_CNT',N'*Merges: Count'
  ,NULL,N'page_merge_to_write_PCT',N'%WRT'
  ,NULL,N'ios_leaf_page_merge_CNT',N'Leaf'
  ,NULL,N'ios_nonleaf_page_merge_CNT',N'Nonleaf'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Missing index advantage Weighted (BI50)
-- Diagnostic - Index - Missing index advantage unweighted (BI50)
-- Diagnostic - Index - Missing index Compiles (BI50)
-- Diagnostic - Index - Missing index Cost (BI50)
-- Diagnostic - Index - Missing index Impact (BI50)
,( 0.0,N'mix_Advantage_weighted_AMT',N'*MIX(BI50) Weighted'
  ,0.0,N'mix_Advantage_AMT',N'UnWeighted'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Missing index Compiles (BI50)
-- Diagnostic - Index - Missing index Cost (BI50)
-- Diagnostic - Index - Missing index Impact (BI50)
,( 0.0,N'mix_unique_compiles_CNT',N'*MIX(BI50) Compiles'
  ,0.0,N'mix_avg_total_user_cost_AMT',N'Cost'
  ,0.0,N'mix_avg_user_impact_AMT',N'Impact'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - % reserved data pages in memory buffer
-- Diagnostic - Index - Memory Buffer % Used
,( 0.1,N'buffer_total_KB_CNT',N'*Buffer: Used'
  ,NULL,N'reserved_page_PG_CNT',N'Reserved'
  ,NULL,N'used_pages_in_buffer_PCT',N'%Buffered'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

----------------------------------------------------------------------------------------------
-- Diagnostic - Index - Operations Touches and % next level
-- Diagnostic - Index - Operations Reads % next level
-- Diagnostic - Index - Operations Writes % next level
-- Diagnostic - Index - Operations Read/Write ratio
,( 0.0,N'ops_total_contacts_CNT',N'*OPS: TOT (BI81)'
  ,0.0,N'ops_total_read_CNT',N'RDS'
  ,0.0,N'ops_total_write_CNT',N'WRT'
  ,NULL,N'ops_read_to_write_RAT',N'R/W'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Operations Read Scan Detail % Parent
-- Diagnostic - Index - Operations Read Lookup Detail % Parent
-- Diagnostic - Index - Operations Read Forwarded Fetch Detail % Parent
,( 0.0,N'ops_total_scan_CNT',N'*OPS: Scans'
  ,NULL,N'ops_scans_to_read_PCT',N'%RDS'
  ,0.0,N'ios_singleton_lookup_CNT',N'LKP'
  ,NULL,N'ios_singleton_lookup_to_read_PCT',N'%RDS'
  ,0.0,N'ios_forwarded_fetch_CNT',N'FWD Fetch'
  ,NULL,N'ios_forwarded_fetch_to_read_PCT',N'%RDS')

-- Diagnostic - Index - Operations Writes  - Includes InMemory & Columnstore
-- Diagnostic - Index - Operations Inserts - Includes InMemory & Columnstore
-- Diagnostic - Index - Operations Updates - Includes InMemory & Columnstore
-- Diagnostic - Index - Operations Deletes - Includes InMemory & Columnstore
,( 0.0,N'ops_total_insert_CNT',N'*OPS: Ins'
  ,0.0,N'ops_total_update_CNT',N'Upd'
  ,0.0,N'ops_total_delete_CNT',N'Del'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

----------------------------------------------------------------------------------------------
-- Diagnostic - Index - Usage Touches and % next level
-- Diagnostic - Index - Usage Reads and % next level
-- Diagnostic - Index - Usage Writes and % next level
-- Diagnostic - Index - Usage Read/Write ratio
,( 0.0,N'ius_user_total_CNT',N'*USG: TOT'
  ,0.0,N'ius_user_read_CNT',N'RDS'
  ,0.0,N'ius_user_updates_CNT',N'WRT'
  ,0.0,N'ius_read_to_write_RAT',N'R/W'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Usage Read Seek Detail % Parent
-- Diagnostic - Index - Usage Read Scan Detail % Parent
-- Diagnostic - Index - Usage Read Lookup Detail % Parent
,( 0.0,N'ius_user_seeks_CNT',N'*USG: Seeks'
  ,NULL,N'ius_seeks_to_read_PCT',N'%RDS'
  ,0.0,N'ius_user_scans_CNT',N'Scans'
  ,NULL,N'ius_scans_to_read_PCT',N'%RDS'
  ,0.0,N'ius_user_lookups_CNT',N'LKP'
  ,NULL,N'ius_lookups_to_read_PCT',N'%RDS')

----------------------------------------------------------------------------------------------
-- Diagnostic - Index - LOB Fetches
-- Diagnostic - Index - LOB Overflow Fetches
-- Diagnostic - Index - LOB Push off row
-- Diagnostic - Index - LOB Pull in row
,( 0.0,N'ios_lob_fetch_pages_CNT',N'*LOB: Fetch PGs'
  ,0.0,N'ios_row_overflow_fetch_in_pages_CNT',N'Overflow'
  ,0.0,N'ios_column_value_push_off_row_CNT',N'Push off row'
  ,0.0,N'ios_column_value_pull_in_row_CNT',N'Pull in row'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Insert consolidated metrics into diagnostic table'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Insert records into [##SQLXL_Index_Metrics_Summary]',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Insert - [SQLXL_Index_Metrics_Summary] - consolidated metrics into diagnostic table
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
TRUNCATE TABLE [##SQLXL_Index_Metrics_Summary]
--*/
INSERT
  INTO [##SQLXL_Index_Metrics_Summary]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT f.rec_type
      ,f.database_id
      ,f.parent_object_id
      ,f.object_id
      ,f.index_id
      ,f.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters
                           IIF(r.abbr_1 IS NOT NULL                                    -- label exists in Rollup table
                              , N' ' + r.abbr_1 + N': '
                              + COALESCE(f1.metric_FMT,N'0')
                              + COALESCE(N' ' + f1.diagnostic,N'')
                              ,N'')
                         + IIF(r.abbr_2 IS NOT NULL
                              , N' ' + r.abbr_2 + N': '
                              + COALESCE(f2.metric_FMT,N'0')
                              + COALESCE(N' ' + f2.diagnostic,N'')
                              ,N'')
                         + IIF(r.abbr_3 IS NOT NULL
                              , N' ' + r.abbr_3 + N': '
                              + COALESCE(f3.metric_FMT,N'0')
                              + COALESCE(N' ' + f3.diagnostic,N'')
                              ,N'')
                         + IIF(r.abbr_4 IS NOT NULL
                              , N' ' + r.abbr_4 + N': '
                              + COALESCE(f4.metric_FMT,N'0')
                              + COALESCE(N' ' + f4.diagnostic,N'')
                              ,N'')
                         + IIF(r.abbr_5 IS NOT NULL
                              , N' ' + r.abbr_5 + N': '
                              + COALESCE(f5.metric_FMT,N'0')
                              + COALESCE(N' ' + f5.diagnostic,N'')
                              ,N'')
                         + IIF(r.abbr_6 IS NOT NULL
                              , N' ' + r.abbr_6 + N': '
                              + COALESCE(f6.metric_FMT,N'0')
                              + COALESCE(N' ' + f6.diagnostic,N'')
                              ,N'')
                         ,1,1,N'')
/*** LOCAL TESTING ***
SELECT r.level_1
      ,[dbo].[SQLXL_3SD](COALESCE(f1.metric_AMT,0)
                        ,CASE WHEN CHARINDEX(N'_KB_',r.level_1) > 0 THEN N'KB'
                              WHEN CHARINDEX(N'_MS_',r.level_1) > 0 THEN N'MS'
                              ELSE N'N'
                         END)
      ,r.level_2
      ,r.level_3
      ,r.level_4
      ,r.level_5
      ,r.level_6
--*/
  FROM (--
        SELECT f.rec_type
              ,f.database_id
              ,f.parent_object_id
              ,f.object_id
              ,f.index_id
              ,f.type
              ,r.metric_rollup_nbr
          FROM [##SQLXL_Index_Metric_Rollup] AS r
          LEFT OUTER
          JOIN [##SQLXL_Index_Metrics]       AS f
            ON r.level_1 = f.metric
            OR r.Level_1 = N'ius_user_total_CNT'           -- always include these rollups even even if not significant in table
            OR (    r.Level_1 <> N'ops_total_contacts_CNT' -- always include these rollups even even if not significant in table
                AND f.type    <> N'M'                      -- missing nonclustered rowstore index already in index numbers
               )
            OR r.level_2 = f.metric
            OR r.level_3 = f.metric
            OR r.level_4 = f.metric
            OR r.level_5 = f.metric
            OR r.level_6 = f.metric
         WHERE f.diagnostic_RANK > 0
           AND f.type           <> N'F'                    -- foreign key constraint
         GROUP BY
               f.rec_type
              ,f.database_id
              ,f.parent_object_id
              ,f.object_id
              ,f.index_id
              ,f.type
              ,r.metric_rollup_nbr
       ) AS f
  JOIN [##SQLXL_Index_Metric_Rollup] AS r
    ON f.metric_rollup_nbr = r.metric_rollup_nbr
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f1
    ON r.level_1          = f1.metric
   AND f.rec_type         = f1.rec_type
   AND f.database_id      = f1.database_id
   AND f.parent_object_id = f1.parent_object_id
   AND f.object_id        = f1.object_id
   AND f.index_id         = f1.index_id
   AND f.type             = f1.type
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f2
    ON r.level_2          = f2.metric
   AND f.rec_type         = f2.rec_type
   AND f.database_id      = f2.database_id
   AND f.parent_object_id = f2.parent_object_id
   AND f.object_id        = f2.object_id
   AND f.index_id         = f2.index_id
   AND f.type             = f2.type
   AND 0.0                < f2.metric_AMT
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f3
    ON r.level_3          = f3.metric
   AND f.rec_type         = f3.rec_type
   AND f.database_id      = f3.database_id
   AND f.parent_object_id = f3.parent_object_id
   AND f.object_id        = f3.object_id
   AND f.index_id         = f3.index_id
   AND f.type             = f3.type
   AND 0.0                < f3.metric_AMT
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f4
    ON r.level_4          = f4.metric
   AND f.rec_type         = f4.rec_type
   AND f.database_id      = f4.database_id
   AND f.parent_object_id = f4.parent_object_id
   AND f.object_id        = f4.object_id
   AND f.index_id         = f4.index_id
   AND f.type             = f4.type
   AND 0.0                < f4.metric_AMT
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f5
    ON r.level_5          = f5.metric
   AND f.rec_type         = f5.rec_type
   AND f.database_id      = f5.database_id
   AND f.parent_object_id = f5.parent_object_id
   AND f.object_id        = f5.object_id
   AND f.index_id         = f5.index_id
   AND f.type             = f5.type
   AND 0.0                < f5.metric_AMT
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f6
    ON r.level_6          = f6.metric
   AND f.rec_type         = f6.rec_type
   AND f.database_id      = f6.database_id
   AND f.parent_object_id = f6.parent_object_id
   AND f.object_id        = f6.object_id
   AND f.index_id         = f6.index_id
   AND f.type             = f6.type
   AND 0.0                < f6.metric_AMT
 WHERE f1.metric_amt > r.min_value_1
    OR f2.metric_amt > r.min_value_2
    OR f3.metric_amt > r.min_value_3
    OR f4.metric_amt > r.min_value_4
    OR f5.metric_amt > r.min_value_5
    OR f6.metric_amt > r.min_value_6
    OR r.Level_1    IN (N'ops_total_contacts_CNT'
                       ,N'ius_user_total_CNT'
                       )
 ORDER BY
       r.metric_rollup_nbr
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Insert records into [##SQLXL_Index_Metrics_Summary]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/*** HELPER CODE: Find metric columns not included in consolidated metrics groupings ***
*** ONLY EXECUTE IN TEMPDB ***
SELECT c.name
  FROM [sys].[columns] c
  JOIN [sys].[types]   t
    ON c.system_type_id = t.system_type_id
 WHERE c.object_id = object_id(N'tempDB..[##SQLXL_Index_Compilation]')
    AND (   (t.name    = 'float'    AND RIGHT(c.name,4) = N'_AMT')
         OR (t.name LIKE N'%INT'    AND c.name LIKE N'%CNT%')
         OR (t.name    = 'DATETIME' AND c.name LIKE N'%_DTTM')
         OR (t.name LIKE N'%INT'    AND c.name LIKE N'%_days_ago%')
         OR (t.name    = 'float'       AND c.name LIKE N'%_AVG')
         OR (t.name    = 'float'       AND c.name LIKE N'%_RAT')
         OR c.name    IN (N'row_CNT',N'is_activity_for_period')
        )
EXCEPT
SELECT Level_1 FROM (--
SELECT Level_1 FROM [##SQLXL_Index_Metric_Rollup] UNION
SELECT Level_2 FROM [##SQLXL_Index_Metric_Rollup] UNION
SELECT Level_3 FROM [##SQLXL_Index_Metric_Rollup] UNION
SELECT Level_4 FROM [##SQLXL_Index_Metric_Rollup] UNION
SELECT Level_5 FROM [##SQLXL_Index_Metric_Rollup] UNION
SELECT Level_6 FROM [##SQLXL_Index_Metric_Rollup]
) AS c
ORDER BY 1
--*/

/*########################################################################################################################################*\
*** Investigate Investigate Investigate Investigate Investigate Investigate Investigate Investigate Investigate Investigate Investigate ****

Format & Priorities of Diagnostics entries:
(rec_type,database_id,parent_object_id,object_id,index_id,type,diagnostic)
\*########################################################################################################################################*/

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Start SQLXL Index Investigate ------------------------------------------',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Local Temp table to house prescriptions
----------------------------------------------------------------------------------------------------
SELECT TOP 0
       database_id
      ,parent_object_id
      ,object_id
      ,index_ID
      ,type
      ,action_desc  = CAST(NULL AS NVARCHAR(20))
      ,srt          = CAST(NULL AS INT)
      ,prescription = CAST(NULL AS NVARCHAR(1000))
  INTO #prescription
  FROM [##SQLXL_Index_Compilation];

CREATE CLUSTERED INDEX ixuc_#prescription
    ON #prescription
      (database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,TYPE
      ,srt
      )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

DECLARE @srt INT = 0; -- used to control the sequence of Prescriptions within a category

/******************************************************************************************************************************************\
********************************************************************************************************************************************
*** INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE I
    For additional SERVER & INSTANCE diagnostics, and creation of global temp table ##SQLXL_Instance_info see procedure [SQLXL_Instance]
********************************************************************************************************************************************
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- SQL Instance - tied to index usage
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Instance - SQL <2019, Entp Ed, Mem model <> LARGE_PAGES, 8GB+ RAM, TF834 not enabled, NO columnstore, enable Lock/Large Pgs?
-- Diagnostic - Instance - SQL 2019+, Entp Ed, Mem model <> LARGE_PAGES, 8GB+ RAM, TF876 (Lock/Lg Pages) not enabled
INSERT
  INTO [##SQLXL_Instance_Diagnostics] (diagnostic) -- remaining columns defaulted
SELECT CASE WHEN 8192 <= (SELECT CAST(run_value AS BIGINT) -- Large Pages requires minimum 8GB of memory
                            FROM [##SQLXL_Instance_info]
                           WHERE source    = N'configurations'
                             AND name      = N'max server memory (MB)'
                         )
             AND (-- get SQL Server edition
                  SELECT text_value
                    FROM [##SQLXL_Instance_info]
                   WHERE source    = N'SERVERPROPERTY'
                     AND name      = N'Edition'
                     AND (   text_value LIKE N'ENTERPRISE%'
                          OR text_value LIKE N'DEVELOPER%'
                         )
                 ) IS NOT NULL
            THEN  N'SQL Memory Model ' + text_value
                + IIF(text_value = N'LOCK_PAGES',N', use "LARGE_PAGES"?',N', use "LOCK_PAGES/LARGE_PAGES"?')
                + CASE WHEN (SELECT ProductMajorVersion
                               FROM [##SQLXL_Index_Startup]
                            ) >= 15
                       THEN CASE WHEN 876 NOT IN (SELECT CAST(name AS BIGINT)
                                                    FROM [##SQLXL_Instance_info]
                                                   WHERE source = N'TRACESTATUS'
                                                 )
                                 THEN ' Req TF876 (SQL 2019+)'
                                 ELSE N''
                            END
                       WHEN (-- count of columnstores
                             SELECT COUNT(1)
                               FROM [##SQLXL_Index_Compilation]
                              WHERE type IN (N'5' -- clustered columnstore
                                            ,N'6' -- nonclustered columnstore index
                                            )
                            ) > 0
                       THEN CASE WHEN 834 IN (SELECT CAST(name AS BIGINT) FROM [##SQLXL_Instance_info] WHERE source = N'TRACESTATUS')
                                 THEN N'' -- remove TF834 flagged above
                                 ELSE N' - Columnstore indexes found, do not enable TF834 (SQL <2019)'
                            END
                       ELSE CASE WHEN 834 IN (SELECT CAST(name AS BIGINT) FROM [##SQLXL_Instance_info] WHERE source = N'TRACESTATUS')
                                 THEN N''
                                 ELSE N' - Requires TF834 (<SQL 2019)'
                            END
                  END
            ELSE NULL
       END  -- CASE WHEN 8192 <= (SELECT CAST(run_value AS BIGINT)
/*** LOCAL TESTING ***
SELECT *
--*/
  FROM [##SQLXL_Instance_info]
 WHERE source      = N'dm_os_sys_info'
   AND name        = N'sql_memory_model_desc'
   AND text_value <> N'LARGE_PAGES'
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Instance Diagnostics - Enable LARGE PAGES if not Columnstore'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

-- Diagnostic - Instance - Columnstore indexes in use and Trace Flag 834 found (BI72)
INSERT
  INTO [##SQLXL_Instance_Diagnostics] (diagnostic)
SELECT  'Trace Flag 834 (large-page allocations for the buffer pool) in use with Columnstore indexes - not a good thing! See:'
      + NCHAR(167)
      + N'https://docs.microsoft.com/en-US/troubleshoot/sql/admin/performance-issues-using-columstore-indexes-large-pages (BI72)'
  FROM [##SQLXL_Instance_info] AS a
 WHERE 834 IN (-- list of all server-level trace flags
               SELECT name
                 FROM [##SQLXL_Instance_info]
                WHERE source = N'TRACESTATUS'
              )
   AND    0 < (-- All columnstore indexes
               SELECT COUNT(1)
                 FROM [##SQLXL_Index_Compilation]
                WHERE type
                   IN (N'5' -- clustered columnstore
                      ,N'6' -- nonclustered columnstore index
                      )
              )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Instance Diagnostics - TF834 enabled & Columnstore indexes used'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Instance-level aggregates
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
-- Diagnostic - Instance - Missing index count across instance
SELECT rec_type   = N'A'  -- instance level composite record
      ,a.database_id
      ,a.parent_object_id
      ,a.object_id
      ,a.index_id
      ,a.type
      ,diagnostic = COALESCE( N'Missing indexes: '
                            + CAST(COALESCE(a.Missing_index_CNT,0) AS NVARCHAR(20))
                            + N' out of 600 possible'
                            ,N'< Missing index count not found>'
                            )
  FROM [##SQLXL_Index_Compilation] AS a
 WHERE a.rec_type = N'A' -- instance level composite record
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Instance Diagnostics - Missing Indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
********************************************************************************************************************************************
*** DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABA ***
********************************************************************************************************************************************
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type         = N'D'          -- database level composite record
      ,database_id      = d.database_id
      ,parent_object_id = d.database_id
      ,object_id        = d.database_id
      ,index_id         = d.database_id
      ,type             = 'DB'
      ,diagnostic=
-- Diagnostic - DB - > 5% of indexes with writes and no reads (BI21 & 22)
  N'Nonclustered rowstore indexes with writes & no reads - '
+ CAST(i.unused_idx_CNT AS NVARCHAR(20)) + N'/' + CAST(i.idx_CNT AS NVARCHAR(20))
+ IIF(i.idx_CNT > 0,N'(' + [dbo].[SQLXL_3SD](1.0 * I.unused_idx_CNT / i.idx_CNT,N'%') + N')',N'')
+ N' (BI21&22)'
/*** LOCAL TESTING ***
SELECT database_id = d.database_id,i.*
--*/
  FROM [##SQLXL_Index_sys_databases] d
 CROSS
 APPLY (-- check if > 5% of indexes in each database with writes and no reads (BI21 & 22)
        SELECT unused_idx_CNT = SUM(IIF((COALESCE(i.ops_total_read_CNT,0)
                              + COALESCE(i.ius_User_read_CNT,0)) = 0,1,0))
              ,idx_CNT        = COUNT(1)
          FROM [##SQLXL_Index_Compilation] AS i
         WHERE i.rec_type    = N'I' -- index level composite record
           AND i.obj_type    = N'U' -- User Table
           AND i.type        = N'2' -- nonclustered rowstore index
           AND d.database_id = i.database_id
           AND (i.ops_total_write_CNT + i.ius_user_updates_CNT) > 0
       ) AS i
 WHERE IIF(i.idx_CNT > 0,100.0 * i.unused_idx_CNT / i.idx_CNT,0.0) > 5.0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - Nonclustered rowstore indexes with writes & no reads'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Diagnostic - DB - < 10% of table & view nonclustered rowstore indexes with Included Columns (BI30 & 31)
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type         = N'D'          -- database level composite record
      ,database_id      = i.database_id
      ,parent_object_id = i.database_id
      ,object_id        = i.database_id
      ,index_id         = i.database_id
      ,type             = 'DB'
      ,diagnostic = N'Included Columns: <10% Indexes - '
                  + CAST(i.included_index_CNT AS NVARCHAR(20))
                  + N'/'
                  + CAST(i.index_CNT AS NVARCHAR(20))
                  + N' (' + [dbo].[SQLXL_3SD](1.0 * i.included_index_CNT / i.index_CNT,N'%') + N')' -- /zero handled by HAVING clause below
                  + N' (BI30&31)'
  FROM (-- All index-level nonclustered rowstores, in tables or views, that are not non-history table
        SELECT database_id
              ,included_index_CNT = SUM(IIF(Included_Columns_CNT > 0,1,0))
              ,index_CNT          = COUNT(1)
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type  = N'I'    -- index level composite record
           AND type      = N'2'    -- Nonclustered rowstore index
           AND (   obj_type = N'U' -- User Table
                OR obj_type = N'V' -- View
               )
           AND obj_type_short_label <> N'HST' -- Not a History/archive table
         GROUP BY
               database_id
        HAVING COUNT(1) > 0  -- count of indexes greater than zero
       ) AS i
 WHERE (100.0 * i.included_index_CNT / i.index_CNT) < 10.0; -- /zero handled by HAVING clause above

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - < 10% of table & view nonclustered rowstore indexes with Included Columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - DB - Consider Database auto_update_stats_async due to high volumes of data changes (>10% stats rows)
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type         = N'D'          -- database level composite record
      ,database_id      = i.database_id
      ,parent_object_id = i.database_id
      ,object_id        = i.database_id
      ,index_id         = i.database_id
      ,type             = 'DB'
      ,diagnostic       = CONVERT(NVARCHAR(20),SUM(1)) + N' high write rowstore indexes (>10% stats rows) - UPDATE_STATS_ASYNC?'
  FROM [##SQLXL_Index_Compilation] AS i  -- only table source in query
 WHERE i.rec_type = N'I'                 -- index level composite record
   AND i.type    IN (N'1'                -- clustered rowstore index
                    ,N'2'                -- nonclustered rowstore index
                    )                    -- HEAPS handled separately.
   AND i.stats_no_recompute = 0          -- only affects indexes getting recomputed automagically
   AND IIF(i.stathdr_Rows_CNT > 0, 100.0 * i.Stats_Prop_modification_CNT /  i.stathdr_Rows_CNT,0.0) > 10.0
 GROUP BY
       i.database_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Diagnostic - DB - Consider Database auto_update_stats_async - lots of data changes (>10pct stats rows)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Diagnostic - DB - less than 5% of views have indexes (BI32)
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type         = N'D'          -- database level composite record
      ,database_id      = i.database_id
      ,parent_object_id = i.database_id
      ,object_id        = i.database_id
      ,index_id         = i.database_id
      ,type             = 'DB'
      ,diagnostic = N'Views <5% Indexed - Views: '
                  + CAST(i.view_CNT AS NVARCHAR(20))
                  + N' CX: '
                  + CAST(i.clustered_index_CNT AS NVARCHAR(20))
                  + N' ('
                  + [dbo].[SQLXL_3SD](1.0 * i.clustered_index_CNT / i.view_CNT,N'%')  -- /zero handled by HAVING clause below
                  + N') NCX: '
                  + CAST(i.Nonclustered_index_CNT AS NVARCHAR(20))
                  + N' (BI32)'
  FROM (--  All "index" records in views
        SELECT database_id
              ,clustered_index_CNT    = SUM(Clustered_index_CNT)
              ,Nonclustered_index_CNT = SUM(Nonclustered_index_CNT)
              ,view_CNT               = SUM(IIF(type = N'V',1,0))   -- View, count
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type           = N'P'  -- parent level composite record
           AND parent_object_type = N'V'  -- View parent/object only
         GROUP BY
               database_id
        HAVING SUM(IIF(type = N'V',1,0)) > 0 -- view, count
       ) AS i
 WHERE 100.0 * i.clustered_index_CNT / i.view_CNT < 5.0 -- /zero handled by HAVING clause above

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - less than 5% of views have indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Diagnostic - DB - less than 5% of indexes with Filters (BI32)
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type         = N'D'          -- database level composite record
      ,database_id      = i.database_id
      ,parent_object_id = i.database_id
      ,object_id        = i.database_id
      ,index_id         = i.database_id
      ,type             = 'DB'
      ,diagnostic = N'Indexes: <5% Filtered - Index: '
                  + CAST(i.index_CNT AS NVARCHAR(20))
                  + N' Filtered: '
                  + CAST(i.filtered_index_CNT AS NVARCHAR(20))
                  + N' ('
                  + [dbo].[SQLXL_3SD](1.0 * i.filtered_index_CNT / i.index_CNT,N'%') -- /zero handled by HAVING clause below
                  + N') (BI32)'
  FROM (--
        SELECT database_id
              ,filtered_index_CNT = SUM(IIF(filter_definition > N'',1,0))
              ,index_CNT          = COUNT(1)
          FROM [##SQLXL_Index_Compilation]
         WHERE obj_type IN (N'U' -- User Table
                           ,N'V' -- View
                           )
           AND obj_type_short_label <> N'HST' -- Not a History/archive table
           AND rec_type = N'I'                -- index level composite record
           AND type     = N'2'                -- nonclustered rowstore index
         GROUP BY
               database_id
        HAVING COUNT(1) > 0 -- count of NCX indexes
       ) AS i
 WHERE 100.0 * i.filtered_index_CNT / i.index_CNT < 5.0 -- /zero handled by HAVING clause above

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - less than 5% of indexes with Filters'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Change Tracking
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
-- Diagnostic - DB - non-default - Change Tracking Enabled
-- Diagnostic - DB - non-default - Change Tracking Properties
SELECT rec_type         = N'D' -- database level composite record
      ,database_id      = 0
      ,parent_object_id = 0
      ,object_id        = 0
      ,index_id         = 0
      ,type             = N'DB'
      ,diagnostic       = N'Change Tracking Enabled - Auto Cleanup '
                        + IIF(is_auto_cleanup_on = 1,N'[ON]',N'[OFF]')
                        + N' Retention = [' + CAST(retention_period AS NVARCHAR(20))
                        + N' ' + retention_period_units_desc + N']'
  FROM [##SQLXL_Index_sys_databases]
 WHERE is_auto_cleanup_on IS NOT NULL;  -- DMV only allows values of 0 = Off, 1 = On

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - Change Tracking'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Database - DDL Triggers - enabled, non-MS
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT p.rec_type
      ,p.database_id
      ,p.database_id
      ,p.database_id
      ,p.database_id
      ,p.type
      ,diagnostic = N'DDL Triggers'
-- Diagnostic - Database - has CLR trigger(s)
                  + N' CLR: ' + IIF(p.CLR_trigger_CNT > 0
                                   ,CAST(p.CLR_trigger_CNT AS NVARCHAR(20))
                                   ,N'0')
-- Diagnostic - Database - has SQL trigger(s)
                  + N' SQL: ' + IIF(p.SQL_trigger_CNT > 0
                                   ,CAST(p.SQL_trigger_CNT AS NVARCHAR(20))
                                   ,N'0')
-- Diagnostic - Database - has INSTEAD OF trigger(s)
                  + N' Instead Of: ' + IIF(p.is_instead_of_trigger_CNT > 0
                                          ,CAST(p.is_instead_of_trigger_CNT AS NVARCHAR(20))
                                          ,N'0')
  FROM [##SQLXL_Index_Compilation] AS p
 WHERE p.rec_type = N'D'                   -- database level composite record
   AND (   p.CLR_trigger_CNT           > 0
        OR p.SQL_trigger_CNT           > 0
        OR p.is_instead_of_trigger_CNT > 0
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - DDL Triggers'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- [##SQLXL_Index_sys_databases] - non default properties
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type         = N'D'          -- database level composite record
      ,database_id      = d.database_id
      ,parent_object_id = d.database_id
      ,object_id        = d.database_id
      ,index_id         = d.database_id
      ,type             = 'DB'
      ,diagnostic       = STUFF(-- Strip off leading unnecessary characters

-- Diagnostic - DB - non-default - Database State is not not ONLINE
 IIF(d.state <> 0,NCHAR(167) + N'State: ' + d.state_desc,N'')

-- Diagnostic - DB - non-default - Database is Non-Readable Secondary
+IIF(    d.role_desc = N'SECONDARY'
     AND d.secondary_role_allow_connections_desc = N'NO'
    ,NCHAR(167) + N'[NON-READABLE SECONDARY]'
    ,N'')

-- Diagnostic - DB - non-default - Auto Close is ON
-- Diagnostic - DB - non-default - Auto shrink is ON
+IIF(   d.is_auto_close_on  > 0
     OR d.is_auto_shrink_on > 0
    , NCHAR(167) + N'Auto '
    + STUFF( IIF(d.is_auto_close_on  > 0,N'   CLOSE' ,N'')
           + IIF(d.is_auto_shrink_on > 0,N' & SHRINK',N'')
           ,1,3,N'')
    + N' [ON] - turn OFF!'
    ,N'')

-- Diagnostic - DB - non-default - Database in [STANDBY] mode - read-only for restore log
+IIF(d.is_in_standby > 0,NCHAR(167) + N'Database in [STANDBY] - read-only for restore log',N'')

-- Diagnostic - DB - non-default - Database NOT cleanly shut down
+IIF(    d.is_cleanly_shutdown = 0
     AND d.is_auto_close_on    = 1
    ,NCHAR(167) + N'[NOT] cleanly shut down'
    ,N'')

-- Diagnostic - DB - non-default - Database in READ ONLY mode
+IIF(d.is_read_only > 0,NCHAR(167) + N'Database in [READ ONLY] mode',N'')

-- Diagnostic - DB - non-default - Recovery model is not FULL
+IIF(d.recovery_model > 1,NCHAR(167) + N'Recovery model ' + QUOTENAME(d.recovery_model_desc),N'')

-- Diagnostic - DB - non-default - Delayed durability ENABLED, ALLOWED or FORCED
+IIF(d.delayed_durability > 0,NCHAR(167) + N'Delayed durability ' + QUOTENAME(d.delayed_durability_desc) + N', default [DISABLED]'
    ,N'')

-- Diagnostic - DB - non-default - DB Mixed page allocations are OFF
+IIF(d.is_mixed_page_allocation_on = 0,NCHAR(167) + N'DB Mixed page allocations [OFF], ON can reduce SGAM contention',N'')

-- Diagnostic - DB - non-default - Target recovery time = 0, using Automatic Checkpoints
-- Diagnostic - DB - non-default - Target recovery time <> 0 (default 60 seconds)
+IIF(COALESCE(d.target_recovery_time_in_seconds,0) = 0
    ,NCHAR(167) + N'Target recovery time [ZERO], using Automatic Checkpoints'
    ,IIF(COALESCE(d.target_recovery_time_in_seconds,0) NOT IN (0,60)
        ,NCHAR(167) + N'Target recovery time '
                   + QUOTENAME(d.target_recovery_time_in_seconds)
                   + N' seconds, affects CHECKPOINT frequency'
        ,N'')
    )

-- Diagnostic - DB - non-default - Database compatibility <> Instance Product Major Version
-- Diagnostic - DB - non-default - Database Collation <> Server Collation
+IIF(   d.compatibility_level <> 10 * sis.ProductMajorVersion
     OR d.collation_name      <> i.collation
    , NCHAR(167) + N'DB '
    + STUFF( IIF(d.compatibility_level <> 10 * sis.ProductMajorVersion
                 , N', compatibility: ' + QUOTENAME(d.compatibility_level)
                 + N' <> server ' + QUOTENAME(10 * sis.ProductMajorVersion )
                 ,N'')
           + IIF(d.collation_name      <> i.collation
                 ,N', collation: ' + d.collation_name + N' <> Server: ' + i.collation
                 ,N'')
           ,1,2,N'')
    ,N'')

-- Diagnostic - DB - non-default - Database is Always On
+IIF(d.replica_id IS NOT NULL OR d.group_database_id IS NOT NULL
    , NCHAR(167) + N'Always On database -'
    + N'Replica ID '    + CAST(d.replica_id        AS NVARCHAR(36)) -- uniqueidentifiers
    + N', Group DB ID ' + CAST(d.group_database_id AS NVARCHAR(36)) -- uniqueidentifiers
    ,N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Database Statistics settings
--------------------------------------------------------------------------------------------------------------------------------------------
+IIF(   d.is_auto_create_stats_on             = 0
     OR d.is_auto_update_stats_on             = 0
     OR d.is_auto_update_stats_async_on       = 1
     OR (    PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 12 -- SQL 2014+
         AND (   partitioned_tbl.CNT                   > 0
              OR d.is_auto_create_stats_incremental_on = 1
             )
        )
    ,NCHAR(167) + N'Stats: '
-- Diagnostic - DB - non-default - Statistics are NOT Auto created
               + STUFF( IIF(d.is_auto_create_stats_on = 0,N', auto create [OFF]',N'')

-- Diagnostic - DB - non-default - Statistics Incremental ON (SQL 2014+)
-- Diagnostic - DB - non-default - Statistics Incremental OFF (SQL 2014+) with partitioned tables
                      + IIF(   d.is_auto_create_stats_incremental_on = 1
                            OR partitioned_tbl.CNT                   > 0
                           , N', auto create incremental '
                           + IIF(d.is_auto_create_stats_incremental_on = 1,N'[ON]',N'[OFF]')
                           + N' (' + [dbo].[SQLXL_3SD](partitioned_tbl.CNT,N'I') + N' partitioned tables)'
                          ,N'')

-- Diagnostic - DB - non-default - Statistics Auto update OFF
                      + IIF(d.is_auto_update_stats_on = 0
                           ,N', auto update [OFF]'
                           ,N'')

-- Diagnostic - DB - non-default - Statistics Auto update asynchronous ON
                      + IIF(d.is_auto_update_stats_async_on = 1
                          ,NCHAR(167) + N', auto update stats async [ON]'
                          ,N'')
                      ,1,2,N'')
    ,N'')

--------------------------------------------------------------------------------------------------------------------------------------------
--
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - DB - non-default - additional Memory optimized features (e.g. Hybrid Buffer Pool) are enabled
+IIF(d.is_memory_optimized_ENABLED > 0,NCHAR(167) + N'XTP In-Memory optimized [ENABLED]',N'')

-- Diagnostic - DB - non-default - Query parameterization FORCED
+IIF(d.is_parameterization_forced = 1,NCHAR(167) + N'Query parameterization [FORCED]',N'')

-- Diagnostic - DB - non-default - Date correlation optimization ENABLED
+IIF(d.is_date_correlation_on = 0,NCHAR(167) + N'Date correlation optimization [OFF]',N'')

-- Diagnostic - DB - non-default - Supplemental logging ENABLED
+IIF(d.is_supplemental_logging_enabled > 0,NCHAR(167) + N'Supplemental logging [ENABLED]',N'')

-- Diagnostic - DB - non-default - tempdb spills to remote store ENABLED
+IIF(d.is_tempdb_spill_to_remote_store > 0,NCHAR(167) + N'tempdb spills to [REMOTE STORE]',N'')

-- Diagnostic - DB - non-default - Result set caching - Azure Synapse Analytics Gen2 -  ENABLED
+IIF(d.is_result_set_caching_on > 0,NCHAR(167) + N'Result set caching [ON]',N'') -- Azure Synapse Analytics Gen2

-- Diagnostic - DB - non-default - Read committed snapshot isolation ENABLED
+IIF(d.is_read_committed_snapshot_on > 0,NCHAR(167) + N'Read committed snapshot [ON]',N'')

-- Diagnostic - DB - non-default - Snapshot isolation ENABLED
+IIF(d.snapshot_isolation_state > 0,NCHAR(167) + N'Snapshot isolation ' + QUOTENAME(d.snapshot_isolation_state_desc),N'')

-- Diagnostic - DB - non-default - Change Data Capture ENABLED
+IIF(d.is_cdc_enabled > 0,NCHAR(167) + N'Change Data Capture (CDC) [ENABLED]',N'')

-- Diagnostic - DB - non-default - Change Feed ENABLED
+IIF(d.is_change_feed_enabled > 0,NCHAR(167) + N'Change Feed [ENABLED]',N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Query Store
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - DB - Good to know - Query Store Status & Properties
+IIF(sis.ProductMajorVersion  >= 13 -- only show if SQL Server version 2016+
    ,NCHAR(167) + N'Query Store ' + QUOTENAME(qso.actual_state_desc)

-- Diagnostic - DB - non-default - Query Store Readonly - Reason
    + IIF(qso.readonly_reason > 0
         , N' Reason: '
         + CASE qso.readonly_reason
                WHEN      1 THEN N'DB READ_ONLY'
                WHEN      2 THEN N'DB SINGLE_USER'
                WHEN      4 THEN N'DB EMERGENCY'
                WHEN      8 THEN N'DB SECONDARY REPLICA'
                WHEN  65536 THEN N'QS SIZE LIMIT'
                WHEN 131072 THEN N'QS STATEMENT MEMORY LIMIT'
                WHEN 262144 THEN N'QS PERSISTENCE LIMIT'
                WHEN 524288 THEN N'DB OUT OF SPACE'
                ELSE N'*NOT FOUND*'
           END
         ,N'') -- IIF(qso.readonly_reason > 0

    + IIF(qso.actual_state > 0
         , NCHAR(167) + N'> Size - Max: ' + [dbo].[SQLXL_3SD](qso.max_storage_size_mb    ,N'MB')
                     + N' Used: '        + [dbo].[SQLXL_3SD](qso.current_storage_size_mb,N'MB')
                     + IIF(qso.max_storage_size_mb > 0
                          ,N' (' + [dbo].[SQLXL_3SD](1.0 * qso.current_storage_size_mb / qso.max_storage_size_mb,N'%') + N')'
                          ,N'')
                     + N' Aggregation interval: ' + [dbo].[SQLXL_3SD](qso.interval_length_minutes,N'I') + N' minutes'
                     + N' Flush interval: '       + [dbo].[SQLXL_3SD](qso.flush_interval_seconds,N'I')  + N' seconds'
                     + N' Max Plans: '            + [dbo].[SQLXL_3SD](qso.max_plans_per_query   ,N'I')

         -----------------------------------------------------
         + NCHAR(167) + N'> Capture mode '   + QUOTENAME(COALESCE(qso.query_capture_mode_desc,N'ALL')) -- default for 2016 is ALL
                     + N' Size cleanup '     + QUOTENAME(qso.size_based_cleanup_mode_desc)
                     + N' Stale threshold: ' + [dbo].[SQLXL_3SD](qso.stale_query_threshold_days,N'I') + N' days'
                     + IIF(sis.ProductMajorVersion  >= 14  -- 2017+
                          ,N' Wait stats ' + QUOTENAME(qso.wait_stats_capture_mode_desc)
                          ,N'')
                     + IIF(sis.ProductMajorVersion  >= 15  -- 2019+
                          , IIF(qso.capture_policy_execution_count >= 0,N', Exec CNT: ' + QUOTENAME(qso.capture_policy_execution_count),N'')
                          + IIF(qso.capture_policy_total_compile_cpu_time_ms   >= 0
                               ,N', Compile Time: ' + [dbo].[SQLXL_3SD](qso.capture_policy_total_compile_cpu_time_ms,N'ms')
                               ,N'')
                          + IIF(qso.capture_policy_total_execution_cpu_time_ms >= 0
                               ,N', Execution Time: ' + [dbo].[SQLXL_3SD](qso.capture_policy_total_execution_cpu_time_ms,N'ms')
                               ,N'')
                          + IIF(qso.capture_policy_stale_threshold_hours       >= 0
                               ,N', Stale: ' + CAST(qso.capture_policy_stale_threshold_hours AS NVARCHAR(20)) + N'hrs'
                               ,N'')
                          ,N'')
         ,N'') -- IIF(qso.actual_state > 0

-- Diagnostic - DB - Query Store settings and properties, actual_state_additional_info
    + IIF(qso.actual_state_additional_info > N''
         ,NCHAR(167) + N'> State Info: ' +qso.actual_state_additional_info
         ,N'')

    + IIF(sis.ProductMajorVersion  >= 14
-- Diagnostic - DB - non-default - Query Store Auto Tune states
         ,IIF(ato.name IS NOT NULL
             ,NCHAR(167) + N'Auto Tune: ' + ato.name + N' is ' + ato.actual_state_desc
                        + IIF(ato.desired_state <> ato.actual_state
                             ,N', Reason: ' + ato.reason_desc
                             ,N'') -- IIF(ato.desired_state <> ato.actual_state
             ,N'')                 -- IIF(ato.name IS NOT NULL
         ,N'')                     -- IIF(sis.ProductMajorVersion  >= 14
    ,N'')                          -- IIF(sis.ProductMajorVersion  >= 13

--------------------------------------------------------------------------------------------------------------------------------------------
-- ANSI Settings
--------------------------------------------------------------------------------------------------------------------------------------------
+IIF(   d.is_ansi_null_default_on       = 0
     OR d.is_ansi_nulls_on              = 0
     OR d.is_ansi_padding_on            = 0
     OR d.is_ansi_warnings_on           = 0
     OR d.is_cursor_close_on_commit_on  = 0
     OR d.is_arithabort_on              = 0
     OR d.is_concat_null_yields_null_on = 0
    , NCHAR(167)
    + N'ANSI DEFAULTS OFF: '
    + STUFF(-- Strip off leading unnecessary characters
-- Diagnostic - DB - ANSI DEFAULT is ON: ansi_null_default
           + IIF(d.is_ansi_null_default_on       = 0,N', NULL DEFAULT',N'')
-- Diagnostic - DB - ANSI DEFAULT is ON: ansi_nulls
           + IIF(d.is_ansi_nulls_on              = 0,N', NULLS'  ,N'')
-- Diagnostic - DB - ANSI DEFAULT is ON: ansi_padding
           + IIF(d.is_ansi_padding_on            = 0,N', PADDING',N'')
-- Diagnostic - DB - ANSI DEFAULT is ON: ansi_warnings
           + IIF(d.is_ansi_warnings_on           = 0,N', WARNNGS',N'')
-- Diagnostic - DB - ANSI DEFAULT is ON: cursor_close_on_commit
           + IIF(d.is_cursor_close_on_commit_on  = 0,N', CURSOR CLOSE ON COMMIT' ,N'')
-- Diagnostic - DB - ANSI DEFAULT is ON: arithabort
           + IIF(d.is_arithabort_on              = 0,N', ARITHABORT'             ,N'')
-- Diagnostic - DB - ANSI DEFAULT is ON: concat_null_yields_null
           + IIF(d.is_concat_null_yields_null_on = 0,N', CONCAT NULL YIELDS NULL',N'')
           ,1,2,N'')
    ,N'')

-- Diagnostic - DB - non-default - ANSI Quoted identifier ON
+IIF(d.is_quoted_identifier_on > 0,NCHAR(167) + N'ANSI Quoted identifier [ON]',N'')

-- Diagnostic - DB - non-default - ANSI Numeric roundabort ON
+IIF(d.is_numeric_roundabort_on > 0,NCHAR(167) + N'Numeric roundabort [ON]',N'')

-- Diagnostic - DB - non-default - Recursive triggers ON
+IIF(d.is_recursive_triggers_on > 0,NCHAR(167) + N'Recursive triggers [ON]',N'')

-- Diagnostic - DB - non-default - Local cursor default ON
+IIF(d.is_local_cursor_default > 0,NCHAR(167) + N'Local cursor default [ON]',N'')

-- Diagnostic - DB - non-default - Fulltext ENABLED
+IIF(d.is_fulltext_enabled > 0,NCHAR(167) + N'Fulltext [ENABLED]',N'')

-- Diagnostic - DB - non-default - Database marked NOT Trustworthy
+IIF(d.is_trustworthy_on = 0,NCHAR(167) + N'Database marked [NOT TRUSTWORTHY]',N'')

-- Diagnostic - DB - non-default - Database chaining ON
+IIF(d.is_db_chaining_on > 0,NCHAR(167) + N'Database chaining [ON]',N'')

-- Diagnostic - DB - non-default - Encrypted
+IIF(d.is_encrypted > 0
    ,NCHAR(167) + N'Encrypted' + IIF(d.is_master_key_encrypted_by_server > 0
                                    ,N', Master key encrypted by server'
                                    ,N'')
    ,N'')

-- NOTE - DB - column [is_subscribed] - BOL: "This column isn't used. It will always return 0"

-- Diagnostic - DB - non-default - Publication database in  replication
+IIF(d.is_merge_published > 0,NCHAR(167) + N'Publication database in  replication',N'')

-- Diagnostic - DB - non-default - Distribution Database for replication
+IIF(d.is_distributor > 0,NCHAR(167) + N'Distribution Database for replication',N'')

-- Diagnostic - DB - non-default - Database in Sync with backup
+IIF(d.is_sync_with_backup > 0,NCHAR(167) + N'Database Replication synchronization with backup',N'')

-- Diagnostic - DB - non-default - Database is Published
+IIF(d.is_published > 0,NCHAR(167) + N'Published',N'')

-- Diagnostic - DB - non-default - Database Broker DISABLED
-- Diagnostic - DB - non-default - Honor broker priority is OFF
+IIF(   d.is_broker_enabled = 0
     OR d.is_honor_broker_priority_on = 0
    , NCHAR(167)
    + STUFF( IIF(d.is_broker_enabled = 0,N', Broker [DISABLED]',N'')
           + IIF(d.is_honor_broker_priority_on = 0,N', Honor broker priority [OFF]',N'')
           ,1,2,N'')
    ,N'')

-- Diagnostic - DB - non-default - Reuse of Log space is waiting on
+IIF(d.log_reuse_wait > 0,NCHAR(167) + N'Log reuse wait ' + QUOTENAME(d.log_reuse_wait_desc),N'')

-- Diagnostic - DB - non-default - User Access is not MULTI_USER
+IIF(d.user_access > 0,NCHAR(167) + N'User Access ' + QUOTENAME(d.user_access_desc),N'')

-- Diagnostic - DB - non-default - Accelerated database recovery ON
+IIF(d.is_accelerated_database_recovery_on > 0,NCHAR(167) + N'Accelerated database recovery [ON], default [OFF]',N'')

-- Diagnostic - DB - non-default - Federation member
+IIF(d.is_federation_member > 0,NCHAR(167) + N'Database is Federation member',N'')

-- Diagnostic - DB - non-default - Ledger Database Enabled
+IIF(d.is_ledger_on > 0,NCHAR(167) + N'Ledger Database [ENABLED]',N'')

-- Diagnostic - DB - non-default - Remote data archive ENABLED - deprecated SQL 2022+
+IIF(d.is_remote_data_archive_enabled > 0,NCHAR(167) + N'Remote data archive [ENABLED] - deprecated SQL 2022+',N'')

-- Diagnostic - DB - non-default - Temporal history retention Enabled
+IIF(d.is_temporal_history_retention_enabled > 0,NCHAR(167) + N'Temporal history retention [ENABLED]',N'')

-- Diagnostic - DB - non-default - Data retention Enabled - automatic deletion of obsolete records
+IIF(d.is_data_retention_enabled > 0,NCHAR(167) + N'Data retention [ENABLED] - automatic deletion of obsolete records',N'')

-- Diagnostic - DB - non-default - Stale page detection Enabled - Azure Synapse Analytics Gen2.
+IIF(d.is_stale_page_detection_on > 0,NCHAR(167) + N'Stale page detection [ON]',N'')

-- Diagnostic - DB - non-default - Memory optimized tables elevate to SNAPSHOT is OFF
+IIF(d.is_memory_optimized_elevate_to_snapshot_on = 0,NCHAR(167) + N'XTP Memory optimized elevate to SNAPSHOT [OFF]',N'')

-- Diagnostic - DB - non-default - Snapshot source database
+IIF(d.source_database_id > 0
    ,NCHAR(167) + N'Snapshot source DB '
               + QUOTENAME((--
                            SELECT name
                              FROM [##SQLXL_Index_sys_databases] x
                             WHERE d.source_database_id = x.database_id
                           ))
    ,N'')

-- Diagnostic - DB - non-default - Physical database name <> DB name
+IIF(d.physical_database_name <> d.name
    ,NCHAR(167) + N'Physical database name ' + QUOTENAME(d.physical_database_name)
    ,N'')

-- Diagnostic - DB - non-default - Contained database status PARTIAL
+IIF(d.containment > 0
    , NCHAR(167) + N'Contained database status ' + d.containment_desc + N', default [NONE]'
-- Diagnostic - DB - non-default - Contained database default language
    + IIF(d.default_language_lcid > 0,NCHAR(167) + N'> Default language ' + QUOTENAME(d.default_language_name),N'')
-- Diagnostic - DB - non-default - Contained database fulltext language
    + IIF(d.default_fulltext_language_lcid > 0,NCHAR(167) + N'> Fulltext language ' + QUOTENAME(d.default_fulltext_language_name),N'')
-- Diagnostic - DB - non-default - Contained database 2 digit year cutoff
    + IIF(d.two_digit_year_cutoff > 0,NCHAR(167) + N'> 2 digit year cutoff ' + QUOTENAME(d.two_digit_year_cutoff),N'')
-- Diagnostic - DB - non-default - Contained DB nested triggers ON
    + IIF(d.is_nested_triggers_on > 0,NCHAR(167) + N'> Nested triggers [ON]',N'')
-- Diagnostic - DB - non-default - Contained DB transform noise words ON
    + IIF(d.is_transform_noise_words_on > 0,NCHAR(167) + N'> Transform noise words [ON]',N'')
    ,N'')

-- Diagnostic - DB - non-default - Page verify option not CHECKSUM
+IIF(d.page_verify_option <> 2,NCHAR(167) + N'Page verify option ' + d.page_verify_option_desc,N'')

-- Diagnostic - DB - non-default - Memory Optimized resource pool ID
+IIF(d.resource_pool_id > 0,NCHAR(167) + N'XTP Memory optimized resource pool ID ' + CAST(d.resource_pool_id AS NVARCHAR(20)),N'')

-- Diagnostic - DB - non-default - Catalog Collation type not DATABASE DEFAULT - Azure SQL Database
+IIF(d.catalog_collation_type > 0
    ,NCHAR(167) + N'Catalog Collation type ' + d.catalog_collation_type_desc + N', default [DATABASE_DEFAULT]'
    ,N'')

-- Diagnostic - DB - Recently created or attached (< 90 days)
+IIF(DATEDIFF(DAY,d.create_date,sis.Collection_DTTM) < 90
    ,NCHAR(167) + N'Created/Attached on ' + CONVERT(NVARCHAR(11),d.create_date,2)
               + N' - ' + CAST(DATEDIFF(DAY,d.create_date,sis.Collection_DTTM) AS NVARCHAR(20)) + N' Days'
    ,N'')

--End of STUFF from ~140 lines ago
,1,1,N'')

/*** LOCAL TESTING ***
SELECT d.name,db.replica_id,db.replica_id,ato.database_id,qso.database_id
--*/
  FROM [##SQLXL_Index_Startup]                                 AS sis
 CROSS
  JOIN [##SQLXL_Index_sys_databases]                           AS d
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_database_automatic_tuning_options]   AS ato
    ON d.database_id = ato.database_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_database_query_store_options]        AS qso
    ON d.database_id = qso.database_id
  LEFT OUTER
  JOIN (-- count partitioned tables across databases
        SELECT database_id
              ,CNT = COUNT(1)
          FROM [##SQLXL_Index_Compilation]
         WHERE N'P' = rec_type                              -- parent level composite record
           AND 1    < partition_CNT
         GROUP BY
               database_id
       ) AS partitioned_tbl
    ON d.database_id = partitioned_tbl.database_id
 CROSS
  JOIN (-- Get instance-level collation
        SELECT collation = text_value
          FROM [##SQLXL_Instance_info]
         WHERE source = N'SERVERPROPERTY'
           AND name   = N'COLLATION'
      ) AS i
 CROSS
  JOIN [##SQLXL_Index_Startup] AS sp
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - settings non-default & good to know'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Database scoped configurations
----------------------------------------------------------------------------------------------------
-- For SQL 2016, create reference table of all DATABASE SCOPED CONFIGURATIONS and their DEFAULT VALUES to compare against actual settings
-- SQL 2017 introduced new column [is_value_default] to simplify matters going forwardS
-- SQL 2019 changed some of the names as reflected below

SELECT TOP (0)
       name          = CAST(NULL AS NVARCHAR(60))  COLLATE DATABASE_DEFAULT
      ,default_value = CAST(NULL AS NVARCHAR(100)) COLLATE DATABASE_DEFAULT
      ,default_label = CAST(NULL AS NVARCHAR(100)) COLLATE DATABASE_DEFAULT
  INTO #database_scoped_configurations;

INSERT
  INTO #database_scoped_configurations WITH (TABLOCKX)
      (name
      ,default_value
      ,default_label
      )
VALUES -- default values for database scoped configurations
 (N'ACCELERATED_PLAN_FORCING',N'1',N'ON')
,(N'ASYNC_STATS_UPDATE_WAIT_AT_LOW_PRIORITY',N'0',N'OFF')
,(N'BATCH_MODE_ADAPTIVE_JOINS',N'1',N'ON')                 -- 2019+
,(N'BATCH_MODE_MEMORY_GRANT_FEEDBACK',N'1',N'ON')          -- 2019+
,(N'BATCH_MODE_ON_ROWSTORE',N'1',N'ON')
,(N'CE_FEEDBACK',N'1',N'ON')
,(N'DEFERRED_COMPILATION_TV',N'1',N'ON')
,(N'DISABLE_BATCH_MODE_ADAPTIVE_JOINS',N'0',N'OFF')        -- 2017
,(N'DISABLE_BATCH_MODE_MEMORY_GRANT_FEEDBACK',N'0',N'OFF') -- 2017
,(N'DISABLE_INTERLEAVED_EXECUTION_TVF',N'1',N'ON')         -- 2017
,(N'DOP_FEEDBACK',N'0',N'OFF')
,(N'DW_COMPATIBILITY_LEVEL',N'0',N'AUTO')                  -- Azure Synapse Analytics only
,(N'ELEVATE_ONLINE',N'OFF',N'OFF')
,(N'ELEVATE_RESUMABLE',N'OFF',N'OFF')
,(N'EXEC_QUERY_STATS_FOR_SCALAR_FUNCTIONS',N'1',N'ON')
,(N'FORCE_SHOWPLAN_RUNTIME_PARAMETER_COLLECTION',N'0',N'OFF')
,(N'GLOBAL_TEMPORARY_TABLE_AUTO_DROP',N'1',N'ON')
,(N'IDENTITY_CACHE',N'1',N'ON')
,(N'INTERLEAVED_EXECUTION_TVF',N'1',N'ON')                 -- 2019+
,(N'ISOLATE_SECURITY_POLICY_CARDINALITY',N'0',N'OFF')
,(N'LAST_QUERY_PLAN_STATS',N'0',N'OFF')
,(N'LEDGER_DIGEST_STORAGE_ENDPOINT',N'OFF',N'OFF')
,(N'LEGACY_CARDINALITY_ESTIMATION',N'0',N'OFF')
,(N'LIGHTWEIGHT_QUERY_PROFILING',N'1',N'ON')
,(N'MAXDOP',N'0',N'PRIMARY')
,(N'MEMORY_GRANT_FEEDBACK_PERCENTILE_GRANT',N'1',N'ON')
,(N'MEMORY_GRANT_FEEDBACK_PERSISTENCE',N'1',N'ON')
,(N'OPTIMIZE_FOR_AD_HOC_WORKLOADS',N'0',N'OFF')
,(N'OPTIMIZED_PLAN_FORCING',N'1',N'ON')
,(N'PARAMETER_SENSITIVE_PLAN_OPTIMIZATION',N'1',N'ON')
,(N'PARAMETER_SNIFFING',N'1',N'ON')
,(N'PAUSED_RESUMABLE_INDEX_ABORT_DURATION_MINUTES',N'1440',N'1440 Minutes')
,(N'QUERY_OPTIMIZER_HOTFIXES',N'0',N'OFF')
,(N'ROW_MODE_MEMORY_GRANT_FEEDBACK',N'1',N'ON')
,(N'TSQL_SCALAR_UDF_INLINING',N'1',N'ON')
,(N'VERBOSE_TRUNCATION_WARNINGS',N'1',N'ON')
,(N'XTP_PROCEDURE_EXECUTION_STATISTICS',N'0',N'OFF')
,(N'XTP_QUERY_EXECUTION_STATISTICS',N'0',N'OFF')
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - created database scoped configuration default values'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type         = N'D'          -- database level composite record
      ,database_id      = d.database_id
      ,parent_object_id = d.database_id
      ,object_id        = d.database_id
      ,index_id         = d.database_id
      ,type             = 'DB'
      ,STUFF(IIF(sc.diagnostic IS NOT NULL,sc.diagnostic,N''),1,1,N'')
  FROM [##SQLXL_Index_sys_databases] d
 OUTER
 APPLY (SELECT -- double SELECT to accomodate the ").value('(./text())[1]',N'NVARCHAR(MAX)')" below
-- Diagnostic - DB - Configuration non-default - ACCELERATED_PLAN_FORCING is OFF
-- Diagnostic - DB - Configuration non-default - ASYNC_STATS_UPDATE_WAIT_AT_LOW_PRIORITY is ON
-- Diagnostic - DB - Configuration non-default - CE_FEEDBACK is OFF
-- Diagnostic - DB - Configuration non-default - DISABLE_BATCH_MODE_ADAPTIVE_JOINS is ON
-- Diagnostic - DB - Configuration non-default - BATCH_MODE_ADAPTIVE_JOINS is OFF
-- Diagnostic - DB - Configuration non-default - DISABLE_BATCH_MODE_MEMORY_GRANT_FEEDBACK is ON
-- Diagnostic - DB - Configuration non-default - BATCH_MODE_MEMORY_GRANT_FEEDBACK is OFF
-- Diagnostic - DB - Configuration non-default - BATCH_MODE_ON_ROWSTORE is OFF
-- Diagnostic - DB - Configuration non-default - DEFERRED_COMPILATION_TV is OFF
-- Diagnostic - DB - Configuration non-default - DOP_FEEDBACK is ON
-- Diagnostic - DB - Configuration non-default - DW_COMPATIBILITY_LEVEL is not AUTO
-- Diagnostic - DB - Configuration non-default - ELEVATE_ONLINE is not OFF
-- Diagnostic - DB - Configuration non-default - ELEVATE_RESUMABLE is not OFF
-- Diagnostic - DB - Configuration non-default - EXEC_QUERY_STATS_FOR_SCALAR_FUNCTIONS is OFF
-- Diagnostic - DB - Configuration non-default - FORCE_SHOWPLAN_RUNTIME_PARAMETER_COLLECTION is ON
-- Diagnostic - DB - Configuration non-default - GLOBAL_TEMPORARY_TABLE_AUTO_DROP is OFF
-- Diagnostic - DB - Configuration non-default - IDENTITY_CACHE is OFF
-- Diagnostic - DB - Configuration non-default - INTERLEAVED_EXECUTION_TVF is OFF
-- Diagnostic - DB - Configuration non-default - DISABLE_INTERLEAVED_EXECUTION_TVF is OFF
-- Diagnostic - DB - Configuration non-default - ISOLATE_SECURITY_POLICY_CARDINALITY is ON
-- Diagnostic - DB - Configuration non-default - LAST_QUERY_PLAN_STATS is ON
-- Diagnostic - DB - Configuration non-default - LEDGER_DIGEST_STORAGE_ENDPOINT is ON
-- Diagnostic - DB - Configuration non-default - LEGACY_CARDINALITY_ESTIMATION is not OFF
-- Diagnostic - DB - Configuration non-default - LIGHTWEIGHT_QUERY_PROFILING is OFF
-- Diagnostic - DB - Configuration non-default - MAXDOP is not 0 - does not use instance setting
-- Diagnostic - DB - Configuration non-default - MEMORY_GRANT_FEEDBACK_PERCENTILE_GRANT is OFF
-- Diagnostic - DB - Configuration non-default - MEMORY_GRANT_FEEDBACK_PERSISTENCE is OFF
-- Diagnostic - DB - Configuration non-default - OPTIMIZE_FOR_AD_HOC_WORKLOADS is ON
-- Diagnostic - DB - Configuration non-default - OPTIMIZED_PLAN_FORCING is OFF
-- Diagnostic - DB - Configuration non-default - PARAMETER_SENSITIVE_PLAN_OPTIMIZATION is OFF
-- Diagnostic - DB - Configuration non-default - PARAMETER_SNIFFING is OFF
-- Diagnostic - DB - Configuration non-default - PAUSED_RESUMABLE_INDEX_ABORT_DURATION_MINUTES is not 1 day
-- Diagnostic - DB - Configuration non-default - QUERY_OPTIMIZER_HOTFIXES is not OFF
-- Diagnostic - DB - Configuration non-default - ROW_MODE_MEMORY_GRANT_FEEDBACK is OFF
-- Diagnostic - DB - Configuration non-default - TSQL_SCALAR_UDF_INLINING is OFF
-- Diagnostic - DB - Configuration non-default - VERBOSE_TRUNCATION_WARNINGS is OFF
-- Diagnostic - DB - Configuration non-default - XTP_PROCEDURE_EXECUTION_STATISTICS is ON
-- Diagnostic - DB - Configuration non-default - XTP_QUERY_EXECUTION_STATISTICS is ON
        (--
         SELECT  NCHAR(167)
               + N'Scoped config '
               + dbsc.name
               + N' value '
               + QUOTENAME(CASE dbsc.value WHEN N'0'              -- rowstore heap
                                           THEN N'OFF'
                                           WHEN N'1'              -- clustered rowstore index
                                           THEN N'ON'
                                           ELSE dbsc.value
                           END)
               + N' is not DEFAULT '
               + QUOTENAME(COALESCE(src.default_label,N'not found'))
           FROM [##SQLXL_Index_sys_database_scoped_configurations] AS dbsc
           LEFT OUTER
           JOIN #database_scoped_configurations                    AS src
             ON dbsc.name COLLATE DATABASE_DEFAULT = src.name COLLATE DATABASE_DEFAULT
          WHERE d.database_id             = dbsc.database_id
            AND (   src.default_value    <> CAST(dbsc.value AS NVARCHAR(100))
                 OR dbsc.is_value_default = 0
                )
            FOR XML PATH(N''), TYPE
        ).value('(./text())[1]',N'NVARCHAR(MAX)')
       ) sc(diagnostic)
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - database scoped configuration non-default values'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
############################################################################################################################################
*** PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT ***
############################################################################################################################################
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
*** Parent & Index Major Types - structure:
InMemory > Clustered > Internal Table > History Table |                   > Index
           ColStore                   > TVF           |                   > Index
                                      > View          |                   > Index
                                                       > Versioned        > Index
                                                       > (Plain rowstore) > Index

\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
        SELECT i.rec_type
              ,i.database_id
              ,i.parent_object_id
              ,i.object_id
              ,i.index_id
              ,i.type
              ,diagnostic = STUFF(-- remove unneeded leading NCHAR(167)
-- Diagnostic - Parent - is Memory Optimized (BI73) (XTP)
                                 + IIF(t.is_memory_optimized = 1
                                      , NCHAR(167)
                                      + N'<MEMORY OPTIMIZED> (BI73)' + IIF(i.type = N'U' -- User Table
-- Diagnostic - Parent - is Memory Optimized (BI73) (XTP) Durability description
                                                                           , N' Durability: ' + t.durability_desc
-- Diagnostic - Parent - is Memory Optimized (BI73) (XTP) Durability NOT PERSISTED (SCHEMA_ONLY)
                                                                           + IIF(t.durability = 1,N' *data NOT PERSISTED*',N'')
                                                                           ,N'')
                                      ,N'')

-- Diagnostic - Table - is Clustered Columnstore
                                 + IIF(i.tbl_is_clustered_columnstore = 1
                                      , NCHAR(167)
                                      + N'<COLUMNSTORE TABLE> (BI61)'
                                      ,N'')

-- Diagnostic - Table - is Internal (System) Table & internal type description
                                 + IIF(i.obj_type = N'IT'   -- system internal table
                                      , NCHAR(167)
                                      + N'<' + i.obj_type_desc + N'>' + IIF(i.internal_type_desc IS NOT NULL
                                                                           ,N' ' + QUOTENAME(i.internal_type_desc)
                                                                           ,N'')
                                      ,N'')

                                   -- History tables, TVF, Views - persist label across indexes
                                 + CASE WHEN t.temporal_type = 1 -- HISTORY_TABLE (associated with a temporal table)
                                        THEN  NCHAR(167)
                                            + N'<SYSTEM_VERSIONED ' + t.temporal_type_desc + N'> (BI110)'

-- Diagnostic - Parent - is History - Ledger
                                        WHEN t.ledger_type   = 1 -- LEDGER HISTORY_TABLE (associated with an updatable ledger table)
                                        THEN  NCHAR(167)
                                            + N'<LEDGER ' + t.ledger_type_desc + N'> (BI110)'
                                            + IIF(i.type = N'U' -- User Table
                                                 ,NCHAR(167) + N'> Versioned: ' + COALESCE(QUOTENAME(i.history_source_schema_name)
                                                                                         + N'.'
                                                                                         + QUOTENAME(i.history_source_object_name)
                                                                                         ,N'<Missing Parent table>')
                                                 ,N'')

-- Diagnostic - Parent - is History - Change Data Captured
                                        WHEN i.cdc_is_history_table = 1
                                        THEN  NCHAR(167)
                                            + N'<CDC HISTORY TABLE> (BI110)'
-- Diagnostic - Parent - is Change Data Capture, Net changes enabled/disabled
                                            + IIF(    i.type = N'U'                 -- User Table
                                                  AND i.cdc_supports_net_changes = 1
                                                 ,N' - NET CHANGES [ENABLED]'
                                                 ,N' - NET CHANGES [DISABLED]')

-- Diagnostic - Parent - is DROPPED LEDGER TABLE
                                        WHEN t.is_dropped_ledger_table = 1
                                        THEN  NCHAR(167)
                                            + N'<DROPPED_LEDGER_TABLE> (BI110)'

                                        WHEN i.obj_type = N'TF' -- SQL table-valued-function SQL 2012+
                                        THEN  NCHAR(167)
                                            + N'<' + i.obj_type_desc + N'>'

                                        WHEN i.obj_type = N'V'  -- View
                                        THEN  NCHAR(167)
                                            + N'<' + i.obj_type_desc + N'>'
                                            + IIF(i.type = N'V' -- View
                                                 , IIF(t.is_dropped_ledger_view = 1,N' <DROPPED>',N'')
                                                 + IIF(t.ledger_view_type > 0,N' <' + t.ledger_view_type_desc + N'>',N'')
                                                   COLLATE DATABASE_DEFAULT
                                                 ,N'')

                                        ELSE N''
                                   END  -- CASE WHEN t.temporal_type = 1

                                 + CASE WHEN i.type = N'U' -- user table level only, no need for line feed
                                        THEN CASE WHEN t.temporal_type = 2
-- Diagnostic - Parent - is History - System Versioned - source table
                                                  THEN  NCHAR(167)
                                                      + N'<' + t.temporal_type_desc + N'> (BI110)'
                                                      + NCHAR(167)
-- Diagnostic - Parent - is System Versioned Temporal, retention
                                                      + N'> Retention '
                                                      + IIF(t.history_retention_period_unit_desc = N'INFINITE'
                                                           ,N'INFINITE'
                                                           , CAST(t.history_retention_period AS NVARCHAR(20))
                                                           + t.history_retention_period_unit_desc)
                                                      + NCHAR(167)
                                                      + N'> Versions: '
-- Diagnostic - Parent - is System Versioned Temporal, history table schema name
                                                      + COALESCE(QUOTENAME(i.tbl_history_table_schema)
                                                                + N'.'
                                                                + QUOTENAME(i.tbl_history_table_name)
                                                                ,N'<Missing History table>'
                                                                )
-- Diagnostic - Parent - is Updatable Ledger
                                                  WHEN t.ledger_type   = 2
                                                  THEN  NCHAR(167)
                                                      + N'<' + t.ledger_type_desc + N'>'                          -- UPDATABLE_LEDGER_TABLE
-- Diagnostic - Parent - Updatable Ledger View Name, SQL2022+ & Azure SQL Database
                                                      + IIF(t.ledger_view_id > 0
                                                           , NCHAR(167) + N'> Ledger View '
                                                           + IIF(lv.is_dropped_ledger_view = 1,N'*DROPPED* ',N'')
                                                           + COALESCE(QUOTENAME(lv.name),N'')
                                                           ,N'')
-- Diagnostic - Parent - is Append Only Ledger
                                                  WHEN t.ledger_type = 3 THEN N'<' + t.ledger_type_desc   + N'>'  -- APPEND_ONLY_LEDGER_TABLE

                                                  ELSE N''
                                             END
                                        ELSE N''
                                   END  -- CASE WHEN i.type = N'U'

                                 ----------------------------------------------------------------------------------------------------------------
                                 -- Index types
                                 ----------------------------------------------------------------------------------------------------------------
                                 + CASE WHEN i.type IN (N'0' -- rowstore heap
                                                       ,N'F' -- foreign key constraint
                                                       )
-- Diagnostic - Index - is HEAP
-- Diagnostic - index - is Foreign Key Constraint
                                        THEN NCHAR(167) + N'<' + i.type_desc + N'>'
-- Diagnostic - Index - is Clustered Rowstore
-- Diagnostic - Index - is NonClustered Rowstore
-- Diagnostic - Index - is Nonclustered HASH on in-memory table (BI61)
-- Diagnostic - index - is Full-Text
-- Diagnostic - index - is Missing Index
                                        WHEN i.type IN (N'1' -- clustered rowstore index
                                                       ,N'2' -- nonclustered rowstore index
                                                       ,N'3' -- XML index
                                                       ,N'4' -- Spatial index
                                                       ,N'5' -- clustered columnstore
                                                       ,N'6' -- nonclustered columnstore index
                                                       ,N'7' -- Hash index on In-Memory Clustered Columnstore
                                                       ,N'M' -- missing nonclustered rowstore index
                                                       )
                                        THEN NCHAR(167) + N'<' + i.type_desc + N' INDEX>'
                                        ELSE N''
                                   END  -- CASE WHEN i.type IN (N'0'

                                 + CASE i.type
-- Diagnostic - Index - add Blitz Index Check IDs to index types
                                        WHEN N'3' THEN N' (BI60)' -- XML index
                                        WHEN N'4' THEN N' (BI62)' -- Spatial index
                                        WHEN N'5' THEN N' (BI61)' -- clustered columnstore
                                        WHEN N'6' THEN N' (BI61)' -- nonclustered columnstore index
                                        ELSE N''
                                   END

                                 ----------------------------------------------------------------------------------------------------------------
                                 -- Index sub types
                                 ----------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Sub Type
                                 + IIF(i.sub_type_desc IS NOT NULL,N' ' + QUOTENAME(i.sub_type_desc),N'')

-- Diagnostic - Index - XML index - index type description
                                 + IIF(i.xml_secondary_type_desc IS NOT NULL,N' ' + QUOTENAME(i.xml_secondary_type_desc),N'')

                                 ----------------------------------------------------------------------------------------------------------------
                                 -- Index Constraints
                                 ----------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Rowstore - is Primary Key
-- Diagnostic - Index - Rowstore - is Unique Constraint
-- Diagnostic - Index - Rowstore - is Unique
                                 + CASE WHEN i.is_primary_key       = 1 THEN N' <PRIMARY KEY>'
                                        WHEN i.is_unique_constraint = 1 THEN N' <UNIQUE CONSTRAINT>'
                                        WHEN i.is_unique            = 1 THEN N' <UNIQUE>'
                                        ELSE N''
                                   END

                                 ,1,1,N'') -- STUFF
         FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
         LEFT OUTER
         JOIN [##SQLXL_Index_sys_objects] AS t
           ON i.database_ID = t.database_id
          AND i.object_id   = t.object_id
         LEFT OUTER
         JOIN [##SQLXL_Index_sys_objects] AS lv
           ON t.database_id    = lv.database_id
          AND t.ledger_view_id = lv.object_id
       ) AS i
 WHERE i.diagnostic > N''
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Add principal parent and index types'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
*** Table Diagnostics - Non-default properties
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters
---------------------------------------------------------------------------------------------------
-- Diagnostic - Table - COLUMN CHANGE TRACKING ENABLED
+IIF(tbl.ctt_is_track_columns_updated_on = 1
    , NCHAR(167)
    + N'COLUMN CHANGE TRACKING ENABLED - Auto Cleanup '
    + IIF(d.is_auto_cleanup_on = 1,N'[ON]',N'[OFF]')
    + N' Retention = ' + CAST(retention_period AS NVARCHAR(20))
    + N' ' + retention_period_units_desc
    ,N'')
-- Diagnostic - Table - EXTERNAL TABLE
+IIF(tbl.is_external                     = 1,NCHAR(167) + QUOTENAME(N'EXTERNAL TABLE'),N'')
-- Diagnostic - Table - FILETABLE
+IIF(tbl.is_filetable                    = 1,NCHAR(167) + QUOTENAME(N'FILETABLE'),N'')
-- Diagnostic - Table - GRAPH NODE
+IIF(tbl.is_node                         = 1,NCHAR(167) + QUOTENAME(N'GRAPH NODE'),N'')
-- Diagnostic - Table - GRAPH EDGE
+IIF(tbl.is_edge                         = 1,NCHAR(167) + QUOTENAME(N'GRAPH EDGE'),N'')
-- Diagnostic - Table - REMOTE DATA ARCHIVE ENABLED
+IIF(tbl.is_remote_data_archive_enabled  = 1,NCHAR(167) + QUOTENAME(N'REMOTE DATA ARCHIVE ENABLE - DEPRECATED 2022+D'),N'')
-- Diagnostic - Table - is SUBSCRIBED SYNCHRONOUS
+IIF(tbl.is_sync_tran_subscribed         = 1,NCHAR(167) + QUOTENAME(N'SUBSCRIBED SYNCHRONOUS'),N'')
---------------------------------------------------------------------------------------------------
+IIF(   tbl.is_published           > 0
     OR tbl.is_schema_published    > 0
     OR tbl.is_replicated          > 0
     OR tbl.is_merge_published     > 0
     OR tbl.has_replication_filter > 0
-- Diagnostic - Table - is PUBLISHED
    ,NCHAR(167) + QUOTENAME(N'PUBLISHED'

-- Diagnostic - Table - is SCHEMA PUBLISHED
               + STUFF( IIF(tbl.is_schema_published    > 0,N', SCHEMA'  ,N'')

-- Diagnostic - Table - is Merge PUBLISHED
                      + IIF(tbl.is_merge_published     > 0,N', '   ,N'')
-- Diagnostic - Table - is PUBLISHED WITH FILTER
                      + IIF(tbl.has_replication_filter > 0,N', FILTERED',N'')
                      ,1,1,N''))
    ,N'')
---------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Is empty
+IIF(i.tbl_is_empty = 1,NCHAR(167) + QUOTENAME(N'EMPTY'),N'')
-- Diagnostic - Table - Locked for BULK LOAD
+IIF(tbl.lock_on_bulk_load > 0,NCHAR(167) + QUOTENAME(N'Locked for BULK LOAD'),N'') -- Locked for BULK LOAD
---------------------------------------------------------------------------------------------------
,1,1,N'') -- End of STUFF from ~110 lines ago
  FROM (SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE type IN (N'IT'            -- system internal table
                       ,N'U'             -- User Table
                       )
       )  AS i
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS tbl
    ON i.database_id      = tbl.database_id
   AND tbl.ledger_view_id = tbl.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_databases] AS d
    ON i.database_id    = d.database_id
) AS f
 WHERE f.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Non-default properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Parent - ANSI values & Unchecked assempbly
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
SELECT rec_type = N'P'                                      -- parent level composite record
      ,tbl.database_id
      ,tbl.parent_object_id
      ,tbl.object_id
      ,index_id = tbl.object_id
      ,tbl.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters
-- Diagnostic - Table - Created without "ANSI NULLS ON"
 IIF(tbl.uses_ansi_nulls = 0
    ,NCHAR(167) + N'Created without "ANSI NULLS ON"'
    ,N'')

-- Diagnostic - Table - Assembly definition changed by ALTER ASSEMBLY
+IIF(tbl.has_unchecked_assembly_data > 0
    ,NCHAR(167) + N'Assembly definition changed by ALTER ASSEMBLY'
    ,N'')
----------------------------------------------------------------------------------------------------
,1,1,N'')
  FROM [##SQLXL_Index_sys_objects] AS tbl
 WHERE tbl.uses_ansi_nulls = 0
    OR tbl.has_unchecked_assembly_data > 0
) AS p
 WHERE p.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - ANSI values & Unchecked assempbly'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Table - Performance related
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
SELECT p.rec_type
      ,p.database_id
      ,p.parent_object_id
      ,p.object_id
      ,p.index_id
      ,p.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters
-- Diagnostic - Table - text stored in row - limit (up to 200 bytes)
 IIF(   tbl.text_in_row_limit > 0
     OR lob.lob_pct IS NOT NULL
    ,NCHAR(167) + N'LOB stored in row - size limit '
                + IIF(tbl.text_in_row_limit = 0
                     ,N'NONE SET'
                     ,CAST(tbl.text_in_row_limit AS NVARCHAR(20)) + N' bytes')
                + IIF(lob.lob_pct IS NOT NULL
                     ,N' - LOB activity ' + lob.lob_pct
                     ,N' - No LOB activity')
    ,N'')

-- Diagnostic - Table - Large types out of row - adds 16 byte pointer
+IIF(tbl.large_value_types_out_of_row > 0,NCHAR(167) + N'Large types out of row - adds 16 byte pointer',N'')

-- Diagnostic - Table - Lock Escalation DISABLED
+IIF(p.tbl_lock_escalation = 1
    ,NCHAR(167) + N'Lock Escalation ' + QUOTENAME(tbl.lock_escalation_desc) + N' Consider Enabling Table or Auto (for partitions)'
    ,N'')

-- Diagnostic - Table - is Partitioned & partitioning column name (BI64)
+IIF(   raw.partition_CNT         > 1
     OR raw.partition_Column_Name > N''
    ,NCHAR(167) + N'Partitioned on ' + QUOTENAME(raw.partition_column_name) + N' - '
               + CAST(raw.partition_CNT AS NVARCHAR(20)) + N' partitions (BI64)'
    ,N'')

-- Diagnostic - Table - Lock Escalation TABLE with Partitions
+IIF(    p.tbl_lock_escalation = 0
     AND p.partition_Column_ID > 0
    ,NCHAR(167) + N'Lock Escalation ' + QUOTENAME(p.tbl_lock_escalation_desc) + N' Use AUTO for Partitioned tables'
    ,N'')

-- Diagnostic - Table - indexes are more than 2X the size of the physical table (index types 0,1,5)
+IIF(    raw.reserved_page_PG_CNT > 0
     AND (1.0 * (p.reserved_page_PG_CNT - raw.reserved_page_PG_CNT) / raw.reserved_page_PG_CNT) > 1.0
    ,NCHAR(167) + N'Indexes'
               + IIF(hs.parent_object_id IS NOT NULL
                    ,N' & HST/IT'
                    ,N'')
               + N' are '
               + [dbo].[SQLXL_3SD](1.0 * (p.reserved_page_PG_CNT - raw.reserved_page_PG_CNT) / raw.reserved_page_PG_CNT,N'N')
               + N'X Table size'
    ,N'')
----------------------------------------------------------------------------------------------------
,1,1,N'')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p -- parent level composite record

  LEFT OUTER
  JOIN (-- parent objects with HISTORY or INTERNAL TABLES
        SELECT database_id,parent_object_id
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type IN (N'H'                            -- historical/archive table composite record
                           ,N'S'
                           )
         GROUP BY
               database_ID
              ,parent_object_id
       ) AS hs
    ON p.database_ID      = hs.database_id
   AND p.parent_object_id = hs.parent_object_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS tbl
    ON p.database_ID = tbl.database_id
   AND p.object_id   = tbl.object_id

  LEFT OUTER
  JOIN (-- get the "physical" respresentation of the underlying data
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE type  -- physical table structure
            IN (N'0' -- rowstore heap
               ,N'1' -- clustered rowstore index
               ,N'5' -- clustered columnstore
               )
       ) AS raw
    ON p.database_id = raw.database_id
   AND p.object_id   = raw.object_id

  LEFT OUTER
  JOIN (-- get LOB activity as percent of total
        SELECT database_id
              ,object_id
              ,LOB_PCT = [dbo].[SQLXL_3SD](1.0 * ( ios_lob_fetch_pages_CNT
                                                 + ios_lob_orphan_create_CNT
                                                 + ios_lob_orphan_insert_CNT
                                                 ) / ops_total_contacts_CNT
                                          ,N'%')
                       + N' ('
                       + [dbo].[SQLXL_3SD]( ios_lob_fetch_pages_CNT
                                          + ios_lob_orphan_create_CNT
                                          + ios_lob_orphan_insert_CNT
                                          ,N'I')
                       + N'/'
                       + [dbo].[SQLXL_3SD](ops_total_contacts_CNT,N'I')
                       + N')'
          FROM ##SQLXL_Index_Compilation
         WHERE rec_type = N'P'                              -- parent level composite record
           AND ( ios_lob_fetch_pages_CNT
               + ios_lob_orphan_create_CNT
               + ios_lob_orphan_insert_CNT
               ) > 0
       ) AS lob
    ON p.database_id = lob.database_id
   AND p.object_id   = lob.object_id
) AS p
 WHERE p.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Performance related'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - Information from [sys].[TABLES]
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
SELECT p.rec_type
      ,p.database_id
      ,p.parent_object_id
      ,p.object_id
      ,p.index_id
      ,p.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters
----------------------------------------------------------------------------------------------------
-- Table outliers
----------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Many Nonclustered indexes on table (BI20)
-- Diagnostic - Table - has mmany lightly used Nonclustered indexes, no existing nonclustered Columnstore
+IIF(    p.tbl_is_clustered_columnstore <> 1
     AND (   p.Nonclustered_index_CNT >= 4
          OR idx_rd.idx_cnt           > 2
         )
    , NCHAR(167)
    + N'Nonclustered indexes: '
    + CAST(p.Nonclustered_index_CNT AS NVARCHAR(20))
    + IIF(idx_rd.idx_cnt > 0
         ,N', ' + CONVERT(NVARCHAR(20),idx_rd.idx_cnt) + N' lo read (<2%)'
         ,N'')
    + IIF(    sis.ProductMajorVersion >= 13
          AND (--
               SELECT text_value
                 FROM [##SQLXL_Instance_info]
                WHERE source    = N'SERVERPROPERTY'
                  AND name      = N'Edition'
                  AND (   text_value LIKE N'ENTERPRISE%'
                       OR text_value LIKE N'DEVELOPER%'
                      )
              )  IS NOT NULL
         ,IIF(p.Nonclustered_ColumnStore_CNT = 0,N' - consider creating NCS?',N' - consider existing NCS?')
         ,N'')
    + N' (BI20)'
    ,N'') -- 2016+

----------------------------------------------------------------------------------------------------
-- Objects with Code Definitions (functions, views)
----------------------------------------------------------------------------------------------------
-- Diagnostic - Code Object - Does not use ANSI NULLS
+IIF(p.obj_uses_ansi_nulls = 0,NCHAR(167) + N'Does not use ANSI NULLS',N'')

-- Diagnostic - Code Object - Uses Quoted Identifier
+IIF(p.obj_uses_quoted_identifier = 1,NCHAR(167) + N'Uses Quoted Identifier',N'')

-- Diagnostic - Code Object - Is NOT Schema Bound
+IIF(p.obj_is_schema_bound = 0 ,NCHAR(167) + N'Is NOT Schema Bound',N'')

-- Diagnostic - Code Object - Does NOT use Database Collation
+IIF(p.obj_uses_database_collation = 0,NCHAR(167) + N'Does NOT Use Database Collation',N'')

-- Diagnostic - Code Object - Contains WITH RECOMPILE
+IIF(p.obj_is_recompiled =  1,NCHAR(167) + N'Contains WITH RECOMPILE',N'')

-- Diagnostic - Code Object - Does NOT return NULL on NULL input
+IIF(    p.obj_null_on_null_input =  0
     AND p.obj_type <> N'V'            -- View
    ,NCHAR(167) + N'Does NOT return NULL on NULL input',N'')

-- Diagnostic - Code Object - Executes AS OWNER
+IIF(p.obj_execute_as_principal_id = -2,NCHAR(167) + N'Executes AS OWNER',N'')

-- Diagnostic - Code Object - Executes AS PRINCIPAL ID
+IIF(p.obj_execute_as_principal_id >  0
    ,NCHAR(167) + N'Executes AS PRINCIPAL ID ' + CAST(p.obj_execute_as_principal_id AS NVARCHAR(20))
    ,N'')

-- Diagnostic - Code Object - Is natively compiled
+IIF(p.obj_uses_native_compilation =  1,NCHAR(167) + N'Is natively compiled',N'')

------------------------------------------------------------
-- Diagnostic - Table Valued Function - is INLINEABLE, inlining OFF or ON
+IIF(p.obj_is_inlineable =  1
    ,NCHAR(167) + N'Is inlineable' + IIF(p.obj_inline_type = 1,N', inlining [ON]',N', Inlining *OFF*')
    ,N'')

------------------------------------------------------------
,1,1,N'')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p          -- parent level composite record
 CROSS
  JOIN [##SQLXL_Index_Startup] AS sis
  LEFT OUTER
  JOIN (-- get count of nonclustered rowstore indexes with less than 2% of table reads
        SELECT i.database_ID
              ,i.parent_object_id
              ,i.object_id
              ,idx_cnt            = SUM(1)
          FROM (-- All nonclustered rowstores not tied to a clustered columnstore table
                SELECT database_id
                      ,parent_object_id
                      ,object_id
                      ,ops_total_read_CNT
                  FROM [##SQLXL_Index_Compilation]
                 WHERE rec_type                     = N'I'                             -- index level composite record
                   AND tbl_is_clustered_columnstore = 0
                   AND type                         = N'2'                             -- nonclustered rowstore index
               ) AS i
          JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
            ON i.database_id      = p.database_id
           AND i.parent_object_id = p.parent_object_id
           AND i.object_id        = p.object_id
         WHERE IIF(p.ops_total_read_CNT > 0
                  ,100.0 * COALESCE(i.ops_total_read_CNT,0) / p.ops_total_read_CNT
                  ,0.0) < 2.0 -- 2 percent
         GROUP BY
               i.database_ID
              ,i.parent_object_id
              ,i.object_id
       ) AS idx_rd
    ON p.database_ID      = idx_rd.database_ID
   AND p.parent_object_id = idx_rd.parent_object_id
   AND p.object_id        = idx_rd.object_id
) AS p
 WHERE p.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Information from [sys].[TABLES]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
--
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
SELECT p.rec_type
      ,p.database_id
      ,p.parent_object_id
      ,p.object_id
      ,p.index_id
      ,p.type
-- Diagnostic - Table - LOB data space name and description
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters
                           CASE WHEN tbl.lob_data_space_id > 0
                                THEN  NCHAR(167)
                                    + N'LOB data space ' + QUOTENAME(lob_ds.data_space_name)
                                    + N' type ' + QUOTENAME(lob_ds.data_space_type_desc)
                                ELSE N''
                           END COLLATE DATABASE_DEFAULT
-- Diagnostic - Table - Filestream data space name and description
                         + CASE WHEN tbl.filestream_data_space_id > 0
                                THEN  NCHAR(167)
                                    + N'Filestream data spc ' + QUOTENAME(fs_ds.data_space_name)
                                    + N' type ' + QUOTENAME(fs_ds.data_space_type_desc)
                                ELSE N''
                           END COLLATE DATABASE_DEFAULT
                         ,1,1,N'')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
  JOIN [##SQLXL_Index_sys_objects] AS tbl
    ON p.database_id = tbl.database_id
   AND p.object_id   = tbl.object_id

  LEFT OUTER
  JOIN (-- Data Spaces
        SELECT database_id
              ,data_space_id
              ,data_space_name
              ,data_space_type_desc
          FROM [##SQLXL_Index_sys_data_spaces]
         GROUP BY
               database_id
              ,data_space_id
              ,data_space_name
              ,data_space_type_desc
       ) AS lob_ds
    ON p.database_id         = lob_ds.database_id
   AND tbl.lob_data_space_id = lob_ds.data_space_id
  LEFT OUTER
  JOIN (-- Filestream Data Spaces
        SELECT database_id
              ,data_space_id
              ,data_space_name
              ,data_space_type_desc
          FROM [##SQLXL_Index_sys_data_spaces]
         GROUP BY
               database_id
              ,data_space_id
              ,data_space_name
              ,data_space_type_desc
       ) AS fs_ds
    ON p.database_id                = fs_ds.database_id
   AND tbl.filestream_data_space_id = fs_ds.data_space_id
) AS p
 WHERE p.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - LOB & Filestream'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Has large data types
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type         = N'P'           -- parent level composite record
      ,p.database_id
      ,parent_object_id = p.object_id
      ,p.object_id
      ,index_id   = p.object_id
      ,type       = N'U'                 -- User Table
      ,diagnostic = N'Large datatypes: '
                  + STUFF(-- Strip off leading unnecessary characters
                           (--
                            SELECT DISTINCT
                                   N',' +user_type_name + IIF(max_length = -1,N'(MAX)',N'')
                              FROM [##SQLXL_Index_sys_columns] AS c
                             WHERE p.database_id = c.database_id
                               AND p.object_id   = c.object_id
                               AND (   c.max_length = -1
                                    OR c.user_type_name IN (N'HIERARCHYID')
                                   )
                               FOR XML PATH(N''), TYPE                     -- can be more than 1 column in foreign key
                           ).value('(./text())[1]',N'NVARCHAR(MAX)')
                          ,1,1,N'')
  FROM (-- tables with deprecated data types
        SELECT database_id
              ,object_id
          FROM [##SQLXL_Index_sys_columns]
         WHERE max_length = -1
            OR user_type_name IN (N'HIERARCHYID')
         GROUP BY
               database_id
              ,object_id
       ) AS p
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - tables with large data types'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Has Deprecated data types
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type         = N'P'               -- parent level composite record
      ,p.database_id
      ,parent_object_id = p.object_id
      ,p.object_id
      ,index_id   = p.object_id
      ,type       = N'U'                     -- User Table
      ,diagnostic = N'Deprecated datatypes: '
                  + STUFF(-- Strip off leading unnecessary characters
                          (--
                           SELECT DISTINCT
                                  N',' +user_type_name + IIF(max_length = -1,N'(MAX)',N'')
                             FROM [##SQLXL_Index_sys_columns] AS c
                            WHERE p.database_id     = c.database_id
                              AND p.object_id       = c.object_id
                              AND c.user_type_name IN (N'IMAGE',N'TEXT',N'NTEXT')
                              FOR XML PATH(N''), TYPE -- can be more than one datataype
                          ).value('(./text())[1]',N'NVARCHAR(MAX)')
                         ,1,1,N'')
  FROM (-- tables with deprecated data types
        SELECT database_id
              ,object_id
          FROM [##SQLXL_Index_sys_columns]
         WHERE user_type_name IN (N'IMAGE',N'TEXT',N'NTEXT')
         GROUP BY
               database_id
              ,object_id
       ) AS p
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - tables with deprecated data types'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Parent - Information - Other
----------------------------------------------------------------------------------------------------
-- Diagnostic - Table - No PRIMARY KEY
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'P'             -- parent level composite record
      ,p.database_id
      ,p.parent_object_id
      ,p.object_id
      ,index_id   = p.object_id
      ,type       = N'U'             -- User Table
      ,diagnostic = 'No Primary Key'
                  + IIF(i.index_id > 0
                       ,N', has ' + IIF(i.is_unique = 1,N'Unique',N'NonUnique') + N' CX'
                       ,N'')
  FROM (-- Tables without primary keys
        SELECT database_id
              ,parent_object_id
              ,object_id
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type             = N'P'   -- parent level composite record
           AND obj_type             = N'U'   -- User Table
           AND obj_type_short_label = N'TBL' -- omits History & Internal tables, Clustered columnstores cannot have PK constraints
       EXCEPT -- indexes that are primary keys
        SELECT database_id
              ,parent_object_id
              ,object_id
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type       = N'I'         -- index level composite record
           AND is_primary_key = 1
       ) AS p
  LEFT OUTER
  JOIN [##SQLXL_Index_Compilation] AS i
    ON N'I'               = i.rec_type       -- index level composite record
   AND p.database_id      = i.database_id
   AND p.parent_object_id = i.parent_object_id
   AND p.object_id        = i.object_id
   AND i.type            IN (N'0' -- Rowstore HEAP
                            ,N'1' -- Rowstore Clustered
                            );    -- Clustered columnstores cannot have PK constraints

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - tables without primary keys'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Operations Writes but no/low reads - Table. See same for Index below
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
-- Diagnostic - Table - Operations - No reads, High % writes (BI22)
-- Diagnostic - Table - Operations - No reads, Low % writes (BI29)
-- Diagnostic - Table - Operations - High writes to Read ratio - High % writes (BI48)
-- Diagnostic - Table - Operations - High writes to Read ratio - Low % writes (BI48)
SELECT p.rec_type
      ,p.database_id
      ,p.parent_object_id
      ,p.object_id
      ,p.index_id
      ,p.type
      ,diagnostic = IIF(p.ops_total_read_CNT = 0
                       , N'OPS:  No RDS and '
                       + IIF(a.ops_total_write_CNT > 0
                            ,IIF(1.0 * p.ops_total_write_CNT / a.ops_total_write_CNT < IIF(p.rec_type = N'I',0.000001,0.00001)
                                ,N'Lo WRT (BI29) - '
                                ,N'Hi WRT (BI22) - ')
                            ,N' WRT')
                       + N' WRT: ' + [dbo].[SQLXL_3SD](p.ops_total_write_CNT,N'I')
                       , N'OPS:  Lo RDS/WRT & '
                       + IIF(a.ops_total_write_CNT > 0
                            ,IIF(1.0 * p.ops_total_write_CNT / a.ops_total_write_CNT < IIF(p.rec_type = N'I',0.000001,0.00001)
                                ,N'Lo WRT (BI48)'
                                ,N'Hi WRT (BI48)')
                            ,N' No WRT')
                       + N' RDS ' + [dbo].[SQLXL_3SD](p.ops_total_read_CNT,N'I')
                       + N' WRT ' + [dbo].[SQLXL_3SD](p.ops_total_write_CNT,N'I')
                       + N' ('  + [dbo].[SQLXL_3SD](p.ops_read_to_write_RAT,N'N') + N'x)'
                       )
  FROM (SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type            = N'P'                                       -- parent level composite record
           AND ops_total_write_CNT > 0
           AND COALESCE(ops_total_read_CNT,0) / ops_total_write_CNT <= 4.0
       ) AS p
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'A') AS a   -- instance level composite record
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - writes with no/low reads'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Table - Usage Writes but no/low reads - not useful since looking at query-level use not operations
----------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------
-- Wide tables (35+ cols or > 2000 non-LOB bytes) - BI check_id 26
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'P'  -- parent level composite record
      ,c.database_id
      ,c.object_id
      ,c.object_id
      ,c.object_id
      ,type       = N'U'  -- User Table
-- Diagnostic - Table - has 35 or more columns (BI26)
-- Diagnostic - Table - has a non-LOB width greater than 2000 bytes (BI26)
      ,diagnostic = N'Wide table - ' + CAST(c.column_lng AS NVARCHAR(20))
                  + N' bytes in '    + CAST(c.column_CNT AS NVARCHAR(20))
                  + N' non-LOB columns (BI26)'
  FROM (--
        SELECT c.database_id
              ,c.object_id
              ,column_CNT = COUNT(1)
              ,column_lng = SUM(IIF(c.max_length = -1,0,c.max_length))
          FROM [##SQLXL_Index_sys_objects] AS t
          JOIN [##SQLXL_Index_sys_columns] AS c
            ON t.database_id  = c.database_id
           AND t.object_id    = c.object_id
         WHERE t.type = N'U' -- User Table
         GROUP BY
               c.database_id
              ,c.object_id
        HAVING COUNT(1)                                   >= 35
            OR SUM(IIF(c.max_length = -1,0,c.max_length)) >  2000
       ) c
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Many columns and/or wide'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - String column with non-database collation
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'P'  -- parent level composite record
      ,c.database_id
      ,c.object_id
      ,c.object_id
      ,c.object_id
      ,type       = N'U'  -- User Table
-- Diagnostic - Table - has column(s) with Collation not matching database collation (BI69)
      ,diagnostic = N'Column ' + QUOTENAME(c.name) + N' collation <> DB (BI69)'
  FROM [##SQLXL_Index_sys_columns]   AS c
  JOIN [##SQLXL_Index_sys_databases] AS d
    ON c.database_id = d.database_id
 WHERE c.collation_name <> d.collation_name

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - String column with non-database collation'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Table + column check constraint has non-standard property or references a procedure, function, or CLR - (BI94)
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'P'  -- parent level composite record
      ,cx.database_id
      ,cx.parent_object_id
      ,cx.parent_object_id
      ,cx.parent_object_id
      ,type       = N'U'  -- User Table

-- Diagnostic - Table/Column has check constraint(s) - see details
      ,diagnostic = IIF(cx.parent_column_id = 0,N'TBL ',N'')
                  + IIF(cx.type = N'C',N'CHK ',N'DEF ')
                  + IIF(cx.parent_column_id = 0,N'CON: ',N'COL: ')
                  + IIF(cx.parent_column_id = 0,QUOTENAME(cx.name),QUOTENAME(c.name))
                  + IIF(   cx.is_published        = 1
                        OR cx.is_schema_published = 1
                        OR cx.is_disabled         = 1
                        OR cx.is_not_trusted      = 1
                        OR cx.is_system_named     = 1
                       , NCHAR(167) + N'>'
                       + STUFF(-- trim off unneeded leading characters
-- Diagnostic - Table/Column Constraint - is PUBLISHED
                                IIF(cx.is_published        = 1,N', Published',N'')
-- Diagnostic - Table/Column Constraint - is SCHEMA PUBLISHED
                              + IIF(cx.is_schema_published = 1,N', Schema Published',N'')
-- Diagnostic - Table/Column Constraint - is DISABLED
                              + IIF(cx.is_disabled         = 1,N', Disabled',N'')
-- Diagnostic - Table/Column Constraint - is NOT TRUSTED
                              + IIF(cx.is_not_trusted      = 1,N', Not Trusted',N'')
-- Diagnostic - Table/Column Constraint - is SYSTEM NAMED
                              + IIF(cx.is_system_named     = 1,N', System Named',N'')
                              ,1,1,N'')
                       ,N'')

-- Diagnostic - Table/Column Constraint - table is Replicated, column has REPLICATION enabled
                  + IIF(    tbl.is_replicated         = 1
                        AND cx.is_not_for_replication = 0
                       ,NCHAR(167) + N'> Replicated - consider "NOT FOR REPLICATION"'
                       ,N'')

-- Diagnostic - Table/Column Constraint - does not use database collation
                  + IIF(cx.uses_database_collation = 0,NCHAR(167) + N'> Does not use DATABASE COLLATION',N'')

-- Diagnostic - Table/Column Constraint - uses a SQL procedure - can force serialization (BI94)
                  + IIF(cx.uses_sql_proc = 1,NCHAR(167) + N'> references a procedure - can force serialization (BI94)' ,N'')

-- Diagnostic - Table/Column Constraint - uses a SQL function - can force serialization (BI94)
                  + IIF(cx.uses_sql_ftn  = 1,NCHAR(167) + N'> references a function - can force serialization (BI94)' ,N'')

-- Diagnostic - Table/Column Constraint - uses a SQL method - can force serialization (BI94)
                  + IIF(cx.uses_sql_mthd = 1,NCHAR(167) + N'> references a SQL method - can force serialization (BI94)',N'')

/*** LOCAL TESTING ***
SELECT *
--*/
  FROM (-- all check constraints
        SELECT *
          FROM [##SQLXL_Index_sys_objects]
         WHERE type IN (N'C' -- check constraint
                       ,N'D' -- default constraint
                       )
       ) AS cx
  LEFT OUTER
  JOIN (-- indexed columns - used to exclude here since will be covered in each index they occur below
        SELECT database_id
              ,object_id
              ,column_id
          FROM [##SQLXL_Index_sys_index_columns]
         GROUP BY
               database_id
              ,object_id
              ,column_id
       ) AS ic
    ON cx.database_id      = ic.database_id
   AND cx.parent_object_id = ic.object_id
   AND cx.parent_column_id = ic.column_id
  JOIN [##SQLXL_Index_sys_objects] AS tbl
    ON cx.database_id      = tbl.database_id
   AND cx.parent_object_id = tbl.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_columns] AS c
    ON cx.database_id      = c.database_id
   AND cx.parent_object_id = c.object_id
   AND cx.parent_column_id = c.column_id
 WHERE ic.column_id IS NULL
 ORDER BY
       cx.parent_column_id
      ,cx.type       -- check constraints first
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Check constraints'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - Computed columns - can force serialization
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'P'  -- parent level composite record
      ,c.database_id
      ,c.object_id
      ,c.object_id
      ,c.object_id
      ,type       = N'U'  -- User Table
-- Diagnostic - Table - Has Computed Column
-- Diagnostic - Table - Computed Column is non-persisted (BI100)
      ,diagnostic = IIF(c.is_persisted = 0,N'Non-persisted ',N'') + N'Computed Column '
                  + NCHAR(167) + N'> ' + QUOTENAME(c.name)

-- Diagnostic - Table - Computed Column - uses a SQL procedure - can force serialization (BI99)
                 + IIF(c.uses_sql_proc = 1,NCHAR(167) + N'> references a procedure - can force serialization (BI99)' ,N'')

-- Diagnostic - Table - Computed Column - uses a SQL function - can force serialization (BI99)
                 + IIF(c.uses_sql_ftn  = 1,NCHAR(167) + N'> references a function - can force serialization (BI99)' ,N'')

-- Diagnostic - Table - Computed Column - uses a SQL method - can force serialization (BI99)
                 + IIF(c.uses_sql_mthd = 1,NCHAR(167) + N'> references a SQL method - can force serialization (BI94)',N'')

-- Diagnostic - Table - has non-persisted Computed Columns as index key column
-- Diagnostic - Table - has non-persisted Computed Columns as index included column
                 + COALESCE( NCHAR(167)
                           + N'> In Index(s): '
                           + STUFF(-- Strip off leading unnecessary characters
                                   (-- List of indexes with included column in key or includes
                                    SELECT  N', ' + IIF(ic.type = N'90' -- full-text index of a tabular object
                                                       ,N'FTX'
                                                       ,CAST(index_id AS NVARCHAR(20)))
                                          + N' (' + IIF(ic.is_included_column = 0,N'Key',N'Inc')+ N')'
                                      FROM [##SQLXL_Index_sys_index_columns] AS ic
                                     WHERE c.database_id                           = ic.database_id
                                       AND c.object_id                             = ic.object_id
                                       AND c.column_id                             = ic.column_id
                                     ORDER BY
                                           ic.index_id
                                       FOR XML PATH (N''), TYPE
                                   ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                  ,1,2,N'')
                          ,N'')
  FROM [##SQLXL_Index_sys_columns] AS c
 WHERE c.is_computed  = 1
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Computed columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - Replicated columns - (BI70)
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'P'  -- parent level composite record
      ,c.database_id
      ,c.object_id
      ,c.object_id
      ,c.object_id
      ,type       = N'U'  -- User Table
-- Diagnostic - Table - has replicated columns & count (not change data capture) (BI70)
      ,diagnostic = N'Replicated columns: '
                  + IIF(c.replicated_columns <> c.all_columns
                       ,CAST(c.replicated_columns AS NVARCHAR(20)) + N' of ' + CAST(c.all_columns AS NVARCHAR(20))
                       ,N'All'
                       ) + N' (BI70)'
/*** LOCAL TESTING ***
SELECT c.*
--*/
  FROM (--
        SELECT database_id
              ,object_id
              ,replicated_columns = SUM(IIF(is_replicated = 1,1,0))
              ,all_columns        = SUM(1)
          FROM [##SQLXL_Index_sys_columns]
         GROUP BY
               database_id
              ,object_id
        HAVING SUM(IIF(is_replicated = 1,1,0)) > 0
       ) AS c
  JOIN [##SQLXL_Index_sys_objects] AS t
    ON c.database_id = t.database_id
   AND c.object_id   = t.object_id
   AND 0             = t.is_tracked_by_cdc
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Replicated columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - Tables with filtered statistics
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'P'  -- parent level composite record
      ,s.database_id
      ,s.object_id
      ,s.object_id
      ,s.object_id
      ,type       = N'U'  -- User Table
-- Diagnostic - Table - has non-indexed statistics - may indicate more indexes needed
      ,diagnostic = N'Table has ' + CAST(SUM(IIF(s.has_filter = 1,1,0)) AS NVARCHAR(20)) + N' non-index filtered statistics'
  FROM [##SQLXL_Index_sys_stats]   AS s
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_indexes] AS i
    ON s.database_id                  = i.database_id
   AND s.object_id                    = i.object_id
   AND s.stats_id                     = i.index_id
 WHERE i.index_id IS NULL
 GROUP BY
       s.database_id
      ,s.object_id
HAVING SUM(IIF(s.has_filter = 1,1,0)) > 0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - filtered statistics'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - CDC - History File group
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'P'  -- parent level composite record
      ,p.database_id
      ,p.parent_object_id
      ,p.parent_object_id
      ,p.parent_object_id
      ,type       = N'U'  -- User Table
-- Diagnostic - Table - Change data capture filegroup name
      ,diagnostic = NCHAR(167)
                  + IIF(p.cdc_filegroup_name IS NOT NULL
                       ,N'Filegroup Name ' + QUOTENAME(p.cdc_filegroup_name)
                       ,N'Uses default Filegroup')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p
 WHERE p.cdc_is_history_table = 1
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - History File group'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - DML Triggers - enabled, non-MS
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT p.rec_type
      ,p.database_id
      ,p.object_id
      ,p.object_id
      ,p.object_id
      ,p.type
      ,diagnostic = N'DML Triggers'
-- Diagnostic - Table - has CLR trigger(s)
                  + N' CLR: ' + IIF(p.CLR_trigger_CNT > 0,CAST(p.CLR_trigger_CNT AS NVARCHAR(20)),N'0')
-- Diagnostic - Table - has SQL trigger(s)
                  + N' SQL: ' + IIF(p.SQL_trigger_CNT > 0,CAST(p.SQL_trigger_CNT AS NVARCHAR(20)),N'0')
-- Diagnostic - Table - has INSTEAD OF trigger(s)
                  + N' Instead Of: ' + IIF(p.is_instead_of_trigger_CNT > 0
                                          ,CAST(p.is_instead_of_trigger_CNT AS NVARCHAR(20))
                                          ,N'0')
  FROM [##SQLXL_Index_Compilation] AS p
 WHERE rec_type = N'P' -- parent level composite record
   AND type     = N'U' -- User Table
   AND (   p.CLR_trigger_CNT           > 0
        OR p.SQL_trigger_CNT           > 0
        OR p.is_instead_of_trigger_CNT > 0
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - DML Triggers'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Identity and Sequence value usage
-- Diagnostic - Table - Identity and Sequence values - flag if nearing their limits at 50% (BI68)
-- Diagnostic - Table - Sequence Columns - not using 1 as increment (BI74)
-- Diagnostic - Table - Sequence Columns - with negative or zero start value (BI74)
-- Diagnostic - Table - Identity Columns not using 1 as increment (BI74)
-- Diagnostic - Table - Identity Columns with negative or zero seed (BI74)
-- Diagnostic - Table - column with NEWID or NEWSEQUENTIALID
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH cte AS (--
SELECT data_type = N'tinyint'
      ,min_value = CAST(0 AS BIGINT)
      ,max_value = CAST(255 AS BIGINT)
      ,max_fmt   = [dbo].[SQLXL_3SD](255,N'I')

UNION ALL
SELECT data_type = N'smallint'
      ,min_value = -32768
      ,max_value =  32767
      ,max_fmt   = [dbo].[SQLXL_3SD](32767,N'I')

UNION ALL
SELECT data_type = N'int'
      ,min_value = -2147483648
      ,max_value =  2147483647
      ,max_fmt   = [dbo].[SQLXL_3SD](2147483647,N'I')

UNION ALL
SELECT data_type = N'bigint'
      ,min_value = -9223372036854775808
      ,max_value =  9223372036854775807
      ,max_fmt   = N'9.22E' -- Can't use [dbo].[SQLXL_3SD] because generates OVERFLOW message
)
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type      = N'P'  -- parent level composite record
      ,c.database_id
      ,c.object_id
      ,c.object_id
      ,c.object_id
      ,type          = N'U'  -- User Table
      ,diagnostic =
  IIF(100.0 * COALESCE(CAST(c.Last_Value AS BIGINT),CAST(c.seq_current_value AS BIGINT),0) / cte.max_value > 50.0
     ,N'*NOTE* (BI68) ' -- no check for zero, always > 0 from cte
     ,N'')

+ CASE WHEN c.increment_value IS NOT NULL THEN N'Identity'
       WHEN c.seq_increment   IS NOT NULL THEN N'Sequence'
       WHEN sc.is_newsequentialid = 1     THEN N'Sequence GUID'
       WHEN sc.is_newid           = 1     THEN N'NewID'
  END

+ N' column ' + QUOTENAME(c.name)
+ IIF(c.increment_value IS NOT NULL OR c.seq_increment IS NOT NULL
     , IIF(LEN(c.name) > 57,NCHAR(167) + N'> ',N' ')
     + N'at ' + [dbo].[SQLXL_3SD](100.0 * CAST(COALESCE(c.Last_Value,c.seq_current_value,0) AS BIGINT) / cte.max_value
                                 ,N'N'
                                 )         -- no check for zero, always > 0 from cte
      + N'% Used: ' + [dbo].[SQLXL_3SD](COALESCE(CAST(c.Last_Value        AS BIGINT)
                                                ,CAST(c.seq_current_value AS BIGINT)
                                                ,0
                                                )
                                       ,N'I'
                                       )
                   + N'/' + cte.max_fmt
      + IIF(   c.increment_value <> 1
            OR c.seed_value      <  1
            OR c.seq_increment   <> 1
            OR c.seq_start_value <  1
           , IIF(c.increment_value <> 1,N' Increment ' + CAST(c.increment_value AS NVARCHAR(20)),N'')
           + IIF(c.seed_value      <  1,N' Seed '      + CAST(c.seed_value      AS NVARCHAR(20)),N'')
           + IIF(c.seq_increment   <> 1,N' Increment ' + CAST(c.seq_increment   AS NVARCHAR(20)),N'')
           + IIF(c.seq_start_value <  1,N' Seed '      + CAST(c.seq_start_value AS NVARCHAR(20)),N'')
           + N' (BI74)'
           ,N''
           )
     ,N'')
  FROM [##SQLXL_Index_sys_columns] AS c
  JOIN [##SQLXL_Index_column]      AS sc
    ON c.database_id  = sc.database_id
   AND c.object_id    = sc.object_id
   AND c.column_id    = sc.Column_ID
  JOIN [##SQLXL_Index_sys_types]   AS t
    ON c.database_id  = t.database_id
   AND c.user_type_id = t.user_type_id
  JOIN cte
    ON t.name         = cte.data_type
 WHERE c.increment_value IS NOT NULL
    OR c.seq_increment   IS NOT NULL
    OR sc.is_newsequentialid = 1
    OR sc.is_newid           = 1
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Identities/Sequence'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
############################################################################################################################################
*** INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX ***
############################################################################################################################################
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters
----------------------------------------------------------------------------------------------------
-- Index All Types
----------------------------------------------------------------------------------------------------
-- HEAPS flagged later on
+IIF(   i.is_disabled                = 1
     OR i.is_not_trusted             = 1
     OR i.is_ignored_in_optimization = 1
    ,NCHAR(167)
-- Diagnostic - Index - is DISABLED (BI42)
   + LTRIM( IIF(i.is_disabled = 1,N' *Disabled* (BI42)',N'')

-- Diagnostic - Index - is NOT TRUSTED
          + IIF(i.is_not_trusted = 1,N' *Not trusted*',N'')

-- Diagnostic - Index - is IGNORED IN OPTIMIZATION
          + IIF(i.is_ignored_in_optimization = 1,N' *Ignored in optimization*',N'')
          )
    ,N'')

-- Diagnostic - Index - Duplicate keys ignored
+IIF(i.ignore_dup_key = 1
    ,NCHAR(167) + N'Duplicate keys ignored, inserted rows can be discarded'
    ,N'')

-- Diagnostic - Index - Duplicate key warningsuppressed on index Refresh
+IIF(i.suppress_dup_key_messages = 1
    ,NCHAR(167) + N'Duplicate key messages are suppressed on index Rebuild'
    ,N'')

-- Diagnostic - Index - is Hypothetical (BI41)
+IIF(i.is_hypothetical = 1
    ,NCHAR(167) + N'Hypothetical, can''t be used, holds stats (BI41)'
    ,N'')
------------------------------------------------------------
,1,1,N'')
  FROM [##SQLXL_Index_Compilation] AS i  -- only table source in query
 WHERE i.diagnostics > N''
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Special types'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Index - Columnstores rowgroup info
----------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Columnstore - vertipaq_optimization SKIPPED
-- Diagnostic - Index - Columnstore - has OPEN/DELETED rowgroups - REORGANIZE/REBUILD?
-- Diagnostic - Index - Columnstore - compression delay > 0
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'               -- index level composite record
      ,i.database_id
      ,parent_object_id = i.object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = IIF(i.compression_delay > 0
                       ,N'> Columnstore compression delay ' + CAST(i.compression_delay AS NVARCHAR(20)) + N' minutes' + NCHAR(167)
                       ,N'')
                  + STUFF(s.diagnostic,1,1,N'')
  FROM [##SQLXL_Index_Startup]     AS sis
 CROSS
  JOIN [##SQLXL_Index_sys_indexes] AS i
 OUTER
 APPLY (SELECT -- double select to accomodate the "XML TYPE" clause below
       (SELECT  NCHAR(167) + N'> '
              + CAST(COUNT(1) AS NVARCHAR(20)) + N' Rowgroup(s) ' + state_desc
              + IIF(trim_reason_desc IS NOT NULL,N' Trimmed ' + trim_reason_desc,N'')
              + IIF(transition_to_compressed_state_desc IS NOT NULL,N' Transition ' + transition_to_compressed_state_desc,N'')
              + IIF(SUM(IIF(has_vertipaq_optimization = 0,1,0)) > 0
                   ,N' Vertipaq OFF ' + CAST(SUM(IIF(has_vertipaq_optimization = 0,1,0)) AS NVARCHAR(20))
                   ,N'') -- rearranging the order of the rows in the rowgroup to achieve higher compression
              + N' Size ' + [dbo].[SQLXL_3SD](SUM(size_in_bytes),N'B')
              + IIF(SUM(deleted_rows) > 0,N' Deletes ' + [dbo].[SQLXL_3SD](SUM(deleted_rows),N'I'),N'')
              + IIF(SUM(total_rows) > 0,N' Rows ' + [dbo].[SQLXL_3SD](SUM(total_rows),N'I'),N'')
              + IIF(SUM(deleted_rows) > 0 OR state_desc = N'OPEN'
                   ,N' - REORGANIZE' + IIF(sis.ProductMajorVersion >= 15,N'/REBUILD (2019+ Online)',N'') + N'?'
                   ,N'')
          FROM [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats] AS s
         WHERE i.database_id = s.database_id
           AND i.object_id   = s.object_id
           AND i.index_id    = s.index_id
         GROUP BY
               database_id
              ,object_id
              ,index_id
              ,state_desc
              ,trim_reason_desc
              ,transition_to_compressed_state_desc
        ORDER BY
              CASE state_desc
                   WHEN N'INVISIBLE'  THEN 0
                   WHEN N'OPEN'       THEN 1
                   WHEN N'CLOSED'     THEN 2
                   WHEN N'COMPRESSED' THEN 3
                   WHEN N'TOMBSTONE'  THEN 4
              END
             ,CASE trim_reason_desc
                   WHEN N'UNKNOWN_UPGRADED_FROM_PREVIOUS_VERSION' THEN 0
                   WHEN N'NO_TRIM'                                THEN 1
                   WHEN N'REORG'                                  THEN 2
                   WHEN N'DICTIONARY_SIZE'                        THEN 3
                   WHEN N'MEMORY_LIMITATION'                      THEN 4
                   WHEN N'STATS_MISMATCH'                         THEN 5
                   WHEN N'SPILLOVER'                              THEN 6
                   WHEN N'AUTO_MERGE'                             THEN 7
                   WHEN N'BULKLOAD'                               THEN 8
                   WHEN N'RESIDUAL_ROW_GROUP'                     THEN 9
              END
             ,CASE transition_to_compressed_state_desc
                   WHEN N'REORG_FORCED'   THEN 1
                   WHEN N'INDEX_BUILD'    THEN 2
                   WHEN N'TUPLE_MOVER'    THEN 3
                   WHEN N'REORG_NORMAL'   THEN 4
                   WHEN N'BULKLOAD'       THEN 5
                   WHEN N'MERGE'          THEN 6
                   WHEN N'NOT_APPLICABLE' THEN 7
              END
          FOR XML PATH(N''), TYPE
       ).value('(./text())[1]',N'NVARCHAR(MAX)')
       ) AS s(diagnostic)
 WHERE i.type IN (N'5' -- clustered columnstore
                 ,N'6' -- nonclustered columnstore index
                 )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Columnstore reorg'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Index Properties - Spatial
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = N'Spatial Properties:'
                  + IIF(   i.si_bounding_box_xmin IS NOT NULL
                        OR i.si_bounding_box_ymin IS NOT NULL
                        OR i.si_bounding_box_xmax IS NOT NULL
                        OR i.si_bounding_box_ymax IS NOT NULL
                       ,NCHAR(167)
                       + N'> '
-- Diagnostic - Index - Spatial index - tesellation scheme - bounding box x & y min & max
                       + STUFF( IIF(i.si_bounding_box_xmin IS NOT NULL,N',box_xmin:' + CAST(i.si_bounding_box_xmin AS NVARCHAR(20)),N'')
                              + IIF(i.si_bounding_box_ymin IS NOT NULL,N',box_ymin:' + CAST(i.si_bounding_box_ymin AS NVARCHAR(20)),N'')
                              + IIF(i.si_bounding_box_xmax IS NOT NULL,N',box_xmax:' + CAST(i.si_bounding_box_xmax AS NVARCHAR(20)),N'')
                              + IIF(i.si_bounding_box_ymax IS NOT NULL,N',box_ymax:' + CAST(i.si_bounding_box_ymax AS NVARCHAR(20)),N'')
                              ,1,2,N'')
                       ,N'')
-- Diagnostic - Index - Spatial index - tesellation scheme - level grid 1 - 4 description
                  + NCHAR(167)
                  + N'> Grid1:' + COALESCE(i.si_level_1_grid_desc,N'AUTO')
                  + N' Grid2:'  + COALESCE(i.si_level_2_grid_desc,N'AUTO')
                  + N' Grid3:'  + COALESCE(i.si_level_3_grid_desc,N'AUTO')
                  + N' Grid4:'  + COALESCE(i.si_level_4_grid_desc,N'AUTO')
-- Diagnostic - Index - Spatial index - tesellation scheme - cells per object
                  + N' Cells per object: ' + CAST(i.si_cells_per_object AS NVARCHAR(20))
  FROM [##SQLXL_Index_Compilation] AS i  -- only table source in query
 WHERE i.type = N'4'; -- Spatial index

----------------------------------------------------------------------------------------------------
-- Index Properties - Fulltext index
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
-- Diagnostic - Index - Full Text - properties
     ,diagnostic = N'Change Tracking ' + QUOTENAME(ftx.change_tracking_state_desc)
                 + N' Crawl Type '     + QUOTENAME(ftx.crawl_type_desc)
                 + IIF(ftx.has_crawl_completed = 0
                      ,N' In Progress ' + [dbo].[SQLXL_DTTM_HMSM](i.collection_DTTM - ftx.crawl_start_date)
                      ,N' Completed '   + [dbo].[SQLXL_DTTM_HMSM](i.collection_DTTM - ftx.crawl_end_date) + N' ago')
                 + NCHAR(167)
                 + N'Catalog ID ' + QUOTENAME(ftc.fulltext_catalog_ID)
                 + N' Name '      + QUOTENAME(ftc.name) + IIF(ftc.is_default = 1,N' (DEFAULT)',N'')
                 + NCHAR(167)
                 + N'Semantic Search Columns -'
                 + N' ON '  + [dbo].[SQLXL_3SD](ic.semantics_ON ,N'I')
                 + N' OFF ' + [dbo].[SQLXL_3SD](ic.semantics_OFF,N'I')
                 + NCHAR(167)
                 + N'Uses Unique Index '   + QUOTENAME(ftx.unique_index_id)
                 + N' Stoplist '           + QUOTENAME(IIF(ftx.stoplist_ID = 0,N'DEFAULT',CAST(ftx.stoplist_ID AS NVARCHAR(20))))
                 + N' Property List '      + QUOTENAME(IIF(ftx.property_list_id IS NULL
                                                          ,N'NONE'
                                                          ,CAST(ftx.property_list_id AS NVARCHAR(20))))
                 + N' Accent Sensitivity ' + QUOTENAME(IIF(ftc.is_accent_sensitivity_on = 1,N'ON',N'OFF'))
-- Diagnostic - Index - Full Text - Semantic Search ENABLED/DISABLED
  FROM [##SQLXL_Index_Compilation]          AS i
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_fulltext_indexes] AS ftx
    ON i.database_ID = ftx.database_id
   AND i.object_id   = ftx.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_fulltext_catalogs] AS ftc
    ON ftx.database_id         = ftc.database_id
   AND ftx.fulltext_catalog_id = ftc.fulltext_catalog_id
  LEFT OUTER
  JOIN (SELECT database_id,object_id,index_id,type
              ,semantics_ON  = SUM(IIF(statistical_semantics = 1,1,0))
              ,semantics_OFF = SUM(IIF(statistical_semantics = 0,1,0))
          FROM [##SQLXL_Index_sys_index_columns]
         WHERE type = N'90' -- full-text index of a tabular object
         GROUP BY
               database_id
              ,object_id
              ,index_id
              ,type
       ) AS ic
    ON i.database_ID      = ic.database_id
   AND i.parent_object_id = ic.object_id
   AND i.object_id        = ic.object_id
   AND i.index_ID         = ic.index_id
   AND i.type             = ic.type
 WHERE i.rec_type = N'I'   -- index level composite record
   AND i.type     = N'90'; -- full-text index of a tabular object

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - fulltext'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Operations Writes but no/low reads - Index
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
-- Diagnostic - Index - Operations - No reads, High % writes (BI22)
-- Diagnostic - Index - Operations - No reads, Low % writes (BI29)
-- Diagnostic - Index - Operations - High Writes to Read ratio - High % writes (BI48)
-- Diagnostic - Index - Operations - High Writes to Read ratio - Low % writes (BI48)
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = IIF(i.ops_total_read_CNT = 0
                       , N'OPS: No RDS and '
                       + IIF((1.0 * i.ops_total_write_CNT / a.ops_total_write_CNT) < 0.000001
                            ,N'Lo WRT (BI29) - '
                            ,N'Hi WRT (BI22) - ')
                       + N' WRT: ' + [dbo].[SQLXL_3SD](i.ops_total_write_CNT,N'I')
                       , N'OPS: Lo RDS/WRT & '
                       + IIF((1.0 * i.ops_total_write_CNT / a.ops_total_write_CNT) < 0.000001
                            ,N'Lo WRT (BI48)'
                            ,N'Hi WRT (BI48)')
                       + N' RDS ' + [dbo].[SQLXL_3SD](i.ops_total_read_CNT,N'I')
                       + N' WRT ' + [dbo].[SQLXL_3SD](i.ops_total_write_CNT,N'I')
                       + N' (' + [dbo].[SQLXL_3SD](i.ops_read_to_write_RAT,N'N') + N'x)'
                       )
/*** LOCAL TESTING ***
SELECT *
--*/
  FROM (--
        SELECT rec_type
              ,database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
              ,ops_total_read_CNT
              ,ops_total_write_CNT
              ,ops_read_to_write_RAT
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type           IN (N'I')                  -- index level composite record
           AND ops_total_write_CNT > 0
           AND ops_read_to_write_RAT BETWEEN 0.0 AND 4.0
       ) AS i
 CROSS
  JOIN (-- get instance total operational write count
        SELECT ops_total_write_CNT
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type            = N'A' -- instance level composite record
           AND ops_total_write_CNT > 0
       ) AS a
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - LO Operations Reads to Writes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Usage Writes but no/low reads - Index
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
-- Diagnostic - Index - Usage - No reads, High % writes (BI22)
-- Diagnostic - Index - Usage - No reads, Low % writes (BI29)
-- Diagnostic - Index - Usage - High Writes to Read ratio - High % writes (BI48)
-- Diagnostic - Index - Usage - High Writes to Read ratio - Low % writes (BI48)
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = IIF(i.ius_user_read_CNT = 0
                       , N'USG: No RDS and '
                       + IIF((1.0 * i.ius_user_updates_CNT / a.ius_user_updates_CNT) < 0.000001
                            ,N'Lo WRT (BI29) - '
                            ,N'Hi WRT (BI22) - ')
                       + N' WRT: ' + [dbo].[SQLXL_3SD](i.ius_user_updates_CNT,N'I')
                       , N'USG: Lo RDS/WRT & '
                       + IIF((1.0 * i.ius_user_updates_CNT / a.ius_user_updates_CNT) < 0.000001
                            ,N'Lo WRT (BI48)'
                            ,N'Hi WRT (BI48)')
                       + N' RDS '  + [dbo].[SQLXL_3SD](i.ius_user_read_CNT,N'I')
                       + N' WRT ' + [dbo].[SQLXL_3SD](i.ius_user_updates_CNT,N'I')
                       + N' (' + [dbo].[SQLXL_3SD](i.ius_read_to_write_RAT,N'N') + N'x)'
                       )
/*** LOCAL TESTING ***
SELECT *
--*/
   FROM (--
         SELECT rec_type
              ,database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
              ,ius_user_read_CNT
              ,ius_user_updates_CNT
              ,ius_read_to_write_RAT
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type             = N'I'                   -- index level composite record
           AND ius_user_updates_CNT > 0
           AND ius_read_to_write_RAT BETWEEN 0.0 AND 4.0
       ) AS i
 CROSS
 JOIN (-- instance record and has non-zero usage updates
       SELECT ius_user_updates_CNT
         FROM [##SQLXL_Index_Compilation]
        WHERE rec_type             = N'A' -- instance level composite record
          AND ius_user_updates_cnt > 0
      ) AS a
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - LO Usage Reads to Writes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Index -
-- row locks not supported on columnstore indexes
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters
-- Diagnostic - Index - row locks not allowed
-- Diagnostic - Index - page locks not allowed
 CASE WHEN (   (    i.allow_row_locks = 0 -- locks not allowed. value for non-indexes is NULL
                AND i.type       NOT IN (N'5' -- clustered columnstore
                                        ,N'6' -- nonclustered columnstore index
                                        )
               )
            OR i.allow_page_locks    = 0 -- locks not allowed. value for non-indexes is NULL
           )
       AND i.tbl_is_memory_optimized = 0 -- memory optimized uses Row Versions
       AND i.type                   <> N'5'       -- clustered columnstore
       AND i.obj_type_short_label  NOT IN (N'HST' -- Not a History/archive table
                                          ,N'IT'  -- Not a system internal table
                                          )
      THEN  NCHAR(167) + N'Locks not allowed - '
          + STUFF( IIF(i.allow_page_locks = 0,N', Page',N'')
                 + IIF(    i.allow_row_locks = 0 -- locks not allowed. value for non-indexes is NULL
                       AND i.type       NOT IN (N'5' -- row locks not supported on clustered columnstore
                                               ,N'6' -- row locks not supported on nonclustered columnstore index
                                               )
                      ,N', Row' ,N'')
                 ,1,2,N'')
      ELSE N''
 END  -- CASE WHEN (   (    i.allow_row_locks = 0

-- Diagnostic - Index - Created by Auto Tuning
     + IIF(i.auto_created = 1,N'Index created by auto tuning',N'')

-- Diagnostic - Index - partition not match table partition (BI65)
-- Diagnostic - Index - table partitioned, index isn't
+IIF(COALESCE(i.partition_function_name,N'NONE') <> COALESCE(p.partition_function_name,N'NONE')
    ,IIF(i.partition_function_name IS NULL
        , NCHAR(167) + N'Index not partitioned, table is - '
                    + QUOTENAME(COALESCE(p.partition_function_name,N'NOT PARTITIONED'))
                    + N' (BI65)'
        , NCHAR(167) + N'Index Partition function does not match Table (BI65)'
        + NCHAR(167) + N'> IDX ' + QUOTENAME(COALESCE(i.partition_function_name,N'NOT PARTITIONED'))
                    + N' TBL '  + QUOTENAME(COALESCE(p.partition_function_name,N'NOT PARTITIONED'))
        )
    ,N'')

------------------------------------------------------------
,1,1,N'')
  FROM (--  All non-internal "index" records
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type              = N'I'                                    -- index level composite record
           AND type IN (N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')              -- not a Foreign Key or Missing Index
           AND obj_type_short_label <> N'IT'                                   -- Not a system internal table
       ) AS i
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Constraints on index NOT ENFORCED
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type = N'I'                                       -- index level composite record
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = N'Constraint ' + QUOTENAME(kc.name) + N' NOT ENFORCED'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN [##SQLXL_Index_sys_objects] AS kc
    ON i.database_id           = kc.database_id
   AND i.parent_object_id      = kc.parent_object_id
   AND i.object_id             = kc.object_id
   AND CAST(i.index_id AS INT) = kc.key_unique_index_id
   AND 0                       = kc.is_enforced
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Constraints NOT ENFORCED'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- NOTE: Filtered indexes - included in Information 8 below
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters
/*** LOCAL TESTING ***
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters
--*/

-- Diagnostic - Index - fill factor - for all non-100% factors (BI40)
+IIF(   i.fill_factor         NOT IN (0,100)
     OR i.page_splits_to_write_PCT > 1.0
     OR i.page_merge_to_write_PCT  > 1.0
    ,NCHAR(167) + N'Fill ' + [dbo].[SQLXL_3SD](i.fill_factor,N'I') + N'%'
               + IIF(i.fill_factor NOT IN (0,100),N' (BI40)',N''),N'')

-- Diagnostic - Index - Padding - Fill_Factor < 100% and PADDING not enabled
    + IIF(i.fill_factor < 100 AND i.is_padded = 0
         ,N', Pad DISBLD'
         ,N'') -- Fill factor < 100, PADDING not enabled

-- Diagnostic - Index - Page Splits
    + IIF(i.ops_total_page_split_CNT > 0.0
         , N' Splits ' + [dbo].[SQLXL_3SD](i.ops_total_page_split_CNT,N'I')
         + N' (' + [dbo].[SQLXL_3SD](i.page_splits_to_write_PCT,N'N') + N'% INS+UPD)'
         , N'')

-- Diagnostic - Index - Page Merges
    + IIF(i.ops_total_page_merge_CNT > 0.0
         , N' Merges ' + [dbo].[SQLXL_3SD](i.ops_total_page_merge_CNT,N'I')
         + N' (' + [dbo].[SQLXL_3SD](i.page_merge_to_write_PCT,N'N') + N'% UPD+DEL)'
         , N'')
----------------------------------------
,1,1,N'')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Fill Factor, Splits, Merges'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Indexed column (key & include) constraints
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type       = N'I'                                 -- index level composite record
      ,ic.database_id
      ,ic.object_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
      ,diagnostic = IIF(cx.type = N'C',N'CHK',N'DEF')
                  + N' COL: ' + QUOTENAME(c.name)
                  + IIF(   cx.is_published        = 1
                        OR cx.is_schema_published = 1
                        OR cx.is_disabled         = 1
                        OR cx.is_not_trusted      = 1
                        OR cx.is_system_named     = 1
                       , NCHAR(167) + N'>'
                       + STUFF(-- trim off unneeded leading characters
-- Diagnostic - Index Column Constraint - is PUBLISHED
                                IIF(cx.is_published        = 1,N', Published',N'')
-- Diagnostic - Index Column Constraint - is SCHEMA PUBLISHED
                              + IIF(cx.is_schema_published = 1,N', Schema Published',N'')
-- Diagnostic - Index Column Constraint - is DISABLED
                              + IIF(cx.is_disabled         = 1,N', Disabled',N'')
-- Diagnostic - Index Column Constraint - is NOT TRUSTED
                              + IIF(cx.is_not_trusted      = 1,N', Not Trusted',N'')
-- Diagnostic - Index Column Constraint - is SYSTEM NAMED
                              + IIF(cx.is_system_named     = 1,N', System Named',N'')
                              ,1,1,N'')
                       ,N'')

-- Diagnostic - Index Column Constraint - table is Replicated, column has REPLICATION enabled
                  + IIF(    tbl.is_replicated         = 1
                        AND cx.is_not_for_replication = 0
                       ,NCHAR(167) + N'> Replicated - consider "NOT FOR REPLICATION"'
                       ,N'')

-- Diagnostic - Index Column constraint - uses non-database collation
                  + IIF(cx.uses_database_collation = 0,NCHAR(167) + N'> uses non-Database Collation',N'')

-- Diagnostic - Index Column constraint - references a procedure - can force serialization (BI94)
                  + IIF(cx.uses_sql_proc           = 1,NCHAR(167) + N'> references procedure - can force serialization (BI94)' ,N'')

-- Diagnostic - Index Column constraint - references a function - can force serialization (BI94)
                  + IIF(cx.uses_sql_ftn            = 1,NCHAR(167) + N'> references function - can force serialization (BI94)'  ,N'')

-- Diagnostic - Index Column constraint - references a SQL method - can force serialization (BI94)
                  + IIF(cx.uses_sql_mthd           = 1,NCHAR(167) + N'> references SQL method - can force serialization (BI94)',N'')

/*** LOCAL TESTING
SELECT cx.database_id,cx.parent_object_id,cx.object_id,cx.parent_column_id,ic.object_id,c.object_id,c.column_id
--*/
  FROM (-- List of default & check constraints
        SELECT *
          FROM [##SQLXL_Index_sys_objects]
         WHERE type            IN (N'C' -- check constraint
                                  ,N'D' -- default constraint
                                  )
           AND parent_column_id > 0     -- column constraints only
       ) AS cx
  JOIN [##SQLXL_Index_sys_index_columns] AS ic  -- only get constraints on index columns
    ON cx.database_id      = ic.database_id
   AND cx.parent_object_id = ic.object_id
   AND cx.parent_column_id = ic.column_id
  JOIN [##SQLXL_Index_column]            AS c
    ON cx.database_id      = c.database_id
   AND cx.parent_object_id = c.object_id
   AND cx.parent_column_id = c.column_id
  JOIN [##SQLXL_Index_sys_objects]       AS tbl -- check if table is replicated
    ON cx.database_id      = tbl.database_id
   AND cx.parent_object_id = tbl.object_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Constraints'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Diagnostic - Index - computed column references a procedure - can force serialization (BI99)
-- Diagnostic - Index - computed column references a function - can force serialization (BI99)
-- Diagnostic - Index - computed column references a SQL method - can force serialization (BI99)
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                                     -- index level composite record
      ,ic.database_id
      ,ic.object_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
      ,diagnostic = N'Computed Column '
                  + NCHAR(167) + N'> ' + QUOTENAME(c.name)
                  + IIF(c.uses_sql_proc = 1,NCHAR(167) + N'> references a procedure - can force serialization (BI99)' ,N'')
                  + IIF(c.uses_sql_ftn  = 1,NCHAR(167) + N'> references a function - can force serialization (BI99)' ,N'')
                  + IIF(c.uses_sql_mthd = 1,NCHAR(167) + N'> references a SQL method - can force serialization (BI99)',N'')
  FROM [##SQLXL_Index_sys_index_columns] AS ic
  JOIN [##SQLXL_Index_sys_columns]       AS c
    ON ic.database_id = c.database_id
   AND ic.object_id   = c.object_id
   AND ic.column_id   = c.column_id
 WHERE c.uses_sql_proc    = 1
    OR c.uses_sql_ftn     = 1
    OR c.uses_sql_mthd    = 1
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Computed columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

------------------------------------------------------------------------------------------
-- DATES - last Read, last IUD (INSERT UPDATE DELETE), object change
------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic =
-- Diagnostic - Table - Days since Last Read
-- Diagnostic - Table - Days since Last Write
-- Diagnostic - Table - Not used since last usage data reset
-- Diagnostic - FKC - no usage history for Foreign Key Constraints
-- Diagnostic - TVF - no usage history for table valued functions
-- Diagnostic - View - no usage history for views
+ CASE WHEN i.ius_last_read_days_ago  IS NULL
        AND i.ius_last_write_days_ago IS NULL
       THEN  N'Usage dates N/A'
           + CASE WHEN i.tbl_is_memory_optimized = 1  THEN N' - In Memory'      ELSE N'' END
           + CASE WHEN i.type = N'S'        -- system table
                  THEN N' - Internal Table'
                  ELSE N''
             END
           + CASE WHEN i.type NOT IN (N'0'  -- rowstore heap
                                     ,N'1'  -- clustered rowstore index
                                     ,N'2'  -- nonclustered rowstore index
                                     ,N'U'  -- User Table
                                     )
                  THEN N' ' + i.type_desc
                  ELSE N''
             END
-- Diagnostic - Index - Usage Last Read Days Ago
       ELSE  N'Last Usage Read: '
           + CASE WHEN i.ius_last_read_days_ago BETWEEN 0 AND 999998
                  THEN CONVERT(NVARCHAR(20),i.ius_last_read_days_ago) + N' days ago'
                  ELSE N'NONE'
             END
-- Diagnostic - Index - Usage Last Write days Ago
           + N' Write: '
           + CASE WHEN i.ius_last_write_days_ago BETWEEN 0 AND 999998
                  THEN CONVERT(NVARCHAR(20),i.ius_last_write_days_ago) + N' days ago'
                  ELSE N'NONE'
             END
-- Diagnostic - Object - Changed within last 90 days
           + CASE WHEN i.rec_type NOT IN (N'A' -- instance level composite record
                                         ,N'D' -- database level composite record
                                         ,N'I' -- index level composite record
                                         )
                   AND DATEDIFF(DAY,o.modify_date,sis.collection_DTTM) <= 90
                  THEN  N' Modified ' + CONVERT(NVARCHAR(11),o.modify_date,2) + N' (BI67)'
                  ELSE N''
             END
-- Diagnostic - Object - Creation Date
           + CASE WHEN i.rec_type NOT IN (N'A' -- instance level composite record
                                         ,N'D' -- database level composite record
                                         ,N'I' -- index level composite record
                                         )
                   AND DATEDIFF(DAY,o.create_date,o.modify_date) > 0
                  THEN N' Created ' + CONVERT(NVARCHAR(11),o.create_date,2) + N' (BI66)'
                  ELSE N''
             END
  END  -- CASE WHEN i.ius_last_read_days_ago  IS NULL

-- Diagnostic - Index - High ratio of page locks to row locks
+IIF(    i.page_lock_to_row_lock_RAT < 1.0
     AND i.type NOT IN (N'5'  -- clustered columnstore
                       ,N'6'  -- nonclustered columnstore index
                       )
    ,NCHAR(167) + N'High ratio PAGE to ROW locks - '
               + [dbo].[SQLXL_3SD](100.0 * i.page_lock_to_row_lock_RAT,N'N') + N'x'
    ,N'')
/*** LOCAL TESTING ***
SELECT COUNT(1)
--*/
  FROM [##SQLXL_Index_Startup]     AS sis
 CROSS
  JOIN [##SQLXL_Index_Compilation] AS i
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS o
    ON i.database_id = o.database_id
   AND i.object_id   = o.object_id
 WHERE i.rec_type NOT IN (N'A' -- instance level composite record
                         ,N'D' -- database level composite record
                         )
   AND i.type     NOT IN (N'F' -- foreign key constraint
                         ,N'V' -- View
                         )
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Last used, lock ratio'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Index Performance - Additional key DENSITY VECTOR
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
-- Diagnostic - Index - adding another key element doesn't make index much more selective
      ,diagnostic  = low_selectivity_additional_keys
  FROM [##SQLXL_Index_Compilation]
 WHERE low_selectivity_additional_keys IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - key density vector'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Index Performance - Stats Properties
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic  =
-- Diagnostic - Index Stats - No statistics found on index / index type
-- Diagnostic - Index Stats - No Statistics - is InMemory table
  N'Stats: '
+ IIF(i.stathdr_Updated IS NULL
     , N'None found'
     + IIF(tbl_is_memory_optimized = 1,N' - In Memory (BI73)',N'')
     + N' - Type '
     + QUOTENAME(i.type_desc + CASE i.type_desc
                                    WHEN N'0' THEN N' ROWSTORE' -- rowstore heap
                                    WHEN N'1' THEN N' ROWSTORE' -- clustered rowstore index
                                    WHEN N'2' THEN N' ROWSTORE' -- nonclustered rowstore index
                                    ELSE N''
                               END)
     + CASE i.type
            WHEN N'3'  THEN N' (BI60)' -- XML index
            WHEN N'4'  THEN N' (BI62)' -- Spatial index
            WHEN N'5'  THEN N' (BI61)' -- Clustered columnstore
            WHEN N'6'  THEN N' (BI61)' -- NonClustered columnstore
            ELSE N''
       END
-- Diagnostic - Index Stats - Percent of table sampled
   ,COALESCE( [dbo].[SQLXL_3SD](i.stathdr_Statistics_age_days,N'I') + N' days old (BI90)'
            + IIF(i.stathdr_Rows_CNT > 0
                 ,N' on ' + [dbo].[SQLXL_3SD](1.0 * i.stathdr_Rows_sampled_CNT / i.stathdr_Rows_CNT,N'%')
                 ,N'NO '
                 )
            + N' rows (BI91)'
            ,N'')
-- Diagnostic - Index Stats - Default statistics sampling rate
-- Diagnostic - Index Stats - Persisted statistics sampling rate >= 2016 SP1 CU4 and SQL Server 2017 CU1
   + N', Persisted sample '
   + IIF(i.stats_has_persisted_sample = 0
        ,N'DEFAULT' + IIF(   sis.ProductMajorVersion      >= 14   -- SQL 2017+
                          -----------------------------------------------------------------------------
                          OR (    sis.ProductMajorVersion  = 13   -- SQL 2016 SP1
                              AND sis.ProductBuild >= 4446 -- SQL 2016 SP1 CU4+
                             )
                         ,N' - Persisting Allowed 2016SP1+'
                         ,N'')
        ,CAST(i.stathdr_Persisted_Sample_Percent AS NVARCHAR(20))+ N'%'
        )
    )

+ IIF(i.stathdr_Updated IS NULL
     ,N''
-- Diagnostic - Index Stats - Index Histogram Buckets count
     , NCHAR(167)
     + N'> Histogram Steps ' -- extra space added to make 2nd column in cell align
     + IIF(i.stathdr_steps IS NULL,N'N/A',[dbo].[SQLXL_3SD](i.stathdr_steps,N'I'))
     ------------------------------------------------------------------------------
-- Diagnostic - Index Stats - Index Parameter Sniffing Ratio > 1
     + IIF(i.stathist_param_sniff IS NOT NULL
          ,N', Parameter sniffing ' + [dbo].[SQLXL_3SD](i.stathist_param_sniff,N'N') + N'x'
          ,N'')
     + CASE WHEN i.Lead_Element_is_Identity = 1
            THEN N' - IDENTITY'
            WHEN i.Lead_Element_is_Sequence = 1
            THEN N' - SEQUENCE'
            WHEN i.Lead_Element_is_newsequentialid = 1
            THEN N' - SEQUID'
            WHEN i.Lead_Element_is_newid = 1
            THEN N' - GUID'
            ELSE N''
       END
     ------------------------------------------------------------------------------
-- Diagnostic - Index Stats - Index first element Nullable & NULL row count
     + IIF(i.Lead_Element_is_Nullable = 1 OR i.stathist_null_rows > 0
          , N', Null Rows '
          + [dbo].[SQLXL_3SD](i.stathist_null_rows,N'I')
          + N' (' + IIF(i.stathdr_Rows_CNT > 0
                       ,[dbo].[SQLXL_3SD](1.0 * i.stathist_null_rows / i.stathdr_Rows_CNT,N'%')
                       ,IIF(i.stathist_null_rows = 0,N'0.00%',N'N/A')
                       )
          + N')'
          ,N', Not nullable')
     )

+ IIF(i.stathdr_Updated IS NULL
     ,N''
-- Diagnostic - Index Stats - statistics rowcount delta from index record count
     , NCHAR(167)
     + N'> Row Delta '
     + CASE WHEN i.row_CNT = i.stathdr_Rows_CNT
            THEN N'[none]'
            WHEN i.row_CNT          > 0
             AND i.stathdr_Rows_CNT > 0
            THEN  [dbo].[SQLXL_3SD](1.0 * ABS(i.row_CNT - i.stathdr_Rows_CNT) / i.row_CNT,N'%')
                + N' ('
                + [dbo].[SQLXL_3SD](i.row_CNT,N'I') + N'/' + [dbo].[SQLXL_3SD](i.stathdr_Rows_CNT,N'I')
                + N')'
            ELSE STUFF( IIF(i.row_CNT = 0         ,N' [table empty]',N'')
                      + IIF(i.stathdr_Rows_CNT = 0,N' [stats empty]',N'')
                      ,1,1,N'')
       END
-- Diagnostic - Index Stats - stats modifications
     + N' Mod Pct '
     + IIF(i.Stats_Prop_modification_CNT = 0
          ,N'[none]'
          ,IIF(i.stathdr_Rows_CNT > 0
              , [dbo].[SQLXL_3SD](COALESCE(100.0 * i.Stats_Prop_modification_CNT / i.stathdr_Rows_CNT,0),N'N') + N'%'
              + N' ('
              + [dbo].[SQLXL_3SD](COALESCE(i.Stats_Prop_modification_CNT,0),N'I')
              + N'/'
              + [dbo].[SQLXL_3SD](COALESCE(i.stathdr_Rows_CNT,0),N'I')
              + N')'
              ,N''
              )
          )
     + IIF(i.stats_no_recompute = 1
-- Diagnostic - Index Stats - Stats NoRecompute enabled
          ,N', NoRecompute [ENABLED] (BI92)'
-- Diagnostic - Index Stats - consider enabling Stats NoRecompute
          ,IIF(100.0 * i.Stats_Prop_modification_CNT / i.stathdr_Rows_CNT > 10.0
              ,N', Consider enabling NoRecompute'
              ,N''
              )
          )
      )

+ IIF(   i.stats_auto_created      = 1
      OR i.stats_has_filter        = 1
      OR i.stats_is_temporary      = 1
      OR i.stats_is_incremental    = 1
      OR i.stats_generation_method > 0
      OR i.lead_element_data_type LIKE N'%CHAR%'
      OR i.lead_element_data_type LIKE N'%TEXT%'
      -- NOTE: stats_no_recompute handled above
     , NCHAR(167)
     + N'> '
     + STUFF(-- Strip off leading unnecessary characters
-- Diagnostic - Index Stats - Auto Created
              IIF(i.stats_auto_created = 1,N', Auto created',N'')
-- Diagnostic - Index Stats - Has filter
            + IIF(i.stats_has_filter   = 1
                 , N', Filtered - '
                 + IIF(i.stathdr_Unfiltered_Rows > 0
                      ,[dbo].[SQLXL_3SD](1.0 * i.stathdr_Rows_CNT / i.stathdr_Unfiltered_Rows,N'%') + N' rows'
                      ,N'no stats rows')
                 ,N'')
-- Diagnostic - Index Stats - temporary - on READ ONLY secondary
            + IIF(i.stats_is_temporary   = 1,N', temporary stats - on READ ONLY secondary',N'')
-- Diagnostic - Index Stats - Incremental statistics update enabled
-- Diagnostic - Index Stats - Partitioned Index & Incremental stats NOT ENABLED
            + IIF(i.stats_is_incremental = 1
                 ,N', Incremental Update [ENABLED]'
                 ,IIF(    i.partition_function_ID > 0
                      AND (        sis.ProductMajorVersion  >= 14   -- 2017+
                           OR (    sis.ProductMajorVersion   = 13   -- 2016 SP1 13.0.4001.0
                               AND sis.ProductBuild  >= 4001
                              )
                           OR (    sis.ProductMajorVersion  = 12   -- 2014 SP2 12.0.5000.0
                               AND sis.ProductBuild >= 5000
                              )
                          )
                     ,N', Partitioned & Incremental update [NOT ENABLED]'
                     ,N'')
                 )
-- Diagnostic - Index Stats - Generated by other than sort-based method
            + IIF(i.stats_generation_method > 0
                 ,N', generated by ' +i.stats_generation_method_desc
                 ,N'')
-- Diagnostic - Index Stats - Lead key STRING, STRING INDEX statistics not created
            + IIF(   i.lead_element_data_type LIKE N'%CHAR%'
                  OR i.lead_element_data_type LIKE N'%TEXT%'
                 ,IIF(i.stathdr_String_Index = N'YES'
                     ,N', String summary statistics created'
                     ,N', NO string summary statistics')
                 ,N'')
            ,1,2,N'') -- STUFF
     ,N'')

  FROM [##SQLXL_Index_Startup]     AS sis
 CROSS
  JOIN [##SQLXL_Index_Compilation] AS i
 WHERE i.rec_type              = N'I'                       -- index level composite record
   AND i.type IN (N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90') -- True index types only
   AND NOT i.obj_type_short_label = N'TVF'                  -- SQL table-valued-function SQL 2012+
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - statistics - properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Diagnostic - Index - no statistics found for index Keys, Missing Index keys, foreign key columns
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT N'I'                                                 -- index level composite record
      ,ic.database_id
      ,cp.parent_object_id
      ,cp.object_id
      ,cp.index_id
      ,cp.type
      ,diagnostics = N'No column stats for ' + QUOTENAME(c.name)
  FROM (-- Index & Missing Index key columns
        SELECT ic.database_id
              ,parent_object_id = ic.object_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,obj_type = N'U' -- User Table
              ,ic.column_id
              ,ic.key_column_sequence -- note: actual order as captured by SSMS "Index Properties"
          FROM [##SQLXL_Index_sys_index_columns] AS ic
         WHERE ic.type IN (N'1' -- clustered rowstore index
                          ,N'2' -- nonclustered rowstore index
                          ,N'M' -- missing nonclustered rowstore index
                          )
           AND ic.is_included_column = 0
        -- Foreign key columns
        UNION ALL
        SELECT fkc.database_id
              ,fk.parent_object_id
              ,object_id = fkc.constraint_object_id
              ,index_id  = fkc.constraint_object_id
              ,type      = N'F'                     -- foreign key constraint
              ,obj_type  = N'F'                     -- foreign key constraint
              ,column_id = fkc.parent_column_id
              ,fkc.constraint_column_id
          FROM [##SQLXL_Index_sys_foreign_key_columns] AS fkc
          JOIN [##SQLXL_Index_sys_objects]             AS fk
            ON fkc.database_id          = fk.database_id
           AND fkc.constraint_object_id = fk.object_id
       ) AS ic
  LEFT OUTER
  JOIN [##SQLXL_Index_column]      AS c
    ON ic.database_id      = c.database_id
   AND ic.parent_object_id = c.object_id
   AND ic.column_id        = c.Column_ID
  JOIN [##SQLXL_Index_Compilation] AS cp
    ON N'I'           = cp.rec_type             -- -- index level composite record
   AND N'TBL'         = cp.obj_type_short_label -- only get user indexes from [##SQLXL_Index_Compilation] - no history or internal tables
   AND ic.database_id = cp.database_ID
   AND ic.obj_type    = cp.obj_type
   AND ic.object_id   = cp.object_id
   AND ic.index_id    = cp.index_ID
   AND ic.type        = cp.type
 WHERE 1 = 1
   AND c.Uniqueness IS NULL
 ORDER BY
       ic.key_column_sequence; -- order results by column location in the index or foreign key

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - no statistics found for Keys & Missing Index columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Index Information. Skipping is_primary_key,is_unique_constraint since covered later
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters

-- Diagnostic - Index - Covers Foreign Key(s)
 IIF(i.covered_fkc_IDs IS NOT NULL,NCHAR(167) + N'Covers Foreign Key(s) ' +i.covered_fkc_IDs,N'')

-- Diagnostic - Index - is partitioned & partitioning column (BI64)
+IIF(i.ios_partition_CNT > 1 OR i.partition_column_ID > 0
    ,NCHAR(167) + N'Partitioned on ' + QUOTENAME(COALESCE(i.partition_column_name,N'PART COL NOT FOUND')) + N' - '
               + COALESCE(CAST(i.partition_CNT AS NVARCHAR(20)),N'PART CNT NOT FOUND')
               + N' partitions (BI64)'
    ,N'')

-- Diagnostic - Index - Used by Change Data Capture
+IIF(i.name = i.cdc_index_name,NCHAR(167) + N'Used by Change Data Capture (CDC) on this table',N'')

-- system named objects. some objects (CK,DF,EC,FK,PK,AO,UQ) escape getting flagged
-- Diagnostic - Index - System named
+IIF(i.is_system_named = 1,NCHAR(167) + N'System named',N'')

-- Diagnostic - Index - Created by Database Tuning Advisor (DTA)
+IIF(CHARINDEX(N'_DTA_',i.name) > 0,NCHAR(167) + N'Created through Database Tuning Advisor (DTA)',N'')

-----------------------------------------------------
-- Diagnostic - Index - Clustered Rowstore - More than 3 Key columns or more than 16 bytes (BI24)
-- Diagnostic - Index - Nonclustered Rowstore - More than 4 Key columns or more than 16 bytes (BI23)
+IIF(    i.type IN (N'1' -- clustered rowstore index
                   ,N'2' -- nonclustered rowstore index
                   )
     AND i.obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                       ,N'IT'  -- Not a system internal table
                                       )
     AND (   COALESCE(i.stathdr_Average_Key_Length,i.key_total_datatype_length_bytes) > 16
          OR (   (    i.type            = N'1' -- clustered rowstore index
                  AND i.Key_Columns_CNT > 3
                 )
              OR (    i.type            = N'2' -- nonclustered rowstore index
                  AND i.Key_Columns_CNT > 4
                 )
             )
         )
   ,NCHAR(167) + N'Big key: '
              + IIF(i.stathdr_Average_Key_Length > 0
                   ,CAST(i.stathdr_Average_Key_Length      AS NVARCHAR(20)) + N' Avg Stats Len bytes'
                   ,CAST(i.key_total_datatype_length_bytes AS NVARCHAR(20)) + N' Col Len bytes'
                   ) + N' (BI24)'
              + N' In ' + CAST(i.Key_Columns_CNT AS NVARCHAR(20)) + N' cols'
              + IIF(i.type <> N'1' -- clustered rowstore index
                   ,N' excl CX'
                   ,N'')
              + N' (BI23)'
    ,N'')
-----------------------------------------------------
-- Diagnostic - Index - Candidate Clustering key for HEAP
+IIF(    i.type                    = N'0' -- rowstore heap
     AND i.tbl_is_memory_optimized = 0
     AND c.[Column Descriptors]   IS NOT NULL
    ,NCHAR(167) + N'Candidate Clustering key' + NCHAR(167) + N'> ' + c.[Column Descriptors]
    ,N'')

-----------------------------------------------------
,1,1,N'')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i -- index level composite record
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS o
    ON i.database_id = o.database_id
   AND i.object_id   = o.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_ShowStatistics_StatHeader] AS sssh
    ON i.database_id = sssh.database_id
   AND i.object_id   = sssh.object_id
   AND i.index_id    = sssh.index_id
  LEFT OUTER
  JOIN [##SQLXL_Index_column]      AS c
    ON i.database_id = c.database_id
   AND i.object_id   = c.object_id
   AND COALESCE(i.tbl_cx_uniq_ordered_column_ID
               ,i.tbl_possible_uniq_column_id  ) = c.column_id
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - additional properties 2'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Index Synergies - Foreign Key synergies omitted since already represented by "index covers FKC"
-- and "FKC covered by index"
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                                    -- index level composite record
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
-- Diagnostic - Index - Synergies found between indexes, missing indexes, and Foreign Key Constraints (BI1&2)
      ,diagnostic = N'Synergy -'
                  + STUFF( IIF(i.synergy_s > 0,N', Sequence (BI1&2)',N'')
                         + IIF(i.synergy_o > 0,N', Overlap'         ,N'')
                         + IIF(i.synergy_k > 0,N', Contained'       ,N'')
                        ,1,1,N'')
  FROM (--
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
              ,synergy_s = SUM(i.matching_sequence_CNT )
              ,synergy_o = SUM(i.matching_overlap_CNT  )
              ,synergy_k = SUM(i.matching_contained_CNT)
          FROM (--
                SELECT database_id
                      ,parent_object_id
                      ,object_id = l_object_id
                      ,index_id  = l_index_id
                      ,type      = l_type
                      ,matching_sequence_CNT  = IIF(i.matching_sequence_CNT  > 0 AND LEFT(i.matching_sequence_COL,1) = N'S',1,0)
                      ,matching_overlap_CNT   = IIF(i.matching_overlap_CNT   > 0 AND matching_overlap_COL  > N'',1,0)
                      ,matching_contained_CNT = IIF(i.matching_contained_CNT > 0 AND matching_contained_COL> N'',1,0)
                  FROM [##SQLXL_Index_Synergies] AS i
                 WHERE i.l_type <> N'F' -- foreign key constraint
                   AND i.r_type <> N'F' -- foreign key constraint
                   AND (  COALESCE(i.matching_sequence_CNT ,0)
                        + COALESCE(i.matching_overlap_CNT  ,0)
                        + COALESCE(i.matching_contained_CNT,0)
                       )> 0

                UNION
                SELECT database_id
                      ,parent_object_id
                      ,object_id = r_object_id
                      ,index_id  = r_index_id
                      ,type      = r_type
                      ,matching_sequence_CNT  = IIF(i.matching_sequence_CNT  > 0 AND LEFT(i.matching_sequence_COL,1) = N'S',1,0)
                      ,matching_overlap_CNT   = IIF(i.matching_overlap_CNT   > 0 AND matching_overlap_COL   > N'',1,0)
                      ,matching_contained_CNT = IIF(i.matching_contained_CNT > 0 AND matching_contained_COL > N'',1,0)
                  FROM [##SQLXL_Index_Synergies] AS i
                 WHERE i.l_type <> N'F' -- foreign key constraint
                   AND i.r_type <> N'F' -- foreign key constraint
                   AND (  COALESCE(i.matching_sequence_CNT ,0)
                        + COALESCE(i.matching_overlap_CNT  ,0)
                        + COALESCE(i.matching_contained_CNT,0)
                       )> 0
               ) AS i
         GROUP BY
               database_id,parent_object_id,object_id,index_id,type
       ) AS i
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - synergies'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Hi percent Scans to Reads, > 1/1000 "all" reads - NOTE: No InMemory since all non-hash reads are scans
-- <FUTURE> add record size/pages to computation
-- <FUTURE> link with uniqueness/selectivity to suggest adding keys
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic =
        N'Hi Scan %IDX RDS - '
      + LTRIM( N' USG: ' + [dbo].[SQLXL_3SD](COALESCE(i.ius_user_scans_CNT,0),N'I')
             + N' ('     + [dbo].[SQLXL_3SD](COALESCE(i.ius_scans_to_read_PCT,0),N'N') + N'%)'
             + N' OPS: ' + [dbo].[SQLXL_3SD](COALESCE(i.ops_total_scan_CNT,0),N'I')
             + N' ('     + [dbo].[SQLXL_3SD](COALESCE(i.ops_scans_to_read_PCT,0),N'N') + N'%)'
             + N' (BI80)'
             )
-- Diagnostic - Index - Clustered Rowstore index - lots of range scans (> 10%)
      + IIF(    i.obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                              ,N'IT'  -- Not a system internal table
                                              )
            AND i.type = N'1'           -- clustered rowstore index
           ,N'. CX - add more indexes?'
           ,N'')
  FROM [##SQLXL_Index_Compilation] AS i
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'A') AS a -- instance level composite record
 WHERE i.rec_type = N'I'   -- index level composite record
   AND i.type NOT IN (N'5' -- clustered columnstore
                     ,N'6' -- nonclustered columnstore index
                     )
   AND NOT (    i.tbl_is_memory_optimized = 1
            AND i.type                    = N'0' -- rowstore heap
           )
   AND (   i.ius_scans_to_read_PCT  > 5.0
        OR i.ops_scans_to_read_PCT  > 5.0
       )
   AND (   IIF(a.ius_user_read_CNT  > 0,100.0 * i.ius_user_scans_CNT / a.ius_user_read_CNT ,0) > 0.001 -- > 1/1000 of all read activity
        OR IIF(a.ops_total_read_CNT > 0,100.0 * i.ops_total_scan_CNT / a.ops_total_read_CNT,0) > 0.001 -- > 1/1000 of all read activity
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - scans to read ratio'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - High (> 25X) Ratio histogram bucket count Hi to low - candidate for parameter sniffing
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                                    -- index level composite record
      ,ic.database_id
      ,ic.object_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
      ,diagnostic =
 N'Parameter sniffing candidate - Range '
+ [dbo].[SQLXL_3SD](ssh.param_sniff,N'N')
+ N'x for Key '
+ CAST(ic.key_column_sequence AS NVARCHAR(20))
  FROM [##SQLXL_Index_sys_index_columns]                    AS ic
  JOIN [##SQLXL_Index_sys_ShowStatistics_Histogram_summary] AS ssh
    ON ic.database_id = ssh.database_id
   AND ic.object_id   = ssh.object_id
   AND ic.index_id    = ssh.index_id
 WHERE ic.key_column_sequence = 1
   AND ssh.param_sniff        > 25
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - parameter sniffing'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Possible UNIQUEIDENTIFIER not stored as UID data type - name or %char data length (16,29,22,32,36,38,68)
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                                    -- index level composite record
      ,ic.database_id
      ,ic.object_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
-- Diagnostic - Table - has what looks like a GUID stored as something else
      ,diagnostic = IIF(ic.is_included_column = 0,N'Key ',N'')
                  + N'Column ' + QUOTENAME(cx.name)
                  + NCHAR(167)
                  + N'> Possible UNIQUEID, type is ' + UPPER(cx.user_type_name)
                  + N'(' + IIF(cx.max_length = -1,N'MAX',CAST(cx.max_length AS NVARCHAR(4))) + N')'
  FROM [##SQLXL_Index_sys_index_columns] AS ic
  JOIN [##SQLXL_Index_sys_columns]       AS cx
    ON ic.database_id                          = cx.database_id
   AND ic.object_id                            = cx.object_id
   AND ic.column_id                            = cx.column_id
 WHERE cx.system_type_id NOT IN (36,104) -- N'uniqueidentifier',N'BIT'
   AND cx.user_type_name NOT LIKE N'%INT%'
   AND (   cx.name LIKE N'%IDENTIFIER%'
        OR cx.name LIKE N'%GUID%'        -- globally unique identifier
        OR cx.name LIKE N'%UUID%'        -- universally unique identifier
        OR (    cx.name LIKE N'%ID%'
            AND cx.user_type_name LIKE N'%CHAR'
            AND COALESCE(cx.max_length_unicode,cx.max_length)
             IN (16 -- ASCII256 encoded
                ,20 -- ASCII85 encoded
                ,22 -- Base64 encoded
                ,32 -- Readable, no dashes or braces/parentheses
                ,36 -- Readable, dashes no braces/parentheses
                ,38 -- Readable, dashes and braces/parettheses
                ,68 -- Dot.Net ToString "X" format - Four braced hex values, 4th value is subset of 8 braced hex values
                )
           )
       )
   AND cx.name NOT LIKE N'%_IDENTIFIER'
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - UNIQUEIDENTIFIER not stored as UNIQUEIDENTIFIER'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Filtered indexes
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                                    -- index level composite record
      ,i.database_id
      ,i.object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = N'Index Filtered: '
                  + STUFF(-- Strip off leading unnecessary characters
-- Diagnostic - index - has filter on lead key column
                         + IIF(ed.lead_key > 0,N' Lead Key',N'')

-- Diagnostic - index - has filter on non-lead key column
                         + IIF(ed.non_lead_key > 0
                              ,IIF(ed.lead_key > 0
                                  ,N', '
                                  ,N' ')
                              + CAST(ed.non_lead_key AS NVARCHAR(20)) + N' non-Lead Key(s)'
                              ,N'')

-- Diagnostic - index - has filter on included column
                         + IIF(ed.non_key > 0
                              ,IIF(ed.lead_key > 0 OR ed.non_lead_key > 0
                                  ,N', '
                                  ,N' ')
                              + CAST(ed.non_key AS NVARCHAR(20)) + N' Included column(s)'
                              ,N'')

-- Diagnostic - index - filtered on a column not in the index (BI34) - with column name(s)
                         + IIF(ed.non_index > 0
                              ,N', ' + CAST(ed.non_index    AS NVARCHAR(20)) + N' non-key column(s) (BI34) '
                                     + COALESCE((--
                                                 SELECT NCHAR(167) + N'> ' + QUOTENAME(c.name)
                                                   FROM [##SQLXL_Index_sys_sql_expression_dependencies] AS edc
                                                   LEFT OUTER
                                                   JOIN [##SQLXL_Index_sys_columns]       AS c
                                                     ON edc.database_id         = c.database_id
                                                    AND edc.referencing_id      = c.object_id
                                                    AND edc.referenced_minor_id = c.column_id
                                                   LEFT OUTER
                                                   JOIN [##SQLXL_Index_sys_index_columns] AS ic
                                                     ON edc.database_id          = ic.database_id
                                                    AND edc.referencing_id       = ic.object_id
                                                    AND edc.referencing_minor_id = ic.index_id
                                                    AND edc.referenced_minor_id  = ic.column_id
                                                  WHERE ed.non_index             > 0
                                                    AND ed.database_id           = edc.database_id
                                                    AND ed.object_id             = edc.referencing_id
                                                    AND ed.index_id              = edc.referencing_minor_id
                                                    AND 7                        = edc.referencing_class
                                                    AND 1                        = edc.referenced_class
                                                    AND ic.column_id            IS NULL
                                                    FOR XML PATH(N''), TYPE
                                                ).value('(./text())[1]',N'NVARCHAR(MAX)')
                                               ,NCHAR(167) + N'> Column not found')
                              ,N'')
                         ,1,1,N'')
  FROM (--
        SELECT database_id      = ed.database_id
              ,object_id        = ed.referencing_id
              ,index_id         = ed.referencing_minor_id
              ,lead_key         = SUM(IIF(ic.key_column_sequence = 1,1,0))
              ,non_lead_key     = SUM(IIF(ic.key_column_sequence > 1,1,0))
              ,non_key          = SUM(IIF(ic.is_included_column  = 1,1,0))
              ,non_index        = SUM(IIF(ic.column_id       IS NULL,1,0))
          FROM [##SQLXL_Index_sys_sql_expression_dependencies] AS ed
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_index_columns]               AS ic
            ON ed.database_id          = ic.database_id
           AND ed.referencing_id       = ic.object_id
           AND ed.referencing_minor_id = ic.index_id
           AND ed.referenced_minor_id  = ic.column_id
         WHERE ed.referencing_class    = 7
           AND ed.referenced_class     = 1
         GROUP BY
               ed.database_id
              ,ed.referencing_id
              ,ed.referencing_minor_id
       ) ed
  JOIN [##SQLXL_Index_sys_indexes] AS i
    ON ed.database_id           = i.database_id
   AND ed.object_id             = i.object_id
   AND ed.index_id              = i.index_id
   AND i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Filtered indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Capture Filtered Statistics on key columns (Index, Missing, FKC) NOT on an Index
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON; -- FOR XML PATH used below
--*/
BEGIN TRY
   DROP TABLE #key_column_filtered_statistics;
END TRY
BEGIN CATCH
END CATCH

SELECT x.database_id
      ,x.parent_object_id
      ,ic.object_id
      ,ic.column_id
      ,ic.index_id
      ,ic.type
      ,ic.key_column_sequence
      ,c.name
      ,cnt                  = COUNT(1)
      ,auto_created         = SUM(IIF(s.auto_created         = 1,1,0))
      ,no_recompute         = SUM(IIF(s.no_recompute         = 1,1,0))
      ,is_temporary         = SUM(IIF(s.is_temporary         = 1,1,0))
      ,is_incremental       = SUM(IIF(s.is_incremental       = 1,1,0))
      ,has_persisted_sample = SUM(IIF(s.has_persisted_sample = 1,1,0))
  INTO #key_column_filtered_statistics
  FROM (--
        SELECT database_id
              ,parent_object_id = object_id
              ,object_id
              ,stats_id
          FROM [##SQLXL_Index_sys_stats]
         WHERE has_filter = 1
        EXCEPT
        SELECT database_id
              ,parent_object_id = object_id
              ,object_id
              ,index_id
          FROM [##SQLXL_Index_sys_indexes]
         WHERE has_filter = 1
       ) AS x
  JOIN [##SQLXL_Index_sys_stats] AS s
    ON x.database_id            = s.database_id
   AND x.object_id              = s.object_id
   AND x.stats_id               = s.stats_id
  JOIN [##SQLXL_Index_sys_sql_expression_dependencies] AS sep
    ON s.database_id            = sep.database_id
   AND s.object_id              = sep.referencing_id
   AND s.stats_id               = sep.referencing_minor_id
   AND 9                        = sep.referencing_class
  JOIN (--
        SELECT database_id
              ,parent_object_id = object_id
              ,object_id
              ,index_id
              ,type
              ,column_id
              ,key_column_sequence
          FROM [##SQLXL_Index_sys_index_columns]
         WHERE is_included_column = 0
        UNION ALL
        SELECT database_id
              ,parent_object_id
              ,constraint_object_id
              ,constraint_object_id
              ,type = N'F'          -- foreign key constraint
              ,parent_column_id
              ,constraint_column_id
          FROM [##SQLXL_Index_sys_foreign_key_columns]
       ) AS ic
    ON x.database_id            = ic.database_id
   AND x.parent_object_id       = ic.parent_object_id
-- AND x.object_id              = ic.object_id -- Commented out since we're only looking for filters on Table columns
   AND sep.referenced_minor_id  = ic.column_id
  JOIN [##SQLXL_Index_sys_columns] AS c
    ON x.database_id            = c.database_id
   AND x.object_id              = c.object_id
   AND sep.referenced_minor_id  = c.column_id
 GROUP BY
       x.database_id
      ,x.parent_object_id
      ,ic.object_id
      ,ic.column_id
      ,ic.index_id
      ,ic.type
      ,ic.key_column_sequence
      ,c.name
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - create #key_column_filtered_statistics'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Statistics - Filtered Statistics on key columns (Index, Missing, FKC) NOT on an Index
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                                    -- index level composite record
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = N'Column Filtered Statistics (BI93)'
                  + COALESCE((SELECT  N' Key '
                                    + CAST(cfs.key_column_sequence AS NVARCHAR(20))
                                    + N': ' + [dbo].[SQLXL_3SD](cfs.cnt,N'I')
                                FROM #key_column_filtered_statistics AS cfs
                               WHERE i.database_id      = cfs.database_id
                                 AND i.parent_object_id = cfs.parent_object_id
                                 AND i.object_id        = cfs.object_id
                                 AND i.index_id         = cfs.index_id
                                 AND i.type             = cfs.type
                                 FOR XML PATH(N''), TYPE
                             ).value('(./text())[1]',N'NVARCHAR(MAX)')
                            ,NCHAR(167) + N'> Column not found')
  FROM (--
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
          FROM #key_column_filtered_statistics
         GROUP BY
               database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
       ) AS i
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Filtered Statistics on other columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Lead key 2-19 steps, hi parameter sniff (>25X), candidate for Filter
-- Diagnostic - Index - non-Lead key 2-19 steps, hi parameter sniff (>25X), candidate for Filter
-- Diagnostic - Index - BIT data type, candidate for Filter
-- Diagnostic - Index - name implies potential for filtering (BI33)
-- Diagnostic - Index - SPARSE column, potential for filtering
-- Diagnostic - Index - Ratio hi histogram bucket to low is HIGH, candidate for parameter sniffing
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                                    -- index level composite record
      ,ic.database_id
      ,ic.object_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
      ,diagnostic =
  N'Key ' + CAST(ic.key_column_sequence AS NVARCHAR(20)) + N':'

+ CASE WHEN c.data_type = N'BIT'
       THEN N' BIT,'
       WHEN c.is_sparse = 1
       THEN N' SPARSE,'
       WHEN c.histogram_steps BETWEEN 2 AND 19
        AND c.param_sniff          >= 25.0
       THEN N''
       WHEN ic.is_index_column_filtered = 1
       THEN N''
       ELSE N' named like filter, '
  END

+ CASE WHEN c.histogram_steps > 0
         OR i.stathdr_Steps   > 0
       THEN  N' '
           + CAST(IIF(i.stathdr_Steps > 0,i.stathdr_Steps,c.histogram_steps) AS NVARCHAR(20))
           + N' step(s)'
           + CASE WHEN i.stathist_param_sniff > 0
                    OR c.param_sniff          > 0
                  THEN  N', sniffs '
                      + [dbo].[SQLXL_3SD](IIF(ISNULL(i.stathist_param_sniff,0) > ISNULL(c.param_sniff,0)
                                                  ,i.stathist_param_sniff
                                                  ,c.param_sniff)
                                                  ,N'N') + N'x'
                  ELSE N', no sniff'
             END
       ELSE CASE WHEN i.tbl_is_empty = 1
                 THEN N' Empty'
                 ELSE N' No stats'
            END  -- CASE WHEN i.tbl_is_empty = 1
  END            -- CASE WHEN c.histogram_steps > 0

+ IIF(ic.is_index_column_filtered = 1,N', is filtered',N', add filter? (BI33)')

  FROM (-- All KEY index columns, candidates for filtered index
        SELECT database_id
              ,object_id
              ,index_id
              ,type
              ,key_column_sequence
              ,is_index_column_filtered
              ,column_id
          FROM [##SQLXL_Index_sys_index_columns]
         WHERE 1 = 1
           AND is_included_column = 0
           AND partition_ordinal  = 0
           AND type IN (N'2' -- Nonclustered rowstore index
                       ,N'F' -- foreign key
                       ,N'M' -- missing nonclustered rowstore index
                       )     -- excludes Clustered Rowstore, Clustered & NonClustered Columnstores, Spatial, Fulltext, XML
       ) AS ic
  JOIN [##SQLXL_Index_column] AS c
    ON ic.database_id = c.database_id
   AND ic.object_id   = c.object_id
   AND ic.Column_ID   = c.column_id
  JOIN (-- All "index" records
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'                     -- index level composite record
           AND obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                           ,N'IT'  -- Not a system internal table
                                           )
       ) AS i
    ON ic.database_id = i.database_id
   AND ic.object_id   = i.parent_object_id
   AND ic.object_id   = i.object_id
   AND ic.index_id    = i.index_id
   AND ic.type        = i.type
   AND 0              = i.is_primary_key
   AND 0              = i.is_unique_constraint
 WHERE 1 = 1
   AND (   (    c.histogram_steps BETWEEN 2 AND 19          -- only looking for filter opportunities
            AND c.param_sniff          >= 25.0              -- greater than 25 times rowcounts between high and low
            AND c.is_identity           = 0                 -- if IDENTITY ignore Stats Steps
            AND c.is_sequence           = 0                 -- if SEQUENCE ignore Stats Steps
            AND c.is_newsequentialid    = 0                 -- if NEWSEQUENTIALID ignore Stats Steps
            AND c.data_type      NOT LIKE N'%DATE%'         -- omit DATE/DATETIME
           )
        ------------------------------------------------------------------------------------------------------------------------------------
        OR N'bit'                    = c.data_type
        OR  c.is_sparse              = 1
        ------------------------------------------------------------------------------------------------------------------------------------
        OR  c.name LIKE N'is%'
        OR (c.name LIKE N'%archive%' AND c.data_type NOT LIKE N'%DATE%')
        OR  c.name LIKE N'%active%'
        OR  c.name LIKE N'%_band'
        OR  c.name LIKE N'%_band_%'
        OR  c.name LIKE N'%flag%'
        OR  c.name LIKE N'%status%'
        OR  c.name LIKE N'%_open%'
        ------------------------------------------------------------------------------------------------------------------------------------
        OR ic.is_index_column_filtered = 1
      )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - candidate filtered index keys'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Another key column has better lead uniqueness, does not cover foreign key
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                                    -- index level composite record
      ,xc.database_id
      ,xc.object_id
      ,xc.object_id
      ,xc.index_id
      ,xc.type
      ,diagnostic = N'Key ' + u.[Column Descriptors] + N' is more unique than key 1'
  FROM (--
        SELECT bc.database_id
              ,bc.object_id
              ,bc.index_id
              ,bc.type
              ,bc.column_id
          FROM (--
                SELECT u.database_id
                      ,u.object_id
                      ,u.index_id
                      ,u.type
                      ,u.key_column_sequence
                      ,u.column_id
                      ,rn = ROW_NUMBER() OVER (PARTITION BY u.database_id
                                                           ,u.object_id
                                                           ,u.index_id
                                                           ,u.type
                                                   ORDER BY u.col_uniqueness ASC
                                              )
                  FROM [##SQLXL_Index_uniqueness]  AS u
                  JOIN [##SQLXL_Index_Compilation] AS c
                    ON u.database_id = c.database_id
                   AND u.object_id   = c.object_id
                   AND N'P'          = c.rec_type              -- parent level composite record
                   AND N'TBL'        = c.obj_type_short_label  -- tables only
                 WHERE u.type IN (N'1'                         -- clustered rowstore index
                                 ,N'2'                         -- nonclustered rowstore index
                                 )
                   AND u.is_included_column            = 0
                   AND u.key_column_sequence           > 0
                   AND CHARINDEX(N'=CX(',u.col_suffix) = 0     -- exclude columns also in from the clustering index
                   AND CHARINDEX(N'>CX(',u.col_prefix) = 0     -- exclude columns added from the clustering index
                   AND u.col_uniqueness                > 0
                   AND c.covered_fkc_IDs              IS NULL
               ) bc
         WHERE bc.rn = 1
        EXCEPT
        SELECT u.database_id
              ,u.object_id
              ,u.index_id
              ,u.type
              ,u.column_id
          FROM [##SQLXL_Index_uniqueness] AS u
         WHERE u.type IN (N'1' -- clustered rowstore index
                         ,N'2' -- nonclustered rowstore index
                         )
           AND u.is_included_column    = 0
           AND u.key_column_sequence   = 1
       ) xc
  JOIN [##SQLXL_Index_uniqueness] u
    ON xc.database_id = u.database_id
   AND xc.object_id   = u.object_id
   AND xc.index_id    = u.index_id
   AND xc.type        = u.type
   AND xc.column_id   = u.Column_ID
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - better lead index key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - nonclustered rowstore index has more than 5 included columns
-- Diagnostic - Index - nonclustered rowstore index included columns 100 or more bytes
-- Diagnostic - Index - nonclustered rowstore index included column with MAX length
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                                    -- index level composite record
      ,ic.database_id
      ,ic.object_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
      ,diagnostic = N'Bulky includes: '
                + STUFF(                N', ' + CAST(ic.cnt AS NVARCHAR(20)) + N' cols'
                       + IIF(ic.len > 0,N', ' + CAST(ic.len AS NVARCHAR(20)) + N' bytes',N'')
                       + IIF(ic.big > 0,N', ' + CAST(ic.big AS NVARCHAR(20)) + N' MAX',N'')
                       ,1,2,N'')
  FROM (-- all candidate indexes with big/many included columns
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,cnt = COUNT(1)
              ,len = SUM(IIF(c.max_length = -1,0,c.max_length))
              ,big = SUM(IIF(c.max_length = -1,1,0))
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_column]            AS c
            ON ic.database_id = c.database_id
           AND ic.object_id   = c.object_id
           AND ic.column_id   = c.Column_ID
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_index_columns] AS ix -- filter out CLUSTERED index columns
            ON ic.database_id = ix.database_id
           AND ic.object_id   = ix.object_id
           AND 1              = ix.index_id
           AND N'1'           = ix.type                -- clustered rowstore index
           AND ic.column_id   = ix.Column_ID
         WHERE ic.type               = N'2'            -- nonclustered rowstore index
           AND ic.is_included_column = 1
           AND ix.column_id         IS NULL
         GROUP BY
               ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
        HAVING  5 < COUNT(1)                                  -- included column count
            OR 99 < SUM(IIF(c.max_length < 0,0,c.max_length)) -- total included column length
            OR  0 < SUM(IIF(c.max_length < 0,1,0))            -- MAX length columns
       ) AS ic
  JOIN (-- parent objects that are not INTERNAL or HISTORY TABLES
        SELECT database_id
              ,parent_object_id
              ,object_id
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'P'                     -- parent level composite record
           AND obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                           ,N'IT'  -- Not a system internal table
                                           )
       ) AS p
    ON ic.database_id  = p.database_id
   AND ic.object_id    = p.parent_object_id
   AND ic.object_id    = p.object_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - big indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - with resumable operations and metrics
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                                    -- index level composite record
      ,i.database_id
      ,i.object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = N'[RESUMABLE OPERATION - ' + r.state_desc + N']'
                  + NCHAR(167) + N'> Started: '
                              + CAST(DATEDIFF(DAY,r.start_time,GETDATE()) AS NVARCHAR(20))
                              + N' days ago)'
                  + NCHAR(167) + N'> Paused:'
                              + CONVERT(NVARCHAR(11),r.last_pause_time,11)
                              + N'@'
                              + CONVERT(NVARCHAR(8),r.last_pause_time,114)
                              + N' Complete: '
                              + CAST(r.percent_complete_MAX AS NVARCHAR(2)) + N'%'
  FROM [##SQLXL_Index_sys_index_resumable_operations] AS r
  JOIN [##SQLXL_Index_sys_indexes]                    AS i
    ON r.database_id                                        = i.database_id
   AND r.object_id                                          = i.object_id
   AND r.index_id                                           = i.index_id
   AND i.type IN (N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')                 -- Not a Missing Index or Foreign Key
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - resumable operations'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- LEAD ROWSTORE INDEX KEY - ALL ELEMENTS
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic =
STUFF(-- Strip off leading unnecessary characters
-- Diagnostic - Index - Lead Key - is IDENTITY and index is NOT UNIQUE
-- Diagnostic - Index - Lead Key - is SEQUENCE and index is NOT UNIQUE
-- Diagnostic - Index - Lead Key - is NEWSEQUENTIALID and index is NOT UNIQUE
-- Diagnostic - Index - Lead Key - is SEQUENTIAL UNIQUE and optimize_for_sequential_key not enabled (2019+) (BI121)
-- Diagnostic - Index - Lead Key - is SEQUENTIAL UNIQUE and optimize_for_sequential_key is  enabled (2019+) (BI121)
+IIF(   i.Lead_Element_is_Identity        = 1
     OR i.Lead_Element_is_Sequence        = 1
     OR i.Lead_Element_is_newsequentialid = 1
     OR i.Lead_Element_is_newid           = 1
    ,NCHAR(167) + N'Lead Key is '
               + IIF(i.Lead_Element_is_Identity        = 1,N'IDENTITY'       ,N'')
               + IIF(i.Lead_Element_is_Sequence        = 1,N'SEQUENCE'       ,N'')
               + IIF(i.Lead_Element_is_newsequentialid = 1,N'NEWSEQUENTIALID',N'')
               + IIF(i.is_unique                       = 0,N', index not UNIQUE',N'')
               + IIF(sis.ProductMajorVersion  >= 15 AND i.tbl_is_clustered_columnstore = 0
                    , N'> OPTIMIZE_FOR_SEQUENTIAL_KEY '
                    + IIF(i.optimize_for_sequential_key = 0,N'NOT ',N'')
                    + N'ENABLED (2019+) (BI121)'
                    ,N'')
    ,N'')

-- Diagnostic - Index - Lead Key - optimize_for_sequential_key is enabled & lead key not SEQUENTIAL UNIQUE (2019+) (BI121)
+IIF(    i.optimize_for_sequential_key = 1
     AND NOT (   i.Lead_Element_is_Identity        = 1
              OR i.Lead_Element_is_Sequence        = 1
              OR i.Lead_Element_is_newsequentialid = 1
             )
    ,NCHAR(167) + N'OPTIMIZE_FOR_SEQUENTIAL_KEY ENABLED (2019+), lead key not SEQ UNIQ (BI121)'
    ,N'')

-- Diagnostic - Index - Lead Key - is NEWID and index is not unique
+IIF(i.Lead_Element_is_newid = 1
    , NCHAR(167) + N'Lead Key is ' + N'NEWID'
    + IIF(i.is_unique = 0,N', index not UNIQUE',N'')
    ,N'')

-- Diagnostic - Index - Lead Key - lead element uniqueness is >5% of table row count
-- Lead_Element_Uniqueness is the stats density factor X # of rows when stats last computed
+IIF(i.stathdr_Unfiltered_Rows > 99
    ,IIF(    100.0 * i.Lead_Element_Uniqueness / i.stathdr_Unfiltered_Rows > 5.0
         AND i.Key_Columns_CNT > (1 + IIF(i.partition_function_ID > 0,1,0)) -- if partitioned must have partitioned column
        ,  NCHAR(167) + N'Lead key low uniqueness - ' + [dbo].[SQLXL_3SD](i.Lead_Element_Uniqueness,N'N') + N' rows, '
         + [dbo].[SQLXL_3SD](1.0 * I.Lead_Element_Uniqueness / i.stathdr_Unfiltered_Rows,N'%') + N' of table'
        ,N'')
    ,N'')

-- Diagnostic - Index - Lead Key - clustered index lead is unique & has extraneous key columns
-- Diagnostic - Index - Lead Key - Nonclustered index lead key is unique, extraneous columns can be included
+IIF(    (   i.Lead_Element_is_Identity        = 1
          OR i.Lead_Element_is_Sequence        = 1
          OR i.Lead_Element_is_newsequentialid = 1
          OR i.Lead_Element_is_newid           = 1
         )
     AND i.Key_Columns_CNT > (1 + IIF(i.partition_function_ID > 0,1,0)) -- if partitioned must have partitioned column
    ,NCHAR(167) + IIF(i.type = N'1' -- clustered rowstore index
                     ,N'> has '  + CAST(i.Key_Columns_CNT - 1 AS NVARCHAR(20)) + N' unneeded col(s)'
                     ,N'> move ' + CAST(i.Key_Columns_CNT - 1 AS NVARCHAR(20)) + N' unneeded columns to Include'
                     )
    ,N'')
-- Diagnostic - Index - Lead Key - another column may be a better clustering lead key
+IIF(    i.type                          IN (N'1')                   -- clustered rowstore index
     AND i.tbl_is_memory_optimized        = 0                        -- base mem opt table is always HEAP
     AND i.tbl_cx_uniq_ordered_column_ID <> i.Lead_Element_Column_ID
    ,NCHAR(167) + N'Candidate Rebuilding key ' + NCHAR(167) + N'> ' + c.[Column Descriptors]
    ,N'')
-- Diagnostic - Index - Lead Key - is string/text and summary statistics have not been computed
+IIF(    i.parent_object_type = N'U' -- User Table
     AND (   i.Lead_Element_Data_Type LIKE N'%CHAR%'
          OR i.Lead_Element_Data_Type LIKE N'%TEXT%'
         )
     AND i.stathdr_String_index IS NULL
     AND i.row_CNT               > 0
    , NCHAR(167) + N'Lead key ' + UPPER(i.Lead_Element_Data_Type) + N', String Summary statistics are '
    + IIF(i.stathdr_String_index = N'YES',N'',N'*NOT* ') + N'computed'
    ,N'')
------------------------------------------------------------
,1,1,N'')
  FROM [##SQLXL_Index_Startup] AS sis
 CROSS
  JOIN (-- All rowstore clustered and nonclustered index records
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE type IN (N'1'  -- clustered rowstore index
                       ,N'2'  -- nonclustered rowstore index
                       )
       ) AS i
  LEFT OUTER
  JOIN [##SQLXL_Index_column] AS c
    ON i.database_id                   = c.database_id
   AND i.object_id                     = c.object_id
   AND i.tbl_cx_uniq_ordered_column_ID = c.column_id
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - lead key properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index key columns Nullable, non-standard type, string or LOB, different collation
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic =
-- Diagnostic - Index - non-lead Key element NULLable (BI25). Lead Key handled above under INDEX STATS
-- Diagnostic - Index - non-lead Key Element count of NULL values and percent of table
  N'Key ' + CONVERT(NVARCHAR(20),ic.key_column_sequence) +
+ STUFF(IIF(c.is_nullable = 1
            ,N', is NULLable'
            + IIF(i.stathist_null_rows > 0
                 , N' - ' + [dbo].[SQLXL_3SD](i.stathist_null_rows,N'I') + N' NULL values '
                 + N'('
                 + IIF(i.stathdr_Rows_CNT > 0
                      ,[dbo].[SQLXL_3SD](1.0 * i.stathist_null_rows / i.stathdr_Rows_CNT,N'%')
                      ,N'empty ')
                 + N' table)'
                 + N' (BI25)'
                 ,N'')
            ,N'')
-- Diagnostic - Index - Key Element is non-standard data type
       + IIF(typ.name IN (N'binary'
                         ,N'image'
                         ,N'ntext'
                         ,N'real'
                         ,N'sql_variant'
                         ,N'varbinary')
            ,N', type ' + UPPER(typ.name)
            ,N'')
-- Diagnostic - Index - Key Element is string or LOB type (BI27)
       + IIF(   (typ.name = N'VARCHAR'  AND c.max_length > 8)
             OR (typ.name = N'NVARCHAR' AND c.max_length > 4)
             OR (typ.name = N'CHAR'     AND c.max_length > 8)
             OR (typ.name = N'NCHAR'    AND c.max_length > 4)
             OR c.max_length = -1
            ,N', type ' + UPPER(typ.name) + N'(' + IIF(c.max_length = -1,N'MAX',CAST(c.max_length AS NVARCHAR(20)))  + N') (BI27)'
            ,N'')
-- Diagnostic - Index - Key Element collation <> DB (BI69)
       + IIF(c.collation_name <> d.collation_name
            , N', has Collation ' + c.collation_name
            + N' <> DB ' + d.collation_name + N' (BI69)'
            ,N'')
       ,1,1,N'')
/*** LOCAL TESTING ***
SELECT COUNT(1)
--*/
  FROM (-- list of all CX & NCX indexes
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'  -- index level composite record
           AND type    IN (N'1' -- clustered rowstore index
                          ,N'2' -- Nonclustered rowstore index
                          )
       ) AS i
  JOIN [##SQLXL_Index_sys_databases]     AS d
    ON i.database_id  = d.database_id
  JOIN [##SQLXL_Index_sys_index_columns] AS ic
    ON i.database_id  = ic.database_id
   AND i.object_id    = ic.object_id
   AND i.index_id     = ic.index_id
   AND i.type         = ic.type
   AND 0              = ic.is_included_column
  JOIN [##SQLXL_Index_sys_columns]       AS c
    ON ic.database_id = c.database_id
   AND ic.object_id   = c.object_id
   AND ic.column_id   = c.column_id
  JOIN [##SQLXL_Index_sys_types]         AS typ
    ON c.database_id  = typ.database_id
   AND c.user_type_id = typ.user_type_id
 WHERE c.is_nullable = 1
    OR typ.name IN (N'binary'
                   ,N'image'
                   ,N'ntext'
                   ,N'real'
                   ,N'sql_variant'
                   ,N'varbinary'
                   )
    OR (   (typ.name = N'VARCHAR'  AND c.max_length > 8)
        OR (typ.name = N'NVARCHAR' AND c.max_length > 4)
        OR (typ.name = N'CHAR'     AND c.max_length > 8)
        OR (typ.name = N'NCHAR'    AND c.max_length > 4)
        OR c.max_length = -1
       )
    OR c.collation_name <> d.collation_name
 ORDER BY -- to get columns in key sequence order
       i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,ic.key_column_sequence
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - key element properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES IN **
\******************************************************************************************************************************************/
----------------------------------------------------------------------------------------------------
-- Index properties - Memory-optimized table activities
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic =
-----------------------------------------------------------------
-- Diagnostic - Index - Memory table activity. NOTE - base table is a HEAP - index type "0". Add Missing Index counts as needed
  IIF(ius_user_seeks_CNT + ius_user_scans_CNT + xtp_rows_touched_CNT > 0
     ,N'Touch: ' + [dbo].[SQLXL_3SD](ius_user_seeks_CNT + ius_user_scans_CNT + xtp_rows_touched_CNT,N'I')
     ,N'No user activity since capture started')
+ IIF(xtp_rows_returned_CNT > 0
     ,N' Return: ' + [dbo].[SQLXL_3SD](xtp_rows_returned_CNT,N'I')
     ,N'')
+ IIF(ius_user_seeks_CNT + ius_user_scans_CNT + xtp_scans_started_CNT > 0
     ,N' Scan: '   + [dbo].[SQLXL_3SD](ius_user_seeks_CNT + ius_user_scans_CNT + xtp_scans_started_CNT,N'I')
     ,N'')
+ IIF(xtp_scans_started_CNT > 0
     ,N' Retries: '  + [dbo].[SQLXL_3SD](COALESCE(xtp_scans_retries_CNT,0),N'I')
     ,N'')
-- Diagnostic - Index - Memory Optimized - Write Conflicts
+ IIF(xtp_write_conflicts_CNT > 0
     ,N' Write Conflicts:' + [dbo].[SQLXL_3SD](xtp_write_conflicts_CNT,N'I')
     ,N'')
-- Diagnostic - Index - Memory Optimized - Constraint Violations
+ IIF(xtp_unique_constraint_violations_CNT > 0
     ,N' Constraint Violations:' + [dbo].[SQLXL_3SD](xtp_unique_constraint_violations_CNT,N'I')
     ,N'')
  FROM [##SQLXL_Index_Compilation]
 WHERE rec_type = N'I'                     -- index level composite record
   AND obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                   ,N'IT'  -- Not a system internal table
                                   ,N'TVF' -- Not a SQL table-valued-function SQL 2012+
                                   )
   AND parent_object_type        = N'U'    -- user table
   AND tbl_is_memory_optimized   = 1
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - in memory metrics'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Index properties - Heaps
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic =
  N'Heap '
+ STUFF(-- Strip off leading unnecessary characters
        IIF(   ip.is_primary_key       = 1
            OR ip.is_unique_constraint = 1
            OR ip.is_unique            = 1
           ,NCHAR(167) + N'- With '
           + STUFF(-- Strip off leading unnecessary characters
-- Diagnostic - Index - Heap - with PRIMARY KEY (BI47)
                    IIF(ip.is_primary_key = 1
                       ,N', Primary Key (BI47)'
                       ,N'')
-- Diagnostic - Index - Heap - with UNIQUE CONSTRAINT (BI47)
                  + IIF(    ip.is_primary_key = 0
                        AND ip.is_unique_constraint = 1
                       ,N', Unique Constraint (BI47)'
                       ,N'')
-- Diagnostic - Index - Heap - with unique index (BI47)
                  + IIF(    ip.is_primary_key = 0
                        AND ip.is_unique_constraint = 0
                        AND ip.is_unique = 1
                       ,N', Unique index (BI47)'
                       ,N'')
                  ,1,2,N'')
           ,N'')
       ------------------------------------------------------------
      + IIF(   p.row_CNT            > 0
            OR p.index_CNT          > 0
            OR p.Missing_index_CNT  > 0
            OR p.ius_User_total_CNT > 0

-- Diagnostic - Index - Heap - Number of data rows or empty
           ,NCHAR(167)
           + N'> Rows: ' + IIF(p.row_CNT > 0,[dbo].[SQLXL_3SD](p.row_CNT,N'I'),N'0')                           -- number of rows else empty

-- Diagnostic - Index - Heap - with indexes - Count
           + N' Idx: ' + IIF(P.Index_CNT > 0,[dbo].[SQLXL_3SD](p.index_CNT,N'I'),N'0')                       -- Indexes

-- Diagnostic - Index - Heap - with Missing indexes - Count
           + N' MIX: ' + IIF(p.Missing_index_CNT > 0,[dbo].[SQLXL_3SD](p.Missing_index_CNT,N'I'),N'0')       -- missing indexes

-- Diagnostic - Index - Heap - with query Usage (reads, writes)
           + N' USG'
           + N' RDS: ' + IIF(p.ius_user_read_CNT    > 0  -- User (Query) reads
                            ,[dbo].[SQLXL_3SD](p.ius_user_read_CNT   ,N'I')
                            ,N'0')
           + N' WRT: ' + IIF(p.ius_user_updates_CNT > 0   -- User (Query) updates
                            ,[dbo].[SQLXL_3SD](p.ius_user_updates_CNT,N'I')
                            ,N'0')
       ------------------------------------------------------------
           + NCHAR(167)
           + N'> OPS'
-- Diagnostic - Index - Heap - with query operations - Reads
           + N' RDS: ' + IIF(p.ops_total_read_CNT   > 0,[dbo].[SQLXL_3SD](p.ops_total_read_CNT  ,N'I'),N'0')
-- Diagnostic - Index - Heap - with query operations - Writes (BI44-46)
           + N' WRT: ' + IIF(p.ops_total_write_CNT  > 0,[dbo].[SQLXL_3SD](p.ops_total_write_CNT ,N'I'),N'0') + N' (BI44-46)'
-- Diagnostic - Index - Heap - with query operations - Deletes (BI49)
           + N' DEL: ' + IIF(p.ops_total_delete_CNT > 0,[dbo].[SQLXL_3SD](p.ops_total_delete_CNT,N'I'),N'0') + N' (BI49)'
       ------------------------------------------------------------
           + IIF(p.ops_total_write_CNT > 0 OR p.ius_user_updates_CNT > 0
                , NCHAR(167)
                + N'> Read to Write ratio:'
-- Diagnostic - Index - Heap - Usage read to write ratio
                + N' USG ' + [dbo].[SQLXL_3SD](COALESCE(i.ius_read_to_write_RAT,0),N'N') + N'x '
-- Diagnostic - Index - Heap - Operations read to write ratio
                + N' OPS ' + [dbo].[SQLXL_3SD](COALESCE(i.ops_read_to_write_RAT,0),N'N') + N'x '
                ,N'')
           ,N'')
       ------------------------------------------------------------
      + IIF(p.ios_forwarded_fetch_CNT > 0
           , NCHAR(167)
           + N'> FWD FETCH:'
-- Diagnostic - Index - Heap - with Forwarded Fetches (BI43)
           + [dbo].[SQLXL_3SD](p.ios_forwarded_fetch_CNT,N'I')
           + IIF(p.row_CNT > 0
                ,N' (' + [dbo].[SQLXL_3SD](COALESCE(1.0 * p.ios_forwarded_fetch_CNT / p.row_CNT,0),N'N') + N'x)'
                ,N' (No rows)')
           + N' (BI43)'
           ,N'')
-- NOTE: Heaps with Waits covered later
       ,1,1,N'')
------------------------------------------------------------
/*** LOCAL TESTING ***
SELECT rec_type   = N'I'                                    -- index level composite record
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,p.type
      ,i.type
      ,i.type
--*/
  FROM (-- All index-level records
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type                  = N'I'    -- index level composite record
           AND obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                           ,N'IT'  -- Not a system internal table
                                           ,N'TVF' -- Not a SQL table-valued-function SQL 2012+
                                           )
           AND type                      = N'0'    -- rowstore heap
           AND parent_object_type        = N'U'    -- User Table
           AND tbl_is_memory_optimized   = 0       -- not memory optimized
       ) AS i
  LEFT OUTER
  JOIN (-- Tables with Primary Key, Unique Constraint, or Unique index
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,is_primary_key       = SUM(IIF(is_primary_key = 1,1,0))
              ,is_unique_constraint = SUM(IIF(is_unique_constraint = 1,1,0))
              ,is_unique            = SUM(IIF(is_unique = 1,1,0))
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type           = N'I'           -- index level composite record
           AND parent_object_type = N'U'           -- User Table
         GROUP BY
               database_id
              ,parent_object_id
              ,object_id
        HAVING 0 < SUM(IIF(is_primary_key       = 1,1,0))
            OR 0 < SUM(IIF(is_unique_constraint = 1,1,0))
            OR 0 < SUM(IIF(is_unique            = 1,1,0))
       ) AS ip
    ON i.database_id      = ip.database_id
   AND i.parent_object_id = ip.parent_object_id
   AND i.object_id        = ip.object_id
  JOIN (--
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type IN (N'P'  -- parent level composite record
                           ,N'S'  -- system/internal table composite record
                           )
           AND Clustered_ColumnStore_CNT = 0 -- not a clustered columnstore
       ) AS p
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
) AS i
 WHERE i.diagnostic > N'' -- only get non-null Diagnostics
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Heap properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Index properties - clustered rowstore index
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (-- pairs with "WHERE i.diagnostic IS NOT NULL" below
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters
-- Diagnostic - Index - Clustered Rowstore - index Not Unique (BI28)
       IIF(i.Is_Unique = 0
          , NCHAR(167) + N'CX not UNIQUE (BI28)'
-- Diagnostic - Index - Clustered Rowstore - no statistics found
          + IIF(dv.All_Density IS NULL
               ,N', no statistics found'
               ,N'')
-- Diagnostic - Index - Clustered Rowstore - index not very selective
          + IIF(1.0 * dv.All_Density * i.stathdr_Rows_CNT >  1.10
               , N', not selective '
               + QUOTENAME([dbo].[SQLXL_3SD](1.0 * dv.All_Density * i.stathdr_Rows_CNT,N'N'))
               + N' rows/key'
               ,N'')
-- Diagnostic - Index - Clustered Rowstore - index candidate for Uniqueness
          + IIF(1.0 * dv.All_Density * i.stathdr_Rows_CNT <= 1.10
               , N', UNIQ candidate '
               + QUOTENAME([dbo].[SQLXL_3SD](1.0 * dv.All_Density * i.stathdr_Rows_CNT,N'N'))
               + N' rows/key'
               ,N'')
          ,N'')

-- Diagnostic - Index - Clustered Rowstore - index is unique but statistics are not - out of date?
      + IIF(i.is_unique = 1 AND 1.0 * dv.All_Density * i.stathdr_Rows_CNT > 1.005
           , NCHAR(167) + N'CX unique - '
           + [dbo].[SQLXL_3SD](1.0 * dv.All_Density * i.stathdr_Rows_CNT,N'N')
           + N' records per key, check stats'
           ,N'')
,1,1,N'')
  FROM (-- All index-level records
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'                     -- index level composite record
           AND type     = N'1'                     -- clustered rowstore
           AND obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                           ,N'IT'  -- Not a system internal table
                                           ,N'TVF' -- Not a SQL table-valued-function SQL 2012+
                                           ,N'VW'  -- Not a View
                                           )
--         AND reserved_page_PG_CNT   > 32 -- size bigger than 256KB (8KBx32Pages)
       ) AS i
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_ShowStatistics_DensityVector] AS dv -- Get uniqueness from the last indexed key column
    ON i.database_id     = dv.database_id
   AND i.object_id       = dv.object_id
   AND i.index_id        = dv.index_ID
   AND i.Key_Columns_CNT = dv.Row_ID -- skip the clustering index keys in getting uniqueness
) AS i
 WHERE i.diagnostic > N''
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - clustered rowstore'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Index Properties - nonclustered rowstore index
----------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM ( -- pairs with "WHERE i.diagnostic IS NOT NULL" below
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = STUFF(-- Strip off leading unnecessary characters

       IIF(i.partition_CNT > 1 AND i.tbl_is_heap = 1
-- Diagnostic - Index - Partitioned nonclustered rowstore index found on Heap
          ,NCHAR(167) + N'Heap - Nonclustered index has ' + [dbo].[SQLXL_3SD](i.partition_CNT,N'I') + N' partitions'
          ,N'')

     + IIF(i.is_primary_key = 1 AND i.tbl_is_heap = 1
-- Diagnostic - Index - nonclustered rowstore index primary key found on Heap (BI47)
          ,NCHAR(167) + N'PRIMARY KEY on Heap - (BI47)'
          ,N'')

     + IIF(i.is_primary_key = 0 AND i.is_unique_constraint = 1 AND i.tbl_is_heap = 1
-- Diagnostic - Index - Unique Constraint nonclustered rowstore index found on Heap (BI47)
          ,NCHAR(167) + N'Unique Constraint on Heap - (BI47)'
          ,N'')

     + IIF(i.is_primary_key = 0 AND i.is_unique_constraint = 0 AND i.tbl_is_heap = 1 AND i.is_unique = 1
-- Diagnostic - Index - Unique nonclustered rowstore index found on Heap (BI47)
          ,NCHAR(167) + N'Unique index found on Heap - (BI47)'
          ,N'')

     ,1,1,N'')
  FROM (-- All index-level records, not in History or internal/system tables
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'                     -- index level composite record
           AND type     = N'2'                     -- nonclustered rowstore index
           AND obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                           ,N'IT'  -- Not a system internal table
                                           )
       ) AS i
) AS i
 WHERE i.diagnostic > N''
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - nonclustered rowstore'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Index Compression
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
-- Diagnostic - Index - Compression - count of compressed Partitions (BI63)
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic =
  N'Compression: ' + STUFF( IIF(i.Partition_row_compress_CNT > 0
                               ,N' ROW(' + [dbo].[SQLXL_3SD](i.Partition_row_compress_CNT,N'I') + N')'
                               ,N'')
                          + IIF(i.Partition_page_compress_CNT > 0
                               ,N' PAGE(' + [dbo].[SQLXL_3SD](i.Partition_page_compress_CNT,N'I') + N')'
                               ,N'')
-- Diagnostic - Index - Compression - Page Compression Failure Rate
                          + IIF(i.Partition_page_compress_CNT > 0 AND i.ios_page_compression_fail_PCT > 0.0
                               ,N' Fails: '+ [dbo].[SQLXL_3SD](i.ios_page_compression_fail_PCT / 100.0,N'%') -- /zero hard code
                               ,N'')
                          + IIF(i.Partition_columnstore_compress_CNT > 0
                               ,N' CS(' + [dbo].[SQLXL_3SD](i.Partition_columnstore_compress_CNT,N'I') + N')'
                               ,N'')
                          + IIF(i.Partition_columnstore_archive_compress_CNT > 0
                               ,N' ARC(' + [dbo].[SQLXL_3SD](i.Partition_columnstore_archive_compress_CNT,N'I') + N')'
                               ,N'')
                          + IIF(i.Partition_xml_compress_CNT > 0
                               ,N' XML(' + [dbo].[SQLXL_3SD](i.Partition_xml_compress_CNT,N'I') + N')'
                               ,N'')
                          + N' (BI63)'
                          ,1,1,N'')
  FROM (--
        SELECT rec_type
              ,database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
              ,partition_row_compress_CNT
              ,partition_page_compress_CNT
              ,ios_page_compression_fail_PCT
              ,partition_columnstore_compress_CNT
              ,partition_columnstore_archive_compress_CNT
              ,partition_xml_compress_CNT
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'                                     -- index level composite record
           AND (   partition_row_compress_CNT                 > 0
                OR partition_page_compress_CNT                > 0
                OR ios_page_compression_fail_PCT              > 0
                OR partition_columnstore_compress_CNT         > 0
                OR partition_columnstore_archive_compress_CNT > 0
                OR partition_xml_compress_CNT                 > 0
               )
       ) AS i
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - compression'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CON**
\******************************************************************************************************************************************/
-- NOTE: fk.is_not_trusted & fk.is_disabled are covered by index Diagnostics
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
-- Diagnostic - Foreign Key Constraint - Self Referencing
SELECT rec_type   = N'I'                             -- index level composite record
      ,fk.database_id
      ,fk.parent_object_id
      ,fk.object_id
      ,index_id   = fk.object_id
      ,type       = fk.type
      ,diagnostic = QUOTENAME(N'Self referencing FKC')
  FROM [##SQLXL_Index_sys_objects] AS fk
 WHERE fk.type             = N'F'                    -- foreign key constraint
   AND fk.parent_object_id = fk.referenced_object_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - self referencing'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'             -- index level composite record
      ,fk.database_id
      ,fk.parent_object_id
      ,fk.object_id
      ,index_id   = fk.object_id
      ,type       = N'F'             -- foreign key constraint
-- Diagnostic - Foreign Key Constraint - *DISABLED*
      ,diagnostic = STUFF( IIF(fk.is_disabled                = 1,N' *DISABLED*',N'')
-- Diagnostic - Foreign Key Constraint - *NOT TRUSTED*
                         + IIF(fk.is_not_trusted             = 1,N' *NOT TRUSTED*',N'')
-- Diagnostic - Foreign Key Constraint - *ENABLED FOR REPLICATION*
                         + IIF(fk.is_not_for_replication = 1 AND t.is_replicated = 1,N' *NOT ENABLED FOR REPLICATION*',N'')
                         ,1,1,N'')
  FROM (-- Foreign Key Constraints
        SELECT *
          FROM [##SQLXL_Index_sys_objects]
         WHERE type = N'F' -- foreign key constraint
       ) AS fk
  JOIN [##SQLXL_Index_sys_objects] AS t
    ON fk.database_id      = t.database_id
   AND fk.parent_object_id = t.object_id
 WHERE (   (    fk.is_not_for_replication = 0
            AND t.is_replicated           = 1
           )
        OR fk.is_not_trusted             = 1
        OR fk.is_disabled                = 1
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT DISTINCT
       rec_type          = N'I'         -- index level composite record
      ,o.database_id
      ,o.parent_object_id
      ,object_id         = o.l_index_id
      ,index_id          = o.l_index_id
      ,type              = N'F'         -- foreign key constraint
-- Diagnostic - Foreign Key Constraint - Duplicate key
      ,diagnostic        = N'*Duplicate Foreign Key Constraint*'
  FROM [##SQLXL_Index_Synergies] AS o
 WHERE o.l_type     = N'F' -- foreign key constraint
   AND o.r_type     = N'F' -- foreign key constraint
   AND o.matching_sequence_CNT = o.lc_key_CNT
   AND o.matching_sequence_CNT = o.rc_key_CNT
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - duplicates'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT DISTINCT
       rec_type          = N'I'         -- index level composite record
      ,o.database_id
      ,o.parent_object_id
      ,object_id         = o.l_index_id
      ,index_id          = o.l_index_id
      ,type              = N'F'         -- foreign key constraint
-- Diagnostic - Foreign Key Constraint - Same FKC key sequence
      ,diagnostic        = N'*Same sequence FKC*'
  FROM [##SQLXL_Index_Synergies] AS o
 WHERE o.l_type     = N'F' -- foreign key constraint
   AND o.r_type     = N'F' -- foreign key constraint
   AND o.lc_key_CNT < o.rc_key_CNT
   AND o.matching_sequence_CNT > 0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - same sequence'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT DISTINCT
       rec_type          = N'I'         -- index level composite record
      ,o.database_id
      ,o.parent_object_id
      ,object_id         = o.l_index_id
      ,index_id          = o.l_index_id
      ,type              = N'F'         -- foreign key constraint
-- Diagnostic - Foreign Key Constraint - Overlap FKC key
      ,diagnostic        = N'*Overlapping FKC*'
  FROM [##SQLXL_Index_Synergies] AS o
 WHERE o.l_type     = N'F' -- foreign key constraint
   AND o.r_type     = N'F' -- foreign key constraint
   AND o.matching_overlap_CNT = o.lc_key_CNT
   AND o.matching_overlap_CNT = o.rc_key_CNT
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - overlapping'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT DISTINCT
       rec_type          = N'I'         -- index level composite record
      ,o.database_id
      ,o.parent_object_id
      ,object_id         = o.l_index_id
      ,index_id          = o.l_index_id
      ,type              = N'F'         -- foreign key constraint
-- Diagnostic - Foreign Key Constraint - contained FKC key
      ,diagnostic        = N'*Contained FKC*'
  FROM [##SQLXL_Index_Synergies] AS o
 WHERE o.l_type     = N'F' -- foreign key constraint
   AND o.r_type     = N'F' -- foreign key constraint
   AND o.matching_contained_CNT > 0
   AND o.lc_key_CNT < o.rc_key_CNT
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - contained'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                -- index level composite record
      ,fk.database_id
      ,fk.parent_object_id
      ,fk.object_id
      ,index_id   = fk.object_id
      ,type       = N'F'                -- foreign key constraint
      ,diagnostic = N'FKC Action:'
-- Diagnostic - Foreign Key Constraint - Referential Actions - Delete
                  + N' Delete ' + QUOTENAME(fk.delete_referential_action_desc)
-- Diagnostic - Foreign Key Constraint - Referential Actions - Update
                  + N' Update ' + QUOTENAME(fk.update_referential_action_desc)
-- Diagnostic - Foreign Key Constraint - Any action forces serializable isolation (BI71)
                  + IIF(   fk.delete_referential_action > 0
                        OR fk.update_referential_action > 0
                       ,NCHAR(167) + N'> NOTE: action forces serializable isolation (BI71)'
                       ,N'')
  FROM [##SQLXL_Index_sys_objects] AS fk
 WHERE fk.type = N'F' -- foreign key constraint
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - cascading'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Uncovered Foreign Key Constraints, if candidate covering Missing index(es) (sequence,overlap,contained)
-- found show that too.
-- Note: as of Mar 2023 BlitzIndex refers to 2 CHECK_ID 72's - Woo!
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (--
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,index_id   = i.object_id
      ,type       = N'F'        -- foreign key constraint
      ,diagnostic =
-- Diagnostic - Foreign Key Constraint - No covering index lead key element (BI72)
 N'Uncovered FKC (BI72)'
+IIF(i.fkc_Missing_index_CNT > 0 -- candidate missing indexes found
-- Diagnostic - Foreign Key Constraint - elements found in Missing indexes
    ,NCHAR(167) + N'> In '    + CAST(i.fkc_Missing_index_CNT AS NVARCHAR(20)) + N' MIX Candidate(s) '
               + N' Adv: '   + IIF(a.mix_Advantage_AMT > 0
                                 ,[dbo].[SQLXL_3SD](1.0 * COALESCE(i.mix_Advantage_AMT,0) / a.mix_Advantage_AMT,N'%')
                                 ,N'')
               ---------------------------------
               + N' Cost: '  + IIF((a.mix_avg_total_user_cost_AMT + a.mix_avg_total_system_cost_AMT) > 0
                                 ,[dbo].[SQLXL_3SD](1.0 * COALESCE((i.mix_avg_total_user_cost_AMT + i.mix_avg_total_system_cost_AMT),0)
                                                           / (a.mix_avg_total_user_cost_AMT + a.mix_avg_total_system_cost_AMT)
                                                      ,N'%')
                                 ,N'')
               ---------------------------------
               + N' Impact: ' + IIF((a.mix_avg_user_impact_AMT + a.mix_avg_system_impact_AMT) > 0
                                   ,[dbo].[SQLXL_3SD](1.0 * COALESCE((i.mix_avg_user_impact_AMT + i.mix_avg_system_impact_AMT),0)
                                                            / (a.mix_avg_user_impact_AMT + a.mix_avg_system_impact_AMT)
                                                            ,N'%')
                                   ,N'')
    + NCHAR(167) + N'> MIX Count: ' + [dbo].[SQLXL_3SD](COALESCE(i.Missing_index_CNT      ,0),N'I')
                + N' Compiles: '    + [dbo].[SQLXL_3SD](COALESCE(i.mix_unique_compiles_CNT,0),N'I')
                + N' USG: '         + [dbo].[SQLXL_3SD](COALESCE(i.ius_User_total_CNT     ,0),N'I')
                                    + IIF(p.ius_User_total_CNT > 0
                                         , N' ('
                                         + [dbo].[SQLXL_3SD](1.0 * COALESCE(i.ius_User_total_CNT,0) / p.ius_User_total_CNT,N'%')
                                         + N')'
                                         ,N'')
                + N' Last: '        + COALESCE(CONVERT(NVARCHAR(11)
                                                      ,(SELECT MAX(dt)
                                                          FROM (VALUES (i.ius_last_user_seek_DTTM)
                                                                      ,(i.ius_last_user_scan_DTTM)
                                                                      ,(i.ius_last_system_seek_DTTM)
                                                                      ,(i.ius_last_system_scan_DTTM)
                                                               ) AS value(dt)
                                                       )
                                                      ,2)
                                          ,N'N/A')
    ,IIF(fc.stats_name IS NOT NULL
        ,N' - column statistics found'
        ,N'')
    + N' - no candidate covering MIX'
    )
/*** LOCAL TESTING ***
SELECT COUNT(1)
--*/
  FROM (-- All uncovered foreign key records
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'                -- index level composite record
           AND type     = N'F'                -- foreign key constraint
           AND fkc_covered_by_idx_IDS IS NULL -- no covering index
       ) AS i
  LEFT OUTER MERGE
  JOIN (-- statistics elements for missing foreign key columns
        SELECT fc.database_id
              ,fc.constraint_object_id
              ,c.stats_name
              ,c.name
              ,c.Uniqueness
         FROM ##SQLXL_Index_sys_foreign_key_columns AS fc
         JOIN ##SQLXL_Index_column                  AS c
           ON fc.parent_object_id     = c.object_id
          AND fc.parent_column_id     = c.column_id
        WHERE fc.constraint_column_id = 1
          AND stats_name             IS NOT NULL
      ) AS fc
   ON i.database_id = fc.database_id
  AND i.object_id   = fc.constraint_object_id
 INNER MERGE
  JOIN (--
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type IN (N'P'       -- parent level composite record
                           ,N'S'       -- system/internal table composite record
                           )
           AND type      = N'U'        -- table type
       ) AS p
    ON i.database_id        = p.database_id
   AND i.parent_object_id   = p.parent_object_id
   AND i.parent_object_id   = p.object_id
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'A') AS a -- instance level composite record
) AS fk
 WHERE fk.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE,FORCE ORDER); -- Force order eliminates "Warning: join order enforced because a local join hint is used."

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - uncovered, candidate MIX'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
-- Diagnostic - Foreign Key Constraint - count of referring FKC to this reference
      ,diagnostic = N'FKC References - ' + QUOTENAME(CAST(i.rk_referencing_fkc_CNT AS NVARCHAR(20)))
  FROM [##SQLXL_Index_Compilation] AS i                     -- only table source in query
 WHERE i.rec_type               = N'I'                      -- index level composite record
   AND i.rk_referencing_fkc_CNT > 0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - references'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT fk.rec_type
      ,fk.database_id
      ,fk.parent_object_id
      ,fk.object_id
      ,index_id   = fk.object_id
      ,type       = N'F'         -- foreign key constraint
-- Diagnostic - Foreign Key Constraint - indexes with lead key(s) covering this FKC, in size order
      ,diagnostic = N'Covered by index ID(s) ' + fk.fkc_covered_by_idx_IDS
  FROM [##SQLXL_Index_Compilation] AS fk
 WHERE fk.rec_type                = N'I'                    -- index level composite record
   AND fk.type                    = N'F'                    -- foreign key constraint
   AND fk.fkc_covered_by_idx_IDS IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - covering indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING**
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (-- Index level
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = STUFF(-- remove unneeded leading NCHAR(167)
-- Diagnostic - Missing index - candidate to cover foreign key constraint
        IIF(mix.fkc_id IS NOT NULL
           , NCHAR(167)
           + N'> Possible cover for Foreign Key(s) '
           + STUFF(mix.fkc_id,1,1,N'')
           ,N'')
-- Diagnostic - Missing index - Most resource intensive query generating MIX request
      + IIF(LTRIM(RTRIM(i.mqy_query_text)) > N''
           ,NCHAR(167) + N'See column "M" in Metadata for largest resource query generating MIX'
           ,N'')
      ,1,1,N'')
  FROM (-- missing indexes only
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'-- index level composite record
           AND type     = N'M' -- missing nonclustered rowstore index
       ) AS i
 CROSS
 APPLY (-- Double select to accomodate XML.value below
        SELECT(-- uncovered Foreign Key Constraints
               SELECT N',N' + CAST(syn.l_index_id AS NVARCHAR(20))
                 FROM [##SQLXL_Index_Synergies]   AS syn
                 JOIN [##SQLXL_Index_Compilation] AS fkc
                   ON syn.database_id             = fkc.database_id
                  AND syn.parent_object_id        = fkc.parent_object_id
                  AND syn.l_index_id              = fkc.index_id
                  AND syn.l_type                  = fkc.type
                  AND fkc.fkc_covered_by_idx_IDS IS NULL        -- no covering index on FKC
                WHERE i.database_id       = syn.database_id
                  AND i.parent_object_id  = syn.parent_object_id
                  AND N'F'                = syn.l_type          -- foreign key constraint
                  AND i.index_ID          = syn.r_index_ID
                  AND i.type              = syn.r_type          -- Missing index type = 'M'
                  AND N'I'                = fkc.type            -- index level composite record
                  AND syn.l_index_id     IS NOT NULL
                  FOR XML PATH(N''), TYPE
              ).value('(./text())[1]',N'NVARCHAR(MAX)')
       ) mix(fkc_id)
) AS i
 WHERE diagnostic > N''
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Missing Index Diagnostics - candidate covers'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT rec_type   = N'I'                                    -- index level composite record
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = N'> Table '
-- Diagnostic - Missing index - table is Clustered Columnstore
                  + IIF(p.Clustered_ColumnStore_CNT > 0,N'is Clustered Columnstore',N'')
-- Diagnostic - Missing index - table has Nonclustered Columnstore
                  + IIF(p.Nonclustered_ColumnStore_CNT > 0,N'has Nonclustered Columnstore (FK can''t use)',N'')
  FROM [##SQLXL_Index_Compilation]  AS i
  JOIN [##SQLXL_Index_Compilation]  AS p
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND p.rec_type        IN (N'p'            -- parent level composite record
                            ,N'S'            -- system/internal table composite record
                            )
 WHERE i.type = N'M'                         -- missing nonclustered rowstore index
   AND (   p.Clustered_ColumnStore_CNT    > 0
        OR p.Nonclustered_ColumnStore_CNT > 0
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Missing Index Diagnostics - tables has columnstore'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT *
  FROM (-- Table level
SELECT p.rec_type
      ,p.database_id
      ,p.parent_object_id
      ,p.object_id
      ,p.index_id
      ,p.type
-- Diagnostic - Table - candidate for Nonclustered Columnstore due to missing index count
      ,diagnostic = N'Missing index CNT: ' + CAST(p.Missing_index_CNT AS NVARCHAR(20))
                  + IIF(a.mix_Advantage_AMT > 0
                       ,N' Advantage: ' + [dbo].[SQLXL_3SD](1.0 * p.mix_Advantage_AMT / a.mix_Advantage_AMT,N'%')
                       ,N'')
                  + IIF(    (SELECT ProductMajorVersion FROM [##SQLXL_Index_Startup]) >= 13 -- SQL 2016+
                        AND (--
                             SELECT run_value
                               FROM [##SQLXL_Instance_info]
                              WHERE source = N'SERVERPROPERTY'
                                AND name   = N'EngineEdition'
                                AND (   CAST(run_value AS INT)  = 3 -- Enterprise (For Evaluation, Developer, and Enterprise editions)
                                     OR CAST(run_value AS INT) >= 5 -- As Of 06/20/2023
                                                                        -- 5 = SQL Database
                                                                        -- 6 = Azure Synapse Analytics
                                                                        -- 8 = Azure SQL Managed Instance
                                                                        -- 9 = Azure SQL Edge (For all editions of Azure SQL Edge)
                                                                        -- 11 = Azure Synapse serverless SQL pool
                                    )
                            ) > 0
                        AND IIF(a.mix_Advantage_AMT > 0.0
                               ,p.mix_Advantage_AMT / a.mix_Advantage_AMT
                               ,0.0) > 0.02
                       ,NCHAR(167) + N'> Consider Nonclustered Columnstore?'
                       ,N'')
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'P'                                -- parent level composite record
           AND COALESCE(Missing_index_CNT           ,0) >= 3
           AND COALESCE(Nonclustered_ColumnStore_CNT,0)  = 0
       ) AS p
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'A') AS a -- instance level composite record
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Missing Indexes diagnostics - table candidate for nonclustered columnstore'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Possible temporary object based on name',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS **
\******************************************************************************************************************************************/
-- Diagnostic - Object - possible temporary object based on name
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT DISTINCT -- needed since a name can be flagged multiple times
       c.rec_type
      ,c.database_id
      ,c.parent_object_id
      ,c.object_id
      ,c.index_ID
      ,c.type
      ,diagnostic         = N'[POTENTIAL TEMPORARY OBJECT]'
  FROM (--
        SELECT c.rec_type
              ,c.database_id
              ,c.parent_object_id
              ,c.object_id
              ,c.index_id
              ,c.type
              ,diagnostic = IIF(    c.name NOT LIKE N'%TEMPLATE%'
                                AND c.name NOT LIKE N'%HOLD'
                                AND c.name NOT LIKE N'%ERRORLOG%'
                                AND (   c.name LIKE N'BAK%'       OR c.name LIKE N'%BAK'
                                     OR c.name LIKE N'BK%'        OR c.name LIKE N'%BK'
                                     OR c.name LIKE N'%BACKUP%'
                                     OR c.name LIKE N'%BCKUP%'
                                     OR c.name LIKE N'%BKP%'
                                     OR c.name LIKE N'%BKUP%'
                                     OR c.name LIKE N'%_BK_%'
                                     OR c.name LIKE N'COPY%'      OR c.name LIKE N'%COPY'
                                     OR c.name LIKE N'%DELETE%'
                                     OR c.name LIKE N'%DEMO%'
                                     OR c.name LIKE N'%DEPRECATE%'
                                     OR c.name LIKE N'_DTA_INDEX%'
                                     OR c.name LIKE N'%ERROR%'    OR c.name LIKE N'%ERR'  OR c.name LIKE N'ERR%'
                                     OR c.name LIKE N'HIDE%'
                                     OR c.name LIKE N'%[_]PERF[_]%'
                                     OR c.name LIKE N'REN_%'
                                     OR c.name LIKE N'%REFRESH%'
                                     OR c.name LIKE N'%ROLLBACK%'
                                     OR c.name LIKE N'%TBD%'
                                     OR c.name LIKE N'%TEMP'      OR c.name LIKE N'TEMP%' OR c.name LIKE N'%TMP'  OR c.name LIKE N'TMP%'
                                     OR c.name LIKE N'%XX%'
                                     OR c.name LIKE N'%ZZ%'
                                     OR c.name LIKE N'%$%'
                                     -----------------------------------------------------------------
                                     OR (c.name LIKE N'%OLD'     AND c.name NOT LIKE N'%THRESHOLD')
                                     -----------------------------------------------------------------
                                     OR c.name LIKE N'%\_TRACE'
                                     OR c.name LIKE N'TRACE%'
                                     -----------------------------------------------------------------
                                     OR ISDATE(LEFT(n.nbr,6))  = 1
                                     OR ISDATE(LEFT(n.nbr,8))  = 1
                                     OR ISDATE(RIGHT(n.nbr,6)) = 1
                                     OR ISDATE(RIGHT(n.nbr,8)) = 1
                                     OR ISDATE(RIGHT(n.nbr,4) + LEFT(n.nbr,4)) = 1
                                     OR CAST(n.nbr AS INT) BETWEEN YEAR(GETDATE()) - 40 AND YEAR(GETDATE()) + 40
                                    )
                               ,N'[POTENTIAL TEMPORARY OBJECT]',NULL)
              ,c.name
              ,n.nbr
          FROM [##SQLXL_Index_Compilation] AS c
         OUTER
         APPLY (SELECT string FROM [dbo].[SQLXL_Parse_Strings](c.name,N' '))    AS p1 -- parse by blanks
         OUTER
         APPLY (SELECT string FROM [dbo].[SQLXL_Parse_Strings](p1.string,N'_')) AS p2 -- parse by underscores
         OUTER
         APPLY (SELECT string FROM [dbo].[SQLXL_Parse_Strings](p2.string,N'-')) AS p3 -- parse by dashes
         OUTER -- get the numbers in the name to check if they are a date
         APPLY (SELECT nbr = [dbo].[SQLXL_Keep_Strings](p3.string,N'0-9',N''))  AS n  -- only get the numbers to check for a date
         WHERE c.is_system_named = 0
           AND c.is_ms_shipped   = 0
           AND c.obj_type       <> N'IT' -- Not a system internal table
       ) c
 WHERE c.diagnostic IS NOT NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Possible temporary object based on name'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/*#########################################################################################################################################\
############################################################################################################################################
** Prescriptions Prescriptions Prescriptions Prescriptions Prescriptions Prescriptions Prescriptions Prescriptions Prescriptions Prescrip **
############################################################################################################################################
\#########################################################################################################################################*/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @cover_foreign_keys TINYINT = 1
--*/

/******************************************************************************************************************************************\
** FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CO **
\******************************************************************************************************************************************/
-- This code stands alone since only 3 choices available for FKCs
-- Retain - Foreign Key Constraints that are enabled, trusted, and replicable
-- Review - Foreign Key Constraints that are NOT enabled, trusted, or replicable
-- REMOVE - Foreign Key Constraints that are redundant (same or overlapping key sequence)
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT src.database_id
      ,src.parent_object_id
      ,src.object_id
      ,src.type,
--*/
       prescription = CASE WHEN sx.object_id <> s.object_id -- index_id = object_id for a foreign key constraint
                           THEN N'Remove FKC' + NCHAR(167) + N' Redundant'
                           WHEN (   sx.object_id = s.object_id
                                 OR s.object_id IS NULL
                                )
                            AND src.is_disabled                = 0
                            AND src.is_not_trusted             = 0
                            AND (   src.is_not_for_replication = 1
                                 OR t.is_replicated            = 0
                                )
                            AND COALESCE(s.ovl,0)            = 0
                            AND COALESCE(s.con,0)            = 0
                           THEN N'Retain FKC'
                           ELSE  N'Review FKC'
                               + IIF(   src.is_disabled            = 1
                                     OR src.is_not_trusted         = 1
                                     OR src.is_not_for_replication = 0
                                    , NCHAR(167)
                                    + STUFF( IIF(src.is_disabled          = 1,N' & Enable' ,N'')
                                           + IIF(src.is_not_trusted       = 1,N' & Trust'  ,N'')
                                           + IIF(src.is_not_for_replication = 0 AND t.is_replicated = 1
                                                ,N' & Disable Replication'
                                                ,N'')
                                           ,1,2,N'')
                                    ,N'')
                               + IIF(   COALESCE(s.ovl,0)            = 1
                                     OR COALESCE(s.con,0)            = 1
                                    , NCHAR(167)
                                    + STUFF( IIF(COALESCE(s.ovl,0)    = 1,N', Overlaps' ,N'')
                                           + IIF(COALESCE(s.con,0)    = 1,N', Contained',N'')
                                           ,1,1,N'')
                                    ,N'')
                      END
/*** LOCAL TESTING ***
SELECT *
--*/
  FROM (-- All foreign key constraints
        SELECT *
          FROM [##SQLXL_Index_sys_objects]
         WHERE type = N'F'                      -- foreign key constraint
       ) AS src
  JOIN [##SQLXL_Index_sys_objects] AS t         -- table information
    ON src.database_id      = t.database_id
   AND src.parent_object_id = t.object_id
  JOIN [##SQLXL_Index_Compilation] AS tgt
    ON src.database_id      = tgt.database_id
   AND src.parent_object_id = tgt.parent_object_id
   AND src.object_id        = tgt.object_id
   AND src.object_id        = tgt.index_id
   AND src.type             = tgt.type
  LEFT OUTER
  JOIN (--
        SELECT database_id
              ,parent_object_id
              ,object_id = l_object_id
              ,seq = MAX(IIF(matching_sequence_CNT  > 0,1,0))
              ,ovl = MAX(IIF(matching_overlap_CNT   > 0,1,0))
              ,con = MAX(IIF(matching_contained_CNT > 0 AND lc_key_CNT < rc_key_CNT,1,0))
          FROM [##SQLXL_Index_Synergies] AS s
         WHERE l_type = N'F' -- foreign key constraint
           AND r_type = N'F' -- foreign key constraint
           AND matching_sequence_CNT = lc_key_CNT
           AND matching_sequence_CNT = rc_key_CNT
         GROUP BY
               database_id
              ,parent_object_id
              ,l_object_id
       ) AS s
    ON src.database_id      = s.database_id
   AND src.parent_object_id = s.parent_object_id
   AND src.object_id        = s.object_id
 OUTER
 APPLY (-- If a redundant Foreign Key sequence found, choose one who's heart will live on (in order):
        -- enabled
        -- trusted
        -- replicable
        -- with most columns
        -- not system named
        -- published, schema published
        -- delete action enabled, update action enabled
        -- first built
        SELECT TOP (1)
               object_id = sy.r_object_id
          FROM [##SQLXL_Index_Synergies]  AS sx
          JOIN [##SQLXL_Index_Synergies]  AS sy
            ON sx.database_id           = sy.database_id
           AND sx.parent_object_id      = sy.parent_object_id
           AND sx.matching_sequence_col = sy.matching_sequence_col
           AND N'F'                     = sy.l_type                -- foreign key constraint
           AND N'F'                     = sy.r_type                -- foreign key constraint
          JOIN [##SQLXL_Index_sys_objects] AS fk
            ON sy.database_id      = fk.database_id
           AND sy.parent_object_id = fk.parent_object_id
           AND sy.l_index_id       = fk.object_id
           AND N'F'                = fk.type                       -- foreign key constraint
         WHERE s.seq              > 0
           AND s.database_id      = sx.database_id
           AND s.parent_object_id = sx.parent_object_id
           AND s.object_id        = sx.l_object_id
           AND s.object_id        = sx.l_index_id
           AND N'F'               = sx.l_type                      -- foreign key constraint
           AND N'F'               = sx.r_type                      -- foreign key constraint
           AND 0                  < sx.matching_sequence_CNT
         ORDER BY
               fk.is_disabled
              ,fk.is_not_trusted
              ,sx.matching_sequence_CNT  DESC
              ,CASE WHEN fk.delete_referential_action = 0 THEN 4   -- 0 = No action,1 = Cascade,2 = Set null,3 = Set default
                    ELSE fk.delete_referential_action
               END
              ,CASE WHEN fk.update_referential_action = 0 THEN 4   -- 0 = No action,1 = Cascade,2 = Set null,3 = Set default
                    ELSE fk.update_referential_action
               END
              ,fk.is_published           DESC
              ,fk.is_schema_published    DESC
              ,fk.is_not_for_replication
              ,fk.object_id
              ,fk.is_system_named
       ) AS sx
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Foreign Key Constraints - Retain, Review, Remove'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;
--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - Nonclustered rowstore with key sequence matching Clustered index
-- Moved here since no good reason for index to exist except full scans on key elements
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription =  N'Remove'
                     + NCHAR(167) + N' Overlaps CX Seq'
                                 + CASE WHEN i.is_primary_key         = 1
                                        THEN NCHAR(167) + N' Add PK to CX'
                                        WHEN i.is_unique_constraint   = 1
                                         AND ncr.is_primary_key       = 0
                                         AND ncr.is_unique_constraint = 0
                                        THEN NCHAR(167) + N' Add UQ to CX'
                                        WHEN i.is_unique              = 1
                                         AND ncr.is_primary_key       = 0
                                         AND ncr.is_unique_constraint = 0
                                         AND ncr.is_unique            = 0
                                        THEN NCHAR(167) + N' Add UNIQ to CX'
                                        ELSE N''
                                   END
                     + NCHAR(167) + N'Review'
                     + NCHAR(167) + N' Check app for key scan'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (--
        SELECT s.database_id
              ,s.parent_object_id
              ,s.l_index_id
              ,s.l_type
              ,il.is_primary_key
              ,il.is_unique_constraint
              ,il.is_unique
              ,s.r_index_id
              ,s.r_type
              ,s.rc_key_CNT
              ,s.matching_sequence_CNT
              ,s.matching_sequence_COL
              ,pct_of_table            = 1.0 * s.matching_sequence_all_density * il.row_CNT
          FROM [##SQLXL_Index_Synergies]   AS s
          JOIN [##SQLXL_Index_Compilation] AS il
            ON N'I'                    = il.rec_type             -- index level composite record
           AND s.database_id           = il.database_id
           AND s.parent_object_id      = il.parent_object_id
           AND s.l_index_id            = il.index_ID
           AND s.l_type                = il.type
         WHERE s.matching_sequence_CNT > 0
           AND s.l_type                = N'1'                    -- Clustered rowstore index
           AND s.r_type                = N'2'                    -- Nonclustered rowstore index
           -----------------------------------------------------------
           AND (   (    il.is_unique   = 1                       -- Clustered index unique (include PK & UQ) and all keys match
                    AND s.lc_key_CNT   = s.matching_sequence_CNT
                   )
                OR s.rc_key_CNT BETWEEN s.matching_sequence_CNT AND s.lc_key_CNT -- Nonclustered fully contained in clustered
               )
       ) ncr
    ON i.database_id              = ncr.database_id
   AND i.parent_object_id         = ncr.parent_object_id
   AND i.object_id                = ncr.parent_object_id
   AND i.index_id                 = ncr.r_index_id
   AND i.type                     = ncr.r_type
 WHERE i.prescription IS NULL                                   -- Keep index if flagged previously
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Remove - Nonclustered rowstore with key sequence matching Clustered index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/* ORIGINAL DEFAULTS - incorporated into below
      ,tbl_default_action_type
                     = CASE WHEN tbl.is_filetable                    = 1     THEN N'Retain'  -- N'TBL FIL'
                            WHEN tbl.is_external                     = 1     THEN N'Retain'  -- N'TBL EXT'
                            WHEN tbl.temporal_type                   = 1     THEN N'Retain'  -- N'HST SVN'
                            WHEN tbl.temporal_type                   = 2     THEN N'Retain'  -- N'TBL SVN'
                            WHEN tbl.cdc_is_history_table            = 1     THEN N'Retain'  -- N'HST CDC'
                            WHEN tbl.ctt_is_track_columns_updated_on = 1     THEN NULL

                            WHEN tbl.ledger_type                     = 1     THEN N'Retain'  -- N'HST LDG '
                            WHEN tbl.ledger_type                     = 2     THEN N'Retain'  -- N'HST LDG UPD'
                            WHEN tbl.ledger_type                     = 3     THEN N'Retain'  -- N'HST LDG APP'
                            WHEN tbl.is_dropped_ledger_table         = 1     THEN N'Retain'  -- N'HST LDG DRP'

                            WHEN tgt.obj_type                        = N'V'  THEN N'Retain'  -- N'VW'      -- View
                            WHEN tgt.obj_type                        = N'TF'                 -- SQL table-valued-function SQL 2012+
                            THEN N'Retain'  -- N'TVF SQL'

                            WHEN tgt.obj_type                        = N'U'  THEN NULL       -- N'TBL'     -- User Table
                            WHEN ccs.is_clustered_columnstore        = 1     THEN NULL       -- N'TBL CCS'
                            WHEN tbl.is_replicated                   = 1     THEN NULL       -- N'TBL REP'
                            WHEN tbl.is_merge_published              = 1     THEN NULL       -- N'TBL MRG'
                            WHEN tbl.is_sync_tran_subscribed         = 1     THEN NULL       -- N'TBL SYN'
                            WHEN tbl.is_tracked_by_cdc               = 1     THEN NULL       -- N'TBL CDC'
                            WHEN tbl.is_memory_optimized             = 1     THEN NULL       -- N'TBL XTP'
                            WHEN itt.is_memory_optimized             = 1
                            THEN NULL                                                        -- N'TBL XTP', Internal table is optimized
                            WHEN tbl.is_remote_data_archive_enabled  = 1     THEN NULL       -- N'TBL RDA'

                            WHEN tbl.is_node                         = 1     THEN N'Retain'  -- N'GPH NOD'
                            WHEN tbl.is_edge                         = 1     THEN N'Retain'  -- N'GPH EDG'

                            ELSE                                                  tgt.parent_object_type
                       END
*/

----------------------------------------------------------------------------------------------------
-- Retain - System-Maintained History Table - CDC
-- Retain - System-Maintained History Table - Temporal
-- Retain - System-Maintained History Table - Ledger
-- Retain - Internal Tables - Temporal
-- Retain - Internal Tables - XML
-- Retain - Internal Tables - FullText
-- Retain - Internal Tables - Spatial
----------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = i.obj_type_hdr
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE i.obj_type_short_label IN (N'HST' -- History/archive table
                                 ,N'IT'  -- system internal table
                                 )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - System Internal & History tables'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Retain - Base Table Objects - Clustered index on Rowstore
-- Retain - Base Table Objects - Clustered Columnstore table
-- Retain - Base Table Objects - Heaps on Memory Tables
----------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = IIF(    i.type                    = N'0' -- rowstore heap
                          AND i.tbl_is_memory_optimized = 1
                         ,N'XTP HP'
                         ,i.type_short_desc)
  FROM [##SQLXL_Index_Compilation] AS i          -- only table source in query
 WHERE rec_type = N'I'                           -- index level composite record
   AND (   i.type IN (N'1'                       -- clustered rowstore index
                     ,N'5')                      -- clustered columnstore
        OR (    i.type                    = N'0' -- rowstore heap
            AND i.tbl_is_memory_optimized = 1    -- memory optimized
           )
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - underlying persisted data tables - HP, CX, CCS, XTP'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Retain - index types - XML
-- Retain - index types - Spatial
-- Retain - index types - Nonclustered Columnstore
-- Retain - index types - Hash on
-- Retain - index types - Full Text
----------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = COALESCE(i.type_short_desc,N'Missing Desc')
  FROM [##SQLXL_Index_Compilation] AS i  -- only table source in query
 WHERE rec_type = N'I'                   -- index level composite record
   AND i.type  IN (N'3'                  -- XML index
                  ,N'4'                  -- Spatial
                  ,N'6'                  -- Nonclustered ColumnStore
                  ,N'7'                  -- Hash on in-memory (XTP)
                  ,N'90'                 -- full-text index of a tabular object
                  )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - specialty indexes - XML, SPT, NCS, FTX'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- Retain - Required by others: Foreign Key Constraint reference
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = N'FKC Reference'
  FROM [##SQLXL_Index_Compilation] AS i                     -- only table source in query
 WHERE i.rec_type               = N'I'                      -- index level composite record
   AND i.rk_referencing_fkc_CNT > 0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Foreign Key Constraint reference'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- Retain - Required by others: Change Data Capture (CDC) Table - Primary Key or unique
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = N'Used by CDC'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
    ON i.database_id              = p.database_id
   AND i.object_id                = p.object_id
   AND i.name                     = p.cdc_index_name
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Change Data Capture (CDC) Table - Primary Key or unique'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- Retain - Required by others: Temporal (SVN) Table - Primary Key
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = N'Used by SVN'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN [##SQLXL_Index_sys_objects] AS tbl
    ON i.database_ID = tbl.database_id
   AND i.object_id   = tbl.object_id
 WHERE 2 = tbl.temporal_type -- SYSTEM_VERSIONED_TEMPORAL_TABLE
   AND 1 = i.is_primary_key
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Temporal (SVN) Table - Primary Key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- Retain - Required by others: Ledger (LDG) Table (2022+) - Primary Key
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = N'Used by Ledger'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN [##SQLXL_Index_sys_objects] AS tbl
    ON i.database_ID = tbl.database_id
   AND i.object_id   = tbl.object_id
 WHERE (   2 = tbl.ledger_type -- UPDATABLE_LEDGER_TABLE
        OR 3 = tbl.ledger_type -- APPEND_ONLY_LEDGER_TABLE
       )
   AND 1     = i.is_primary_key
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Ledger (LDG) Table (2022+) - Primary Key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- Retain - Required by others: XML Index
-- Retain - Required by others: Spatial (SPT) Index - can be multiple spatial indexes using a primary key
SELECT DISTINCT
       i.database_id
       ,i.parent_object_id
       ,i.object_id
       ,i.index_id
       ,i.type
       ,action_desc = N'Retain'
       ,sort        = @srt
      ,prescription = N'Used by ' +x.type_short_desc
  FROM (-- All clustered primary key "index" records
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type       = N'I' -- index level composite record
           AND is_primary_key = 1
           AND type           = N'1' -- clustered rowstore index
       ) AS i
  JOIN (-- All XML or SPATIAL indexes
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I' -- index level composite record
           AND (   N'3' = type -- XML index
                OR N'4' = type -- Spatial Index
               )
       ) AS x
    ON i.database_id      = x.database_id
   AND i.parent_object_id = x.parent_object_id
   AND i.object_id        = x.object_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: XML Index, Spatial (SPT) Index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- Retain - Required by others: Full Text (FTX) Index - Primary Key or Unique
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = N'Used by ' + f.type_short_desc
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS f
    ON i.database_id      = f.database_id
   AND i.parent_object_id = f.parent_object_id
   AND i.object_id        = f.object_id
   AND i.index_id         = f.ftx_unique_index_ID
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Full Text (FTX) Index - Primary Key or Unique'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- Retain - Required by others: Constraints - Primary Key - NOTE: does not filter out NOCHECKS <FUTURE>
-- Retain - Required by others: Constraints - Unique Key - NOTE: does not filter out NOCHECKS  <FUTURE>
SELECT c.database_id
      ,c.parent_object_id
      ,object_id    = c.parent_object_id    -- want to tie to table & index
      ,index_id     = c.key_unique_index_id
      ,type         = i.type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = N'Used by ' + CASE c.type WHEN N'PK' THEN N'PKC'
                                                WHEN N'UQ' THEN N'UQC'
                                                ELSE c.type
                                    END
  FROM [##SQLXL_Index_sys_objects] AS c
  JOIN [##SQLXL_Index_sys_indexes] AS i
    ON c.database_id         = i.database_id
   AND c.parent_object_id    = i.object_id
   AND c.key_unique_index_id = i.index_id
   AND i.type IN (N'1' -- clustered rowstore index
                 ,N'2' -- nonclustered rowstore index
                 )
 WHERE c.key_unique_index_id > 0
   AND c.type IN (N'PK',N'UQ')
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Constraints - Primary Key, Unique Key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

----------------------------------------------------------------------------------------------------
-- Retain - "Best" covering index for Active Foreign Key - CX over NCX, no filter, most read, narrowest, fewest keys, narrowest includes
-- Review - "Best" covering index for InActive Foreign Key - CX over NCX, no filter, most read, narrowest, fewest keys, narrowest includes
--          "Best" previously computed in "Foreign Key Analysis". Grouped in case multiple FK covered by same index
-- NOTE: Can't use Nonclustered Columnstore to cover a Foreign Key Parent
-- NOTE: Returns values only if variable @cover_foreign_keys = 1
-- @cover_foreign_keys:
--  0 = no need to continue to cover Foreign Key Constraints, do not create new indexes based on MISSING index recommendations
--  1 = continue to cover keys that are TRUSTED, ENABLED, and REPLICATED & are DELETE or UPDATE referential action enabled
--      Includes creating new indexes based on MISSING index recommendations
--  2 = continue to cover all Foreign Key Constraints that are TRUSTED, ENABLED, and REPLICATED
--      Includes creating new indexes based on MISSING index recommendations
--  3 = continue to cover all Foreign Key Constraints regardless of status
--      Includes creating new indexes based on MISSING index recommendations
----------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0
       ,@cover_foreign_keys TINYINT = 2;
--*/
SELECT DISTINCT -- needed because there can be redundant foreign keys
       fk.database_id
      ,fk.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,IIF(fk.active = 1,N'Retain',N'Review')
      ,@srt
      ,prescription = N'Covers ' + IIF(fk.active = 1,N'',N'NFC ') + N'FKC'
  FROM (-- get Foreign Key Constraints to cover based on passed in parameter

/*** LOCAL TESTING ***
DECLARE @srt INT = 0
       ,@cover_foreign_keys TINYINT = 2;
--*/
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,is_disabled
              ,is_not_for_replication
              ,is_not_trusted
              ,delete_referential_action
              ,update_referential_action
              ,active = IIF(    is_disabled    = 0    -- are enabled
                            AND is_not_trusted = 0    -- and trusted
                           ,1
                           ,0)
          FROM [##SQLXL_Index_sys_objects] AS fk
         WHERE 1 = 1
           AND fk.type = N'F'                         -- foreign key constraint
           AND (   (    @cover_foreign_keys = 1
                    AND (    is_disabled    = 0
                         AND is_not_trusted = 0
                        )
                    AND (   delete_referential_action > 0
                         OR update_referential_action > 0
                        )
                   )
                OR (    @cover_foreign_keys = 2
                    AND (    is_disabled    = 0
                         AND is_not_trusted = 0
                        )
                   )
                OR (    @cover_foreign_keys = 3
                   )
               )
       ) AS fk
  JOIN (--
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
              ,fkc_covering_primary_idx_ID
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'                        -- index level composite record
           AND N'F'     = type                        -- foreign key constraint
           AND 0        < fkc_covering_primary_idx_ID
       ) AS fx
    ON fk.database_id                 = fx.database_id
   AND fk.parent_object_id            = fx.parent_object_id
   AND fk.object_id                   = fx.object_id
   AND fk.object_id                   = fx.index_id
  JOIN (--
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,index_id
              ,type
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'  -- index level composite record
           AND type    IN (N'1' -- clustered rowstore index
                          ,N'2' -- nonclustered rowstore index
                          )
       ) AS i
    ON fk.database_id                  = i.database_id
   AND fk.parent_object_id             = i.parent_object_id
   AND fk.parent_object_id             = i.object_id
   AND fx.fkc_covering_primary_idx_ID  = i.index_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - Best existing covering index for FKC'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Retain - Nonclustered rowstore indexes with NO WRITES & Poor usage
-- Review - Nonclustered rowstore indexes with NO WRITES & Low usage
-- Remove - Nonclustered rowstore indexes with NO WRITES & No usage
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = CASE WHEN i.ops_read_to_parent_PCT > 0.5 OR i.ius_read_to_parent_PCT > 0.5
                           THEN N'Retain'
                           WHEN i.ops_read_to_parent_PCT > 0.0 OR i.ius_read_to_parent_PCT > 0.0
                           THEN N'Review'
                           ELSE N'Remove'
                      END
      ,@srt
      ,prescription = CASE WHEN i.ops_read_to_parent_PCT > 0.5 OR i.ius_read_to_parent_PCT > 0.5
                           THEN N'No WRT some RDS'
                           WHEN i.ops_read_to_parent_PCT > 0.0 OR i.ius_read_to_parent_PCT > 0.0
                           THEN N'No WRT low RDS'
                           ELSE N'No WRT No RDS'
                      END
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.parent_object_id
   ---------------------------------------------------------------------------
   AND i.obj_type             = N'U' -- User Table
   AND i.type                 = N'2' -- Nonclustered rowstore index
   AND i.tbl_is_heap          = 0
   AND i.ops_total_write_CNT  = 0
   AND i.ius_user_updates_CNT = 0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - Nonclustered rowstore indexes with NO WRITES & Poor/Low/No usage'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Update all Retained objects up to this point
\******************************************************************************************************************************************/
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = N'Retain'
                     + STUFF(-- Strip off leading unnecessary characters
                             (--
                              SELECT NCHAR(167) + N' ' + rex.prescription
                                FROM #prescription    AS rex
                               WHERE i.database_id                = rex.database_id
                                 AND i.parent_object_id           = rex.parent_object_id
                                 AND i.object_id                  = rex.object_id
                                 AND i.index_ID                   = rex.index_ID
                                 AND i.type                       = rex.type
                                 AND N'Retain'                    = rex.action_desc
                               ORDER BY
                                     rex.srt
                                 FOR XML PATH(N''), TYPE
                             ).value('(./text())[1]',N'NVARCHAR(MAX)')
                            ,1,1,N'')
  FROM (-- just get list of indexes to update
        SELECT DISTINCT
               database_id,parent_object_id,object_id,index_id,TYPE
          FROM #prescription
         WHERE action_desc   = N'Retain'
           AND prescription IS NOT NULL
       ) ref
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
    ON ref.database_id            = i.database_id
   AND ref.parent_object_id       = i.parent_object_id
   AND ref.object_id              = i.object_id
   AND ref.index_ID               = i.index_ID
   AND ref.type                   = i.type
   AND i.prescription IS NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Apply Retain labels to indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE FROM #prescription WHERE action_desc = N'Retain'; -- already updated appropriate values

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Clear out interim results table - Retain'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - Heaps - Create CX on used table's unique auto-generated column - Identity, Sequence, NEWID, SEQUENTIALID
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Request'
      ,sort         = @srt
      ,prescription = N'CX ' +i.tbl_cx_uniq_ordered_column_TYP -- get autogen type
                    + IIF(uniq_idx.index_id IS NOT NULL
                         , IIF(   uniq_idx.is_primary_key       = 1
                               OR uniq_idx.is_unique_constraint = 1
                              , IIF(uniq_idx.is_primary_key       = 1,N' USE IDX PK ' + QUOTENAME(uniq_idx.index_id),N'')
                              + IIF(uniq_idx.is_unique_constraint = 1,N' USE IDX UQ ' + QUOTENAME(uniq_idx.index_id),N'')
                              ,N' USE IDX ' + QUOTENAME(uniq_idx.index_id)
                              )
                         + IIF(uniq_idx.is_primary_key       = 1,NCHAR(167) + N' Make PK',N'')
                         + IIF(uniq_idx.is_unique_constraint = 1,NCHAR(167) + N' Make UNIQUE',N'')
                         ,N' See candidate')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.parent_object_id
 OUTER
 APPLY (--
        SELECT TOP 1
               ic.index_id
              ,ix.is_primary_key
              ,ix.is_unique_constraint
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_indexes]       AS ix
            ON ic.database_id                  = ix.database_id
           AND ic.object_id                    = ix.object_id
           AND ic.index_id                     = ix.index_id
           AND ic.type                         = ix.type
         WHERE i.database_id                   = ic.database_id
           AND i.object_id                     = ic.object_id
           AND i.tbl_cx_uniq_ordered_column_ID = ic.column_id
           AND ic.type                         = N'2'                   -- nonclustered rowstore index
           AND 1                               = ic.key_column_sequence
         ORDER BY
               ix.is_primary_key       DESC
              ,ix.is_unique_constraint DESC
              ,ix.index_id
       ) AS uniq_idx
 WHERE i.parent_object_type         = N'U' -- User Table
   AND i.type                       = N'0' -- rowstore heap
   AND i.tbl_is_memory_optimized    = 0    -- Memory-optimized tables don't have CLUSTERED INDEXES, just HEAPS
   AND i.tbl_cx_uniq_ordered_column_TYP IS NOT NULL
   ---------------------------------------------------------
   AND (   p.ius_User_total_CNT     > 0    -- gotta hafta be used
        OR p.ops_total_contacts_CNT > 0    -- gotta hafta be used
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Request - clustered index on heaps with UNIQUE ORDERED columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - Nonclustered indexes on HEAPS replaced by new CLUSTERED index using Sequential Unique key column
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,tgt.parent_object_id,i.object_id,i.index_id,i.type,
--*/
       prescription = N'Remove' + NCHAR(167) + N' Use new CX on ' + tgt.tbl_cx_uniq_ordered_column_TYP
  FROM (--
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,tbl_cx_uniq_ordered_column_ID
              ,tbl_cx_uniq_ordered_column_TYP
              ,prescription
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type                      = N'I'              -- index level composite record
           AND type                          = N'0'              -- rowstore heap
           AND tbl_cx_uniq_ordered_column_ID > 0
           AND tbl_is_memory_optimized       = 0
       ) AS tgt
  JOIN [##SQLXL_Index_sys_index_columns] AS i
    ON tgt.database_id                   = i.database_id
   AND tgt.object_id                     = i.object_id
   AND N'2'                              = i.type                -- nonclustered rowstore index
   AND tgt.tbl_cx_uniq_ordered_column_ID = i.column_id
   AND 1                                 = i.key_column_sequence
  JOIN [##SQLXL_Index_Compilation]       AS p
    ON N'P'          = p.rec_type                                -- parent level composite record
   AND i.database_id = p.database_id
   AND i.object_id   = p.object_id
 WHERE (   p.ius_User_total_CNT     > 0                          -- gotta hafta be used
        OR p.ops_total_contacts_CNT > 0                          -- gotta hafta be used
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Remove - replace nonclustered on former heaps'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - "Best" Missing index for covering uncovered Foreign Key Constraints - key columns only
--------------------------------------------------------------------------------------------------------------------------------------------
IF @cover_foreign_keys > 0 BEGIN
   SET @srt += 1;

   INSERT
     INTO #prescription
   /*** LOCAL TESTING ***
   DECLARE @srt INT = 0;
   --*/
   SELECT i.database_id
         ,i.parent_object_id
         ,i.object_id
         ,i.index_id
         ,i.type
         ,action_desc  = N'Request'
         ,sort         = @srt
            ,prescription = N'MIX > FKC'
        FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
        JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS fk
          ON i.database_id                    = fk.database_id
         AND i.parent_object_id               = fk.parent_object_id
         AND i.index_ID                       = fk.fkc_candidate_covering_MIX_ID
         AND i.Key_Columns_CNT                = fk.Key_Columns_CNT
         AND i.Included_Columns_CNT           = 0
       WHERE i.TYPE                           = N'M' -- missing nonclustered rowstore index
         AND fk.fkc_candidate_covering_MIX_ID > 0
         AND fk.fkc_covering_primary_idx_ID  IS NULL
   OPTION (MAXDOP 1,RECOMPILE);
END; -- IF @cover_foreign_keys > 0

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Request - best missing index to cover FKC'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - Heaps - Create CX using unique NCX (no auto-generated unique Column) - smallest, uniquest, fewest keys, most usedest
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Request'
      ,sort         = @srt
      ,prescription = N'CX from NCX ' + CAST(i.tbl_smallest_uniq_Nonclustered_idx AS NVARCHAR(20))
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.parent_object_id
  LEFT OUTER
  JOIN #prescription AS a
    ON i.database_id             = a.database_id
   AND i.parent_object_id        = a.parent_object_id
   AND i.object_id               = a.object_id
   AND i.index_ID                = a.index_ID
   AND i.type                    = a.type
 WHERE i.parent_object_type      = N'U' -- User Table
   AND i.type                    = N'0' -- rowstore heap
   AND i.tbl_is_memory_optimized = 0    -- Memory-optimized tables don't have CLUSTERED INDEXES
   ---------------------------------------------------------
   AND (   p.ius_User_total_CNT     > 0 -- gotta hafta be used
        OR p.ops_total_contacts_CNT > 0 -- gotta hafta be used
       )
   ---------------------------------------------------------
   AND i.tbl_smallest_uniq_Nonclustered_idx IS NOT NULL
   AND a.type                     IS NULL  -- not already flagged above
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Request - Promote NCX to CX on HEAP'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - Heaps - Create CX from smallest "unique" column greater than a BIT
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Request'
      ,sort         = @srt
      ,prescription = N'CX Candidate Col'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.parent_object_id
  LEFT OUTER
  JOIN #prescription               AS a
    ON i.database_id                = a.database_id
   AND i.parent_object_id           = a.parent_object_id
   AND i.object_id                  = a.object_id
   AND i.index_ID                   = a.index_ID
   AND i.type                       = a.type
 WHERE i.parent_object_type         = N'U' -- User Table
   AND i.type                       = N'0' -- rowstore heap
   AND i.tbl_is_memory_optimized    = 0    -- Memory-optimized tables don't have CLUSTERED INDEXES
   ---------------------------------------------------------
   AND (   p.ius_User_total_CNT     > 0    -- gotta hafta be used
        OR p.ops_total_contacts_CNT > 0    -- gotta hafta be used
       )
   ---------------------------------------------------------
   AND a.type                     IS NULL  -- not already flagged above
   AND i.key_column_info        LIKE N'<HEAP> Candidate clustering column:%'
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Request - Unique-est column on HEAP'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - Heaps with Activity - Indicate a clustered index will help
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Request'
      ,sort         = @srt
      ,prescription = N'Create Uniq CX'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.parent_object_id

  LEFT OUTER
  JOIN #prescription              AS a
    ON i.database_id               = a.database_id
   AND i.parent_object_id          = a.parent_object_id
   AND i.object_id                 = a.object_id
   AND i.index_ID                  = a.index_ID
   AND i.type                      = a.type

 WHERE i.parent_object_type        = N'U'  -- User Table
   AND i.type                      = N'0'  -- rowstore heap
   AND i.tbl_is_memory_optimized   = 0     -- Memory-optimized tables don't have CLUSTERED INDEXES
   ---------------------------------------------------------
   AND (   p.ius_User_total_CNT     > 0    -- gotta hafta be used
        OR p.ops_total_contacts_CNT > 0    -- gotta hafta be used
       )
   ---------------------------------------------------------
   AND a.type                     IS NULL -- not already flagged above
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Request - Heap benefitting from CX'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - SQL Table-Valued Functions without Clustered Index
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,action_desc  = N'Request'
      ,sort         = @srt
      ,prescription = N' Create Uniq CX'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record

  LEFT OUTER
  JOIN #prescription     AS a
    ON i.database_id      = a.database_id
   AND i.parent_object_id = a.parent_object_id
   AND i.object_id        = a.object_id
   AND i.index_ID         = a.index_ID
   AND i.type             = a.type
 WHERE i.parent_object_type = N'TF' -- SQL table-valued-function SQL 2012+
   AND i.type               = N'0'  -- rowstore heap
   AND a.type              IS NULL -- not already flagged above
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Request - TVF without unique CX'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Update REQUEST (CREATE)
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = COALESCE(i.prescription + NCHAR(167),N'')
                     + N'Request'
                     + (--
                        SELECT NCHAR(167) + N' ' + rex.prescription
                          FROM #prescription     AS rex
                         WHERE i.database_id      = rex.database_id
                           AND i.parent_object_id = rex.parent_object_id
                           AND i.object_id        = rex.object_id
                           AND i.index_ID         = rex.index_ID
                           AND i.type             = rex.type
                           AND N'Request'         = rex.action_desc
                         ORDER BY
                               rex.srt
                           FOR XML PATH(N''), TYPE
                       ).value('(./text())[1]',N'NVARCHAR(MAX)')

  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record

  JOIN (--
        SELECT DISTINCT
               database_id,parent_object_id,object_id,index_id,TYPE
          FROM #prescription
         WHERE action_desc              = N'Request'
       ) ref
    ON i.database_id      = ref.database_id
   AND i.parent_object_id = ref.parent_object_id
   AND i.object_id        = ref.object_id
   AND i.index_ID         = ref.index_ID
   AND i.type             = ref.type
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Apply Request labels to indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM #prescription
 WHERE action_desc = N'Request' -- already updated appropriate values
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Clear out interim results table - Request'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- BEGIN Special Case - Heaps not flagged as candidates for Clustered index
\******************************************************************************************************************************************/
-- Retain - Unused Heaps not flagged as candidates for Clustering index
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = N'Retain HP'
  FROM [##SQLXL_Index_Compilation] AS i    -- only table source in query
 WHERE i.rec_type                  = N'I'  -- index level composite record
   AND i.parent_object_type        = N'U'  -- User Table
   AND i.type                      = N'0'  -- rowstore heap
   AND i.tbl_is_memory_optimized   = 0     -- Memory-optimized tables don't have CLUSTERED INDEXES
   AND i.prescription             IS NULL  -- not already flagged above
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - unused heap'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- END Special Case
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
-- What about a Nonclustered ColumnStore? Gotta be on 2016+ to be updatable
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Find indexes with table options and key column data types that can't be included in Nonclustered Columnstore indexes
-- Create temp table and use this list to exclude them below
-- For further reference see https:/docs.microsoft.com/en-us/sql/t-sql/statements/create-columnstore-index-transact-sql
--------------------------------------------------------------------------------------------------------------------------------------------
SELECT ic.database_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
  INTO #index_Key_DataType_Not_Eligible_for_NCS
/*** LOCAL TESTING ***
SELECT ic.database_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
--*/
  FROM [##SQLXL_Index_Startup]           AS sis
 CROSS
  JOIN [##SQLXL_Index_sys_index_columns] AS ic
  JOIN [##SQLXL_Index_column]            AS c
    ON ic.database_id = c.database_id
   AND ic.object_id   = c.object_id
   -- No object_id column in XL_IDX_column table
   AND ic.column_id   = c.column_id
 WHERE 13 <= sis.ProductMajorVersion  -- SQL 2016+
   AND 2  <> sis.EngineEdition        -- standard edition
   AND ic.type              IN (N'2' -- nonclustered rowstore index
                               ,N'M' -- missing nonclustered rowstore index
                               )
   AND ic.is_included_column = 0                         -- only care about KEY columns in new index
   AND 0                     = c.is_columnstore_eligible -- previously computed
 GROUP BY
       ic.database_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' #index_Key_DataType_Not_Eligible_for_NCS'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- List all Nonclustered and missing indexes that are candidates to be replaced by a Nonclustered Columnstore index
-- For Nonclustered index, must have been read/written to, and is not a "principally" used index
--------------------------------------------------------------------------------------------------------------------------------------------
SELEct I.Database_id,i.object_id,i.index_id,i.type
      ,excluded = CAST(CASE WHEN i.is_primary_key  = 1        THEN 1
                            WHEN i.cdc_index_name  = i.name   THEN 1
                            ELSE 0
                       END AS TINYINT)
      ,ius      = i.ius_read_to_parent_PCT
      ,rtw      = i.ius_read_to_write_RAT
      ,ios      = i.ops_read_to_parent_PCT
      ,stw      = i.ops_read_to_write_RAT
  INTO #Candidate_indexes_for_NCS
/*** LOCAL TESTING ***
SELECT i.database_id,i.object_id,i.index_id,i.type
      ,excluded = CAST(CASE WHEN i.is_primary_key  = 1        THEN 1
                            WHEN i.cdc_index_name  = i.name   THEN 1
                            ELSE 0
                       END AS TINYINT)
      ,ius      = i.ius_read_to_parent_PCT
      ,rtw      = i.ius_read_to_write_RAT
      ,ios      = i.ops_read_to_parent_PCT
      ,stw      = i.ops_read_to_write_RAT
--*/
  FROM [##SQLXL_Index_Startup] AS sis
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  LEFT OUTER
  JOIN #index_Key_DataType_Not_Eligible_for_NCS AS x
    ON i.database_id                             = x.database_id
   AND i.object_id                               = x.object_id
   AND i.index_ID                                = x.index_id
 WHERE 1 = 1
   AND 13 <= sis.ProductMajorVersion -- SQL 2016+
   AND 2  <> sis.EngineEdition       -- standard edition
   --------------------------------------------------------
   AND obj_type_short_label                  NOT IN (N'HST' -- Not a History/archive table
                                                    ,N'IT'  -- Not a system internal table
                                                    )
   AND COALESCE(i.Nonclustered_ColumnStore_CNT,0) = 0       -- Nonclustered columnstore doesn't alreay exist on table
   AND x.index_id                                IS NULL    -- all index key columns are eligible to be in Nonclustered columnstore
   --------------------------------------------------------
   AND (   (    i.type                            = N'2'    -- nonclustered rowstore index
            AND (   i.ops_read_to_parent_PCT      < 2.0     -- Read Usage < 2% of all reads on this table/view
                 OR i.ops_read_to_write_RAT       < 4.0     -- Reads/Writes < 4 Usage stats - writes = 4: memory lock, memory, index, log
                )
           )
        OR (    i.type                            = N'M'    -- missing nonclustered rowstore index
            AND i.ops_read_to_parent_PCT          < 2.0     -- MIX Usage > 2.0% of all reads on this table/view
           )
       )
   AND COALESCE(i.prescription,N'') NOT LIKE N'Remove%'     -- not flagged above
   AND COALESCE(i.prescription,N'') NOT LIKE N'Retain%'     -- not flagged above
   AND COALESCE(i.prescription,N'') NOT LIKE N'Request%'    -- not flagged above as Missing index to create to cover a Foreign Key
                                                            -- NOTE: Nonclustered Columnstores cannot cover a Foreign Key!
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' #Candidate_indexes_for_NCS'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/*** LOCAL TESTING ***
SELECT * FROM #index_Key_DataType_Not_Eligible_for_NCS ORDER BY 1,2,3
SELECT * FROM #Candidate_indexes_for_NCS ORDER BY 1,2,4,3
*/

--------------------------------------------------------------------------------------------------------------------------------------------
-- Total up the unique key columns & identify Nonclustered Columnstore candidates
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH cte AS (--
SELECT database_id
      ,object_id
      ,ncx = SUM(IIF(type = N'2',1,0)) -- nonclustered rowstore index
      ,mix = SUM(IIF(type = N'M',1,0)) -- missing nonclustered rowstore index
  FROM #Candidate_indexes_for_NCS
 WHERE excluded = 0
 GROUP BY
       database_id
      ,object_id
)
SELECT database_id
      ,object_id
  INTO #Candidate_for_NCS
  FROM cte
 WHERE COALESCE(ncx,0) + COALESCE(mix,0) > 3
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' #Candidate_for_NCS'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REPLACE - NEW Nonclustered Columnstore index to replace existing lo-use Nonclustered rowstores and candidate missing indexes
-- DOES NOT NEED a unique index to refer to
-- Omit tables with an already existing Nonclustered Columnstore
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE p
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.object_id,i.index_id,i.type,
--*/
       prescription = COALESCE(p.prescription + NCHAR(167),N'') -- should not be anything added before this point
                    + N'Request new NCS'                     -- NOTE: keep in synch with below ACTION codes
  FROM [##SQLXL_Index_Startup] AS sis
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation]WHERE rec_type = N'P') AS p  -- parent level composite record
  LEFT OUTER
  JOIN (-- tables that already have a Nonclustered or a Clustered Columnstore
        SELECT database_id
              ,parent_object_id
              ,object_id
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I'   -- index level composite record
           AND type    IN (N'5'  -- Clustered columnstore - SQL 2016+ allows for Nonclustered rowstore indexes on clustered Columnstore
                          ,N'6'  -- Nonclustered columnstore - updatable with SQL 2016+
                          )
         GROUP BY
               database_id
              ,parent_object_id
              ,object_id
       ) AS ncs
    ON p.database_id       = ncs.database_id
   AND p.parent_object_id  = ncs.object_id
   AND p.object_id         = ncs.object_id
  JOIN #Candidate_for_NCS AS c
    ON p.database_id       = c.database_id
   AND p.parent_object_id  = c.object_id
   AND p.object_id         = c.object_id
   AND p.index_id          = c.object_id
   AND p.type              = N'U' -- User Table
 WHERE 13 <= sis.ProductMajorVersion
   AND 2  <> (-- Can't run columnstore on STANDARD EDITION (2)
              SELECT EngineEdition = run_value
                FROM [##SQLXL_Instance_info]
               WHERE name   = N'EngineEdition'
                 AND source = N'SERVERPROPERTY'
             )
  AND ncs.object_id IS NULL  -- no existing Nonclustered columnstore on table
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' REPLACE - NEW Nonclustered Columnstore index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REPLACE - Nonclustered rowstore indexes, not Retained, replace with EXISTING Nonclustered Columnstore
-- REPLACE - Nonclustered rowstore indexes, not Retained, replace with NEW Nonclustered Columnstore
-- REJECT - Missing indexes, not Requested, accomodated by EXISTING Nonclustered Columnstore index
-- REJECT - Missing indexes, not Requested, accomodated by NEW Nonclustered Columnstore
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.object_id,i.index_id,i.type,
--*/
       prescription = IIF(i.type = N'M' -- missing nonclustered rowstore index
                         ,N'Reject'
                         ,N'Replace')
                    + NCHAR(167)
                    + N' Use ' + IIF(p.new_ncs = 1,N'new',N'existing') + N' NCS'
  FROM [##SQLXL_Index_Startup] AS sis
 CROSS
  JOIN (--
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE type IN (N'2' -- nonclustered rowstore index
                       ,N'M' -- missing nonclustered rowstore index
                       )
       ) AS i
  JOIN (--
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,new_ncs          = CAST(1 AS BIT)
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type     = N'P'                     -- parent level composite record
           AND prescription = N'Request new NCS'       -- NOTE: keep in synch with above ACTION codes

        UNION
        SELECT database_id
              ,parent_object_id
              ,object_id
              ,new_ncs = CAST(0 AS BIT)
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type = N'I' -- index level composite record
           AND type     = N'6' -- nonclustered columnstore index
       ) AS p
    ON i.database_id                            = p.database_id
   AND i.parent_object_id                       = p.parent_object_id
   AND i.object_id                              = p.object_id
  LEFT OUTER
  JOIN #index_Key_DataType_Not_Eligible_for_NCS AS x              -- Indexes that have columns unusable in Nonclustered columnstore
    ON i.database_id                            = x.database_id
   AND i.object_id                              = x.object_id
   AND i.index_ID                               = x.index_id
 WHERE 13 <= sis.ProductMajorVersion
   AND 2  <> (-- Can't run columnstore on STANDARD EDITION (2)
              SELECT EngineEdition = run_value
                FROM [##SQLXL_Instance_info]
               WHERE name   = N'EngineEdition'
                 AND source = N'SERVERPROPERTY'
             )
   AND x.index_id                              IS NULL -- Index keys data types are allowed in Nonclustered columnstore
   AND (   COALESCE(i.ius_read_to_parent_PCT,0.0) < 1.0  -- not used too much
        OR i.type = N'M'                                 -- missing nonclustered rowstore index
       )
   -- Index hasn't been called out before for action
   AND COALESCE(i.prescription,N'') NOT LIKE N'Remove%'  -- not flagged above
   AND COALESCE(i.prescription,N'') NOT LIKE N'Retain%'  -- not flagged above
   AND COALESCE(i.prescription,N'') NOT LIKE N'Request%' -- not flagged above as Missing index to create to cover a Foreign Key
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Nonclustered Columnstores - Request, Replace, Reject'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REQUEST - High Value Missing indexes - Large Advantage & significant usage not matching existing rowstore index
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = N'Request' + NCHAR(167) + N' MIX Hi Gain'
                    + IIF(tgt.Overlap_Code IS NOT NULL,NCHAR(167) + N' MIX Synergies',N'')
  FROM (SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type      = N'I'  -- index level composite record
           AND type          = N'M'  -- missing nonclustered rowstore index
           AND prescription IS NULL  -- not already flagged above
       ) AS tgt
 CROSS
  JOIN (--
        SELECT mix_Advantage_weighted_AMT
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type                   = N'A' -- instance level composite record
           AND mix_Advantage_weighted_AMT > 0
       ) AS ins
 WHERE (100.0 * tgt.mix_Advantage_weighted_AMT / ins.mix_Advantage_weighted_AMT) > 2.0 -- seems like a good enough number
       -- /zero handled by WHERE clause above
   AND NOT EXISTS (--
                   SELECT NULL
                     FROM [##SQLXL_Index_Synergies] AS o
                    WHERE tgt.database_id                 = o.database_id
                      AND tgt.parent_object_id            = o.parent_object_id
                      AND tgt.index_ID                    = o.l_index_id
                      AND tgt.type                        = o.l_type
                      AND N'2'                            = o.r_type           -- nonclustered rowstore index
                      AND (   o.matching_sequence_CNT    >= o.lc_key_CNT
                           OR o.matching_overlap_CNT     >= o.lc_key_CNT
                          )
                  )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Request - High Value Missing indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REJECT - Low value Missing indexes
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription  = N'Reject' + NCHAR(167) + N' MIX low Gain'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE i.type           = N'M' -- missing nonclustered rowstore index
   ------------------------------------------
   AND i.prescription IS NULL  -- haven't been flagged up to this point
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Reject - Low value Missing indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Retain - keep "best" sequence-matching non-filtered Nonclustered rowstore - not previously actioned and has statistics
-- <FUTURE> add: % of reads logic & if NCS available
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = N'Retain' + NCHAR(167) + N' Best Same Sequence'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (--
        SELECT rn = ROW_NUMBER() OVER (PARTITION BY seq.database_id
                                                   ,seq.parent_object_id
                                                   ,seq.matching_sequence_COL
                                           ORDER BY ----------------------------------------------------------------------------------------
                                                    -- find the bestest index based on their properties
                                                    ----------------------------------------------------------------------------------------
                                                 -- il.is_primary_key                  DESC -- PRIMARY KEY already Retained above
                                                 -- il.is_unique_constraint            DESC -- UNIQUE CONSTRAINT already Retained above
                                                    il.is_unique                       DESC -- is UNIQUE
                                                   ,il.ius_read_to_parent_PCT          DESC -- most used
                                                   ,il.stathdr_Average_Key_Length      DESC -- biggest
                                                   ,il.Key_Columns_CNT                 DESC -- most key elements
                                                   ,il.key_total_datatype_length_bytes DESC -- widest key
                                                   ,il.inc_total_datatype_length_bytes      -- fewest included columns
                                                   ,il.index_id
                                      )
               ,seq.database_id
               ,seq.parent_object_id
               ,il.object_id
               ,il.index_ID
               ,il.type
          FROM (-- Get list of all synergy SEQUENCES shared between Nonclustered rowstores. NOTE: only UNFILTERED indexes appear
                SELECT DISTINCT
                       o.database_id,o.parent_object_id,o.matching_sequence_COL
                  FROM [##SQLXL_Index_Synergies] AS o
                 WHERE o.l_type                        = N'2' -- nonclustered rowstore index
                   AND o.r_type                        = N'2' -- nonclustered rowstore index
                   AND LEFT(o.matching_sequence_COL,1) = N'S'
                ----------------------------------------------------------------------------------------------------------------------------
                -- Get list of all synergy SEQUENCES already used by Retained Clustered and Nonclustered rowstores
                -- PRIMARY KEY, UNIQUE CONSTRAINT, Clustered index already Retained above
                ----------------------------------------------------------------------------------------------------------------------------
                EXCEPT
                SELECT DISTINCT
                       il.database_id,il.parent_object_id,o.matching_sequence_COL
                  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS il      -- index level composite record
                  JOIN [##SQLXL_Index_Synergies] AS o
                    ON o.database_id                   = il.database_id
                   AND o.parent_object_id              = il.parent_object_id
                   AND o.l_index_id                    = il.index_ID
                   AND o.l_type                        = il.type
                 WHERE il.prescription LIKE 'Retain%'
                   AND il.type           IN (N'1' -- clustered rowstore index
                                            ,N'2' -- nonclustered rowstore index
                                            )
                   AND o.l_type          IN (N'1' -- clustered rowstore index
                                            ,N'2' -- nonclustered rowstore index
                                            )
                   AND o.r_type          IN (N'1' -- clustered rowstore index
                                            ,N'2' -- nonclustered rowstore index
                                            )
                   AND LEFT(o.matching_sequence_COL,1) = N'S'
               ) seq
          ---------------------------------------------------------------------------------------------------------------------------------
          -- rejoin to Synergies table to get the indexes sharing the synergy sequences found above
          ---------------------------------------------------------------------------------------------------------------------------------
          JOIN [##SQLXL_Index_Synergies] AS o
            ON seq.database_id           = o.database_id
           AND seq.parent_object_id      = o.parent_object_id
           AND seq.matching_sequence_COL = o.matching_sequence_COL
           AND N'2'                      = o.l_type                -- nonclustered rowstore index
           AND N'2'                      = o.r_type                -- nonclustered rowstore index
          ---------------------------------------------------------------------------------------------------------------------------------
          -- Get properties for candidate sequence indexes
          ---------------------------------------------------------------------------------------------------------------------------------
          JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS il              -- index level composite record
            ON seq.database_id                   = il.database_id
           AND seq.parent_object_id              = il.parent_object_id
           AND seq.parent_object_id              = il.object_id
           AND o.l_index_id                      = il.index_ID
           AND o.l_type                          = il.type
       ) ix
    ON i.database_id      = ix.database_id
   AND i.parent_object_id = ix.parent_object_id
   AND i.object_id        = ix.object_id
   AND i.index_ID         = ix.index_ID
   AND i.type             = ix.type
 WHERE ix.rn = 1
   AND i.prescription IS NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - keep "best" synergy key SEQUENCE index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - previously marked 'Retain' NCX with same key sequence as another Retained index, not flagged as replaced by NCS
-- <FUTURE> Review with next for purpose. is previous Retain removed by new REMOVE?
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = N'Remove' + NCHAR(167) + N' Use Retained NCX'
  FROM (--
        SELECT DISTINCT
               o.database_id
              ,o.parent_object_id
              ,index_id           = o.r_index_id  -- checking left side of overlap against right side Retained index
              ,type               = o.r_type      -- checking left side of overlap against right side Retained index
              ,o.matching_sequence_CNT
          FROM [##SQLXL_Index_Synergies]  AS o
          JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS l               -- index level composite record
            ON o.database_id                   = l.database_id
           AND o.parent_object_id              = l.parent_object_id
           AND o.l_index_id                    = l.index_ID
           AND o.l_type                        = l.type
         WHERE 1 = 1
           AND o.l_type                        = N'2'           -- nonclustered rowstore index
           AND o.r_type                        = N'2'           -- nonclustered rowstore index
           AND o.matching_sequence_CNT         > 0
           AND (   o.matching_sequence_all_density < 0.01       -- 1% of all records
                OR (    o.lc_key_CNT >= o.matching_sequence_CNT
                    AND o.rc_key_CNT  = o.matching_sequence_CNT
                   )
               )
           AND l.prescription LIKE N'Retain%' -- hold on if flagged previously to Retain
       ) cte
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i                       -- index level composite record
    ON cte.database_id            = i.database_id
   AND cte.parent_object_id       = i.parent_object_id
   AND cte.parent_object_id       = i.object_id
   AND cte.index_id               = i.index_id
   AND cte.type                   = i.type
 WHERE i.prescription IS NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Remove - NCX synergy key SEQUENCE with successor NCX'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - un/lighly used Nonclustered rowstore with same key sequence as Nonclustered rowstore not already flagged
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH cte AS (--
SELECT o.database_id
      ,o.parent_object_id
      ,o.matching_sequence_COL
      ,o.matching_sequence_all_density
      ,o.l_index_id
      ,o.l_type
      ,l_reads = (COALESCE(l.ops_total_read_CNT,0) + COALESCE(l.ius_User_read_CNT,0))
      ,o.r_index_id
      ,o.r_type
      ,r_reads = (COALESCE(r.ops_total_read_CNT,0) + COALESCE(r.ius_User_read_CNT,0))
  FROM [##SQLXL_Index_Synergies] AS o
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS l  -- index level composite record
    ON o.database_id               = l.database_id
   AND o.parent_object_id          = l.parent_object_id
   AND o.l_index_id                = l.index_ID
   AND o.l_type                    = l.type
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS r  -- index level composite record
    ON o.database_id               = r.database_id
   AND o.parent_object_id          = r.parent_object_id
   AND o.r_index_id                = r.index_ID
   AND o.r_type                    = r.type
 WHERE o.l_type                         = N'2'  -- nonclustered rowstore index
   AND o.r_type                         = N'2'  -- nonclustered rowstore index
   AND o.matching_sequence_CNT          > 0
   AND o.matching_sequence_all_density  < 0.01  -- 1% of all records
   -----------------------------------------------
   AND l.prescription                  IS NULL
   AND r.prescription                  IS NULL
   -----------------------------------------------
   AND (l.ops_total_read_CNT + l.ius_User_read_CNT) < (r.ops_total_read_CNT + r.ius_User_read_CNT)
)
UPDATE i
   SET
       prescription = N'Remove' + NCHAR(167) + N' Overlaps NCX Seq'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN cte
    ON i.database_id              = cte.database_id
   AND i.parent_object_id         = cte.parent_object_id
   AND i.object_id                = cte.parent_object_id
   AND i.index_id                 = cte.l_index_id
   AND i.type                     = cte.l_type
 WHERE i.prescription IS NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Remove - NCX synergy key SEQUENCE with low RDS'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - Nonclustered rowstores on used tables with Poor Read/Write ratio (< 4X) & low usage (< 2%)
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = N'Remove' + NCHAR(167) + N' low R/W Ratio'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
    ON i.database_id              = p.database_id
   AND i.parent_object_id         = p.parent_object_id
   AND i.object_id                = p.parent_object_id
 WHERE i.prescription              IS NULL
   ---------------------------------------------------------------------------
   AND i.obj_type                   = N'U' -- User Table
   AND i.type                       = N'2' -- nonclustered rowstore index
   AND i.tbl_is_heap                = 0
   AND (   p.ius_User_total_CNT     > 0    -- gotta hafta be used
        OR p.ops_total_contacts_CNT > 0    -- gotta hafta be used
       )
   AND i.row_CNT                    > 0
   ---------------------------------------------------------
   AND COALESCE(i.ius_read_to_write_RAT,0.0)  < 4.0
   AND COALESCE(i.ops_read_to_write_RAT,0.0)  < 4.0
   AND COALESCE(i.ius_read_to_parent_PCT,0.0) < 2.0
   AND COALESCE(i.ops_read_to_parent_PCT,0.0) < 2.0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Remove - low read/write ratio & low RDS'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REMOVE - Nonclustered indexes with Poor usage or operational activity
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = N'Remove' + NCHAR(167) + N' Lo/No Activity'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.parent_object_id
 WHERE i.prescription    IS NULL
   ---------------------------------------------------------------------------
   AND i.obj_type                   = N'U' -- User Table
   AND i.type                       = N'2' -- nonclustered rowstore index
   AND i.tbl_is_heap                = 0
   AND (   p.ius_User_total_CNT     > 0    -- gotta hafta be used
        OR p.ops_total_contacts_CNT > 0    -- gotta hafta be used
       )
   AND i.row_CNT                    > 0
   ---------------------------------------------------------
   AND COALESCE(i.ops_total_read_CNT,0)     > 0
   AND COALESCE(i.ius_user_updates_CNT,0)   > 0
   AND COALESCE(i.ius_read_to_parent_PCT,0) < 0.50
   AND COALESCE(i.ops_read_to_parent_PCT,0) < 0.50
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Remove - low RDS'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM #prescription
 WHERE action_desc = N'Remove' -- already updated appropriate values
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Clear out interim results table - Remoove'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Retain - Heaps, Clustered, Nonclustered Leftovers - some Activity OR few waits OR is small
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT database_id,parent_object_id,object_id,index_id,type,
--*/
       prescription = N'Retain ' + type_short_desc
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE (   (    obj_type  = N'U'  -- User Table
            AND type     IN (N'0' -- rowstore heap
                            ,N'1' -- clustered rowstore index
                            ,N'2' -- nonclustered rowstore index
                            ) -- All other types should have been flagged by now
           )
        OR (    obj_type  =  N'V' -- View
            AND type     IN (N'1' -- clustered rowstore index
                            ,N'2' -- nonclustered rowstore index
                            )
           )
       )
   AND prescription IS NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Retain - not flagged above'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Clustered index not created with Identity, Sequence, NEWID, SEQUENTIALID as lead CLUSTERED key.
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Use ' + tbl_cx_uniq_ordered_column_TYP
                    + IIF(fill_factor < 100.0,NCHAR(167) + N' FillFactor 100',N'')
                      -- check if covering Foreign Key Constraint, if do gonna need another index created to provide cover
                    + IIF(CHARINDEX(N'Covers FKC',prescription) > 0
                         ,NCHAR(167) + N' Recreate FKC cover'
                         ,N'')
                    + IIF(partition_Column_ID > 0
                         ,NCHAR(167) + N' Include Partition'
                         ,N'')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE type                           = N'1'                                   -- clustered rowstore index
   AND tbl_cx_uniq_ordered_column_ID <> Lead_Element_Column_ID
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - CX not using existing unique ordered column'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Lead Key UNIQUE (or nearly so) & has extra key columns
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Drop Xtra Keys'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE i.obj_type_short_label NOT IN (N'HST'                                   -- Not a History/archive table
                                     ,N'IT'                                    -- Not a system internal table
                                     )
   AND i.type IN (N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')                    -- True index types only
   ---------------------------------------------------------
   AND Lead_Element_Column_ID  = COALESCE(tbl_cx_uniq_ordered_column_ID,tbl_possible_uniq_column_id)
   AND Key_Columns_CNT         > 1
   --------------------------------------
   AND prescription         LIKE N'Retain%' -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - unneeded key columns - lead key UNIQUE'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Lead Key Element is ORDERED UNIQUE and optimize for sequential key not enabled - 2019+
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Optimize Seq Key?'
  FROM [##SQLXL_Index_Startup]     AS sis
 CROSS
  JOIN [##SQLXL_Index_Compilation] AS i
 WHERE sis.ProductMajorVersion >= 15 --2019+
   AND i.rec_type              = N'I'        -- index level composite record
   AND i.obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                     ,N'IT'  -- Not a system internal table
                                     )
   AND i.type IN (N'1'                       -- clustered rowstore index
                 ,N'2'                       -- nonclustered rowstore index
                 )
   ---------------------------------------------------------
   AND (   Lead_Element_is_Identity        = 1
        OR Lead_Element_is_Sequence        = 1
        OR Lead_Element_is_newsequentialid = 1
       )
   AND optimize_for_sequential_key         = 0
   --------------------------------------
   AND prescription LIKE N'Retain%' -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - enable Opt for Seq Key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Lead Key Element is ORDERED UNIQUE data type and is_unique = 0
-- REFACTOR - Lead Key Element is ORDERED UNIQUE data type and Stat uniqueness <> 1, Not PK or Unique Constraint
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Key'
                    + IIF(Lead_Element_is_Identity        = 1,N' IDN' ,N'')
                    + IIF(Lead_Element_is_Sequence        = 1,N' SEQ' ,N'')
                    + IIF(Lead_Element_is_newsequentialid = 1,N' SUID',N'')
                    + IIF(Lead_Element_is_newid           = 1,N' NUID',N'')
                    + IIF(is_unique                       = 0
                         ,N' NOT UNIQ'
                         ,IIF(i.is_primary_key = 1 OR i.is_unique_constraint = 1,N'',N' BAD STATS')
                         )
  FROM [##SQLXL_Index_Compilation] AS i                                        -- only table source in query
 WHERE rec_type = N'I'                                                         -- index level composite record
   AND COALESCE(tbl_cx_uniq_ordered_column_ID,tbl_possible_uniq_column_id) > 0
   AND i.type IN (N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')                    -- True index types only
   AND (   is_unique                  = 0
        OR (    ROUND(i.Lead_Element_Uniqueness,4) > 1.0
            AND i.is_primary_key       = 0
            AND i.is_unique_constraint = 0
            AND i.is_unique            = 0
           )
       )
   --------------------------------------
   AND prescription LIKE N'Retain%' -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - lead key unique index not unique'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - index partition not match table partition
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Use Tbl Partition'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.object_id
   --------------------------------------
 WHERE i.obj_type_short_label    NOT IN (N'HST' -- Not a History/archive table
                                        ,N'IT'  -- Not a system internal table
                                        )
   AND COALESCE(i.partition_function_name,N'NONE') <> COALESCE(p.partition_function_name,N'NONE')
   AND i.prescription          NOT LIKE N'Remove%'   -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - match index to table partition'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Non-Empty index with writes and FILL FACTOR < 100% AND low page splits (< 2% since restart / DDL)
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'FillFactor 100%'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE obj_type_short_label   NOT IN (N'HST' -- Not a History/archive table
                                     ,N'IT'  -- Not a system internal table
                                     )
   AND fill_factor                          < 100.0
   AND COALESCE(page_splits_to_write_PCT,0.0) BETWEEN 0.0 AND 2.0
   AND reserved_page_PG_CNT                 > 0
   ---------------------------------------------------------
   AND prescription   LIKE N'Retain%'   -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - low splits low fill factor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - index with FILL FACTOR = 100% AND hi page splits (> 5% since restart / DDL)
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'FillFactor <100%'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                   ,N'IT'  -- Not a system internal table
                                   )
   AND fill_factor               = 100.0
   AND page_splits_to_write_PCT  >   5.0
   --------------------------------------
   AND prescription     LIKE N'Retain%'          -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - hi splits hi fill factor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - ROWSTORE indexes with Page/Row Locks OFF. BOL NOTE: An index can't be reorganized when ALLOW_PAGE_LOCKS is set to OFF.
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Enable '
                     + STUFF( IIF(i.allow_page_locks = 0,N',Page',N'')
                            + IIF(i.allow_row_locks  = 0,N',Row' ,N'')
                            ,1,1,N'')
                     + N' Locks'
  FROM [##SQLXL_Index_Compilation] AS i  -- only table source in query
 WHERE i.type IN (N'1'                   -- clustered rowstore index
                 ,N'2'                   -- nonclustered rowstore index
                 )
   ---------------------------------------------------------
   AND (   i.allow_page_locks = 0        -- non-index value is NULL
        OR i.allow_row_locks  = 0        -- non-index value is NULL
       )
   ---------------------------------------------------------
   AND i.tbl_is_memory_optimized = 0     -- not a memory table
   AND prescription LIKE N'Retain%'      -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - Page/Row locks OFF'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - index with additional keys not improving record selectivity
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription              = N'Chk Key Selectivity'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE i.obj_type_short_label   NOT IN (N'HST' -- Not a History/archive table
                                       ,N'IT'  -- Not a system internal table
                                       )
   AND i.low_selectivity_additional_keys IS NOT NULL
   AND i.prescription LIKE N'Retain%'            -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - unneeded key columns pt 2'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - index with column collations not matching database collation
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT DISTINCT
       i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Check Collation'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN [##SQLXL_Index_sys_index_columns] AS ic
    ON i.database_id                        = ic.database_id
   AND i.object_id                          = ic.object_id
   AND i.index_id                           = ic.index_id
   AND i.type                               = ic.type
  JOIN [##SQLXL_Index_sys_columns]       AS c
    ON ic.database_id                       = c.database_id
   AND ic.object_id                         = c.object_id
   AND ic.column_id                         = c.column_id
 WHERE i.obj_type_short_label   NOT IN (N'HST' -- Not a History/archive table
                                       ,N'IT'  -- Not a system internal table
                                       )
   AND c.collation_name                    IS NOT NULL
   AND c.uses_database_collation            = 0
   ---------------------------------------------------------
   AND i.prescription         LIKE N'Retain%'    -- NOTE: no leading "%", filters out MISSING INDEXES
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - match index column collation to database collation'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Big included columns
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Check Incl Len'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE i.obj_type_short_label   NOT IN (N'HST' -- Not a History/archive table
                                       ,N'IT'  -- Not a system internal table
                                       )
   ---------------------------------------------------------
   AND inc_total_datatype_length_bytes >= 128
   ---------------------------------------------------------
   AND prescription   LIKE N'Retain%'           -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - index with BIG included columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Nonclustered Columnstores - to replace nonclustered rowstores need to add index key columns
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Add IDX key columns'
  FROM [##SQLXL_Index_Compilation] AS i                     -- only table source in query
 WHERE i.rec_type = N'I'                                    -- index level composite record
   AND i.type     = N'6' -- nonclustered columnstore index
   AND CHARINDEX(N'<IDXKEY>',i.included_column_info) > 0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - add Replaced NCX KEY columns to existing NCS index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Non-Partitioned Table and LOCK_ESCALATION is DISABLED - should be AUTO or TABLE
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription =  N'Enable Auto Lock Esc'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
 WHERE obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                   ,N'IT'  -- Not a system internal table
                                   )
   AND partition_Column_ID  IS NULL
   AND tbl_lock_escalation  = 1
   ---------------------------------------------------------
   AND (   prescription LIKE N'Retain%'          -- NOTE: no leading "%"
        OR prescription IS NULL
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - Non-Partitioned Table and LOCK_ESCALATION is DISABLED'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Partitioned Table and LOCK_ESCALATION is TABLE or DISABLE - should be AUTO
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription =  N'Enable Auto Lock Esc'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
 WHERE obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                   ,N'IT'  -- Not a system internal table
                                   )
   AND partition_Column_ID       > 0
   AND tbl_lock_escalation       < 2
   ---------------------------------------------------------
   AND (   prescription LIKE N'Retain%'    -- NOTE: no leading "%"
        OR prescription IS NULL
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - Partitioned Table and LOCK_ESCALATION is TABLE or DISABLE'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - SQL Table-Valued Functions with Clustered index that is not UNIQUE
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'TVF Unique IDX'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE i.parent_object_type = N'TF' -- SQL table-valued-function SQL 2012+
   AND i.type               = N'1'  -- clustered rowstore index
   AND i.is_unique          = 0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refactor - SQL Table-Valued Functions with Clustered index that is not UNIQUE'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Consider Index Stats NoRecompute due to high volumes of data changes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Stats NoRecompute?'
  FROM [##SQLXL_Index_Compilation] AS i  -- only table source in query
 WHERE i.rec_type = N'I'                 -- index level composite record
   AND i.type    IN (N'1'                -- clustered rowstore index
                    ,N'2'                -- nonclustered rowstore index
                    )                    -- HEAPS handled separately.
   AND i.stats_no_recompute = 0
   AND IIF(i.stathdr_Rows_CNT > 0
          ,100.0 * i.Stats_Prop_modification_CNT / i.stathdr_Rows_CNT
          ,IIF(i.row_CNT > 0
              ,100.0 * i.ops_total_write_CNT     / i.row_CNT
              ,0.0)
          ) >= 25.0
OPTION (MAXDOP 1,RECOMPILE);

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFACTOR - Consider Database AUTO_UPDATE_STATISTICS_ASYNC due to high volumes of data changes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id      = i.database_id
      ,parent_object_id = i.database_id
      ,object_id        = i.database_id
      ,index_id         = i.database_id
      ,type             = N'DB'
      ,N'Refactor'
      ,sort             = @srt
      ,prescription = N'Enable UPD_STATS_ASYNC'
  FROM [##SQLXL_Index_Compilation] AS i  -- only table source in query
 WHERE i.rec_type = N'I'                 -- index level composite record
   AND i.type    IN (N'1'                -- clustered rowstore index
                    ,N'2'                -- nonclustered rowstore index
                    )                    -- HEAPS handled separately.
   AND i.stats_no_recompute = 0
   AND IIF(i.stathdr_Rows_CNT > 0
          ,100.0 * i.Stats_Prop_modification_CNT / i.stathdr_Rows_CNT
          ,IIF(i.row_CNT > 0
              ,100.0 * i.ops_total_write_CNT     / i.row_CNT
              ,0.0)
          ) > 25.0
 GROUP BY
       i.database_id
OPTION (MAXDOP 1,RECOMPILE);

/******************************************************************************************************************************************\
-- Update REFACTOR
\******************************************************************************************************************************************/
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = COALESCE(i.prescription + NCHAR(167),N'')
                    + N'Refactor'
                    + (--
                       SELECT NCHAR(167) + N' ' + rex.prescription
                         FROM #prescription     AS rex
                        WHERE i.database_id      = rex.database_id
                          AND i.parent_object_id = rex.parent_object_id
                          AND i.object_id        = rex.object_id
                          AND i.index_ID         = rex.index_ID
                          AND i.type             = rex.type
                          AND N'Refactor'        = rex.action_desc
                        ORDER BY
                              rex.srt
                          FOR XML PATH(N''), TYPE
                      ).value('(./text())[1]',N'NVARCHAR(MAX)')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (--
        SELECT DISTINCT
               database_id,parent_object_id,object_id,index_id,type
          FROM #prescription
         WHERE action_desc = N'Refactor'
       ) AS ref
    ON i.database_id      = ref.database_id
   AND i.parent_object_id = ref.parent_object_id
   AND i.object_id        = ref.object_id
   AND i.index_ID         = ref.index_ID
   AND i.type             = ref.type
 WHERE i.prescription LIKE N'Retain%'           -- only want to Refresh indexes marked to Retain
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Apply refactor label to indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM #prescription
 WHERE action_desc = N'Refactor' -- already updated appropriate values
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Clean up interim results table - Refactor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - index to remove/replace has Non-Persisted Computed Column in definition
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Review'
      ,sort         = @srt
      ,prescription = N'IDX has Non Prst Col'
  FROM (-- Computed columns not persisted
        SELECT database_id
              ,object_id
              ,column_id
          FROM [##SQLXL_Index_column]
         WHERE computed_column_definition IS NOT NULL
           AND is_persisted                = 0
       ) AS cp
  JOIN [##SQLXL_Index_sys_index_columns] AS ic
    ON cp.database_id = ic.database_id
   AND cp.object_id   = ic.object_id
   AND cp.column_id   = ic.column_id
  JOIN [##SQLXL_Index_Compilation]       AS i
    ON N'I'           = i.rec_type                          -- index level composite record
   AND ic.database_id = i.database_id
   AND ic.object_id   = i.object_id
   AND ic.index_id    = i.index_id
   AND ic.type        = i.type
 WHERE i.prescription LIKE N'Remove%'
    OR i.prescription LIKE N'Replace%'
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - index to Remove has Non-Persisted Computed Column'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - indexes with non-default properties - Ignored in optimization ENABLED
-- Review - indexes with non-default properties - Is Hypothetical
-- Review - indexes with non-default properties - Is Disabled
-- Review - indexes with non-default properties - Duplicate keys are ignored
-- Review - indexes with non-default properties - Duplicate key messages are suppressed
-- Review - indexes with non-default properties - Compression delay > 0
-- Review - indexes with non-default properties - index was Auto created
-- Review - indexes with non-default properties - constraint NOT ENFORCED
-- NOTE - indexes with non-default properties. allow_row_locks, allow_page_locks covered in REFRESH
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Review'
      ,sort         = @srt
      ,prescription = STUFF(-- Strip off leading unnecessary characters
                           + IIF(i.is_ignored_in_optimization = 1,NCHAR(167) + N' Ignored in optimization',N'')
                           + IIF(i.is_hypothetical            = 1,NCHAR(167) + N' Hypothetical',N'')
                           + IIF(i.is_disabled                = 1,NCHAR(167) + N' Disabled',N'')
                           + IIF(i.ignore_dup_key             = 1,NCHAR(167) + N' Dupl keys ignored',N'')
                           + IIF(i.suppress_dup_key_messages  = 1,NCHAR(167) + N' Dupl key msg suppressed',N'')
                           + IIF(i.compression_delay_mm       > 0
                                ,NCHAR(167) + N' Compression delay ' + CAST(i.compression_delay_mm AS NVARCHAR(20))
                                ,N'')
                           + IIF(i.auto_created               = 1,NCHAR(167) + N' Auto created',N'')
                           + IIF(kc.is_enforced               = 0,NCHAR(167) + kc.type + N' Constraint NOT ENFORCED',N'')
                           ,1,2,N'')
  FROM (SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type                  = N'I'                                       -- index level composite record
           AND type                     IN (N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90') -- Not a Missing Index or Foreign Key
           AND obj_type_short_label NOT IN (N'HST'                                    -- Not a History/archive table
                                           ,N'IT'                                     -- Not a system internal table
                                           ,N'TVF'                                    -- Not a SQL table-valued-function SQL 2012+
                                           )
           AND (   is_ignored_in_optimization = 1
                OR is_hypothetical            = 1
                OR is_disabled                = 1
                OR ignore_dup_key             = 1
                OR suppress_dup_key_messages  = 1
                OR compression_delay_mm       > 0
                OR auto_created               = 1
               )
       ) AS i
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS kc
    ON i.database_id           = kc.database_id
   AND i.parent_object_id      = kc.parent_object_id
   AND i.object_id             = kc.object_id
   AND CAST(i.index_id AS INT) = kc.key_unique_index_id
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - index with non-default properties - ignore, hypo, disabled, dupl keys, comp delay, auto created'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - indexes with resumable operations
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Review'
      ,sort         = @srt
      ,prescription = N'Resumable operation'
  FROM [##SQLXL_Index_sys_index_resumable_operations] AS r
  JOIN [##SQLXL_Index_sys_indexes]                    AS i
    ON r.database_id = i.database_id
   AND r.object_id   = i.object_id
   AND r.index_id    = i.index_id
   AND i.type       IN (N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - index with resumable operations'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - Retained Foreign Key Constraints that are uncovered by an index
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Review'
      ,sort         = @srt
      ,prescription = N'Covering IX? No MIX'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE i.type          = N'F'           -- foreign key constraint
   AND prescription LIKE N'Retain%'
   AND i.fkc_covered_by_idx_IDS IS NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - uncovered FKC'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - Clustered indexes that are not UNIQUE
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Review'
      ,sort          = @srt
      ,prescription  = N'Make CX Uniq'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE type                        = N'1'    -- clustered rowstore index
   AND is_unique                   = 0
   AND i.obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                     ,N'IT'  -- Not a system internal table
                                     )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - CX that are not UNIQUE'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - Views that do not have a Clustered index
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Review'
      ,sort         = @srt
      ,prescription  = N'Add index?'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE i.obj_type               = N'V' -- View
   AND i.type                   = N'0' -- rowstore heap
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - Views that do not have a CX'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - Lo/No activity or Empty
-- If statistics recently updated show here
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Review'
      ,sort         = @srt
      ,prescription = STUFF( IIF(COALESCE(p.row_CNT,0) = 0
                                ,N' Empty TBL'
                                ,N'')
                           + IIF(    i.type NOT IN (N'4' -- Spatial Index
                                                   ,N'F' -- foreign key constraint
                                                   )
                                 AND COALESCE(i.ius_User_total_CNT,0) = 0 -- no Usage activity
                                ,N' No activity'
                                ,N'')
                           ,1,1,N'')
                    + IIF(    i.stathdr_Rows_CNT             >  0  -- special case of no activity
                          AND i.stathdr_Statistics_age_days <= 30  -- and recently updated statistics
                         ,NCHAR(167) + N' Has statistics'
                         ,N'')
  FROM (SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type                = N'I'    -- index level composite record
           AND parent_object_type NOT IN (N'VW'  -- Not a View
                                         ,N'TVF' -- Not a SQL table-valued-function SQL 2012+
                                         )
           AND tbl_is_memory_optimized = 0
           ---------------------------------------------------------------------------------------------------------------------------------
           AND type NOT IN (N'4'  -- Spatial ain't got index usage metrics
                           ,N'F'  -- foreign key constraint
                           )
           ---------------------------------------------------------------------------------------------------------------------------------
           AND obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                           ,N'IT'  -- Not a system internal table
                                           ,N'TVF' -- Not a SQL table-valued-function SQL 2012+
                                           )
           ---------------------------------------------------------------------------------------------------------------------------------
           AND prescription   NOT LIKE N'Remove%'
           AND prescription   NOT LIKE N'Reject%'
       ) AS i
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p -- parent level composite record
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id
   AND i.object_id        = p.object_id
 WHERE 1 = 1
   ---------------------------------------------------------
   AND (   (    COALESCE(i.ius_User_total_CNT    ,0) = 0    -- no index usage
            AND COALESCE(i.ops_total_contacts_CNT,0) = 0    -- no index operations
           )
        OR COALESCE(p.row_CNT,0) = 0                        -- empty table
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - Low or NO activity, or empty'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - Missing indexes with Large Advantage and significant Usage, but may have an NCX that they could roll up to
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Review'
      ,sort         = @srt
      ,prescription = N'Similar NCX'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE type = N'M' -- missing nonclustered rowstore index
   ------------------------------------------
   AND prescription LIKE N'Request' + NCHAR(167) + N' MIX Hi Gain%' -- Keep ACTION in synch
   AND EXISTS (--
               SELECT NULL
                 FROM [##SQLXL_Index_Synergies] AS o
                WHERE database_id      = o.database_id
                  AND parent_object_id = o.parent_object_id
                  AND index_ID         = o.l_index_id
                  AND type             = o.l_type
                  AND N'2'             = o.r_type           -- nonclustered rowstore index
              )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - MIX that can roll up to existing/new NCS'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - Lead Key element is a big STRING
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Review'
      ,sort         = @srt
      ,prescription = N'Lead big ' + i.Lead_Element_Data_Type
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE i.type                     IN (N'1'   -- clustered rowstore index
                                     ,N'2'   -- nonclustered rowstore index
                                     )
   AND i.obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                     ,N'IT'  -- system internal table
                                     )
   --------------------------------------------
   AND (   Lead_Element_Max_Len > 16
        OR Lead_Element_Max_Len = -1
       )
   AND (   prescription LIKE N'Retain%'
        OR prescription LIKE N'Request%'
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - Lead Key element is a big STRING'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - index to be replaced by Nonclustered Columnstore has 1 or more non-lead keys that are big STRINGS
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Review'
      ,sort         = @srt
      ,prescription = N'Idx has big keys'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 CROSS
 APPLY (--
        SELECT COUNT(1)
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_columns]       AS c
            ON ic.database_id = c.database_id
           AND ic.object_id   = c.object_id
           AND ic.column_id   = c.column_id
          JOIN [##SQLXL_Index_sys_types]         AS t
            ON c.database_id  = t.database_id
           AND c.user_type_id = t.user_type_id
         WHERE i.database_id  = ic.database_id
           AND i.object_id    = ic.object_id
           AND i.index_id     = ic.index_id
           AND i.type         = ic.type
           AND 0              = ic.is_included_column
           AND (   (t.name  = N'NVARCHAR' AND c.max_length > 16)
                OR (t.name <> N'NVARCHAR' AND c.max_length > 32)
                OR c.max_length = -1
               )
       ) AS c(cnt)
 WHERE 1 = 1
   AND i.prescription        LIKE N'Replace%'
   AND i.obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                     ,N'IT'  -- Not a system internal table
                                     )
   AND c.cnt                    > 0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - index to be replaced by NCS has included big STRING'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - index to be Removed or Replaced by Nonclustered Columnstore that are filtered
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Review'
      ,sort         = @srt
      ,prescription  = N'Filtered IDX'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE (   COALESCE(prescription,N'') LIKE N'Remove%'
        OR COALESCE(prescription,N'') LIKE N'Replace%'
       )
   AND i.has_filter = 1
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - index to be replaced by NCS is filtered'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - index with Page Compression Failures > 40 Percent
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Review'
      ,sort         = @srt
      ,prescription = N'Chk PageCompress'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE ios_page_compression_fail_PCT > 40
   --------------------------------------
   AND prescription LIKE N'Retain%'           -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - index with Page Compression Failures > 40 Percent'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - Potential Temporary Parents & indexes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT DISTINCT
       f.database_id
      ,f.parent_object_id
      ,f.object_id
      ,f.index_id
      ,f.type
      ,N'Review'
      ,sort         = @srt
      ,prescription =  N'Check Temp Object'
  FROM (-- get list of all objects previously flagged as potentially temporary
        SELECT DISTINCT
               database_id,parent_object_id,object_id,index_id,type
          FROM [##SQLXL_Index_Diagnostics]
         WHERE diagnostic = N'[POTENTIAL TEMPORARY OBJECT]'
       ) AS f
  JOIN [##SQLXL_Index_Compilation] AS i
    ON f.database_id                     = i.database_id
   AND f.parent_object_id                = i.parent_object_id
   AND f.object_id                       = i.object_id
   AND f.index_id                        = i.index_id
   AND f.type   COLLATE database_default = i.type COLLATE database_default
 WHERE i.prescription LIKE N'Retain%'                         -- NOTE: no leading "%"
    OR i.rec_type        = N'P'                               -- parent level composite record
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - Potential Temporary Parents & indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - Computed columns not persisted
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT DISTINCT
       database_id
      ,object_id           -- for parent_object_id
      ,object_id
      ,object_id           -- for Index_ID
      ,type         = N'U' -- User Table
      ,N'Review'
      ,sort         = @srt
      ,prescription = N'Persist Computed Col'
  FROM [##SQLXL_Index_sys_columns]
 WHERE is_computed  = 1
   AND is_persisted = 0
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - Computed columns not persisted'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - Potential Filtered Index. Includes all types of previous prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT DISTINCT
       f.database_id
      ,f.parent_object_id
      ,f.object_id
      ,f.index_id
      ,f.type
      ,N'Review'
      ,sort         = @srt
      ,prescription =  N'Possible Filter'
  FROM (-- get list of all objects previously flagged as potentially temporary
        SELECT DISTINCT
               database_id,parent_object_id,object_id,index_id,type
          FROM [##SQLXL_Index_Diagnostics]
         WHERE diagnostic LIKE N'%add filter?%'
       ) AS f
  JOIN [##SQLXL_Index_Compilation] AS i
    ON f.database_id                     = i.database_id
   AND f.parent_object_id                = i.parent_object_id
   AND f.object_id                       = i.object_id
   AND f.index_id                        = i.index_id
   AND f.type COLLATE database_default   = i.type COLLATE database_default
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - Potential Filtered Index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - Synergies found on Retain, REJECT indexes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Review'
      ,sort         = @srt,
       STUFF(-- Strip off leading unnecessary characters
              IIF(s.seq_CNT > 0,NCHAR(167) + N' Synergy: Sequence' ,N'')
            + IIF(s.ovl_CNT > 0,NCHAR(167) + N' Synergy: Overlap' ,N'')
            + IIF(s.con_CNT > 0,NCHAR(167) + N' Synergy: Contained',N'')
            ,1,2,N'')
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN (--
        SELECT database_id
              ,parent_object_id
              ,index_id = r_index_id
              ,type     = r_type
              ,seq_CNT = SUM(IIF(matching_sequence_CNT  > 0,1,0))
              ,ovl_CNT = SUM(IIF(matching_overlap_CNT   > 0,1,0))
              ,con_CNT = SUM(IIF(matching_contained_CNT > 0,1,0))
          FROM [##SQLXL_Index_Synergies]
         WHERE l_type <> N'F' -- foreign key constraintpreviously reported
           AND r_type <> N'F' -- foreign key constraintpreviously reported
         GROUP BY
               database_id
              ,parent_object_id
              ,r_index_id
              ,r_type
        HAVING SUM(IIF(matching_sequence_CNT  > 0,1,0)) > 0
            OR SUM(IIF(matching_overlap_CNT   > 0,1,0)) > 0
            OR SUM(IIF(matching_contained_CNT > 0,1,0)) > 0
       ) AS s
    ON i.database_id      = s.database_id
   AND i.parent_object_id = s.parent_object_id
   AND i.object_id        = s.parent_object_id
   AND i.index_ID         = s.index_id
   AND i.type             = s.type
 WHERE i.obj_type         = N'U' -- User Table
   AND i.type IN (N'2' -- Nonclustered rowstore index
                 ,N'F' -- foreign key constraint
                 ,N'M' -- missing nonclustered rowstore index
                 )
   AND i.prescription NOT LIKE N'Replace%'        -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - Synergies found on Retain, REJECT indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - index - Auto Created
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Review'
      ,sort         = @srt
      ,prescription = N'Auto Created'
  FROM [##SQLXL_Index_Compilation]
 WHERE rec_type     = N'I'                    -- index level composite record
   AND auto_created = 1
   --------------------------------------
   AND prescription LIKE N'Retain%'           -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - indexes Auto Created'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Review - Index - STATISTICS NORECOMPUTE enabled and low stats writes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Review'
      ,sort         = @srt
      ,prescription = N'Stats NoRecompute'
  FROM [##SQLXL_Index_Compilation]
 WHERE rec_type = N'I'  -- index level composite record
   AND type    IN (N'1' -- clustered rowstore index
                  ,N'2' -- nonclustered rowstore index
                  ) -- HEAPS handled separately
   AND IIF(stathdr_Rows_CNT > 0
          ,100.0 * Stats_Prop_modification_CNT / stathdr_Rows_CNT
          ,0.0) < 5.0
   AND stats_no_recompute = 1
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Review - STATISTICS NORECOMPUTE enabled, low writes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Update Review
\******************************************************************************************************************************************/
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = COALESCE(i.prescription + NCHAR(167),N'')
                    + N'Review'
                    + (--
                       SELECT NCHAR(167) + N' ' + rex.prescription
                         FROM #prescription     AS rex
                        WHERE i.database_id      = rex.database_id
                          AND i.parent_object_id = rex.parent_object_id
                          AND i.object_id        = rex.object_id
                          AND i.index_ID         = rex.index_ID
                          AND i.type             = rex.type
                          AND N'Review'          = rex.action_desc
                        ORDER BY
                              rex.srt
                          FOR XML PATH(N''), TYPE
                      ).value('(./text())[1]',N'NVARCHAR(MAX)')
  FROM (SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type IN (N'I' -- index level composite record
                           ,N'P' -- parent level composite record
                           )
       ) AS i
  JOIN (--
        SELECT DISTINCT
               database_id,parent_object_id,object_id,index_id,TYPE
          FROM #prescription
         WHERE action_desc = N'Review'
       ) ref
    ON i.database_id      = ref.database_id
   AND i.parent_object_id = ref.parent_object_id
   AND i.object_id        = ref.object_id
   AND i.index_ID         = ref.index_ID
   AND i.type             = ref.type
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Apply Review label to indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM #prescription
 WHERE action_desc = N'Review'   -- already updated appropriate values
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Clean up interim results table - Review'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRES **
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
-- REFRESH - Columnstores with > 1024 Deleted rows or > 2048 Open rows
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = STUFF( IIF(cs.deleted_rows_CNT > 8192
                                , NCHAR(167)
                                + IIF(i.type = N'5' -- clustered columnstore
                                     ,N'CCS'
                                     ,N'NCS')
                                + N' Deleted rows'
                                ,N'')
                           + IIF(cs.open_rows_CNT > 8192
                                , NCHAR(167)
                                + IIF(i.type = N'5'  -- clustered columnstore
                                     ,N'CCS'
                                     ,N'NCS')
                                + N' Open delta rows'
                                ,N'')
                            ,1,1,N'')
  FROM (--
        SELECT database_id
              ,object_id
              ,index_id
              ,open_rowgroup_CNT    = SUM(CASE WHEN state_desc   = N'OPEN' THEN 1 ELSE 0 END)
              ,open_rows_CNT        = SUM(CASE WHEN state_desc   = N'OPEN' THEN total_rows ELSE 0 END)
              ,deleted_rowgroup_CNT = SUM(CASE WHEN deleted_rows > 0       THEN 1 ELSE 0 END)
              ,deleted_rows_CNT     = SUM(deleted_rows)
          FROM [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats]
         GROUP BY
               database_id
              ,object_id
              ,index_id
        HAVING SUM(deleted_rows) > 8192
            OR SUM(CASE WHEN state_desc = N'OPEN'
                        THEN total_rows
                        ELSE 0
                   END)          > 8192
       ) AS cs
  JOIN [##SQLXL_Index_Compilation] AS i
    ON cs.database_id = i.database_id
   AND cs.object_id   = i.object_id
   AND cs.index_id    = i.index_id
   AND i.type        IN (N'5' -- clustered columnstore
                        ,N'6' -- nonclustered columnstore index
                        )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refresh - Columnstores with > 1024 Deleted rows or > 2048 Open rows'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFRESH - index takes up more buffer than reserved size - opportunity for cleanup
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'BUF > Rsrvd Size'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE 1 = 1
   AND prescription  LIKE N'Retain%'              -- NOTE: no leading "%", filters out MISSING indexes
   AND i.buffer_total_KB_CNT > (1.1 * i.reserved_page_PG_CNT * 8.0)
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refresh - index takes up more buffer than reserved size'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFRESH - Buffer Free > 20%
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt        INT      = 0
       ,@ssms_ads       TINYINT  = 1
       ,@msg      NVARCHAR(1000)
       ,@exec_dttm DATETIME = GETDATE()
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'BUF free > 20%'
  FROM [##SQLXL_Index_Compilation]
 WHERE rec_type                = N'I'       -- index level composite record
   AND tbl_is_memory_optimized = 0          -- exclude memoryoptimized
   AND buffer_total_KB_CNT     > 0.0
   AND prescription         LIKE N'Retain%' -- NOTE: no leading "%", filters out MISSING indexes
   AND 100.0 * buffer_free_KB_CNT / buffer_total_KB_CNT > 20.0 -- /zero handled by WHERE clause element above
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refresh - index Buffer Free > 20 percent'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFRESH - statistics over 30 days old
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt        INT      = 0
       ,@ssms_ads       TINYINT  = 1
       ,@msg      NVARCHAR(1000)
       ,@exec_dttm DATETIME = GETDATE()
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'Old Stats'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE 1 = 1
   AND prescription  LIKE N'Retain%'       -- NOTE: no leading "%", filters out MISSING indexes
   AND obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                   ,N'IT'  -- Not a system internal table
                                   )
   AND row_CNT                     >  0
   AND stathdr_Statistics_age_days > 30
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refresh - statistics over 30 days old'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFRESH - statistics <= 30 days old and stats row count +/- 1.0% different than index row count
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt        INT      = 0
       ,@ssms_ads       TINYINT  = 1
       ,@msg      NVARCHAR(1000)
       ,@exec_dttm DATETIME = GETDATE()
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'Stats Row Delta'
  FROM [##SQLXL_Index_Compilation]
 WHERE rec_type                     = N'I'  -- index level composite record
   AND stathdr_Statistics_age_days <= 30    -- NOTE: stats over 30 days old handled separately
   AND row_CNT                      >  0
   AND stathdr_Rows_CNT             >  0
   AND (   ABS(100.0 * (row_CNT - stathdr_Rows_CNT) / row_CNT)          > 1.0 -- /zero handled by WHERE clause above
        OR ABS(100.0 * (stathdr_Rows_CNT - row_CNT) / stathdr_Rows_CNT) > 1.0 -- /zero handled by WHERE clause above
       )
   ---------------------------------------------------------
   AND prescription LIKE N'Retain%'     -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refresh - statistics <= 30 days old and stats row count +/- 1pct different than index row count'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFRESH - statistics <= 30 days old and stats modification_counter > 0.5% index row count
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'Stats Row Delta'
  FROM [##SQLXL_Index_Compilation]
 WHERE rec_type                     = N'I'  -- index level composite record
   AND stathdr_Statistics_age_days <= 30    -- NOTE: stats over 30 days old handled separately
   AND row_CNT                      >  0
   AND Stats_Prop_modification_CNT  >  0
   AND ABS(100.0 * Stats_Prop_modification_CNT / row_CNT) > 0.5  -- /zero handled by WHERE clause above
   ---------------------------------------------------------
   AND prescription LIKE N'Retain%'     -- NOTE: no leading "%"
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refresh - statistics <= 30 days old and stats modification_counter > 0.5pct index row count'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- REFRESH - Statistics not computed on Rowstore Clustered and Nonclustered, XML, and Spatial indexes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO #prescription
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'No Stats'
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE type                     IN (N'1' -- Clustered rowstore index
                                   ,N'2' -- nonclustered rowstore index
                                   ,N'3' -- XML index
                                   ,N'4' -- Spatial index
                                   )
   AND obj_type_short_label NOT IN (N'HST' -- Not a History/archive table
                                   ,N'IT'  -- Not a system internal table
                                   ,N'TVF' -- Not a SQL table-valued-function SQL 2012+
                                   )
   ---------------------------------------------------------
   AND stathdr_Statistics_age_days    IS NULL
   ---------------------------------------------------------
   AND prescription       LIKE N'Retain%'        -- NOTE: no leading "%"
   AND CHARINDEX(N'Refresh',prescription) = 0    -- don't need if already called out for Refresh
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Refresh - Statistics not computed on CX, NCX, XML, SPT'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Update REFRESH
\******************************************************************************************************************************************/
UPDATE i
   SET
/*** LOCAL TESTING ***
--SET ANSI_WARNINGS ON;
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = COALESCE(i.prescription + NCHAR(167),N'')
                    + N'Refresh'
                    + (--
                       SELECT TOP 1
                              NCHAR(167) + N' ' + rex.prescription
                         FROM #prescription AS rex
                        WHERE i.database_id             = rex.database_id
                          AND i.parent_object_id        = rex.parent_object_id
                          AND i.object_id               = rex.object_id
                          AND i.index_ID                = rex.index_ID
                          AND i.type                    = rex.type
                          AND N'Refresh'               = rex.action_desc
                        ORDER BY
                              rex.srt
                          FOR XML PATH(N''), TYPE
                       ).value('(./text())[1]',N'NVARCHAR(MAX)')
  FROM [##SQLXL_Index_Compilation] AS i                              -- NOTE: parents can be REFACTORED too
  JOIN (--
        SELECT DISTINCT
               database_id,parent_object_id,object_id,index_id,TYPE
          FROM #prescription
         WHERE action_desc = N'Refresh'
       ) AS ref
    ON i.database_id      = ref.database_id
   AND i.parent_object_id = ref.parent_object_id
   AND i.object_id        = ref.object_id
   AND i.index_ID         = ref.index_ID
   AND i.type             = ref.type
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Apply Refresh label to indexes '
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM #prescription
 WHERE action_desc = N'Refresh' -- already updated appropriate values
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Clear out interim results table - Refresh'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Flag indexes not ACTIONed
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE i
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = N'TBD ' + obj_type_hdr + NCHAR(167) + type_short_desc
  FROM (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE i.prescription IS NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Flag indexes without a prescription'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Delete all empty Diagnostics
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM [##SQLXL_Index_Diagnostics]
 WHERE diagnostic IS NULL
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Clear out empty interim diagnostic records'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PR **
\******************************************************************************************************************************************/
UPDATE p
   SET
/*** LOCAL TESTING ***
DECLARE @Prio_wait_time             SMALLINT = 100
       ,@Prio_wait_count            SMALLINT =  50
       ,@Prio_locks                 SMALLINT =  20
       ,@Prio_lock_promotions       SMALLINT =  60
       ,@Prio_lock_promotion_fails  SMALLINT =  80
       ,@Prio_page_splits           SMALLINT =  30
       ,@Prio_page_merges           SMALLINT =  30
       ,@Prio_OPS_forwarded_fetches SMALLINT =  30
       ,@Prio_missing_indexes       SMALLINT =  80
       ,@Prio_OPS_writes            SMALLINT =  30'
       ,@Prio_buffer_cache_used     SMALLINT =  80
       ,@Prio_OPS_read_write_ratio  SMALLINT =  15 -- Note: starts with 4X as the "zero" value and works backwards from there
       ,@Prio_reads                 SMALLINT =  10
       ,@Prio_scans                 SMALLINT =  40
       ,@Prio_lookups               SMALLINT =  60
       ,@Prio_LOB                   SMALLINT =  80
       ,@xtp_Priority_deflator      SMALLINT =  50 -- since activities in memory much faster than disk

SELECT p.database_id,p.parent_object_id,p.object_id,p.obj_type,p.obj_name,
 p.ops_total_wait_MS_CNT
,a.ops_total_wait_MS_CNT
,@Prio_wait_time
--*/
       tbl_priority_metric =
-- Waiting (19) -------------------------------------------------
 IIF(a.ops_total_wait_MS_CNT       > 0,1.0 * COALESCE(p.ops_total_wait_MS_CNT      ,0.0) / a.ops_total_wait_MS_CNT,0.0) * @Prio_wait_time
 --  ios: row_lock_wait_in_ms, page_lock_wait_in_ms, page_latch_wait_in_ms, page_io_latch_wait_in_ms
 --  ios: subsets: tree_page_latch_wait_in_ms, tree_page_io_latch_wait_in_ms
 -- rgos: row_group_lock_wait_in_ms
 --  xtp: <FUTURE> new_log_wait_time_in_ms, total_wait_time_in_ms, io_wait_time_in_ms

+IIF(a.ops_total_wait_CNT          > 0,1.0 * COALESCE(p.ops_total_wait_CNT         ,0.0) / a.ops_total_wait_CNT   ,0.0) * @Prio_wait_count
 --  ios: row_lock_wait_count, page_lock_wait_count, page_latch_wait_count, page_io_latch_wait_count
 --  ios: subsets: tree_page_latch_wait_count, tree_page_io_latch_wait_count
 -- rgos: row_group_lock_wait_count
 --  xtp: <FUTURE> waits_for_io_count, waits_for_new_log_count

-- Locks (4) -------------------------------------------------
+IIF(a.ops_total_lock_CNT          > 0,1.0 * COALESCE(p.ops_total_lock_CNT         ,0.0) / a.ops_total_lock_CNT   ,0.0) * @Prio_locks
 --  ios: row_lock_count, page_lock_count
 -- rgos: row_group_lock_count
+IIF(a.ios_lock_promotion_CNT      > 0,1.0 * COALESCE(p.ios_lock_promotion_CNT,0.0) / a.ios_lock_promotion_CNT,0.0) * @Prio_lock_promotions
 -- ios: index_lock_promotion_attempt_count
+IIF(a.ios_lock_promotion_fail_CNT > 0
    ,1.0 * COALESCE(p.ios_lock_promotion_fail_CNT,0.0) / a.ios_lock_promotion_fail_CNT
    ,0.0) * @Prio_lock_promotion_fails
 -- ios: index_lock_promotion_attempt_count - index_lock_promotion_count

-- Splits (7) ----------------------------------------------------
+IIF(a.ops_total_page_split_CNT > 0,1.0 * COALESCE(p.ios_leaf_allocation_CNT    ,0.0) / a.ops_total_page_split_CNT,0.0) * @Prio_page_splits
+IIF(a.ops_total_page_split_CNT > 0,1.0 * COALESCE(p.ios_nonleaf_allocation_CNT ,0.0) / a.ops_total_page_split_CNT,0.0) * @Prio_page_splits
+IIF(a.ops_total_page_split_CNT > 0,1.0 * COALESCE(p.ios_column_value_push_off_row_CNT,0.0) / a.ops_total_page_split_CNT,0.0)
    * @Prio_page_splits
 --  ios: nonleaf_allocation_count, leaf_allocation_count, column_value_push_off_row_count
+IIF(a.ops_total_page_split_CNT > 0,1.0 * COALESCE(p.xtp_page_split_CNT ,0.0) / a.ops_total_page_split_CNT,0.0)
    * @Prio_page_splits / @xtp_Priority_deflator
+IIF(a.ops_total_page_split_CNT > 0,1.0 * COALESCE(p.xtp_key_split_CNT  ,0.0) / a.ops_total_page_split_CNT,0.0)
    * @Prio_page_splits / @xtp_Priority_deflator
 --  xtp: page_split_count, page_split_retry_count
 --       key_split_count, key_split_retry_count

-- Merges (7) --------------------------------------------------------
+IIF(a.ops_total_page_merge_CNT > 0,1.0 * COALESCE(p.ios_leaf_page_merge_CNT         ,0.0) / a.ops_total_page_merge_CNT,0.0) * @Prio_page_merges
+IIF(a.ops_total_page_merge_CNT > 0,1.0 * COALESCE(p.ios_nonleaf_page_merge_CNT      ,0.0) / a.ops_total_page_merge_CNT,0.0) * @Prio_page_merges
+IIF(a.ops_total_page_merge_CNT > 0,1.0 * COALESCE(p.ios_column_value_pull_in_row_CNT,0.0) / a.ops_total_page_merge_CNT,0.0) * @Prio_page_merges
 --  ios: nonleaf_page_merge_count, leaf_page_merge_count, column_value_pull_in_row_count
+IIF(a.ops_total_page_merge_CNT > 0,1.0 * COALESCE(p.xtp_page_merge_CNT ,0.0) / a.ops_total_page_merge_CNT,0.0)
    * @Prio_page_merges / @xtp_Priority_deflator
+IIF(a.ops_total_page_merge_CNT > 0,1.0 * COALESCE(p.xtp_key_merge_CNT  ,0.0) / a.ops_total_page_merge_CNT,0.0)
    * @Prio_page_merges / @xtp_Priority_deflator
+IIF(a.ops_total_page_merge_CNT > 0,1.0 * COALESCE(p.xtp_page_consolidation_CNT ,0.0) / a.ops_total_page_merge_CNT  ,0.0)
    * @Prio_page_merges / @xtp_Priority_deflator -- reduced locking on physical I/O
 --  xtp: page_merge_count, page_merge_retry_count
 --       key_merge_count, key_merge_retry_count
 --       page_consolidation_count, page_consolidation_retry_count

-- Missing index Advantage (8) - total read Weighted -----------------------------------
+IIF(a.mix_Advantage_weighted_AMT  > 0,1.0 * COALESCE(p.mix_Advantage_weighted_AMT ,0.0) / a.mix_Advantage_weighted_AMT,0.0)
    * @Prio_missing_indexes
 -- MIX: avg_total_system_cost, avg_total_user_cost, avg_system_impact, avg_user_impact, system_seeks, system_scans, user_seeks, user_scans

-- Writes (19) Excludes Splits & Merges computed above ------------------------------
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.ios_leaf_insert_CNT              ,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.ios_leaf_update_CNT              ,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.ios_leaf_delete_CNT              ,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.ios_leaf_ghost_CNT               ,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.ios_nonleaf_insert_CNT           ,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.ios_nonleaf_update_CNT           ,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.ios_nonleaf_delete_CNT           ,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.ios_lob_orphan_create_CNT        ,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.ios_lob_orphan_insert_CNT        ,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.ios_column_value_push_off_row_CNT,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.ios_column_value_pull_in_row_CNT ,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
 -- ios: leaf_insert_count, leaf_update_count, leaf_delete_count, leaf_ghost_count,
 --      nonleaf_insert_count, nonleaf_update_count, nonleaf_delete_count,
 --      lob_orphan_create_count, lob_orphan_insert_count, column_value_pull_in_row_count, column_value_push_off_row_count
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.cs_row_group_lock_CNT ,0.0) / a.ops_total_write_CNT,0.0) * @Prio_OPS_writes
 --  cs: row_group_lock_count - surrogate for writes since there is no direct metric

-- [sys].[dm_db_xtp_object_stats]
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.xtp_row_insert_attempts_CNT,0.0) / a.ops_total_write_CNT  ,0.0)
    * @Prio_OPS_writes / @xtp_Priority_deflator -- reduced locking on physical I/O
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.xtp_row_update_attempts_CNT,0.0) / a.ops_total_write_CNT  ,0.0)
    * @Prio_OPS_writes / @xtp_Priority_deflator -- reduced locking on physical I/O
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.xtp_row_delete_attempts_CNT,0.0) / a.ops_total_write_CNT  ,0.0)
    * @Prio_OPS_writes / @xtp_Priority_deflator -- reduced locking on physical I/O
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.xtp_write_conflicts_CNT    ,0.0) / a.ops_total_write_CNT  ,0.0)
    * @Prio_OPS_writes / @xtp_Priority_deflator -- reduced locking on physical I/O
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.xtp_unique_constraint_violations_CNT,0.0) / a.ops_total_write_CNT  ,0.0)
    * @Prio_OPS_writes / @xtp_Priority_deflator -- reduced locking on physical I/O
-- [sys].[dm_db_xtp_index_stats]
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.xtp_page_update_CNT             ,0.0) / a.ops_total_write_CNT  ,0.0)
    * @Prio_OPS_writes / @xtp_Priority_deflator -- reduced locking on physical I/O
+IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(p.xtp_page_update_retry_CNT       ,0.0) / a.ops_total_write_CNT  ,0.0)
    * @Prio_OPS_writes / @xtp_Priority_deflator -- reduced locking on physical I/O
 --  xtp: row_insert_attempts, row_update_attempts, row_delete_attempts, write_conflicts, unique_constraint_violations
 --       page_update_count, page_update_retry_count

-- Buffer cache usage (5) - weighted by percent of table+indexes in memory times the log of the reserved size of the table+indexes
-- omit XTP InMemory/Memory Optimized ---------------------------
+COALESCE(b.mem_log,0.0) * @Prio_buffer_cache_used
 --  prt: reserved_page_count, in_row_reserved_page_count, lob_reserved_page_count, row_overflow_reserved_page_count
 --  buf: buffer_total_KB
-- Read to Write Ratio  ----------------------------------------
+IIF(COALESCE(p.ops_read_to_write_RAT,0.0) < 4.0
    ,(4.0 - COALESCE(p.ops_read_to_write_RAT,0.0)) * COALESCE(p.ops_write_to_instance_PCT,0.0)
    ,0.0) * @Prio_OPS_read_write_ratio

-- Scans (7) ---------------------------------------------------------------------------------------------------------------
-- cs_delete_buffer_scan_CNT counts twice since extra action required to remove values from nonclustered columnstore result
+IIF(a.ops_total_scan_CNT > 0, 1.0 * COALESCE(p.ius_user_scans_CNT   ,0.0)     / a.ops_total_scan_CNT, 0) * @Prio_scans
+IIF(a.ops_total_scan_CNT > 0, 1.0 * COALESCE(p.ius_system_scans_CNT ,0.0)     / a.ops_total_scan_CNT, 0) * @Prio_scans
+IIF(a.ops_total_read_CNT > 0, 1.0 * COALESCE(p.ios_range_scan_CNT   ,0.0)     / a.ops_total_scan_CNT, 0) * @Prio_scans
+IIF(a.ops_total_read_CNT > 0, 1.0 * COALESCE(p.xtp_scans_started_CNT,0.0)     / a.ops_total_scan_CNT, 0) * @Prio_scans / @xtp_Priority_deflator
+IIF(a.ops_total_read_CNT > 0, 1.0 * COALESCE(p.cs_index_scan_CNT    ,0.0)     / a.ops_total_scan_CNT, 0) * @Prio_scans
+IIF(a.ops_total_read_CNT > 0, 1.0 * COALESCE(p.cs_scan_CNT          ,0.0)     / a.ops_total_scan_CNT, 0) * @Prio_scans
+IIF(a.ops_total_read_CNT > 0, 2.0 * COALESCE(p.cs_delete_buffer_scan_CNT,0.0) / a.ops_total_scan_CNT, 0) * @Prio_scans
 --  ios: range_scan_count ius: user_scans, system_scans
 --  xtp: scans_started
 -- rgos: delete_buffer_scan_count, index_scan_count, scan_count

-- Lookups (3) -------------------------------------------------------
+IIF( COALESCE(a.ios_singleton_lookup_CNT,0.0)
    + COALESCE(a.ius_user_lookups_CNT    ,0.0)
    + COALESCE(a.ius_system_lookups_CNT  ,0.0) > 0
    ,1.0 * ( COALESCE(p.ios_singleton_lookup_CNT,0.0)
           + COALESCE(p.ius_user_lookups_CNT    ,0.0)
           + COALESCE(p.ius_system_lookups_CNT  ,0.0)
           ) / ( COALESCE(a.ios_singleton_lookup_CNT,0.0)
               + COALESCE(a.ius_user_lookups_CNT    ,0.0)
               + COALESCE(a.ius_system_lookups_CNT  ,0.0)
               ) * @Prio_lookups
    ,0.0)
 --  ios: singleton_lookup_count
 --  ius: system_lookups, user_lookups

-- Heap Forwarded Fetches (1) ------------------
+IIF(a.ios_forwarded_fetch_CNT > 0,1.0 * COALESCE(p.ios_forwarded_fetch_CNT,0.0) / a.ios_forwarded_fetch_CNT ,0.0) * @Prio_OPS_forwarded_fetches
 --  ios: forwarded_fetch_count

-- LOB data (6) ------------------------------------------------
+IIF(( COALESCE(a.ios_lob_fetch_pages_CNT            ,0.0)
     + COALESCE(a.ios_lob_orphan_create_CNT          ,0.0) -- Bulk operations
     + COALESCE(a.ios_lob_orphan_insert_CNT          ,0.0) -- Bulk operations
     + COALESCE(a.ios_row_overflow_fetch_in_pages_CNT,0.0)
     + COALESCE(a.ios_column_value_pull_in_row_CNT   ,0.0)
     + COALESCE(a.ios_column_value_push_off_row_CNT  ,0.0)
     ) > 0.0
    ,1.0 * ( COALESCE(p.ios_lob_fetch_pages_CNT            ,0.0)
           + COALESCE(p.ios_lob_orphan_create_CNT          ,0.0) -- Bulk operations
           + COALESCE(p.ios_lob_orphan_insert_CNT          ,0.0) -- Bulk operations
           + COALESCE(p.ios_row_overflow_fetch_in_pages_CNT,0.0)
           + COALESCE(p.ios_column_value_pull_in_row_CNT   ,0.0)
           + COALESCE(p.ios_column_value_push_off_row_CNT  ,0.0)
           )
       /   ( COALESCE(a.ios_lob_fetch_pages_CNT            ,0.0)
           + COALESCE(a.ios_lob_orphan_create_CNT          ,0.0) -- Bulk operations
           + COALESCE(a.ios_lob_orphan_insert_CNT          ,0.0) -- Bulk operations
           + COALESCE(a.ios_row_overflow_fetch_in_pages_CNT,0.0)
           + COALESCE(a.ios_column_value_pull_in_row_CNT   ,0.0)
           + COALESCE(a.ios_column_value_push_off_row_CNT  ,0.0)
           )
     ,0.0) * @Prio_LOB
 --  ios: column_value_pull_in_row_count,column_value_push_off_row_count,lob_fetch_in_pages,lob_orphan_create_count
 --      ,lob_orphan_insert_count, row_overflow_fetch_in_pages

-- Flagged to create new NCS -------------------------------
+IIF(CHARINDEX(N'Request new NCS',p.prescription) > 0,50.0,0.0)  -- NOTE: keep in synch with above prescription codes

  FROM (--
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE rec_type      = N'P' -- parent level composite record
           AND (   index_CNT > 0
                OR type      = N'U' -- User Table
               )
       ) AS p
  LEFT OUTER
  JOIN (-- Buffer cache usage as a percent of the weighted total
        SELECT rec_type,parent_object_id,object_id,index_id,type
              ,mem_log = (b.mem_log / SUM(b.mem_log) OVER ())
          FROM (--Buffer cache usage - weighted by percent of table+indexes in memory
                --                     times the log of the reserved size of the table+indexes
                SELECT rec_type,parent_object_id,object_id,index_id,type
                      ,mem_log = LOG(c.reserved_page_PG_CNT) * c.buffer_total_KB_CNT / (c.reserved_page_PG_CNT * 8.0)
                  FROM [##SQLXL_Index_Compilation] AS c
                 WHERE c.rec_type                = N'P'     -- parent level composite record
                   AND c.tbl_is_memory_optimized = 0
                   AND c.reserved_page_PG_CNT    > 0
               ) AS b
       ) AS b
    ON p.rec_type         = b.rec_type
   AND p.rec_type         = b.rec_type
   AND p.parent_object_id = b.parent_object_id
   AND p.object_id        = b.object_id
   AND p.index_id         = b.index_id
   AND p.type             = b.type
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'A') AS a -- instance level composite record
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Compute Parent Prescription Priority - Index Percent of Totals'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Add Priority Metric computations to Parent & Indexes
\******************************************************************************************************************************************/
SET ANSI_WARNINGS OFF;

UPDATE tgt
   SET tbl_priority_metric = CASE rec_type
                                  WHEN N'A' THEN tpma.tbl_priority_metric -- instance level composite record
                                  WHEN N'P' THEN tpmd.tbl_priority_metric -- parent level composite record
                             END
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.obj_type,tgt.obj_name
      ,tbl_priority_metric = CASE rec_type
                                  WHEN N'A' THEN tpma.tbl_priority_metric -- instance level composite record
                                  WHEN N'D' THEN tpmd.tbl_priority_metric -- database level composite record
                             END
--*/
  FROM [##SQLXL_Index_Compilation] AS tgt
  LEFT OUTER
  JOIN (-- subtotal table priority metric to database level. Includes record for INSTANCE (database_id = 0)
        SELECT database_id
              ,tbl_priority_metric = ISNULL(SUM(tbl_priority_metric),0.0)
          FROM [##SQLXL_Index_Compilation]
         WHERE database_id > 0
         GROUP BY
               database_ID
       ) AS tpmd
    ON tgt.database_ID = tpmd.database_id
   AND tgt.rec_type    = N'D'                               -- database level composite record
  LEFT OUTER
  JOIN (-- subtotal table priority metric to instance level. Includes record for INSTANCE (database_id = 0)
        SELECT database_id         = 0
              ,tbl_priority_metric = SUM(tbl_priority_metric)
          FROM [##SQLXL_Index_Compilation]
       ) AS tpma
    ON tgt.database_ID = tpma.database_id
   AND tgt.rec_type  = N'A'  -- instance level composite record
 WHERE tgt.rec_type IN (N'A' -- instance level composite record
                       ,N'D' -- database level composite record
                       )
OPTION (MAXDOP 1,RECOMPILE);

SET ANSI_WARNINGS ON;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Aggregate Database & Instance Prescription Priority'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Add Priority Metric computations to Parent & Indexes - Buffer Cache
\******************************************************************************************************************************************/
-- Diagnostic - Table - Hi buffer cache usage (> 4MB reserved size, > 20% in buffer cache)
-- Diagnostic - Index - Hi buffer cache usage (> 2MB reserved size, > 20% in buffer cache)
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = N'High buffer cache used ' + [dbo].[SQLXL_3SD](1.0 * i.buffer_total_KB_CNT / (i.reserved_page_PG_CNT * 8.0),N'%')
   FROM [##SQLXL_Index_Compilation] AS i  -- only table source in query
  WHERE i.rec_type           NOT IN (N'A' -- instance level composite record
                                    ,N'D' -- database level composite record
                                    )
    AND i.tbl_is_memory_optimized = 0
    AND i.reserved_page_PG_CNT    > 0
    AND (   (i.rec_type = N'I' AND i.reserved_page_PG_CNT > 256) -- index level composite record, 2MB
         OR (i.rec_type = N'H' AND i.reserved_page_PG_CNT > 512) -- historical/archive table composite record, 4MB
         OR (i.rec_type = N'P' AND i.reserved_page_PG_CNT > 512) -- parent level composite record, 4MB
         OR (i.rec_type = N'S' AND i.reserved_page_PG_CNT > 512) -- system/internal table composite record, 4MB
        )
    AND i.buffer_total_KB_CNT > (8.0 * i.reserved_page_PG_CNT * 0.20) -- 8.0 to convert PAGE to KB
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Added Buffer Cache metric diagnostic records to Parent'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Add Priority Metric computations to Index diagnostics
-- Checking not performed of denominators since any value in any index should mean that the Instance value is also non-zero
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_Diagnostics]
      (rec_type
      ,database_id
      ,parent_object_id
      ,object_id
      ,index_id
      ,type
      ,diagnostic
      )
SELECT i.rec_type
      ,i.database_id
      ,i.parent_object_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,diagnostic = i.diagnostic
  FROM [##SQLXL_Index_Metrics_Summary] AS i
 WHERE rec_type IN (N'I'  -- index level composite record
                   ,N'P'  -- parent level composite record
                   )
   AND (--
           CHARINDEX(N'*Waits:'  ,i.diagnostic) = 1
        OR CHARINDEX(N'*Locks:'  ,i.diagnostic) = 1
        OR CHARINDEX(N'*Splits:' ,i.diagnostic) = 1
        OR CHARINDEX(N'*Merges:' ,i.diagnostic) = 1
        OR CHARINDEX(N'*MIX'     ,i.diagnostic) = 1
        OR CHARINDEX(N'*Buffer:' ,i.diagnostic) = 1
        OR CHARINDEX(N'*OPS:'    ,i.diagnostic) = 1
        OR CHARINDEX(N'*USG:'    ,i.diagnostic) = 1
        OR CHARINDEX(N'*LOB:'    ,i.diagnostic) = 1
       )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Added significant index metrics diagnostic records'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Add diagnostic records to [##SQLXL_Index_Compilation]',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- UPDATE [##SQLXL_Index_Compilation] table with Diagnostics & Metrics
\******************************************************************************************************************************************/
UPDATE tgt
   SET
/*** LOCAL TESTING ***
SET ANSI_WARNINGS ON;
SELECT parent_object_id,object_id,index_id,
--*/
       Diagnostics = STUFF(-- Strip off leading unnecessary characters
                           (--
                            SELECT NCHAR(167) + f.diagnostic
                              FROM (SELECT i = 0
                                          ,diagnostic_ID
                                          ,rec_type
                                          ,database_id
                                          ,parent_object_id
                                          ,object_id
                                          ,index_id
                                          ,type
                                          ,diagnostic
                                      FROM [##SQLXL_Index_Diagnostics]
                                     WHERE diagnostic IS NOT NULL
                                    UNION ALL
                                    SELECT i = 1
                                          ,diagnostic_ID
                                          ,rec_type
                                          ,database_id
                                          ,parent_object_id
                                          ,object_id
                                          ,index_id
                                          ,type
                                          ,diagnostic
                                      FROM [##SQLXL_Instance_Diagnostics]
                                     WHERE diagnostic IS NOT NULL
                                   ) AS f
                             WHERE tgt.database_id      = f.database_id
                               AND tgt.parent_object_id = f.parent_object_id
                               AND tgt.object_id        = f.object_id
                               AND tgt.index_id         = f.index_id
                               AND tgt.type COLLATE DATABASE_DEFAULT = f.type COLLATE DATABASE_DEFAULT
                               AND f.diagnostic        IS NOT NULL
                             ORDER BY f.i
                                     ,f.diagnostic_ID
                                     ,f.diagnostic DESC
                               FOR XML PATH(N''), TYPE
                           ).value('(./text())[1]', 'NVARCHAR(MAX)')
                           ,1,1,N'')
  FROM [##SQLXL_Index_Compilation] AS tgt
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Add diagnostic records to [##SQLXL_Index_Compilation]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
END;

/******************************************************************************************************************************************\
-- Databases OMITTED from this request
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @rowcount BIGINT
       ,@i        BIGINT
       ,@msg      NVARCHAR(1000)
--*/
BEGIN TRY
   DROP TABLE [#omitted_databases];
END TRY
BEGIN CATCH
END CATCH

SELECT database_id = CAST(db.database_id AS NVARCHAR(20))
      ,[Omitted Reason] = N'Database ' + QUOTENAME(db.name) + N' SKIPPED due to '
                        + LTRIM(  IIF(db.user_access_desc <> N'MULTI_USER'
                                    ,N' User Access Description: ' + db.user_access_desc
                                    ,N'')
                               + IIF(db.state_desc       <> N'ONLINE'
                                    ,N' Database state: ' + db.state_desc
                                    ,N'')
                               + IIF(db.is_distributor   <> 0
                                    ,N' Database is Distributor'
                                    ,N'')
                               + IIF(    COALESCE(db.secondary_role_allow_connections_desc,N'') = N'NO'
                                     AND COALESCE(db.role_desc                            ,N'') = N'SECONDARY'
                                    , N' Database is ' + db.role_desc
                                    + N' and allow connections is ' + db.secondary_role_allow_connections_desc
                                    ,N''
                                    )
                               )
      ,rn = ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
  INTO #omitted_databases
  FROM [##SQLXL_Index_sys_databases] AS db
 WHERE db.user_access_desc <> N'MULTI_USER'
    OR db.state_desc       <> N'ONLINE'
    OR db.is_distributor   <> 0
    OR (    COALESCE(db.secondary_role_allow_connections_desc,N'') = N'NO'
        AND COALESCE(db.role_desc                            ,N'') = N'SECONDARY'
       )
OPTION (MAXDOP 1,RECOMPILE);

SET @rowcount = @@ROWCOUNT;

IF @rowcount > 0 BEGIN
   SET @i = 1
   SELECT [Omitted Reason]
     FROM #omitted_databases    -- display on RESULTS tab too
   OPTION (MAXDOP 1,RECOMPILE);

   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'### OMITTED DATABASES ##################################################################',0,0) WITH NOWAIT;

   WHILE @i <= @rowcount
   BEGIN
      SELECT @msg = [Omitted Reason]
        FROM #omitted_databases
       WHERE rn = @i
      OPTION (MAXDOP 1,RECOMPILE);

      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @i += 1
   END  -- BEGIN

   RAISERROR(N'########################################################################################',0,0) WITH NOWAIT;
END; -- IF @rowcount > 0

/******************************************************************************************************************************************\
End of procedure SQLXL_INDEX
\******************************************************************************************************************************************/
IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,(SELECT collection_DTTM FROM [##SQLXL_Index_Startup]),GETDATE()),0))
            + N' End of procedure [##SQLXL_Index]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

IF @@TRANCOUNT > 0 COMMIT;

GO -- end of stored procedure [SQLXL_Index]

RAISERROR ('Created procedure [##SQLXL_Index] ...',0,0) WITH NOWAIT;

IF @@TRANCOUNT > 0 COMMIT;

/******************************************************************************************************************************************\
############################################################################################################################################
 END SQLXL_INDEX procedure
############################################################################################################################################
\******************************************************************************************************************************************/

-- VERSION 240811
/******************************************************************************************************************************************\
SQLXL BASE FUNCTIONS SQLXL BASE FUNCTIONS SQLXL BASE FUNCTIONS SQLXL BASE FUNCTIONS SQLXL BASE FUNCTIONS SQLXL BASE FUNCTIONS SQLXL BASE FUN
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
PLEASE NOTE: All SQLXL helper functions are created in the database your SSMS, ADS, dBeaver etc. session is connected to,
since you can't create temporary functions.
After clicking the "Get SQL Data" button in the spreadsheet or executing the SQLCMD script to create the text file they will be
deleted.
\******************************************************************************************************************************************/

/******************************************************************************************************************************************/
-- Session Environment settings
/******************************************************************************************************************************************/
SET ANSI_NULLS              ON;
SET ANSI_WARNINGS           ON;
SET ARITHABORT              ON;
SET ARITHIGNORE             OFF;
SET CURSOR_CLOSE_ON_COMMIT  OFF;
SET DATEFORMAT              YMD;
SET DEADLOCK_PRIORITY       -10; -- Lowest priority
SET FMTONLY                 OFF;
SET FORCEPLAN               OFF;
SET IMPLICIT_TRANSACTIONS   OFF;
SET LOCK_TIMEOUT           1000; -- in milliseconds
SET NOCOUNT                 ON;
SET NOEXEC                  OFF;
SET NUMERIC_ROUNDABORT      OFF;
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute.
SET QUOTED_IDENTIFIER        ON;
SET ROWCOUNT                  0; -- all rows are returned
SET STATISTICS IO,PROFILE,TIME,XML OFF;
SET TEXTSIZE         2147483647;  -- Use 32767 on export to Excel - cell maximum character count
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON;

/******************************************************************************************************************************************\
 function [dbo].[SQLXL_Strip_Strings] - remove character elements found in a string
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_Strip_Strings]') IS NULL
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_Strip_Strings]() RETURNS BIT AS BEGIN RETURN 0 END');
GO

ALTER FUNCTION [dbo].[SQLXL_Strip_Strings]
     (@String  NVARCHAR(MAX)
     ,@Match   NVARCHAR(MAX)
     ,@replace NVARCHAR(MAX)
     )
RETURNS NVARCHAR(MAX)
WITH RETURNS NULL ON NULL INPUT
AS BEGIN
   IF @replace IS NULL SET @replace = N''
   SET @Match = N'%['+@Match+']%'

   WHILE PATINDEX(@Match, @String) > 0 SET @String = STUFF(@String,PATINDEX(@Match,@String),1,@replace)

   IF @string = N'' SET @string = NULL
   RETURN @String
END;
GO

/******************************************************************************************************************************************\
 function [dbo].[SQLXL_Keep_Strings] - keep only character elements found in a string
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_Keep_Strings]') IS NULL
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_Keep_Strings]() RETURNS BIT AS BEGIN RETURN 0 END');
GO

ALTER FUNCTION [dbo].[SQLXL_Keep_Strings]
     (@String  NVARCHAR(MAX)
     ,@Match   NVARCHAR(MAX)
     ,@replace NVARCHAR(MAX)
     )
RETURNS NVARCHAR(MAX)
WITH RETURNS NULL ON NULL INPUT
AS BEGIN
   IF @replace IS NULL SET @replace = N''
   SET @Match =  N'%[^'+@Match+']%'

   WHILE PATINDEX(@Match, @String) > 0 SET @String = STUFF(@String,PATINDEX(@Match,@String),1,@replace)

   IF @string = N'' SET @string = NULL
   RETURN @String
END;
GO

/******************************************************************************************************************************************\
 function [dbo].[SQLXL_Parse_Strings] -  to, unh, parse strings using native functions if available or recursive CTE
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_Parse_Strings]') IS NULL
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_Parse_Strings]() RETURNS @t TABLE (r BIT, s BIT) AS BEGIN RETURN END');
GO

-----------------------------------------------------------------------------------------------------------
-- SQL 2022+ - use function STRING_SPLIT if possible, else recursive CTE
-----------------------------------------------------------------------------------------------------------
IF     CAST(PARSENAME(CONVERT(VARCHAR(32),SERVERPROPERTY(N'productversion')),4) AS INT) >= 16  -- SQL 2022+
   AND (SELECT compatibility_level FROM sys.databases WHERE database_id = DB_ID())      >= 160 -- SQL 2022+
BEGIN EXEC(N'
   ALTER FUNCTION [dbo].[SQLXL_Parse_Strings]
        (@string    NVARCHAR(MAX)
        ,@separator NVARCHAR(MAX)
        )
   RETURNS @parsedString
     TABLE (RowNbr BIGINT
           ,string NVARCHAR(MAX) NULL
           )
   WITH EXECUTE AS CALLER
   AS
   BEGIN

     DECLARE @lensep INT = DATALENGTH(@separator)/2;

     IF     @lensep       = 1    -- STRING_SPLIT function only accepts a single splitting charatcer
        AND LEN(@string) <= 4000 -- STRING_SPLIT function only accepts strings up to 4000 characters
     BEGIN
        INSERT INTO @parsedString
        SELECT ordinal
              ,value
          FROM STRING_SPLIT(@string,@separator,1);
     END
     ELSE BEGIN
        SET @string=@string+@separator;

        WITH p AS (
        SELECT CAST(1 AS BIGINT)                              AS StartPos
              ,CHARINDEX(@separator,@string)                  AS EndPos
        UNION ALL
        SELECT EndPos + @lensep                               AS StartPos
              ,CHARINDEX(@separator,@string,EndPos + @lensep) AS EndPos
          FROM p
         WHERE CHARINDEX(@separator,@string,EndPos + @lensep) > 0
        )
        INSERT INTO @parsedString
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
              ,SUBSTRING(@string,StartPos,EndPos-StartPos)
          FROM p
        OPTION (MAXRECURSION 0)
     END  -- ELSE BEGIN

     RETURN
   END')  -- EXEC
END;      -- IF CAST(PARSENAME(CONVERT(VARCHAR(32),SERVERPROPERTY(N'productversion')),4) AS INT) >= 16

ELSE IF     CAST(PARSENAME(CONVERT(VARCHAR(32),SERVERPROPERTY(N'productversion')),4) AS INT) >= 13  -- SQL 2016+
        AND (SELECT compatibility_level FROM sys.databases WHERE database_id = DB_ID())      >= 130 -- SQL 2016+
-----------------------------------------------------------------------------------------------------------
-- SQL 2016+ - use function STRING_SPLIT if possible, and ROW_NUMBER to order the result
-- else recursive CTE
-----------------------------------------------------------------------------------------------------------
BEGIN EXEC(N'
   ALTER FUNCTION [dbo].[SQLXL_Parse_Strings]
        (@string    NVARCHAR(MAX)
        ,@separator NVARCHAR(MAX)
        )
   RETURNS @parsedString
     TABLE (RowNbr BIGINT
           ,string NVARCHAR(MAX) NULL
           )
   WITH EXECUTE AS CALLER
   AS
   BEGIN

     DECLARE @lensep INT = DATALENGTH(@separator)/2;

     IF     @lensep       = 1    -- STRING_SPLIT function only accepts a single splitting character
        AND LEN(@string) <= 4000 -- STRING_SPLIT function only accepts strings up to 4000 characters
     BEGIN
        INSERT INTO @parsedString
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)),value
          FROM STRING_SPLIT(@string,@separator);
     END
     ELSE BEGIN
        SET @string=@string+@separator;

        WITH p AS (
        SELECT CAST(1 AS BIGINT)                              AS StartPos
              ,CHARINDEX(@separator,@string)                  AS EndPos
        UNION ALL
        SELECT EndPos + @lensep                               AS StartPos
              ,CHARINDEX(@separator,@string,EndPos + @lensep) AS EndPos
          FROM p
         WHERE CHARINDEX(@separator,@string,EndPos + @lensep) > 0
        )
        INSERT INTO @parsedString
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
              ,SUBSTRING(@string,StartPos,EndPos-StartPos)
          FROM p
        OPTION (MAXRECURSION 0)
     END

     RETURN
   END')  -- EXEC
END;      -- ELSE IF CAST(PARSENAME(CONVERT(VARCHAR(32),SERVERPROPERTY(N'productversion')),4) AS INT) >= 13

ELSE BEGIN EXEC(N'
-----------------------------------------------------------------------------------------------------------
-- Use only recursive CTE
-----------------------------------------------------------------------------------------------------------
   ALTER FUNCTION [dbo].[SQLXL_Parse_Strings]
        (@string    NVARCHAR(MAX)
        ,@separator NVARCHAR(MAX)
        )
   RETURNS @parsedString
     TABLE (RowNbr BIGINT
           ,string NVARCHAR(MAX) NULL
           )
   WITH EXECUTE AS CALLER
   AS
   BEGIN

     DECLARE @lensep INT = DATALENGTH(@separator)/2;

     BEGIN
        SET @string=@string+@separator;

        WITH p AS (
        SELECT CAST(1 AS BIGINT)                              AS StartPos
              ,CHARINDEX(@separator,@string)                  AS EndPos
        UNION ALL
        SELECT EndPos + @lensep                               AS StartPos
              ,CHARINDEX(@separator,@string,EndPos + @lensep) AS EndPos
          FROM p
         WHERE CHARINDEX(@separator,@string,EndPos + @lensep) > 0
        )
        INSERT INTO @parsedString
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
              ,SUBSTRING(@string,StartPos,EndPos-StartPos)
          FROM p
        OPTION (MAXRECURSION 0)
     END

     RETURN
   END')  -- EXEC
END;      -- ELSE BEGIN

GO

/******************************************************************************************************************************************\
-- function [dbo].[SQLXL_Numbers]
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_Numbers]') IS NULL
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_Numbers]() RETURNS TABLE AS RETURN (SELECT id = 0)');
GO

ALTER FUNCTION [dbo].[SQLXL_Numbers]
     (@zero_or_one   BIT = 1
     ,@top           BIGINT
     )
RETURNS TABLE AS RETURN
WITH
  P0(n) AS (SELECT NULL FROM (VALUES (1),(2),(3),(4)) n(n)),
  P1(n) AS (SELECT NULL FROM P0 A, P0 B),--        16 rows
  P2(n) AS (SELECT NULL FROM P1 A, P1 B),--       256 rows
  P3(n) AS (SELECT NULL FROM P2 A, P2 B),--     65536 rows
  P4(n) AS (SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) FROM P3 A, P3 B) -- 4294967296 rows
SELECT 0 n WHERE @zero_or_one = 0
UNION ALL
SELECT TOP(@top - CASE WHEN @zero_or_one = 0 THEN 1 ELSE 0 END) n FROM P4;
GO

/******************************************************************************************************************************************\
function [dbo].[SQLXL_3SD] - return a number rounded to 3 significant digits
FUTURE: consider using below for straight power of 10 conversions
   ALTER function sfround(@number float, @sigdig int) returns float as
   BEGIN
   return case when @number = 0 THEN 0 ELSE round(@number ,@sigdig -1-floor(log10(abs(@number )))) END
   END
\******************************************************************************************************************************************/
DECLARE @collation SYSNAME = (SELECT collation_name FROM sys.databases WHERE database_id = DB_ID())

IF object_id(N'[dbo].[SQLXL_3SD]') IS NULL
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_3SD]() RETURNS BIT AS BEGIN RETURN 0 END');
GO

ALTER FUNCTION [dbo].[SQLXL_3SD]
     (@value FLOAT
     ,@type  NVARCHAR(3) = N''
     )
/*
@Type Parameters
"ns" = Nanoseconds   10^-9 -- NOTE: Cannot use DATEADD with these time types
"mcs"= Microseconds  10^-6 -- NOTE: Cannot use DATEADD with these time types
"u"  = Microseconds  10^-6
"us" = Microseconds  10^-6
"U"  = Microseconds  10^-6
"m"  = Milliseconds  10^-3
"ms" = Milliseconds  10^-3
"M"  = Milliseconds  10^-3
"s"  = Seconds       10^ 0
"ss" = Seconds       10^ 0
"S"  = Seconds       10^ 0
"mi" = Minutes
"hh" = Hours
"dd" = Days
"wk" = Weeks
"yy" = Years

"P"  = SQL Server 8KB (8192 2^12 bytes) Pages
"PG" = SQL Server 8KB (8192 2^12 bytes) Pages
"B"  = Bytes       2^ 0
"KB" = Kilobytes   2^10
"MB" = Megabytes   2^20
"GB" = Gigabytes   2^30
"TB" = Terabytes   2^40
"PB" = Petabytes   2^50
"EB" = Exabytes    2^60
"ZB" = Zettabytes  2^70
"YB" = Yottabytes  2^80

""   = Number
"N"  = Number
"I"  = Integer
"%"  = Percent

TO DO;
- handle negative numbers
- handle tiny numbers

NOTE: cannot use NVARCHAR as value input since FLOAT values get converted to exponents
      when converted to VARCHAR in calculating POWER DIVISOR
*/

RETURNS NVARCHAR(7) -- COLLATE does not work here!
AS BEGIN
   /*************************************************************************************************************************************\
    Special Cases - empty, (MAX) value, less than zero
   \*************************************************************************************************************************************/
   IF @value IS NULL RETURN N''                     -- return empty string on NULL value
   IF @value = -1 AND @type = N'I' RETURN N'(MAX)'  -- return (MAX) when -1 entered - for %CHAR data types
   IF @value < 0.0   RETURN N'(<ZERO)'              -- no handling negative numbers, return (<ZERO)

   -- Multiply percents by 100
   IF @type = N'%' SET @value = 100.0 * @value

   -- convert SQL Server Pages to 8KB - makes math easier below
   IF @type IN (N'P',N'PG') BEGIN SET @value = @value * 8.0 SET @type  = N'KB' END

   /*********************************************************************************\
    *** There is a bug IN the ROUND function when called inside a scalar function ***
    *** introduced some time after SQL 2008 and before 2019                       ***
    *** without the next line "SET @value = @value + 0.0001" below:               ***
    *** SELECT [dbo].[SQLXL_3SD](0.0150,N'N') returns 0.01 NOT 0.02!              ***
    *** SELECT [dbo].[SQLXL_3SD](0.0450,N'N') returns 0.04 NOT 0.05!              ***
    *** SELECT [dbo].[SQLXL_3SD](0.0750,N'N') returns 0.07 NOT 0.08!              ***
    *** Until this gets figured out add an extra 0.0001 to values:                ***
   \*********************************************************************************/
   SET @value = @value + 0.0001

   -- if too small a number (for now) show zero plus the metric type (when not a number or an integer)
   IF ROUND(@value,2) < 0.01
      RETURN CASE WHEN @type = N'I' THEN N'0' ELSE N'0.00' END
            +CASE WHEN @type NOT IN (N'I',N'N')
                  THEN @type
                  ELSE N''
             END;

   IF ROUND(@value,2) < 1.00
      RETURN LEFT(CONVERT(MONEY,ROUND(@value,2)),4) + CASE WHEN @type NOT IN (N'I',N'N')
                                                           THEN @type
                                                           ELSE N''
                                                      END;

   -- Create a rounded to integer value for range comparisons below
   -- *** NOTE *** rounding the FLOAT(max value of a BIGINT) and converting to BIGINT causes error
   -- *** SELECT CAST(ROUND(CAST(9223372036854775807 AS FLOAT),0) AS BIGINT)
   -- *** fails with "Arithmetic overflow error converting expression to data type bigint"
   DECLARE @value_INT BIGINT  = ROUND(@value,0)

   /*************************************************************************************************************************************\
    Standardize number suffix for datetime & NUMBER types
   \*************************************************************************************************************************************/
   SET @type = CASE @type -- modify inbound datetime data types to the corresponding DATEADD dateparts
                    WHEN N'N'   THEN N''    -- Number
                    WHEN N'NS'  THEN N'ns'
                    WHEN N'MC'  THEN N'mcs'
                    WHEN N'MCS' THEN N'mcs'
                    WHEN N'U'   THEN N'mcs'
                    WHEN N'US'  THEN N'mcs'
                    WHEN N'M'   THEN N'ms'
                    WHEN N'MS'  THEN N'ms'
                    WHEN N'S'   THEN N'ss'
                    WHEN N'SS'  THEN N'ss'
                    WHEN N'MI'  THEN N'mi'
                    WHEN N'MM'  THEN N'mi'
                    WHEN N'HH'  THEN N'hh'
                    WHEN N'DD'  THEN N'dd'
                    WHEN N'WK'  THEN N'wk'
                    WHEN N'YY'  THEN N'yy'
                    ELSE @type
               END

   /*************************************************************************************************************************************\
    Special Cases - Dates & Time
   \*************************************************************************************************************************************/
   IF @type IN (N'ns' -- Nanoseconds   10^-9 -- NOTE: Cannot use DATEADD with these time types
               ,N'mcs'-- Microseconds  10^-6 -- NOTE: Cannot use DATEADD with these time types
               ,N'ms' -- Milliseconds  10^-3
               ,N'ss' -- Seconds       10^ 0
               ,N'mi' -- Minutes
               ,N'hh' -- Hours
               ,N'dd' -- Days
               ,N'wk' -- Weeks
               ,N'yy' -- Years
               )
   BEGIN
      IF @type = N'ns'  AND @value_INT >= 1000 BEGIN SET @type = N'mcs' SET @value = @value /1000.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'mcs' AND @value_INT >= 1000 BEGIN SET @type = N'ms'  SET @value = @value /1000.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'ms'  AND @value_INT >= 1000 BEGIN SET @type = N'ss'  SET @value = @value /1000.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'ss'  AND @value_INT >= 60   BEGIN SET @type = N'mi'  SET @value = @value /  60.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'mi'  AND @value_INT >= 60   BEGIN SET @type = N'hh'  SET @value = @value /  60.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'hh'  AND @value_INT >= 24   BEGIN SET @type = N'dd'  SET @value = @value /  24.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'dd'  AND @value_INT >= 7    BEGIN SET @type = N'wk'  SET @value = @value /   7.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'wk'  AND @value_INT >= 52   BEGIN SET @type = N'yy'  SET @value = @value /  52.0 SET @value_INT = ROUND(@value,0) END

      IF @value_INT >= 1000 RETURN N'FUTURE'
   END

   IF @value_INT < 10   RETURN CASE WHEN @type = N'I' THEN CAST(@value_int AS VARCHAR(3))
                                    ELSE LEFT(ROUND(CONVERT(MONEY,@value,2),2),4)+@type
                               END
   IF @value_INT < 100  RETURN CASE WHEN @type = N'I' THEN CAST(@value_int AS VARCHAR(3))
                                    ELSE LEFT(ROUND(CONVERT(MONEY,@value,2),1),4)+@type
                               END
   IF @value_INT < 1000 RETURN CASE WHEN @type = N'I' THEN CAST(@value_int AS VARCHAR(3))
                                    ELSE LEFT(ROUND(@value,0),4)+@type
                               END

   /*************************************************************************************************************************************\
    Declares - use COLLATE to differentiate between LOWER and UPPER @type
   \*************************************************************************************************************************************/
   DECLARE @power  VARCHAR(3) = CASE WHEN @type IN (N'B',N'I',N'',N'%')
                                     THEN N''
                                     ELSE UPPER(LEFT(@type,1)) -- which power of 10 or 2 prefix to show
                                END COLLATE SQL_Latin1_General_CP1_CS_AS

          ,@factor FLOAT      = CASE WHEN @type IN (N'I',N'',N'%')
                                     THEN 1000.0 -- next major power of 10 prefix
                                     ELSE 1024.0 -- 2^10 Kilobytes
                                END
          ,@suffix VARCHAR(3) = CASE WHEN @type IN (N'%')    THEN N'%'  -- percent
                                     WHEN @type IN (N'I',N'') THEN N''   -- numbers and integers
                                     ELSE N'B'                                     -- bytes
                                END COLLATE SQL_Latin1_General_CP1_CS_AS

  ---------------------------------------------------------------------------------------------------------------------------------------
   -- Calcs - if less than 3 digits to LEFT of decimal, multiply to show next lower power
  ---------------------------------------------------------------------------------------------------------------------------------------
   IF ROUND(@value,0) < 1000 AND @type <> N'%'
   BEGIN -- IF ROUND(@value,0) < 1000 AND @type <> N'%'
      WHILE ROUND(@value * @factor,0) < 1000
      BEGIN -- WHILE ROUND(@value * @factor,0) < 1000

         SET @value = @value * @factor
         SET @power = CASE @power COLLATE SQL_Latin1_General_CP1_CS_AS -- for each loop adjust the value type to the next lower size
                           WHEN N'n' THEN N'p' -- nano    > pico
                           WHEN N'u' THEN N'n' -- micro   > nano
                           WHEN N'm' THEN N'u' -- milli   > micro
                           WHEN N''  THEN N'm' -- deka    > milli
                           WHEN N'K' THEN N''  -- kilo    > deka
                           WHEN N'M' THEN N'K' -- mega    > kilo

                           WHEN N'G' THEN N'M' -- giga    > mega
                           WHEN N'B' THEN N'M' -- billion > mega
                           WHEN N'T' THEN CASE WHEN RIGHT(@type,1) = N'B'
                                                    THEN N'G' -- tera  > giga
                                                    ELSE N'B' -- tera  > billion
                                               END
                           WHEN N'P' THEN N'T' -- peta    > tera
                           WHEN N'E' THEN N'P' -- exa     > peta
                           WHEN N'Z' THEN N'E' -- zetta   > exa
                           WHEN N'Y' THEN N'Z' -- yotta   > zetta
                           ELSE N'#'
                      END
      END; -- WHILE ROUND(@value,0) < 1000
   END;    -- IF ROUND(@value,0) < 1000

  ---------------------------------------------------------------------------------------------------------------------------------------
  -- Calcs - if more than 3 digits to LEFT of decimal, divide to show next larger power
  ---------------------------------------------------------------------------------------------------------------------------------------
   ELSE IF ROUND(@value,0) > 999
   BEGIN -- IF ROUND(@value,0) > 999
      WHILE ROUND(@value,0) > 999
      BEGIN -- WHILE ROUND(@value,0) > 999
         SET @value = @value / @factor
         SET @power = CASE @power COLLATE SQL_Latin1_General_CP1_CS_AS  -- for each loop adjust the value type to the next higher size
                           WHEN N'p' THEN N'n' -- pico    > nano
                           WHEN N'n' THEN N'u' -- nano    > micro
                           WHEN N'u' THEN N'm' -- micro   > milli
                           WHEN N'm' THEN N''  -- milli   > deka
                           WHEN N''  THEN N'K' -- deka    > kilo
                           WHEN N'K' THEN N'M' -- kilo    > mega
                           WHEN N'M' THEN CASE WHEN RIGHT(@type,1) = N'B'
                                                    THEN N'G' -- mega  > giga
                                                    ELSE N'B' -- mega  > billion
                                               END
                           WHEN N'G' THEN N'T' -- giga    > tera
                           WHEN N'B' THEN N'T' -- billion > tera

                           WHEN N'T' THEN N'P' -- tera    > peta
                           WHEN N'P' THEN N'E' -- peta    > exa
                           WHEN N'E' THEN N'Z' -- exa     > zetta
                           WHEN N'Z' THEN N'Y' -- zetta   > yotta
                           ELSE N'#'
                      END
      END; -- WHILE ROUND(@value,0) > 999
   END;    -- IF ROUND(@value,0) > 999

  ---------------------------------------------------------------------------------------------------------------------------------------
  -- RETURN formatted value
  ---------------------------------------------------------------------------------------------------------------------------------------
   RETURN LTRIM(CASE WHEN ROUND(@value,0) >= 100 THEN LEFT(ROUND(CAST(@value AS DECIMAL(5,2)),0),3)
                     WHEN ROUND(@value,1) >=  10 THEN LEFT(ROUND(CAST(@value AS DECIMAL(5,2)),1),4)
                     ELSE                             LEFT(ROUND(CAST(@value AS DECIMAL(5,2)),2),4)
                END
               +@power
               +@suffix) COLLATE DATABASE_DEFAULT

END;  -- of procedure
GO

/******************************************************************************************************************************************/
-- function [dbo].[SQLXL_INT_DTTM] - Converts BIGINT time count to elapsed DATETIME (e.g. MILLISECONDS -> HOURS)
/******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_INT_DTTM]') IS NULL
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_INT_DTTM]() RETURNS BIT AS BEGIN RETURN 0 END');
GO

ALTER FUNCTION [dbo].[SQLXL_INT_DTTM]
     (@cnt  BIGINT   = NULL
     ,@prt  NCHAR(3) = N'ms' -- datepart, defaults to MILLISECONDS
     )
/* Converts elapsed count to DateTime */
RETURNS DATETIME
AS BEGIN
   IF @cnt IS NULL RETURN 0

   WHILE @cnt > 2147483647 -- max size INT for DATEADD parameter
   BEGIN
      IF @prt = N'wk'  BEGIN SET @prt = N'yy'  SET @cnt = @cnt /  52 END
      IF @prt = N'dd'  BEGIN SET @prt = N'wk'  SET @cnt = @cnt /   7 END
      IF @prt = N'hh'  BEGIN SET @prt = N'dd'  SET @cnt = @cnt /  24 END
      IF @prt = N'mi'  BEGIN SET @prt = N'hh'  SET @cnt = @cnt /  60 END
      IF @prt = N'ss'  BEGIN SET @prt = N'mi'  SET @cnt = @cnt /  60 END
      IF @prt = N'ms'  BEGIN SET @prt = N'ss'  SET @cnt = @cnt /1000 END
      IF @prt = N'mcs' BEGIN SET @prt = N'ms'  SET @cnt = @cnt /1000 END
      IF @prt = N'ns'  BEGIN SET @prt = N'mcs' SET @cnt = @cnt /1000 END
   END

   RETURN
      CASE @prt
           WHEN N'yy'  THEN DATEADD(yy ,@cnt,0)
           WHEN N'wk'  THEN DATEADD(wk ,@cnt,0)
           WHEN N'dd'  THEN DATEADD(dd ,@cnt,0)
           WHEN N'hh'  THEN DATEADD(hh ,@cnt,0)
           WHEN N'mi'  THEN DATEADD(mi ,@cnt,0)
           WHEN N'ss'  THEN DATEADD(ss ,@cnt,0)
           WHEN N'ms'  THEN DATEADD(ms ,@cnt,0)
           WHEN N'mcs' THEN DATEADD(mcs,@cnt,0)
           WHEN N'ns'  THEN DATEADD(ns ,@cnt,0)
           END
END;  -- of function
GO

/******************************************************************************************************************************************\
 Function [dbo].[SQLXL_DTTM_HMSM] - return a DATETIME type formatted elapsed value
 If >= 24 hours returns time in days
 If >= 60 minutes returns time in Hours
 If <  60 minutes returns time in MI:SS.mmm
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_DTTM_HMSM]') IS NULL
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_DTTM_HMSM]() RETURNS BIT AS BEGIN RETURN 0 END');
GO

ALTER FUNCTION [dbo].[SQLXL_DTTM_HMSM]
     (@dt DATETIME
     )
/* Returns elapsed date & time value as "#.## Day" -or- "#.## Hour" -or- "MM:SS:mmm" */
RETURNS NVARCHAR(20)
AS BEGIN
   IF @dt IS NULL RETURN N''

   DECLARE @df FLOAT = CONVERT(FLOAT,@dt,1)

   RETURN RTRIM(-- remove trailing spaces from formatted date/time
   CASE WHEN @df  =  -1          THEN N'NO LIMIT '
        WHEN @df  =   0          THEN N'00:00:000'
        WHEN @df >= 365.0        THEN LEFT(CAST(CONVERT(MONEY,@df / 365.0,1) AS NVARCHAR(21)) + N'yy      ',9) -- padding for same length
        WHEN @df >=   1.0        THEN LEFT(CAST(CONVERT(MONEY,@df        ,1) AS NVARCHAR(21)) + N'dd      ',9) -- padding for same length
        WHEN @df >=   1.0/(24.0) THEN LEFT(CAST(CONVERT(MONEY,@df * 24.0 ,1) AS NVARCHAR(21)) + N'hh      ',9) -- padding for same length
        ELSE RIGHT(CONVERT(NVARCHAR(12),@dt,114),9)
   END COLLATE DATABASE_DEFAULT)

END;  -- of function
GO

RAISERROR (N'Created SQLXL helper functions - persisted since cannot create temporary functions',0,0) WITH NOWAIT;

/******************************************************************************************************************************************\
********************************************************************************************************************************************
 END SQLXL_INDEX Helper Functions
********************************************************************************************************************************************
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
All SQLXL functions are created in the database your SQL studio tool is connected to.
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
SQL Server Versions & Default Compatibility (as of July 2024)
Azure SQL DB   - 16   - 160
Azure SQL MI   - 16   - 150
        2022   - 16   - 160
        2019   - 15   - 150
        2017   - 14   - 140
        2016   - 13   - 130
        2014   - 12   - 120
        2012   - 11   - 110
        2008R2 - 10.5 - 100
        2008   - 10   - 100
        2005   -  9   -  90
        2000   -  8   -  80

SQL Server EngineEditions including Azure
-------------------------------------------------------------------------------------
 1 = Personal or Desktop Engine (Not available in SQL Server 2005 (9.x) and later versions.)
 2 = Standard (For Standard, Web, and Business Intelligence.)
 3 = Enterprise (For Evaluation, Developer, and Enterprise editions.)
 4 = Express (For Express, Express with Tools, and Express with Advanced Services)

 5 = Azure SQL Database
 6 = Azure Synapse Analytics
 8 = Azure SQL Managed Instance
 9 = Azure SQL Edge (For all editions of Azure SQL Edge)
11 = Azure Synapse serverless SQL pools
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
-- Session Environment settings
\******************************************************************************************************************************************/
SET ANSI_NULLS              ON;
SET ANSI_WARNINGS           ON;
SET ARITHABORT              ON;
SET ARITHIGNORE             OFF;
SET CURSOR_CLOSE_ON_COMMIT  OFF;
SET DATEFORMAT              YMD;
SET DEADLOCK_PRIORITY       -10; -- Lowest priority
SET FMTONLY                 OFF;
SET FORCEPLAN               OFF;
SET IMPLICIT_TRANSACTIONS   OFF;
SET LOCK_TIMEOUT           1000; -- in milliseconds
SET NOCOUNT                 ON;
SET NOEXEC                  OFF;
SET NUMERIC_ROUNDABORT      OFF;
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute.
SET QUOTED_IDENTIFIER        ON;
SET ROWCOUNT                  0; -- all rows are returned
SET STATISTICS IO,PROFILE,TIME,XML OFF;
SET TEXTSIZE         2147483647;  -- Use 32767 on export to Excel - cell maximum character count
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON;

/******************************************************************************************************************************************\
Create table to store computed & formatted metric values. Structure needed prior to creating procedure below
\******************************************************************************************************************************************/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_Metrics];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Index_Metrics]
(rec_type         NCHAR(1)       COLLATE DATABASE_DEFAULT NOT NULL  -- D-Database,P-Parent,I-index
,database_id      SMALLINT                                NOT NULL
,parent_object_id INT                                     NOT NULL
,object_id        INT                                     NOT NULL
,index_id         INT                                     NOT NULL
,type             NVARCHAR(2)    COLLATE DATABASE_DEFAULT NOT NULL
,metric           SYSNAME        COLLATE DATABASE_DEFAULT NOT NULL
,metric_AMT       FLOAT                                       NULL
,metric_FMT       NVARCHAR(7)    COLLATE DATABASE_DEFAULT     NULL
,diagnostic_PCT   FLOAT                                       NULL
-----------------------------
,diagnostic       NVARCHAR(1000) COLLATE DATABASE_DEFAULT     NULL
,diagnostic_RANK  INT                                         NULL
,previous_sum_PCT FLOAT                                       NULL
);

-- Create index on SQLXL_Index_Metrics -------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_Metrics
    ON [##SQLXL_Index_Metrics]
       (rec_type
       ,database_id
       ,parent_object_id
       ,object_id
       ,index_id
       ,type
       ,metric
       )
  WITH (DATA_COMPRESSION = PAGE
       ,MAXDOP = 1
       );

/*########################################################################################################################################*\
PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRESENT PRES
\*########################################################################################################################################*/
BEGIN TRY
   EXEC (N'CREATE PROCEDURE [##SQLXL_Index_Present] AS RETURN 0;')
END TRY
BEGIN CATCH
END CATCH
GO

ALTER PROCEDURE [##SQLXL_Index_Present]
  WITH RECOMPILE
AS

/******************************************************************************************************************************************\
 Procedure Environment settings
\******************************************************************************************************************************************/
SET ANSI_NULLS               ON; -- Specifies ISO compliant behavior of (=) and (<>) comparison operators when used with null values
SET ANSI_WARNINGS            ON; -- Specifies ISO standard behavior for several error conditions. Must be ON with FOR XML statements
SET ARITHABORT               ON; -- Terminates a query when an overflow or divide-by-zero error occurs during query execution
SET ARITHIGNORE             OFF; -- Controls whether error messages are returned from overflow or divide-by-zero errors during a query
SET CURSOR_CLOSE_ON_COMMIT  OFF; -- OFF means that the server will not close cursors when you commit a transaction
SET DATEFORMAT              YMD; -- Sets the order of the month, day, and year date parts for interpreting date&time strings
SET DEADLOCK_PRIORITY       -10; -- Specifies the relative importance of the current session if deadlocked. (-10) is lowest priority
SET FMTONLY                 OFF; -- Returns only metadata to client. Used to test the response format without actually running the query
SET FORCEPLAN               OFF; -- When ON, optimizer uses FORCE ORDER + NESTED LOOP JOIN for FROM clause tables
SET IMPLICIT_TRANSACTIONS   OFF; -- When OFF, sets the connection to autocommit transaction mode
SET LOCK_TIMEOUT           1000; -- Specifies the number of milliseconds a statement waits for a lock to be released
SET NOCOUNT                  ON; -- Stops the message showing the count of rows affected by a statement or stored procedure
SET NOEXEC                  OFF; -- Compiles each query but does not execute it
SET NUMERIC_ROUNDABORT      OFF; -- Specifies the level of error reporting generated when rounding causes a loss of precision
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute
SET QUOTED_IDENTIFIER        ON; -- Causes SQL Server to follow ISO rules using quotation mark delimiting identifiers and literal strings
SET ROWCOUNT                  0; -- Stop processing after specified number of rows are returned. "0" all rows are returned
SET STATISTICS IO,PROFILE,TIME,XML OFF; -- Displays information on statement resource usage
SET TEXTSIZE         2147483647; -- Specifies size of BLOB returned by a SELECT statement. Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON; -- Automatically roll back the current transaction when a statement raises a run-time error

SELECT
/******************************************************************************************************************************************\
Incoming Records Types:
A - All sample/instance level
D - Database(s)
P - Parent object - rowstore table, clustered columnstore, View, SQL Table Valued Function
S - internal table or system object
I - Index, foreign key, missing index,

Excel Column Format Control - Append "|" (pipe) character for number format:
  |D... - Date &/or Time
  |E    - Exponent no decimals (same as E0)
  |E#   - Exponent with # decimals
  |N    - Commas no decimals (same as N0)
  |N#   - Commas with # decimals
  |P    - Percent with no decimals (same as P0)
  |P#   - Percent with # decimals
  |URL  - format cell as LINK
  |HTML - format cell as LINK

Excel column names with "\" (backslash) character code to identify columns to be formatted with a COLOR SCALE:
  \B - a number with LARGEST VALUE BAD - RED
  \G - a number with LARGEST VALUE GOOD - GREEN

Excel Column Label Format
  "!"  (exclamation) character code to identify columns to be formatted BOLD
  "!H" Bold Font and bigger size
  "~" (tilda) character code to identify locations of Line feeds to be replaced with CHRW(10)

\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
 Weighted sum of hurts
\******************************************************************************************************************************************/
 [Hurt Priority\B|N2] = IIF(    i.rec_type = N'P'                                  -- parent level composite record
                            AND a.tbl_priority_metric > 0
                           ,100.0 * i.tbl_priority_metric / a.tbl_priority_metric
                           ,NULL)

/******************************************************************************************************************************************\
 Filtering column used to drill down to table & index level
\******************************************************************************************************************************************/
,[Drill Down Filter|NW]   = -- Top Level
                          + CASE i.rec_type
                                 WHEN N'A' THEN i.rec_type -- instance level composite record
                                 WHEN N'D' THEN i.rec_type -- database level composite record
                                 WHEN N'P' THEN i.rec_type -- parent level composite record
                                 ELSE N'T'                 -- Index
                            END
                          + IIF(i.rec_type <> N'A'         -- instance level composite record
                               ,CAST(i.database_id AS NVARCHAR(20))
                               ,N'')
                          + IIF(i.rec_type NOT IN (N'A'    -- instance level composite record
                                                  ,N'D'    -- database level composite record
                                                  )
                               ,N'.' + CAST(COALESCE(i.history_source_object_id,i.parent_object_id) AS NVARCHAR(11))
                               ,N'')
                          -- Parent/History Table source table
                          + IIF(i.rec_type NOT IN (N'A'    -- instance level composite record
                                                  ,N'D'    -- database level composite record
                                                  )
                               -- Type of "table". Parents/sources first, history seconds, internal third
                               ,N'|'
                               + CASE i.obj_type_short_label
                                      WHEN N'HST'  -- History/archive table
                                      THEN N'3' + RIGHT(N'0000000000' + CAST(i.object_id AS NVARCHAR(20)),10)
                                      WHEN N'IT'   -- system internal table
                                      THEN N'6' + RIGHT(N'0000000000' + CAST(i.object_id AS NVARCHAR(20)),10)
                                      ELSE N'1'   -- Parent (Heap,Clustered,Clustered column store),SQL Table Valued Function (TVF), View
                                 END
                              + N'|'
                              ,N'')
                          + IIF(i.rec_type = N'I'          -- index level composite record
                               ,N'|'                       -- "Pipe" added to delimit drill down term in Excel filter
                               + CASE RTRIM(i.type)
                                      WHEN N'0'  THEN N'0' -- rowstore heap
                                      WHEN N'1'  THEN N'0' -- clustered rowstore index
                                      WHEN N'5'  THEN N'0' -- clustered columnstore
                                      ---------
                                      WHEN N'6'  THEN N'1' -- nonclustered columnstore index
                                      WHEN N'3'  THEN N'2' -- XML index
                                      WHEN N'4'  THEN N'3' -- Spatial index
                                      WHEN N'90' THEN N'4' -- full-text index of a tabular object
                                      ---------
                                      WHEN N'F'  THEN N'6' -- Foreign Key Constraint
                                      WHEN N'M'  THEN N'7' -- missing nonclustered rowstore index
                                      ---------
                                      ELSE RTRIM(i.type)   -- Anything else
                                 END
                               + N'|'
                               + IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
                                    ,RIGHT(N'000000000' + CAST(i.index_id AS NVARCHAR(20)),10)
                                    ,N'')
                               + IIF(i.type = N'F'         -- foreign key constraint
                                    , IIF(i.fkc_covered_by_idx_IDS IS NULL,N'U',N'C')
                                    + RIGHT(N'0000000000' + CAST(i.object_id AS NVARCHAR(20)),10)
                                    ,N'')                  -- Foreign Key index coverage
                               + IIF(i.type = N'M'         -- missing nonclustered rowstore index
                                    ,RIGHT(N'0000000000' + CAST(i.object_id AS NVARCHAR(20)),10)
                                    ,N'')                  -- Foreign Key index coverage
                               ,N'')

,[Parent Type & Object Type~Object Properties & Index Type] =
--------------------------------------------------------------------------------------------------------------------------------------------
 CASE WHEN i.rec_type = N'A' THEN N'#ALL'                 -- instance level composite record
      WHEN i.rec_type = N'D' THEN N'#DB'                  -- database level composite record
      WHEN i.rec_type = N'P' THEN N'*' + i.obj_type_label -- parent level composite record
      WHEN i.rec_type = N'H' THEN N'*' + i.obj_type_label -- historical/archive table composite record
      WHEN i.rec_type = N'S' THEN N'>' + i.obj_type_label -- system/internal table composite record
      ELSE i.obj_type_label + IIF(i.type = N'F'           -- foreign key constraint
                                 ,IIF(i.fkc_covered_by_idx_IDS IS NULL,N' UNC',N' COV')  -- Foreign Key index coverage
                                 ,N'')
 END

/******************************************************************************************************************************************\
 Object & Index Names & system-assigned IDs
\******************************************************************************************************************************************/
,[Names~Database~Schema~Table~Index~FK Name of FK~REF sch.tbl.col~FLT Idx Filter~EP EXT Prop~OID Object IDs]
--------------------------------------------------------------------------------------------------------------------------------------------
-- Line 1 - Instance,Database
--------------------------------------------------------------------------------------------------------------------------------------------
=IIF(i.rec_type = N'A' -- instance level composite record
    ,N'Instance/Sample'
    ,N'DB ' + COALESCE(QUOTENAME(i.Database_name),N'<Database_name?>')   -- Database
    )
-- Schema -----------------------------------------------------------
+IIF(i.rec_type NOT IN (N'A' -- instance level composite record
                       ,N'D' -- database level composite record
                       )
    ,N' SCH ' + COALESCE(QUOTENAME(i.Schema_Name),N'<Schema_Name?>')
    ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
-- Line 2 - Parent Object (and Object if History or Internal Table)
--------------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.obj_type_short_label = N'HST' -- History/archive table
    ,NCHAR(167) + N'PAR ' + QUOTENAME(hst_src.schema_name) + N'.' + QUOTENAME(hst_src.obj_name)
    ,N'')
+IIF(i.obj_type_short_label = N'IT'  -- system internal table
    ,NCHAR(167) + N'PAR ' + QUOTENAME(i.parent_schema_name) + N'.' + QUOTENAME(i.parent_object_name)
    ,N'')
+ CASE WHEN i.rec_type IN (N'A' -- instance level composite record
                          ,N'D' -- database level composite record
                          )
      THEN N''
      WHEN i.type = N'F'            -- foreign key constraint
      THEN NCHAR(167) + N'TBL ' + QUOTENAME(i.parent_object_name)
      ELSE NCHAR(167) + i.obj_type_short_label + N' ' + QUOTENAME(i.obj_name)
 END
--------------------------------------------------------------------------------------------------------------------------------------------
-- Line 3 Index
--------------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.rec_type = N'I'                                                          -- index level composite record
    ,NCHAR(167) + COALESCE(i.type_short_desc,N'<type_short_desc>')
    + N' ' + COALESCE(QUOTENAME(CASE WHEN i.internal_type > 202 THEN i.obj_name
                                 ELSE i.name
                            END),N'<type_name?>')
    ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
 -- Line 4 - "Index" Special Properties
--------------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.rec_type = N'I'                            -- index level composite record
    ,IIF(   i.is_primary_key = 1
         OR i.is_unique_constraint = 1
         OR i.is_unique = 1
         OR (    i.type      = N'1'               -- clustered rowstore index
             AND i.is_unique = 0
            )
         OR i.has_filter = 1
         OR i.type IN (N'3'                       -- XML index
                      ,N'4'                       -- Spatial index
                      )
         OR i.internal_type IS NOT NULL           -- indexes on internal tables
        , NCHAR(167)
        + STUFF(-- Strip off leading unnecessary characters
                IIF(i.is_primary_key = 1
                   ,N' PRIMARY KEY'
                   ,IIF(i.is_unique_constraint = 1
                       ,N' UNIQUE CONSTRAINT'
                       ,IIF(i.is_unique = 1
                           ,N' UNIQUE'
                           ,IIF(i.TYPE = N'1'     -- clustered rowstore index
                               ,N' *NOT UNIQUE*'  -- special flag for CLUSTERED ROWSTORE
                               ,N'')
                           )
                       )
                   )
              +IIF(i.internal_type IS NOT NULL
                  ,N' ' + COALESCE(i.internal_type_desc
                                  ,N' Internal Type ' + RIGHT(N'00' + CAST(i.internal_type AS NVARCHAR(3)),3)) COLLATE DATABASE_DEFAULT
                  ,N'')
               +IIF(i.has_filter = 1,N' FILTERED',N'') -- index filter
               +IIF(i.TYPE = N'3'                      -- XML index
                   ,N' ' + COALESCE(i.sub_type_desc,N'<sub_type_desc>')
                   ,N'')
               +IIF(i.TYPE = N'4'                      -- Spatial index
                   , N' '     + COALESCE(i.sub_type_desc,N'<sub_type_desc>')
                   + N' SCH: ' + COALESCE(i.si_tessellation_scheme,N'<i.si_tessellation_scheme?>')
                   ,N'')
               ,1,1,N'')
        ,N'')
   ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
 -- Line 5 - Object IDs for all objects
--------------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.rec_type = N'A'  -- instance level composite record
    ,N''
    ,NCHAR(167))
+IIF(i.rec_type <> N'A' -- instance level composite record
    ,N'DB ' + COALESCE(QUOTENAME(i.database_id),N'<database_id?>')
    ,N'')
+IIF(i.rec_type NOT IN (N'A' -- instance level composite record
                       ,N'D' -- database level composite record
                       )
    , IIF(i.parent_object_id <> i.object_id
         , CASE i.obj_type_short_label
                WHEN N'IT'  THEN N' PAR ' -- system internal table
                WHEN N'HST' THEN N' PAR'  -- History/archive table
                ELSE N' ' + i.obj_type_short_label + N' '
           END
         + QUOTENAME(i.parent_object_id)
        ,N'')
    + IIF(i.obj_type <> N'F' -- foreign key constraint
         ,COALESCE(N' ' + i.obj_type_short_label + N' ',N' <OSTL> ') + COALESCE(QUOTENAME(i.object_id),N'<object_id?>')
         ,N'')
    ,N'')
+IIF(i.rec_type IN (N'I')
    , CASE i.type
           WHEN N'F' -- foreign key constraint
           THEN N' FKC ' + COALESCE(QUOTENAME(i.Index_ID),N'<index_id?>')
           WHEN N'M' -- missing nonclustered rowstore index
           THEN N' MIX ' + COALESCE(QUOTENAME(i.Index_ID),N'<index_id?>') -- missing nonclustered rowstore index
           WHEN N'V' -- View
           THEN N''
           ELSE N' IDX ' + COALESCE(QUOTENAME(i.Index_ID),N'<index_id?>')
      END
    ,N'')

/******************************************************************************************************************************************\
-- Detailed actions for each index and selected other objects
\******************************************************************************************************************************************/
,[Prescriptions] = i.prescription

/******************************************************************************************************************************************\
-- Detailed diagnostic information for each index and objects
\******************************************************************************************************************************************/
,[Diagnostics] = LEFT(i.[diagnostics]
                     + CASE WHEN i.rec_type = N'I'
                             AND i.type     = N'F' -- foreign key constraint
                            THEN  NCHAR(167)
                                + N'-- Foreign Key Reference ---'
                                + NCHAR(167)
                                + COALESCE(i.fkc_reference,N'<fkc_reference?>')             -- Referenced schema + table + column(s)
                                + NCHAR(167)
                                + N'OID DB ' + QUOTENAME(i.database_id)                     -- Referenced Database ID
                                + N' TBL '   + COALESCE(QUOTENAME(i.fkc_referenced_object_id)
                                                       ,N'fkc_referenced_object_id?')       -- Referenced Table ID
                                + N' IDX '   + COALESCE(QUOTENAME(i.fkc_referenced_index_id)
                                                       ,N'fkc_referenced_index_id?')        -- Referenced Index ID
                            ELSE N''
                       END
                     ,32767) -- to avoid Excel treating as MAX column

/******************************************************************************************************************************************\
-- Index Element Uniqueness, in increasing key order
\******************************************************************************************************************************************/
,[Idx Element Uniqueness~Stats Density X RowCount~F = Filtered~(%) of Table Rows|N2]
= IIF(i.rec_type = N'P'                                     -- parent level composite record
     ,i.Indexed_Columns
     ,i.element_uniqueness)

/******************************************************************************************************************************************\
-- Index Key and Included Column Details
\******************************************************************************************************************************************/
,[Columns~CX(#) Clustered Idx&Key~Name~Type+bytes~Identity & attributes~ANSI settings~Partition~(Uniqueness)~Statistics Steps]
                 = i.key_column_info
                  +IIF(i.Included_column_info IS NOT NULL
                      ,IIF(i.TYPE IN (N'2' -- nonclustered rowstore index
                                     ,N'M' -- missing nonclustered rowstore index
                                     )
                          ,NCHAR(167) + N'-- Included --------------------------'
                          ,N'')
                      + NCHAR(167) + i.Included_column_info
                      ,N'')

/******************************************************************************************************************************************\
-- Index Synergies
\******************************************************************************************************************************************/
,[Index Synergies~Sequence,Overlap,Keys] = i.Overlap_Code

/******************************************************************************************************************************************\
-- Physical metrics & buffer usage
\******************************************************************************************************************************************/
,[Index~RSZ Rsrvd size (%Tbl)~BSZ Buffer size (%Rsrv)~Tbl ROW Rows COL cols~LEN Wor Length~FCT Factor & Pad~Idx KEY Cnt & Len] =
STUFF(CASE WHEN i.type     = N'3'   -- XML Index
           THEN NCHAR(167) + N'XML'

           WHEN i.type     = N'4'   -- Spatial Index
           THEN NCHAR(167) + N'SPT'

           WHEN i.type     = N'90'  -- full-text index of a tabular object
           THEN NCHAR(167) + N'FTX'

           WHEN i.type     = N'F'   -- foreign key constraint
           THEN  NCHAR(167)
               + N'KEY   '          -- extra space added to make 2nd column in cell align
               + CAST(COALESCE(i.Key_Columns_CNT,0) AS NVARCHAR(20))
               + N' LEN '
               + [dbo].[SQLXL_3SD](COALESCE(i.key_total_datatype_length_bytes,0.0),N'B')

           WHEN i.type     = N'M'   -- missing nonclustered rowstore index
           THEN  NCHAR(167)
               + N'KEY   '          -- extra space added to make 2nd column in cell align
               + CAST(COALESCE(i.Key_Columns_CNT,0) AS NVARCHAR(20))
               + N' LEN '
               + [dbo].[SQLXL_3SD](COALESCE(i.key_total_datatype_length_bytes,0.0),N'B')
               + NCHAR(167)
               + N'INC   '          -- extra space added to make 2nd column in cell align
               + CAST(COALESCE(i.Included_Columns_CNT,0) AS NVARCHAR(20))
               + N' LEN ' + [dbo].[SQLXL_3SD](COALESCE(i.inc_total_datatype_length_bytes,0),N'I') + N'B'

           WHEN i.type     = N'V'   -- View
           THEN  NCHAR(167) + N'View'
               + IIF(i.index_id = 0 -- HEAP (no index on view)
                    ,N' Unindexed'
                    ,N'')

           WHEN i.obj_type = N'TF'  -- SQL table-valued-function SQL 2012+
           THEN NCHAR(167) + N'TVF' -- table functions w/o indexes have no stats other than PLAN CACHE

           ELSE -------------------------------------------------------------------------------------------------------------
                -- reserved size on disk or InMemory
                -------------------------------------------------------------------------------------------------------------
                 NCHAR(167) + N'RSZ   ' -- extra space added to make 2nd column in cell align
               + COALESCE((-- retrieve & format computed metric value
                           SELECT m.metric_FMT + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                             FROM [##SQLXL_Index_Metrics] AS m
                            WHERE i.rec_type              = m.rec_type
                              AND i.database_id           = m.database_id
                              AND i.parent_object_id      = m.parent_object_id
                              AND i.object_id             = m.object_id
                              AND i.index_id              = m.index_id
                              AND i.type                  = m.type
                              AND N'reserved_page_PG_CNT' = m.metric
                          )
                         ,IIF(i.row_cnt = 0
                             ,N'MT'
                             ,[dbo].[SQLXL_3SD](i.reserved_page_PG_CNT,N'P'))
                         )

               -----------------------------------------------------------------------------------------------------------------------------
               -- Buffer cache usage & oercent of reserved space
               -----------------------------------------------------------------------------------------------------------------------------
               + NCHAR(167) + N'BSZ   ' + [dbo].[SQLXL_3SD](COALESCE(i.buffer_total_KB_CNT,0),N'KB')
               + IIF(i.reserved_page_PG_CNT > 0
                    ,N' (' + [dbo].[SQLXL_3SD](COALESCE(1.0 * i.buffer_total_KB_CNT / (i.reserved_page_PG_CNT * 8.0),0),N'%')
                    + N')'
                    ,N'')
               -----------------------------------------------------------------------------------------------------------------------------
               --
               -----------------------------------------------------------------------------------------------------------------------------
               + NCHAR(167) + N'ROW ' + [dbo].[SQLXL_3SD](i.row_CNT,'I') + IIF(i.has_filter = 1,N'(F)',N'')
               + IIF(i.rec_type IN (N'H' -- -- historical/archive table composite record
                                   ,N'P' -- parent level composite record
                                   ,N'S' -- system/internal table composite record
                                   )
                    , N' COL ' + [dbo].[SQLXL_3SD](p.tbl_column_CNT,'I')
                    + IIF(i.row_CNT > 0
                         ,NCHAR(167) + N'LEN   ' + [dbo].[SQLXL_3SD](i.tbl_row_size_byte_AVG,'B') + N' AVG'
                         ,N'')
                    ,N'')
               -------------------------------------------------------------------------------------------------------------
               --
               -----------------------------------------------------------------------------------------------------------------------------
               + IIF( i.rec_type = N'I'
                    , NCHAR(167) + N'KEY   ' -- extra space added to make 2nd column in cell align
                    + CASE i.type
                           WHEN N'0' THEN N'HP'  -- rowstore heap
                           WHEN N'5' THEN N'CCS' -- Clustered columnstore
                           WHEN N'6' THEN N'NCS' -- nonclustered columnstore index
                           ELSE CAST(i.Key_Columns_CNT AS NVARCHAR(20))
                      END
                    + CASE WHEN i.key_total_datatype_length_bytes > 0
                           THEN N' LEN ' + [dbo].[SQLXL_3SD](i.key_total_datatype_length_bytes,N'I') + N'B'
                           ELSE N''
                      END
                    ,N'')
               -----------------------------------------------------------------------------------------------------------------------------
               --
               -----------------------------------------------------------------------------------------------------------------------------
               + IIF( i.rec_type = N'I'
                    , NCHAR(167) + N'INC    ' -- extra space added to make 2nd column in cell align
                    + CASE i.type
                           WHEN N'0' THEN N'HP'    -- rowstore heap
                           WHEN N'1' THEN N'<all>' -- Clustered Rowstore index
                           WHEN N'5' THEN N'<all>' -- Clustered columnstore
                           ELSE CAST(i.Included_Columns_CNT AS NVARCHAR(20))
                      END
                    + CASE WHEN i.inc_total_datatype_length_bytes > 0
                           THEN N' LEN ' + [dbo].[SQLXL_3SD](i.inc_total_datatype_length_bytes,N'I') + N'B'
                           ELSE N''
                      END
                    ,N'')

               -----------------------------------------------------------------------------------------------------------------------------
               -- Fill factor & tree padding
               -----------------------------------------------------------------------------------------------------------------------------
               + IIF(    i.rec_type  = N'I'   -- index-level record
                    , NCHAR(167) + N'FCT   '  -- extra space added to make 2nd column in cell align
                    + CASE WHEN i.TYPE = N'0' -- rowstore heap
                           THEN N'HP'
                           WHEN i.type IN (N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90') -- Not rowstore Heap, Missing Index, Foreign Key
                           THEN  COALESCE([dbo].[SQLXL_3SD](i.fill_factor,N'I') + N'%',N'<??>')
                               + N' PAD '
                               + COALESCE(CASE i.is_padded WHEN 0 THEN N'No' WHEN 1 THEN N'Yes' ELSE N'' END,N'<??>')
                           ELSE N'N/A'
                      END
                    ,N'')
      END -- CASE WHEN i.type     = N'3' -- XML index
     ,1,1,N'')

/******************************************************************************************************************************************\
-- Operational Metrics
\******************************************************************************************************************************************/
,[Total Use (%Nxt Lvl)~OPS/CMP TOT CNT~USR USG Contact TOT CNT~R/W OPS & USG Read/Write~WTC Wait CNT~WTS Wait SEC~LCK Lock CNT]
= CASE WHEN i.obj_type = N'V' -- View
        AND i.type     = N'0' -- views without indexes don't record any usage stats other than in PLAN CACHE
       THEN N'View Heap'  + NCHAR(167) + N'No data'
       WHEN i.obj_type = N'F' -- foreign key constraint
       THEN N'Foreign Key' + NCHAR(167) + N'No data'
       WHEN i.type = N'M'     -- missing nonclustered rowstore index
       THEN -- extra space added to make 2nd column in cell align
                          N'RDS  ' + COALESCE((-- retrieve & format computed metric value
                                               SELECT m.metric_FMT + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                 FROM [##SQLXL_Index_Metrics] AS m
                                                WHERE i.rec_type           = m.rec_type
                                                  AND i.database_id        = m.database_id
                                                  AND i.parent_object_id   = m.parent_object_id
                                                  AND i.object_id          = m.object_id
                                                  AND i.index_id           = m.index_id
                                                  AND i.type               = m.type
                                                  AND N'ius_user_read_CNT' = m.metric
                                              )
                                             ,N'0')
                                  + N' (USG)'
           + NCHAR(167) + N'WRT '   + N'n/a'
           + NCHAR(167) + N'R/W  '  + N'n/a'
           + NCHAR(167) + N'WTS '   + N'n/a'
           + NCHAR(167) + N'WTC '   + N'n/a'
           + NCHAR(167) + N'LCK   ' + N'n/a'
       ELSE               N'RDS  '  + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_FMT + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type           = m.rec_type
                                                   AND i.database_id        = m.database_id
                                                   AND i.parent_object_id   = m.parent_object_id
                                                   AND i.object_id          = m.object_id
                                                   AND i.index_id           = m.index_id
                                                   AND i.type               = m.type
                                                   AND N'ops_total_read_CNT' = m.metric
                                               )
                                             ,N'0')
           + NCHAR(167) + N'WRT '   + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_FMT + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type             = m.rec_type
                                                   AND i.database_id          = m.database_id
                                                   AND i.parent_object_id     = m.parent_object_id
                                                   AND i.object_id            = m.object_id
                                                   AND i.index_id             = m.index_id
                                                   AND i.type                 = m.type
                                                   AND N'ops_total_write_CNT' = m.metric
                                               )
                                             ,N'0')
           + NCHAR(167) + N'R/W  '  + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_FMT + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type               = m.rec_type
                                                   AND i.database_id            = m.database_id
                                                   AND i.parent_object_id       = m.parent_object_id
                                                   AND i.object_id              = m.object_id
                                                   AND i.index_id               = m.index_id
                                                   AND i.type                   = m.type
                                                   AND N'ops_read_to_write_RAT' = m.metric
                                               )
                                             ,N'n/a')
           + NCHAR(167) + N'WTS '   + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_FMT + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type               = m.rec_type
                                                   AND i.database_id            = m.database_id
                                                   AND i.parent_object_id       = m.parent_object_id
                                                   AND i.object_id              = m.object_id
                                                   AND i.index_id               = m.index_id
                                                   AND i.type                   = m.type
                                                   AND N'ops_total_wait_MS_CNT' = m.metric
                                               )
                                             ,N'0')
           + NCHAR(167) + N'WTC '   + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_FMT + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type            = m.rec_type
                                                   AND i.database_id         = m.database_id
                                                   AND i.parent_object_id    = m.parent_object_id
                                                   AND i.object_id           = m.object_id
                                                   AND i.index_id            = m.index_id
                                                   AND i.type                = m.type
                                                   AND N'ops_total_wait_CNT' = m.metric
                                               )
                                             ,N'0')
           + NCHAR(167) + N'LCK  '  + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_FMT + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type            = m.rec_type
                                                   AND i.database_id         = m.database_id
                                                   AND i.parent_object_id    = m.parent_object_id
                                                   AND i.object_id           = m.object_id
                                                   AND i.index_id            = m.index_id
                                                   AND i.type                = m.type
                                                   AND N'ops_total_lock_CNT' = m.metric
                                               )
                                             ,N'0')
  END

/******************************************************************************************************************************************\
-- Missing Index Query
\******************************************************************************************************************************************/
,[MIX Biggest Resource Query] = LEFT(
                                REPLACE(
                                REPLACE(
                                REPLACE(
                                REPLACE(i.mqy_query_text                 -- text string to reformat for import to excel
                                       ,NCHAR(13) + NCHAR(10),NCHAR(167)) -- carriage return + line feed with backslash
                                       ,NCHAR(13),NCHAR(167))             -- carriage return with backslash
                                       ,NCHAR(10),NCHAR(167))             -- line feed with backslash
                                       ,NCHAR(09),N'   ')                -- tab with 3 spaces
                                    ,32767)

/******************************************************************************************************************************************\
-- Constraint reference & Index Filter definition
\******************************************************************************************************************************************/
,[Constraints & Computed~CHK-Check, Key, DEF-Default~CCOL-Computed Column]
       = STUFF(-- Strip off leading unnecessary characters
               LEFT( IIF(i.constraints IS NOT NULL
                        ,NCHAR(167) + REPLACE(
                                      REPLACE(
                                      REPLACE(
                                      REPLACE(i.constraints                    -- text string to reformat for import to excel
                                             ,NCHAR(13) + NCHAR(10),NCHAR(167)) -- carriage return + line feed with backslash
                                             ,NCHAR(13),NCHAR(167))             -- carriage return with backslash
                                             ,NCHAR(10),NCHAR(167))             -- line feed with backslash
                                             ,NCHAR(09),N'   ')                -- tab with 3 spaces
                       ,N'')
                   ,32767)
              ,1,1,N'')

/******************************************************************************************************************************************\
-- Index & Stats Filter Definitions
\******************************************************************************************************************************************/
,[Index Filters~Statistics Names~& Filters]
       = STUFF(-- Strip off leading unnecessary characters
               LEFT( IIF(i.has_filter = 1
                        ,NCHAR(167) + N'IDX FLTR:'
                                    + REPLACE(
                                      REPLACE(
                                      REPLACE(
                                      REPLACE(i.filter_definition               -- text string to reformat for import to excel
                                             ,NCHAR(13) + NCHAR(10),NCHAR(167)) -- carriage return + line feed
                                             ,NCHAR(13),NCHAR(167))             -- carriage return
                                             ,NCHAR(10),NCHAR(167))             -- line feed
                                             ,NCHAR(09),N'   ')                 -- tab with 3 spaces
                       ,N'')

                   + IIF(    i.stats_Name > N''
                        ,NCHAR(167) + N'STAT:' + i.stats_Name -- NULL if filtered stat on a table column
                        ,N'')
                   + IIF(    i.stathdr_Filter_Expression > N''
                         AND i.rec_type <> N'P'                                 -- parent level composite record
                        ,NCHAR(167) + N'STAT FLTR:'
                                    + REPLACE(
                                      REPLACE(
                                      REPLACE(
                                      REPLACE(i.stathdr_Filter_Expression       -- text string to reformat for import to excel
                                             ,NCHAR(13) + NCHAR(10),NCHAR(167)) -- carriage return + line feed
                                             ,NCHAR(13),NCHAR(167))             -- carriage return
                                             ,NCHAR(10),NCHAR(167))             -- line feed
                                             ,NCHAR(09),N'   ')                 -- tab with 3 spaces
                       ,N'')
                   + IIF(    i.stathdr_Filter_Expression > N''
                         AND i.rec_type = N'P'                                  -- parent level composite record
                        ,NCHAR(167) + REPLACE(
                                      REPLACE(
                                      REPLACE(
                                      REPLACE(i.stathdr_Filter_Expression       -- text string to reformat for import to excel
                                             ,NCHAR(13) + NCHAR(10),NCHAR(167)) -- carriage return + line feed
                                             ,NCHAR(13),NCHAR(167))             -- carriage return
                                             ,NCHAR(10),NCHAR(167))             -- line feed
                                             ,NCHAR(09),N'   ')                 -- tab with 3 spaces
                       ,N'')
                   ,32767)
              ,1,1,N'')

/******************************************************************************************************************************************\
-- Table Logical & Physical File Info
\******************************************************************************************************************************************/
,[Table File & Partitions] =
 STUFF(-- Strip off leading unnecessary characters
         CASE WHEN i.data_space_id IS NOT NULL
              THEN NCHAR(167) + N'Data Space' + N' ' + QUOTENAME(i.data_space_name)
                  + N' ' + N'(' + CAST(i.data_space_id AS NVARCHAR(20)) + N')'
              ELSE N''
         END
        --
       + CASE WHEN i.data_space_logical_filename IS NOT NULL
              THEN NCHAR(167) + N'Logical file name' + N' ' + QUOTENAME(i.data_space_logical_filename)
              ELSE N''
         END
        --
       + CASE WHEN i.partition_Column_ID > 0
              THEN NCHAR(167) + N'Partition COLUMN' + N' ' + QUOTENAME(i.partition_Column_Name)
                  + N' ' + N'(' + CAST(i.partition_Column_ID AS NVARCHAR(20)) + N')'
              ELSE N''
         END
        --
       + CASE WHEN i.partition_schemes_name IS NOT NULL
              THEN NCHAR(167) + N'Partition scheme'  + N' ' + QUOTENAME(i.partition_schemes_name)
              ELSE N''
         END
        --
       + CASE WHEN i.partition_function_id > 0
              THEN NCHAR(167) + N'Partition function' + N' ' + QUOTENAME(i.partition_function_name)
                  + N' ' + N'(' + CAST(i.partition_function_id  AS NVARCHAR(20)) + N')'
              ELSE N''
         END
       ,1,1,N'')

/******************************************************************************************************************************************\
-- Extended Properties  -- replace CarriageReturn (13) & LineFeed(10) with ASCII 167, tab with 3 spaces
\******************************************************************************************************************************************/
,[Extended Properties]  = LEFT(
                          REPLACE(
                          REPLACE(
                          REPLACE(
                          REPLACE(i.extended_properties             -- text string to reformat for import to excel
                                 ,NCHAR(13) + NCHAR(10),NCHAR(167)) -- carriage return + line feed with backslash
                                 ,NCHAR(13),NCHAR(167))             -- carriage return with backslash
                                 ,NCHAR(10),NCHAR(167))             -- line feed with backslash
                                 ,NCHAR(09),N'   ')                 -- tab with 3 spaces
                              ,32767)

/******************************************************************************************************************************************\
--Table Priority Metrics
\******************************************************************************************************************************************/
,[Table OPS Wait TM!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ops_total_wait_MS_CNT > 0 AND i.ops_total_wait_MS_CNT > 0
                             ,100.0 * i.ops_total_wait_MS_CNT / a.ops_total_wait_MS_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
,[Table OPS Wait CNT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ops_total_wait_CNT > 0
                             ,100.0 * i.ops_total_wait_CNT / a.ops_total_wait_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
----------------------------------------------
,[Table OPS Locks CNT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ops_total_lock_CNT > 0
                             ,100.0 * i.ops_total_lock_CNT / a.ops_total_lock_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
,[Table OPS Lock Promo!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ios_lock_promotion_attempt_CNT > 0
                             ,100.0 * i.ios_lock_promotion_attempt_CNT / a.ios_lock_promotion_attempt_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
,[Table OPS Promo Fail!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ios_lock_promotion_attempt_CNT > 0
                             ,100.0 * (i.ios_lock_promotion_attempt_CNT - i.ios_lock_promotion_CNT)
                                    / A.ios_lock_promotion_attempt_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
----------------------------------------------
,[Table OPS Page Split!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ops_total_page_split_CNT > 0
                             ,100.0 * i.ops_total_page_split_CNT / a.ops_total_page_split_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
,[Table OPS Splits to Write PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND i.page_splits_to_write_PCT > 0.0
                             ,i.page_splits_to_write_PCT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
,[Table OPS Page Merge!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ops_total_page_merge_CNT > 0
                             ,100.0 * i.ops_total_page_merge_CNT / a.ops_total_page_merge_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
,[Table OPS Merge to Write PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND i.page_Merge_to_write_PCT > 0.0
                             ,i.page_Merge_to_write_PCT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
----------------------------------------------
,[Table MIX Advantage Weighted!H\G|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.mix_Advantage_weighted_AMT > 0
                              AND i.mix_Advantage_weighted_AMT > 0
                             ,100.0 * i.mix_Advantage_weighted_AMT / a.mix_Advantage_weighted_AMT
                             ,NULL)
,[Table MIX Advantage!H\G|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.mix_Advantage_AMT > 0
                              AND i.mix_Advantage_AMT > 0
                             ,100.0 * i.mix_Advantage_AMT / a.mix_Advantage_AMT
                             ,NULL)
----------------------------------------------
,[Table OPS Writes!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ops_total_write_CNT > 0
                             ,100.0 * i.ops_total_write_CNT / a.ops_total_write_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
,[Table USG Writes!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ius_user_updates_CNT > 0
                             ,100.0 * i.ius_user_updates_CNT / a.ius_user_updates_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
----------------------------------------------
,[Table BUF Percent in Buffer!H\B|N1]
                        = IIF(i.rec_type = N'P'                                                     -- parent level composite record
                             ,CASE WHEN tbl.is_memory_optimized = 1 AND i.buffer_total_KB_CNT > 0.0
                                   THEN 100
                                   WHEN i.reserved_page_PG_CNT > 0
                                   THEN 100.0 * i.buffer_total_KB_CNT / (i.reserved_page_PG_CNT * 8.0)
                                   ELSE NULL
                              END
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
----------------------------------------------
,[Table OPS R/W Ratio!H\G|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND i.ops_total_write_CNT > 0
                             ,IIF(i.ops_total_read_CNT / i.ops_total_write_CNT < 100
                                 ,1.0 * i.ops_total_read_CNT / i.ops_total_write_CNT
                                 ,99)
                             ,NULL) -- show NULL if no writes found
,[Table USG R/W Ratio!H\G|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND i.ius_user_updates_CNT > 0
                             ,IIF(i.ius_User_read_CNT / i.ius_user_updates_CNT < 100
                                 ,1.0 * i.ius_User_read_CNT / i.ius_user_updates_CNT
                                 ,99)
                             ,NULL) -- show NULL if no writes found
----------------------------------------------
,[Table OPS Reads PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ops_total_read_CNT > 0
                             ,100.0 * i.ops_total_read_CNT / a.ops_total_read_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
,[Table OPS Scans PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ops_total_scan_CNT > 0
                             ,100.0 * i.ops_total_scan_CNT / a.ops_total_scan_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
,[Table OPS Lookups PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ios_singleton_lookup_CNT > 0
                             ,100.0 * i.ios_singleton_lookup_CNT / a.ios_singleton_lookup_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
,[Table OPS Forwarded Fetch!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ios_forwarded_fetch_CNT > 0
                             ,100.0 * i.ios_forwarded_fetch_CNT / a.ios_forwarded_fetch_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
----------------------------------------------
,[Table USG Reads PCT!H\B|N1]
                        = IIF(i.rec_type = N'P'                                                     -- parent level composite record
                             ,i.ius_read_to_parent_PCT
                             ,NULL)
,[Table USG Scans PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ius_user_scans_CNT > 0
                             ,100.0 * i.ius_user_scans_CNT / a.ius_user_scans_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
,[Table USG Lookups PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND a.ius_user_lookups_CNT > 0
                             ,100.0 * i.ius_user_lookups_CNT / a.ius_user_lookups_CNT
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )
----------------------------------------------
,[Table OPS LOB Contacts PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level composite record
                              AND     ( a.ios_lob_fetch_pages_CNT
                                      + a.ios_lob_orphan_create_CNT
                                      + a.ios_lob_orphan_insert_CNT
                                      + a.ios_row_overflow_fetch_in_pages_CNT
                                      + a.ios_column_value_pull_in_row_CNT
                                      + a.ios_column_value_push_off_row_CNT
                                      ) > 0
                             ,100.0 * ( i.ios_lob_fetch_pages_CNT
                                      + i.ios_lob_orphan_create_CNT
                                      + i.ios_lob_orphan_insert_CNT
                                      + i.ios_row_overflow_fetch_in_pages_CNT
                                      + i.ios_column_value_pull_in_row_CNT
                                      + i.ios_column_value_push_off_row_CNT
                                      )
                                   /  ( a.ios_lob_fetch_pages_CNT
                                      + a.ios_lob_orphan_create_CNT
                                      + a.ios_lob_orphan_insert_CNT
                                      + a.ios_row_overflow_fetch_in_pages_CNT
                                      + a.ios_column_value_pull_in_row_CNT
                                      + a.ios_column_value_push_off_row_CNT
                                      )
                             ,IIF(i.rec_type <> N'P'                                                -- parent level composite record
                                 ,NULL
                                 ,0)
                             )

/******************************************************************************************************************************************\
--Index Priority Metrics
\******************************************************************************************************************************************/
,[Index OPS Wait TM!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ops_total_wait_MS_CNT > 0
           ,100.0 * i.ops_total_wait_MS_CNT / p.ops_total_wait_MS_CNT
           ,0)
       ,NULL)
,[Index OPS Wait CNT!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ops_total_wait_CNT > 0
           ,100.0 * i.ops_total_wait_CNT / p.ops_total_wait_CNT
           ,0)
       ,NULL)
----------------------------------------------
,[Index OPS Locks CNT!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ops_total_lock_CNT > 0
           ,100.0 * i.ops_total_lock_CNT / p.ops_total_lock_CNT
           ,0)
       ,NULL)
,[Index OPS Lock Promo!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ios_lock_promotion_attempt_CNT > 0
           ,100.0 * i.ios_lock_promotion_attempt_CNT / p.ios_lock_promotion_attempt_CNT
           ,0)
       ,NULL)
,[Index OPS Promo Fail!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ios_lock_promotion_attempt_CNT > 0
           ,100.0 * (i.ios_lock_promotion_attempt_CNT - i.ios_lock_promotion_CNT) / p.ios_lock_promotion_attempt_CNT
           ,0)
       ,NULL)
----------------------------------------------
,[Index OPS Page Split!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ops_total_page_split_CNT > 0
           ,100.0 * i.ops_total_page_split_CNT / p.ops_total_page_split_CNT
           ,0)
       ,NULL)
,[Index OPS Splits to Write PCT!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(i.ops_total_write_CNT > 0
           ,i.page_splits_to_write_PCT
           ,0)
       ,NULL)
,[Index OPS Page Merge!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ops_total_page_merge_CNT > 0
           ,100.0 * i.ops_total_page_merge_CNT / p.ops_total_page_merge_CNT
           ,0)
       ,NULL)
,[Index OPS Merges to Write PCT!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(i.ops_total_write_CNT > 0
           ,i.page_Merge_to_write_PCT
           ,0)
       ,NULL)
----------------------------------------------
,[Index MIX Advantage Weighted!H\G|N1]
  = IIF(    i.type = N'M'                                              -- missing nonclustered rowstore index
        AND p.mix_Advantage_weighted_AMT > 0
       ,100.0 * i.mix_Advantage_weighted_AMT / p.mix_Advantage_weighted_AMT
       ,NULL)
,[Index MIX Advantage!H\G|N1]
  = IIF(    i.type = N'M'                                              -- missing nonclustered rowstore index
        AND p.mix_Advantage_AMT > 0
       ,100.0 * i.mix_Advantage_AMT / p.mix_Advantage_AMT
       ,NULL)
----------------------------------------------
,[Index OPS Writes!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ops_total_write_CNT > 0
           ,100.0 * i.ops_total_write_CNT / p.ops_total_write_CNT
           ,0)
       ,NULL)
,[Index USG Writes!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ius_user_updates_CNT > 0
           ,100.0 * i.ius_user_updates_CNT / p.ius_user_updates_CNT
           ,0)
       ,NULL)
----------------------------------------------
,[Index BUF Percent in Buffer!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,CASE WHEN tbl.is_memory_optimized = 1 AND i.buffer_total_KB_CNT > 0.0
             THEN 100
             WHEN i.reserved_page_PG_CNT > 0
             THEN 100.0 * i.buffer_total_KB_CNT / (i.reserved_page_PG_CNT * 8.0)
             ELSE NULL
        END
       ,NULL)
----------------------------------------------
,[Index OPS R/W Ratio!H\G|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(i.ops_total_write_CNT > 0
           ,IIF(i.ops_total_read_CNT / i.ops_total_write_CNT < 100
               ,1.0 * i.ops_total_read_CNT / i.ops_total_write_CNT
               ,99)
           ,NULL)
       ,NULL)
,[Index USG R/W Ratio!H\G|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(i.ius_user_updates_CNT > 0
           ,IIF(i.ius_User_read_CNT / i.ius_user_updates_CNT < 100
               ,1.0 * i.ius_User_read_CNT / i.ius_user_updates_CNT
               ,99)
           ,NULL)
       ,NULL)
----------------------------------------------
,[Index OPS Reads PCT!H\G|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,i.ops_read_to_parent_PCT
       ,NULL)
,[Index OPS Scans PCT!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ops_total_scan_CNT > 0
           ,100.0 * i.ops_total_scan_CNT / p.ops_total_scan_CNT
           ,0)
       ,NULL)
,[Index OPS Lookups PCT!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ios_singleton_lookup_CNT > 0
           ,100.0 * i.ios_singleton_lookup_CNT / p.ios_singleton_lookup_CNT
           ,0)
       ,NULL)
,[Index OPS Forwarded Fetch!H\B|N1]
  = IIF(i.type IN (N'0',N'1',N'2',N'3',N'4',N'5',N'6',N'7',N'90')  -- True index types only
       ,IIF(p.ios_forwarded_fetch_CNT > 0
           ,100.0 * i.ios_forwarded_fetch_CNT / p.ios_forwarded_fetch_CNT
           ,0)
       ,NULL)
----------------------------------------------
,[Index USG Reads PCT!H\G|N1]   = IIF(i.rec_type = N'I',i.ius_read_to_parent_PCT,NULL)         -- index level composite record
,[Index USG Scans PCT!H\G|N1]   = IIF(i.rec_type = N'I' AND p.ius_user_scans_CNT > 0           -- index level composite record
                                     ,100.0 * i.ius_user_scans_CNT / p.ius_user_scans_CNT
                                     ,NULL)
,[Index USG Lookups PCT!H\G|N1] = IIF(i.rec_type = N'I' AND p.ius_user_lookups_CNT > 0         -- index level composite record
                                     ,100.0 * i.ius_user_lookups_CNT / p.ius_user_lookups_CNT
                                     ,NULL)
----------------------------------------------
,[Index OPS LOB Contacts PCT!H\B|N1]
  = IIF(    i.rec_type = N'I'                           -- index level composite record
        AND     ( p.ios_lob_fetch_pages_CNT
                + p.ios_lob_orphan_create_CNT           -- Bulk operations only
                + p.ios_lob_orphan_insert_CNT           -- Bulk operations only
                + p.ios_row_overflow_fetch_in_pages_CNT
                + p.ios_column_value_pull_in_row_CNT
                + p.ios_column_value_push_off_row_CNT
                ) > 0
       ,100.0 * ( i.ios_lob_fetch_pages_CNT
                + i.ios_lob_orphan_create_CNT           -- Bulk operations only
                + i.ios_lob_orphan_insert_CNT           -- Bulk operations only
                + i.ios_row_overflow_fetch_in_pages_CNT
                + i.ios_column_value_pull_in_row_CNT
                + i.ios_column_value_push_off_row_CNT
                )
             /  ( p.ios_lob_fetch_pages_CNT
                + p.ios_lob_orphan_create_CNT           -- Bulk operations only
                + p.ios_lob_orphan_insert_CNT           -- Bulk operations only
                + p.ios_row_overflow_fetch_in_pages_CNT
                + p.ios_column_value_pull_in_row_CNT
                + p.ios_column_value_push_off_row_CNT
                )
       ,NULL)
/******************************************************************************************************************************************\
--Index Priority Metrics FOR SORTING ACROSS INDEXES
\******************************************************************************************************************************************/
,[Index OPS Wait TM!H\B|N0]             = i.ops_total_wait_MS_CNT
,[Index OPS Wait CNT!H\B|N0]            = i.ops_total_wait_CNT
,[Index OPS Locks CNT!H\B|N0]           = i.ops_total_lock_CNT
,[Index OPS Lock Promo!H\B|N0]          = i.ios_lock_promotion_attempt_CNT
,[Index OPS Promo Fail!H\B|N0]          = i.ios_lock_promotion_attempt_CNT - ISNULL(i.ios_lock_promotion_CNT,0)
----------------------------------------------
,[Index OPS Page Split!H\B|N0]          = i.ops_total_page_split_CNT
,[Index OPS Splits to Write PCT!H\B|N0] = i.page_splits_to_write_PCT
,[Index OPS Page Merge!H\B|N0]          = i.ops_total_page_merge_CNT
,[Index OPS Merges to Write PCT!H\B|N0] = i.page_Merge_to_write_PCT
-- missing nonclustered rowstore index -------------------------------------------------------------
,[Index MIX Advantage Weighted!H\G|N0]  = IIF(i.type = N'M',i.mix_Advantage_weighted_AMT,NULL)  -- missing nonclustered rowstore index
,[Index MIX Advantage!H\G|N0]           = IIF(i.type = N'M',i.mix_Advantage_AMT         ,NULL)  -- missing nonclustered rowstore index
----------------------------------------------
,[Index OPS Writes!H\B|N0]              = i.ops_total_write_CNT
,[Index USG Writes!H\B|N0]              = i.ius_user_updates_CNT
----------------------------------------------
,[Index BUF Percent in Buffer!H\B|N0]   = CASE WHEN tbl.is_memory_optimized = 1 AND i.buffer_total_KB_CNT > 0.0
                                              THEN 100
                                              WHEN i.reserved_page_PG_CNT > 0
                                              THEN 100.0 * i.buffer_total_KB_CNT / (i.reserved_page_PG_CNT * 8.0)
                                              ELSE NULL
                                          END
----------------------------------------------
,[Index OPS R/W Ratio!H\G|N0]           = IIF(p.obj_type_short_label <> N'TVF'    -- SQL table-valued-function SQL 2012+
                                             ,IIF(i.ops_total_write_CNT > 0
                                                 ,IIF(i.ops_total_read_CNT / i.ops_total_write_CNT < 100
                                                     ,1.0 * i.ops_total_read_CNT / i.ops_total_write_CNT
                                                     ,99)
                                                 ,NULL)
                                             ,NULL)
,[Index USG R/W Ratio!H\G|N0]           = IIF(i.ius_user_updates_CNT > 0
                                             ,IIF(i.ius_User_read_CNT / i.ius_user_updates_CNT < 100
                                                 ,1.0 * i.ius_User_read_CNT / i.ius_user_updates_CNT
                                                 ,99)
                                             ,NULL)
----------------------------------------------
,[Index OPS Reads!H\G|N0]           = i.ops_total_read_CNT
,[Index OPS Scans!H\B|N0]           = i.ops_total_scan_CNT
,[Index OPS Lookups!H\B|N0]         = i.ios_singleton_lookup_CNT
,[Index OPS Forwarded Fetch!H\B|N0] = i.ios_forwarded_fetch_CNT
----------------------------------------------
,[Index USG Reads!H\G|N0]           = i.ius_user_read_CNT
,[Index USG Scans!H\G|N0]           = i.ius_user_scans_CNT
,[Index USG Seeks!H\G|N0]           = i.ius_user_seeks_CNT
,[Index USG Lookups!H\G|N0]         = i.ius_user_lookups_CNT
----------------------------------------------
,[Index OPS LOB Contacts PCT!H\B|N0]    =  i.ios_lob_fetch_pages_CNT
                                         + i.ios_lob_orphan_create_CNT           -- Bulk operations only
                                         + i.ios_lob_orphan_insert_CNT           -- Bulk operations only
                                         + i.ios_row_overflow_fetch_in_pages_CNT
                                         + i.ios_column_value_pull_in_row_CNT
                                         + i.ios_column_value_push_off_row_CNT
/******************************************************************************************************************************************\
-- Sorters/filters
\******************************************************************************************************************************************/
,[Table Busyness!H\B|N0]
                        = IIF(    i.rec_type = N'P'                              -- parent level composite record
                              AND  (  (CAST(COALESCE(a.buffer_total_KB_CNT     ,0.0) AS FLOAT) *  2.0)
                                    + (CAST(COALESCE(a.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                                    + (CAST(COALESCE(a.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                                    + (CAST(COALESCE(a.ops_total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                                   ) > 0
                             ,100.0 * (  (CAST(COALESCE(i.buffer_total_KB_CNT     ,0.0) AS FLOAT) *  2.0)
                                       + (CAST(COALESCE(i.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                                       + (CAST(COALESCE(i.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                                       + (CAST(COALESCE(i.ops_total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                                      )
                                    / (  (CAST(COALESCE(a.buffer_total_KB_CNT     ,0.0) AS FLOAT) *  2.0) -- Divide by SAMPLE total
                                       + (CAST(COALESCE(a.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                                       + (CAST(COALESCE(a.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                                       + (CAST(COALESCE(a.ops_total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                                      )
                             ,NULL)
,[Index Busyness!H\B\B|N0]
                        = IIF((  (CAST(COALESCE(p.buffer_total_KB_CNT     ,0.0) AS FLOAT) *  2.0)
                               + (CAST(COALESCE(p.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                               + (CAST(COALESCE(p.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                               + (CAST(COALESCE(p.ops_total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                              ) > 0
                             ,100.0 * (  (CAST(COALESCE(i.buffer_total_KB_CNT     ,0.0) AS FLOAT) *  2.0)
                                       + (CAST(COALESCE(i.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                                       + (CAST(COALESCE(i.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                                       + (CAST(COALESCE(i.ops_total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                                      )
                                    / (  (CAST(COALESCE(p.buffer_total_KB_CNT     ,0.0) AS FLOAT) *  2.0) -- Divide by TABLE total
                                       + (CAST(COALESCE(p.ius_user_updates_CNT    ,0.0) AS FLOAT) *  6.0)
                                       + (CAST(COALESCE(p.ius_User_read_CNT       ,0.0) AS FLOAT) *  1.0)
                                       + (CAST(COALESCE(p.ops_total_page_split_CNT,0.0) AS FLOAT) * 10.0)
                                      )
                             ,NULL)
,[Last Read Days\B|N0]  = DATEDIFF(DAY
                                  ,(SELECT MAX(dt) FROM (VALUES (i.ius_last_user_seek_DTTM)
                                                               ,(i.ius_last_user_scan_DTTM)
                                                               ,(i.ius_last_user_lookup_DTTM)) AS value(dt))
                                  ,sis.collection_DTTM
                                  )

----------------------------------------------------------------------------------------------------
-- Record Key IDs
----------------------------------------------------------------------------------------------------
,i.database_id
,i.parent_object_id
,i.object_id
,i.index_id
,i.type
,i.rec_type

/******************************************************************************************************************************************\
-- Missing Index details
\******************************************************************************************************************************************/
,[mix Advantage AMT\G|N0]             = IIF(i.type = N'M',i.mix_Advantage_AMT            ,NULL) -- missing nonclustered rowstore index
,[mix Advantage weighted AMT\G|N0]    = IIF(i.type = N'M',i.mix_Advantage_weighted_AMT   ,NULL) -- missing nonclustered rowstore index
,[mix unique compiles CNT\G|N0]       = IIF(i.type = N'M',i.mix_unique_compiles_CNT      ,NULL) -- missing nonclustered rowstore index
,[mix user seeks CNT\G|N0]            = IIF(i.type = N'M',i.ius_user_seeks_CNT           ,NULL) -- missing nonclustered rowstore index
,[mix user scans CNT\G|N0]            = IIF(i.type = N'M',i.ius_user_scans_CNT           ,NULL) -- missing nonclustered rowstore index
,[mix avg Total user cost AMT\G|N2]   = IIF(i.type = N'M',i.mix_avg_total_user_cost_AMT  ,NULL) -- missing nonclustered rowstore index
,[mix avg user impact AMT\G|N2]       = IIF(i.type = N'M',i.mix_avg_user_impact_AMT      ,NULL) -- missing nonclustered rowstore index
,[mix last user seek\G|DT]            = IIF(i.type = N'M',i.ius_last_user_seek_DTTM      ,NULL) -- missing nonclustered rowstore index
,[mix last user scan\G|DT]            = IIF(i.type = N'M',i.ius_last_user_scan_DTTM      ,NULL) -- missing nonclustered rowstore index
--------------------------------------
,[Table Total Reads CNT\B|N0]         = IIF(i.type = N'M',p.ius_user_read_CNT            ,NULL) -- missing nonclustered rowstore index
--------------------------------------
,[mix avg Total system cost AMT\G|N2] = IIF(i.type = N'M',i.mix_avg_total_system_cost_AMT,NULL) -- missing nonclustered rowstore index
,[mix avg system impact AMT\G|N2]     = IIF(i.type = N'M',i.mix_avg_system_impact_AMT    ,NULL) -- missing nonclustered rowstore index
,[mix system seeks CNT\G|N0]          = IIF(i.type = N'M',i.ius_system_seeks_CNT         ,NULL) -- missing nonclustered rowstore index
,[mix system scans CNT\G|N0]          = IIF(i.type = N'M',i.ius_system_scans_CNT         ,NULL) -- missing nonclustered rowstore index
,[mix last system seek\G|DT]          = IIF(i.type = N'M',i.ius_last_system_seek_DTTM    ,NULL) -- missing nonclustered rowstore index
,[mix last system scan\G|DT]          = IIF(i.type = N'M',i.ius_last_system_scan_DTTM    ,NULL) -- missing nonclustered rowstore index

/******************************************************************************************************************************************\
-- TOTAL Operational Stats - for all levels
\******************************************************************************************************************************************/
,[ops_total_contacts_CNT\B|N0]        = i.ops_total_contacts_CNT
,[ops_total_write_CNT\B|N0]           = i.ops_total_write_CNT
,[ops_total_insert_CNT\B|N0]          = i.ops_total_insert_CNT
,[ops_total_update_CNT\B|N0]          = i.ops_total_update_CNT
,[ops_total_delete_CNT\B|N0]          = i.ops_total_delete_CNT
,[ops_total_read_CNT\G|N0]            = i.ops_total_read_CNT
,[ops_total_scan_CNT\B|N0]            = i.ops_total_scan_CNT
,[ops_total_scan_retries_CNT\B|N0]    = i.ops_total_scan_retries_CNT
--------------------------------------
,[ops_total_wait_CNT\B|N0]            = i.ops_total_wait_CNT
,[ops_total_wait_MS_CNT\B|N0]         = i.ops_total_wait_MS_CNT
,[ops_total_wait_MS_AVG\B|N2]         = i.ops_total_wait_MS_AVG

/******************************************************************************************************************************************\
-- Index Operational Stats
\******************************************************************************************************************************************/
,[ios_singleton_lookup_CNT\B|N0]                 = IIF(i.rec_type = N'I',i.ios_singleton_lookup_CNT                 ,NULL)
,[ios_forwarded_fetch_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_forwarded_fetch_CNT                  ,NULL)
,[ios_lob_fetch_pages_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_lob_fetch_pages_CNT                  ,NULL)
,[ios_partition_CNT\B|N0]                        = IIF(i.rec_type = N'I',i.ios_partition_CNT                        ,NULL)
-------------------------------------------------
,[ios_leaf_insert_CNT\B|N0]                      = IIF(i.rec_type = N'I',i.ios_leaf_insert_CNT                      ,NULL)
,[ios_leaf_update_CNT\B|N0]                      = IIF(i.rec_type = N'I',i.ios_leaf_update_CNT                      ,NULL)
,[ios_leaf_delete_CNT\B|N0]                      = IIF(i.rec_type = N'I',i.ios_leaf_delete_CNT                      ,NULL)
,[ios_leaf_ghost_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ios_leaf_ghost_CNT                       ,NULL)
,[ios_total_leaf_Contacts_CNT\B|N0]              = IIF(i.rec_type = N'I',i.ios_total_leaf_Contacts_CNT              ,NULL)
-------------------------------------------------
,[ios_nonleaf_insert_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_nonleaf_insert_CNT                   ,NULL)
,[ios_nonleaf_delete_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_nonleaf_delete_CNT                   ,NULL)
,[ios_nonleaf_update_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_nonleaf_update_CNT                   ,NULL)
,[ios_total_nonleaf_Contacts_CNT\B|N0]           = IIF(i.rec_type = N'I',i.ios_total_nonleaf_Contacts_CNT           ,NULL)
-------------------------------------------------
,[ios_leaf_allocation_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_leaf_allocation_CNT                  ,NULL)
,[ios_nonleaf_allocation_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_nonleaf_allocation_CNT               ,NULL)
,[ops_total_page_split_CNT\B|N0]                 = IIF(i.rec_type = N'I',i.ops_total_page_split_CNT                 ,NULL)
-------------------------------------------------
,[ios_leaf_page_merge_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_leaf_page_merge_CNT                  ,NULL)
,[ios_nonleaf_page_merge_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_nonleaf_page_merge_CNT               ,NULL)
,[ops_total_page_merge_CNT\B|N0]                 = IIF(i.rec_type = N'I',i.ops_total_page_merge_CNT                 ,NULL)
-------------------------------------------------
,[ios_lob_fetch_bytes_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_lob_fetch_bytes_CNT                  ,NULL)
,[ios_lob_orphan_create_CNT\B|N0]                = IIF(i.rec_type = N'I',i.ios_lob_orphan_create_CNT                ,NULL)
,[ios_lob_orphan_insert_CNT\B|N0]                = IIF(i.rec_type = N'I',i.ios_lob_orphan_insert_CNT                ,NULL)
,[ios_row_overflow_fetch_in_pages_CNT\B|N0]      = IIF(i.rec_type = N'I',i.ios_row_overflow_fetch_in_pages_CNT      ,NULL)
,[ios_row_overflow_fetch_in_bytes_CNT\B|N0]      = IIF(i.rec_type = N'I',i.ios_row_overflow_fetch_in_bytes_CNT      ,NULL)
,[ios_column_value_push_off_row_CNT\B|N0]        = IIF(i.rec_type = N'I',i.ios_column_value_push_off_row_CNT        ,NULL)
,[ios_column_value_pull_in_row_CNT\B|N0]         = IIF(i.rec_type = N'I',i.ios_column_value_pull_in_row_CNT         ,NULL)
-------------------------------------------------
,[ops_total_lock_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ops_total_lock_CNT                       ,NULL)
,[ops_total_lock_wait_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ops_total_lock_wait_CNT                  ,NULL)
,[ops_total_lock_wait_MS_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ops_total_lock_wait_MS_CNT               ,NULL)
,[ops_total_lock_wait_MS_AVG\B|N2]               = IIF(i.rec_type = N'I',i.ops_total_lock_wait_MS_AVG               ,NULL)
-------------------------------------------------
,[ios_row_lock_CNT\B|N0]                         = IIF(i.rec_type = N'I',i.ios_row_lock_CNT                         ,NULL)
,[ios_row_lock_wait_CNT\B|N0]                    = IIF(i.rec_type = N'I',i.ios_row_lock_wait_CNT                    ,NULL)
,[ios_row_lock_wait_MS_CNT\B|N0]                 = IIF(i.rec_type = N'I',i.ios_row_lock_wait_MS_CNT                 ,NULL)
,[ios_row_lock_wait_MS_AVG\B|N2]                 = IIF(i.rec_type = N'I',i.ios_row_lock_wait_MS_AVG                 ,NULL)
-------------------------------------------------
,[ios_page_lock_CNT\B|N0]                        = IIF(i.rec_type = N'I',i.ios_page_lock_CNT                        ,NULL)
,[ios_page_lock_wait_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_page_lock_wait_CNT                   ,NULL)
,[ios_page_lock_wait_MS_CNT\B|N0]                = IIF(i.rec_type = N'I',i.ios_page_lock_wait_MS_CNT                ,NULL)
,[ios_page_lock_wait_MS_AVG\B|N2]                = IIF(i.rec_type = N'I',i.ios_page_lock_wait_MS_AVG                ,NULL)
-------------------------------------------------
,[ios_lock_promotion_attempt_CNT\B|N0]           = IIF(i.rec_type = N'I',i.ios_lock_promotion_attempt_CNT           ,NULL)
,[ios_lock_promotion_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_lock_promotion_CNT                   ,NULL)
,[ios_lock_promotion_fail_CNT\B|N0]              = IIF(i.rec_type = N'I',i.ios_lock_promotion_fail_CNT              ,NULL)
-------------------------------------------------
,[ios_page_latch_wait_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_page_latch_wait_CNT                  ,NULL)
,[ios_page_latch_wait_MS_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_page_latch_wait_MS_CNT               ,NULL)
,[ios_page_latch_wait_MS_AVG\B|N2]               = IIF(i.rec_type = N'I',i.ios_page_latch_wait_MS_AVG               ,NULL)
-------------------------------------------------
,[ios_page_io_latch_wait_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_page_io_latch_wait_CNT               ,NULL)
,[ios_page_io_latch_wait_MS_CNT\B|N0]            = IIF(i.rec_type = N'I',i.ios_page_io_latch_wait_MS_CNT            ,NULL)
,[ios_page_io_latch_wait_MS_AVG\B|N2]            = IIF(i.rec_type = N'I',i.ios_page_io_latch_wait_MS_AVG            ,NULL)
-------------------------------------------------
,[ios_tree_page_latch_wait_CNT\B|N0]             = IIF(i.rec_type = N'I',i.ios_tree_page_latch_wait_CNT             ,NULL)
,[ios_tree_page_latch_wait_MS_CNT\B|N0]          = IIF(i.rec_type = N'I',i.ios_tree_page_latch_wait_MS_CNT          ,NULL)
,[ios_tree_page_latch_wait_MS_AVG\B|N2]          = IIF(i.rec_type = N'I',i.ios_tree_page_latch_wait_MS_AVG          ,NULL)
-------------------------------------------------
,[ios_tree_page_io_latch_wait_CNT\B|N0]          = IIF(i.rec_type = N'I',i.ios_tree_page_io_latch_wait_CNT          ,NULL)
,[ios_tree_page_io_latch_wait_MS_CNT\B|N0]       = IIF(i.rec_type = N'I',i.ios_tree_page_io_latch_wait_MS_CNT       ,NULL)
,[ios_tree_page_io_latch_wait_MS_AVG\B|N2]       = IIF(i.rec_type = N'I',i.ios_tree_page_io_latch_wait_MS_AVG       ,NULL)
-------------------------------------------------
,[ios_page_compression_attempt_CNT\B|N0]         = IIF(i.rec_type = N'I',i.ios_page_compression_attempt_CNT         ,NULL)
-- Fail PCT                                        IIF(i.rec_type = N'I',                                           ,NULL)
,[ios_page_compression_success_CNT\B|N0]         = IIF(i.rec_type = N'I',i.ios_page_compression_success_CNT         ,NULL)
,[ios_page_compression_fail_CNT\B|N0]            = IIF(i.rec_type = N'I',i.ios_page_compression_fail_CNT            ,NULL)
-------------------------------------------------
,[ios_version_generated_off_row_CNT\B|N0]         = IIF(i.rec_type = N'I',i.ios_version_generated_off_row_CNT        ,NULL)
,[ios_ghost_version_inrow_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_ghost_version_inrow_CNT              ,NULL)
,[ios_ghost_version_off_row_CNT\B|N0]             = IIF(i.rec_type = N'I',i.ios_ghost_version_off_row_CNT            ,NULL)
,[ios_insert_over_ghost_version_inrow_CNT\B|N0]   = IIF(i.rec_type = N'I',i.ios_insert_over_ghost_version_inrow_CNT  ,NULL)
,[ios_insert_over_ghost_version_off_row_CNT\B|N0] = IIF(i.rec_type = N'I',i.ios_insert_over_ghost_version_off_row_CNT,NULL)
,[ios_total_Column_value_off_row_CNT\B|N0]        = IIF(i.rec_type = N'I',i.ios_total_Column_value_off_row_CNT       ,NULL)

/******************************************************************************************************************************************\
-- Index Usage Stats
\******************************************************************************************************************************************/
,[ius_User_total_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ius_User_total_CNT    ,NULL)
,[ius_user_updates_CNT\B|N0]                     = IIF(i.rec_type = N'I',i.ius_user_updates_CNT  ,NULL)
,[ius_User_read_CNT\B|N0]                        = IIF(i.rec_type = N'I',i.ius_User_read_CNT     ,NULL)
,[ius_user_seeks_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ius_user_seeks_CNT    ,NULL)
,[ius_user_scans_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ius_user_scans_CNT    ,NULL)
,[ius_user_lookups_CNT\B|N0]                     = IIF(i.rec_type = N'I',i.ius_user_lookups_CNT  ,NULL)
,[ius_system_seeks_CNT\B|N0]                     = IIF(i.rec_type = N'I',i.ius_system_seeks_CNT  ,NULL)
,[ius_system_scans_CNT\B|N0]                     = IIF(i.rec_type = N'I',i.ius_system_scans_CNT  ,NULL)
,[ius_system_lookups_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ius_system_lookups_CNT,NULL)
,[ius_system_updates_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ius_system_updates_CNT,NULL)
----------------------------------
,[ius_last_user_seek_DAY\B|N]                    = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_seek_DTTM    ,i.collection_DTTM),NULL)
,[ius_last_user_scan_DAY\B|N]                    = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_scan_DTTM    ,i.collection_DTTM),NULL)
,[ius_last_user_lookup_DAY\B|N]                  = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_lookup_DTTM  ,i.collection_DTTM),NULL)
,[ius_last_user_update_DAY\B|N]                  = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_update_DTTM  ,i.collection_DTTM),NULL)
,[ius_last_system_seek_DAY\B|N]                  = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_seek_DTTM  ,i.collection_DTTM),NULL)
,[ius_last_system_scan_DAY\B|N]                  = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_scan_DTTM  ,i.collection_DTTM),NULL)
,[ius_last_system_lookup_DAY\B|N]                = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_lookup_DTTM,i.collection_DTTM),NULL)
,[ius_last_system_update_DAY\B|N]                = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_update_DTTM,i.collection_DTTM),NULL)
----------------------------------
,[ius_no_read_user_updates_CNT\B]                = IIF(i.rec_type = N'I',i.ius_no_read_user_updates_CNT,NULL)
,[ius_last_read_days_ago\B]                      = IIF(i.rec_type = N'I'
                                                      ,IIF(i.ius_last_read_days_ago = 999999,NULL,i.ius_last_read_days_ago)
                                                      ,NULL)
,[ius_last_write_days_ago\B]                     = IIF(i.rec_type = N'I'
                                                      ,IIF(i.ius_last_write_days_ago = 999999,NULL,i.ius_last_write_days_ago)
                                                      ,NULL)

/******************************************************************************************************************************************\
-- InMemory (XTP) Index Stats
\******************************************************************************************************************************************/
,[xtp_scans_started_CNT\B|N0]                    = IIF(tbl.is_memory_optimized = 1,i.xtp_scans_started_CNT               ,NULL)
,[xtp_scans_retries_CNT\B|N0]                    = IIF(tbl.is_memory_optimized = 1,i.xtp_scans_retries_CNT               ,NULL)
--------------------------------------------
,[xtp_unique_constraint_violations_CNT\B|N0]     = IIF(tbl.is_memory_optimized = 1,i.xtp_unique_constraint_violations_CNT,NULL)
,[xtp_write_conflicts_CNT\B|N0]                  = IIF(tbl.is_memory_optimized = 1,i.xtp_write_conflicts_CNT             ,NULL)
,[xtp_page_update_CNT\B|N0]                      = IIF(tbl.is_memory_optimized = 1,i.xtp_page_update_CNT                 ,NULL)
,[xtp_page_update_retry_CNT\B|N0]                = IIF(tbl.is_memory_optimized = 1,i.xtp_page_update_retry_CNT           ,NULL)
,[xtp_row_insert_attempts_CNT\B|N0]              = IIF(tbl.is_memory_optimized = 1,i.xtp_row_insert_attempts_CNT         ,NULL)
--------------------------------------------
,[xtp_row_update_attempts_CNT\B|N0]              = IIF(tbl.is_memory_optimized = 1,i.xtp_row_update_attempts_CNT         ,NULL)
--------------------------------------------
,[xtp_row_delete_attempts_CNT\B|N0]              = IIF(tbl.is_memory_optimized = 1,i.xtp_row_delete_attempts_CNT         ,NULL)
--------------------------------------------
,[xtp_page_split_CNT\B|N0]                       = IIF(tbl.is_memory_optimized = 1,i.xtp_page_split_CNT                  ,NULL)
,[xtp_page_split_retry_CNT\B|N0]                 = IIF(tbl.is_memory_optimized = 1,i.xtp_page_split_retry_CNT            ,NULL)
,[xtp_key_split_CNT\B|N0]                        = IIF(tbl.is_memory_optimized = 1,i.xtp_key_split_CNT                   ,NULL)
,[xtp_key_split_retry_CNT\B|N0]                  = IIF(tbl.is_memory_optimized = 1,i.xtp_key_split_retry_CNT             ,NULL)
--------------------------------------------
,[xtp_page_merge_CNT\B|N0]                       = IIF(tbl.is_memory_optimized = 1,i.xtp_page_merge_CNT                  ,NULL)
,[xtp_page_merge_retry_CNT\B|N0]                 = IIF(tbl.is_memory_optimized = 1,i.xtp_page_merge_retry_CNT            ,NULL)
,[xtp_key_merge_CNT\B|N0]                        = IIF(tbl.is_memory_optimized = 1,i.xtp_key_merge_CNT                   ,NULL)
,[xtp_key_merge_retry_CNT\B|N0]                  = IIF(tbl.is_memory_optimized = 1,i.xtp_key_merge_retry_CNT             ,NULL)
--------------------------------------------
,[xtp_rows_returned_CNT\B|N0]                    = IIF(tbl.is_memory_optimized = 1,i.xtp_rows_returned_CNT               ,NULL)
,[xtp_rows_touched_CNT\B|N0]                     = IIF(tbl.is_memory_optimized = 1,i.xtp_rows_touched_CNT                ,NULL)
,[xtp_delta_pages_CNT\B|N0]                      = IIF(tbl.is_memory_optimized = 1,i.xtp_delta_pages_CNT                 ,NULL)
,[xtp_leaf_pages_CNT\B|N0]                       = IIF(tbl.is_memory_optimized = 1,i.xtp_leaf_pages_CNT                  ,NULL)
,[xtp_page_consolidation_CNT\B|N0]               = IIF(tbl.is_memory_optimized = 1,i.xtp_page_consolidation_CNT          ,NULL)
,[xtp_page_consolidation_retry_CNT\B|N0]         = IIF(tbl.is_memory_optimized = 1,i.xtp_page_consolidation_retry_CNT    ,NULL)
,[xtp_uses_key_normalization\B]                  = IIF(tbl.is_memory_optimized = 1,i.xtp_uses_key_normalization          ,NULL)
,[xtp_allocated_bytes_CNT\B|N0]                  = IIF(tbl.is_memory_optimized = 1,i.xtp_allocated_bytes_CNT             ,NULL)
,[xtp_used_bytes_CNT\B|N0]                       = IIF(tbl.is_memory_optimized = 1,i.xtp_used_bytes_CNT                  ,NULL)
,[xtp_allocation_CNT\B|N0]                       = IIF(tbl.is_memory_optimized = 1,i.xtp_allocation_CNT                  ,NULL)

/******************************************************************************************************************************************\
-- ColumnStore Index Stats
\******************************************************************************************************************************************/
,[cs_partition_CNT\B|N0]                          = IIF(i.type IN (N'5',N'6'),i.cs_partition_CNT             ,NULL) -- columnstores
,[cs_row_group_CNT\B|N0]                          = IIF(i.type IN (N'5',N'6'),i.cs_row_group_CNT             ,NULL) -- columnstores
,[cs_index_scan_CNT\B|N0]                         = IIF(i.type IN (N'5',N'6'),i.cs_index_scan_CNT            ,NULL) -- columnstores
,[cs_scan_CNT\B|N0]                               = IIF(i.type IN (N'5',N'6'),i.cs_scan_CNT                  ,NULL) -- columnstores
,[cs_delete_buffer_scan_CNT\B|N0]                 = IIF(i.type IN (N'5',N'6'),i.cs_delete_buffer_scan_CNT    ,NULL) -- columnstores
--------------------------------------------
,[cs_row_group_lock_CNT\B|N0]                     = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_CNT        ,NULL) -- columnstores
,[cs_row_group_lock_wait_CNT\B|N0]                = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_wait_CNT   ,NULL) -- columnstores
,[cs_row_group_lock_wait_MS_CNT\B|N2]             = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_wait_MS_CNT,NULL) -- columnstores
,[cs_row_group_lock_wait_MS_AVG\B]                = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_wait_MS_AVG,NULL) -- columnstores
--------------------------------------------
,[cs_returned_row_CNT\B|N0]                       = IIF(i.type IN (N'5',N'6'),i.cs_returned_row_CNT          ,NULL) -- columnstores
,[cs_returned_aggregate_CNT\B|N0]                 = IIF(i.type IN (N'5',N'6'),i.cs_returned_aggregate_CNT    ,NULL) -- columnstores
,[cs_returned_group_CNT\B|N0]                     = IIF(i.type IN (N'5',N'6'),i.cs_returned_group_CNT        ,NULL) -- columnstores
,[cs_input_groupby_row_CNT\B|N0]                  = IIF(i.type IN (N'5',N'6'),i.cs_input_groupby_row_CNT     ,NULL) -- columnstores

/******************************************************************************************************************************************\
-- FROM
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SELECT i.database_id,i.history_source_object_id,i.parent_object_id,i.object_id,i.obj_name,i.index_id,i.type
      ,hst_src.object_id,hst_src.obj_name
--*/
  FROM [##SQLXL_Index_Startup]     AS sis
 CROSS
  JOIN [##SQLXL_Index_Compilation] AS i

  LEFT OUTER
  JOIN [##SQLXL_Index_Compilation] AS hst_src
    ON i.database_id              = hst_src.database_id
   AND i.history_source_object_id = hst_src.parent_object_id
   AND i.history_source_object_id = hst_src.object_id
   AND i.history_source_object_id = hst_src.index_id
   AND N'U'                       = hst_src.type             -- User Table
-- WHERE i.object_id = 1653580929
-- WHERE i.obj_name LIKE N'%_archive'

 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'A') AS a  -- instance level composite record

  LEFT OUTER
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'D') AS d  -- database level composite record
    ON i.database_id      = d.database_id

  LEFT OUTER                                                                   -- outer needed for ALL row
  JOIN [##SQLXL_Index_sys_objects]                                       AS tbl
    ON i.database_id = tbl.database_id
   AND i.object_id   = tbl.object_id

  LEFT OUTER                                                                   -- outer needed for ALL row
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'P') AS p  -- parent level composite record
    ON i.database_id      = p.database_id
   AND i.parent_object_id = p.parent_object_id

  LEFT OUTER
  JOIN (SELECT * FROM [##SQLXL_Index_Compilation] WHERE rec_type = N'H') AS s  -- historical/archive table composite record
    ON i.database_id      = s.database_id
   AND i.parent_object_id = s.parent_object_id
   AND i.object_id        = s.object_id

  LEFT OUTER
  JOIN (-- physical table metrics. Views included for their clustering index
        SELECT *
          FROM [##SQLXL_Index_Compilation]
         WHERE type
            IN (N'0' -- rowstore heap
               ,N'1' -- Clustered Rowstore Index
               ,N'5' -- CLustered ColumnStore
               )
       ) AS raw
    ON i.database_id      = raw.database_id
   AND i.parent_object_id = raw.object_id
   AND i.object_id        = raw.object_id
 WHERE 1 = 1

 ORDER BY
       IIF(i.rec_type = N'A',1,0)  -- sort Instance/Sample level to bottom
      ,i.tbl_priority_metric DESC
      ,i.database_ID
      ,i.parent_object_id
      ,i.index_id
      ,i.type
OPTION (MAXDOP 1,RECOMPILE);

GO -- end of stored procedure/function/T-SQL script/CREATE VIEW

RAISERROR ('Created procedure [##SQLXL_Index_Present] ...',0,0) WITH NOWAIT;

IF @@TRANCOUNT > 0 COMMIT;

GO

-- VERSION 240811
/******************************************************************************************************************************************\
All SQLXL objects are created in the database your SQL studio tool is connected to.
\******************************************************************************************************************************************/

/*########################################################################################################################################*\
INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTA
\*########################################################################################################################################*/

/*** LOCAL TESTING ***
EXEC [##SQLXL_INSTANCE]
--*/

/******************************************************************************************************************************************\
Copyright (C) 2024 Practice Computing Management Inc.
All rights reserved.

MIT License, http://www.opensource.org/licenses/mit-license.php
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
(the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, --HASH,
publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
SQL Server Versions & Default Compatibility (as of July 2024)
Azure SQL DB   - 16   - 160
Azure SQL MI   - 16   - 150
        2022   - 16   - 160
        2019   - 15   - 150
        2017   - 14   - 140
        2016   - 13   - 130
        2014   - 12   - 120
        2012   - 11   - 110
        2008R2 - 10.5 - 100
        2008   - 10   - 100
        2005   -  9   -  90
        2000   -  8   -  80

DROP TABLE IF EXISTS [##SQLXL_Instance_info]

SQL Server EngineEditions including Azure
-------------------------------------------------------------------------------------
 1 = Personal or Desktop Engine (Not available in SQL Server 2005 (9.x) and later versions.)
 2 = Standard (For Standard, Web, and Business Intelligence.)
 3 = Enterprise (For Evaluation, Developer, and Enterprise editions.)
 4 = Express (For Express, Express with Tools, and Express with Advanced Services)

 5 = Azure SQL Database
 6 = Azure Synapse Analytics
 8 = Azure SQL Managed Instance
 9 = Azure SQL Edge (For all editions of Azure SQL Edge)
11 = Azure Synapse serverless SQL pools

Let the user know if this won't run on their version of SQL Server
*NOTE* CONVERT & CAST introduced in SQL 2012. If a database has COMPATIBILITY LEVEL < SQL 2012 they will not work
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
-- Drop previous SQLXL_Instance tempdb source data stores (SQLXL_Instance_%)
-- TRUNCATE/REBUILD is used to clear out any missing index recommendations that were created from the last execution(s)
\******************************************************************************************************************************************/
DECLARE @sql       NVARCHAR(MAX)
       ,@run_value NVARCHAR(4000);

/*** LOCAL TESTING ***
DECLARE @sql       NVARCHAR(MAX)
       ,@run_value NVARCHAR(4000)
       ,@ssms_ads  TINYINT       = 1
       ,@msg       NVARCHAR(1000)
       ,@exec_dttm DATETIME      = GETDATE();
--*/

WHILE 1 = 1 BEGIN
   SELECT TOP (1)
          @run_value = QUOTENAME(s.name) + N'.' + QUOTENAME(t.name)
         ,@sql = N'TRUNCATE TABLE ' + QUOTENAME(s.name) + N'.' + QUOTENAME(t.name) + N';'
               + NCHAR(13) + NCHAR(10)
               -- Drops MISSING index recommendations
               + N'ALTER index ALL ON ' + QUOTENAME(s.name) + N'.' + QUOTENAME(t.name) + N' REBUILD;'
               + NCHAR(13) + NCHAR(10)
               + N'DROP TABLE ' + QUOTENAME(s.name) + N'.' + QUOTENAME(t.name) + N';'
     FROM [sys].[tables]  AS t WITH (READUNCOMMITTED)
     JOIN [sys].[objects] AS o WITH (READUNCOMMITTED)
       ON t.object_id  = o.object_id
     JOIN [sys].[schemas] AS s WITH (READUNCOMMITTED)
       ON o.schema_id  = s.schema_id
    WHERE t.name LIKE N'##SQLXL_Instance%'
      AND s.name    = N'dbo'
    ORDER BY t.name
   OPTION (MAXDOP 1,RECOMPILE);

   IF @@ROWCOUNT = 0 BREAK

   BEGIN TRY
      EXECUTE sp_executesql @sql;
   END TRY
   BEGIN CATCH
      SET @run_value = N'TRUNCATE/ALTER/DROP FAIL on ' + @run_value
      RAISERROR (@run_value,0,0) WITH NOWAIT;
   END CATCH
END; -- WHILE 1 = 1

/******************************************************************************************************************************************\
-- Create the procedure [##SQLXL_Instance] - captures instance properties and configurations
\******************************************************************************************************************************************/
BEGIN TRY
   EXEC (N'CREATE PROCEDURE [##SQLXL_Instance] AS RETURN 0;')
END TRY
BEGIN CATCH
END CATCH
GO

ALTER PROCEDURE [##SQLXL_Instance]
  WITH RECOMPILE
AS

/******************************************************************************************************************************************\
 Procedure Environment settings
\******************************************************************************************************************************************/
SET ANSI_NULLS               ON; -- Specifies ISO compliant behavior of (=) and (<>) comparison operators when used with null values
SET ANSI_WARNINGS            ON; -- Specifies ISO standard behavior for several error conditions. Must be ON with FOR XML statements
SET ARITHABORT               ON; -- Terminates a query when an overflow or divide-by-zero error occurs during query execution
SET ARITHIGNORE             OFF; -- Controls whether error messages are returned from overflow or divide-by-zero errors during a query
SET CURSOR_CLOSE_ON_COMMIT  OFF; -- OFF means that the server will not close cursors when you commit a transaction
SET DATEFORMAT              YMD; -- Sets the order of the month, day, and year date parts for interpreting date&time strings
SET DEADLOCK_PRIORITY       -10; -- Specifies the relative importance of the current session if deadlocked. (-10) is lowest priority
SET FMTONLY                 OFF; -- Returns only metadata to client. Used to test the response format without actually running the query
SET FORCEPLAN               OFF; -- When ON, optimizer uses FORCE ORDER + NESTED LOOP JOIN for FROM clause tables
SET IMPLICIT_TRANSACTIONS   OFF; -- When OFF, sets the connection to autocommit transaction mode
SET LOCK_TIMEOUT           1000; -- Specifies the number of milliseconds a statement waits for a lock to be released
SET NOCOUNT                  ON; -- Stops the message showing the count of rows affected by a statement or stored procedure
SET NOEXEC                  OFF; -- Compiles each query but does not execute it
SET NUMERIC_ROUNDABORT      OFF; -- Specifies the level of error reporting generated when rounding causes a loss of precision
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute
SET QUOTED_IDENTIFIER        ON; -- Causes SQL Server to follow ISO rules using quotation mark delimiting identifiers and literal strings
SET ROWCOUNT                  0; -- Stop processing after specified number of rows are returned. "0" all rows are returned
SET STATISTICS IO,PROFILE,TIME,XML OFF; -- Displays information on statement resource usage
SET TEXTSIZE         2147483647; -- Specifies size of BLOB returned by a SELECT statement. Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON; -- Automatically roll back the current transaction when a statement raises a run-time error

/******************************************************************************************************************************************\
-- Local Procedure variables
\******************************************************************************************************************************************/
DECLARE @sql       NVARCHAR(MAX)
       ,@exec_dttm DATETIME = GETDATE()
       ,@run_value NVARCHAR(4000)
       ,@ssms_ads  TINYINT  = (SELECT (1)
                                 FROM [sys].[dm_exec_sessions]
                                WHERE session_id = @@SPID
                                  AND (   program_name LIKE N'Microsoft SQL Server Management Studio%'
                                       OR program_name LIKE N'azdata%' --azure data studio
                                       OR program_name    = N'SQLCMD'
                                      )
                              )
       ,@msg       NVARCHAR(1000);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   RAISERROR(N'          Start [##SQLXL_Instance] data collection & diagnostics',0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Create table to hold Instance/Server configuration info from [sys].[sp_configure], SERVERPROPERTY, etc.
-- if this procedure has been run within last day don't execute again
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @msg NVARCHAR(1000);
--*/

BEGIN TRY
   SELECT source           = CAST(N'SQLXL'           AS SYSNAME)   COLLATE DATABASE_DEFAULT
         ,configuration_id = CAST(NULL AS INT)
         ,name             = CAST(N'Collection_DTTM' AS SYSNAME)   COLLATE DATABASE_DEFAULT
         ,minimum_value    = CAST(NULL AS BIGINT)
         ,maximum_value    = CAST(NULL AS BIGINT)
         ,config_value     = CAST(NULL AS BIGINT)
         ,run_value        = CAST(NULL AS BIGINT)
         ,text_value       = CAST(CONVERT(NVARCHAR(30),GETDATE(),120) AS NVARCHAR(255)) COLLATE DATABASE_DEFAULT
         ,description      = CAST(NULL AS NVARCHAR(255)) COLLATE DATABASE_DEFAULT
         ,is_dynamic       = CAST(NULL AS BIT)
         ,is_advanced      = CAST(NULL AS BIT)
         ,default_value    = CAST(NULL AS BIGINT)
     INTO [##SQLXL_Instance_info]
   OPTION (MAXDOP 1,RECOMPILE);

   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Instance_info
       ON [##SQLXL_Instance_info]
         (source
         ,name
         )
     WITH (DATA_COMPRESSION = PAGE
          ,MAXDOP = 1
          );
END TRY
BEGIN CATCH
   SELECT @msg = text_value
     FROM [##SQLXL_Instance_info]
    WHERE source = N'SQLXL'
      AND name   = N'Collection_DTTM';
END CATCH

IF @msg IS NOT NULL AND DATEDIFF(HOUR,CONVERT(DATETIME,@msg,120),GETDATE()) < 1.0
BEGIN
   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,GETDATE(),GETDATE()),0))
               + N' Exit - Instance info less than 1 hour old'
      RAISERROR(@msg,0,0) WITH NOWAIT;
   END
   RETURN; -- if less than an hour old abort
END   -- IF @msg IS NOT NULL AND DATEDIFF(DAY,CONVERT(DATETIME,@msg,120),GETDATE()) < 1

/*** LOCAL TESTING ***
DECLARE @msg NVARCHAR(1000);
--*/
BEGIN TRY
   SELECT rec_type         = CAST(N'A' AS CHAR(1)       ) COLLATE DATABASE_DEFAULT  -- instance level composite record
         ,database_id      = CAST(  0  AS SMALLINT      )
         ,parent_object_id = CAST(  0  AS INT           )
         ,object_id        = CAST(  0  AS INT           )
         ,index_id         = CAST(  0  AS INT           )
         ,type             = CAST(N'A' AS NVARCHAR(2)   ) COLLATE DATABASE_DEFAULT  -- instance level
         ,diagnostic       = CAST(NULL AS NVARCHAR(4000)) COLLATE DATABASE_DEFAULT
     INTO [##SQLXL_Instance_Diagnostics]
   OPTION (MAXDOP 1,RECOMPILE);
END TRY
BEGIN CATCH
END CATCH

TRUNCATE TABLE [##SQLXL_Instance_info];
TRUNCATE TABLE [##SQLXL_Instance_Diagnostics];

INSERT
  INTO [##SQLXL_Instance_info]
      (source
      ,name
      ,text_value
      )
SELECT source     = N'SQLXL'
      ,name       = N'Collection_DTTM'
      ,text_value = CONVERT(NVARCHAR(30),GETDATE(),120)
OPTION (MAXDOP 1,RECOMPILE);

/******************************************************************************************************************************************\
-- Collect Server-level trace flag settings
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Instance_info]
      (name
      ,run_value
      ,maximum_value
      ,minimum_value
      )
  EXEC ('DBCC TRACESTATUS(-1) WITH NO_INFOMSGS');

-- save off data source of above records
UPDATE [##SQLXL_Instance_info]
   SET source = N'TRACESTATUS'
 WHERE source IS NULL
OPTION (MAXDOP 1,RECOMPILE);

/******************************************************************************************************************************************\
 Collect [sys].configurations settings
 https://learn.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-configurations-transact-sql?view=sql-server-ver16
 *NOTE* same elements as sp_configure
\******************************************************************************************************************************************/
IF object_id('[sys].[configurations]') IS NOT NULL
INSERT
  INTO [##SQLXL_Instance_info]
SELECT N'configurations'
      ,c.configuration_id
      ,c.name
      ,minimum      = CONVERT(BIGINT,c.minimum     )
      ,maximum      = CONVERT(BIGINT,c.maximum     )
      ,value        = CONVERT(BIGINT,c.value       )
      ,value_in_use = CONVERT(BIGINT,c.value_in_use)
      ,text_value   = NULL
      ,c.description
      ,c.is_dynamic
      ,c.is_advanced
      ,default_value = COALESCE(v.default_value,0)
  FROM [sys].[configurations] AS c
  LEFT OUTER
  JOIN (VALUES (N'cursor threshold',-1)
              ,(N'query wait (s)',-1)
              ,(N'ADR Cleaner Thread Count',1)
              ,(N'default trace enabled',1)
              ,(N'nested triggers',1)
              ,(N'polybase network encryption',1)
              ,(N'remote access',1)
              ,(N'server trigger recursion',1)
              ,(N'SMO and DMO XPs',1)
              ,(N'ADR Preallocation Factor',4)
              ,(N'max full-text crawl range',4)
              ,(N'cost threshold for parallelism',5)
              ,(N'remote login timeout (s)',10)
              ,(N'PH timeout (s)',60)
              ,(N'ft crawl bandwidth (max)',100)
              ,(N'ft notify bandwidth (max)',100)
              ,(N'ADR cleaner retry timeout (min)',120)
              ,(N'remote query timeout (s)',600)
              ,(N'min memory per query (KB)',1024)
              ,(N'default full-text language',1033)
              ,(N'max worker threads',2048)
              ,(N'two digit year cutoff',2049)
              ,(N'network packet size (B)',4096)
              ,(N'max text repl size (B)',65536)
              ,(N'Data processed daily limit in TB',2147483647)
              ,(N'Data processed monthly limit in TB',2147483647)
              ,(N'Data processed weekly limit in TB',2147483647)
              ,(N'max server memory (MB)',2147483647)
              ) AS v(name,default_value)
    ON c.name = v.name
OPTION (MAXDOP 1,RECOMPILE);

--------------------------------------------------------------------------------------------------------------------------------------------
-- Get Instance FULL-TEXT default language
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Instance_info]
      (source
      ,name
      ,text_value
      )
SELECT source          = N'configurations'
      ,name            = N'fulltext_default_language_name'
      ,text_value      = COALESCE(sl.name + N' - ',N'') + COALESCE(sl.alias,fl.name)
  FROM [##SQLXL_Instance_info]    AS si
  JOIN [sys].[fulltext_languages] AS fl
    ON CAST(si.run_value AS INT)   = fl.lcid
  LEFT OUTER
  JOIN [sys].[syslanguages]       AS sl
    ON CAST(si.run_value AS INT)   = sl.lcid
 WHERE si.source = N'configurations'
   AND si.name   = N'default full-text language'
OPTION (MAXDOP 1,RECOMPILE);

/******************************************************************************************************************************************\
 Collect [sys].[configurations] settings
 https://learn.microsoft.com/en-us/sql/t-sql/functions/serverproperty-transact-sql
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Instance_info]
      (source
      ,name
      ,text_value
      )
SELECT e.source
      ,e.name
      ,text_value = CAST(e.text_value  AS NVARCHAR(4000))
  FROM (-- serverproperty text configuration values
SELECT N'SERVERPROPERTY',N'BuildClrVersion'                   ,SERVERPROPERTY(N'BuildClrVersion')                   UNION ALL
SELECT N'SERVERPROPERTY',N'Collation'                         ,SERVERPROPERTY(N'Collation')                         UNION ALL
SELECT N'SERVERPROPERTY',N'ComputerNamePhysicalNetBIOS'       ,SERVERPROPERTY(N'ComputerNamePhysicalNetBIOS')       UNION ALL
SELECT N'SERVERPROPERTY',N'Edition'                           ,SERVERPROPERTY(N'Edition')                           UNION ALL
SELECT N'SERVERPROPERTY',N'EditionDescription'                ,SERVERPROPERTY(N'EditionDescription')                UNION ALL
SELECT N'SERVERPROPERTY',N'FilestreamShareName'               ,SERVERPROPERTY(N'FilestreamShareName')               UNION ALL
SELECT N'SERVERPROPERTY',N'InstanceDefaultBackupPath'         ,SERVERPROPERTY(N'InstanceDefaultBackupPath')         UNION ALL
SELECT N'SERVERPROPERTY',N'InstanceDefaultDataPath'           ,SERVERPROPERTY(N'InstanceDefaultDataPath')           UNION ALL
SELECT N'SERVERPROPERTY',N'InstanceDefaultLogPath'            ,SERVERPROPERTY(N'InstanceDefaultLogPath')            UNION ALL
SELECT N'SERVERPROPERTY',N'InstanceName'                      ,SERVERPROPERTY(N'InstanceName')                      UNION ALL
SELECT N'SERVERPROPERTY',N'LicenseType'                       ,SERVERPROPERTY(N'LicenseType')                       UNION ALL
SELECT N'SERVERPROPERTY',N'MachineName'                       ,SERVERPROPERTY(N'MachineName')                       UNION ALL
SELECT N'SERVERPROPERTY',N'PathSeparator'                     ,SERVERPROPERTY(N'PathSeparator')                     UNION ALL
SELECT N'SERVERPROPERTY',N'ProductBuildType'                  ,SERVERPROPERTY(N'ProductBuildType')                  UNION ALL
SELECT N'SERVERPROPERTY',N'ProductLevel'                      ,SERVERPROPERTY(N'ProductLevel')                      UNION ALL
SELECT N'SERVERPROPERTY',N'ProductUpdateLevel'                ,SERVERPROPERTY(N'ProductUpdateLevel')                UNION ALL
SELECT N'SERVERPROPERTY',N'ProductUpdateReference'            ,SERVERPROPERTY(N'ProductUpdateReference')            UNION ALL
SELECT N'SERVERPROPERTY',N'ProductUpdateType'                 ,SERVERPROPERTY(N'ProductUpdateType')                 UNION ALL
SELECT N'SERVERPROPERTY',N'ProductVersion'                    ,SERVERPROPERTY(N'ProductVersion')                    UNION ALL
SELECT N'SERVERPROPERTY',N'ResourceLastUpdateDateTime'        ,SERVERPROPERTY(N'ResourceLastUpdateDateTime')        UNION ALL
SELECT N'SERVERPROPERTY',N'ResourceVersion'                   ,SERVERPROPERTY(N'ResourceVersion')                   UNION ALL
SELECT N'SERVERPROPERTY',N'ServerName'                        ,SERVERPROPERTY(N'ServerName')                        UNION ALL
SELECT N'SERVERPROPERTY',N'SqlCharSetName'                    ,SERVERPROPERTY(N'SqlCharSetName')                    UNION ALL
SELECT N'SERVERPROPERTY',N'SqlSortOrderName'                  ,SERVERPROPERTY(N'SqlSortOrderName')
) e (source,name,text_value)
OPTION (MAXDOP 1,RECOMPILE);

INSERT
  INTO [##SQLXL_Instance_info]
      (source
      ,name
      ,run_value
      )
SELECT e.source
      ,e.name
      ,CAST(e.run_value  AS BIGINT)
  FROM (-- serverproperty numeric configuration values
SELECT N'SERVERPROPERTY',N'CollationID'                       ,SERVERPROPERTY(N'CollationID')                       UNION ALL
SELECT N'SERVERPROPERTY',N'ComparisonStyle'                   ,SERVERPROPERTY(N'ComparisonStyle')                   UNION ALL
SELECT N'SERVERPROPERTY',N'EditionID'                         ,SERVERPROPERTY(N'EditionID')                         UNION ALL
SELECT N'SERVERPROPERTY',N'EngineEdition'                     ,SERVERPROPERTY(N'EngineEdition')                     UNION ALL
SELECT N'SERVERPROPERTY',N'FilestreamConfiguredLevel'         ,SERVERPROPERTY(N'FilestreamConfiguredLevel')         UNION ALL
SELECT N'SERVERPROPERTY',N'FilestreamEffectiveLevel'          ,SERVERPROPERTY(N'FilestreamEffectiveLevel')          UNION ALL
SELECT N'SERVERPROPERTY',N'HadrManagerStatus'                 ,SERVERPROPERTY(N'HadrManagerStatus')                 UNION ALL
SELECT N'SERVERPROPERTY',N'IsAdvancedAnalyticsInstalled'      ,SERVERPROPERTY(N'IsAdvancedAnalyticsInstalled')      UNION ALL
SELECT N'SERVERPROPERTY',N'IsBigDataCluster'                  ,SERVERPROPERTY(N'IsBigDataCluster')                  UNION ALL
SELECT N'SERVERPROPERTY',N'IsClustered'                       ,SERVERPROPERTY(N'IsClustered')                       UNION ALL
SELECT N'SERVERPROPERTY',N'IsExternalAuthenticationOnly'      ,SERVERPROPERTY(N'IsExternalAuthenticationOnly')      UNION ALL
SELECT N'SERVERPROPERTY',N'IsExternalGovernanceEnabled'       ,SERVERPROPERTY('IsExternalGovernanceEnabled')        UNION ALL
SELECT N'SERVERPROPERTY',N'IsFullTextInstalled'               ,SERVERPROPERTY(N'IsFullTextInstalled')               UNION ALL
SELECT N'SERVERPROPERTY',N'IsHadrEnabled'                     ,SERVERPROPERTY(N'IsHadrEnabled')                     UNION ALL
SELECT N'SERVERPROPERTY',N'IsIntegratedSecurityOnly'          ,SERVERPROPERTY(N'IsIntegratedSecurityOnly')          UNION ALL
SELECT N'SERVERPROPERTY',N'IsLocalDB'                         ,SERVERPROPERTY(N'IsLocalDB')                         UNION ALL
SELECT N'SERVERPROPERTY',N'IsPolyBaseInstalled'               ,SERVERPROPERTY(N'IsPolyBaseInstalled')               UNION ALL
SELECT N'SERVERPROPERTY',N'IsServerSuspendedForSnapshotBackup',SERVERPROPERTY('IsServerSuspendedForSnapshotBackup') UNION ALL
SELECT N'SERVERPROPERTY',N'IsSingleUser'                      ,SERVERPROPERTY(N'IsSingleUser')                      UNION ALL
SELECT N'SERVERPROPERTY',N'IstempdbMetadataMemoryOptimized'   ,SERVERPROPERTY(N'IstempdbMetadataMemoryOptimized')   UNION ALL
SELECT N'SERVERPROPERTY',N'IsXTPSupported'                    ,SERVERPROPERTY(N'IsXTPSupported')                    UNION ALL
SELECT N'SERVERPROPERTY',N'LCID'                              ,SERVERPROPERTY(N'LCID')                              UNION ALL
SELECT N'SERVERPROPERTY',N'NumLicenses'                       ,SERVERPROPERTY(N'NumLicenses')                       UNION ALL
SELECT N'SERVERPROPERTY',N'ProcessID'                         ,SERVERPROPERTY(N'ProcessID')                         UNION ALL
SELECT N'SERVERPROPERTY',N'ProductBuild'                      ,SERVERPROPERTY(N'ProductBuild')                      UNION ALL
SELECT N'SERVERPROPERTY',N'ProductMajorVersion'               ,SERVERPROPERTY(N'ProductMajorVersion')               UNION ALL
SELECT N'SERVERPROPERTY',N'ProductMinorVersion'               ,SERVERPROPERTY(N'ProductMinorVersion')               UNION ALL
SELECT N'SERVERPROPERTY',N'SqlCharSet'                        ,SERVERPROPERTY(N'SqlCharSet')                        UNION ALL
SELECT N'SERVERPROPERTY',N'SqlSortOrder'                      ,SERVERPROPERTY(N'SqlSortOrder')                      UNION ALL
SELECT N'SERVERPROPERTY',N'SuspendedDatabaseCount'            ,SERVERPROPERTY('SuspendedDatabaseCount')
) e (source,name,run_value)
OPTION (MAXDOP 1,RECOMPILE);

/******************************************************************************************************************************************\
-- Collect @@Functions & System Function settings
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @collation     SYSNAME       = (SELECT collation_name FROM [sys].[databases] WHERE name = N'tempdb')
       ,@database_name_quoted NVARCHAR(MAX) = N'[WideWorldImporters]'
       ,@engineedition INT           = 3
       ,@exec_dttm     DATETIME      = GETDATE()
       ,@i             INT           = 1
       ,@sql           NVARCHAR(MAX)
       ,@ssms_ads      TINYINT       = 2
--*/
INSERT
  INTO [##SQLXL_Instance_info]
      (source
      ,name
      ,text_value
      )
SELECT N'Configuration' ,N'@@LANGUAGE'                     ,CONVERT(NVARCHAR(255),@@Language     ) UNION ALL
SELECT N'Configuration' ,N'@@SERVERNAME'                   ,CONVERT(NVARCHAR(255),@@ServerName   ) UNION ALL
SELECT N'Configuration' ,N'@@VERSION'                      ,CONVERT(NVARCHAR(255),@@Version      )
OPTION (MAXDOP 1,RECOMPILE);

INSERT
  INTO [##SQLXL_Instance_info]
      (source
      ,name
      ,run_value
      )
SELECT N'Configuration' ,N'@@DATEFIRST'                    ,CONVERT(BIGINT,@@DateFirst           ) UNION ALL
SELECT N'Configuration' ,N'@@DBTS'                         ,CONVERT(BIGINT,@@Dbts                ) UNION ALL
SELECT N'Configuration' ,N'@@LANGID'                       ,CONVERT(BIGINT,@@LangId              ) UNION ALL
SELECT N'Configuration' ,N'@@LOCK_TIMEOUT'                 ,CONVERT(BIGINT,@@Lock_Timeout        ) UNION ALL
SELECT N'Configuration' ,N'@@MAX_PRECISION'                ,CONVERT(BIGINT,@@Max_Precision       ) UNION ALL
SELECT N'Configuration' ,N'@@NESTLEVEL'                    ,CONVERT(BIGINT,@@NestLevel           ) UNION ALL
SELECT N'Configuration' ,N'@@OPTIONS'                      ,CONVERT(BIGINT,@@Options             ) UNION ALL
SELECT N'Configuration' ,N'@@SPID'                         ,CONVERT(BIGINT,@@Spid                ) UNION ALL
SELECT N'Configuration' ,N'@@TEXTSIZE'                     ,CONVERT(BIGINT,@@TextSize            )
OPTION (MAXDOP 1,RECOMPILE);

INSERT
  INTO [##SQLXL_Instance_info]
      (source
      ,name
      ,text_value
      )
SELECT N'System'        ,N'HOST_NAME'                      ,CONVERT(NVARCHAR(4000),HOST_NAME()           )
OPTION (MAXDOP 1,RECOMPILE);

-- Options for on-premise engine editions & SQL Managed Instance
IF CAST(SERVERPROPERTY(N'EngineEdition') AS INT)
   NOT IN (5  -- Azure SQL Database
          ,6  -- Azure Synapse Analytics
          ,9  -- Azure SQL Edge
          ,11 -- Azure Synapse serverless SQL pools
          )
BEGIN
   SET @sql = N'
   INSERT
     INTO [##SQLXL_Instance_info]
         (source
         ,name
         ,text_value
         )
   SELECT N''Configuration'' ,N''@@REMSERVER''             ,CONVERT(NVARCHAR(255),@@RemServer            ) UNION ALL
   SELECT N''Configuration'' ,N''@@SERVICENAME''           ,CONVERT(NVARCHAR(255),@@Language             ) UNION ALL
   SELECT N''System''        ,N''HOST_ID''                 ,CONVERT(NVARCHAR(4000),HOST_ID()             ) UNION ALL
   SELECT N''System''        ,N''PUBLISHINGSERVERNAME''    ,CONVERT(NVARCHAR(4000),PUBLISHINGSERVERNAME())
   OPTION (MAXDOP 1,RECOMPILE);

   INSERT
     INTO [##SQLXL_Instance_info]
         (source
         ,name
         ,run_value
         )
   SELECT N''Configuration'' ,N''@@MAX_CONNECTIONS''              ,CONVERT(BIGINT,@@Max_Connections     )
   OPTION (MAXDOP 1,RECOMPILE);'

   EXECUTE sp_executesql @sql;
END; -- IF CAST(SERVERPROPERTY(N'EngineEdition') AS INT) NOT IN (5,6,9,11)

-- Options for on-premise engine editions, SQL DB, & SQL Managed Instance
IF CONVERT(INT,SERVERPROPERTY('ProductMajorVersion')) >= 16 -- 2022+
OR CAST(SERVERPROPERTY(N'EngineEdition') AS INT)
   IN (5 -- Azure SQL Database
      ,8 -- Azure SQL Managed Instance
      )
BEGIN
   SET @sql = N'
   INSERT
     INTO [##SQLXL_Instance_info]
         (source
         ,name
         ,text_value
         )
   SELECT N''System''        ,N''CURRENT_TIMEZONE''        ,CONVERT(NVARCHAR(4000),CURRENT_TIMEZONE()    )
   OPTION (MAXDOP 1,RECOMPILE);'

   EXECUTE sp_executesql @sql;
END; -- IF CONVERT(INT,SERVERPROPERTY('ProductMajorVersion')) >= 16

/******************************************************************************************************************************************\
-- Collect Instance/Server configuration from [sys].[dm_os_sys_info]
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2008 & 2008R2 ONLY --------------------------------
       physical_memory_in_bytes    = CONVERT(BIGINT        ,NULL)
      ,virtual_memory_in_bytes     = CONVERT(BIGINT        ,NULL)
      ,bpool_visible               = CONVERT(BIGINT        ,NULL)
      ,bpool_committed             = CONVERT(BIGINT        ,NULL)
      ,bpool_commit_target         = CONVERT(BIGINT        ,NULL)
       -- SQL 2012+ ---------------------------------------------
      ,committed_kb                = CONVERT(BIGINT        ,NULL)
      ,virtual_memory_kb           = CONVERT(BIGINT        ,NULL)
      ,committed_target_kb         = CONVERT(BIGINT        ,NULL)
      ,physical_memory_kb          = CONVERT(BIGINT        ,NULL)
      ,visible_target_kb           = CONVERT(BIGINT        ,NULL)
      ,sql_memory_model            = CONVERT(BIGINT        ,NULL)
       -- SQL 2014+ ---------------------------------------------
      ,socket_count                = CONVERT(BIGINT        ,NULL)
      ,cores_per_socket            = CONVERT(BIGINT        ,NULL)
      ,numa_node_count             = CONVERT(BIGINT        ,NULL)
       -- SQL 2016+ ---------------------------------------------
      ,softnuma_configuration      = CONVERT(BIGINT        ,NULL)
       -- SQL 2017+ ---------------------------------------------
      ,container_type              = CONVERT(BIGINT        ,NULL)
      ,pdw_node_id                 = CONVERT(BIGINT        ,NULL)
)
INSERT
  INTO [##SQLXL_Instance_info]
      (source
      ,name
      ,run_value
      )
SELECT qry.source
      ,qry.name
      ,run_value  = CAST(run_value AS BIGINT)
  FROM newcol
 CROSS
 APPLY (-- All [sys].[dm_os_sys_info] values
----------------------------------------------------------
SELECT TOP (0) -- make sure each column has the correct data type
       source    = CAST(NULL AS SYSNAME)
      ,name      = CAST(NULL AS SYSNAME)
      ,run_value = CAST(NULL AS BIGINT)
UNION ALL
SELECT N'dm_os_sys_info',N'cpu_ticks'                     ,(SELECT cpu_ticks                      FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'ms_ticks'                      ,(SELECT ms_ticks                       FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'cpu_count'                     ,(SELECT cpu_count                      FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'hyperthread_ratio'             ,(SELECT hyperthread_ratio              FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'stack_size_in_bytes'           ,(SELECT stack_size_in_bytes            FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'os_quantum'                    ,(SELECT os_quantum                     FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'os_error_mode'                 ,(SELECT os_error_mode                  FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'os_priority_class'             ,(SELECT os_priority_class              FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'max_workers_count'             ,(SELECT max_workers_count              FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'scheduler_count'               ,(SELECT scheduler_count                FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'scheduler_total_count'         ,(SELECT scheduler_total_count          FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'deadlock_monitor_serial_number',(SELECT deadlock_monitor_serial_number FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'sqlserver_start_time_ms_ticks' ,(SELECT sqlserver_start_time_ms_ticks  FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'affinity_type'                 ,(SELECT affinity_type                  FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'process_kernel_time_ms'        ,(SELECT process_kernel_time_ms         FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'process_user_time_ms'          ,(SELECT process_user_time_ms           FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'time_source'                   ,(SELECT time_source                    FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_machine_type'          ,(SELECT virtual_machine_type           FROM [sys].[dm_os_sys_info]) UNION ALL
-- columns added in later versions --------------------------------------------------------
SELECT N'dm_os_sys_info',N'physical_memory_in_bytes'      ,(SELECT physical_memory_in_bytes       FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_memory_in_bytes'       ,(SELECT virtual_memory_in_bytes        FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'bpool_visible'                 ,(SELECT bpool_visible                  FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'bpool_committed'               ,(SELECT bpool_committed                FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'bpool_commit_target'           ,(SELECT bpool_commit_target            FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'committed_kb'                  ,(SELECT committed_kb                   FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_memory_kb'             ,(SELECT virtual_memory_kb              FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'committed_target_kb'           ,(SELECT committed_target_kb            FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'physical_memory_kb'            ,(SELECT physical_memory_kb             FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'visible_target_kb'             ,(SELECT visible_target_kb              FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'sql_memory_model'              ,(SELECT sql_memory_model               FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'socket_count'                  ,(SELECT socket_count                   FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'cores_per_socket'              ,(SELECT cores_per_socket               FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'numa_node_count'               ,(SELECT numa_node_count                FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'softnuma_configuration'        ,(SELECT softnuma_configuration         FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'container_type'                ,(SELECT container_type                 FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'pdw_node_id'                   ,(SELECT pdw_node_id                    FROM [sys].[dm_os_sys_info])
--------------------------------------------------------------------------------------------------------------------------------------------
) AS qry (source,name,run_value)
OPTION (MAXDOP 1,RECOMPILE);

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2008 & 2008R2 ONLY --------------------------------
       -- SQL 2012+ ---------------------------------------------
       sql_memory_model_desc       = CONVERT(SYSNAME       ,NULL)
       -- SQL 2014+ ---------------------------------------------
       -- SQL 2016+ ---------------------------------------------
      ,softnuma_configuration_desc = CONVERT(SYSNAME       ,NULL)
       -- SQL 2017+ ---------------------------------------------
      ,process_physical_affinity   = CONVERT(NVARCHAR(3072),NULL)
      ,container_type              = CONVERT(BIGINT        ,NULL)
      ,container_type_desc         = CONVERT(SYSNAME       ,NULL)
)
INSERT
  INTO [##SQLXL_Instance_info]
      (source
      ,name
      ,text_value
      )
SELECT qry.source
      ,qry.name
      ,text_value = CAST(qry.text_value AS NVARCHAR(255))
  FROM newcol
 CROSS
 APPLY (-- All [sys].[dm_os_sys_info] values
----------------------------------------------------------
SELECT TOP (0) -- make sure each column has the correct data type
       source     = CAST(NULL AS SYSNAME)
      ,name       = CAST(NULL AS SYSNAME)
      ,text_value = CAST(NULL AS NVARCHAR(255))
UNION ALL
SELECT N'dm_os_sys_info',N'affinity_type_desc'            ,(SELECT affinity_type_desc             FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'time_source_desc'              ,(SELECT time_source_desc               FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_machine_type_desc'     ,(SELECT virtual_machine_type_desc      FROM [sys].[dm_os_sys_info]) UNION ALL
-- columns added in later versions --------------------------------------------------------
SELECT N'dm_os_sys_info',N'sql_memory_model_desc'         ,(SELECT sql_memory_model_desc          FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'softnuma_configuration_desc'   ,(SELECT softnuma_configuration_desc    FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'container_type_desc'           ,(SELECT container_type_desc            FROM [sys].[dm_os_sys_info]) UNION ALL
SELECT N'dm_os_sys_info',N'process_physical_affinity'     ,(SELECT process_physical_affinity      FROM [sys].[dm_os_sys_info]) UNION ALL
--------------------------------------------------------------------------------------------------------------------------------------------
SELECT N'dm_os_sys_info',N'sqlserver_start_time'   ,REPLACE((SELECT CONVERT(NVARCHAR(4000),sqlserver_start_time,120)
                                                                                                  FROM [sys].[dm_os_sys_info]
                                                            )
                                                           ,N'-',N'.')
) AS qry (source,name,text_value)
OPTION (MAXDOP 1,RECOMPILE);

/******************************************************************************************************************************************\
-- Collect Instance/Server configuration from [sys].[servers]
-- NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
--       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
IF object_id('[sys].[servers]') IS NOT NULL BEGIN -- on-premise editions & Azure SQL Managed Instance
   WITH newcol AS (-- columns added after SQL Server 2005
   SELECT -- SQL 2016+ -----------------------
          is_rda_server    = CONVERT(BIT,NULL)
   )
   INSERT
     INTO [##SQLXL_Instance_info]
         (source
         ,name
         ,run_value
         )
   SELECT qry.source
         ,qry.name
         ,run_value = CAST(qry.run_value AS BIGINT)
     FROM newcol
    CROSS
    APPLY (-- server numeric configuration information for "local" connected server from [sys].[servers]
   SELECT TOP (0)
          source    = CAST(NULL AS SYSNAME)
         ,name      = CAST(NULL AS SYSNAME)
         ,run_value = CAST(NULL AS BIGINT)
   UNION ALL
   SELECT N'servers',N'server_id'              ,(SELECT server_id                FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'connect_timeout'        ,(SELECT connect_timeout          FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'query_timeout'          ,(SELECT query_timeout            FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_linked'              ,(SELECT is_linked                FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_remote_login_enabled',(SELECT is_remote_login_enabled  FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_rpc_out_enabled'     ,(SELECT is_rpc_out_enabled       FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_data_access_enabled' ,(SELECT is_data_access_enabled   FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_collation_compatible',(SELECT is_collation_compatible  FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'uses_remote_collation'  ,(SELECT uses_remote_collation    FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'lazy_schema_validation' ,(SELECT lazy_schema_validation   FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_system'              ,(SELECT is_system                FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_publisher'           ,(SELECT is_publisher             FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_subscriber'          ,(SELECT is_subscriber            FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_distributor'         ,(SELECT is_distributor           FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_nonsql_subscriber'   ,(SELECT is_nonsql_subscriber     FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_rda_server'          ,(SELECT is_rda_server            FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_remote_proc_transaction_promotion_enabled'
                                               ,(SELECT is_remote_proc_transaction_promotion_enabled
                                                   FROM [sys].[servers]
                                                  WHERE server_id = 0
                                                )
   ) AS qry (source,name,run_value)
   OPTION (MAXDOP 1,RECOMPILE);

   INSERT
     INTO [##SQLXL_Instance_info]
         (source
         ,name
         ,text_value
         )
   SELECT qry.source
         ,qry.name
         ,text_value = CAST(qry.text_value AS NVARCHAR(4000))
     FROM (-- server string configuratio information for "local" connected server from [sys].[servers]
   SELECT N'servers',N'name'                   ,(SELECT name                     FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'product'                ,(SELECT product                  FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'provider'               ,(SELECT provider                 FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'data_source'            ,(SELECT data_source              FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'location'               ,(SELECT location                 FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'provider_string'        ,(SELECT provider_string          FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'catalog'                ,(SELECT catalog                  FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'collation_name'         ,(SELECT collation_name           FROM [sys].[servers] WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'modify_date'            ,(SELECT CONVERT(NVARCHAR(30),modify_date,120) FROM [sys].[servers] WHERE server_id = 0)
   ) AS qry (source,name,text_value)
   OPTION (MAXDOP 1,RECOMPILE);
END; -- IF object_id('[sys].[servers]') IS NOT NULL

-- Diagnostic - Instance - Good to know - SQL version Instance and server key hardware & OS cofiguration information
INSERT
  INTO [##SQLXL_Instance_Diagnostics] (diagnostic)
SELECT string = CASE t.rownbr
                     WHEN 2
                     THEN  N'Startup ' + s.text_value
                         + N' (' + CAST(DATEDIFF(DAY,s.text_value,GETDATE()) AS NVARCHAR(20))
                         + N' days ago)'
                     ELSE LTRIM(REPLACE(t.string,NCHAR(09),N''))
                END
 FROM [dbo].[SQLXL_Parse_Strings]((SELECT text_value
                                 FROM [##SQLXL_Instance_info]
                                WHERE source = N'Configuration'
                                  AND name = N'@@VERSION'
                              ),NCHAR(10)) AS t
 CROSS
  JOIN (-- Get SQL Server startup time
        SELECT text_value
          FROM [##SQLXL_Instance_info]
         WHERE source = N'dm_os_sys_info'
           AND name   = N'sqlserver_start_time'
       ) AS s
 WHERE t.RowNbr IN (1,2,4)

-- Diagnostic - Server - memory
-- Diagnostic - Instance - SQL memory, percent used
UNION ALL
SELECT  N'RAM'
      + CASE WHEN memsrv > 0
             THEN  N' OS '
                 + [dbo].[SQLXL_3SD](MemSrv,N'KB')
             ELSE N''
        END
      + CASE WHEN SQLmax > 0
             THEN  N' SQL Max '
                 + [dbo].[SQLXL_3SD](SQLmax,N'MB')
                 + CASE WHEN MemSrv > 0
                        THEN N' (' + [dbo].[SQLXL_3SD](1.0 * SQLmax * 1024.0 / MemSrv,N'%') + N')'
                        ELSE N''
                   END
             ELSE N''
        END
      + CASE WHEN SQLusd > 0
             THEN  N' SQL Used '
                 + [dbo].[SQLXL_3SD](SQLusd,N'KB')
                 + CASE WHEN SQLmax > 0
                        THEN N' (' + [dbo].[SQLXL_3SD](1.0 * SQLusd / (SQLmax * 1024.0),N'%') + N')'
                        ELSE N'N/A'
                   END
             ELSE N''
        END
  FROM (-- queried here since each is used multiple times above
        SELECT MemSrv = (SELECT CAST(run_value AS FLOAT)
                           FROM [##SQLXL_Instance_info]
                          WHERE source = N'dm_os_sys_info'
                            AND name   = N'physical_memory_kb'
                        )
              ,SQLmax = (SELECT CAST(run_value AS FLOAT)
                           FROM [##SQLXL_Instance_info]
                          WHERE source = N'configurations'
                            AND name   = N'max server memory (MB)'
                        )
              ,SQLusd = (SELECT CAST(run_value AS FLOAT)
                           FROM [##SQLXL_Instance_info]
                          WHERE source = N'dm_os_sys_info'
                            AND name   = N'committed_kb'
                        )
       ) AS e

-- Diagnostic - Server - CPU count, Max Degree of Parallelism
-- Diagnostic - Server - CPU sockets, cores, hyperthread_ratio, SoftNUMA
UNION ALL
SELECT LTRIM( COALESCE((SELECT N' CPU ' + QUOTENAME(run_value)
                          FROM [##SQLXL_Instance_info]
                         WHERE source = N'dm_os_sys_info'
                           AND name   = N'cpu_count'
                       ),N'')
            + COALESCE((SELECT N' MAXDOP ' + QUOTENAME(run_value)
                              + CASE WHEN run_value <> N'0'
                                     THEN N' default [0] (all processors)'
                                     ELSE N''
                                END
                          FROM [##SQLXL_Instance_info]
                         WHERE source = N'configurations'
                           AND name   = N'max degree of parallelism'
                       ),N'')
            + COALESCE((SELECT N' Sockets ' + QUOTENAME(run_value)
                          FROM [##SQLXL_Instance_info]
                         WHERE source = N'dm_os_sys_info'
                           AND name   = N'socket_count'
                       ),N'')
            + COALESCE((SELECT N' Cores/Socket ' + QUOTENAME(run_value)
                          FROM [##SQLXL_Instance_info]
                         WHERE source = N'dm_os_sys_info'
                           AND name   = N'cores_per_socket'
                       ),N'')
            + COALESCE((SELECT N' Hyperthread Ratio ' + QUOTENAME(run_value)
                          FROM [##SQLXL_Instance_info]
                         WHERE source = N'dm_os_sys_info'
                           AND name   = N'hyperthread_ratio'
                       ),N'')
-- Diagnostic - Server - GLENN BERRY: automatic soft-NUMA disabled (should be 0 in most cases)
            + COALESCE((SELECT N' SoftNUMA ' + QUOTENAME(text_value)
                          FROM [##SQLXL_Instance_info]
                         WHERE source = N'dm_os_sys_info'
                           AND name   = N'softnuma_configuration_desc'
                       ),N'')
            )
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Server Diagnostics - Speeds & Feeds'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- SQL Instance settings
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Instance_Diagnostics] (diagnostic)
-- Diagnostic - Instance - non-default - Default Fill Factor NOT 0 or 100
SELECT diagnostic = N'Instance Fill Factor '
                  + CASE WHEN run_value IN (0,100) THEN N'100% (default)'
                         ELSE CAST(run_value AS NVARCHAR(20)) + N'%, default 100%'
                    END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'fill factor (%)'

-- Diagnostic - Instance - Minimum memory per query <> 1024
UNION ALL
SELECT  N'Minimum memory per query (KB) = ' + CAST(run_value AS NVARCHAR(20))
      + CASE WHEN run_value = 1024 THEN N' (default)' ELSE N', default 1024' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'min memory per query (KB)'

-- Diagnostic - Instance - non-default - remote data archive enabled (stretch-enabled)
UNION ALL
SELECT N'Remote data archive ENABLED, default DISABLED'
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'servers'
   AND name      = N'is_rda_server'
   AND run_value = 1

-- Always Included --------------------------------------------------------------------------------------
-- Diagnostic - Instance - cost threshold for parallelism (default 5)
UNION ALL
SELECT  name + N' = ' + CAST(run_value AS NVARCHAR(20))
      + CASE WHEN run_value = 5 THEN N' (default)' ELSE N', default 5' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'Cost threshold for parallelism'

-- Diagnostic - Instance - Optimize for ad hoc workloads ENABLED
UNION ALL
SELECT  name + N' '
      + CASE WHEN run_value = 0 THEN N'OFF'        ELSE N'ON'            END
      + CASE WHEN run_value = 0 THEN N' (default)' ELSE N', default OFF' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'Optimize for ad hoc workloads'

-- Diagnostic - Instance - Product Update Type
UNION ALL
SELECT  N'Product Update Type = ' + CAST(run_value AS NVARCHAR(20))
      + CASE WHEN run_value IS NULL THEN N' (default)' ELSE N', default N/A' END
  FROM [##SQLXL_Instance_info]
 WHERE source     = N'configurations'
   AND name       = N'ProductUpdateType'
   AND run_value IS NOT NULL

-- Diagnostic - Instance - SQL 2019+ - tempdb Is Metadata Memory Optimized
UNION ALL
SELECT  N'tempdb Metadata Memory Optimized = '
      + CASE WHEN run_value = 0
             THEN N'DISABLED (default) - consider enabling'
             ELSE N'ENABLED, default DISABLED'
        END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'tempdb metadata memory-optimized'
   AND CONVERT(INT,SERVERPROPERTY('ProductMajorVersion')) >= 15 -- 2019+

-- Diagnostic - Instance - non-default - Network packet size <> 4096
UNION ALL
SELECT  N'Network packet size ' + CAST(run_value AS NVARCHAR(20)) + N'B'
      + CASE WHEN run_value = 4096
             THEN N' (default)'
             ELSE  CASE WHEN run_value <> 8000 THEN N', consider 8000B' ELSE N'' END
                 + N', default 4096B'
        END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'network packet size (B)'

-- Only included if NOT DEFAULT value -------------------------------------------------------------------
-- Diagnostic - Instance - blocked process threshold <> 5
UNION ALL
SELECT  N'Blocked process threshold = ' + CAST(run_value AS NVARCHAR(20)) + N' seconds'
      + CASE WHEN run_value = 5 THEN N' (default)' ELSE N', default 5 seconds' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'blocked process threshold (s)'
   AND run_value NOT IN (0,5)

-- Diagnostic - Instance - non-default - index create memory (KB) <> 0
UNION ALL
SELECT  N'Index create memory = '
      + CASE WHEN run_value = 0 THEN N'dynamic (default)' ELSE CAST(run_value AS NVARCHAR(20)) + N'KB, default dynamic (0)' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'Index create memory (KB)'
   AND run_value NOT IN (0)

-- Diagnostic - Instance - non-default - max text repl size (B) <> 65536
UNION ALL
SELECT  N'Text Replication Size MAX = ' + CAST(run_value AS NVARCHAR(20)) + N'B'
      + CASE WHEN run_value = 65536 THEN N' (default)' ELSE N', default 65536B' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'max text repl size (B)'
   AND run_value NOT IN (65536)

-- Diagnostic - Instance - non-default - query governor cost limit > 0
UNION ALL
SELECT  N'Query governor cost limit = ' + CAST(run_value AS NVARCHAR(20))
      + CASE WHEN run_value = 0 THEN N' - All (default)' ELSE N' default 0 (All)' END
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'configurations'
   AND name      = N'query governor cost limit'
   AND run_value > 0

-- Diagnostic - Instance - non-default - Query waits for resources before it times out <> -1
UNION ALL
SELECT  N'Query waits for resources = ('+ CAST(run_value AS NVARCHAR(20)) +N')'
      + CASE WHEN run_value = -1
             THEN N' - 25X query cost (default)'
             ELSE N' sec, default (-1) - 25X estimated query cost'
        END
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'configurations'
   AND name      = N'query wait (s)'
   AND run_value <> -1

--------------------------------------------------------------------------------------------------------------------------------------------
-- Other Services installed
--------------------------------------------------------------------------------------------------------------------------------------------
UNION ALL
-- Diagnostic - Instance - non-default - Full-Text indexing is Installed
-- Diagnostic - Instance - full-text language
SELECT  N'Fulltext INSTALLED, Locale Identifier '
      + COALESCE((SELECT CAST(run_value AS NVARCHAR(20))
                    FROM [##SQLXL_Instance_info]
                   WHERE source = N'configurations'
                     AND name   = N'default full-text language'
                 ),N'')
      + COALESCE((SELECT N' - ' + text_value
                    FROM [##SQLXL_Instance_info]
                   WHERE source = N'configurations'
                     AND name   = N'fulltext_default_language_name'
                 ),N'')
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsFullTextInstalled' -- always show if fulltext installed
   AND run_value <> 0

UNION ALL
-- Diagnostic - Instance - full-text Crawl Bandwidth MAX & MIN
SELECT COALESCE((SELECT  N'> Crawl Bandwidth MAX = ' + CAST(run_value AS NVARCHAR(20))
                        + CASE WHEN run_value = 100 THEN N' (default)' ELSE N', default 100' END
                    FROM [##SQLXL_Instance_info]
                   WHERE source = N'configurations'
                     AND name   = N'FT crawl bandwidth (max)'
                 ),N'')
      + COALESCE((SELECT  N' MIN = ' + CAST(run_value AS NVARCHAR(20))
                        + CASE WHEN run_value = 0 THEN N' (default)' ELSE N', default 0' END
                    FROM [##SQLXL_Instance_info]
                   WHERE source = N'configurations'
                     AND name   = N'FT crawl bandwidth (min)'
                 ),N'')
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsFullTextInstalled' -- always show if fulltext installed
   AND run_value <> 0

UNION ALL
-- Diagnostic - Instance - full-text notify bandwidth MAX & MIN
SELECT COALESCE((SELECT  N'> Notify Bandwidth MAX = ' + CAST(run_value AS NVARCHAR(20))
                        + CASE WHEN run_value = 100 THEN N' (default)' ELSE N', default 100' END
                    FROM [##SQLXL_Instance_info]
                   WHERE source = N'configurations'
                     AND name   = N'FT notify bandwidth (max)'
                ),N'')
      + COALESCE((SELECT  N' MIN = ' + CAST(run_value AS NVARCHAR(20))
                        + CASE WHEN run_value = 0 THEN N' (default)' ELSE N', default 0' END
                    FROM [##SQLXL_Instance_info]
                   WHERE source = N'configurations'
                     AND name   = N'FT notify bandwidth (min)'
                 ),N'')
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsFullTextInstalled' -- always show if fulltext installed
   AND run_value <> 0

UNION ALL
-- Diagnostic - Instance - full-text crawl range MAX CPUs
SELECT COALESCE((SELECT  N'> Fulltext Crawl Range MAX = ' + CAST(run_value AS NVARCHAR(20)) + N' CPU '
                        + IIF(run_value = 4,N'(default)',N', default 4')
                    FROM [##SQLXL_Instance_info]
                   WHERE source = N'configurations'
                     AND name   = N'max full-text crawl range'
                 ),N'')
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsFullTextInstalled' -- always show if fulltext installed
   AND run_value <> 0

-- Diagnostic - Instance - non-default - Advanced Analytics is Installed
UNION ALL
SELECT N'Advanced Analytics INSTALLED'
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsAdvancedAnalyticsInstalled'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Big Data Cluster is Installed
UNION ALL
SELECT N'Big Data Cluster INSTALLED'
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsBigDataCluster'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Always On (HADR) Enabled
UNION ALL
SELECT N'Always On (HADR) ENABLED'
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsHadrEnabled'
   AND run_value = 1

-- Diagnostic - Instance - non-default - PolyBase is Installed
UNION ALL
SELECT N'PolyBase feature INSTALLED'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsPolyBaseInstalled'
   AND run_value = 1

-- Diagnostic - Instance - non-default - XTP (In-Memory Tables) is Supported
UNION ALL
SELECT N'XTP In-memory tables [SUPPORTED]'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsXTPSupported'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Microsoft Purview access policies are ENABLED
UNION ALL
SELECT N'Microsoft Purview access policies are ENABLED'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsExternalGovernanceEnabled'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Uses External Authentication Only
UNION ALL
SELECT N'Microsoft Entra-only authentication is ENABLED'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsExternalAuthenticationOnly'
   AND run_value = 1

--------------------------------------------------------------------------------------------------------------------------------------------
-- Instance non-default settings
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Instance - non-default - Server Is Clustered
UNION ALL
SELECT N'Server is CLUSTERED'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsClustered'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Uses Integrated Security Only
UNION ALL
SELECT N'Integrated Security ONLY'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsIntegratedSecurityOnly'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Is SQL Server Local DB
UNION ALL
SELECT N'Instance is SQL Server Express LocalDB'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsLocalDB'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Is in Single User Mode
-- NOTE: no index performance related items from SERVERPROPERTY as of yet
UNION ALL
SELECT N'Instance in SINGLE USER mode'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsSingleUser'
   AND run_value = 1
OPTION (MAXDOP 1,RECOMPILE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@exec_dttm,GETDATE()),0))
            + N' Instance Diagnostics - Other services installed'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- End of procedure
--------------------------------------------------------------------------------------------------------------------------------------------
IF @@TRANCOUNT > 0 COMMIT;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,GETDATE(),GETDATE()),0))
            + N' End   [##SQLXL_Instance]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
END;
GO

IF @@TRANCOUNT > 0 COMMIT;

RAISERROR ('Created procedure [##SQLXL_Instance] ...',0,0) WITH NOWAIT;

/******************************************************************************************************************************************\
############################################################################################################################################
 END SQLXL_INDEX_Instance procedure
############################################################################################################################################
\******************************************************************************************************************************************/

/*########################################################################################################################################*\
LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING
\*########################################################################################################################################*/
/*** LOCAL TESTING
EXEC [##SQLXL_Index] @database_name = N'*'                  -- runs for ALL databases
EXEC [##SQLXL_Index]                                        -- runs for all USER databases
EXEC [##SQLXL_Index] @database_name = N'ReportServer'       -- runs for a SINGLE database
EXEC [##SQLXL_Index] @database_name = N'WideWorldImporters' -- runs for a SINGLE database

-- For testing the export to text file feature:
SQLCMD -Q "EXEC [##SQLXL_Index_Present]" -s"ª" -y 0 -a 8000 -o "D:\TEMP\out.txt" -S HV10-SQL2022 -d "tempdb" -U "demo" -P "demo"

SQLCMD Parameters used:
----------------------------------------------------------------------------------------------------
-Q = SQL command to execute                - "EXEC [##SQLXL_Index_Present]"
-s = column delimiter                      - ASCII CHAR(166) is used to avoid collisions "ª"
-y = variable length type display width    - 0 = ALL
-a = network packet size                   - 8000 bytes
-o = output file and destination directory - "D:\TEMP\out.txt"
-d = SQL database to connect to (if not the user default) - "WideWorldImporters"
-U = User ID if not windows authentication
-P = User password if not windows authentication
--*/

/******************************************************************************************************************************************\
############################################################################################################################################
 END SQLXL_INDEX Testing
############################################################################################################################################
\******************************************************************************************************************************************/
