-- VERSION 250415.0
SET STATISTICS IO,PROFILE,TIME,XML OFF; -- Displays information on statement resource usage
/******************************************************************************************************************************************\
NOTE: All SQLXL helper functions are created in the database your SSMS, ADS, dBeaver etc. session is connected to  since you can't create
      temporary (#) functions in SQL Server

After clicking the "Get SQL Data" button in the spreadsheet or executing the SQLCMD script to create the text file these temporary
functions will be deleted.

All other objects (tables, procedures) are created as temporary objects in TEMPDB.
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
Copyright (C) 2025 Practice Computing Management Inc.
All rights reserved.

MIT License, http://www.opensource.org/licenses/mit-license.php
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
(the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge,
publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Credit to Brent Ozar Unlimited for the BI### Check IDs included in the Diagnostics. Source for these is found at
https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md

Development Notes:
- TRY_CONVERT & TRY_CAST DO NOT WORK if DATABASE COMPATIBILITY level is less than 11 (SQL 2012) !
- Comparing, COALESCE, and concatenating strings with different collations will FAIL.
  So the COLLATE clause is added to a number of string datatypes since columns may have different collations within tables and databases.
  Example is DMV [sys].[objects] - 5 NVARCHAR columns have collation "SQL_Latin1_General_CP1_CI_AS", 7 have "Latin1_General_CI_AS_KS_WS"
     for a typical user database. Instead all string data types are COLLATED to Latin1_General_100_CI_AI,

<Future> SQL2025 Notes:
- index type 8 not found in sys.indexes as of SQL 2025
- obj_type_dtl for JSON indexes will need updating
- idx_type_dtl for JSON indexes will need updating
- Add sys.json_index_paths where appropriate
- review sys. procs sys
  -- sp_auto_tuning_* for index guidance examples
  -- sp_repair_logical_index_corruption
  -- sp_vector_index_build_update_stats
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
SQL Server ProductMajorVersion & Default Compatibility leveld (as of September 2024)
--------------------------------------------------------------------------------------------------------------------------------------------
Azure SQL DB   - 16   - 160
Azure SQL MI   - 16   - 150
        2022   - 16   - 160
        2019   - 15   - 150
        2017   - 14   - 140
        2016   - 13   - 130
        2014   - 12   - 120
        2012   - 11   - 110
        2008R2 - 10.5 - 100 * NOT SUPPORTED BY SQLXL_Index *
        2008   - 10   - 100 * NOT SUPPORTED BY SQLXL_Index *
        2005   -  9   -  90 * NOT SUPPORTED BY SQLXL_Index *
        2000   -  8   -  80 * NOT SUPPORTED BY SQLXL_Index *

SQL Server EngineEditions including Azure
--------------------------------------------------------------------------------------------------------------------------------------------
 1 = Personal or Desktop Engine (Not available in SQL Server 2005 (9.x) and later versions.)
 2 = Standard (For Standard, Web, and Business Intelligence.)
 3 = Enterprise (For Evaluation, Developer, and Enterprise editions.)
 4 = Express (For Express, Express with Tools, and Express with Advanced Services)

 5 = Azure SQL Database
 6 = Azure Synapse Analytics            * NOT SUPPORTED BY SQLXL_Index *
 8 = Azure SQL Managed Instance
 9 = Azure SQL Edge                     * NOT SUPPORTED BY SQLXL_Index *
11 = Azure Synapse serverless SQL pools * NOT SUPPORTED BY SQLXL_Index *

Database Compatibility Level
--------------------------------------------------------------------------------------------------------------------------------------------
If Database compatibility level is less than SQL 2012 (11) then TRY_CONVERT & TRY_CAST do not work.
They are omitted from the code - may be added back once support for SQL 2012 is dropped.

\******************************************************************************************************************************************/

--------------------------------------------------------------------------------------------------------------------------------------------
-- SQLXL does not support on-premise SQL Server prior to 2012
-- Let the user know if this won't run on their version of SQL Server
--------------------------------------------------------------------------------------------------------------------------------------------
IF  CAST(SERVERPROPERTY(N'EngineEdition')       AS INT) <=  4 -- On premise engine editions
AND CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) <  11 -- SQL2012
   RAISERROR ('
*****************************************************************************
*****************************************************************************
*** Oops! SQLXL_INDEX requires on-prem SQL Server Version 2012 or higher  ***
***      This uses the SQL "IIF" function introduced in SQL 2012          ***
*****************************************************************************
*****************************************************************************

*****************************************************************************
***                   SQLXL creation script is exiting                    ***
*****************************************************************************

',20,-1) WITH LOG;
GO

--------------------------------------------------------------------------------------------------------------------------------------------
-- Azure SQL Database connected to MASTER database.
-- Note - SQL DB does not allow for the "USE dbname" command and does not allow qualifying objects
--        with their database names. Alert user this won't run on their version of SQL Server
--------------------------------------------------------------------------------------------------------------------------------------------
IF SERVERPROPERTY(N'EngineEdition') = 5         -- Azure SQL Database
AND LOWER(DB_name())                = N'master' -- non-user database
   RAISERROR ('
****************************************************************************
****************************************************************************
***    Oops! On Azure SQL Database SQLXL_INDEX does not run on MASTER    ***
***    database. Please change your connection to your User  database    ***
****************************************************************************
****************************************************************************

****************************************************************************
***                  SQLXL creation script is exiting                    ***
****************************************************************************

',20,-1) WITH LOG;
GO

--------------------------------------------------------------------------------------------------------------------------------------------
-- Azure editions not supported
-- Let the user know if this won't run on their version of SQL Server
--------------------------------------------------------------------------------------------------------------------------------------------
IF CAST(SERVERPROPERTY(N'EngineEdition') AS INT)
IN ( 6 -- Azure Synapse Analytics
   , 9 -- Azure SQL Edge (For all editions of Azure SQL Edge)
   ,11 -- Azure Synapse serverless SQL pools
   )
   RAISERROR ('
***************************************************************************
***************************************************************************
***        Oops! SQLXL_INDEX does not run on Azure products             ***
***    Synapse Analytics, Edge, and Synapse Serverless SQL Pools        ***
***************************************************************************
***************************************************************************

***************************************************************************
***                SQLXL creation script is exiting                     ***
***************************************************************************

',20,-1) WITH LOG;
GO

/******************************************************************************************************************************************\
 Creation Session settings
\******************************************************************************************************************************************/
SET ANSI_NULLS               ON; -- Specifies ISO compliant behavior of (=) and (<>) comparison operators when used with null values
SET ANSI_WARNINGS            ON; -- Specifies ISO standard behavior for several error conditions. Must be ON with FOR XML statements
SET ARITHABORT               ON; -- Terminates a query when an overflow or divide-by-zero error occurs during query execution
SET ARITHIGNORE             OFF; -- Controls whether error messages are returned from overflow or divide-by-zero errors during a query
SET CURSOR_CLOSE_ON_COMMIT  OFF; -- OFF means that the server will not close cursors when you commit a transaction
SET DATEFORMAT              YMD; -- Sets the order of the month, day, and year date parts for interpreting date&time strings
SET DEADLOCK_PRIORITY       -10; -- Specifies the relative importance of the current session if deadlocked. (-10) is lowest priority
SET FMTONLY                 OFF; -- Returns only metadata to client. Used to test the response format without actually running the query
SET FORCEPLAN               OFF; -- When ON, optimizer uses FORCE ORDER + NESTED LOOP JOIN for FROM clause tables
SET IMPLICIT_TRANSACTIONS   OFF; -- When OFF, sets the connection to autocommit transaction mode
SET LOCK_TIMEOUT           1000; -- Specifies the number of milliseconds a statement waits for a lock to be released
SET NOCOUNT                  ON; -- Stops the message showing the count of rows affected by a statement or stored procedure
SET NOEXEC                  OFF; -- Compiles each query but does not execute it
SET NUMERIC_ROUNDABORT      OFF; -- Specifies the level of error reporting generated when rounding causes a loss of precision
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute
SET QUOTED_IDENTIFIER        ON; -- Causes SQL Server to follow ISO rules using quotation mark delimiting identifiers and literal strings
SET STATISTICS IO,PROFILE,TIME,XML OFF; -- Displays information on statement resource usage
SET TEXTSIZE         2147483647; -- Specifies size of BLOB returned by a SELECT statement. Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON; -- Automatically roll back the current transaction when a statement raises a run-time error

/******************************************************************************************************************************************\
 Save off initially connected time, database name & collation
\******************************************************************************************************************************************/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_startup];
END TRY
BEGIN CATCH
END CATCH

-- SQLXL_Index Startup Parameters
SELECT collection_DTTM = GETDATE()
      ,collation_name  = CAST(collation_name AS NVARCHAR(MAX)) COLLATE Latin1_General_100_CI_AI
      ,database_name   = name                                  COLLATE Latin1_General_100_CI_AI
  INTO [##SQLXL_Index_startup]
  FROM sys.databases
 WHERE database_id   = DB_ID();

/******************************************************************************************************************************************\
 Temporarily create other procs called to avoid warning messages.
 NOTE: SQL functions cannot be created as temporary objects
\******************************************************************************************************************************************/
BEGIN TRY
   EXEC (N'CREATE PROCEDURE [##SQLXL_Instance] AS RETURN 0;')
END TRY
BEGIN CATCH
END CATCH
GO

/******************************************************************************************************************************************\
 *Task* Create procedure [##SQLXL_Index] - capture, organize, diagnose, and prescribe index improvements
\******************************************************************************************************************************************/
BEGIN TRY
   EXEC (N'CREATE PROCEDURE [##SQLXL_Index] AS RETURN 0;')
END TRY
BEGIN CATCH
END CATCH
GO

 ALTER PROCEDURE [##SQLXL_Index]
      (@database_name                    NVARCHAR(200) = N''
       -- Asterisk ("*") for all databases including system
       -- NULL for all user (non-system) databases
       -- "database name" for a single database
      ,@cover_foreign_keys               TINYINT = 2
       --  0 = no need to continue to cover Foreign Key Constraints, do not create new indexes based on MISSING index recommendations
       --  1 = continue to cover keys that are TRUSTED, ENABLED, and REPLICATED & are have referential action enabled
       --      Includes creating new indexes based on MISSING index recommendations
       --  2 = continue to cover all Foreign Key Constraints that are TRUSTED, ENABLED, and REPLICATED
       --      Includes creating new indexes based on MISSING index recommendations
       --  3 = continue to cover all Foreign Key Constraints regardless of status
       --      Includes creating new indexes based on MISSING index recommendations
      --------------------------------------------------------------------------------------------------------------------------------------
      -- priority computation weightings. relative values to apply to each of the corresponding metrics.
      -- larger value means higher weighting assigned to that metric
      --------------------------------------------------------------------------------------------------------------------------------------
      ,@Prio_wait_time             SMALLINT = 120
      ,@Prio_wait_count            SMALLINT =  60
      ,@Prio_locks                 SMALLINT =  40
      ,@Prio_lock_promotions       SMALLINT =  60
      ,@Prio_lock_promotion_fails  SMALLINT =  80
      ,@Prio_page_splits           SMALLINT =  60
      ,@Prio_page_merges           SMALLINT =  60
      ,@Prio_OPS_forwarded_fetches SMALLINT =  20
      ,@Prio_missing_indexes       SMALLINT =  60
      ,@Prio_OPS_writes            SMALLINT =  30
      ,@Prio_buffer_cache_used     SMALLINT =  60
      ,@Prio_OPS_read_write_ratio  SMALLINT =  4  -- Note: starts with 4X as the "zero" value and works backwards from there
      ,@Prio_reads                 SMALLINT =  10
      ,@Prio_scans                 SMALLINT =  40
      ,@Prio_lookups               SMALLINT =  60
      ,@Prio_LOB                   SMALLINT =  40
      ,@xtp_Priority_deflator      SMALLINT =  25 -- divisor, since activities in memory much faster than disk
      )
  WITH RECOMPILE -- forces the procedure to recompile every time it’s executed. Avoids placing queries in PLAN CACHE

AS
/*** LOCAL TESTING ***
DECLARE @database_name NVARCHAR(200) = N'' COLLATE Latin1_General_100_CI_AI
--*/

DECLARE @msg             NVARCHAR(MAX)
--------------------------------------------------------------------------------------------------------------------------------------------
-- SQLXL requires procedure execution to be performed while connected to the same database you created the procedures in
-- Let the user know if they are connected to a different database
--------------------------------------------------------------------------------------------------------------------------------------------
IF DB_name() <> (SELECT TOP (1) database_name FROM [##SQLXL_Index_startup])
BEGIN
   SET @msg = N'
*****************************************************************************
*****************************************************************************
***   Oops! Executing procedure [##SQLXL_Index] requires                  ***
***   connecting to the database you originally created the objects in.   ***
***   You are currently connected to database                             ***
      ' + QUOTENAME(DB_name()) + N'
***   Please connect to database                                          ***
      ' + QUOTENAME((SELECT TOP (1) database_name FROM [##SQLXL_Index_startup])) + N'
***   and try again.                                                      ***
*****************************************************************************
*****************************************************************************'
   RAISERROR (@msg,0,0) WITH NOWAIT;
   RETURN 0
END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Selected database not found from current connection
--------------------------------------------------------------------------------------------------------------------------------------------
IF @database_name COLLATE Latin1_General_100_CI_AI NOT IN (N'',N'*') BEGIN
   IF NOT EXISTS (-- check to see if requested database found on server
                  SELECT 1/0
                    FROM [sys].[databases] WITH (READUNCOMMITTED)
                   WHERE name COLLATE Latin1_General_100_CI_AI = @database_name COLLATE Latin1_General_100_CI_AI
                     AND user_access_desc = N'MULTI_USER'
                     AND state_desc       = N'ONLINE'
                 )
   BEGIN
      SET @msg = N'
***********************************************************************************************
***********************************************************************************************
*** Oops! Database
*** ' + QUOTENAME(@database_name) + N'
*** was not found / not multi-user / or offline in this instance of SQL Server
***********************************************************************************************
***********************************************************************************************

***********************************************************************************************
*** SQLXL_Index is exiting                                                                  ***
***********************************************************************************************'
      RAISERROR (@msg,0,0) WITH NOWAIT;
      RETURN 0
--    RAISERROR (@msg,20,-1) WITH LOG;
   END; -- IF NOT EXISTS (SELECT 1/0 FROM [sys].[databases] WHERE name = @database_name)
END;    -- IF @database_name NOT IN (N'',N'*')

/******************************************************************************************************************************************\
 Procedure Environment settings
\******************************************************************************************************************************************/
SET ANSI_NULLS               ON; -- Specifies ISO compliant behavior of (=) and (<>) comparison operators when used with null values
SET ANSI_WARNINGS            ON; -- Specifies ISO standard behavior for several error conditions. Must be ON with FOR XML statements
SET ARITHABORT               ON; -- Terminates a query when an overflow or divide-by-zero error occurs during query execution
SET ARITHIGNORE             OFF; -- Controls whether error messages are returned from overflow or divide-by-zero errors during a query
SET CURSOR_CLOSE_ON_COMMIT  OFF; -- OFF means that the server will not close cursors when you commit a transaction
SET DATEFORMAT              YMD; -- Sets the order of the month, day, and year date parts for interpreting date&time strings
SET DEADLOCK_PRIORITY       -10; -- Specifies the relative importance of the current session if deadlocked. (-10) is lowest priority
SET FMTONLY                 OFF; -- Returns only metadata to client. Used to test the response format without actually running the query
SET FORCEPLAN               OFF; -- When ON, optimizer uses FORCE ORDER + NESTED LOOP JOIN for FROM clause tables
SET IMPLICIT_TRANSACTIONS   OFF; -- When OFF, sets the connection to autocommit transaction mode
SET LOCK_TIMEOUT           1000; -- Specifies the number of milliseconds a statement waits for a lock to be released
SET NOCOUNT                  ON; -- Stops the message showing the count of rows affected by a statement or stored procedure
SET NOEXEC                  OFF; -- Compiles each query but does not execute it
SET NUMERIC_ROUNDABORT      OFF; -- Specifies the level of error reporting generated when rounding causes a loss of precision
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute
SET QUOTED_IDENTIFIER        ON; -- Causes SQL Server to follow ISO rules using quotation mark delimiting identifiers and literal strings
SET STATISTICS IO,PROFILE,TIME,XML OFF; -- Displays information on statement resource usage
SET TEXTSIZE         2147483647; -- Specifies size of BLOB returned by a SELECT statement. Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON; -- Automatically roll back the current transaction when a statement raises a run-time error

/******************************************************************************************************************************************\
 Local Procedure variables
\******************************************************************************************************************************************/
DECLARE -- Used for database cursor below ----------------------------------------------------------
        @db_name_quoted NVARCHAR(MAX) = CASE WHEN @database_name IS NULL
                                             THEN N''
                                             WHEN @database_name COLLATE Latin1_General_100_CI_AI = N'*'
                                             THEN @database_name
                                             ELSE QUOTENAME(@database_name)
                                        END
       ,@collection_DTTM DATETIME = GETDATE()
       ---------------------------------------
       ,@sql            NVARCHAR(MAX) = N'' COLLATE Latin1_General_100_CI_AI
       ,@step_exec_dttm DATETIME = GETDATE()
       ,@i              INT      = 1            -- database cursor loop counter, starts at 1
       ,@rowcount       BIGINT
       ---------------------------------------
       ,@ssms_ads       TINYINT  = (SELECT (1)
                                      FROM [sys].[dm_exec_sessions] WITH (READUNCOMMITTED)
                                     WHERE session_id = @@SPID
                                       AND (   program_name LIKE N'Microsoft SQL Server Management Studio%'
                                            OR program_name LIKE N'azdata%' --azure data studio
                                            OR program_name    = N'SQLCMD'
                                           )
                                   );


/******************************************************************************************************************************************\
 Announce the execution of the procedure
\******************************************************************************************************************************************/
IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   RAISERROR(N'Starting SQLXL_Index data collection',0,0) WITH NOWAIT;
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'MM:SS:hhh SQLXL Index Job Step',0,0) WITH NOWAIT;
   RAISERROR(N'--------- -------------------------------------------------------------------------------------',0,0) WITH NOWAIT;

   SELECT N'Watch detailed progress on the "Messages" tab if available'
       AS [Starting SQLXL_Index data collection steps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ]
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Update procedure execution start date & time
--------------------------------------------------------------------------------------------------------------------------------------------
SET @step_exec_dttm = GETDATE();

UPDATE [##SQLXL_Index_startup] WITH (TABLOCKX)
   SET collection_DTTM = @collection_DTTM;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update procedure execution start date & time'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Get instance information
\******************************************************************************************************************************************/
EXEC [##SQLXL_Instance]

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = N'    Start [sys].[dm_hadr_database_replica_states], [availability_replicas], [dm_hadr_availability_replica_states]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[dm_hadr_database_replica_states] and DMVs
 NOTE: object is created even if the instance does not support the source objects (Azure SQL DB)
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @sql            NVARCHAR(MAX) = N''                   COLLATE Latin1_General_100_CI_AI
       ,@ssms_ads       TINYINT       = 2
       ,@database_name  NVARCHAR(200) = N'WIDEWORLDIMPORTERS' COLLATE Latin1_General_100_CI_AI;
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_hadr_database_replica];
END TRY
BEGIN CATCH
END CATCH

SELECT TOP (0)
       -- [sys].[dm_hadr_database_replica_states] ---------------------------------------------------
       database_id                                 = CONVERT(INT             ,NULL)
      ,group_id                                    = CONVERT(UNIQUEIDENTIFIER,NULL)
      ,replica_id                                  = CONVERT(UNIQUEIDENTIFIER,NULL)
      ,group_database_id                           = CONVERT(UNIQUEIDENTIFIER,NULL)
      ,is_local                                    = CONVERT(BIT             ,NULL)
      ,is_primary_replica                          = CONVERT(BIT             ,NULL)
      ,synchronization_state                       = CONVERT(TINYINT         ,NULL)
      ,synchronization_state_desc                  = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
      ,is_commit_participant                       = CONVERT(BIT             ,NULL)
      ,synchronization_health                      = CONVERT(TINYINT         ,NULL)
      ,synchronization_health_desc                 = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
      ,database_state                              = CONVERT(TINYINT         ,NULL)
      ,database_state_desc                         = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
      ,is_suspended                                = CONVERT(BIT             ,NULL)
      ,suspend_reason                              = CONVERT(TINYINT         ,NULL)
      ,suspend_reason_desc                         = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
--    ,recovery_lsn                                = CONVERT(NUMERIC(25,0)   ,NULL)                          -- omitted, not used
--    ,truncation_lsn                              = CONVERT(NUMERIC(25,0)   ,NULL)                          -- omitted, not used
--    ,last_sent_lsn                               = CONVERT(NUMERIC(25,0)   ,NULL)                          -- omitted, not used
      ,last_sent_time                              = CONVERT(DATETIME        ,NULL)
--    ,last_received_lsn                           = CONVERT(NUMERIC(25,0)   ,NULL)                          -- omitted, not used
      ,last_received_time                          = CONVERT(DATETIME        ,NULL)
--    ,last_hardened_lsn                           = CONVERT(NUMERIC(25,0)   ,NULL)                          -- omitted, not used
      ,last_hardened_time                          = CONVERT(DATETIME        ,NULL)
--    ,last_redone_lsn                             = CONVERT(NUMERIC(25,0)   ,NULL)                          -- omitted, not used
      ,last_redone_time                            = CONVERT(DATETIME        ,NULL)
      ,log_send_queue_size                         = CONVERT(BIGINT          ,NULL)
      ,log_send_rate                               = CONVERT(BIGINT          ,NULL)
      ,redo_queue_size                             = CONVERT(BIGINT          ,NULL)
      ,redo_rate                                   = CONVERT(BIGINT          ,NULL)
      ,filestream_send_rate                        = CONVERT(BIGINT          ,NULL)
--    ,end_of_log_lsn                              = CONVERT(NUMERIC(25,0)   ,NULL)                          -- omitted, not used
--    ,last_commit_lsn                             = CONVERT(NUMERIC(25,0)   ,NULL)                          -- omitted, not used
      ,last_commit_time                            = CONVERT(DATETIME        ,NULL)
      ,low_water_mark_for_ghosts                   = CONVERT(BIGINT          ,NULL)
      ,secondary_lag_seconds                       = CONVERT(BIGINT          ,NULL)
--    ,quorum_commit_lsn                           = CONVERT(NUMERIC(25,0)   ,NULL)                          -- omitted, not used
      ,quorum_commit_time                          = CONVERT(DATETIME        ,NULL)
       -- [sys].[availability_replicas] -------------------------------------------------------------
      ,replica_metadata_id                         = CONVERT(INT             ,NULL)
      ,replica_server_name                         = CONVERT(NVARCHAR(256)   ,NULL) COLLATE Latin1_General_100_CI_AI
--    ,owner_sid -- varbinary(85) Security identifier (SID) registered to this server instance
      ,endpoint_url                                = CONVERT(NVARCHAR(128)   ,NULL) COLLATE Latin1_General_100_CI_AI
      ,availability_mode                           = CONVERT(TINYINT         ,NULL)
      ,availability_mode_desc                      = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
      ,failover_mode                               = CONVERT(TINYINT         ,NULL)
      ,failover_mode_desc                          = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
      ,session_timeout                             = CONVERT(INT             ,NULL)
      ,primary_role_allow_connections              = CONVERT(TINYINT         ,NULL)
      ,primary_role_allow_connections_desc         = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
      ,secondary_role_allow_connections            = CONVERT(TINYINT         ,NULL)
      ,secondary_role_allow_connections_desc       = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
      ,create_date                                 = CONVERT(DATETIME        ,NULL)
      ,modify_date                                 = CONVERT(DATETIME        ,NULL)
      ,backup_priority                             = CONVERT(INT             ,NULL)
      ,read_only_routing_url                       = CONVERT(NVARCHAR(256)   ,NULL) COLLATE Latin1_General_100_CI_AI
      ,read_write_routing_url                      = CONVERT(NVARCHAR(256)   ,NULL) COLLATE Latin1_General_100_CI_AI
      ,seeding_mode                                = CONVERT(TINYINT         ,NULL)
      ,seeding_mode_desc                           = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
       -- [sys].[dm_hadr_availability_replica_states] -----------------------------------------------
      ,role                                        = CONVERT(TINYINT         ,NULL)
      ,role_desc                                   = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
      ,operational_state                           = CONVERT(TINYINT         ,NULL)
      ,operational_state_desc                      = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
      ,connected_state                             = CONVERT(TINYINT         ,NULL)
      ,connected_state_desc                        = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
      ,recovery_health                             = CONVERT(TINYINT         ,NULL)
      ,recovery_health_desc                        = CONVERT(NVARCHAR(60)    ,NULL) COLLATE Latin1_General_100_CI_AI
      ,write_lease_remaining_ticks                 = CONVERT(BIGINT          ,NULL)
--    ,last_connect_error_number                   = CONVERT(TINYINT         ,NULL)                                  -- Omitted since unused
--    ,last_connect_error_description              = CONVERT(NVARCHAR(1024)  ,NULL) COLLATE Latin1_General_100_CI_AI -- Omitted since unused
--    ,last_connect_error_timestamp                = CONVERT(DATETIME        ,NULL)                                  -- Omitted since unused
--    ,write_lease_remaining_ticks                 = CONVERT(BIGINT          ,NULL)                                  -- Omitted since unused
--    ,current_configuration_commit_start_time_utc = CONVERT(DATETIMEOFFSET  ,NULL)                                  -- Omitted since unused
  INTO [##SQLXL_Index_sys_dm_hadr_database_replica]
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' [##SQLXL_Index_sys_dm_hadr_database_replica]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
IF  object_id(N'[sys].[dm_hadr_database_replica_states]')     IS NOT NULL -- check for object existence
AND object_id(N'[sys].[availability_replicas]')               IS NOT NULL -- check for object existence
AND object_id(N'[sys].[dm_hadr_availability_replica_states]') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
WITH newcol AS (-- columns added after SQL Server 2005. Semicolon not needed since CTE is inside IF statement
SELECT -- [sys].[dm_hadr_database_replica_states] ---------------------------------------------------
      is_primary_replica                     = CONVERT(BIT          ,NULL)
      ,secondary_lag_seconds                 = CONVERT(BIGINT       ,NULL)
--    ,quorum_commit_lsn                     = CONVERT(NUMERIC(25,0),NULL) -- omitted, not used
      ,quorum_commit_time                    = CONVERT(DATETIME     ,NULL)
       -- [sys].[availability_replicas] ------------------------------------------------------------
      ,read_write_routing_url                = CONVERT(NVARCHAR(200),NULL)
      ,seeding_mode                          = CONVERT(TINYINT      ,NULL)
      ,seeding_mode_desc                     = CONVERT(NVARCHAR(200),NULL)
       -- [sys].[dm_hadr_availability_replica_states] ----------------------------------------------
      ,write_lease_remaining_ticks                 = CONVERT(BIGINT  ,NULL)
      ,current_configuration_commit_start_time_utc = CONVERT(DATETIMEOFFSET ,NULL)
)
INSERT
  INTO [##SQLXL_Index_sys_dm_hadr_database_replica]
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        SELECT -- [sys].[dm_hadr_database_replica_states]
               database_id                           = hdrs.database_id
              ,group_id                              = hdrs.group_id
              ,replica_id                            = hdrs.replica_id
              ,group_database_id
              ,is_local                              = hdrs.is_local
              ,is_primary_replica
              ,synchronization_state
              ,synchronization_state_desc            = synchronization_state_desc            COLLATE Latin1_General_100_CI_AI
              ,is_commit_participant
              ,synchronization_health                = hdrs.synchronization_health
              ,synchronization_health_desc           = hdrs.synchronization_health_desc      COLLATE Latin1_General_100_CI_AI
              ,database_state
              ,database_state_desc                   = database_state_desc                   COLLATE Latin1_General_100_CI_AI
              ,is_suspended
              ,suspend_reason
              ,suspend_reason_desc                   = suspend_reason_desc                   COLLATE Latin1_General_100_CI_AI
        --    ,recovery_lsn                          -- omitted, not used
        --    ,truncation_lsn                        -- omitted, not used
        --    ,last_sent_lsn                         -- omitted, not used
              ,last_sent_time
        --    ,last_received_lsn                     -- omitted, not used
              ,last_received_time
        --    ,last_hardened_lsn                     -- omitted, not used
              ,last_hardened_time
        --    ,last_redone_lsn                       -- omitted, not used
              ,last_redone_time
              ,log_send_queue_size
              ,log_send_rate
              ,redo_queue_size
              ,redo_rate
              ,filestream_send_rate
        --    ,end_of_log_lsn                        -- omitted, not used
        --    ,last_commit_lsn                       -- omitted, not used
              ,last_commit_time
              ,low_water_mark_for_ghosts
              ,secondary_lag_seconds
        --    ,quorum_commit_lsn                     -- omitted, not used
              ,quorum_commit_time
               -- [sys].[availability_replicas]
              ,replica_metadata_id
              ,replica_server_name                   = replica_server_name                   COLLATE Latin1_General_100_CI_AI
        --    ,owner_sid -- varbinary(85) Security identifier (SID) registered to this server instance
              ,endpoint_url                          = endpoint_url
              ,availability_mode
              ,availability_mode_desc                = availability_mode_desc                COLLATE Latin1_General_100_CI_AI
              ,failover_mode
              ,failover_mode_desc                    = failover_mode_desc                    COLLATE Latin1_General_100_CI_AI
              ,session_timeout
              ,primary_role_allow_connections
              ,primary_role_allow_connections_desc   = primary_role_allow_connections_desc   COLLATE Latin1_General_100_CI_AI
              ,secondary_role_allow_connections
              ,secondary_role_allow_connections_desc = secondary_role_allow_connections_desc COLLATE Latin1_General_100_CI_AI
              ,create_date
              ,modify_date
              ,backup_priority
              ,read_only_routing_url                 = read_only_routing_url                 COLLATE Latin1_General_100_CI_AI
              ,read_write_routing_url                = read_write_routing_url                COLLATE Latin1_General_100_CI_AI
              ,seeding_mode
              ,seeding_mode_desc                     = seeding_mode_desc                     COLLATE Latin1_General_100_CI_AI
               -------------------------------------------------------------------------------------
               -- [sys].[dm_hadr_availability_replica_states]
               -------------------------------------------------------------------------------------
              ,role
              ,role_desc                                   = role_desc                       COLLATE Latin1_General_100_CI_AI
              ,operational_state
              ,operational_state_desc                      = operational_state_desc          COLLATE Latin1_General_100_CI_AI
              ,connected_state
              ,connected_state_desc                        = connected_state_desc            COLLATE Latin1_General_100_CI_AI
              ,recovery_health
              ,recovery_health_desc                        = recovery_health_desc            COLLATE Latin1_General_100_CI_AI
              ,write_lease_remaining_ticks
        --    ,last_connect_error_number                   -- Omitted since unused
        --    ,last_connect_error_description              -- Omitted since unused
        --    ,last_connect_error_timestamp                -- Omitted since unused
        --    ,write_lease_remaining_ticks                 -- Omitted since unused
        --    ,current_configuration_commit_start_time_utc -- Omitted since unused
          FROM [sys].[dm_hadr_database_replica_states]     AS hdrs WITH (READUNCOMMITTED)
          LEFT OUTER
          JOIN [sys].[availability_replicas]               AS ar   WITH (READUNCOMMITTED)
            ON hdrs.group_id   = ar.group_id
           AND hdrs.replica_id = ar.replica_id
          LEFT OUTER
          JOIN [sys].[dm_hadr_availability_replica_states] AS hars WITH (READUNCOMMITTED)
            ON hdrs.group_id   = hars.group_id
           AND hdrs.replica_id = hars.replica_id
           AND hdrs.is_local   = hars.is_local
        --<FUTURE> filter only selected database if only one selected
       ) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' [sys].[dm_hadr_database_replica_states]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[databases]
 Use the database_id's from this table to filter further data collection.

 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/

 In Azure SQL Database:
 ---------------------
 - from BOL: DB_ID may not return the same value as the database_id column in [sys].[databases] and
 [sys].[database_service_objectives]. These two views return database_id values that are unique within the logical server, while DB_ID
 and the database_id column in other system views return values that are unique within a single database or within an elastic pool.

 - [sys].[databases] is available in the master database and in user databases. In the master database, this view returns the
 information on the master database and all user databases on the server. In a user database, this view returns information only on
 the current database and the master database.

 - to simplify all database references to Azure SQL Database will use DB_ID()
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @sql            NVARCHAR(MAX) = N''                   COLLATE Latin1_General_100_CI_AI
       ,@ssms_ads       TINYINT       = 2
       ,@database_name  NVARCHAR(200) = N'WIDEWORLDIMPORTERS' COLLATE Latin1_General_100_CI_AI;
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_databases]
END TRY
BEGIN CATCH
END CATCH

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2008+ ---------------------------------------------------------------
       log_reuse_wait                              = CONVERT(TINYINT         ,NULL)
      ,log_reuse_wait_desc                         = CONVERT(NVARCHAR(120)   ,NULL)        COLLATE Latin1_General_100_CI_AI
      ,is_cdc_enabled                              = CONVERT(BIT             ,NULL)
      ,is_memory_optimized_elevate_to_snapshot_on  = CONVERT(BIT             ,NULL)
      -- SQL 2012+ ----------------------------------------------------------------
      ,replica_id                                  = CONVERT(UNIQUEIDENTIFIER,NULL)
      ,group_database_id                           = CONVERT(UNIQUEIDENTIFIER,NULL)
      ,default_language_lcid                       = CONVERT(SMALLINT        ,NULL)
      ,default_language_name                       = CONVERT(NVARCHAR(256)   ,NULL)        COLLATE Latin1_General_100_CI_AI
      ,default_fulltext_language_lcid              = CONVERT(INT             ,NULL)
      ,default_fulltext_language_name              = CONVERT(NVARCHAR(256)   ,NULL)        COLLATE Latin1_General_100_CI_AI
      ,is_nested_triggers_on                       = CONVERT(BIT             ,NULL)
      ,is_transform_noise_words_on                 = CONVERT(BIT             ,NULL)
      ,two_digit_year_cutoff                       = CONVERT(SMALLINT        ,NULL)
      ,containment                                 = CONVERT(TINYINT         ,NULL)
      ,containment_desc                            = CONVERT(NVARCHAR(120)   ,NULL)        COLLATE Latin1_General_100_CI_AI
      ,target_recovery_time_in_seconds             = CONVERT(INT             ,NULL)
      -- SQL 2014+ ----------------------------------------------------------------
      ,resource_pool_id                            = CONVERT(INT             ,NULL)
      ,is_auto_create_stats_incremental_on         = CONVERT(BIT             ,NULL)
      -- SQL 2014+,Azure SQL Database ---------------------------------------------
      ,delayed_durability                          = CONVERT(INT             ,NULL)
      ,delayed_durability_desc                     = CONVERT(NVARCHAR(120)   ,NULL)        COLLATE Latin1_General_100_CI_AI
      -- SQL 2016+ ----------------------------------------------------------------
      ,is_query_store_on                           = CONVERT(BIT             ,NULL)
      ,is_remote_data_archive_enabled              = CONVERT(BIT             ,NULL)
      ,is_mixed_page_allocation_on                 = CONVERT(BIT             ,NULL)
      -- SQL 2017+ ----------------------------------------------------------------
      ,is_temporal_history_retention_enabled       = CONVERT(BIT             ,NULL)
      -- SQL 2019+,Azure SQL Database ---------------------------------------------
      ,physical_database_name                      = CONVERT(NVARCHAR(128)   ,NULL)        COLLATE Latin1_General_100_CI_AI
      ,is_accelerated_database_recovery_on         = CONVERT(BIT             ,NULL)
      ,is_memory_optimized_enabled                 = CONVERT(BIT             ,NULL)
      -- SQL 2022+ ----------------------------------------------------------------
      ,is_change_feed_enabled                      = CONVERT(BIT             ,NULL)
      -- SQL 2022+ Azure SQL Edge -------------------------------------------------
      ,is_data_retention_enabled                   = CONVERT(BIT             ,NULL) -- NOTE: in BOL referred to as [is_data_retention_on]
      -- Azure Synapse Analytics Gen2 ---------------------------------------------
      ,is_result_set_caching_on                    = CONVERT(BIT             ,NULL)
      ,is_tempdb_spill_to_remote_store             = CONVERT(BIT             ,NULL)
      ,is_stale_page_detection_on                  = CONVERT(BIT             ,NULL)
      -- Azure SQL Database -------------------------------------------------------
      ,catalog_collation_type                      = CONVERT(INT             ,NULL)
      ,catalog_collation_type_desc                 = CONVERT(NVARCHAR(120)   ,NULL)        COLLATE Latin1_General_100_CI_AI
      ,is_federation_member                        = CONVERT(BIT             ,NULL)
      ,is_ledger_on                                = CONVERT(BIT             ,NULL)
)
SELECT qry.*
  INTO [##SQLXL_Index_sys_databases]
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        SELECT -------------------------------------------------------------------------------------
               -- [sys].[databases]
               -------------------------------------------------------------------------------------
               name                                        = db.name                               COLLATE Latin1_General_100_CI_AI
                                                          -- db. required since database_id also in [sys].[change_tracking_databases]
              ,database_id                                 = CAST(IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                                                                     ,DB_ID()
                                                                     ,db.database_id) AS SMALLINT)
              ,source_database_id
              ,catalog_collation_type
              ,catalog_collation_type_desc                 = catalog_collation_type_desc           COLLATE Latin1_General_100_CI_AI
              ,collation_name                              = collation_name                        COLLATE Latin1_General_100_CI_AI
              ,compatibility_level
              ,containment
              ,containment_desc                            = containment_desc                      COLLATE Latin1_General_100_CI_AI
              ,db.create_date
              ,db.replica_id
              ,default_fulltext_language_lcid               -- This value is NULL for a non-contained database
              ,default_fulltext_language_name              = default_fulltext_language_name        COLLATE Latin1_General_100_CI_AI
                                                            -- This value is NULL for a non-contained database
              ,default_language_lcid                        -- This value is NULL for a non-contained database
              ,default_language_name                       = default_language_name                 COLLATE Latin1_General_100_CI_AI
                                                            -- This value is NULL for a non-contained database
              ,delayed_durability
              ,delayed_durability_desc                     = delayed_durability_desc               COLLATE Latin1_General_100_CI_AI
              ,group_database_id
              ,is_accelerated_database_recovery_on
              ,is_ansi_nulls_on
              ,is_ansi_null_default_on
              ,is_ansi_padding_on
              ,is_ansi_warnings_on
              ,is_arithabort_on
              ,is_auto_close_on
              ,is_auto_create_stats_incremental_on
              ,is_auto_create_stats_on
              ,is_auto_shrink_on
              ,is_auto_update_stats_async_on
              ,is_auto_update_stats_on
              ,is_broker_enabled
              ,is_cdc_enabled
              ,is_change_feed_enabled
              ,is_cleanly_shutdown
              ,is_concat_null_yields_null_on
              ,is_cursor_close_on_commit_on
              ,is_data_retention_enabled
              ,is_date_correlation_on
              ,is_db_chaining_on
              ,is_distributor
              ,is_encrypted
              ,is_federation_member
              ,is_fulltext_enabled
              ,is_honor_broker_priority_on
              ,is_in_standby
              ,is_ledger_on
              ,is_local_cursor_default
              ,is_master_key_encrypted_by_server
              ,is_memory_optimized_elevate_to_snapshot_on
              ,is_memory_optimized_enabled
              ,is_merge_published
              ,is_mixed_page_allocation_on
              ,is_nested_triggers_on                        -- This value is NULL for a non-contained database
              ,is_numeric_roundabort_on
              ,is_parameterization_forced
              ,is_published
              ,is_query_store_on
              ,is_quoted_identifier_on
              ,is_read_committed_snapshot_on
              ,is_read_only
              ,is_recursive_triggers_on
              ,is_remote_data_archive_enabled
              ,is_result_set_caching_on
              ,is_stale_page_detection_on
              ,is_subscribed
              ,is_supplemental_logging_enabled
              ,is_sync_with_backup
              ,is_tempdb_spill_to_remote_store
              ,is_temporal_history_retention_enabled
              ,is_transform_noise_words_on                  -- This value is NULL for a non-contained database
              ,is_trustworthy_on
              ,log_reuse_wait
              ,log_reuse_wait_desc                         = log_reuse_wait_desc                   COLLATE Latin1_General_100_CI_AI
        --    ,owner_sid -- varbinary(85) SID (Security-Identifier) of the external owner of the database
              ,page_verify_option
              ,page_verify_option_desc                     = page_verify_option_desc               COLLATE Latin1_General_100_CI_AI
              ,physical_database_name                      = physical_database_name                COLLATE Latin1_General_100_CI_AI
              ,recovery_model
              ,recovery_model_desc                         = recovery_model_desc                   COLLATE Latin1_General_100_CI_AI
              ,resource_pool_id
              ,service_broker_guid
              ,snapshot_isolation_state
              ,snapshot_isolation_state_desc               = snapshot_isolation_state_desc         COLLATE Latin1_General_100_CI_AI
              ,state
              ,state_desc                                  = state_desc                            COLLATE Latin1_General_100_CI_AI
              ,target_recovery_time_in_seconds
              ,two_digit_year_cutoff
              ,user_access
              ,user_access_desc                            = user_access_desc                      COLLATE Latin1_General_100_CI_AI
               -------------------------------------------------------------------------------------
               -- [DATABASEPROPERTYEX]
               -- <FUTURE> add below to diagnostics & display
               -------------------------------------------------------------------------------------
             --Collation                                    -- included above
              ,ComparisonStyle                      = CAST(DATABASEPROPERTYEX(db.name,N'ComparisonStyle'                     ) AS INT)
              ,Edition                              = CAST(DATABASEPROPERTYEX(db.name,N'Edition'                             ) AS NVARCHAR( 64))
             --IsAnsiNullDefault                            -- included above
             --IsAnsiNullsEnabled                           -- included above
             --IsAnsiPaddingEnabled                         -- included above
             --IsAnsiWarningsEnabled                        -- included above
             --IsArithmeticAbortEnabled                     -- included above
             --IsAutoClose                                  -- included above
             --IsAutoCreateStatistics                       -- included above
             --IsAutoCreateStatisticsIncremental            -- included above
             --IsAutoShrink                                 -- included above
             --IsAutoUpdateStatistics                       -- included above
              ,IsClone                              = CAST(DATABASEPROPERTYEX(db.name,N'IsClone'                             ) AS INT)
             --IsCloseCursorsOnCommitEnabled                -- included above
              ,IsDatabaseSuspendedForSnapshotBackup = CAST(DATABASEPROPERTYEX(db.name,N'IsDatabaseSuspendedForSnapshotBackup') AS INT)
             --IsFulltextEnabled                            -- included above
             --IsInStandBy                                  -- included above
             --IsLocalCursorsDefault                        -- included above
             --IsMemoryOptimizedElevateToSnapshotEnabled    -- included above
             --IsMergePublished                             -- included above
             --IsNullConcat                                 -- included above
             --IsNumericRoundAbortEnabled                   -- included above
             --IsParameterizationForced                     -- included above
             --IsPublished                                  -- included above
             --IsQuotedIdentifiersEnabled                   -- included above
             --IsRecursiveTriggersEnabled                   -- included above
             --IsSubscribed                                 -- included above
             --IsSyncWithBackup                             -- included above
              ,IsTornPageDetectionEnabled           = CAST(DATABASEPROPERTYEX(db.name,N'IsTornPageDetectionEnabled'          ) AS INT)
              ,IsVerifiedClone                      = CAST(DATABASEPROPERTYEX(db.name,N'IsVerifiedClone'                     ) AS INT)
              ,IsXTPSupported                       = CAST(DATABASEPROPERTYEX(db.name,N'IsXTPSupported'                      ) AS INT)
              ,LastGoodCheckDbTime                  = CAST(DATABASEPROPERTYEX(db.name,N'LastGoodCheckDbTime'                 ) AS DATETIME)
              ,WindowsLCID                          = CAST(DATABASEPROPERTYEX(db.name,N'LCID'                                ) AS INT)
              ,MaxSizeInBytes                       = CAST(DATABASEPROPERTYEX(db.name,N'MaxSizeInBytes'                      ) AS BIGINT)
             --Recovery                                     -- included above
              ,ReplicaID                            = CAST(DATABASEPROPERTYEX(db.name,N'ReplicaID'                           ) AS NVARCHAR(128))
              ,ServiceObjective                     = CAST(DATABASEPROPERTYEX(db.name,N'ServiceObjective'                    ) AS NVARCHAR( 32))
              ,ServiceObjectiveId                   = CAST(DATABASEPROPERTYEX(db.name,N'ServiceObjectiveId'                  ) AS UNIQUEIDENTIFIER)
              ,SQLSortOrder                         = CAST(DATABASEPROPERTYEX(db.name,N'SQLSortOrder'                        ) AS INT)
              ,Status                               = CAST(DATABASEPROPERTYEX(db.name,N'Status'                              ) AS NVARCHAR(128))
              ,Updateability                        = CAST(DATABASEPROPERTYEX(db.name,N'Updateability'                       ) AS NVARCHAR(128))
              ,UserAccess                           = CAST(DATABASEPROPERTYEX(db.name,N'UserAccess'                          ) AS NVARCHAR(128))
              ,[Version]                            = CAST(DATABASEPROPERTYEX(db.name,N'Version'                             ) AS INT)
               -------------------------------------------------------------------------------------
               -- [sys].[change_tracking_databases]
               -------------------------------------------------------------------------------------
              ,is_auto_cleanup_on
              ,retention_period
              ,retention_period_units_desc                 = retention_period_units_desc           COLLATE Latin1_General_100_CI_AI
              ,retention_period_units
              --------------------------------------------------------------------------------------
              -- Computed/derived values
              --------------------------------------------------------------------------------------
              ,clr_trigger_CNT                             = CONVERT(INT   ,0)
              ,sql_trigger_CNT                             = CONVERT(INT   ,0)
              ,is_instead_of_trigger_CNT                   = CONVERT(INT   ,0)

          FROM [sys].[databases]                 AS db WITH (READUNCOMMITTED)
          LEFT OUTER
          JOIN [sys].[change_tracking_databases] AS c  WITH (READUNCOMMITTED)
            ON IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                  ,c.database_id
                  ,db.database_id) = c.database_id
         WHERE NOT -- special case for running on Azure SQL Database
                   (    CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                    AND db.name IN (N'master',N'tempdb')
                   )

       ) AS qry -- from CROSS APPLY
 WHERE 1 = 1    -- simplifies adding additional clauses for testing
   AND (   (    @database_name COLLATE Latin1_General_100_CI_AI = N'' -- No selection made, all "user" databases
            AND (   LOWER(qry.name)
                     NOT IN (N'dbatools'
                            ,N'dbadmin'
                            ,N'dbmaintenance'
                            ,N'distribution'
                            ,N'dwconfiguration'
                            ,N'dwdiagnostics'
                            ,N'dwqueue'
                            ,N'master'
                            ,N'managementdatawarehouse'
                            ,N'model'
                            ,N'msdb'
                            ,N'ssisdb'
                            ,N'tempdb'
                            )
                AND LOWER(qry.name) NOT LIKE LOWER(N'reportserver%')
                AND LOWER(qry.name) NOT LIKE LOWER(N'rdsadmin%'    )
               )
           )
        OR @database_name COLLATE Latin1_General_100_CI_AI = qry.name -- 1 database requested
        OR @database_name COLLATE Latin1_General_100_CI_AI = N'*'      -- all databases including system
       )
   AND NOT (    CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL DB single database
            AND qry.name = N'Master'
           )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

SET @rowcount = @@ROWCOUNT;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Check if at least 1 database to be collected
--------------------------------------------------------------------------------------------------------------------------------------------
IF @rowcount = 0 BEGIN -- no database found to collect
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'*** No database(s) to process. Exiting ***',0,0) WITH NOWAIT;
   RETURN 0
END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' [sys].[databases],[change_tracking_databases] - '
            + CAST(@rowcount AS NVARCHAR(11))
            + N' database(s) found'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect Missing Index information
 Includes [sys].[dm_db_missing_index_details], [sys].[dm_db_missing_index_groups], [sys].[dm_db_missing_index_group_stats]
 Only gathering Missing indexes for requested databases
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT OFF
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name()) COLLATE Latin1_General_100_CI_AI
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_db_missing_index_details];
END TRY
BEGIN CATCH
END CATCH

SELECT database_id               = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                                      ,DB_ID()
                                      ,mid.database_id)
      ,mid.object_id
      ,group_handle              = mig.index_group_handle  -- used since record can be missing from [sys].[dm_db_missing_index_group_stats]
      ,mid.index_handle
      ,statement                 = mid.statement                COLLATE Latin1_General_100_CI_AI
      ,equality_columns          = mid.equality_columns         COLLATE Latin1_General_100_CI_AI
      ,inequality_columns        = mid.inequality_columns       COLLATE Latin1_General_100_CI_AI
      ,included_columns          = mid.included_columns         COLLATE Latin1_General_100_CI_AI
      ,migs.unique_compiles
      ,migs.user_seeks
      ,migs.user_scans
      ,migs.last_user_seek
      ,migs.last_user_scan
      ,migs.avg_total_user_cost
      ,migs.avg_user_impact
      ,migs.system_seeks
      ,migs.system_scans
      ,migs.last_system_seek
      ,migs.last_system_scan
      ,migs.avg_total_system_cost
      ,migs.avg_system_impact
      ----------------------------------------------------------------------------------------------
      -- Computed/derived values
      ----------------------------------------------------------------------------------------------
      ,mix_Advantage_AMT = 1.0 * ( (migs.user_seeks + (migs.user_scans * 4))      -- scans weighted heavier
                                  * migs.avg_total_user_cost
                                  * migs.avg_user_impact
                                 )                                                -- if values NULL retain NULL vale
                         + 1.0 * ( (migs.system_seeks + (migs.system_scans * 4))  -- scans weighted heavier
                                  * migs.avg_total_system_cost
                                  * migs.avg_system_impact
                                 )                                                -- if values NULL retain NULL vale
      ,mix_advantage_weighted_AMT = CAST(NULL AS FLOAT)

  INTO [##SQLXL_Index_sys_dm_db_missing_index_details]

  FROM [##SQLXL_Index_sys_databases]           AS db
  JOIN [sys].[dm_db_missing_index_details]     AS mid  WITH (READUNCOMMITTED)
    ON db.database_id         = mid.database_id

  LEFT OUTER
  JOIN [sys].[dm_db_missing_index_groups]      AS mig  WITH (READUNCOMMITTED)
    ON mid.index_handle       = mig.index_handle

  LEFT OUTER
  JOIN [sys].[dm_db_missing_index_group_stats] AS migs WITH (READUNCOMMITTED)
    ON mig.index_group_handle = migs.group_handle
 WHERE mid.statement NOT LIKE N'%##SQLXL%'                  -- omit temporary SQLXL objects
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Instance [sys].[dm_db_missing_index_details] - includes index groups, group_stats'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_db_missing_index_columns] limited to selected databases in [##SQLXL_Index_sys_dm_db_missing_index_details]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_db_missing_index_columns];
END TRY
BEGIN CATCH
END CATCH

SELECT ---------------------------------------------------------------------------------------------
       -- [sys].[dm_db_missing_index_details]
       ---------------------------------------------------------------------------------------------
       mid.database_id
      ,mid.object_id
      ,mid.group_handle
       ---------------------------------------------------------------------------------------------
       -- [sys].[dm_db_missing_index_columns]
       ---------------------------------------------------------------------------------------------
      ,mic.column_id
      ,column_name      = mic.column_name              COLLATE Latin1_General_100_CI_AI
      ,column_usage     = mic.column_usage             COLLATE Latin1_General_100_CI_AI
  INTO [##SQLXL_Index_sys_dm_db_missing_index_columns]
  FROM [##SQLXL_Index_sys_dm_db_missing_index_details] AS mid
 CROSS
 APPLY [sys].[dm_db_missing_index_columns] (mid.index_handle) mic
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' [sys].[dm_db_missing_index_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start [sys].[dm_db_missing_index_group_stats] - Most read query & query_text - Azure,SQL 2019',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_db_missing_index_group_stats_query] to [##SQLXL_Index_sql_definitions]
 SQL 2019+, Azure SQL Database, Azure SQL Managed Instance
 Only get 1 query for each missing index, based on the query with highest "benefit": cost * impact *(seeks + scans)
      and get the details for the plan with the most total reads in [sys].[dm_exec_query_stats] (if more than 1 found)

 Note from Brent Ozar:
 "The DMV is only supposed to have 600 rows in it
  If it's got more, they could see performance slowdowns from flushing out buffer and query cache due to over large memory grant"
  https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/issues/3085
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
IF @i = 1 BEGIN  -- first time through, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sql_definitions];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

SELECT TOP (0)
       database_id             = CONVERT(INT,NULL)
      ,object_id               = CONVERT(INT,NULL)
      ,group_handle            = CONVERT(INT,NULL)
      ,uses_ansi_nulls         = CONVERT(BIT,NULL)
      ,uses_quoted_identifier  = CONVERT(BIT,NULL)
      ,is_schema_bound         = CONVERT(BIT,NULL)
      ,uses_database_collation = CONVERT(BIT,NULL)
      ,is_recompiled           = CONVERT(BIT,NULL)
      ,null_on_null_input      = CONVERT(BIT,NULL)
      ,execute_as_principal_id = CONVERT(INT,NULL)
      ,uses_native_compilation = CONVERT(BIT,NULL)
      ,is_inlineable           = CONVERT(BIT,NULL)
      ,inline_type             = CONVERT(BIT,NULL)
      ,definition              = CONVERT(NVARCHAR(4000),NULL) COLLATE Latin1_General_100_CI_AI
  INTO [##SQLXL_Index_sql_definitions];

--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N'[sys].[dm_db_missing_index_group_stats_query]') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
BEGIN
   INSERT
     INTO [##SQLXL_Index_sql_definitions] WITH (TABLOCKX)
   SELECT database_id             = mix_qry.database_id
         ,object_id               = NULL
         ,group_handle            = mix_qry.group_handle
         ,uses_ansi_nulls         = NULL
         ,uses_quoted_identifier  = NULL
         ,is_schema_bound         = NULL
         ,uses_database_collation = NULL
         ,is_recompiled           = NULL
         ,null_on_null_input      = NULL
         ,execute_as_principal_id = NULL
         ,uses_native_compilation = NULL
         ,is_inlineable           = NULL
         ,inline_type             = NULL
         ,definition              = CONVERT(NVARCHAR(4000)
                                           ,LEFT(SUBSTRING(st.text
                                                          ,(mix_qry.last_statement_start_offset / 2) + 1
                                                          ,((IIF(mix_qry.last_statement_end_offset = -1
                                                                ,DATALENGTH(st.text)
                                                                ,mix_qry.last_statement_end_offset)
                                                             - mix_qry.last_statement_start_offset
                                                            )/2) + 1
                                                          )
                                                ,4000)
                                           ) COLLATE Latin1_General_100_CI_AI
     FROM (-- find sample missing index query with the highest composite score
           SELECT mix_qry.*
             FROM (-- get list of sample missing index queries & compute composite score
                   SELECT mix_dtl.database_id
                         ,mix_qry.group_handle
                         ,mix_qry.query_hash
                         ,mix_qry.last_sql_handle
                         ,mix_qry.last_statement_start_offset
                         ,mix_qry.last_statement_end_offset
                         ,rn = ROW_NUMBER() OVER (PARTITION BY mix_qry.group_handle
                                                      ORDER BY ( mix_qry.avg_total_user_cost
                                                               * mix_qry.avg_user_impact)
                                                               * (   mix_qry.user_seeks
                                                                  + (mix_qry.user_scans * 4.0)
                                                                 ) DESC  -- scans count 4X seeks
                                                 )
                    FROM [sys].[dm_db_missing_index_group_stats_query]   AS mix_qry WITH (READUNCOMMITTED)
                    JOIN [##SQLXL_Index_sys_dm_db_missing_index_details] AS mix_dtl
                      ON mix_qry.group_handle = mix_dtl.group_handle  -- Only gather missing indexes queries for requested databases
                  ) AS mix_qry
             WHERE mix_qry.rn = 1
          ) AS mix_qry

/* <FUTURE> Get query plan -----------------------------------------------------------------------------------------------------------------
    CROSS
    APPLY (-- get top query plan from [sys].[dm_exec_query_stats] for query_hash with the most reads and worker time if in-memory (XTP)
           SELECT TOP (1)
                  qs.plan_handle
             FROM [sys].[dm_exec_query_stats] AS qs WITH (READUNCOMMITTED)
            WHERE mix_qry.query_hash = qs.query_hash
            ORDER BY
                  (qs.total_physical_reads + qs.total_logical_reads) DESC -- total reads. Will always be 0 querying a memory-optimized table
                 ,qs.total_worker_time                               DESC
          ) AS qs
    OUTER
    APPLY [sys].[dm_exec_query_plan] (qs.plan_handle)     AS qp
\* <FUTURE> Get query plan -------------------------------------------------------------------------------------------------------------- */

    CROSS
    APPLY [sys].[dm_exec_sql_text] (mix_qry.last_sql_handle) AS st
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

END; -- IF object_id(N'[sys].[dm_db_missing_index_group_stats_query]') IS NOT NULL

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' [sys].[dm_db_missing_index_group_stats] - Most read query & query_text - Azure,SQL 2019'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect index usage & operational stats
 Collect [sys].[dm_db_index_usage_stats],
 ---------------------------------------------------------------------
 In Azure SQL Database, dynamic management views cannot expose information that would impact database containment or expose information
 about other databases the user has access to. To avoid exposing this information, every row that contains data that doesn't belong to the
 connected tenant is filtered out.
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_db_index_usage_stats];
END TRY
BEGIN CATCH
END CATCH

SELECT qry.*
  INTO [##SQLXL_Index_sys_dm_db_index_usage_stats]
  FROM (-- columns from [sys].[dm_db_index_usage_stats]
SELECT database_id       = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                              ,DB_ID()
                              ,ius.database_id)
      ,ius.object_id
      ,ius.index_id
      ,User_total_CNT    = ius.user_seeks + ius.user_scans + ius.user_lookups + ius.user_updates
      ,user_read_CNT     = ius.user_seeks + ius.user_scans + ius.user_lookups
      ,ius.user_seeks
      ,ius.user_scans
      ,ius.user_lookups
      ,ius.user_updates
      ,ius.system_seeks
      ,ius.system_scans
      ,ius.system_lookups
      ,ius.system_updates
      ,ius.last_user_seek
      ,ius.last_user_scan
      ,ius.last_user_lookup
      ,ius.last_user_update
      ,ius.last_system_seek
      ,ius.last_system_scan
      ,ius.last_system_lookup
      ,ius.last_system_update
  FROM [sys].[dm_db_index_usage_stats] AS ius WITH (READUNCOMMITTED)
  JOIN [##SQLXL_Index_sys_databases]   AS d   -- only get usage statistice from databases we are looking for
    ON ius.database_id = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                            ,DB_ID()
                            ,d.database_id)
) AS qry
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' [sys].[dm_db_index_usage_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_db_index_operational_stats]
 Rows are returned at the partition_number level even if only the database_id passed
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @ssms_ads  TINYINT        = 1
       ,@msg       NVARCHAR(1000)
       ,@step_exec_dttm DATETIME       = GETDATE();
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_db_index_operational_stats];
END TRY
BEGIN CATCH
END CATCH

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT version_generated_off_row         = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,ghost_version_inrow               = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,ghost_version_off_row             = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,insert_over_ghost_version_inrow   = CONVERT(BIGINT,NULL) -- SQL 2016+
      ,insert_over_ghost_version_off_row = CONVERT(BIGINT,NULL) -- SQL 2016+
)
SELECT qry.*
  INTO [##SQLXL_Index_sys_dm_db_index_operational_stats]
  FROM newcol
 CROSS
 APPLY (-- syntax used to apply cte new columns above
        -- multiple CROSS APPLYs required to avoid error "Aggregates on the right side of an APPLY cannot reference columns
        -- from the left side" referencing  columns from the "newcol" CTE
        SELECT -- columns from [sys].[dm_db_index_operational_stats]
               database_id                           = db.database_id
              ,ios.object_id
              ,ios.index_id
              ---------------------------------------------------------------------------------------
              ,partition_CNT                         = COUNT_BIG(DISTINCT(ios.partition_number      ))
              ---------------------------------------------------------------------------------------
              ,leaf_insert_CNT                       = SUM(ios.leaf_insert_count                 )
              ,leaf_update_CNT                       = SUM(ios.leaf_update_count                 )
              ,leaf_delete_CNT                       = SUM(ios.leaf_delete_count                 )
              ,leaf_ghost_CNT                        = SUM(ios.leaf_ghost_count                  )
              ----------------------------------
              ,nonleaf_insert_CNT                    = SUM(ios.nonleaf_insert_count              )
              ,nonleaf_delete_CNT                    = SUM(ios.nonleaf_delete_count              )
              ,nonleaf_update_CNT                    = SUM(ios.nonleaf_update_count              )
              ----------------------------------
              ,leaf_allocation_CNT                   = SUM(ios.leaf_allocation_count             ) -- For index, allocation is a page split
              ,nonleaf_allocation_CNT                = SUM(ios.nonleaf_allocation_count          ) -- 0 = Heap or columnstore
              ----------------------------------
              ,leaf_page_merge_CNT                   = SUM(ios.leaf_page_merge_count             ) -- 0 = Heap or columnstore
              ,nonleaf_page_merge_CNT                = SUM(ios.nonleaf_page_merge_count          ) -- 0 = Heap or columnstore
              ----------------------------------
              ,range_scan_CNT                        = SUM(ios.range_scan_count                  )
              ,singleton_lookup_CNT                  = SUM(ios.singleton_lookup_count            )
              ,forwarded_fetch_CNT                   = SUM(ios.forwarded_fetch_count             )
              ,lob_fetch_in_pages                    = SUM(ios.lob_fetch_in_pages                )
              ,lob_fetch_in_bytes                    = SUM(ios.lob_fetch_in_bytes                )
              ,lob_orphan_create_CNT                 = SUM(ios.lob_orphan_create_count           )
              ,lob_orphan_insert_CNT                 = SUM(ios.lob_orphan_insert_count           )
              ,row_overflow_fetch_in_pages           = SUM(ios.row_overflow_fetch_in_pages       )
              ,row_overflow_fetch_in_bytes           = SUM(ios.row_overflow_fetch_in_bytes       )
              ,column_value_push_off_row_CNT         = SUM(ios.column_value_push_off_row_count   )
              ,column_value_pull_in_row_CNT          = SUM(ios.column_value_pull_in_row_count    )
              ----------------------------------
              ,row_lock_CNT                          = SUM(ios.row_lock_count                    )
              ,row_lock_wait_CNT                     = SUM(ios.row_lock_wait_count               )
              ,row_lock_wait_MS                      = SUM(ios.row_lock_wait_in_ms               )
              ----------------------------------
              ,page_lock_CNT                         = SUM(ios.page_lock_count                   )
              ,page_lock_wait_CNT                    = SUM(ios.page_lock_wait_count              )
              ,page_lock_wait_MS                     = SUM(ios.page_lock_wait_in_ms              )
              ----------------------------------
              ,lock_promotion_attempt_CNT            = SUM(ios.index_lock_promotion_attempt_count)
              ,lock_promotion_CNT                    = SUM(ios.index_lock_promotion_count        )
              ----------------------------------
              ,page_latch_wait_CNT                   = SUM(ios.page_latch_wait_count             )
              ,tree_page_latch_wait_CNT              = SUM(ios.tree_page_latch_wait_count        )
              ,page_latch_wait_MS                    = SUM(ios.page_latch_wait_in_ms             )
              ,tree_page_latch_wait_MS               = SUM(ios.tree_page_latch_wait_in_ms        ) -- This is always 0 for a heap.
              ,page_io_latch_wait_CNT                = SUM(ios.page_io_latch_wait_count          )
              ,tree_page_io_latch_wait_CNT           = SUM(ios.tree_page_io_latch_wait_count     ) -- This is always 0 for a heap
              ,page_io_latch_wait_MS                 = SUM(ios.page_io_latch_wait_in_ms          )
              ,tree_page_io_latch_wait_MS            = SUM(ios.tree_page_io_latch_wait_in_ms     ) -- This is always 0 for a heap.
              ----------------------------------
              ,page_compression_attempt_CNT          = SUM(ios.page_compression_attempt_count    )
              ,page_compression_success_CNT          = SUM(ios.page_compression_success_count    )
              ----------------------------------
              ,version_generated_off_row_CNT         = SUM(COALESCE(version_generated_off_row        ,0))
              ,ghost_version_inrow_CNT               = SUM(COALESCE(ghost_version_inrow              ,0))
              ,ghost_version_off_row_CNT             = SUM(COALESCE(ghost_version_off_row            ,0))
              ,insert_over_ghost_version_inrow_CNT   = SUM(COALESCE(insert_over_ghost_version_inrow  ,0))
              ,insert_over_ghost_version_off_row_CNT = SUM(COALESCE(insert_over_ghost_version_off_row,0))
          FROM [##SQLXL_Index_sys_databases] AS db -- limit operational statistics to the databases we are looking for
         CROSS
         APPLY (-- required to avoid error "Aggregates on the right side of an APPLY cannot reference columns from the left side"
                -- referencing columns from the "newcol" CTE
                -- NOTE: In Azure SQL DB, the values are unique within a single database or an elastic pool, but not within a logical server.
                SELECT database_id,object_id,index_id
                      ,partition_number
                      ,leaf_insert_count
                      ,leaf_delete_count
                      ,leaf_update_count
                      ,leaf_ghost_count
                      ,nonleaf_insert_count
                      ,nonleaf_delete_count
                      ,nonleaf_update_count
                      ,leaf_allocation_count
                      ,nonleaf_allocation_count
                      ,leaf_page_merge_count
                      ,nonleaf_page_merge_count
                      ,range_scan_count
                      ,singleton_lookup_count
                      ,forwarded_fetch_count
                      ,lob_fetch_in_pages
                      ,lob_fetch_in_bytes
                      ,lob_orphan_create_count
                      ,lob_orphan_insert_count
                      ,row_overflow_fetch_in_pages
                      ,row_overflow_fetch_in_bytes
                      ,column_value_push_off_row_count
                      ,column_value_pull_in_row_count
                      ,row_lock_count
                      ,row_lock_wait_count
                      ,row_lock_wait_in_ms
                      ,page_lock_count
                      ,page_lock_wait_count
                      ,page_lock_wait_in_ms
                      ,index_lock_promotion_attempt_count
                      ,index_lock_promotion_count
                      ,page_latch_wait_count
                      ,page_latch_wait_in_ms
                      ,page_io_latch_wait_count
                      ,page_io_latch_wait_in_ms
                      ,tree_page_latch_wait_count
                      ,tree_page_latch_wait_in_ms
                      ,tree_page_io_latch_wait_count
                      ,tree_page_io_latch_wait_in_ms
                      ,page_compression_attempt_count
                      ,page_compression_success_count
                      ,version_generated_off_row           -- SQL 2016+
                      ,ghost_version_inrow                 -- SQL 2016+
                      ,ghost_version_off_row               -- SQL 2016+
                      ,insert_over_ghost_version_inrow     -- SQL 2016+
                      ,insert_over_ghost_version_off_row   -- SQL 2016+
                  FROM [sys].[dm_db_index_operational_stats] (db.database_id
                                                             ,NULL
                                                             ,NULL
                                                             ,NULL
                                                             )
               ) AS ios
         GROUP BY
               db.database_id
              ,ios.object_id
              ,ios.index_id
       ) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' [sys].[dm_db_index_operational_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[dm_os_buffer_descriptors]
 NOTE: SQL 2022+ columns [op_history],[buffer_address],[latch_address] not found in BOL a/o 4/1/25
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_sys_dm_os_buffer_descriptors];
END TRY
BEGIN CATCH
END CATCH

SELECT database_id = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                        ,DB_ID()
                        ,d.database_id)
      ,bd.allocation_unit_id
      ,bd.row_CNT
      ,bd.buffer_total_KB
      ,bd.buffer_free_KB
      ,bd.read_microsec_AVG
  INTO [##SQLXL_Index_sys_dm_os_buffer_descriptors]
  FROM [##SQLXL_Index_sys_databases] AS d
  JOIN (-- aggregate columns from [sys].[dm_os_buffer_descriptors]. No speed advantage using an APPLY
        SELECT database_id        = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                                       ,DB_ID()
                                       ,bd.database_id)
              ,bd.allocation_unit_id
              ,row_CNT            = SUM(CAST(COALESCE(bd.row_count,0) AS BIGINT))
              ,buffer_total_KB    = SUM(CAST(8.0 AS BIGINT))                                         -- each page is 8KB
              ,buffer_free_KB     = SUM(CAST(COALESCE(bd.free_space_in_bytes,0) AS BIGINT)) / 8192.0 -- 1KB = 8192 bytes
              ,read_microsec_AVG  = AVG(COALESCE(bd.read_microsec,0))
          FROM [sys].[dm_os_buffer_descriptors] AS bd WITH (READUNCOMMITTED)
         GROUP BY
               IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                  ,DB_ID()
                  ,bd.database_id)
              ,bd.allocation_unit_id
       ) AS bd
    ON bd.database_id = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 5 -- Azure SQL Database
                           ,DB_ID()
                           ,d.database_id)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' [sys].[dm_os_buffer_descriptors]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 End of capturing Instance-level information status notification
\******************************************************************************************************************************************/
IF @ssms_ads > 0
BEGIN -- display status to SSMS/ADS Messages tab
   SET @sql = N'SELECT N''Completed collecting Instance-level information'''
            + N' AS [Elapsed Time '
            + [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@collection_DTTM,GETDATE()),0))
            + N' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]'
   EXECUTE (@sql);
END

/*##########################################################################################################################################
 *Task* Cursor through Databases
############################################################################################################################################
## Loop through requested databases for database-specific information                                                                     ##
## Parameter @database entered above:                                                                                                     ##
##   -- Asterisk ("*") for all databases including system                                                                                 ##
##   -- NULL for all user (non-system) databases                                                                                          ##
##   -- "database name" for a single database                                                                                             ##
##                                                                                                                                        ##
## ***DEVELOPER NOTE ***                                                                                                                  ##
## TRY_CONVERT & TRY_CAST DO NOT WORK if DATABASE COMPATIBILITY level is less than 11 (SQL 2012) !                                        ##
##                ------------                                                                                                            ##
##                                                                                                                                        ##
## Omitted Sources & reasons:                                                                                                             ##
## sys dm_exec_function_stats       BOL "does not return information about table valued functions,                                        ##
##                                       and about scalar functions that are inlined with Scalar UDF Inlining"                            ##
## sys dm_db_xtp_hash_index_stats   BOL "useful for understanding and tuning the bucket counts. It can also be used to detect cases       ##
##                                       where the index key has many duplicates.                                                         ##
##                                       Note - SCANS THE ENTIRE TABLE!"                                                                  ##
############################################################################################################################################
##########################################################################################################################################*/

/******************************************************************************************************************************************\
 Create local variables & database cursor
 List of databases to collect was previously filtered when creating [##SQLXL_Index_sys_databases]
\******************************************************************************************************************************************/
DECLARE db_crsr CURSOR LOCAL FAST_FORWARD FOR
/*** LOCAL TESTING ***
DECLARE @database_name NVARCHAR(MAX) = N'WideWorldImporters'
--*/
SELECT database_name_quoted = QUOTENAME(db.name)
  FROM [##SQLXL_Index_sys_databases] AS db
 WHERE db.user_access_desc = N'MULTI_USER'
   AND db.state_desc       = N'ONLINE'
 ORDER BY
       db.database_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

OPEN db_crsr;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Opened Database cursor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

WHILE @i > 0
BEGIN -- Loop through database cursor
/******************************************************************************************************************************************\
 Start of database cursor loop. Grab database-specific information. Built above in [##SQLXL_Index_sys_databases].
 See list of excluded system databases in that script element.
\******************************************************************************************************************************************/
FETCH NEXT
 FROM db_crsr
 INTO @db_name_quoted;

IF @@FETCH_STATUS <> 0 BREAK;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' -- Database: ' + @db_name_quoted
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 SQL 2016+
 *Task* Collect database properties & configurations
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
IF @i = 1 BEGIN -- first time through database loop, create new objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_database_scoped_configurations];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id         = CONVERT(INT           ,NULL)
         ,configuration_id    = CONVERT(INT           ,NULL)
         ,name                = CONVERT(NVARCHAR(200) ,NULL)   COLLATE Latin1_General_100_CI_AI
         ,value               = CONVERT(NVARCHAR(1000),NULL)   COLLATE Latin1_General_100_CI_AI
         ,value_for_secondary = CONVERT(NVARCHAR(1000),NULL)   COLLATE Latin1_General_100_CI_AI
         ,is_value_default    = CONVERT(BIT           ,NULL)
     INTO [##SQLXL_Index_sys_database_scoped_configurations]
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_database_scoped_configurations]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1 BEGIN

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[database_scoped_configurations]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
BEGIN
   WITH newcol AS (-- columns added after SQL Server 2005
   SELECT is_value_default = CONVERT(BIT,NULL) -- added SQL 2017
   )
   INSERT
     INTO [##SQLXL_Index_sys_database_scoped_configurations] WITH (TABLOCKX)
   SELECT qry.*
     FROM newcol
    CROSS
    APPLY (-- syntax used to include cte with new columns above
           -- add columns from [sys].[database_scoped_configurations]
   SELECT database_id         = DB_ID()
         ,configuration_id
         ,name                = name                                         COLLATE Latin1_General_100_CI_AI
         ,value               = CONVERT(NVARCHAR(1000),value              )  COLLATE Latin1_General_100_CI_AI  -- from SQLVARIANT
         ,value_for_secondary = CONVERT(NVARCHAR(1000),value_for_secondary)  COLLATE Latin1_General_100_CI_AI  -- from SQLVARIANT
         ,is_value_default
     FROM [sys].[database_scoped_configurations] WITH (READUNCOMMITTED) -- SQL Server 2016 (13.x) and later
   ) AS qry -- from CROSS APPLY
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);
END'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_database_scoped_configurations]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[database_scoped_configurations] - SQL 2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 SQL 2017+ Collect [sys].[database_automatic_tuning_options]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, create new objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_database_automatic_tuning_options];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id        = CAST(NULL AS BIGINT)
         ,name               = CAST(NULL AS NVARCHAR(128))     COLLATE Latin1_General_100_CI_AI
         ,desired_state      = CAST(NULL AS SMALLINT)
         ,desired_state_desc = CAST(NULL AS NVARCHAR(60))      COLLATE Latin1_General_100_CI_AI
         ,actual_state       = CAST(NULL AS SMALLINT)
         ,actual_state_desc  = CAST(NULL AS NVARCHAR(60))      COLLATE Latin1_General_100_CI_AI
         ,reason             = CAST(NULL AS SMALLINT)
         ,reason_desc        = CAST(NULL AS NVARCHAR(60))      COLLATE Latin1_General_100_CI_AI
     INTO [##SQLXL_Index_sys_database_automatic_tuning_options];

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_database_automatic_tuning_options]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[database_automatic_tuning_options]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_sys_database_automatic_tuning_options] WITH (TABLOCKX)
SELECT database_id        = DB_ID()
      ,name               = name                            COLLATE Latin1_General_100_CI_AI
      ,desired_state
      ,desired_state_desc = desired_state_desc              COLLATE Latin1_General_100_CI_AI
      ,actual_state
      ,actual_state_desc  = actual_state_desc               COLLATE Latin1_General_100_CI_AI
      ,reason
      ,reason_desc        = reason_desc                     COLLATE Latin1_General_100_CI_AI
  FROM [sys].[database_automatic_tuning_options] WITH (READUNCOMMITTED)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_database_automatic_tuning_options]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[database_automatic_tuning_options] - SQL 2017+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 SQL 2016+ Collect [sys].[database_query_store_options]
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_database_query_store_options];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP(0)
          database_id                                = CAST(NULL AS BIGINT)
         ,desired_state                              = CAST(NULL AS SMALLINT)
         ,desired_state_desc                         = CAST(NULL AS NVARCHAR(60))    COLLATE Latin1_General_100_CI_AI
         ,actual_state                               = CAST(NULL AS SMALLINT)
         ,actual_state_desc                          = CAST(NULL AS NVARCHAR(60))    COLLATE Latin1_General_100_CI_AI
         ,actual_state_additional_info               = CAST(NULL AS NVARCHAR(4000))  COLLATE Latin1_General_100_CI_AI
         ,readonly_reason                            = CAST(NULL AS BIGINT)
         ,current_storage_size_mb                    = CAST(NULL AS BIGINT)
         ,flush_interval_seconds                     = CAST(NULL AS BIGINT)
         ,interval_length_minutes                    = CAST(NULL AS BIGINT)
         ,max_storage_size_mb                        = CAST(NULL AS BIGINT)
         ,stale_query_threshold_days                 = CAST(NULL AS BIGINT)
         ,max_plans_per_query                        = CAST(NULL AS BIGINT)
         ,query_capture_mode                         = CAST(NULL AS SMALLINT)
         ,query_capture_mode_desc                    = CAST(NULL AS NVARCHAR(60))    COLLATE Latin1_General_100_CI_AI
         ,size_based_cleanup_mode                    = CAST(NULL AS SMALLINT)
         ,size_based_cleanup_mode_desc               = CAST(NULL AS NVARCHAR(60))    COLLATE Latin1_General_100_CI_AI
         ,wait_stats_capture_mode                    = CAST(NULL AS BIGINT)
         ,wait_stats_capture_mode_desc               = CAST(NULL AS NVARCHAR(60))    COLLATE Latin1_General_100_CI_AI
         ,capture_policy_execution_count             = CAST(NULL AS BIGINT)
         ,capture_policy_total_compile_cpu_time_ms   = CAST(NULL AS BIGINT)
         ,capture_policy_total_execution_cpu_time_ms = CAST(NULL AS BIGINT)
         ,capture_policy_stale_threshold_hours       = CAST(NULL AS BIGINT)
     INTO [##SQLXL_Index_sys_database_query_store_options];

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_database_query_store_options]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[database_query_store_options]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
WITH newcol AS (-- columns added after SQL Server 2016
SELECT query_capture_mode                         = CAST(NULL AS SMALLINT)
      ,query_capture_mode_desc                    = CAST(NULL AS NVARCHAR(60))    COLLATE Latin1_General_100_CI_AI
      ,capture_policy_execution_count             = CAST(NULL AS BIGINT)
      ,capture_policy_total_compile_cpu_time_ms   = CAST(NULL AS BIGINT)
      ,capture_policy_total_execution_cpu_time_ms = CAST(NULL AS BIGINT)
      ,capture_policy_stale_threshold_hours       = CAST(NULL AS BIGINT)
      ,wait_stats_capture_mode                    = CAST(NULL AS BIGINT)
      ,wait_stats_capture_mode_desc               = CAST(NULL AS NVARCHAR(60))    COLLATE Latin1_General_100_CI_AI
)
INSERT
  INTO [##SQLXL_Index_sys_database_query_store_options] WITH (TABLOCKX)
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add [sys].[database_query_store_options]
SELECT database_id                                = DB_ID()
      ,desired_state
      ,desired_state_desc                         = desired_state_desc            COLLATE Latin1_General_100_CI_AI
      ,actual_state
      ,actual_state_desc                          = actual_state_desc             COLLATE Latin1_General_100_CI_AI
      ,actual_state_additional_info               = actual_state_additional_info  COLLATE Latin1_General_100_CI_AI
      ,readonly_reason
      ,current_storage_size_mb
      ,flush_interval_seconds
      ,interval_length_minutes
      ,max_storage_size_mb
      ,stale_query_threshold_days
      ,max_plans_per_query
      ,query_capture_mode
      ,query_capture_mode_desc                    = query_capture_mode_desc       COLLATE Latin1_General_100_CI_AI
      ,size_based_cleanup_mode
      ,size_based_cleanup_mode_desc               = size_based_cleanup_mode_desc  COLLATE Latin1_General_100_CI_AI
      ,wait_stats_capture_mode
      ,wait_stats_capture_mode_desc               = wait_stats_capture_mode_desc  COLLATE Latin1_General_100_CI_AI
      ,capture_policy_execution_count
      ,capture_policy_total_compile_cpu_time_ms
      ,capture_policy_total_execution_cpu_time_ms
      ,capture_policy_stale_threshold_hours
  FROM [sys].[database_query_store_options] WITH (READUNCOMMITTED)
) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_database_query_store_options]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[database_query_store_options] - SQL 2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [cdc].[change_tables]
 ONLY if Change Data Capture (CDC) has been enabled for this database
 BOL: We recommend that you don't query the system tables directly.
      Instead, execute the [sys] [sp_cdc_help_change_data_capture] stored procedure
      NOTE: Up to two rows can be returned for each source table, one row for each capture instance.
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_cdc_change_tables];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id          = CAST(NULL AS BIGINT)
         ,object_id            = CAST(NULL AS BIGINT)
         ,version              = CAST(NULL AS BIGINT)
         ,source_object_id     = CAST(NULL AS BIGINT)
         ,capture_instance     = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,supports_net_changes = CAST(NULL AS BIT)
         ,has_drop_pending     = CAST(NULL AS BIT)
         ,role_name            = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,index_name           = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,filegroup_name       = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,create_date          = CAST(NULL AS DATETIME)
         ,partition_switch     = CAST(NULL AS BIT)
         ,capture_instance_ID  = CAST(NULL AS BIGINT)
     INTO [##SQLXL_Index_cdc_change_tables]
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_cdc_change_tables]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
-- check if [cdc].[change_tables] found. If so capture it
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[cdc].[change_tables]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_cdc_change_tables] WITH (TABLOCKX)
SELECT database_id          = DB_ID()
      ,object_id
      ,version
      ,source_object_id
      ,capture_instance     = capture_instance
      ,supports_net_changes
      ,has_drop_pending
      ,role_name            = role_name
      ,index_name           = index_name
      ,filegroup_name       = filegroup_name
      ,create_date
      ,partition_switch
      ,capture_instance_ID  = ROW_NUMBER() OVER (PARTITION BY source_object_id
                                                     ORDER BY create_date      -- 1 Change table per source
                                                )
  FROM [cdc].[change_tables]
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_cdc_change_tables]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[cdc].[change_tables] (if CDC enabled)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[edge_constraints] - SQL2019+
 Merged in to [sys].[objects] build below.
 Standalone since source did not exist until SQL2109
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_edge_constraints];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id                    = CONVERT(INT          ,NULL)
         ,name                           = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
         ,object_id                      = CONVERT(INT          ,NULL)
         ,principal_id                   = CONVERT(INT          ,NULL)
         ,schema_id                      = CONVERT(INT          ,NULL)
         ,parent_object_id               = CONVERT(INT          ,NULL)                                      -- for System, History, Constraints
         ,type                           = CONVERT(TINYINT      ,NULL)
         ,type_desc                      = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
         ,create_date                    = CONVERT(DATETIME     ,NULL)
         ,modify_date                    = CONVERT(DATETIME     ,NULL)
         ,is_ms_shipped                  = CONVERT(BIT          ,NULL)
         ,is_published                   = CONVERT(BIT          ,NULL)
         ,is_schema_published            = CONVERT(BIT          ,NULL)
         ,is_disabled                    = CONVERT(BIT          ,NULL)
         ,is_not_trusted                 = CONVERT(BIT          ,NULL)
         ,is_system_named                = CONVERT(TINYINT      ,NULL)
         ,delete_referential_action      = CONVERT(TINYINT      ,NULL)
         ,delete_referential_action_desc = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
     INTO [##SQLXL_Index_sys_edge_constraints]
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_edge_constraints]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[edge_constraints]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_sys_edge_constraints] WITH (TABLOCKX)
SELECT database_id                    = DB_ID()
      ,name
      ,object_id                      = name                           COLLATE Latin1_General_100_CI_AI
      ,principal_id
      ,schema_id
      ,parent_object_id                                                                             -- for System, History, Constraints
      ,type
      ,type_desc                      = type_desc                      COLLATE Latin1_General_100_CI_AI
      ,create_date
      ,modify_date
      ,is_ms_shipped
      ,is_published
      ,is_schema_published
      ,is_disabled
      ,is_not_trusted
      ,is_system_named                = COALESCE(is_system_named,0)    -- default value zero = not system named
      ,delete_referential_action
      ,delete_referential_action_desc = delete_referential_action_desc COLLATE Latin1_General_100_CI_AI
  FROM [sys].[edge_constraints] WITH (READUNCOMMITTED)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_edge_constraints]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[edge_constraints] - SQL 2019+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[periods] - SQL2016+
 Merged in to [sys].[objects] build below.
 Standalone since source did not exist until SQL2016
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_periods];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          name                           = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
         ,period_type                    = CONVERT(TINYINT      ,NULL)
         ,period_type_desc               = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
         ,object_id                      = CONVERT(INT          ,NULL)
         ,start_column_id                = CONVERT(INT          ,NULL)
         ,end_column_id                  = CONVERT(INT          ,NULL)
     INTO [##SQLXL_Index_sys_periods]
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_periods]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[periods]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_sys_periods] WITH (TABLOCKX)
SELECT name             = name             COLLATE Latin1_General_100_CI_AI
      ,period_type
      ,period_type_desc = period_type_desc COLLATE Latin1_General_100_CI_AI
      ,object_id
      ,start_column_id
      ,end_column_id
  FROM [sys].[periods] WITH (READUNCOMMITTED)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_periods]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[edge_constraints] - SQL 2019+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[objects] including schemas,check_constraints ...'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[objects]
                [sys].[schemas]
                [sys].[check_constraints]
                [sys].[change_tracking_tables]
                [sys].[default_constraints]
                [sys].[foreign_keys]
                [sys].[internal_tables]
                [sys].[key_constraints]
                [sys].[tables]
                [sys].[triggers]
                [sys].[views]
 Incorporates
                [##SQLXL_Index_cdc_change_tables]         created above since [cdc].[change_tables] may not exist for this database
                [##SQLXL_Index_sys_edge_constraints]      created above since [sys].[edge_constraints] may not be found in this database
                [##SQLXL_index_sys_periods]               created above since [sys].[periods] may not be found in this database

 NOTE:
 - HISTORY tables do not have a parent in [sys].[objects], must be captured from [cdc].[change_tables] or [sys].[tables]
   or as below in "Update historical source for a temporal/ledger table with type = 2"
 - Foreign Key "parents" are the table they are constraining.

 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_objects];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @Pattern NVARCHAR(15)  = ''%[^'' + NCHAR(009) + NCHAR(013) + NCHAR(010) + NCHAR(032) + N'']%'' COLLATE Latin1_General_100_CI_AI;
                               -- Includes Tabs, carriage returns, line feeds, spaces

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT is_enforced                        = CONVERT(BIT          ,NULL)
      ,data_retention_period              = CONVERT(INT          ,NULL)
      ,data_retention_period_unit         = CONVERT(INT          ,NULL)
      ,data_retention_period_unit_desc    = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
      ,has_snapshot                       = CONVERT(BIT          ,NULL)
      -- [sys].[objects] SQL 2014 ------------------------------------
      -- is_memory_optimized              -- updated in code below if > SQL 2012
      ,uses_native_compilation            = CONVERT(BIT          ,NULL)
      -- [sys].[objects] SQL 2019 ------------------------------------
      ,is_inlineable                      = CONVERT(BIT          ,NULL)
      ,inline_type                        = CONVERT(BIT          ,NULL)
      -- [sys].[objects] SQL 2022, Azure SQL Database - [sys].[views]
      ,ledger_view_type                   = CONVERT(TINYINT      ,NULL)
      ,ledger_view_type_desc              = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
      ,is_dropped_ledger_view             = CONVERT(BIT          ,NULL)
      -- [sys].[tables] SQL 2012+ ------------------------------------
      ,is_filetable                       = CONVERT(BIT          ,NULL)
       -- [sys].[tables] SQL 2014+ -----------------------------------
      ,durability                         = CONVERT(TINYINT      ,NULL)
      ,durability_desc                    = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
       -- [sys].[tables] SQL 2016+ -----------------------------------
      ,temporal_type                      = CONVERT(TINYINT      ,NULL)
      ,temporal_type_desc                 = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
      ,history_table_id                   = CONVERT(INT          ,NULL)
      ,is_remote_data_archive_enabled     = CONVERT(BIT          ,NULL)
      ,is_external                        = CONVERT(BIT          ,NULL)
       -- [sys].[tables],[sequences] SQL 2017+ -----------------------
      ,is_node                            = CONVERT(BIT          ,NULL)
      ,is_edge                            = CONVERT(BIT          ,NULL)
      ,last_used_value                    = CONVERT(BIGINT       ,NULL)
       -- [sys].[tables] SQL 2022+, Azure SQL Database ---------------
      ,history_retention_period           = CONVERT(INT          ,NULL)
      ,history_retention_period_unit      = CONVERT(INT          ,NULL)
      ,history_retention_period_unit_desc = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
      ,ledger_type                        = CONVERT(TINYINT      ,NULL)
      ,ledger_type_desc                   = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
      ,ledger_view_id                     = CONVERT(INT          ,NULL)
      ,is_dropped_ledger_table            = CONVERT(BIT          ,NULL)
       -- If change data capture (CDC) enabled on database -----------
      ,version                            = CONVERT(INT          ,NULL)
      ,capture_instance                   = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
      ,supports_net_changes               = CONVERT(BIT          ,NULL)
      ,role_name                          = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
      ,index_name                         = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
      ,filegroup_name                     = CONVERT(NVARCHAR(200),NULL)  COLLATE Latin1_General_100_CI_AI
      ,create_date                        = CONVERT(DATETIME     ,NULL)
      ,partition_switch                   = CONVERT(BIT          ,NULL)
)'
+IIF(@i = 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_objects]'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_objects] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT qry.*')
    + N'
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- get all required objects and their associated properties across related DMVs
SELECT
      --------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[objects]
      --------------------------------------------------------------------------------------------------------------------------------------
       database_id             = DB_ID()
      ,name                    = obj.name                                           COLLATE Latin1_General_100_CI_AI
      ,obj.object_id
      ,obj.principal_id
      ,obj.schema_id
      ,schema_name             = sch.name                                           COLLATE Latin1_General_100_CI_AI
      ,parent_object_id        = CASE WHEN cdc_tgt.source_object_id IS NOT NULL                     -- for System, History, Constraints
                                      THEN cdc_tgt.source_object_id
                                      WHEN itb.parent_id            IS NOT NULL
                                      THEN itb.parent_id
                                      WHEN obj.parent_object_id      = 0                            -- for System, History, Constraints
                                        OR obj.parent_object_id     IS NULL                         -- for System, History, Constraints
                                      THEN obj.object_id
                                      ELSE obj.parent_object_id                                     -- for System, History, Constraints
                                 END
      ,type                    = obj.type                                           COLLATE Latin1_General_100_CI_AI
      ,type_desc               = obj.type_desc                                      COLLATE Latin1_General_100_CI_AI
      --------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[internal_tables]
      --------------------------------------------------------------------------------------------------------------------------------------
      ,sub_type                = COALESCE(itb.internal_type,0)
      ,sub_type_desc           = itb.internal_type_desc                             COLLATE Latin1_General_100_CI_AI
      --------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[objects]
      --------------------------------------------------------------------------------------------------------------------------------------
      ,obj.create_date
      ,obj.modify_date
      ,obj.is_ms_shipped
      ,obj.is_published
      ,obj.is_schema_published
      --------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[check_constraints], [sys].[default_constraints], [sys].[foreign_keys], [sys].[key_constraints], [sys].[edge_constraints]
      --------------------------------------------------------------------------------------------------------------------------------------
      ,is_disabled             = COALESCE(chk_con.is_disabled
                                         ,edg_con.is_disabled
                                         ,fkc.is_disabled
                                         ,trg.is_disabled
                                         )
      ,is_enforced             = is_enforced
      ,is_not_for_replication  = COALESCE(chk_con.is_not_for_replication
                                         ,fkc.is_not_for_replication
                                         ,trg.is_not_for_replication
                                         )
      ,is_not_trusted          = COALESCE(chk_con.is_not_trusted
                                         ,edg_con.is_not_trusted
                                         ,fkc.is_not_trusted
                                         )
      ,is_system_named         = CAST(COALESCE(chk_con.is_system_named
                                              ,def_con.is_system_named
                                              ,edg_con.is_system_named
                                              ,fkc.is_system_named
                                              ,key_con.is_system_named
                                              ,0                       -- default value
                                              ) AS TINYINT)
      ,uses_database_collation = chk_con.uses_database_collation
      ,definition              = CAST(
                                 LEFT(-- trim off leading tabs,carriage returns,line feeds, spaces
                                 STUFF(COALESCE(chk_con.definition
                                               ,def_con.definition
                                               )
                                      ,1
                                      ,ISNULL(NULLIF(PATINDEX(@Pattern -- Includes Tabs, carriage returns, line feeds, spaces
                                                             ,COALESCE(chk_con.definition
                                                                      ,def_con.definition
                                                                      )
                                                             )
                                                    ,0) - 1
                                             ,0)
                                      ,N''''
                                      ) -- end of STUFF
                                     ,4000) AS NVARCHAR(4000))                      COLLATE Latin1_General_100_CI_AI
      ,parent_column_id        = COALESCE(chk_con.parent_column_id,def_con.parent_column_id)
      ,key_unique_index_id     = COALESCE(fkc.key_index_id,key_con.unique_index_id)
      ----------------------------------------------------------------------------------------------
      -- [sys].[tables],[sys].[views]
      ----------------------------------------------------------------------------------------------
      ,is_replicated               = COALESCE(tbl.is_replicated
                                             ,vw.is_replicated
                                             )
      ,has_replication_filter      = COALESCE(tbl.has_replication_filter
                                             ,vw.has_replication_filter
                                             )
      ,has_unchecked_assembly_data = COALESCE(tbl.has_unchecked_assembly_data
                                             ,vw.has_unchecked_assembly_data
                                             )
      ,is_tracked_by_cdc           = COALESCE(tbl.is_tracked_by_cdc
                                             ,vw.is_tracked_by_cdc
                                             )
      ----------------------------------------------------------------------------------------------
      -- [sys].[views]
      ----------------------------------------------------------------------------------------------
      ,vw.has_opaque_metadata
      ,vw.with_check_option
      ,vw.is_date_correlation_view
      ,has_snapshot
      ,ledger_view_type
      ,ledger_view_type_desc              = ledger_view_type_desc                   COLLATE Latin1_General_100_CI_AI
      ,is_dropped_ledger_view
      ----------------------------------------------------------------------------------------------
      -- [sys].[tables]
      ----------------------------------------------------------------------------------------------
      ,lob_data_space_id                  = COALESCE(tbl.lob_data_space_id
                                                    ,itb.lob_data_space_id
                                                    )
      ,filestream_data_space_id           = COALESCE(tbl.filestream_data_space_id
                                                    ,itb.filestream_data_space_id
                                                    )
      ,data_space_id                      = CONVERT(BIGINT,NULL) -- derived from HEAP, CLUSTERED index (index_id = 1)
      ------------------------------------
      ,tbl.max_column_id_used
      ,tbl.lock_on_bulk_load
      ,uses_ansi_nulls
      ,tbl.is_merge_published
      ,tbl.is_sync_tran_subscribed
      ,tbl.text_in_row_limit
      ,tbl.large_value_types_out_of_row
      ,tbl.lock_escalation
      ,lock_escalation_desc               = tbl.lock_escalation_desc                COLLATE Latin1_General_100_CI_AI
      ,tbl.is_filetable
      ,is_memory_optimized                = CONVERT(BIT,0) -- updated in code below if > SQL 2012
      ,durability
      ,durability_desc                    = durability_desc                         COLLATE Latin1_General_100_CI_AI
      ,temporal_type
      ,temporal_type_desc                 = temporal_type_desc                      COLLATE Latin1_General_100_CI_AI
      ,is_remote_data_archive_enabled
      ,is_external
      ,history_retention_period
      ,history_retention_period_unit
      ,history_retention_period_unit_desc = history_retention_period_unit_desc      COLLATE Latin1_General_100_CI_AI
      ,is_node
      ,is_edge
      ,data_retention_period
      ,data_retention_period_unit
      ,data_retention_period_unit_desc    = data_retention_period_unit_desc         COLLATE Latin1_General_100_CI_AI
      ,ledger_type
      ,ledger_type_desc                   = ledger_type_desc                        COLLATE Latin1_General_100_CI_AI
      ,ledger_view_id
      ,is_dropped_ledger_table
      ,history_table_ID
      -- [sys].[change_tracking_tables] ------------------------------------------------------------
      ,ctt_is_track_columns_updated_on    = ctt.is_track_columns_updated_on
      -- [cdc].[change_tables] (source & target) ---------------------------------------------------
      ,cdc_capture_instance               = COALESCE(cdc_src.capture_instance
                                                    ,cdc_tgt.capture_instance
                                                    )                               COLLATE Latin1_General_100_CI_AI
      ,cdc_supports_net_changes           = cdc_tgt.supports_net_changes
      ,cdc_role_name                      = COALESCE(cdc_src.role_name
                                                    ,cdc_tgt.role_name
                                                    )                               COLLATE Latin1_General_100_CI_AI
      ,cdc_index_name                     = cdc_src.index_name                      COLLATE Latin1_General_100_CI_AI
      ,cdc_filegroup_name                 = cdc_tgt.filegroup_name                  COLLATE Latin1_General_100_CI_AI
      ,cdc_create_date                    = COALESCE(cdc_src.create_date
                                                    ,cdc_tgt.create_date
                                                    )
      ,cdc_partition_switch               = COALESCE(cdc_src.partition_switch
                                                    ,cdc_tgt.partition_switch
                                                    )
      ,cdc_is_history_table               = CAST(CASE WHEN tbl.object_id = cdc_tgt.object_id
                                                      THEN 1
                                                      ELSE 0
                                                 END AS BIT)
      ----------------------------------------------------------------------------------------------
      -- [sys].[periods] -- Returns a row for each table for which periods have been defined
      ----------------------------------------------------------------------------------------------
      ,period_name              = per.name
      ,per.period_type
      ,per.period_type_desc
      ,period_start_column_id   = per.start_column_id
      ,period_start_column_name = CONVERT(SYSNAME,NULL)
      ,period_end_column_id     = per.end_column_id
      ,period_end_column_name   = CONVERT(SYSNAME,NULL)
      ----------------------------------------------------------------------------------------------
      -- [sys].[foreign_keys], [sys].[edge_constraints]
      ----------------------------------------------------------------------------------------------
      ,fkc.referenced_object_id
      ,fkc.key_index_id
      ,fkc_referenced_object_desc     = CONVERT(NVARCHAR(4000),NULL)       COLLATE Latin1_General_100_CI_AI -- referenced table & column(s)
      ,delete_referential_action      = COALESCE(edg_con.delete_referential_action
                                                ,fkc.delete_referential_action
                                                )
      ,delete_referential_action_desc = COALESCE(edg_con.delete_referential_action_desc
                                                ,fkc.delete_referential_action_desc
                                                )                          COLLATE Latin1_General_100_CI_AI
      ,fkc.update_referential_action
      ,update_referential_action_desc = fkc.update_referential_action_desc COLLATE Latin1_General_100_CI_AI
      ----------------------------------------------------------------------------------------------
      -- Computed columns for check_constraints, default_constraints
      ----------------------------------------------------------------------------------------------
      ,uses_sql_proc            = CONVERT(BIT,NULL)
      ,uses_sql_ftn             = CONVERT(BIT,NULL)
      ,uses_sql_mthd            = CONVERT(BIT,NULL)
      ----------------------------------------------------------------------------------------------
      -- [sys].[internal_tables]
      ----------------------------------------------------------------------------------------------
      ,internal_parent_ID       = itb.parent_id
      ,internal_parent_minor_ID = itb.parent_minor_id
      ----------------------------------------------------------------------------------------------
      -- [sys].[triggers]
      ----------------------------------------------------------------------------------------------
      ,trg.parent_class
      ,parent_class_desc        = trg.parent_class_desc                              COLLATE Latin1_General_100_CI_AI
      ,trg.is_instead_of_trigger
      ----------------------------------------------------------------------------------------------
      -- [sys].[sequences]
      ----------------------------------------------------------------------------------------------
      ,minimum_value                = CAST(minimum_value   AS BIGINT)
      ,start_value                  = CAST(start_value     AS BIGINT)
      ,increment                    = CAST(increment       AS BIGINT)
      ,current_value                = CAST(current_value   AS BIGINT)
      ,last_used_value              = CAST(last_used_value AS BIGINT)
      ,maximum_value                = CAST(maximum_value   AS BIGINT)
      ,is_cycling
      ,is_cached
      ,cache_size
      ,user_type_id
      ,is_exhausted
      ----------------------------------------------------------------------------------------------
       -- Computed/derived values
      ----------------------------------------------------------------------------------------------
      -- Object partition stats
      ,obj_partition_count            = CONVERT(BIGINT,0)
      ,obj_used_page_count            = CONVERT(BIGINT,0)
      ,obj_in_row_data_page           = CONVERT(BIGINT,0)
      ,obj_in_row_used_page           = CONVERT(BIGINT,0)
      ,obj_in_row_reserved_page       = CONVERT(BIGINT,0)
      ,obj_lob_used_page              = CONVERT(BIGINT,0)
      ,obj_lob_reserved_page          = CONVERT(BIGINT,0)
      ,obj_row_overflow_used_page     = CONVERT(BIGINT,0)
      ,obj_row_overflow_reserved_page = CONVERT(BIGINT,0)
      ,obj_reserved_page              = CONVERT(BIGINT,0)
      ,obj_row_count                  = CONVERT(BIGINT,0)
      -- Index partition stats
      ,idx_partition_count            = CONVERT(BIGINT,0)
      ,idx_used_page_count            = CONVERT(BIGINT,0)
      ,idx_in_row_data_page           = CONVERT(BIGINT,0)
      ,idx_in_row_used_page           = CONVERT(BIGINT,0)
      ,idx_in_row_reserved_page       = CONVERT(BIGINT,0)
      ,idx_lob_used_page              = CONVERT(BIGINT,0)
      ,idx_lob_reserved_page          = CONVERT(BIGINT,0)
      ,idx_row_overflow_used_page     = CONVERT(BIGINT,0)
      ,idx_row_overflow_reserved_page = CONVERT(BIGINT,0)
      ,idx_reserved_page              = CONVERT(BIGINT,0)
      -- index counts
      ,heap_index_CNT               = CONVERT(INT,0)   -- sys.indexes type 0
      ,clustered_index_CNT          = CONVERT(INT,0)   -- sys.indexes type 1
      ,nonclustered_index_CNT       = CONVERT(INT,0)   -- sys.indexes type 2
      ,xml_index_CNT                = CONVERT(INT,0)   -- sys.indexes type 3
      ,spatial_index_CNT            = CONVERT(INT,0)   -- sys.indexes type 4
      ,clustered_columnstore_CNT    = CONVERT(INT,0)   -- sys.indexes type 5
      ,nonclustered_columnstore_CNT = CONVERT(INT,0)   -- sys.indexes type 6
      ,nonclustered_hash_CNT        = CONVERT(INT,0)   -- sys.indexes type 7
      ,json_index_CNT               = CONVERT(INT,0)   -- sys.indexes type 9
      ,fulltext_index_CNT           = CONVERT(INT,0)   -- SQLXL index type T
      ,missing_index_CNT            = CONVERT(INT,0)   -- SQLXL index type M
      ,foreign_key_CNT              = CONVERT(INT,0)   -- SQLXL index type F
      -------------------------------------------------------
      ,column_CNT                   = CONVERT(INT,0)
      ,column_null_CNT              = CONVERT(INT,0)
      ----------------------------------------------------------------------------------------------
      ,clr_trigger_CNT              = CONVERT(INT,0)
      ,sql_trigger_CNT              = CONVERT(INT,0)
      ,is_instead_of_trigger_CNT    = CONVERT(INT,0)

/*** LOCAL TESTING ***
SELECT COUNT_BIG(1)
--*/
  FROM (-- exclude objects we are not interested in. cannot use IS_MS_SHIPPED since all internal tables are always MS_SHIPPED
        SELECT obj.*
          FROM (SELECT schema_id FROM [sys].[schemas] WITH (READUNCOMMITTED) WHERE name = N''SYS'') AS sch
         CROSS
          JOIN [sys].[objects] AS obj WITH (READUNCOMMITTED)
         WHERE NOT (    DB_name()   = N''tempdb''
                    AND obj.name LIKE N''%##%''  -- omit temporary SQLXL objects
                   )
           AND NOT obj.type IN (N''P''         -- SQL stored procedure
                               ,N''PC''        -- Assembly (CLR) stored-procedure
                               ,N''PG''        -- Plan guide
                               ,N''RF''        -- Replication-filter-procedure
                               ,N''S''         -- System base table object
                               ,N''SN''        -- Synonym
                               ,N''SP''        -- Security Policy
                               ,N''SQ''        -- Service queue
                               ,N''ST''        -- Statistics tree
                               ,N''TT''        -- table type
                               ,N''X''         -- Extended stored procedure
                               )
           AND NOT (-- system internal tables, cannot use IS_MS_SHIPPED since all internal tables are always MS_SHIPPED
                        obj.parent_object_id = 0                                                    -- "system" internal table exception
                    AND obj.type             = N''IT''                                              -- "system" internal table exception
                   )
           AND NOT (-- primary keys on table types ---------------------
                        obj.schema_id        = sch.schema_id
                    AND obj.type             = N''PK''
                    AND obj.name          LIKE N''PK__TT_%''
                   )
           AND NOT (-- message queues ----------------------------------
                        obj.schema_id        = sch.schema_id
                    AND obj.type             = N''IT''                -- internal table object type
                    AND obj.name          LIKE N''queue_messages_%''
                   )
           AND NOT (-- system diagrams ---------------------------------
                        obj.schema_id        = 1                      -- DBO
                    AND (   (    obj.type    = N''FN''                -- SQL scalar function
                             AND obj.name    = N''fn_diagramobjects''
                            )
                         OR (    obj.type    = N''PK''
                             AND obj.name LIKE N''PK__sysdiagr_%''
                            )
                         OR (    obj.type    = N''U''                 -- User Table
                             AND obj.name    = N''sysdiagrams''
                            )
                        )
                   )
           AND NOT (    obj.schema_id = sch.schema_id
                    AND obj.name LIKE N''fn_cdc_get_%''
                   )
       )                                    AS obj
  LEFT OUTER
  JOIN [sys].[schemas]                      AS sch     WITH (READUNCOMMITTED)
    ON obj.schema_id = sch.schema_id

  -- Constraints -----------------------------------------------------------------------------------
  LEFT OUTER
  JOIN [sys].[check_constraints]            AS chk_con WITH (READUNCOMMITTED)
    ON obj.object_id = chk_con.object_id
  LEFT OUTER
  JOIN [sys].[default_constraints]          AS def_con WITH (READUNCOMMITTED)
    ON obj.object_id = def_con.object_id
  LEFT OUTER
  JOIN [sys].[key_constraints]              AS key_con WITH (READUNCOMMITTED)
    ON obj.object_id = key_con.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_edge_constraints] AS edg_con
    ON obj.object_id = edg_con.object_id
  LEFT OUTER
  JOIN [sys].[foreign_keys]                 AS fkc     WITH (READUNCOMMITTED)
    ON obj.object_id = fkc.object_id

  -- Change Tracking & Data Capture ----------------------------------------------------------------
  LEFT OUTER         -- tables that are CDC data sources
  JOIN [##SQLXL_Index_cdc_change_tables]    AS cdc_src
    ON DB_ID()       = cdc_src.database_id
   AND obj.object_id = cdc_src.source_object_id
   AND 1             = cdc_src.capture_instance_ID
  LEFT OUTER         -- tables that are CDC history capture tables
  JOIN [##SQLXL_Index_cdc_change_tables]    AS cdc_tgt
    ON DB_ID()       = cdc_tgt.database_id
   AND obj.object_id = cdc_tgt.object_id
   AND 1             = cdc_tgt.capture_instance_ID
  LEFT OUTER
  JOIN [sys].[change_tracking_tables]       AS ctt     WITH (READUNCOMMITTED)
    ON obj.object_id = ctt.object_id

  -- Tables & Views --------------------------------------------------------------------------------
  LEFT OUTER
  JOIN [sys].[tables]                       AS tbl     WITH (READUNCOMMITTED)
    ON obj.object_id = tbl.object_id
  LEFT OUTER
  JOIN [sys].[internal_tables]              AS itb     WITH (READUNCOMMITTED)
    ON obj.object_id = itb.object_id
  LEFT OUTER
  JOIN [sys].[views]                        AS vw      WITH (READUNCOMMITTED)
    ON obj.object_id = vw.object_id

  -- Other properties ------------------------------------------------------------------------------
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_periods]          AS per     WITH (READUNCOMMITTED)
    ON obj.object_id = per.object_id
  LEFT OUTER
  JOIN [sys].[sequences]                    AS seq     WITH (READUNCOMMITTED)
    ON obj.object_id = seq.object_id
  LEFT OUTER
  JOIN [sys].[triggers]                     AS trg     WITH (READUNCOMMITTED)
    ON obj.object_id = trg.object_id
--------------------------------------------------------------------------------------------------------------------------------------------
) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_objects]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[objects] including all other object-level management views'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

-- Create index ------------------------------------------------------------------------------------
IF @i = 1 BEGIN  -- first time through database loop. having index may speed up processing subsequent queries
   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Index_sys_objects__object_id
       ON [##SQLXL_Index_sys_objects]
         (database_id
         ,object_id
         )
     WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... ' + @db_name_quoted + N' Index [ixuc_SQLXL_Index_sys_objects__object_id]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
IF CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) > 11 -- SQL2012
BEGIN
   SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
                 ,N'USE ' + @db_name_quoted + N';'
                 ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE obj -- [##SQLXL_Index_sys_objects]
   SET is_memory_optimized = 1
  FROM [##SQLXL_Index_sys_objects] AS obj     WITH (TABLOCKX)
  JOIN [sys].[tables]              AS par_tbl WITH (READUNCOMMITTED)
    ON obj.database_id      = DB_ID()
   AND obj.parent_object_id = par_tbl.object_id
   AND 1                    = par_tbl.is_memory_optimized
OPTION (MAXDOP 1,RECOMPILE,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

--------------------------------------------------------------------------------------------------------------------------------------------
   IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
   SELECT 'Update is_memory_optimized'
         ,lsql = LEN(@sql)
         ,sql1 = SUBSTRING(@sql,    1,16383)
         ,sql2 = SUBSTRING(@sql,16384,16383)
         ,sql3 = SUBSTRING(@sql,32768,16383);

   EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... ' + @db_name_quoted + N' Update is_memory_optimized (2014+)'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;

END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_db_partition_stats]
 NOTE: memory optimized table row_counts don't show up in [sys].[dm_db_partition_stats]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
USE [WideWorldImporters]
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_partition_stats];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_dm_db_partition_stats] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_dm_db_partition_stats]')
    + N'
  FROM (-- columns from [sys].[dm_db_partition_stats]
SELECT database_id                = DB_ID()
      ,object_id                  = ps.object_id
      ,index_id                   = ps.index_id
      ,partition_CNT              = COUNT_BIG(ps.partition_id)
      ,used_page_CNT              = SUM(ps.used_page_count)
      ,in_row_data_page           = SUM(ps.in_row_data_page_count)
      ,in_row_used_page           = SUM(ps.in_row_used_page_count)
      ,in_row_reserved_page       = SUM(ps.in_row_reserved_page_count)
      ,lob_used_page              = SUM(ps.lob_used_page_count)
      ,lob_reserved_page          = SUM(ps.lob_reserved_page_count)
      ,row_overflow_used_page     = SUM(ps.row_overflow_used_page_count)
      ,row_overflow_reserved_page = SUM(ps.row_overflow_reserved_page_count)
      ,reserved_page              = SUM(ps.reserved_page_count)
      ,row_CNT                    = SUM(ps.row_count)
  FROM [sys].[dm_db_partition_stats] AS ps WITH (READUNCOMMITTED)
 GROUP BY           -- database_id included above
       ps.object_id
      ,ps.index_id
) AS qry
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_partition_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_partition_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[dm_db_stats_properties] - used for modification_counter if SQL 2012+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[sql_modules] to [##SQLXL_Index_sql_definitions]
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @Pattern NVARCHAR(15)  = ''%[^'' + NCHAR(009) + NCHAR(013) + NCHAR(010) + NCHAR(032) + N'']%'' COLLATE Latin1_General_100_CI_AI;
                               -- Includes Tabs, carriage returns, line feeds, spaces

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT uses_native_compilation = CONVERT(BIT,NULL)
      ,is_inlineable           = CONVERT(BIT,NULL)
      ,inline_type             = CONVERT(BIT,NULL)
)
INSERT
  INTO [##SQLXL_Index_sql_definitions] WITH (TABLOCKX)
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add SQL Modules
        SELECT database_id             = obj.database_id
              ,object_id               = obj.object_id
              ,group_handle            = NULL
              ,uses_ansi_nulls         = mod.uses_ansi_nulls
              ,uses_quoted_identifier
              ,is_schema_bound
              ,uses_database_collation = mod.uses_database_collation
              ,is_recompiled
              ,null_on_null_input
              ,execute_as_principal_id
              ,uses_native_compilation
              ,inline_type
              ,is_inlineable
              ,definition              = CAST(
                                         LEFT(-- trim off leading tabs,carriage returns,line feeds, spaces
                                         STUFF(mod.definition
                                              ,1
                                              ,ISNULL(NULLIF(PATINDEX(@Pattern -- Includes Tabs, carriage returns, line feeds, spaces
                                                                     ,mod.definition),0) - 1,0)
                                              ,N''''
                                              ),4000) AS NVARCHAR(4000))                    COLLATE Latin1_General_100_CI_AI
          FROM [##SQLXL_Index_sys_objects] AS obj
          JOIN [sys].[sql_modules]         AS mod WITH (READCOMMITTED,READPAST) -- READPAST required since modules gets a lot of use
            ON obj.object_id   = mod.object_id
         WHERE obj.database_id = DB_ID()
        ) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sql_definitions]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[modules]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[data_spaces]
               ,[sys].[filegroups]
               ,[sys].[database_files]
               ,[sys].[partition_schemes]
               ,[sys].[partition_functions]
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_data_spaces];
   END TRY
   BEGIN CATCH
   END CATCH

SELECT TOP (0)
       database_id                        = CAST(NULL AS BIGINT)
      -- [sys].[data_spaces] ------------------------------------------
      ,data_space_id                      = CAST(NULL AS BIGINT)
      -- [sys].[database_files] --------------------------------------
      ,file_id                            = CAST(NULL AS BIGINT)
      -- [sys].[data_spaces] ------------------------------------------
      ,data_space_name                    = CAST(NULL AS NVARCHAR(200))       COLLATE Latin1_General_100_CI_AI
      ,data_space_type                    = CAST(NULL AS NVARCHAR(2))         COLLATE Latin1_General_100_CI_AI
      ,data_space_type_desc               = CAST(NULL AS NVARCHAR(60))        COLLATE Latin1_General_100_CI_AI
      ,data_space_is_default              = CAST(NULL AS BIT)
      ,data_space_is_system               = CAST(NULL AS BIT)
      -- [sys].[data_spaces] Partition schemes ----------------------
      ,part_sch_space_name                = CAST(NULL AS NVARCHAR(200))       COLLATE Latin1_General_100_CI_AI
      ,part_sch_space_type                = CAST(NULL AS NVARCHAR(2))         COLLATE Latin1_General_100_CI_AI
      ,part_sch_space_type_desc           = CAST(NULL AS NVARCHAR(60))        COLLATE Latin1_General_100_CI_AI
      ,part_sch_space_is_default          = CAST(NULL AS BIT)
      ,part_sch_space_is_system           = CAST(NULL AS BIT)
      -- [sys].[filegroups] -----------------------------------------
      ,filegroup_guid                     = CAST(NULL AS UNIQUEIDENTIFIER)
      ,filegroup_is_read_only             = CAST(NULL AS BIT)
      ,filegroup_is_autogrow_all_files    = CAST(NULL AS BIT)
      -- [sys].[database_files] --------------------------------------
      ,file_guid                          = CAST(NULL AS UNIQUEIDENTIFIER)
      ,file_type                          = CAST(NULL AS TINYINT)
      ,file_type_desc                     = CAST(NULL AS NVARCHAR(60))        COLLATE Latin1_General_100_CI_AI
      ,file_logical_filename              = CAST(NULL AS NVARCHAR(200))       COLLATE Latin1_General_100_CI_AI
      ,file_physical_filename             = CAST(NULL AS NVARCHAR(260))       COLLATE Latin1_General_100_CI_AI
      ,file_state                         = CAST(NULL AS TINYINT)
      ,file_state_desc                    = CAST(NULL AS NVARCHAR(60))        COLLATE Latin1_General_100_CI_AI
      ,file_size_pages                    = CAST(NULL AS BIGINT)
      ,file_max_size_pages                = CAST(NULL AS BIGINT)
      ,file_is_percent_growth             = CAST(NULL AS BIT)
      ,file_growth                        = CAST(NULL AS BIGINT)
      -- [sys].[partition_schemes] -----------------------------------
      ,partition_function_id              = CAST(NULL AS BIGINT)
      -- [sys].[partition_functions] ---------------------------------
      ,partition_function_name            = CAST(NULL AS NVARCHAR(200))       COLLATE Latin1_General_100_CI_AI
      ,partition_function_type            = CAST(NULL AS NVARCHAR(2))         COLLATE Latin1_General_100_CI_AI
      ,partition_function_type_desc       = CAST(NULL AS NVARCHAR(60))        COLLATE Latin1_General_100_CI_AI
      ,partition_function_fanout          = CAST(NULL AS BIGINT)
      ,partition_function_boundary_value  = CAST(NULL AS NVARCHAR(5))         COLLATE Latin1_General_100_CI_AI
      ,partition_function_is_system       = CAST(NULL AS BIT)
      ,partition_function_create_date     = CAST(NULL AS DATETIME)
      ,partition_function_modify_date     = CAST(NULL AS DATETIME)
  INTO [##SQLXL_Index_sys_data_spaces];

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_data_spaces]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

IF  object_id('[sys].[data_spaces]')         IS NOT NULL -- BOL does not include AZURE SQL Database, does include SQL Managed Instance
AND object_id('[sys].[filegroups]')          IS NOT NULL -- BOL says in AZURE SQL Database, but this extends sys.data_spaces?
AND object_id('[sys].[database_files]')      IS NOT NULL -- BOL says in AZURE SQL Database & SQL Managed Instance
AND object_id('[sys].[partition_schemes]')   IS NOT NULL -- BOL does not include AZURE SQL Database, does include SQL Managed Instance
AND object_id('[sys].[partition_functions]') IS NOT NULL -- BOL says in AZURE SQL Database & SQL Managed Instance
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2012 -------------------------------------
       is_system                     = CONVERT(BIT,NULL)
      ,partition_function_is_system  = CONVERT(BIT,NULL)
      -- SQL 2016 --------------------------------------
      ,is_autogrow_all_files         = CONVERT(BIT,NULL)
)
INSERT
  INTO [##SQLXL_Index_sys_data_spaces] WITH (TABLOCKX)
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add columns from [sys].[data_spaces],[filegroups],[database_files],[partition_schemes],[partition_functions]
SELECT database_id               = DB_ID()
      -- [sys].[data_spaces] ------------------------------------------
      ,data_space_id             = ds.data_space_id
      -- [sys].[database_files] --------------------------------------
      ,file_id                   = df.file_id
      -- [sys].[data_spaces] NOT a Partition scheme -------------------
      ,data_space_name           = IIF(ds.type <> N''PS'',ds.name      ,NULL) COLLATE Latin1_General_100_CI_AI
      ,data_space_type           = IIF(ds.type <> N''PS'',ds.type      ,NULL) COLLATE Latin1_General_100_CI_AI
      ,data_space_type_desc      = IIF(ds.type <> N''PS'',ds.type_desc ,NULL) COLLATE Latin1_General_100_CI_AI
      ,data_space_is_default     = IIF(ds.type <> N''PS'',ds.is_default,NULL)
      ,data_space_is_system      = IIF(ds.type <> N''PS'',ds.is_system ,NULL)
      -- [sys].[data_spaces] IS a Partition schemes ------------------
      ,part_sch_space_name       = IIF(ds.type  = N''PS'',ds.name      ,NULL) COLLATE Latin1_General_100_CI_AI
      ,part_sch_space_type       = IIF(ds.type  = N''PS'',ds.type      ,NULL) COLLATE Latin1_General_100_CI_AI
      ,part_sch_space_type_desc  = IIF(ds.type  = N''PS'',ds.type_desc ,NULL) COLLATE Latin1_General_100_CI_AI
      ,part_sch_space_is_default = IIF(ds.type  = N''PS'',ds.is_default,NULL)
      ,part_sch_space_is_system  = IIF(ds.type  = N''PS'',ds.is_system ,NULL)
      -- [sys].[filegroups] -----------------------------------------
      ,filegroup_guid
      ,filegroup_is_read_only             = fg.is_read_only
      ,filegroup_is_autogrow_all_files    = is_autogrow_all_files
      -- [sys].[database_files] --------------------------------------
      ,file_guid                          = df.file_guid
      ,file_type                          = df.type
      ,file_type_desc                     = df.type_desc                      COLLATE Latin1_General_100_CI_AI
      ,file_logical_filename              = df.name                           COLLATE Latin1_General_100_CI_AI
      ,file_physical_filename             = df.physical_name                  COLLATE Latin1_General_100_CI_AI
      ,file_state                         = df.state
      ,file_state_desc                    = df.state_desc                     COLLATE Latin1_General_100_CI_AI
      ,file_size_pages                    = df.size
      ,file_max_size_pages                = df.max_size
      ,file_is_percent_growth             = df.is_percent_growth
      ,file_growth                        = df.growth
      -- [sys].[partition_schemes] -----------------------------------
      ,partition_function_id              = ps.function_id
      -- [sys].[partition_functions] ---------------------------------
      ,partition_function_name            = pf.name                           COLLATE Latin1_General_100_CI_AI
      ,partition_function_type            = pf.type                           COLLATE Latin1_General_100_CI_AI
      ,partition_function_type_desc       = pf.type_desc                      COLLATE Latin1_General_100_CI_AI
      ,partition_function_fanout          = pf.fanout
      ,partition_function_boundary_value  = CASE pf.boundary_value_on_right
                                                 WHEN 1 THEN N''RIGHT''
                                                 WHEN 0 THEN N''LEFT''
                                                 ELSE NULL
                                            END                               COLLATE Latin1_General_100_CI_AI
      ,partition_function_is_system       = pf.is_system
      ,partition_function_create_date     = pf.create_date
      ,partition_function_modify_date     = pf.modify_date
  FROM [sys].[data_spaces]         AS ds WITH (READUNCOMMITTED)
  LEFT OUTER
  JOIN [sys].[filegroups]          AS fg WITH (READUNCOMMITTED)
    ON ds.data_space_id = fg.data_space_id
  LEFT OUTER
  JOIN [sys].[database_files]      AS df WITH (READUNCOMMITTED)
    ON ds.data_space_id = df.data_space_id
  LEFT OUTER
  JOIN [sys].[partition_schemes]   AS ps WITH (READUNCOMMITTED)
    ON ds.data_space_id = ps.data_space_id
  LEFT OUTER
  JOIN [sys].[partition_functions] AS pf
WITH (READUNCOMMITTED)
    ON ps.function_id   = pf.function_id
) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_data_spaces]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[data_spaces],[filegroups],[database_files],[partition_schemes]'
                                             + N',[partition_functions]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[destination_data_spaces]
 Contains a row for each data space destination of a partition scheme
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF object_id('[sys].[destination_data_spaces]') IS NOT NULL -- BOL does not include AZURE SQL Database OR SQL Managed Instance  (yet?)
BEGIN
   -----------------------------------------------------------------------------------------------------------------------------------------
   SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
                 ,N'USE ' + @db_name_quoted + N';'
                 ,N'')
   + N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
   -----------------------------------------------------------------------------------------------------------------------------------------
   UPDATE tgt -- [##SQLXL_Index_sys_data_spaces]
      SET tgt.data_space_name                 = src.data_space_name
         ,tgt.data_space_type                 = src.data_space_type
         ,tgt.data_space_type_desc            = src.data_space_type_desc
         ,tgt.data_space_is_default           = src.data_space_is_default
         ,tgt.data_space_is_system            = src.data_space_is_system
         ----------------------------------------------------------------
         ,tgt.filegroup_guid                  = src.filegroup_guid
         ,tgt.filegroup_is_read_only          = src.filegroup_is_read_only
         ,tgt.filegroup_is_autogrow_all_files = src.filegroup_is_autogrow_all_files
         ----------------------------------------------------------------
         ,tgt.file_id                         = src.file_id
         ,tgt.file_guid                       = src.file_guid
         ,tgt.file_type                       = src.file_type
         ,tgt.file_type_desc                  = src.file_type_desc
         ,tgt.file_logical_filename           = src.file_logical_filename
         ,tgt.file_physical_filename          = src.file_physical_filename
         ,tgt.file_state                      = src.file_state
         ,tgt.file_state_desc                 = src.file_state_desc
         ,tgt.file_size_pages                 = src.file_size_pages
         ,tgt.file_max_size_pages             = src.file_max_size_pages
         ,tgt.file_is_percent_growth          = src.file_is_percent_growth
         ,tgt.file_growth                     = src.file_growth
     FROM [##SQLXL_Index_sys_data_spaces] AS tgt WITH (TABLOCKX)
     JOIN (-- get partition scheme and data space id
           SELECT database_id   = DB_ID()
                 ,partition_scheme_id
                 ,data_space_id = MAX(data_space_id)
             FROM [sys].[destination_data_spaces] WITH (READUNCOMMITTED)
            GROUP BY
                  partition_scheme_id
          ) AS dds
       ON tgt.database_id   = dds.database_id
      AND tgt.data_space_id = dds.partition_scheme_id
     JOIN [##SQLXL_Index_sys_data_spaces] AS src
       ON dds.database_id   = src.database_id
      AND dds.data_space_id = src.data_space_id
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

   IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
   SELECT '[##SQLXL_Index_sys_destination_data_spaces]'
         ,lsql = LEN(@sql)
         ,sql1 = SUBSTRING(@sql,    1,16383)
         ,sql2 = SUBSTRING(@sql,16384,16383)
         ,sql3 = SUBSTRING(@sql,32768,16383);

   EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... ' + @db_name_quoted + N'.[sys].[destination_data_spaces]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;

END -- IF object_id('[sys].[destination_data_spaces]') IS NOT NULL

/******************************************************************************************************************************************\
 *Task* Collect [sys].[sql_expression_dependencies]  *NOT FOUND* in AZURE SQL database!
 Classes:  0 = Object or column (non-schema-bound references only)
           1 = Object or column (schema-bound references)
           2 = Types?
           3 = XML Schema COllection
           4 = Parameter
           5 = Database
           6 = Type
           7 = Index
           8 = Assembly
           9 = Statistics
          10 = XML schema collection
          21 = Partition function
          12 = Database DDL trigger
          13 = Server DDL trigger
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_sql_expression_dependencies];
   END TRY
   BEGIN CATCH
   END CATCH

SELECT TOP (0)
       database_id               = CAST(NULL AS BIGINT)
      ,referencing_id            = CAST(NULL AS BIGINT)
      ,referencing_type          = CAST(NULL AS NVARCHAR(2))    COLLATE Latin1_General_100_CI_AI
      ,referencing_minor_id      = CAST(NULL AS BIGINT)
      ,referencing_class         = CAST(NULL AS TINYINT)
      ,referencing_class_desc    = CAST(NULL AS NVARCHAR(60))   COLLATE Latin1_General_100_CI_AI
      ,is_schema_bound_reference = CAST(NULL AS BIT)
      ,referenced_class          = CAST(NULL AS TINYINT)
      ,referenced_class_desc     = CAST(NULL AS NVARCHAR(60))   COLLATE Latin1_General_100_CI_AI
      ,referenced_server_name    = CAST(NULL AS NVARCHAR(200))  COLLATE Latin1_General_100_CI_AI
      ,referenced_database_name  = CAST(NULL AS NVARCHAR(200))  COLLATE Latin1_General_100_CI_AI
      ,referenced_schema_name    = CAST(NULL AS NVARCHAR(200))  COLLATE Latin1_General_100_CI_AI
      ,referenced_entity_name    = CAST(NULL AS NVARCHAR(200))  COLLATE Latin1_General_100_CI_AI
      ,referenced_id             = CAST(NULL AS BIGINT)
      ,referenced_type           = CAST(NULL AS NVARCHAR(2))    COLLATE Latin1_General_100_CI_AI
      ,referenced_minor_id       = CAST(NULL AS BIGINT)
      ,is_caller_dependent       = CAST(NULL AS BIT)
      ,is_ambiguous              = CAST(NULL AS BIT)
  INTO [##SQLXL_Index_sys_sql_expression_dependencies];

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_sql_expression_dependencies]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[sql_expression_dependencies]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_sys_sql_expression_dependencies] WITH (TABLOCKX)
SELECT database_id                  = DB_ID()
      ,ed.referencing_id
      ,referencing_type             = obj_i.type COLLATE Latin1_General_100_CI_AI
      ,ed.referencing_minor_id
      ,ed.referencing_class
      ,ed.referencing_class_desc                 COLLATE Latin1_General_100_CI_AI
      ,ed.is_schema_bound_reference
      ,ed.referenced_class
      ,ed.referenced_class_desc                  COLLATE Latin1_General_100_CI_AI
      ,ed.referenced_server_name                 COLLATE Latin1_General_100_CI_AI
      ,ed.referenced_database_name               COLLATE Latin1_General_100_CI_AI
      ,ed.referenced_schema_name                 COLLATE Latin1_General_100_CI_AI
      ,ed.referenced_entity_name                 COLLATE Latin1_General_100_CI_AI
      ,ed.referenced_id
      ,referenced_type              = obj_d.type COLLATE Latin1_General_100_CI_AI
      ,ed.referenced_minor_id
      ,ed.is_caller_dependent
      ,ed.is_ambiguous
  FROM [sys].[sql_expression_dependencies] AS ed WITH (READUNCOMMITTED)
  JOIN [##SQLXL_Index_sys_objects] AS obj_i
    ON DB_ID()           = obj_i.database_id
   AND ed.referencing_id = obj_i.object_id
  JOIN [##SQLXL_Index_sys_objects] AS obj_d
    ON DB_ID()           = obj_d.database_id
   AND ed.referenced_id  = obj_d.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_sql_expression_dependencies]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[sql_expression_dependencies]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[columns] and other column-level management views'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[columns]
                [sys].[types]
                [sys].[identity_columns]
                [sys].[computed_columns]
                [sys].[sequences] (with help from [##SQLXL_Index_sys_objects] captured previously)
                [sys].[sql_expression_dependencies]

 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_columns];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2016+, Azure SQL Database -------------------------------------
       generated_always_type               = CONVERT(TINYINT      ,NULL)
      ,generated_always_type_desc          = CONVERT(NVARCHAR(200),NULL) COLLATE Latin1_General_100_CI_AI
      ,encryption_type                     = CONVERT(INT          ,NULL)
      ,encryption_type_desc                = CONVERT(NVARCHAR(200),NULL) COLLATE Latin1_General_100_CI_AI
      ,encryption_algorithm_name           = CONVERT(NVARCHAR(200),NULL) COLLATE Latin1_General_100_CI_AI
      ,column_encryption_key_id            = CONVERT(INT          ,NULL)
      ,column_encryption_key_database_name = CONVERT(NVARCHAR(200),NULL) COLLATE Latin1_General_100_CI_AI
       -- SQL 2017+ ---------------------------------------------------------
      ,is_hidden                           = CONVERT(BIT          ,NULL)
      ,is_masked                           = CONVERT(BIT          ,NULL)
      ,graph_type                          = CONVERT(INT          ,NULL)
      ,graph_type_desc                     = CONVERT(NVARCHAR(200),NULL) COLLATE Latin1_General_100_CI_AI
      ,last_used_value                     = CONVERT(BIGINT       ,NULL)
       -- 2022+, Azure SQL Database -----------------------------------------
      ,is_data_deletion_filter_column      = CONVERT(BIT          ,NULL)
      ,ledger_view_column_type             = CONVERT(TINYINT      ,NULL)
      ,ledger_view_column_type_desc        = CONVERT(NVARCHAR(200),NULL) COLLATE Latin1_General_100_CI_AI
      ,is_dropped_ledger_table_column      = CONVERT(BIT          ,NULL)
)'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_columns] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_columns]')
    + N'
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add columns from [sys].[columns],[types],[identity_columns],[computed_columns],[sequences],[sql_expression_dependencies]
SELECT database_id             = DB_ID()
      ,object_id               = c.object_id
      ,name                    = c.name                                              COLLATE Latin1_General_100_CI_AI
      ,c.column_id
      ,c.system_type_id
      ,c.user_type_id
      ,max_length              = c.max_length
      ,max_length_unicode      = CASE WHEN c.system_type_id IN ( 99 -- NTEXT
                                                               ,231 -- NVARCHAR
                                                               ,239 -- NCHAR
                                                               )
                                       AND c.max_length <> - 1
                                      THEN c.max_length / 2
                                      ELSE NULL
                                 END
      ,c.precision
      ,c.scale
      ,collation_name          = c.collation_name                                    COLLATE Latin1_General_100_CI_AI
      ,c.is_nullable
      ,c.is_ansi_padded
      ,c.is_rowguidcol
      ,c.is_identity
      ,c.is_computed
      ,c.is_filestream
      ,c.is_replicated
      ,c.is_non_sql_subscribed
      ,c.is_merge_published
      ,c.is_dts_replicated
      ,c.is_xml_document
--    ,c.is_json_document                                   --<FUTURE> JSON
      ,c.xml_collection_id
--    ,c.json_collection_id                                 --<FUTURE> JSON
      ,c.default_object_id
      ,c.rule_object_id
      ,c.is_sparse
      ,c.is_column_set
      ,uses_database_collation    = CAST(CASE WHEN c.collation_name IS NOT NULL
                                               AND d.collation_name IS NOT NULL
                                              THEN CASE WHEN c.collation_name        COLLATE Latin1_General_100_CI_AI
                                                           = d.collation_name        COLLATE Latin1_General_100_CI_AI
                                                        THEN 1
                                                        ELSE 0
                                                   END
                                              ELSE NULL
                                         END AS BIT)
       -- SQL 2016+ --------------------------------------------------
      ,generated_always_type
      ,generated_always_type_desc          = generated_always_type_desc              COLLATE Latin1_General_100_CI_AI
      ,encryption_type
      ,encryption_type_desc                = encryption_type_desc                    COLLATE Latin1_General_100_CI_AI
      ,encryption_algorithm_name           = encryption_algorithm_name               COLLATE Latin1_General_100_CI_AI
      ,column_encryption_key_id
      ,column_encryption_key_database_name = column_encryption_key_database_name     COLLATE Latin1_General_100_CI_AI
       -- SQL 2017+ --------------------------------------------------
      ,is_hidden
      ,is_masked
      ,graph_type
      ,graph_type_desc                     = graph_type_desc                         COLLATE Latin1_General_100_CI_AI
       -- SQL 2022+, SQL Database ------------------------------------
      ,ledger_view_column_type
      ,ledger_view_column_type_desc        = ledger_view_column_type_desc            COLLATE Latin1_General_100_CI_AI
      ,is_dropped_ledger_table_column
      ,is_data_deletion_filter_column
      ----------------------------------------------------------------
      -- [COLUMNPROPERTY] function
      -- <FUTURE> add below to diagnostics, prescription, and display
      ----------------------------------------------------------------
      ,IsDeterministic      = CAST(COLUMNPROPERTY(c.object_id,c.name,N''IsDeterministic''     ) AS BIT)
      ,IsFulltextIndexed    = CAST(COLUMNPROPERTY(c.object_id,c.name,N''IsFulltextIndexed''   ) AS BIT)
      ,IsIdNotForRepl       = CAST(COLUMNPROPERTY(c.object_id,c.name,N''IsIdNotForRepl''      ) AS BIT)
      ,IsIndexable          = CAST(COLUMNPROPERTY(c.object_id,c.name,N''IsIndexable''         ) AS BIT)
      ,IsPrecise            = CAST(COLUMNPROPERTY(c.object_id,c.name,N''IsPrecise''           ) AS BIT)
      ,IsSystemVerified     = CAST(COLUMNPROPERTY(c.object_id,c.name,N''IsSystemVerified''    ) AS BIT)
      ,IsXmlIndexable       = CAST(COLUMNPROPERTY(c.object_id,c.name,N''IsXmlIndexable''      ) AS BIT)
      ,StatisticalSemantics = CAST(COLUMNPROPERTY(c.object_id,c.name,N''StatisticalSemantics'') AS BIT)
      ,SystemDataAccess     = CAST(COLUMNPROPERTY(c.object_id,c.name,N''SystemDataAccess''    ) AS BIT)
      ,UserDataAccess       = CAST(COLUMNPROPERTY(c.object_id,c.name,N''UserDataAccess''      ) AS BIT)
      ,UsesAnsiTrim         = CAST(COLUMNPROPERTY(c.object_id,c.name,N''UsesAnsiTrim''        ) AS BIT)
      ----------------------------------------------------------------
      -- [sys].[types]
      ----------------------------------------------------------------
      ,user_type_name                      = typ.user_type_name                      COLLATE Latin1_General_100_CI_AI
      ,system_type_name                    = typ.system_type_name                    COLLATE Latin1_General_100_CI_AI
      ,typ.is_assembly_type
      ,typ.is_user_defined
      ----------------------------------------------------------------
      -- [sys].[identity_columns]
      ----------------------------------------------------------------
      ,seed_value                          = CASE WHEN ISNUMERIC(CONVERT(NVARCHAR(20),id.seed_value)) = 1
                                                  THEN  CONVERT(BIGINT,CONVERT(NVARCHAR(20),id.seed_value))
                                                  ELSE NULL
                                             END
      ,increment_value                     = CASE WHEN ISNUMERIC(CONVERT(NVARCHAR(20),id.increment_value)) = 1
                                                  THEN  CONVERT(BIGINT,CONVERT(NVARCHAR(20),id.increment_value))
                                                  ELSE NULL
                                             END
      ,last_value                          = CASE WHEN ISNUMERIC(CONVERT(NVARCHAR(20),id.last_value)) = 1
                                                  THEN  CONVERT(BIGINT,CONVERT(NVARCHAR(20),id.last_value))
                                                  ELSE NULL
                                             END
      ,id.is_not_for_replication
      ----------------------------------------------------------------
      -- [sys].[computed_columns]
      ----------------------------------------------------------------
      ,definition                 = CAST(LEFT(cc.definition,4000) AS NVARCHAR(4000)) COLLATE Latin1_General_100_CI_AI
      ,is_persisted               = cc.is_persisted
      ,uses_sql_proc              = CAST(COALESCE(cc.uses_sql_proc,0) AS BIT)
      ,uses_sql_ftn               = CAST(COALESCE(cc.uses_sql_ftn ,0) AS BIT)
      ,uses_sql_mthd              = CAST(COALESCE(cc.uses_sql_mthd,0) AS BIT)
      ,computed_column_definition = CAST(LEFT( IIF(cc.uses_sql_proc = 1,N''*USES PROC* '',N'''')
                                             + IIF(cc.uses_sql_ftn  = 1,N''*USES FTN* '' ,N'''')
                                             + IIF(cc.uses_sql_mthd = 1,N''*USES MTHD* '',N'''')
                                             + IIF(cc.is_persisted            = 1,N'''',N''*NOT PERSISTED* '')
                                             + IIF(cc.uses_database_collation = 1,N'''',N''*NOT DB COLLATED* '')
                                             + IIF((   cc.uses_sql_proc           = 1
                                                    OR cc.uses_sql_ftn            = 1
                                                    OR cc.uses_sql_mthd           = 1
                                                    OR cc.is_persisted            = 1
                                                    OR cc.uses_database_collation = 1
                                                   ),CHAR(096),N'''') -- add place holder for excel line feed
                                             + cc.definition
                                             ,4000)
                                        AS NVARCHAR(4000))                           COLLATE Latin1_General_100_CI_AI
      ----------------------------------------------------------------
      -- [sys].[sequences]
      ----------------------------------------------------------------
      ,is_sequence             = CAST(IIF(dep.referenced_id IS NOT NULL,1,0) AS BIT)
      ,seq_object_id           = dep.referenced_id
      ,seq_name                = obj_seq.name                                        COLLATE Latin1_General_100_CI_AI
      ,seq_definition          = obj_seq.definition                                  COLLATE Latin1_General_100_CI_AI
      ,seq_user_type_name      = seq_typ.name                                        COLLATE Latin1_General_100_CI_AI
      ,seq_start_value         = obj_seq.start_value
      ,seq_increment           = obj_seq.increment
      ,seq_minimum_value       = obj_seq.minimum_value
      ,seq_maximum_value       = obj_seq.maximum_value
      ,seq_is_cycling          = obj_seq.is_cycling
      ,seq_is_cached           = obj_seq.is_cached
      ,seq_cache_size          = obj_seq.cache_size
      ,seq_current_value       = obj_seq.current_value
      ,seq_is_exhausted        = obj_seq.is_exhausted
      ,seq_last_used_value     = obj_seq.last_used_value
      ----------------------------------------------------------------
      -- Statistics - additional columns to be used/updated later
      ----------------------------------------------------------------
      ,stats_target_name          = QUOTENAME(c.name)                                COLLATE Latin1_General_100_CI_AI
      ,all_density                = CONVERT(FLOAT,NULL)
      ,average_length             = CONVERT(FLOAT,NULL)
      ,Uniqueness                 = CONVERT(FLOAT,NULL)
      ,histogram_steps            = CONVERT(INT,NULL)
      ,param_sniff                = CONVERT(FLOAT,NULL)
      ,stats_name                 = CONVERT(NVARCHAR(130),NULL)                      COLLATE Latin1_General_100_CI_AI
      ,stats_no_recompute         = CONVERT(BIT,NULL)
      ,stats_filter_definition    = CONVERT(NVARCHAR(4000),NULL)                     COLLATE Latin1_General_100_CI_AI
      ,stats_is_incremental       = CONVERT(BIT,NULL)
      ,stats_has_persisted_sample = CONVERT(BIT,NULL)
      ,stats_auto_drop            = CONVERT(BIT,NULL)
      -----------------------------------------------------------------------------------------------------------------
      -- additional SQLXL columns to be used later
      -----------------------------------------------------------------------------------------------------------------
      ,is_newsequentialid         = CAST(IIF(obj_seq.definition = N''(newsequentialid())'',1,0) AS BIT)
      ,is_newid                   = CAST(IIF(obj_seq.definition = N''(newid())''          ,1,0) AS BIT)
      ,is_columnstore_eligible    = CAST(CASE WHEN      typ.is_assembly_type =  1 -- geography,geometry,hierarchyid
                                                OR (    c.system_type_id IN ( 34  -- image
                                                                            , 35  -- text
                                                                            , 36  -- uniqueidentifier
                                                                            , 98  -- sqlvariant
                                                                            , 99  -- ntext
                                                                            ,189  -- timestamp/rowversion
                                                                            ,241  -- XML index
                                                                            ,999  -- JSON index     -- <FUTURE> JSON
                                                                            )
                                                   )
                                                OR (    c.system_type_id IN (231  -- nvarchar
                                                                            ,167  -- varchar
                                                                            ,165  -- varbinary
                                                                            )
                                                    AND c.max_length      =  -1   -- MAX length
                                                   )
                                                OR (    c.is_sparse       =   1
                                                    OR  c.is_filestream   =   1
                                                    OR  c.is_computed     =   1
                                                   )
                                              THEN 0
                                              ELSE 1
                                         END AS BIT)
      ,data_type_abbr_len = CONVERT(NVARCHAR(10)
                                   ,CASE typ.system_type_name
                                         WHEN NULL                  THEN N''''
                                         -------------------------------------
                                         WHEN N''tinyint''          THEN N''ti''
                                         WHEN N''smallint''         THEN N''si''
                                         WHEN N''int''              THEN N''i''
                                         WHEN N''bigint''           THEN N''bi''
                                         -------------------------------------
                                         WHEN N''char''             THEN N''c''
                                         WHEN N''nchar''            THEN N''nc''
                                         WHEN N''varchar''          THEN N''vc''
                                         WHEN N''nvarchar''         THEN N''nv''
                                         WHEN N''text''             THEN N''tx''
                                         WHEN N''ntext''            THEN N''nt''
                                         -------------------------------------
                                         WHEN N''date''             THEN N''d''
                                         WHEN N''smalldatetime''    THEN N''sdt''
                                         WHEN N''datetime''         THEN N''dt''
                                         WHEN N''datetime2''        THEN N''dtt''
                                         WHEN N''datetimeoffset''   THEN N''dto''
                                         -------------------------------------
                                         WHEN N''time''             THEN N''tm''
                                         WHEN N''timestamp''        THEN N''ts''
                                         -------------------------------------
                                         WHEN N''money''            THEN N''m''  -- MONEY not missing index
                                         WHEN N''smallmoney''       THEN N''sm''
                                         -------------------------------------
                                         WHEN N''geography''        THEN N''gg''
                                         WHEN N''geometry''         THEN N''gm''
                                         WHEN N''hierarchyid''      THEN N''h''
                                         -------------------------------------
                                         WHEN N''decimal''          THEN N''de''
                                         WHEN N''binary''           THEN N''bn''
                                         WHEN N''float''            THEN N''f''
                                         WHEN N''numeric''          THEN N''num''
                                         WHEN N''real''             THEN N''r''
                                         -------------------------------------
                                         WHEN N''bit''              THEN N''bit''
                                         WHEN N''image''            THEN N''im''
                                         WHEN N''sql_variant''      THEN N''v''
                                         WHEN N''uniqueidentifier'' THEN N''uid''
                                         WHEN N''varbinary''        THEN N''vb''
                                         WHEN N''xml''              THEN N''xml''
                                         WHEN N''json''             THEN N''jsn''
                                         ELSE COALESCE(typ.system_type_name,''###system_type_name NOT FOUND###'')
                                    END  -- CASE typ.system_type_name
                                   +CASE WHEN typ.system_type_name = N''BIT''
                                         THEN N''''
                                         WHEN c.max_length = -1
                                         THEN N''MAX''
                                         WHEN c.system_type_id IN (  99 -- NTEXT
                                                                   ,231 -- NVARCHAR
                                                                   ,239 -- NCHAR
                                                                   )
                                         THEN CAST(c.max_length / 2 AS NVARCHAR(20)) -- "MAX" lengths filtered out above
                                         WHEN c.max_length > 0
                                         THEN CAST(c.max_length AS NVARCHAR(20))
                                         ELSE N''<??>''
                                    END
                                   )                                                 COLLATE Latin1_General_100_CI_AI
                                   -- end CONVERT(NVARCHAR(10)

      ,indexed_columns            = CONVERT(NVARCHAR(4000),NULL)                     COLLATE Latin1_General_100_CI_AI
      ,indexed_column_usage_sort  = CONVERT(INT,NULL)
      ,column_descriptors         = CONVERT(NVARCHAR(4000),NULL)                     COLLATE Latin1_General_100_CI_AI

  FROM (-- Get database defined COLLATION
        SELECT collation_name
          FROM [##SQLXL_Index_sys_databases]
         WHERE DB_ID() = database_id
       ) AS d
 CROSS
  JOIN [sys].[columns] AS c WITH (READUNCOMMITTED)
  ------------------------------------------------------------------------------------------------------------------------------------------
  JOIN [##SQLXL_Index_sys_objects] AS obj            -- filter out system objects
    ON DB_ID()     = obj.database_id
   AND c.object_id = obj.object_id
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- get system data types for all columns
        SELECT typ.user_type_id
              ,user_type_name     = typ.name
              ,typ.system_type_id
              ,system_type_name   = COALESCE(s.system_type_name,typ.name)
              ,typ.principal_id
              ,typ.is_user_defined
              ,typ.is_assembly_type
              ,typ.default_object_id
              ,typ.rule_object_id
          FROM [sys].[types] AS typ WITH (READUNCOMMITTED)
          LEFT OUTER
          JOIN (-- get system type name in case of multiple user_type_id sharing system_type_id
                SELECT system_type_id
                      ,system_type_name = name
                  FROM [sys].[types] WITH (READUNCOMMITTED)
                 WHERE system_type_id = user_type_id
               ) AS s
            ON typ.system_type_id = s.system_type_id
         WHERE typ.is_table_type  = 0                -- no need for TABLE TYPEs
       ) AS typ
    ON c.user_type_id = typ.user_type_id
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- additional columns only from [sys].[identity_columns]
        -- Required as sub-select since all columns from [sys].[columns] are also included in this DMV
        SELECT object_id
              ,column_id
              ,seed_value
              ,increment_value
              ,last_value
              ,is_not_for_replication
          FROM [sys].[identity_columns] WITH (READUNCOMMITTED)
       ) AS id
    ON c.object_id = id.object_id
   AND c.column_id = id.column_id
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- columns from [sys].[computed_columns], cross-referenced to code for FUNCTIONs and PROCEDUREs
        SELECT object_id
              ,column_id
              ,definition
              ,uses_database_collation
              ,is_persisted
              ,uses_sql_proc = pf.uses_sql_proc
              ,uses_sql_ftn  = pf.uses_sql_ftn
              ,uses_sql_mthd = CAST(CASE WHEN pf.uses_sql_proc = 1 OR pf.uses_sql_ftn = 1
                                         THEN 0
                                         ELSE CASE WHEN CHARINDEX(N''].['',cc.definition COLLATE Latin1_General_100_CI_AI) > 0
                                                   THEN 1
                                                   ELSE 0
                                              END
                                    END AS BIT)
          FROM [sys].[computed_columns] AS cc WITH (READUNCOMMITTED)
         OUTER
         APPLY (-- look for computed columns using FUNCTIONS,PROCEDURES, or METHODS
                SELECT uses_sql_ftn  = SUM(CASE WHEN obj.type IN (N''AF'' -- Aggregate function (CLR)
                                                                 ,N''FN'' -- SQL scalar function
                                                                 ,N''FS'' -- Assembly (CLR) scalar-function
                                                                 ,N''FT'' -- Assembly (CLR) table-valued function
                                                                 ,N''IF'' -- SQL inline table-valued function (TVF)
                                                                 ,N''TF'' -- SQL table-valued-function SQL 2012+
                                                                 )
                                                THEN 1
                                                ELSE 0
                                           END)
                      ,uses_sql_proc = SUM(CASE WHEN obj.type IN (N''P''  -- SQL Stored Procedure
                                                                 ,N''PC'' -- Assembly (CLR) stored-procedure
                                                                 ,N''X''  -- Extended stored procedure
                                                                 )
                                                THEN 1
                                                ELSE 0
                                           END)
                      ,uses_sql_mthd = SUM(CASE WHEN obj.type IS NULL
                                                THEN 1
                                                ELSE 0
                                           END)
                  FROM [##SQLXL_Index_sys_objects] AS obj
                 WHERE DB_ID() = obj.database_id
                   AND obj.type IN (N''AF'' -- Aggregate function (CLR)
                                   ,N''FN'' -- SQL scalar function
                                   ,N''FS'' -- Assembly (CLR) scalar-function
                                   ,N''FT'' -- Assembly (CLR) table-valued function
                                   ,N''IF'' -- SQL inline table-valued function (TVF)
                                   ,N''TF'' -- SQL table-valued-function SQL 2012+
                                   )
                   AND CHARINDEX(obj.schema_name + N''.'' + obj.name COLLATE Latin1_General_100_CI_AI
                                ,REPLACE(
                                 REPLACE(cc.definition               COLLATE Latin1_General_100_CI_AI
                                        ,N''['',N'''')
                                        ,N'']'',N'''')
                                ) > 0
               ) AS pf
       ) AS cc
    ON c.object_id = cc.object_id
   AND c.column_id = cc.column_id
  ---------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- columns with 1 or more check constraints
        SELECT database_id,object_id
              ,parent_column_id
          FROM [##SQLXL_Index_sys_objects]
         WHERE type = N''C''
         GROUP BY
               database_id,object_id
              ,parent_column_id
       ) AS check_constraint_col
    ON DB_ID()             = check_constraint_col.database_id
   AND c.default_object_id = check_constraint_col.object_id
   AND c.column_id         = check_constraint_col.parent_column_id
  ---------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects]                     AS odf -- default object, looking for sequences. Also filter out system objects
    ON DB_ID()             = odf.database_id
   AND c.default_object_id = odf.object_id
   AND c.column_id         = odf.parent_column_id
   AND N''D''              = odf.type                         -- default (constraint or stand-alone)
  ---------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_sql_expression_dependencies] AS dep                            -- object dependencies, looking for sequences
    ON DB_ID()             = dep.database_id
   AND c.default_object_id = dep.referencing_id
   AND 1                   = dep.referenced_class
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects]                     AS obj_seq                            -- sequence object
    ON DB_ID()             = obj_seq.database_id
   AND dep.referenced_id   = obj_seq.object_id
  LEFT OUTER
  JOIN [sys].[types]                                   AS seq_typ WITH (READUNCOMMITTED) -- user data type for sequence object
    ON obj_seq.user_type_id    = seq_typ.user_type_id

) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_columns]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[columns],[identity_columns],[computed_columns],[sequences]'
                                             + N',[sql_expression_dependencies]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;


/******************************************************************************************************************************************\
 *Task* Collect [sys].[edge_constraint_clauses] SQL 2019+
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_edge_constraint_clauses];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id    = CONVERT(INT,NULL)
         ,object_id      = CONVERT(INT,NULL)
         ,from_object_id = CONVERT(INT,NULL)
         ,to_object_id   = CONVERT(INT,NULL)
         ,clause_number  = CONVERT(INT,NULL)
     INTO [##SQLXL_Index_sys_edge_constraint_clauses]
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_edge_constraint_clauses]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[edge_constraint_clauses]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_sys_edge_constraint_clauses] WITH (TABLOCKX)
SELECT database_id    = DB_ID()
      ,object_id
      ,from_object_id
      ,to_object_id
      ,clause_number
  FROM [sys].[edge_constraint_clauses] WITH (READUNCOMMITTED)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_edge_constraint_clauses]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[edge_constraint_clauses] - SQL 2019+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect Index information
 [sys].[spatial_indexes] & [sys.][spatial_index_tessellations]
 These do not exist in Azure SQL Database & Azure SQL Managed Instances per BOL as of 12/13/2024
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_spatial_indexes];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id             = CAST(NULL AS BIGINT)
         ,object_id               = CAST(NULL AS BIGINT)
         ,index_id                = CAST(NULL AS BIGINT)
         ,spatial_index_type      = CAST(NULL AS TINYINT)
         ,spatial_index_type_desc = CAST(NULL AS NVARCHAR(60))  COLLATE Latin1_General_100_CI_AI
         ,tessellation_scheme     = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,bounding_box_xmin       = CAST(NULL AS FLOAT(53))
         ,bounding_box_ymin       = CAST(NULL AS FLOAT(53))
         ,bounding_box_xmax       = CAST(NULL AS FLOAT(53))
         ,bounding_box_ymax       = CAST(NULL AS FLOAT(53))
         ,level_1_grid            = CAST(NULL AS SMALLINT)
         ,level_1_grid_desc       = CAST(NULL AS NVARCHAR(60))  COLLATE Latin1_General_100_CI_AI
         ,level_2_grid            = CAST(NULL AS SMALLINT)
         ,level_2_grid_desc       = CAST(NULL AS NVARCHAR(60))  COLLATE Latin1_General_100_CI_AI
         ,level_3_grid            = CAST(NULL AS SMALLINT)
         ,level_3_grid_desc       = CAST(NULL AS NVARCHAR(60))  COLLATE Latin1_General_100_CI_AI
         ,level_4_grid            = CAST(NULL AS SMALLINT)
         ,level_4_grid_desc       = CAST(NULL AS NVARCHAR(60))  COLLATE Latin1_General_100_CI_AI
         ,cells_per_object        = CAST(NULL AS BIGINT)
     INTO [##SQLXL_Index_sys_spatial_indexes]
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_spatial_indexes]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF  object_id(N''[sys].[spatial_indexes]'')             IS NOT NULL -- check for object existence
AND object_id(N''[sys].[spatial_index_tessellations]'') IS NOT NULL -- check for object existence
INSERT
  INTO [##SQLXL_Index_sys_spatial_indexes] WITH (TABLOCKX)
SELECT database_id             = DB_ID()
      ,si.object_id
      ,si.index_id
      ,si.spatial_index_type
      ,spatial_index_type_desc = si.spatial_index_type_desc COLLATE Latin1_General_100_CI_AI
      ,tessellation_scheme     = si.tessellation_scheme     COLLATE Latin1_General_100_CI_AI
      ,sit.bounding_box_xmin
      ,sit.bounding_box_ymin
      ,sit.bounding_box_xmax
      ,sit.bounding_box_ymax
      ,sit.level_1_grid
      ,sit.level_1_grid_desc                                COLLATE Latin1_General_100_CI_AI
      ,sit.level_2_grid
      ,sit.level_2_grid_desc                                COLLATE Latin1_General_100_CI_AI
      ,sit.level_3_grid
      ,sit.level_3_grid_desc                                COLLATE Latin1_General_100_CI_AI
      ,sit.level_4_grid
      ,sit.level_4_grid_desc                                COLLATE Latin1_General_100_CI_AI
      ,sit.cells_per_object
  FROM [sys].[spatial_indexes]             AS si  WITH (READUNCOMMITTED)
  LEFT OUTER
  JOIN [sys].[spatial_index_tessellations] AS sit WITH (READUNCOMMITTED)
    ON si.object_id = sit.object_id
   AND si.index_id  = sit.index_id

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_spatial_indexes]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[spatial_indexes]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[xml_indexes]
 This does not exist in Azure SQL Database & Azure SQL Managed Instances per BOL as of 12/13/2024
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_xml_indexes];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id                = CAST(NULL AS BIGINT)
         ,object_id                  = CAST(NULL AS BIGINT)
         ,index_id                   = CAST(NULL AS BIGINT)
         ,xml_index_type             = CAST(NULL AS TINYINT)
         ,xml_index_type_description = CAST(NULL AS NVARCHAR(60)) COLLATE Latin1_General_100_CI_AI
         ,using_xml_index_id         = CAST(NULL AS BIGINT)
         ,secondary_type             = CAST(NULL AS CHAR(1))      COLLATE Latin1_General_100_CI_AI
         ,secondary_type_desc        = CAST(NULL AS NVARCHAR(60)) COLLATE Latin1_General_100_CI_AI
         ,path_id                    = CAST(NULL AS BIGINT)
     INTO [##SQLXL_Index_sys_xml_indexes]
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_xml_indexes]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[xml_indexes]'') IS NOT NULL      -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_sys_xml_indexes] WITH (TABLOCKX)
SELECT database_id                = DB_ID()
      ,object_id
      ,index_id
      ,xml_index_type
      ,xml_index_type_description = xml_index_type_description COLLATE Latin1_General_100_CI_AI
      ,using_xml_index_id
      ,secondary_type
      ,secondary_type_desc        = secondary_type_desc        COLLATE Latin1_General_100_CI_AI
      ,path_id
  FROM [sys].[xml_indexes] WITH (READUNCOMMITTED)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_xml_indexes]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[xml_indexes]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;

/******************************************************************************************************************************************\
 Collect [sys].[hash_indexes]
 Applies to: SQL Server 2014 (12.x) and later
             Azure SQL Database
             Azure SQL Managed Instance
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_hash_indexes];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP(0)
          database_id  = CAST(NULL AS BIGINT)
         ,object_id    = CAST(NULL AS BIGINT)
         ,index_id     = CAST(NULL AS BIGINT)
         ,type         = CAST(NULL AS TINYINT)
         ,bucket_count = CAST(NULL AS BIGINT)
     INTO [##SQLXL_Index_sys_hash_indexes]
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_hash_indexes]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[hash_indexes]'') IS NOT NULL         -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_sys_hash_indexes] WITH (TABLOCKX)
SELECT database_id  = DB_ID()
      ,object_id
      ,index_id
      ,type
      ,bucket_count
  FROM [sys].[hash_indexes] WITH (READUNCOMMITTED)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_hash_indexes]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@ERROR > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[hash_indexes]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[indexes]
 Includes previously captured [sys].[spatial_indexes], [sys].[spatial_index_tessellations], [sys].[xml_indexes], [sys].[hash_indexes]

 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_indexes];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @Pattern  NVARCHAR(15) = ''%[^'' + NCHAR(009) + NCHAR(010) + NCHAR(013) + NCHAR(032) + N'']%'' COLLATE Latin1_General_100_CI_AI;
                               -- Includes Tabs, carriage returns, line feeds, spaces

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2016+ --------------------------------------
       compression_delay               = CONVERT(INT,NULL)
       -- SQL 2017+ --------------------------------------
      ,is_ignored_in_optimization      = CONVERT(BIT,NULL)
      ,suppress_dup_key_messages       = CONVERT(BIT,NULL)
       -- SQL 2019+ --------------------------------------
      ,optimize_for_sequential_key     = CONVERT(BIT,NULL)
       -- Azure SQL Database -----------------------------
      ,auto_created                    = CONVERT(BIT,NULL)
)'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_indexes] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_indexes]')

+ N'
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add columns from [sys].[indexes],[spatial_indexes],[spatial_index_tessellations],[xml_indexes],[hash_indexes]
SELECT database_id                 = DB_ID()
      ,object_id                   = i.object_id
      ,name                        = i.name                             COLLATE Latin1_General_100_CI_AI
      ,i.index_id
      ,type                        = CAST(i.type AS NVARCHAR(2))        COLLATE Latin1_General_100_CI_AI
      ,type_desc                   = i.type_desc                        COLLATE Latin1_General_100_CI_AI
      ----------------------------------------------------------------------------------------------
      ,sub_type                    = CAST(COALESCE(si.spatial_index_type
                                                  ,xi.xml_index_type
                                                  ,0
                                                  ) AS SMALLINT)
      ,sub_type_desc               = COALESCE(si.spatial_index_type_desc
                                             ,xi.xml_index_type_description
                                             )                          COLLATE Latin1_General_100_CI_AI
      ----------------------------------------------------------------------------------------------
      ,is_system_named             = CONVERT(TINYINT,0)     -- default value zero = not system named
      ,i.is_unique
      ,i.data_space_id
      ,i.ignore_dup_key
      ,i.is_primary_key
      ,i.is_unique_constraint
      ,fill_factor                 = IIF(i.fill_factor = 0,100,i.fill_factor)
      ,i.is_padded
      ,i.is_disabled
      ,i.is_hypothetical
      ,i.allow_row_locks
      ,i.allow_page_locks
      ,i.has_filter
      ,filter_definition           = CAST(
                                     LEFT(-- trim off leading tabs,carriage returns,line feeds, spaces
                                     STUFF(i.filter_definition
                                          ,1
                                          ,ISNULL(NULLIF(PATINDEX(@Pattern -- Includes Tabs, carriage returns, line feeds, spaces
                                                                 ,i.filter_definition
                                                                 )
                                                        ,0) - 1
                                                 ,0)
                                          ,N''''
                                          )
                                         ,4000) AS NVARCHAR(4000))     COLLATE Latin1_General_100_CI_AI
      ,compression_delay
      ,is_ignored_in_optimization        -- <FUTURE> this column appears in [spatial_indexes],[xml_indexes],[indexes],[hash_indexes]

      ,suppress_dup_key_messages
      ,auto_created
      ,optimize_for_sequential_key
      ,is_graph_table              = CAST(IIF(obj.is_node = 1 OR obj.is_edge = 1,1,0) AS BIT)
      ----------------------------------------------------------------------------------------------
      ,si_tessellation_scheme      = si.tessellation_scheme             COLLATE Latin1_General_100_CI_AI
      ----------------------------------------------------------------------------------------------
      -- other spatial_index_tesselation columns left in [##SQLXL_Index_sys_spatial_indexes]
      ----------------------------------------------------------------------------------------------
      ,xml_index_type              = xi.xml_index_type
      ,xml_index_type_description  = xi.xml_index_type_description      COLLATE Latin1_General_100_CI_AI
      ,xml_using_xml_index_id      = xi.using_xml_index_id
      ,xml_secondary_type          = xi.secondary_type                  COLLATE Latin1_General_100_CI_AI
      ,xml_secondary_type_desc     = xi.secondary_type_desc             COLLATE Latin1_General_100_CI_AI
      ,xml_path_id                 = xi.path_id -- NULL for all XML indexes except secondary selective XML index.
                                                -- Else, the ID of the promoted path over which the secondary selective XML index
                                                -- is built. This value is the same value AS path_id from
                                                -- sys selective_xml_index_paths system view.
      ----------------------------------------------------------------------------------------------
      ,hi_bucket_CNT               = bucket_count           -- hash index bucket count
      -- Other index property columns to be updated later
      ,key_ordinal_CNT            = CAST(NULL AS BIGINT)
      ,key_null_CNT               = CAST(NULL AS BIGINT)
      ,included_columns_CNT       = CAST(NULL AS BIGINT)
      ,is_partitioned             = CAST(NULL AS BIT)
      ,descending_key_CNT         = CAST(NULL AS BIGINT)
      ,filtered_column_CNT        = CAST(NULL AS BIGINT)
      ,inc_overlap_column_list    = CAST(NULL AS NVARCHAR(4000))
      ----------------------------------------------------------------------------------------------

  FROM [sys].[indexes]                                 AS i   WITH (READUNCOMMITTED)
  JOIN [##SQLXL_Index_sys_objects]                     AS obj -- filters out SYSTEM and other unwanted objects
    ON DB_ID()     = obj.database_id
   AND i.object_id = obj.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_spatial_indexes]             AS si -- includes [sys].[spatial_index_tessellations]
    ON obj.database_id = si.database_id
   AND obj.object_id   = si.object_id
   AND i.index_id    = si.index_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_xml_indexes]                 AS xi
    ON obj.database_id = xi.database_id
   AND obj.object_id   = xi.object_id
   AND i.index_id    = xi.index_id
--LEFT OUTER                                                 -- <FUTURE> JSON
--JOIN [##SQLXL_Index_sys_json_indexes]                AS ji -- <FUTURE> JSON
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_hash_indexes]                AS hi
    ON obj.database_id = hi.database_id
   AND obj.object_id   = hi.object_id
   AND i.index_id    = hi.index_id
   AND i.type        = hi.type
) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_indexes]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[indexes],[spatial_indexes],[spatial_index_tessellations],[xml_indexes]'
                                             + N',[hash_indexes] (2014+)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[fulltext_indexes]
 NOTE: The “incremental_timestamp” column in [sys].[fulltext_indexes is stored as a binary data type, which represents a rowversion
       (also known as timestamp). However, it’s important to note that this rowversion is not related to date and time; it’s merely an
       incrementing number used for version-stamping table rows. It does not preserve a date or time.
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_fulltext_indexes];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT property_list_id = CONVERT(INT,NULL)
)'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_fulltext_indexes] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_fulltext_indexes]')
    + N'
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add columns from [sys].[fulltext_indexes]
SELECT database_id                = DB_ID()
      -- [sys].[fulltext_indexes] -----------------------------------------------------------
      ,object_id                  = fi.object_id
      ,unique_index_id
      ,fulltext_catalog_id        = fi.fulltext_catalog_id
      ,is_enabled
      ,change_tracking_state      = change_tracking_state        COLLATE Latin1_General_100_CI_AI
      ,change_tracking_state_desc = change_tracking_state_desc   COLLATE Latin1_General_100_CI_AI
      ,has_crawl_completed
      ,crawl_type                 = crawl_type                   COLLATE Latin1_General_100_CI_AI
      ,crawl_type_desc            = crawl_type_desc              COLLATE Latin1_General_100_CI_AI
      ,crawl_start_date
      ,crawl_end_date
--    ,incremental_timestamp -- OMITTED. binary data type, which represents a rowversion
      ,stoplist_id
      ,data_space_id              = fi.data_space_ID
      ,property_list_id
  FROM [sys].[fulltext_indexes] AS fi WITH (READUNCOMMITTED)
) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_fulltext_indexes]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[fulltext_indexes]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[fulltext_catalogs]
 NOTE: per BOL, not available in Azure SQL Database
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_fulltext_catalogs];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id              = CAST(NULL AS BIGINT)
         ,fulltext_catalog_id      = CAST(NULL AS BIGINT)
         ,name                     = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,is_default               = CAST(NULL AS BIT)
         ,is_accent_sensitivity_on = CAST(NULL AS BIT)
         ,principal_id             = CAST(NULL AS BIGINT)
         ,is_importing             = CAST(NULL AS BIT)
     INTO [##SQLXL_Index_sys_fulltext_catalogs];

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_fulltext_catalogs]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[fulltext_catalogs]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_sys_fulltext_catalogs] WITH (TABLOCKX)
SELECT database_id                = DB_ID()
      ,fulltext_catalog_id
      ,name                       = name                         COLLATE Latin1_General_100_CI_AI
      ,is_default
      ,is_accent_sensitivity_on
      ,principal_id
      ,is_importing
  FROM [sys].[fulltext_catalogs] WITH (READUNCOMMITTED)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[fulltext_catalogs]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect Column information
 Collect [sys].[foreign_key_columns]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @sql            NVARCHAR(MAX)
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_foreign_key_columns];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_foreign_key_columns] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_foreign_key_columns]')
    + N'
  FROM (-- columns from [sys].[foreign_key_columns]
SELECT database_id           = DB_ID()
      ,constraint_object_id
      ,constraint_column_id
      ,parent_object_id                                                                             -- for System, History, Constraints
      ,parent_column_id
      ,referenced_object_id
      ,referenced_column_id
  FROM [sys].[foreign_key_columns] WITH (READUNCOMMITTED)
) AS qry
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_foreign_key_columns]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[foreign_key_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[index_columns]
 NOTE: Used to drive the list of columns to get statistics details for the cursored routine below
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_index_columns];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT column_store_order_ordinal = CONVERT(INT,NULL)
)'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_index_columns] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_index_columns]')
    + N'
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add list of all columns across all "index" objects
SELECT database_id                 = DB_ID()
      ,ic.object_id
      ,ic.index_id
      ,type                        = CAST(i.type AS NVARCHAR(2)) COLLATE Latin1_General_100_CI_AI
      ,i.sub_type
      ,index_column_id
      ,column_id
      ,key_ordinal
      ,partition_ordinal
      ,is_descending_key
      ,is_included_column
      ,column_store_order_ordinal
      -- For Missing index ----------------------------------------
      ,column_usage                = CAST(NULL AS NVARCHAR(40))   COLLATE Latin1_General_100_CI_AI -- also used for Missing index column usage
      -- For fulltext ---------------------------------------------
      ,type_column_id              = CAST(NULL AS BIGINT)           -- fulltext, stores the user-supplied document file extension
      ,language_id                 = CAST(NULL AS BIGINT)           -- fulltext, LCID of language whose word breaker is used to index this column.
      ,statistical_semantics       = CAST(NULL AS BIT)           -- fulltext, statistical semantics enabled in addition to full-text indexing
      -------------------------------------------------------------
      -- updated later --------------------------------------------
      -------------------------------------------------------------
      ,idx_column_display_sequence = CAST(ROW_NUMBER()              -- Update for index types "0" - "7", TVF
                                          OVER (PARTITION BY ic.object_id
                                                            ,ic.index_id
                                                            ,i.type
                                                            ,i.sub_type
                                                    ORDER BY CASE WHEN key_ordinal > 0
                                                                  THEN key_ordinal
                                                                  ELSE index_column_id
                                                             END
                                               ) AS INT)
      ,is_index_column_filtered    = CAST(0 AS BIT)                -- To flag index columns included in filter definitions
      ,idx_stats_uniqueness_prefix = CAST(CASE i.type
                                               WHEN 3  THEN N''XML'' -- XML index
                                               WHEN 4  THEN N''SPT'' -- Spatial index
                                               WHEN 5  THEN N''CCS'' -- clustered columnstore index
                                               WHEN 6  THEN N''NCS'' -- nonclustered columnstore index
                                               WHEN 7  THEN N''HSH'' -- hash index on memory optimized table
                                               WHEN 9  THEN N''JSN'' -- JSON index
                                               ELSE CASE WHEN ic.key_ordinal > 0     -- is an index key column
                                                         THEN N''>''
                                                         ELSE NULL
                                                    END
                                          END AS NVARCHAR(10))
      ,column_descriptors          = CAST(NULL AS NVARCHAR(4000))
      ,column_display_suffix       = CAST(NULL AS NVARCHAR(4000))
      ,idx_uniqueness              = CAST(NULL AS FLOAT)
      ,idx_uniqueness_3sd          = CAST(NULL AS NVARCHAR(7))
      ,col_uniqueness              = CAST(NULL AS FLOAT)
      ,stat_uniqueness             = CAST(NULL AS FLOAT)
      ,all_density                 = CAST(NULL AS FLOAT)
      ,average_length              = CAST(NULL AS FLOAT)
      ,key_sequence_column_list    = CAST(NULL AS NVARCHAR(4000))
      ,key_overlap_column_list     = CAST(NULL AS NVARCHAR(4000))
      ,inc_overlap_column_list     = CAST(NULL AS NVARCHAR(4000))

  FROM [sys].[index_columns]       AS ic WITH (READUNCOMMITTED)
  JOIN [##SQLXL_Index_sys_objects] AS obj   -- filters out unwanted system objects
    ON DB_ID()      = obj.database_id
   AND ic.object_id = obj.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_indexes] AS i
    ON DB_ID()      = i.database_id
   AND ic.object_id = i.object_id
   AND ic.index_id  = i.index_id
) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_index_columns]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[index_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[fulltext_index_columns] to [##SQLXL_Index_sys_index_columns]
<FUTURE> incorporate as UNION ALL with above
 NOTE: Foreign Key Constraints, missing indexes, and table functions handled below
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_sys_index_columns] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,index_column_id
      ,column_id
      ,key_ordinal
      ,partition_ordinal
      ,is_descending_key
      ,is_included_column
      ,idx_column_display_sequence
      ,idx_stats_uniqueness_prefix
      ,column_usage
      ,type_column_id
      ,language_id
      ,statistical_semantics
      ,column_store_order_ordinal
      )
SELECT database_id                 = DB_ID()
      ,object_id
      ,index_id                    = object_id
      ,type                        = N''T''       -- full-text index of a tabular object
      ,sub_type                    = 0
      ,index_column_id             = ROW_NUMBER()
                                     OVER (PARTITION BY object_id
                                               ORDER BY column_id
                                          )
      ,column_id                                  -- ID of the column that is part of the full-text index
      ,key_ordinal                 = ROW_NUMBER()
                                     OVER (PARTITION BY object_id
                                               ORDER BY column_id
                                          )
      ,partition_ordinal           = 0
      ,is_descending_key           = 0
      ,is_included_column          = 0
      ,idx_column_display_sequence = ROW_NUMBER()              -- update for index type "T"
                                     OVER (PARTITION BY object_id
                                               ORDER BY column_id
                                          )
      ,idx_stats_uniqueness_prefix = N''FTX''
      ,column_usage                = NULL
      ,type_column_id                             -- stores the user-supplied document file extension-".doc", ".xls", and so forth
      ,language_id                                -- LCID of language whose word breaker is used to index this full-text column. 0 = Neutral
      ,statistical_semantics                      -- 1 = This column has statistical semantics enabled in addition to full-text indexing
      ,column_store_order_ordinal  = 0
  FROM [sys].[fulltext_index_columns] WITH (READUNCOMMITTED)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_index_columns] - insert Missing & fulltext index columns'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N' Added [fulltext_index_columns] to [##SQLXL_Index_sys_index_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[extended_properties]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_extended_properties];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_extended_properties] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_extended_properties]')
    + N'
  FROM (-- columns from [sys].[extended_properties]
SELECT database_id = DB_ID()
      ,class
      ,class_desc  = class_desc                                                      COLLATE Latin1_General_100_CI_AI
      ,major_id
      ,minor_id
      ,name        = name                                                            COLLATE Latin1_General_100_CI_AI
      ,value       = CAST(LEFT(REPLACE(CONVERT(NVARCHAR(MAX),value),NCHAR(031),NCHAR(032)),4000) AS NVARCHAR(4000))
                                                                                     COLLATE Latin1_General_100_CI_AI
                   -- NOTE: source column [value] is data type SQL_VARIANT
  FROM [sys].[extended_properties] WITH (READUNCOMMITTED)
 WHERE CHARINDEX(N''MS_DiagramPane'',name) = 0
) AS qry
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_extended_properties]'
       ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[extended_properties]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect statistics DMVs
 Collect [sys].[stats]
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = N''
       ,@step_exec_dttm      DATETIME      = GETDATE()
       ,@i              INT           = 1
       ,@sql            NVARCHAR(MAX)
       ,@ssms_ads       TINYINT       = 2
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_stats];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @Pattern NVARCHAR(15) = ''%[^'' + NCHAR(009) + NCHAR(010) + NCHAR(013) + NCHAR(032) + N'']%'' COLLATE Latin1_General_100_CI_AI;
                               -- Includes Tabs, carriage returns, line feeds, spaces

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2012 --------------------------------------------------------------------
       is_temporary                 = CONVERT(BIT          ,NULL)
       -- SQL 2014 --------------------------------------------------------------------
      ,is_incremental               = CONVERT(BIT          ,NULL)
       -- SQL 2019 --------------------------------------------------------------------
      ,has_persisted_sample         = CONVERT(BIT          ,NULL)
      ,stats_generation_method      = CONVERT(INT          ,NULL)
      ,stats_generation_method_desc = CONVERT(NVARCHAR(200),NULL) COLLATE Latin1_General_100_CI_AI
       -- SQL 2022 --------------------------------------------------------------------
      ,auto_drop                    = CONVERT(BIT          ,NULL)
)'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_stats] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_stats]')
    + N'
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add columns from [sys].[stats]
SELECT database_id                  = DB_ID()
      ,object_id                    = s.object_id
      ,name                         = s.name                       COLLATE Latin1_General_100_CI_AI
      ,s.stats_id
      ,s.auto_created
      ,s.user_created
      ,s.no_recompute
      ,s.has_filter
      ,filter_definition = CAST(
                           LEFT(
                           STUFF(s.filter_definition
                                ,1
                                ,ISNULL(NULLIF(PATINDEX(@Pattern            -- trim off tabs,carriage returns,line feeds, spaces
                                                       ,s.filter_definition
                                                       )
                                              ,0) - 1
                                       ,0)
                                ,N''''
                                )
                               ,4000) AS NVARCHAR(4000))           COLLATE Latin1_General_100_CI_AI
      ,is_temporary
      ,is_incremental
      ,has_persisted_sample
      ,stats_generation_method
      ,stats_generation_method_desc = stats_generation_method_desc COLLATE Latin1_General_100_CI_AI
      ,auto_drop
  FROM [##SQLXL_Index_sys_objects] AS obj -- used to filter out stats on system objects
  JOIN [sys].[stats]               AS s   WITH (READUNCOMMITTED)
    ON DB_ID()     = obj.database_id
   AND s.object_id = obj.object_id
) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[stats_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[stats_columns]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_stats_columns];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_stats_columns] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_stats_columns]')
    + N'
  FROM (-- columns from [sys].[stats_columns]
SELECT database_id       = DB_ID()
      ,object_id         = s.object_id
      ,s.stats_id
      ,s.stats_column_id
      ,s.column_id
  FROM [sys].[stats_columns]       AS s   WITH (READUNCOMMITTED)
  JOIN [##SQLXL_Index_sys_objects] AS obj                     -- filter out system objects
    ON DB_ID()     = obj.database_id
   AND s.object_id = obj.object_id
) AS qry
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_stats_columns]'
       ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[stats_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[dm_db_partition_stats]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_db_stats_properties]
 Use STATS_DATE function to only get stats_properties after they have been computed. Filtered stats are not created if table/partition empty
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_stats_properties];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT persisted_sample_percent = CONVERT(FLOAT,NULL)
)'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_dm_db_stats_properties] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT dsp.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT dsp.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_dm_db_stats_properties]')
    + N'
  FROM newcol
 CROSS
  JOIN (-- list of all statistics for database
        SELECT TOP (100) PERCENT
               object_id
              ,stats_id
          FROM [##SQLXL_Index_sys_stats]
         WHERE database_id = DB_ID()
           AND STATS_DATE(object_id,stats_id) IS NOT NULL -- filter out stats not yet created
         ORDER BY
               object_id
              ,stats_id
       ) AS i
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add [sys].[dm_db_stats_properties] for each index
        SELECT database_id      = DB_ID()
              ,object_id
              ,stats_id
              ,partition_number = CONVERT(INT,0)
              ,last_updated
              ,rows
              ,rows_sampled
              ,steps
              ,unfiltered_rows
              ,modification_counter
              ,persisted_sample_percent
              --------------------------------------------------------
              ,updated_days_ago = DATEDIFF(DAY,last_updated,GETDATE())
         FROM [sys].[dm_db_stats_properties] (i.object_id,i.stats_id)
       ) AS dsp
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_stats_properties]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_stats_properties] - used for modification_counter if SQL 2012+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[dm_db_incremental_stats_properties]'
            + N' - partition modification_counter - SQL 2012SP2+,2016SP1+,2017+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[dm_db_incremental_stats_properties]
 This function was introduced in SQL Server 2014 (12.x) Service Pack 2 and SQL Server 2016 (13.x) Service Pack 1.
 Function returns same basic structure as above
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_incremental_stats_properties];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id,object_id
         ,stats_id
         ,partition_number
         ,last_updated
         ,rows
         ,rows_sampled
         ,steps
         ,unfiltered_rows
         ,modification_counter
         ,persisted_sample_percent
          --------------------------------------------------------
         ,updated_days_ago
     INTO [##SQLXL_Index_sys_dm_db_incremental_stats_properties]
     FROM [##SQLXL_Index_sys_dm_db_stats_properties]
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_dm_db_incremental_stats_properties]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[dm_db_incremental_stats_properties]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
WITH newcol AS (-- columns added after SQL Server 2005
SELECT persisted_sample_percent = CONVERT(FLOAT,NULL)
)
INSERT
  INTO [##SQLXL_Index_sys_dm_db_incremental_stats_properties] WITH (TABLOCKX)
SELECT dsp.*
  FROM newcol
 CROSS
  JOIN (-- list of all indexes for database
        SELECT object_id
              ,index_id
          FROM [##SQLXL_Index_sys_indexes]
         WHERE DB_ID() = database_id
       ) AS i
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add [sys].[dm_db_incremental_stats_properties] for indexes
        SELECT database_id              = DB_ID()
              ,object_id
              ,stats_id
              ,partition_number
              ,last_updated
              ,rows
              ,rows_sampled
              ,steps
              ,unfiltered_rows
              ,modification_counter
              ,persisted_sample_percent
              ----------------------------------------------------------
              ,updated_days_ago = DATEDIFF(DAY,last_updated,GETDATE())
         FROM [sys].[dm_db_incremental_stats_properties] (i.object_id, i.index_id) -- returns empty rowset if object_id or stats_id is NULL
       ) AS dsp
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_incremental_stats_properties] '
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_incremental_stats_properties]'
             + N' - partition modification_counter - SQL 2012SP2+,2016SP1+,2017+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[partitions]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect partition information & statistics
 Collect [sys].[partitions]

 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
 NOTE: _desc columns omitted since buckets are computed for each description value
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_partitions];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

-----------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT xml_compression      = CONVERT(BIT,NULL)
)'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_partitions] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT p.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT p.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_partitions]')
    + N'
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add aggregate columns from [sys].[partitions]
        SELECT database_id             = DB_ID()
              ,object_id               = object_id
              ,index_id
              ,hobt_id
              ,partition_id
              ,rows                    = SUM(rows)
              ,none_comp               = SUM(CASE WHEN data_compression = CAST(0 AS TINYINT) THEN 1 ELSE 0 END) -- NONE
              ,row_comp                = SUM(CASE WHEN data_compression = CAST(1 AS TINYINT) THEN 1 ELSE 0 END) -- ROW
              ,page_comp               = SUM(CASE WHEN data_compression = CAST(2 AS TINYINT) THEN 1 ELSE 0 END) -- PAGE
              ,colstore_comp           = SUM(CASE WHEN data_compression = CAST(3 AS TINYINT) THEN 1 ELSE 0 END) -- COLUMNSTORE
              ,colstore_arch           = SUM(CASE WHEN data_compression = CAST(4 AS TINYINT) THEN 1 ELSE 0 END) -- COLUMNSTORE_ARCHIVE
              ,xml_comp                = SUM(CASE WHEN xml_compression  = CAST(1 AS BIT    ) THEN 1 ELSE 0 END) -- XML index
          FROM (SELECT object_id
                      ,index_id
                      ,hobt_id
                      ,partition_id
                      ,rows
                      ,data_compression
                      ,xml_compression
                  FROM [sys].[partitions] WITH (READUNCOMMITTED)
               ) AS sp
         GROUP BY
               object_id
              ,index_id
              ,hobt_id
              ,partition_id
       ) AS p
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_partitions]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[partitions]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Collect [sys].[internal_partitions] SQL 2016+
 Returns one row for each rowset that tracks internal data for columnstore indexes on disk-based tables
<FUTURE> incorporate in to metadata for columnstore indexes
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_internal_partitions];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP(0)
          database_id                 = CONVERT(INT          ,NULL)
         ,partition_id                = CONVERT(BIGINT       ,NULL)
         ,object_id                   = CONVERT(INT          ,NULL)
         ,index_id                    = CONVERT(INT          ,NULL)
         ,partition_number            = CONVERT(INT          ,NULL)
         ,hobt_id                     = CONVERT(BIGINT       ,NULL)
         ,internal_object_type        = CONVERT(TINYINT      ,NULL)
         ,internal_object_type_desc   = CONVERT(NVARCHAR(200),NULL) COLLATE Latin1_General_100_CI_AI
         ,row_group_id                = CONVERT(INT          ,NULL)
         ,rows                        = CONVERT(BIGINT       ,NULL)
         ,data_compression            = CONVERT(TINYINT      ,NULL)
         ,data_compression_desc       = CONVERT(NVARCHAR(200),NULL) COLLATE Latin1_General_100_CI_AI
         ,optimize_for_sequential_key = CONVERT(BIT          ,NULL)
     INTO [##SQLXL_Index_sys_internal_partitions];

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_internal_partitions]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;

END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[internal_partitions]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
WITH newcol AS (-- columns added after SQL Server 2005
SELECT optimize_for_sequential_key = CONVERT(BIT,NULL)      -- SQL 2019+, Azure SQL Database
)
INSERT
  INTO [##SQLXL_Index_sys_internal_partitions] WITH (TABLOCKX)
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add columns from [sys].[internal_partitions]
        SELECT database_id               = DB_ID()
              ,partition_id
              ,object_id
              ,index_id
              ,partition_number
              ,hobt_id
              ,internal_object_type
              ,internal_object_type_desc = internal_object_type_desc COLLATE Latin1_General_100_CI_AI
              ,row_group_id
              ,rows
              ,data_compression
              ,data_compression_desc     = data_compression_desc     COLLATE Latin1_General_100_CI_AI
              ,optimize_for_sequential_key
          FROM [sys].[internal_partitions] WITH (READUNCOMMITTED)
       ) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_internal_partitions]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[internal_partitions] - 2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[dm_db_xtp_object_stats]
 Includes [dm_db_xtp_index_stats], [dm_db_xtp_nonclustered_index_stats], [dm_db_xtp_memory_consumers]
 NOTE: [sys].[dm_db_xtp_hash_index_stats] ARE OMITTED, since it scans the entire table
       Used to understand and tune the HASH bucket counts. It can also be used to detect cases where the index key has many duplicates.
 Columns marked "Internal use only" are omitted
 Column "xtp_object_id" is the Internal ID corresponding to the current version of the object. Note: Applies to SQL Server 2016 (13.x)
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_xtp_index_stats];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id                    = CAST(NULL AS INT    )
         ,object_id                      = CAST(NULL AS INT    )
         ,table_name                     = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,index_id                       = CAST(NULL AS INT    )
         ,type                           = CAST(NULL AS NVARCHAR(2))   COLLATE Latin1_General_100_CI_AI
         ,type_desc                      = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,index_name                     = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,is_unique                      = CAST(NULL AS BIT    )
         -- [sys].[dm_db_xtp_object_stats] -----------------------
         ,row_insert_attempts            = CAST(NULL AS BIGINT )
         ,row_update_attempts            = CAST(NULL AS BIGINT )
         ,row_delete_attempts            = CAST(NULL AS BIGINT )
         ,write_conflicts                = CAST(NULL AS BIGINT )
         ,unique_constraint_violations   = CAST(NULL AS BIGINT )
         -- [sys].[dm_db_xtp_index_stats] ------------------------
         ,scans_started                  = CAST(NULL AS BIGINT )
         ,scans_retries                  = CAST(NULL AS BIGINT )
         ,rows_returned                  = CAST(NULL AS BIGINT )
         ,rows_touched                   = CAST(NULL AS BIGINT )
         -- [sys].[dm_db_xtp_nonclustered_index_stats] -----------
         ,delta_pages                    = CAST(NULL AS BIGINT )
         ,leaf_pages                     = CAST(NULL AS BIGINT )
         ,page_update_CNT                = CAST(NULL AS BIGINT )
         ,page_update_retry_CNT          = CAST(NULL AS BIGINT )
         ,page_consolidation_CNT         = CAST(NULL AS BIGINT )
         ,page_consolidation_retry_CNT   = CAST(NULL AS BIGINT )
         ,page_split_CNT                 = CAST(NULL AS BIGINT )
         ,page_split_retry_CNT           = CAST(NULL AS BIGINT )
         ,key_split_CNT                  = CAST(NULL AS BIGINT )
         ,key_split_retry_CNT            = CAST(NULL AS BIGINT )
         ,page_merge_CNT                 = CAST(NULL AS BIGINT )
         ,page_merge_retry_CNT           = CAST(NULL AS BIGINT )
         ,key_merge_CNT                  = CAST(NULL AS BIGINT )
         ,key_merge_retry_CNT            = CAST(NULL AS BIGINT )
         ,uses_key_normalization         = CAST(NULL AS BIT    )
         -- [sys].[dm_db_xtp_memory_consumers] -------------------
         ,allocated_bytes                = CAST(NULL AS BIGINT )
         ,used_bytes                     = CAST(NULL AS BIGINT )
         ,allocation_CNT                 = CAST(NULL AS BIGINT )
     INTO [##SQLXL_Index_sys_dm_db_xtp_index_stats]
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_dm_db_xtp_index_stats]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[dm_db_xtp_index_stats]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
WITH newcol AS (-- columns added after SQL Server 2005
SELECT uses_key_normalization = CONVERT(BIT   ,NULL) -- 2016+
)
INSERT
  INTO [##SQLXL_Index_sys_dm_db_xtp_index_stats] WITH (TABLOCKX)
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add columns from [sys].[dm_db_xtp_index_stats]
        SELECT database_id         = DB_ID()
              ,object_id           = t.object_id
              ,table_name          = t.name                       COLLATE Latin1_General_100_CI_AI
              ,i.index_id
              ,type                = CAST(i.type AS NVARCHAR(2))  COLLATE Latin1_General_100_CI_AI
              ,type_desc           = i.type_desc                  COLLATE Latin1_General_100_CI_AI
              ,index_name          = COALESCE(i.name              COLLATE Latin1_General_100_CI_AI
                                             ,i.type_desc         COLLATE Latin1_General_100_CI_AI
                                             )                    COLLATE Latin1_General_100_CI_AI
              ,i.is_unique
              -- [sys].[dm_db_xtp_object_stats] ------------- Columns marked "Internal use only" are omitted
              ,xos.row_insert_attempts
              ,xos.row_update_attempts
              ,xos.row_delete_attempts
              ,xos.write_conflicts
              ,xos.unique_constraint_violations
              -- [sys].[dm_db_xtp_index_stats] -------------- Columns marked "Internal use only" are omitted
              ,xis.scans_started
              ,xis.scans_retries
              ,xis.rows_returned
              ,xis.rows_touched
              -- [sys].[dm_db_xtp_nonclustered_index_stats] ---
              ,nis.delta_pages
              ,nis.leaf_pages
              ,page_update_CNT              = nis.page_update_count
              ,page_update_retry_CNT        = nis.page_update_retry_count
              ,page_consolidation_CNT       = nis.page_consolidation_count
              ,page_consolidation_retry_CNT = nis.page_consolidation_retry_count
              ,page_split_CNT               = nis.page_split_count
              ,page_split_retry_CNT         = nis.page_split_retry_count
              ,key_split_CNT                = nis.key_split_count
              ,key_split_retry_CNT          = nis.key_split_retry_count
              ,page_merge_CNT               = nis.page_merge_count
              ,page_merge_retry_CNT         = nis.page_merge_retry_count
              ,key_merge_CNT                = nis.key_merge_count
              ,key_merge_retry_CNT          = nis.key_merge_retry_count
              ,nis.uses_key_normalization
              -- [sys].[dm_db_xtp_memory_consumers] --------- Columns marked "Internal use only" are omitted
              ,mc.allocated_bytes
              ,mc.used_bytes
              ,mc.allocation_CNT
          FROM (-- List of candidate memory optimized tables in this database
                SELECT database_id,object_id
                      ,name        = name
                  FROM [##SQLXL_Index_sys_objects]
                 WHERE DB_ID() = database_id
                   AND N''U''  = type                -- User Table
                   AND 1       = is_memory_optimized -- only returns tables that are memory optimized
               ) AS t
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_indexes]    AS i
            ON t.database_id = i.database_id
           AND t.object_id   = i.object_id   -- only memory optimized tables selected above
          LEFT OUTER
          JOIN [sys].[dm_db_xtp_object_stats] AS xos WITH (READUNCOMMITTED)
            ON i.object_id   = xos.object_id
           AND i.index_id    = 0
          LEFT OUTER
          JOIN [sys].[dm_db_xtp_index_stats]  AS xis WITH (READUNCOMMITTED)
            ON i.object_id   = xis.object_id
           AND i.index_id    = xis.index_id
          LEFT OUTER
          JOIN (-- Add up memory optimized index stats from [sys].[dm_db_xtp_nonclustered_index_stats]
                SELECT object_id
                      ,index_id
                      ,delta_pages                    = SUM(delta_pages                   )
                      ,leaf_pages                     = SUM(leaf_pages                    )
                      ,page_update_count              = SUM(page_update_count             )
                      ,page_update_retry_count        = SUM(page_update_retry_count       )
                      ,page_consolidation_count       = SUM(page_consolidation_count      )
                      ,page_consolidation_retry_count = SUM(page_consolidation_retry_count)
                      ,page_split_count               = SUM(page_split_count              )
                      ,page_split_retry_count         = SUM(page_split_retry_count        )
                      ,key_split_count                = SUM(key_split_count               )
                      ,key_split_retry_count          = SUM(key_split_retry_count         )
                      ,page_merge_count               = SUM(page_merge_count              )
                      ,page_merge_retry_count         = SUM(page_merge_retry_count        )
                      ,key_merge_count                = SUM(key_merge_count               )
                      ,key_merge_retry_count          = SUM(key_merge_retry_count         )
                      ,uses_key_normalization         = CAST(MAX(CAST(uses_key_normalization AS TINYINT)) AS BIT)
                                                        -- tinyint needed for MAX()
                  FROM (-- required to avoid error message:
                        -- "Aggregates on the right side of an APPLY cannot reference columns from the left side"
                        -- when referencing newcol CTE
                        SELECT object_id
                              ,index_id
                              ,delta_pages
                              ,leaf_pages
                              ,page_update_count
                              ,page_update_retry_count
                              ,page_consolidation_count
                              ,page_consolidation_retry_count
                              ,page_split_count
                              ,page_split_retry_count
                              ,key_split_count
                              ,key_split_retry_count
                              ,page_merge_count
                              ,page_merge_retry_count
                              ,key_merge_count
                              ,key_merge_retry_count
                              ,uses_key_normalization
                          FROM [sys].[dm_db_xtp_nonclustered_index_stats] WITH (READUNCOMMITTED)
                       ) AS xnis
                 GROUP BY
                       object_id
                      ,index_id
               ) AS nis
            ON i.object_id = nis.object_id
           AND i.index_id  = nis.index_id
          LEFT OUTER
          JOIN (-- [sys].[dm_db_xtp_memory_consumers] aggregated to the object & index level
                -- NOTE: [sys].[dm_db_xtp_table_memory_stats] sums up xtp_memory_consumer to the table level
                SELECT object_id
                      ,index_id         = CASE WHEN index_id IS NULL THEN 0 ELSE index_id END
                      ,allocated_bytes  = SUM(allocated_bytes )
                      ,used_bytes       = SUM(used_bytes      )
                      ,allocation_CNT   = SUM(allocation_count)
                  FROM [sys].[dm_db_xtp_memory_consumers] WITH (READUNCOMMITTED)
                 WHERE object_id  > 0                     -- omit system objects
                 GROUP BY
                       object_id
                      ,CASE WHEN index_id IS NULL
                            THEN 0
                            ELSE index_id
                       END
               ) AS mc
            ON i.object_id = mc.object_id
           AND i.index_id  = mc.index_id
       ) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_xtp_index_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_xtp_index_stats],object_stats,nonclustered_index_stats,memory_consumers'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N'.[sys].[dm_os_buffer_descriptors_EXT] (database aggregates)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[allocation_units] & link to [sys].[dm_os_buffer_descriptors] & EXT
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_os_buffer_descriptors_EXT];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
-------------------------------------------------------------------------------------------------------------------------------------------'
+IIF(@i > 1
    -- First database - create object using SELECT INTO
    , NCHAR(013) + NCHAR(010) + N'INSERT INTO [##SQLXL_Index_sys_dm_os_buffer_descriptors_EXT] WITH (TABLOCKX)'
    + NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    -- Subsequent databases - use INSERT INTO
    , NCHAR(013) + NCHAR(010) + N'SELECT qry.*'
    + NCHAR(013) + NCHAR(010) + N'  INTO [##SQLXL_Index_sys_dm_os_buffer_descriptors_EXT]')
    + N'
  FROM (-- convert buffer allocations to physical objects
        SELECT database_id       = DB_ID()
              ,object_id         = obj.object_id
              ,obj_name          = obj.name                 COLLATE Latin1_General_100_CI_AI
              ,index_id          = i.index_id
              ,index_name        = COALESCE(i.name          COLLATE Latin1_General_100_CI_AI
                                           ,i.type_desc     COLLATE Latin1_General_100_CI_AI
                                           )                COLLATE Latin1_General_100_CI_AI
              ,type              = i.type
              ,type_desc         = i.type_desc              COLLATE Latin1_General_100_CI_AI
              ,row_CNT           = SUM(obd.row_CNT)
              ,buffer_total_KB   = SUM(obd.buffer_total_KB)
              ,buffer_free_KB    = SUM(obd.buffer_free_KB )
              ,read_microsec_AVG = SUM(obd.buffer_total_KB * obd.read_microsec_AVG)/SUM(obd.buffer_total_KB)
          FROM (-- get all buffer allocations for database
                SELECT database_id
                      ,allocation_unit_id
                      ,row_CNT
                      ,buffer_free_KB
                      ,buffer_total_KB
                      ,read_microsec_AVG
                  FROM [##SQLXL_Index_sys_dm_os_buffer_descriptors] -- previously captured
                 WHERE DB_ID() = database_id
               ) AS obd
          LEFT OUTER
          JOIN [sys].[allocation_units]       AS au WITH (READUNCOMMITTED)
            ON obd.allocation_unit_id = au.allocation_unit_id
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_partitions] AS ph
            ON obd.database_id = ph.database_id
           AND au.container_id = ph.hobt_id
           AND au.type        IN (1 -- In-row data (all data types, except LOB data types)
                                 ,3 -- Row-overflow data
                                 )
          LEFT OUTER --
          JOIN [##SQLXL_Index_sys_partitions] AS pp
            ON obd.database_id = pp.database_id
           AND au.container_id = pp.partition_id
           AND au.type         = 2                          -- Large object (LOB) data (text,ntext,image,xml,large value types,and CLR UDT)
          JOIN [##SQLXL_Index_sys_objects]    AS obj        -- filter out system objects
            ON obd.database_id                     = obj.database_id
           AND COALESCE(ph.object_id,pp.object_id) = obj.object_id
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_indexes]    AS i
            ON obd.database_id                     = i.database_id
           AND COALESCE(ph.object_id,pp.object_id) = i.object_id
           AND COALESCE(ph.index_id ,pp.index_id ) = i.index_id
         GROUP BY
               obj.object_id
              ,obj.name
              ,i.index_id
              ,COALESCE(i.name                              COLLATE Latin1_General_100_CI_AI
                       ,i.type_desc                         COLLATE Latin1_General_100_CI_AI
                       )
              ,i.type
              ,i.type_desc
       ) AS qry
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_dm_os_buffer_descriptors_EXT]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N' [sys].[dm_os_buffer_descriptors_EXT] (database aggregates)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[dm_db_column_store_row_group_physical_stats] - SQL 2016+
 NOTE: includes all columns in [sys].[column_store_row_groups]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id                         = CAST(NULL AS INT     )
         ,object_id                           = CAST(NULL AS INT     )
         ,index_id                            = CAST(NULL AS INT     )
         --------------------------------------------------------------
         ,partition_number                    = CAST(NULL AS INT     )
         ,row_group_id                        = CAST(NULL AS INT     )
         ,delta_store_hobt_id                 = CAST(NULL AS BIGINT  )
         ,state                               = CAST(NULL AS TINYINT )
         ,state_desc                          = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,total_rows                          = CAST(NULL AS BIGINT  )
         ,deleted_rows                        = CAST(NULL AS BIGINT  )
         ,size_in_bytes                       = CAST(NULL AS BIGINT  )
         ,trim_reason                         = CAST(NULL AS TINYINT )
         ,trim_reason_desc                    = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,transition_to_compressed_state      = CAST(NULL AS TINYINT )
         ,transition_to_compressed_state_desc = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,has_vertipaq_optimization           = CAST(NULL AS BIT     )
         ,generation                          = CAST(NULL AS BIGINT  )
         --------------------------------------------------------------
         ,created_time                        = CAST(NULL AS DATETIME)
         ,closed_time                         = CAST(NULL AS DATETIME)
     INTO [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats];

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[dm_db_column_store_row_group_physical_stats]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats] WITH (TABLOCKX)
SELECT database_id                         = DB_ID()
      ,object_id                           = object_id
      ,index_id
      ,partition_number
      ,row_group_id
      ,delta_store_hobt_id
      ,state
      ,state_desc                          = state_desc                          COLLATE Latin1_General_100_CI_AI
      ,total_rows
      ,deleted_rows
      ,size_in_bytes
      ,trim_reason
      ,trim_reason_desc                    = trim_reason_desc                    COLLATE Latin1_General_100_CI_AI
      ,transition_to_compressed_state
      ,transition_to_compressed_state_desc = transition_to_compressed_state_desc COLLATE Latin1_General_100_CI_AI
      ,has_vertipaq_optimization
      ,generation
      ,created_time
      ,closed_time
  FROM [sys].[dm_db_column_store_row_group_physical_stats] WITH (READUNCOMMITTED)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'
       -- FORCE ORDER required to avoid "Warning: The join order has been enforced because a local join hint is used.

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_column_store_row_group_physical_stats] - 2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[dm_db_column_store_row_group_operational_stats] - SQL 2016+
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats];
   END TRY
   BEGIN CATCH
   END CATCH

SELECT TOP (0)
       database_id             = CAST(NULL AS BIGINT)
      ,object_id               = CAST(NULL AS BIGINT)
      ,index_id                = CAST(NULL AS BIGINT)
      ,partition_CNT           = CAST(NULL AS BIGINT)
      ,row_group_CNT           = CAST(NULL AS BIGINT)
      ,index_scan_CNT          = CAST(NULL AS BIGINT)
      ,scan_CNT                = CAST(NULL AS BIGINT)
      ,delete_buffer_scan_CNT  = CAST(NULL AS BIGINT)
      ,row_group_lock_CNT      = CAST(NULL AS BIGINT)
      ,row_group_lock_wait_CNT = CAST(NULL AS BIGINT)
      ,row_group_lock_wait_MS  = CAST(NULL AS BIGINT)
      ,returned_row_CNT        = CAST(NULL AS BIGINT)
      ,returned_aggregate_CNT  = CAST(NULL AS BIGINT)
      ,returned_group_CNT      = CAST(NULL AS BIGINT)
      ,input_groupby_row_CNT   = CAST(NULL AS BIGINT)
  INTO [##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats];

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created table [##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[dm_db_column_store_row_group_operational_stats]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2019+ -----------------------------------
       returned_row_COUNT        = CONVERT(BIGINT,NULL)
      ,returned_aggregate_COUNT  = CONVERT(BIGINT,NULL)
      ,returned_group_COUNT      = CONVERT(BIGINT,NULL)
      ,input_groupby_row_COUNT   = CONVERT(BIGINT,NULL)
)
INSERT
  INTO [##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats] WITH (TABLOCKX)
SELECT qry.*
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add columns from [sys].[dm_db_column_store_row_group_operational_stats]
        SELECT database_id             = DB_ID()
              ,object_id               = object_id
              ,index_id
              ,partition_CNT           = COUNT_BIG(partition_number)
              ,row_group_CNT           = COUNT_BIG(row_group_id)
              ,index_scan_CNT          = SUM(index_scan_count)
              ,scan_CNT                = SUM(scan_count)
              ,delete_buffer_scan_CNT  = SUM(delete_buffer_scan_count)
              ,row_group_lock_CNT      = SUM(row_group_lock_count)
              ,row_group_lock_wait_CNT = SUM(row_group_lock_wait_count)
              ,row_group_lock_wait_MS  = SUM(row_group_lock_wait_in_ms) -- NOTE: case shift on "_ms" for consistency
              ,returned_row_CNT        = SUM(returned_row_count)
              ,returned_aggregate_CNT  = SUM(returned_aggregate_count)
              ,returned_group_CNT      = SUM(returned_group_count)
              ,input_groupby_row_CNT   = SUM(input_groupby_row_count)
          FROM (SELECT object_id
                      ,index_id
                      ,partition_number
                      ,row_group_id                        -- integer
                      ,index_scan_count
                      ,scan_count
                      ,delete_buffer_scan_count
                      ,row_group_lock_count
                      ,row_group_lock_wait_count
                      ,row_group_lock_wait_in_ms
                      ,returned_row_count
                      ,returned_aggregate_count
                      ,returned_group_count
                      ,input_groupby_row_count
                 FROM [sys].[dm_db_column_store_row_group_operational_stats] WITH (READUNCOMMITTED)
               ) AS qry
         GROUP BY
               object_id
              ,index_id
      ) AS qry -- from CROSS APPLY
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[dm_db_column_store_row_group_operational_stats] - 2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[index_resumable_operations] - SQL 2017+
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_index_resumable_operations];
   END TRY
   BEGIN CATCH
   END CATCH

   SELECT TOP (0)
          database_id          = CAST(NULL AS BIGINT)
         ,object_id            = CAST(NULL AS BIGINT)
         ,index_id             = CAST(NULL AS BIGINT)
         ,state_desc           = CAST(NULL AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,partition_CNT        = CAST(NULL AS BIGINT)
         ,start_time           = CAST(NULL AS DATETIME)
         ,last_pause_time      = CAST(NULL AS DATETIME)
         ,total_execution_time = CAST(NULL AS BIGINT)
         ,page_CNT             = CAST(NULL AS BIGINT)
         ,percent_complete_MIN = CAST(NULL AS FLOAT)
         ,percent_complete_MAX = CAST(NULL AS FLOAT)
         ,sql_text             = CAST(NULL AS NVARCHAR(4000)) COLLATE Latin1_General_100_CI_AI
     INTO [##SQLXL_Index_sys_index_resumable_operations];

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... Created  [##SQLXL_Index_sys_index_resumable_operations]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
--------------------------------------------------------------------------------------------------------------------------------------------
IF object_id(N''[sys].[index_resumable_operations]'') IS NOT NULL -- check for object existence
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_sys_index_resumable_operations] WITH (TABLOCKX)
SELECT database_id          = DB_ID()
      ,object_id
      ,index_id
      ,state_desc           = state_desc                  COLLATE Latin1_General_100_CI_AI
      ,partition_CNT        = COUNT_BIG(partition_number)
      ,start_time           = MIN(start_time)
      ,last_pause_time      = MAX(last_pause_time)
      ,total_execution_time = MAX(total_execution_time)
      ,page_CNT             = SUM(page_count)
      ,percent_complete_MIN = MIN(percent_complete)
      ,percent_complete_MAX = MAX(percent_complete)
      ,sql_text             = LEFT(MAX(sql_text),4000)    COLLATE Latin1_General_100_CI_AI
  FROM [sys].[index_resumable_operations] WITH (READUNCOMMITTED)
 GROUP BY
       object_id
      ,index_id
      ,state_desc                                         COLLATE Latin1_General_100_CI_AI
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 AND @i = 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_index_resumable_operations]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N'.[sys].[index_resumable_operations] - SQL 2017+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @msg = N'           Start ' + @db_name_quoted + N' DBCC SHOW_STATISTICS - densityVector,StatHeader,Histogram'
   RAISERROR(@msg,0,0) WITH NOWAIT
END;

/******************************************************************************************************************************************\
 *Task* Collect DBCC SHOW_STATISTICS
 Cursor through all DBCC statistics options for all indexes, Foreign Key Constraints & Columns used across indexable objects
 Statistics are not returned on all objects - e.g. Column Stores, empty tables, internal tables, spatial indexes, XML indexes
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = QUOTENAME(DB_name())
       ,@i              INT           = 1 -- database loop counter
       ,@sql            NVARCHAR(MAX) = N''
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/

IF @i = 1 BEGIN  -- first time through database loop, drop & recreate objects
   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_showstatistics_statheader];
   END TRY
   BEGIN CATCH
   END CATCH

   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_showstatistics_densityvector];
   END TRY
   BEGIN CATCH
   END CATCH

   BEGIN TRY
      DROP TABLE [##SQLXL_Index_sys_showstatistics_histogram_summary];
   END TRY
   BEGIN CATCH
   END CATCH
END; -- IF @i = 1

--------------------------------------------------------------------------------------------------------------------------------------------
SET @sql = IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
              ,N'USE ' + @db_name_quoted + N';'
              ,N'')
+ N'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;SET NOCOUNT ON;SET IMPLICIT_TRANSACTIONS OFF;
SET XACT_ABORT ON;             -- automatically roll back the current transaction when a statement raises a run-time error
SET IMPLICIT_TRANSACTIONS OFF; -- occasionally implicit transactions are created by the DBCC SHOW_STATISTICS function

--------------------------------------------------------------------------------------------------------------------------------------------
-- [##SQLXL_Index_sys_showstatistics_statheader]
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE #XL_IDX_sys_showstatistics_statheader
      (name                     NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI     NULL
      ,updated                  DATETIME                                            NULL
      ,rows                     BIGINT                                              NULL
      ,rows_sampled             BIGINT                                              NULL
      ,steps                    INT                                                 NULL
      ,density                  FLOAT                                               NULL
      ,average_key_length       FLOAT                                               NULL
      ,string_index             NVARCHAR(20)   COLLATE Latin1_General_100_CI_AI     NULL
      ,filter_expression        NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI     NULL
      ,unfiltered_rows          BIGINT                                              NULL
      ,Persisted_Sample_Percent TINYINT                                             NULL
      );'

+IIF(@i = 1
    ,N'
CREATE TABLE [##SQLXL_Index_sys_showstatistics_statheader] -- persisted table
      (database_id              INT                                             NOT NULL
      ,object_id                INT                                             NOT NULL
      ,object_name              NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI     NULL
      ,stats_target_name        NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI     NULL
      ,index_id                 INT                                                 NULL
      ,type                     NVARCHAR(2)    COLLATE Latin1_General_100_CI_AI     NULL
      ,sub_type                 INT                                             NOT NULL DEFAULT(0)
      ,column_id                INT                                                 NULL
      ,statistics_age_days      INT                                                 NULL
      ,updated                  DATETIME                                            NULL
      ,rows                     BIGINT                                              NULL
      ,rows_sampled             BIGINT                                              NULL
      ,steps                    INT                                                 NULL
      ,density                  FLOAT                                               NULL
      ,average_key_length       FLOAT                                               NULL
      ,string_index             NVARCHAR(3)    COLLATE Latin1_General_100_CI_AI     NULL
      ,filter_expression        NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI     NULL
      ,unfiltered_rows          BIGINT                                              NULL
      ,Persisted_Sample_Percent TINYINT                                             NULL
      )
  WITH (DATA_COMPRESSION = PAGE);'
    ,N'')

+ N'
--------------------------------------------------------------------------------------------------------------------------------------------
-- [##SQLXL_Index_sys_showstatistics_densityvector]
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE #XL_IDX_sys_showstatistics_densityvector
      (row_ID                   INT IDENTITY(1,1)                               NOT NULL
      ,all_density              FLOAT                                           NOT NULL
      ,average_length           FLOAT                                           NOT NULL
      ,[columns]                NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI NOT NULL -- can be up to 249 columns
      );'

+IIF(@i = 1
    ,N'
CREATE TABLE [##SQLXL_Index_sys_showstatistics_densityvector] -- persisted table
      (database_id              INT                                             NOT NULL
      ,object_id                INT                                             NOT NULL
      ,object_name              NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI     NULL
      ,stats_target_name        NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI     NULL
      ,index_id                 INT                                                 NULL
      ,type                     NVARCHAR(2)    COLLATE Latin1_General_100_CI_AI     NULL
      ,sub_type                 INT                                             NOT NULL DEFAULT(0)
      ,column_id                INT                                                 NULL
      ,row_ID                   SMALLINT                                        NOT NULL
      ,all_density              FLOAT                                           NOT NULL
      ,average_length           FLOAT                                           NOT NULL
--    ,[columns] -- omitted since not used elsewhere in SQLXL_INDEX
      )
  WITH (DATA_COMPRESSION = PAGE);'
    ,N'')

+ N'
--------------------------------------------------------------------------------------------------------------------------------------------
-- [##SQLXL_Index_sys_showstatistics_Histogram
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE TABLE #XL_IDX_sys_showstatistics_Histogram
      (Range_Hi_Key             SQL_VARIANT                                         NULL
      ,Range_Rows               FLOAT                                               NULL
      ,EQ_Rows                  FLOAT                                               NULL
      ,Distinct_Range_Rows      BIGINT                                              NULL
      ,Avg_Range_Rows           FLOAT                                               NULL
      );'

+IIF(@i = 1
    ,N'
CREATE TABLE [##SQLXL_Index_sys_showstatistics_histogram_summary] -- persisted table
      (database_id              INT                                             NOT NULL
      ,object_id                INT                                             NOT NULL
      ,object_name              NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI     NULL
      ,stats_target_name        NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI     NULL
      ,index_id                 INT                                                 NULL
      ,type                     NVARCHAR(2)    COLLATE Latin1_General_100_CI_AI     NULL
      ,sub_type                 INT                                             NOT NULL DEFAULT(0)
      ,column_id                INT                                                 NULL
      ,min_rows_per_value       FLOAT                                               NULL
      ,max_rows_per_value       FLOAT                                               NULL
      ,null_rows                FLOAT                                               NULL
      ,param_sniff              FLOAT                                               NULL
      )
  WITH (DATA_COMPRESSION = PAGE);'
    ,N'')

+ N'
--------------------------------------------------------------------------------------------------------------------------------------------
-- Local Variables inside dynamic SQL
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE @database_name     NVARCHAR(MAX) = N'''' COLLATE Latin1_General_100_CI_AI
       ,@object_id         INT
       ,@index_id          NVARCHAR(20)  = N'''' COLLATE Latin1_General_100_CI_AI
       ,@type              NVARCHAR(2)   = N'''' COLLATE Latin1_General_100_CI_AI
       ,@sub_type          INT           = 0
       ,@column_id         INT
       ,@object_name       NVARCHAR(MAX) = N'''' COLLATE Latin1_General_100_CI_AI
       ,@stats_target_name NVARCHAR(MAX) = N'''' COLLATE Latin1_General_100_CI_AI
       ,@ssms_ads          TINYINT = (SELECT (1)
                                        FROM [sys].[dm_exec_sessions] WITH (READUNCOMMITTED)
                                       WHERE session_id = @@spid
                                         AND (   program_name LIKE N''Microsoft SQL Server Management Studio%''
                                              OR program_name like N''azdata%'' -- azure data studio
                                              OR program_name    = N''SQLCMD''  -- SQL command
                                             )
                                     );

--------------------------------------------------------------------------------------------------------------------------------------------
-- cursor to collect statistics from all indexes and columns with statistics.
-- NOTE: empty tables that have never had rows will have no statistics
--       Table Types & SQL table-valued functions have no statistics
--       object marked "is_ms_shipped" typically have no (user-visible) statistics
--       No statistics for data types timestamp/rowversion, XML, hierarchyid, geometry, geography
--------------------------------------------------------------------------------------------------------------------------------------------
DECLARE stats_crsr CURSOR LOCAL FAST_FORWARD FOR
SELECT database_name = QUOTENAME(DB_name())
      ,c.object_id
      ,c.index_id
      ,c.type
      ,c.sub_type
      ,c.column_id
      ,c.object_name
      ,c.stats_target_name
  FROM (-- All rowstore indexes
        SELECT i.database_id
              ,i.object_id
              ,i.index_id
              ,i.type
              ,i.sub_type
              ,column_id         = CAST(NULL AS BIGINT)
              ,object_name       = QUOTENAME(obj.schema_name) + N''.'' + QUOTENAME(obj.name) COLLATE Latin1_General_100_CI_AI
              ,stats_target_name = CAST(QUOTENAME(i.name) AS NVARCHAR(200))                  COLLATE Latin1_General_100_CI_AI
          FROM (-- Get statistics for all index types, including fulltext
                SELECT database_id,object_id,index_id,type,sub_type
                      ,name
                  FROM [##SQLXL_Index_sys_indexes] -- used in stats cursor
                 WHERE DB_ID() = database_id       -- code executes inside a "USE <database name>" context
                   AND name   IS NOT NULL
                UNION -- get Full text indexes
                SELECT database_id,object_id
                      ,index_id        = unique_index_id
                      ,type            = N''T''
                      ,sub_type        = 0
                      ,name            = N''fulltext''
                  FROM [##SQLXL_Index_sys_fulltext_indexes]
                 WHERE DB_ID() = database_id
               ) AS i
          JOIN [##SQLXL_Index_sys_objects] AS obj             -- filter out system objects
            ON i.database_id = obj.database_id
           AND i.object_id   = obj.object_id
         WHERE obj.type NOT IN (-- Statistics not available for types
                                N''TT'' -- Table Type
                               ,N''TF'' -- SQL table-valued-function (TVF)
                               )
           AND NOT (    obj.database_id  IN (DB_ID(N''MSDB''),DB_ID(N''MASTER''),DB_ID(N''MODEL''))
                    AND obj.is_ms_shipped = 1
                   )
        ------------------------------------------------------------------------------------------------------------------------------------
        UNION -- Columns that have stats already computed for them
        ------------------------------------------------------------------------------------------------------------------------------------
        SELECT ic.database_id
              ,ic.object_id
              ,index_id          = CAST(NULL AS BIGINT)
              ,type              = CAST(NULL AS NVARCHAR(2))
              ,sub_type          = CAST(0    AS INT)
              ,ic.column_id
              ,object_name       = QUOTENAME(obj.schema_name) + N''.'' + QUOTENAME(obj.name) COLLATE Latin1_General_100_CI_AI
              ,stats_target_name = CAST(QUOTENAME(c.name) AS NVARCHAR(200))                  COLLATE Latin1_General_100_CI_AI
          FROM (-- All Columns that have had stats computed, including by Auto Created Statistics
                -- find candidate unique columns for HEAPS, columns that can takes advantage of new/existing NCS if added
                SELECT database_id,object_id
                      ,column_id
                  FROM [##SQLXL_Index_sys_stats_columns] -- all columns that have statistics created on them
                 WHERE DB_ID() = database_id
                 GROUP BY
                       database_id,object_id
                      ,column_id
               ) AS ic
          JOIN [##SQLXL_Index_sys_objects] AS obj -- filter out system objects
            ON ic.database_id = obj.database_id
           AND ic.object_id   = obj.object_id     -- want parent objects only
          JOIN [##SQLXL_Index_sys_columns] AS c
            ON ic.database_id = c.database_id
           AND ic.object_id   = c.object_id
           AND ic.column_id   = c.column_id
         WHERE obj.type  NOT IN (-- Statistics not available for types
                                 N''TT''          -- Table Type
                                ,N''TF''          -- SQL table-valued-function (TVF)
                                )
           AND NOT (    obj.database_id  IN (DB_ID(N''MSDB''),DB_ID(N''MASTER''),DB_ID(N''MODEL''))
                    AND obj.is_ms_shipped = 1
                   )
           AND c.system_type_id  <> 189           -- no statistics for timestamp/rowversion data type
           AND c.system_type_id  <> 241           -- no statistics for XML data type
           AND c.is_assembly_type = 0             -- no statistics for hierarchyid, geometry, geography data types
      ) AS c
 ORDER BY
       object_id
      ,index_id
      ,column_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER,FAST 1);

--------------------------------------------------------------------------------------------------------------------------------------------
OPEN stats_crsr;
WHILE 1 = 1
BEGIN

   FETCH NEXT
    FROM stats_crsr
    INTO @database_name
        ,@object_id
        ,@index_id
        ,@type
        ,@sub_type
        ,@column_id
        ,@object_name
        ,@stats_target_name;

   IF @@Fetch_Status <> 0
      BREAK

   BEGIN TRY
      --------------------------------------------------------------------------------------------------------------------------------------
      -- [##SQLXL_Index_sys_showstatistics_statheader]
      -- Cannot use CTE since executing system procedure DBCC SHOW_STATISTICS
      --------------------------------------------------------------------------------------------------------------------------------------
      INSERT
        INTO #XL_IDX_sys_showstatistics_statheader WITH (TABLOCKX)
            (name
            ,updated
            ,rows
            ,rows_sampled
            ,steps
            ,density
            ,average_key_length
            ,string_index
            ,filter_expression
            ,unfiltered_rows'
+ CASE WHEN (         CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 14    -- SQL 2017+
             OR (     CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)  = 13    -- SQL 2016 SP1
                 AND  CAST(SERVERPROPERTY(N'ProductBuild')        AS INT) >= 4446  -- SQL 2016 SP1 CU4+
                )
            )
       THEN N'
            ,Persisted_Sample_Percent'
       ELSE N''
  END + N'
            )
        EXEC('''
+ IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
            ,N'USE ' + @db_name_quoted + N';'
            ,N'')
            + N'DBCC SHOW_STATISTICS ('''''' + @object_name + N'''''','' + @stats_target_name + N'') WITH STAT_HEADER, NO_INFOMSGS'');

   END TRY
   BEGIN CATCH
   /*** FOR STATISTICS DIAGNOSTICS ONLY
      IF @ssms_ads > 0
      AND CHARINDEX(N''.[#'',@object_name)    = 0
      AND CHARINDEX(N''.[ifts'',@object_name) = 0 -- full text indexes before processing
         SELECT warning         = N''DBCC SHOW_STATISTICS STAT_HEADER NOT FOUND''
               ,object          = @database_name + N''.'' + @object_name
               ,index_id        = @index_id
               ,column_id       = @column_id
               ,statistics_name = @stats_target_name
         OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);
   ***/
   END CATCH

   -- insert [##SQLXL_Index_sys_showstatistics_statheader] -----------------------------------------
   INSERT
     INTO [##SQLXL_Index_sys_showstatistics_statheader] WITH (TABLOCKX)
         (database_id,object_id,index_id,type,sub_type
         ,object_name
         ,stats_target_name
         ,column_id
         ,statistics_age_days
         ,updated
         ,rows
         ,rows_sampled
         ,steps
         ,density
         ,average_key_length
         ,string_index
         ,filter_expression
         ,unfiltered_rows'
+ CASE WHEN (         CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 14   -- SQL 2017+
             OR (     CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)  = 13   -- SQL 2016
                 AND  CAST(SERVERPROPERTY(N'ProductBuild')        AS INT) >= 4446 -- SQL 2016 SP1 CU4+
                )
            )
       THEN N'
         ,Persisted_Sample_Percent'
       ELSE N''
  END + N'
         )
   SELECT DB_ID()
         ,@object_id
         ,@index_id
         ,@type
         ,@sub_type
         ,@object_name
         ,@stats_target_name
         ,@column_id
         ,statistics_age_days = DATEDIFF(DAY,updated,GETDATE())
         ,updated
         ,rows
         ,rows_sampled
         ,steps
         ,density
         ,average_key_length
         ,string_index
         ,filter_expression
         ,unfiltered_rows'
+ CASE WHEN (        CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 14   -- SQL 2017+
             OR (    CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)  = 13   -- SQL 2016
                 AND CAST(SERVERPROPERTY(N'ProductBuild')        AS INT) >= 4446 -- SQL 2016 SP1 CU4+
                )
            )
       THEN N'
         ,Persisted_Sample_Percent = CASE WHEN Persisted_Sample_Percent = 0 THEN 100 ELSE Persisted_Sample_Percent END'
       ELSE N''
  END + N'
     FROM #XL_IDX_sys_showstatistics_statheader
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   BEGIN TRY
      --------------------------------------------------------------------------------------------------------------------------------------
      -- [##SQLXL_Index_sys_showstatistics_densityvector]
      --------------------------------------------------------------------------------------------------------------------------------------
      INSERT
        INTO #XL_IDX_sys_showstatistics_densityvector WITH (TABLOCKX)
        EXEC('''
+ IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
            ,N'USE ' + @db_name_quoted + N';'
            ,N'')
            + N'DBCC SHOW_STATISTICS ('''''' + @object_name + N'''''','' + @stats_target_name + N'') WITH density_VECTOR, NO_INFOMSGS'')

   END TRY
   BEGIN CATCH
      IF @ssms_ads > 1
      AND CHARINDEX(N''.[#'',@object_name) = 0
      AND CHARINDEX(N''.[ifts'',@object_name) = 0 -- full text indexes before processing
         SELECT warning         = N''DBCC SHOW_STATISTICS density_VECTOR NOT FOUND''
               ,object          = @database_name + N''.'' + @object_name
               ,index_id        = @index_id
               ,column_id       = @column_id
               ,statistics_name = @stats_target_name
         OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);
   END CATCH

   -- insert [##SQLXL_Index_sys_showstatistics_densityvector] ----------------------------------------------------------------------
   INSERT
     INTO [##SQLXL_Index_sys_showstatistics_densityvector] WITH (TABLOCKX)
   SELECT DB_ID()
         ,@object_id
         ,@object_name
         ,@stats_target_name
         ,@index_id
         ,@type
         ,@sub_type
         ,@column_id
         ,row_ID = ROW_NUMBER() OVER (ORDER BY LEN([columns])) -- length increases as keys are added to index statistics
         ,all_density
         ,average_length
--       ,[columns] -- omitted since not used elsewhere by SQLXL_INDEX
     FROM #XL_IDX_sys_showstatistics_densityvector
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   BEGIN TRY
      --------------------------------------------------------------------------------------------------------------------------------------
      -- [##SQLXL_Index_sys_showstatistics_Histogram
      --------------------------------------------------------------------------------------------------------------------------------------
      INSERT
        INTO #XL_IDX_sys_showstatistics_Histogram WITH (TABLOCKX)
        EXEC('''
+ IIF(CAST(SERVERPROPERTY(N'EngineEdition') AS INT) <> 5 -- Azure SQL Database
            ,N'USE ' + @db_name_quoted + N';'
            ,N'')
            + N'DBCC SHOW_STATISTICS ('''''' + @object_name + N'''''','' + @stats_target_name + N'') WITH HISTOGRAM, NO_INFOMSGS'')

   END TRY
   BEGIN CATCH
      IF @ssms_ads > 1
      AND CHARINDEX(N''.[#'',@object_name) = 0
      AND CHARINDEX(N''.[ifts'',@object_name) = 0 -- full text indexes before processing
         SELECT warning        = N''DBCC SHOW_STATISTICS HISTOGRAM NOT FOUND''
               ,object          = @database_name + N''.'' + @object_name
               ,index_id        = @index_id
               ,column_id       = @column_id
               ,statistics_name = @stats_target_name
          OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);
   END CATCH

   --------------------------------------------------------------------------------------------------------------------------------------
   -- insert [##SQLXL_Index_sys_showstatistics_histogram_summary] ------------------------------------------------------------------
   -- BOL says:
   -- "AVG_RANGE_ROWS = Average number of rows with duplicate column values within a histogram step, excluding the upper bound.
   --  When DISTINCT_RANGE_ROWS is greater than 0, AVG_RANGE_ROWS is calculated by dividing RANGE_ROWS by DISTINCT_RANGE_ROWS.
   --  When DISTINCT_RANGE_ROWS is 0, AVG_RANGE_ROWS returns 1 for the histogram step."

   -- Since the histogram "upper bound" is not included in the AVG_RANGE_ROWS, compute parameter sniffing range by adding
   --    the EQ_ROWS to the RANGE_ROWS to get all records in a histogram step,
   --    then divide by the DISTINCT_RANGE_ROWS plus 1 to account for the upper bound.
   --------------------------------------------------------------------------------------------------------------------------------------
   INSERT
     INTO [##SQLXL_Index_sys_showstatistics_histogram_summary] WITH (TABLOCKX)
   SELECT DB_ID()
         ,@object_id
         ,@object_name
         ,@stats_target_name
         ,@index_id
         ,@type
         ,@sub_type
         ,@column_id
         ,e.min_rows_per_value
         ,e.max_rows_per_value
         ,e.null_rows
         ,param_sniff = CASE WHEN e.min_rows_per_value > 0
                             THEN e.max_rows_per_value / e.min_rows_per_value
                             ELSE NULL
                        END
     FROM (-- compute MIN & MAX rows per range, MAX null rows per range
           SELECT min_rows_per_value = MIN(e.arr)
                 ,max_rows_per_value = MAX(e.arr)
                 ,null_rows          = MAX(e.Nrr)
             FROM (-- compute average rows per range, null rows per range
                   SELECT arr = 1.0 * (Range_Rows + EQ_Rows) / (distinct_range_rows + 1)
                         ,nrr = CASE WHEN range_hi_key IS NULL
                                     THEN EQ_Rows
                                     ELSE 0
                                END
                     FROM #XL_IDX_sys_showstatistics_Histogram
                  ) e
          ) e
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   -- Reset temp table for next batch of statistics
   TRUNCATE TABLE #XL_IDX_sys_showstatistics_densityvector; -- intermediate temporary tables
   TRUNCATE TABLE #XL_IDX_sys_showstatistics_statheader;    -- intermediate temporary tables
   TRUNCATE TABLE #XL_IDX_sys_showstatistics_Histogram;     -- intermediate temporary tables

END;

CLOSE stats_crsr;
DEALLOCATE stats_crsr;' -- end of SQL Statement

   EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

   SET @i = @i + 1

   /***************************************************************************************************************************************\
    End of Database status notification
   \***************************************************************************************************************************************/
   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N'    ... ' + @db_name_quoted + N' DBCC SHOW_STATISTICS - densityVector,StatHeader,Histogram'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE()

      SET @sql = N'SELECT N''Completed collecting database ' + @db_name_quoted + N''''
               + N' AS [Elapsed Time '
               + [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@collection_DTTM,GETDATE()),0))
               + N' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]'
      EXECUTE (@sql);

   END; -- IF @ssms_ads > 0 BEGIN

END;   -- WHILE @i > 0 Database Cursor Loop

/******************************************************************************************************************************************\
********************************************************************************************************************************************
 ### END of database cursor ###
********************************************************************************************************************************************
\******************************************************************************************************************************************/
CLOSE db_crsr;
DEALLOCATE db_crsr;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Close and deallocate Database cursor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Selected Table Index Builds
\******************************************************************************************************************************************/
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_showstatistics_densityvector -- used in subqueries
    ON [##SQLXL_Index_sys_showstatistics_densityvector]
      (database_id,object_id,index_id,type,sub_type
      ,column_id
      ,row_ID
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_showstatistics_densityvector]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/*#########################################################################################################################################\
############################################################################################################################################
Insert/Update All [##SQLXL ...] collected objects
############################################################################################################################################
\#########################################################################################################################################*/

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Consolidate & update collected temporary tables ----------------------------------',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Insert [##SQLXL_Index_sys_databases] with instance-level record --------------------------------------------------------------------
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_sys_databases]
      (database_id
      ,name
      ,catalog_collation_type            -- NOT NULL column
      ,compatibility_level               -- NOT NULL column
      ,create_date                       -- NOT NULL column
      ,is_auto_close_on                  -- NOT NULL column
      ,is_broker_enabled                 -- NOT NULL column
      ,is_cdc_enabled                    -- NOT NULL column
      ,is_date_correlation_on            -- NOT NULL column
      ,is_distributor                    -- NOT NULL column
      ,is_master_key_encrypted_by_server -- NOT NULL column
      ,is_merge_published                -- NOT NULL column
      ,is_published                      -- NOT NULL column
      ,is_subscribed                     -- NOT NULL column
      ,is_sync_with_backup               -- NOT NULL column
      ,service_broker_guid               -- NOT NULL column
      )
SELECT database_id                       = 0
      ,name                              = N'Instance'
      ,catalog_collation_type            = 0
      ,compatibility_level               = 0
      ,create_date                       = CAST(text_value_in_use AS DATETIME)
      ,is_auto_close_on                  = 0
      ,is_broker_enabled                 = 0
      ,is_cdc_enabled                    = 0
      ,is_date_correlation_on            = 0
      ,is_distributor                    = 0
      ,is_master_key_encrypted_by_server = 0
      ,is_merge_published                = 0
      ,is_published                      = 0
      ,is_subscribed                     = 0
      ,is_sync_with_backup               = 0
      ,service_broker_guid               = NEWID()
  FROM [##SQLXL_Instance_info]
 WHERE source = N'dm_os_sys_info'
   AND name   = N'sqlserver_start_time'
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_databases] with database-level trigger counts'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_databases] with database-level trigger counts
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_databases]
   SET clr_trigger_CNT           = COALESCE(obj.clr_trigger_CNT             ,0)
      ,sql_trigger_CNT           = COALESCE(obj.sql_trigger_CNT             ,0)
      ,is_instead_of_trigger_CNT = COALESCE(obj.is_instead_of_trigger_CNT   ,0)
  FROM [##SQLXL_Index_sys_databases] AS tgt WITH (TABLOCKX)
  LEFT OUTER
  JOIN (-- Summarize DML triggers
        SELECT database_id
              ,clr_trigger_CNT           = SUM(IIF(type = N'TA',1,0))                 -- Assembly (CLR) DML trigger
              ,sql_trigger_CNT           = SUM(IIF(type = N'TR',1,0))                 -- SQL DML trigger
              ,is_instead_of_trigger_CNT = SUM(IIF(is_instead_of_trigger = 1,1,0))
          FROM [##SQLXL_Index_sys_objects]
         WHERE parent_class  = 0 -- Database, for the DDL triggers.
           AND is_ms_shipped = 0 -- Trigger NOT created on behalf of the user by an internal SQL Server component
         GROUP BY
               database_id
       ) AS obj
    ON tgt.database_id = obj.database_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_databases] with database-level trigger counts'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Create [##SQLXL_Index_data_spaces] consolidating Data_Spaces
\******************************************************************************************************************************************/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_data_spaces];
END TRY
BEGIN CATCH
END CATCH

SELECT dds.database_id
      ,dds.data_space_id
      ,dds.data_space_type
      ,dds.partition_function_id
      ,dds.partition_function_name
      ,dds.partition_function_create_date
      ,dds.partition_function_modify_date
      ,[files] = CAST(
                 LEFT(IIF(dds.filegroup_is_read_only = 1,N'[READONLY] ',N'')
                     + N'Data Space ' + QUOTENAME(REPLACE(dds.data_space_name,N'^',N' '))
                     + N' Type ' + QUOTENAME(dds.data_space_type_desc)
                     + N' ' + IIF(dds.data_space_is_default = 1,N'[DEFAULT]',N'')
                     + N' Autogrow All ' + QUOTENAME(IIF(dds.filegroup_is_autogrow_all_files = 0,N'NO',N'YES'))
                     + IIF(dds.part_sch_space_type_desc IS NOT NULL
                          , CHAR(096)
                          + N'> Partition ' + QUOTENAME(dds.partition_function_type_desc)
                                + N' ' + QUOTENAME(dds.partition_function_boundary_value)
                                + N' Fanout ' + CAST(dds.partition_function_fanout AS NVARCHAR(20))
                          + CHAR(096)
                          + N'  Scheme '   + QUOTENAME(REPLACE(dds.part_sch_space_name,N'^',N' '))
                          + N'  Function ' + QUOTENAME(REPLACE(dds.partition_function_name,N'^',N' '))
                          ,N'')
                     + (SELECT  -- double SELECT required for XML TYPE VALUE below
                          (-- concatenate key data space properties
                           SELECT REPLACE( CHAR(096)
                                         + N'=' + IIF(dds.file_CNT > 1
                                                     ,N' File ' + CAST(data_files.file_id AS NVARCHAR(20))
                                                     ,N'')
                                         + N' Logical ' + QUOTENAME(REPLACE(data_files.file_logical_filename,N'^',N' '))
                                         + CHAR(096)
                                         + N'> ' + QUOTENAME(data_files.file_state_desc)
                                                 + N' Size ' + [dbo].[SQLXL_3SD](data_files.file_size_pages,N'P')
                                                 + N' Growth ' + IIF(data_files.file_is_percent_growth = 0
                                                                    ,[dbo].[SQLXL_3SD](data_files.file_growth,N'P')
                                                                    ,CAST(data_files.file_growth AS NVARCHAR(20)) + N'%')
                                                 + IIF(data_files.file_max_size_pages > 0
                                                      ,N' Max ' + [dbo].[SQLXL_3SD](data_files.file_max_size_pages,N'P')
                                                      ,N'')
                                         + CHAR(096)
                                         + N'> Physical '
                                         + QUOTENAME(REPLACE(data_files.file_physical_filename ,N'^',N' '))
                                         ,NCHAR(031),NCHAR(032)) -- From REPLACE above strip out any "Unit Separator" control codes
                             FROM [##SQLXL_Index_sys_data_spaces] AS data_files
                            WHERE dds.database_id   = data_files.database_id
                              AND dds.data_space_id = data_files.data_space_id
                            ORDER BY
                                  data_files.file_id
                              FOR XML PATH(N''),TYPE                                                -- data spaces filenames
                          ).value('.',N'NVARCHAR(MAX)')
                       ),4000) AS NVARCHAR(4000))
  INTO [##SQLXL_Index_data_spaces]
  FROM (-- Consolidate data_spaces
        SELECT database_id
              ,data_space_id
              ,file_CNT      = COUNT_BIG(1)
              ,data_space_name                   = MAX(data_space_name                  )
              ,data_space_type                   = MAX(data_space_type                  )
              ,data_space_type_desc              = MAX(data_space_type_desc             )
              ,data_space_is_default             = MAX(CONVERT(TINYINT,data_space_is_default))
              ,data_space_is_system              = MAX(CONVERT(TINYINT,data_space_is_system ))
              ,part_sch_space_name               = MAX(part_sch_space_name              )
              ,part_sch_space_type               = MAX(part_sch_space_type              )
              ,part_sch_space_type_desc          = MAX(part_sch_space_type_desc         )
              ,part_sch_space_is_default         = MAX(CONVERT(TINYINT,part_sch_space_is_default))
              ,part_sch_space_is_system          = MAX(CONVERT(TINYINT,part_sch_space_is_system ))
              ,filegroup_guid                    = MAX(filegroup_guid                   )
              ,filegroup_is_read_only            = MAX(CONVERT(TINYINT,filegroup_is_read_only         ))
              ,filegroup_is_autogrow_all_files   = MAX(CONVERT(TINYINT,filegroup_is_autogrow_all_files))
              ,partition_function_id             = MAX(partition_function_id            )
              ,partition_function_name           = MAX(partition_function_name          )
              ,partition_function_type           = MAX(partition_function_type          )
              ,partition_function_type_desc      = MAX(partition_function_type_desc     )
              ,partition_function_fanout         = MAX(partition_function_fanout        )
              ,partition_function_boundary_value = MAX(partition_function_boundary_value)
              ,partition_function_is_system      = MAX(CONVERT(TINYINT,partition_function_is_system))
              ,partition_function_create_date    = MAX(partition_function_create_date   )
              ,partition_function_modify_date    = MAX(partition_function_modify_date   )
          FROM [##SQLXL_Index_sys_data_spaces]
         GROUP BY
               database_id
              ,data_space_id
       ) AS dds
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Create [ixuc_SQLXL_Index_data_spaces]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Insert [##SQLXL_Index_sys_objects] Databases & Instance record
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_sys_objects] WITH (TABLOCKX)          -- Database and Instance Records
      (database_id,object_id
      ,schema_id
      ,parent_object_id                                     -- for System, History, Constraints
      ,type
      ,type_desc
      ,name
      ,create_date
      ,modify_date
      ,is_ms_shipped
      ,is_published
      ,is_schema_published
      )
SELECT database_id
      ,object_id           = database_id
      ,schema_id           = 0
      ,parent_object_id    = database_id                    -- for System, History, Constraints
      ,type                = N'DB'                          -- database "index" type
      ,type_desc           = N'Database'
      ,name
      ,create_date         = create_date
      ,modify_date         = create_date
      ,is_ms_shipped       = 0
      ,is_published        = 0
      ,is_schema_published = 0
  FROM [##SQLXL_Index_sys_databases]
 WHERE database_id > 0
UNION ALL
SELECT database_id         = 0
      ,object_id           = 0
      ,schema_id           = 0
      ,parent_object_id    = 0
      ,type                = N'A'                           -- Instance
      ,type_desc           = N'Instance'
      ,name                = N'Instance'
      ,create_date         = CAST(text_value_in_use AS DATETIME)
      ,modify_date         = CAST(text_value_in_use AS DATETIME)
      ,is_ms_shipped       = 0
      ,is_published        = 0
      ,is_schema_published = 0
  FROM [##SQLXL_Instance_info]
 WHERE source = N'dm_os_sys_info'
   AND name   = N'sqlserver_start_time'
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert [##SQLXL_Index_sys_objects] Add Database and Instance Records'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_objects] source table for history, data_space_id from base structure.
 REQUIRES [##SQLXL_Index_data_spaces]
 Temporal/ledger tables do not have a parent in [sys].[objects], must be captured as below.
 [history_table_id] returns the object_id of the table that maintains historical data for a temporal/ledger table, otherwise returns NULL.
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_objects]
   SET tgt.parent_object_id = IIF(src.history_table_id IS NOT NULL                                  -- for System, History, Constraints
                                 ,src.parent_object_id                                              -- for System, History, Constraints
                                 ,tgt.parent_object_id)                                             -- for System, History, Constraints
      ,tgt.data_space_id    = data_space_obj.data_space_id
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.name,tgt.parent_object_id                                                -- for System, History, Constraints
      ,tgt.object_id,tgt.history_table_id,tgt.type
      ,src.parent_object_id,src.history_table_id                                                    -- for System, History, Constraints
      ,data_space_obj.data_space_id
--*/
  FROM (SELECT * FROM [##SQLXL_Index_sys_objects] WITH (TABLOCKX) WHERE type = N'U') AS tgt         -- user table object type
  LEFT OUTER
  JOIN (-- ledger/temporal source data table
        SELECT database_id
              ,parent_object_id = src.object_id                                                     -- for System, History, Constraints
              ,history_table_id
          FROM [##SQLXL_Index_sys_objects] AS src
        WHERE 2 = src.temporal_type                         -- SYSTEM_VERSIONED_TEMPORAL_TABLE
           OR 2 = src.ledger_type                           -- UPDATABLE_LEDGER_TABLE
       ) AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.history_table_id

  LEFT OUTER
  JOIN (-- assign table objects to their data space <future> in-memory tables persist in Memory Optimized Data filegroup
        SELECT database_id,object_id
              ,data_space_id
          FROM [##SQLXL_Index_sys_indexes]
         WHERE type IN (N'0' -- rowstore heap
                       ,N'1' -- clustered rowstore
                       ,N'5' -- clustered columnstore
                       )
       ) AS data_space_obj
    ON tgt.database_id = data_space_obj.database_id
   AND tgt.object_id   = data_space_obj.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update historical source for a temporal/ledger table with type = 2, SQL2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Insert [##SQLXL_Index_sys_indexes] insert missing index and foreign key records
 NOTE: [fulltext_index_columns] added previously to [##SQLXL_Index_sys_index_columns]
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_sys_indexes] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,name
      ,type_desc
      ,sub_type_desc
      ,is_system_named
      ,is_unique
      ,data_space_id
      ,ignore_dup_key
      ,is_primary_key
      ,is_unique_constraint
      ,fill_factor
      ,is_padded
      ,is_disabled
      )
SELECT database_id
      ,object_id                  = parent_object_id
      ,index_id                   = object_id
      ,type
      ,sub_type                   = 0
      ,name
      ,type_desc
      ,sub_type_desc              = NULL
      ,is_system_named
      ,is_unique                  = 0
      ,data_space_id              = NULL
      ,ignore_dup_key             = 0
      ,is_primary_key             = 0
      ,is_unique_constraint       = 0
      ,fill_factor                = 100
      ,is_padded                  = NULL
      ,is_disabled
  FROM [##SQLXL_Index_sys_objects]
 WHERE type = N'F'                                              -- foreign key constraint
UNION ALL -- missing rowstore index records
SELECT database_id,object_id
      ,index_id                   = group_handle
      ,type                       = N'M'                        -- missing nonclustered rowstore index
      ,sub_type                   = 0
      ,name                       = N'MISSING INDEX'
      ,type_desc                  = N'MISSING INDEX'
      ,sub_type_desc              = NULL
      ,is_system_named            = 0
      ,is_unique                  = 0
      ,data_space_id              = NULL
      ,ignore_dup_key             = 0
      ,is_primary_key             = 0
      ,is_unique_constraint       = 0
      ,fill_factor                = 100
      ,is_padded                  = NULL
      ,is_disabled                = 0
  FROM [##SQLXL_Index_sys_dm_db_missing_index_details]
UNION ALL -- full text indexes
SELECT database_id,object_id
      ,index_id                   = object_id
      ,type                       = N'T'
      ,sub_type                   = 0
      ,name                       = N'FULLTEXT INDEX'
      ,type_desc                  = N'FULLTEXT INDEX'
      ,sub_type_desc              = NULL
      ,is_system_named            = 0
      ,is_unique                  = 0
      ,data_space_id              = NULL
      ,ignore_dup_key             = 0
      ,is_primary_key             = 0
      ,is_unique_constraint       = 0
      ,fill_factor                = 100
      ,is_padded                  = NULL
      ,is_disabled                = IIF(is_enabled = 0,1,0)
  FROM [##SQLXL_Index_sys_fulltext_indexes]
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert [##SQLXL_Index_sys_indexes] Add missing & foreign key constraint columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_objects] with count of indexes by index type,
 REQUIRES insert of missing index and foreign key records above
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_objects]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.type,tgt.sub_type,
--*/
       heap_index_CNT                     = COALESCE(ind_type.heap_index_CNT              ,0) -- rowstore heap
      ,clustered_index_CNT                = COALESCE(ind_type.clustered_index_CNT         ,0) -- clustered rowstore index
      ,nonclustered_index_CNT             = COALESCE(ind_type.nonclustered_index_CNT      ,0) -- nonclustered rowstore index
      ,xml_index_CNT                      = COALESCE(ind_type.xml_index_CNT               ,0) -- XML index
      ,spatial_index_CNT                  = COALESCE(ind_type.spatial_index_CNT           ,0) -- Spatial index
      ,clustered_columnstore_CNT          = COALESCE(ind_type.clustered_columnstore_CNT   ,0) -- Clustered columnstore
      ,nonclustered_columnstore_CNT       = COALESCE(ind_type.nonclustered_columnstore_CNT,0) -- nonclustered columnstore index
      ,nonclustered_hash_CNT              = COALESCE(ind_type.nonclustered_hash_CNT       ,0) -- Hash on In-Memory Clustered Columnstore
      ,json_index_CNT                     = COALESCE(ind_type.json_index_CNT              ,0) -- JSON index
      ------------------------------------
      ,fulltext_index_CNT                 = COALESCE(ftx_type.fulltext_index_CNT          ,0) -- full-text index of a tabular object
      ,missing_index_CNT                  = COALESCE(mix_type.missing_index_CNT           ,0) -- missing
      ,foreign_key_CNT                    = COALESCE(fkc_type.foreign_key_CNT             ,0) -- foreign key constraint
      ------------------------------------
      ,column_CNT                         = COALESCE(tc.column_CNT,fkc.column_CNT         ,0) -- columns count from [sys].[columns]
      ,column_null_CNT                    = COALESCE(tc.column_null_CNT                   ,0) -- NULL column count from [sys].[columns]
      ------------------------------------
      ,clr_trigger_CNT                    = COALESCE(tr.clr_trigger_CNT                   ,0) -- Assembly (CLR) DML trigger
      ,sql_trigger_CNT                    = COALESCE(tr.sql_trigger_CNT                   ,0) -- SQL DML trigger
      ,is_instead_of_trigger_CNT          = COALESCE(tr.is_instead_of_trigger_CNT         ,0) -- Instead of trigger
  FROM [##SQLXL_Index_sys_objects] AS tgt WITH (TABLOCKX)

  LEFT OUTER
  JOIN (-- Is table a Heap or Clustered Columnstore?
        SELECT database_id,object_id
              ,heap_index_CNT               = SUM(IIF(type = N'0',1,0)) -- rowstore heap
              ,clustered_index_CNT          = SUM(IIF(type = N'1',1,0)) -- clustered rowstore index
              ,nonclustered_index_CNT       = SUM(IIF(type = N'2',1,0)) -- nonclustered rowstore index
              ,xml_index_CNT                = SUM(IIF(type = N'3',1,0)) -- XML index
              ,spatial_index_CNT            = SUM(IIF(type = N'4',1,0)) -- Spatial index
              ,clustered_columnstore_CNT    = SUM(IIF(type = N'5',1,0)) -- Clustered columnstore
              ,nonclustered_columnstore_CNT = SUM(IIF(type = N'6',1,0)) -- nonclustered columnstore index
              ,nonclustered_hash_CNT        = SUM(IIF(type = N'7',1,0)) -- Hash index on In-Memory Clustered Columnstore
              ,json_index_CNT               = SUM(IIF(type = N'9',1,0)) -- JSON index
          FROM [##SQLXL_Index_sys_indexes]
         GROUP BY
               database_id,object_id
       ) AS ind_type
    ON ind_type.database_id = tgt.database_id
   AND ind_type.object_id   = tgt.object_id

  LEFT OUTER
  JOIN (-- count of full text indexes by object
        SELECT database_id,object_id
              ,fulltext_index_CNT           = SUM(1) -- full-text index of a tabular object
          FROM [##SQLXL_Index_sys_fulltext_indexes]
         GROUP BY
               database_id,object_id
       ) AS ftx_type
    ON ftx_type.database_id = tgt.database_id
   AND ftx_type.object_id   = tgt.object_id

  LEFT OUTER
  JOIN (-- count of missing indexes by object
        SELECT database_id,object_id
              ,missing_index_CNT            = SUM(1) -- missing
          FROM  [##SQLXL_Index_sys_dm_db_missing_index_details]
         GROUP BY
               database_id,object_id
       ) AS mix_type
    ON mix_type.database_id = tgt.database_id
   AND mix_type.object_id   = tgt.object_id

  LEFT OUTER
  JOIN (-- count of foreign keys by object
        SELECT database_id
              ,object_id        = parent_object_id                                                  -- for System, History, Constraints
              ,foreign_key_CNT  = SUM(1) -- foreign key constraint
          FROM [##SQLXL_Index_sys_objects]
         WHERE type = N'F'
         GROUP BY
               database_id
              ,parent_object_id                                                                     -- for System, History, Constraints
       ) AS fkc_type
    ON fkc_type.database_id = tgt.database_id
   AND fkc_type.object_id   = tgt.object_id

  LEFT OUTER
  JOIN (-- count of columns by object
        SELECT database_id,object_id
              ,column_CNT      = COUNT_BIG(1)
              ,column_null_CNT = SUM(IIF(is_nullable = 1,1,0))
          FROM [##SQLXL_Index_sys_columns]
         GROUP BY
               database_id,object_id
       ) AS tc
    ON tgt.database_id  = tc.database_id
   AND tgt.object_id    = tc.object_id

  LEFT OUTER
  JOIN (-- count of columns in foreign key constraint
        SELECT database_id
              ,object_id  = constraint_object_id
              ,column_CNT = COUNT_BIG(1)
          FROM [##SQLXL_Index_sys_foreign_key_columns]
         GROUP BY
               database_id
              ,constraint_object_id
       ) AS fkc
    ON tgt.database_id  = fkc.database_id
   AND tgt.object_id    = fkc.object_id

  LEFT OUTER
  JOIN (-- Summarize count of DML triggers by parent object
        SELECT database_id
              ,parent_object_id
              ,clr_trigger_CNT           = SUM(IIF(type = N'TA',1,0)) -- Assembly (CLR) DML trigger
              ,sql_trigger_CNT           = SUM(IIF(type = N'TR',1,0)) -- SQL DML trigger
              ,is_instead_of_trigger_CNT = SUM(IIF(is_instead_of_trigger = 1,1,0))
          FROM [##SQLXL_Index_sys_objects]
         WHERE parent_class  = 1 -- Object or column for the DML triggers
           AND is_ms_shipped = 0 -- Trigger NOT created on behalf of the user by an internal SQL Server component
         GROUP BY
               database_id
              ,parent_object_id
       ) AS tr
    ON tgt.database_id = tr.database_id
   AND tgt.object_id   = tr.parent_object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_objects] with count of indexes by index type'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_objects] partition counts and amounts
 Object level only. Does not rollup history/archive & internal tables to parent level
 NOTE: row_CNT is not maintained in sys.dm_db_partition_stats for in memory (XTP) objects
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_objects]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,
--*/
      -----------------------------------------------------------------------------------------------------
       obj_partition_count            = ps_obj.partition_count               -- <FUTURE> can get from data_spaces.fanout
      ,obj_used_page_count            = ps_obj.used_page_count
      ,obj_in_row_data_page           = ps_obj.in_row_data_page
      ,obj_in_row_used_page           = ps_obj.in_row_used_page
      ,obj_in_row_reserved_page       = ps_obj.in_row_reserved_page
      ,obj_lob_used_page              = ps_obj.lob_used_page
      ,obj_lob_reserved_page          = ps_obj.lob_reserved_page
      ,obj_row_overflow_used_page     = ps_obj.row_overflow_used_page
      ,obj_row_overflow_reserved_page = ps_obj.row_overflow_reserved_page
      ,obj_reserved_page              = ps_obj.reserved_page
      ,obj_row_count                  = ps_obj.row_count
      -----------------------------------------------------------------------------------------------------
      ,idx_partition_count            = ps_idx.partition_count               -- <FUTURE> can get from data_spaces.fanout
      ,idx_used_page_count            = ps_idx.used_page_count
      ,idx_in_row_data_page           = ps_idx.in_row_data_page
      ,idx_in_row_used_page           = ps_idx.in_row_used_page
      ,idx_in_row_reserved_page       = ps_idx.in_row_reserved_page
      ,idx_lob_used_page              = ps_idx.lob_used_page
      ,idx_lob_reserved_page          = ps_idx.lob_reserved_page
      ,idx_row_overflow_used_page     = ps_idx.row_overflow_used_page
      ,idx_row_overflow_reserved_page = ps_idx.row_overflow_reserved_page
      ,idx_reserved_page              = ps_idx.reserved_page

  FROM [##SQLXL_Index_sys_objects] AS tgt WITH (TABLOCKX)

  LEFT OUTER
  JOIN (-- get base table size metrics from the physical table representation
        SELECT ps.database_id
              ,ps.object_id
              ,partition_count            = SUM(partition_CNT             )
              ,used_page_count            = SUM(used_page_CNT             )
              ,in_row_data_page           = SUM(in_row_data_page          )
              ,in_row_used_page           = SUM(in_row_used_page          )
              ,in_row_reserved_page       = SUM(in_row_reserved_page      )
              ,lob_used_page              = SUM(lob_used_page             )
              ,lob_reserved_page          = SUM(lob_reserved_page         )
              ,row_overflow_used_page     = SUM(row_overflow_used_page    )
              ,row_overflow_reserved_page = SUM(row_overflow_reserved_page)
              ,reserved_page              = SUM(reserved_page             )
              ,row_count                  = SUM(row_CNT                   )
          FROM [##SQLXL_Index_sys_dm_db_partition_stats] AS ps
          JOIN [##SQLXL_Index_sys_indexes]               AS idx
            ON ps.database_id = idx.database_id
           AND ps.object_id   = idx.object_id
         WHERE idx.type      IN (N'0' -- rowstore heap
                                ,N'1' -- clustered rowstore index
                                ,N'5' -- clustered columnstore
                                )
         GROUP BY
               ps.database_id
              ,ps.object_id
      ) as ps_obj
    ON tgt.database_id = ps_obj.database_id
   AND tgt.object_id   = ps_obj.object_id

  LEFT OUTER
  JOIN (-- compute size of all indexes on a object
        SELECT ps.database_id
              ,ps.object_id
              ,partition_count            = SUM(partition_CNT             )
              ,used_page_count            = SUM(used_page_CNT             )
              ,in_row_data_page           = SUM(in_row_data_page          )
              ,in_row_used_page           = SUM(in_row_used_page          )
              ,in_row_reserved_page       = SUM(in_row_reserved_page      )
              ,lob_used_page              = SUM(lob_used_page             )
              ,lob_reserved_page          = SUM(lob_reserved_page         )
              ,row_overflow_used_page     = SUM(row_overflow_used_page    )
              ,row_overflow_reserved_page = SUM(row_overflow_reserved_page)
              ,reserved_page              = SUM(reserved_page             )
              ,row_count                  = SUM(row_CNT                   )
          FROM [##SQLXL_Index_sys_dm_db_partition_stats] AS ps
          JOIN [##SQLXL_Index_sys_indexes]               AS idx
            ON ps.database_id = idx.database_id
           AND ps.object_id   = idx.object_id
         WHERE idx.type  NOT IN (N'0' -- rowstore heap
                                ,N'1' -- clustered rowstore index
                                ,N'5' -- clustered columnstore
                                )
         GROUP BY
               ps.database_id
              ,ps.object_id
      ) as ps_idx
    ON tgt.database_id = ps_idx.database_id
   AND tgt.object_id   = ps_idx.object_id
 WHERE tgt.type IN (N'IT'
                   ,N'U'
                   ,N'V'
                   )

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_objects] partition counts and amounts'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_objects] Identify system-named objects not already flagged
 object type "C" Check Constraints       SQL DMV source includes column "is_system_named"
 object type "D" Default Constraints     SQL DMV source includes column "is_system_named"
 object type "F" Foreign Key Constraints SQL DMV source includes column "is_system_named"
 Key constraints (Primary Key, Unique)   SQL DMV source includes column "is_system_named"
 Edge constraints                        SQL DMV source includes column "is_system_named"
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
--*/
;WITH cte_nm AS (
SELECT obj.database_id
      ,obj.object_id
      ,obj.type
      ,obj.is_system_named
      ,obj.name
      ,obj.rev_name
      ,pvt_obj.*
  FROM (-- reverse the name of objects for parsing below
        SELECT database_id,object_id,name,type
              ,is_system_named
              ,rev_name = REVERSE(name)
          FROM [##SQLXL_Index_sys_objects]
       ) AS obj
 OUTER
 APPLY (-- create columns from parsed string rows using PIVOT function
        SELECT [1],[2],[3],[4],[5]
          FROM (SELECT RowNbr  = ROW_NUMBER() OVER (ORDER BY q.RowNbr)
                      ,len_str = LEN(q.string)
                  FROM [dbo].[SQLXL_Parse_Strings](obj.rev_name,N'__') AS q
                 WHERE q.string > N''
               ) AS src
         PIVOT (    MAX(src.len_str)
                FOR src.RowNbr IN ([1],[2],[3],[4],[5])
               ) AS pvt
       ) AS pvt_obj
 WHERE 1 = 1    -- simplifies adding additional clauses for testing
   AND obj.is_system_named <> 1
   AND obj.type IN (N'C'  -- check constraint
                   ,N'D'  -- Default (constraint or stand-alone)
                   ,N'EC' -- Edge constraint
                   ,N'IT' -- Internal table
                   ,N'PK' -- Primary key constraint
                   ,N'UQ' -- Unique constraint
                   ) -- foreign key constraints handled with indexes below
   AND (   (obj.type = N'C'  AND name LIKE N'CK__%' AND [1] =  8 AND [4] = 2 AND [5] IS NULL) -- <FUTURE> Confirm is default convention
        OR (obj.type = N'D'  AND name LIKE N'DF__%' AND [1] =  8 AND [4] = 2 AND [5] IS NULL)
        OR (obj.type = N'D'  AND name LIKE N'DF__%' AND [1] =  7 AND [4] = 2 AND [5] IS NULL AND name LIKE N'%__DEFAULT')
        OR (obj.type = N'EC' AND name LIKE '%[^_0-9A-Fa-f]%')                                 -- <FUTURE> confirm is default convention
        OR (obj.type = N'PK' AND name LIKE N'PK__%' AND [1] =  8 AND [3] = 2 AND [4] IS NULL)
        OR (obj.type = N'PK' AND name LIKE N'PK__%' AND [1] = 16 AND [3] = 2 AND [4] IS NULL)
        OR (obj.type = N'UQ' AND name LIKE N'UQ__%' AND [1] = 16 AND [3] = 2 AND [4] IS NULL)
        OR (obj.type = N'IT' AND (   name LIKE N'extended_index_%'
                                  OR name LIKE N'fulltext_avdl_%'
                                  OR name LIKE N'fulltext_docidfilter_%'
                                  OR name LIKE N'fulltext_index_docidstatus_%'
                                  OR name LIKE N'fulltext_indexeddocid_%'
                                  OR name LIKE N'ifts_comp_fragment_%'
                                  OR name LIKE N'memory_optimized_history_table_%'
                                  OR name LIKE N'xml_index_nodes_%'
                                  OR name LIKE N'json_index_nodes_%'                                -- <FUTURE> JSON
                                 )
           )
       )
)
UPDATE tgt -- [##SQLXL_Index_sys_objects]
   SET is_system_named = 2 -- likely system named
  FROM [##SQLXL_Index_sys_objects] AS tgt WITH (TABLOCKX)
  JOIN cte_nm                      AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_objects] system-named objects'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_indexes] identify system-named indexes not already flagged
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
--*/
UPDATE tgt -- [##SQLXL_Index_sys_indexes]
   SET is_system_named = 2 -- likely system named
  FROM [##SQLXL_Index_sys_indexes] AS tgt WITH (TABLOCKX)
  JOIN (-- identify candidate "system named" indexes
        SELECT database_id,object_id,index_id,type,sub_type
              ,idx.name
              ,idx.rev_name
              ,pvt_idx.*
          FROM (-- reverse the name of indexes for parsing below
                SELECT database_id,object_id,index_id,type,sub_type
                      ,name
                      ,rev_name = REVERSE(name)
                  FROM [##SQLXL_Index_sys_indexes]
                 WHERE type       NOT IN (N'0') -- omit rowstore heaps
                   AND is_system_named = 0
               ) AS idx
         OUTER
         APPLY (-- create columns from parsed string rows using PIVOT function
                SELECT [1],[2],[3],[4],[5]
                  FROM (SELECT RowNbr  = ROW_NUMBER() OVER (ORDER BY q.RowNbr)
                              ,len_str = LEN(q.string)
                          FROM [dbo].[SQLXL_Parse_Strings](idx.rev_name,N'__') AS q
                         WHERE q.string > N''
                       ) AS src
                 PIVOT (    MAX(src.len_str)
                        FOR src.RowNbr IN ([1],[2],[3],[4],[5])
                       ) AS pvt
               ) AS pvt_idx
         WHERE (    type IN (N'1' -- clustered rowstore
                            ,N'2' -- nonclustered rowstore
                            )
                AND (   idx.name LIKE N'PK__%'
                     OR idx.name LIKE N'UQ__%'
                    )
                AND [1] IN (8,16)
                AND [3]  = 2
                AND [4] IS NULL
               )
            OR (type IN (N'F')      AND idx.name LIKE N'FK__%'    AND [1]  = 8      AND [4] = 2 AND [5] IS NULL)
            OR idx.name LIKE N'ClusteredColumnStoreIndex-%'
            OR (idx.name LIKE N'ClusteredIndex-%'                 AND [1]  = 30)
            OR (idx.name LIKE N'GRAPH_UNIQUE_INDEX_%'             AND [1]  = 51)
            OR idx.name LIKE N'HashIndex-%'
            OR idx.name LIKE N'NonClusteredColumnStoreIndex-%'
            OR idx.name LIKE N'memory_optimized_history_table_%'
            OR idx.name LIKE N'NonClusteredColumnStoreIndex-%'
            OR (idx.name LIKE N'NonClusteredIndex-%'              AND [1]  = 33)
            OR (idx.name LIKE N'SpatialIndex-%'                   AND [1]  = 28)
            OR idx.name LIKE N'XMLIndex-%'
            OR idx.name LIKE N'JSONIndex-%'                                                         -- <FUTURE> JSON
            OR idx.name LIKE N'_dta_index_%'                -- data tuning advisor naming convention
       ) AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
   AND tgt.index_id    = src.index_id
   AND tgt.type        = src.type
   AND tgt.sub_type    = src.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_indexes] system-named indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_columns] Incorporate additional column-level elements including statistics
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_columns]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.column_id,
--*/
      --------------------------------------------------------------------------------------------------------------------------------------
      -- Statistics
      --------------------------------------------------------------------------------------------------------------------------------------
       all_density                = col_stats.all_density
      ,average_length             = IIF(tgt.system_type_name = N'decimal',tgt.max_length,col_stats.average_length)
      ,Uniqueness                 = COALESCE(1.0 * col_stats.Rows * col_stats.all_density -- if computed separately for this column
                                            ,iles.uniqueness                              -- from index lead element
                                            ,IIF(tgt.is_identity    = 1                     ,1.0,NULL)
                                            ,IIF(tgt.seq_object_id IS NOT NULL              ,1.0,NULL)
                                            ,IIF(def_con.definition = N'(newsequentialid())',1.0,NULL)
                                            ,IIF(def_con.definition = N'(newid())'          ,1.0,NULL)
                                            ,NULL
                                            )
      ,histogram_steps            = COALESCE(col_stats.steps,iles.steps)
      ,param_sniff                = COALESCE(col_stats.param_sniff,iles.param_sniff)
      ,stats_name                 = col_stats_prop.name
      ,stats_no_recompute         = col_stats_prop.no_recompute
      ,stats_filter_definition    = col_stats_prop.filter_definition
      ,stats_is_incremental       = col_stats_prop.is_incremental
      ,stats_has_persisted_sample = col_stats_prop.has_persisted_sample
      ,stats_auto_drop            = col_stats_prop.auto_drop
      --------------------------------------------------------------------------------------------------------------------------------------
      ,column_descriptors = REPLACE(QUOTENAME(COALESCE(tgt.name,'###c.name NOT FOUND###')) + N' '
                          + tgt.data_type_abbr_len -- abbreviated data type and length in bytes for display
      --------------------------------------------------------------------------------------------------------------------------------------
                          + IIF(chk.con IS NOT NULL
                               ,chk.con + CASE WHEN def_con.definition = N'(newsequentialid())' THEN N'(SUID)'
                                               WHEN def_con.definition = N'(newid())'           THEN N'(NUID)'
                                               WHEN LEN(def_con.definition) <= 21               THEN def_con.definition
                                               ELSE N''
                                          END -- only get definition for default (constraint or stand-alone)
                               ,N'')
                          + IIF(tgt.is_identity   = 1        ,N' IDN(' + CAST(COALESCE(tgt.increment_value,1) AS NVARCHAR(20)) + N')',N'')
                          + IIF(tgt.seq_object_id IS NOT NULL,N' SEQ(' + CAST(COALESCE(tgt.seq_increment  ,1) AS NVARCHAR(20)) + N')',N'')
                          + IIF(tgt.is_nullable   = 1        ,N' NULL',N'')
                          ------------------------------------------------------------------------------------------------------------------
                          + IIF(tgt.is_computed   = 1        ,N' CCOL:' + IIF(tgt.is_persisted = 1,N'Prst',N'*NOTPrst*'),N'')
                          ------------------------------------------------------------------------------------------------------------------
                          -- density & incremental uniqueness
                          + CASE WHEN 1.0 * col_stats.Rows * col_stats.all_density > 0.0
                                 THEN N' (' + [dbo].[SQLXL_3SD](1.0 * col_stats.Rows * col_stats.all_density,N'N') + N')'
                                 WHEN iles.uniqueness    > 0.0                    THEN N' (' + [dbo].[SQLXL_3SD](iles.uniqueness,N'N') + N')'
                                 WHEN tgt.is_identity    = 1                      THEN N'' -- identity column alreadu flagged above
                                 WHEN tgt.seq_object_id IS NOT NULL               THEN N'' -- sequence column alreadu flagged above
                                 WHEN def_con.definition = N'(newsequentialid())' THEN N'' -- newsequentialid column alreadu flagged above
                                 WHEN obj.type           = N'TF'                  THEN N'' -- SQL table-valued-function SQL 2012+
                                 WHEN obj.type           = N'V'                   THEN N'' -- view
                                 ELSE N''
                            END

                          ------------------------------------------------------------------------------------------------------------------
                           -- Per BOL: "ANSI_PADDING should always be set to ON. SET ANSI_PADDING setting does not affect
                           -- the nchar, nvarchar, ntext, text,image, varbinary(max), varchar(max), and nvarchar(max) data types.
                           -- They always display the SET ANSI_PADDING ON behavior. This means trailing spaces and zeros are not trimmed."
                          ------------------------------------------------------------------------------------------------------------------
                          + IIF(    tgt.is_ansi_padded = 0
                                AND tgt.system_type_name IN (N'char'
                                                            ,N'nchar'
                                                            ,N'varchar'
                                                            ,N'nvarchar'
                                                            ,N'binary'
                                                            ,N'varbinary'
                                                            )
                               ,N' ' + N'PADOFF'
                               ,N'')
                          ------------------------------------------------------------------------------------------------------------------
                          + IIF(obj.is_replicated           = 1 AND tgt.is_replicated      = 0,N' ' + N'NOTREPL',N'')
                          + IIF(obj.is_merge_published      = 1 AND tgt.is_merge_published = 0,N' ' + N'NOTMRG' ,N'')

                          -- keep in synch with idx_type_hdr
                          + IIF(tgt.xml_collection_id     > 0,N' ' + N'XMLCID ' + QUOTENAME(tgt.xml_collection_id   ),N'')
--                        + IIF(tgt.json_collection_id    > 0,N' ' + N'JSNCID ' + QUOTENAME(tgt.xml_collection_id   ),N'') --<FUTURE> JSON
                          + IIF(tgt.rule_object_id        > 0,N' ' + N'RULEID ' + QUOTENAME(tgt.rule_object_id      ),N'')
                          + IIF(tgt.encryption_type       > 0,N' ' + N'ENCTYPE' + QUOTENAME(tgt.encryption_type_desc),N'')

                          -- keep in synch with idx_type_hdr
                          + IIF(tgt.is_xml_document       = 1,N' ' + N'XMLDOC'   ,N'')
--                        + IIF(tgt.is_json_document      = 1,N' ' + N'JSNDOC'   ,N'')                                     --<FUTURE> JSON
                          + IIF(tgt.is_rowguidcol         = 1,N' ' + N'ROWUID'   ,N'')
                          + IIF(tgt.is_filestream         = 1,N' ' + N'FLSTRM'   ,N'')
                          + IIF(tgt.is_non_sql_subscribed = 1,N' ' + N'NonSQLSub',N'')
                          + IIF(tgt.is_dts_replicated     = 1,N' ' + N'DTSREPL'  ,N'')
                          + IIF(tgt.is_hidden             = 1,N' ' + N'HIDN'     ,N'')
                          + IIF(tgt.is_masked             = 1,N' ' + N'MSKD'     ,N'')
                          + IIF(tgt.is_sparse             = 1,N' ' + N'SPARSE'   ,N'')
                          + IIF(tgt.is_column_set         = 1,N' ' + N'COLSET'   ,N'')
                           ----------------------------------------------------------------------
                          + IIF(tgt.generated_always_type > 0,N' ' + N'GenAlwaysType(' + tgt.generated_always_type_desc+ N')',N'')
                          + IIF(tgt.graph_type            > 0,N' ' + N'GrphTyp ' + tgt.graph_type_desc                       ,N'')
                           -- Encryption --------------------------------------------------------
                          + IIF(tgt.column_encryption_key_id > 0,N' ' + N'ENCKEYID' + QUOTENAME(tgt.column_encryption_key_id),N'')
                          + IIF(tgt.column_encryption_key_database_name IS NOT NULL
                               ,N' ' + N'ENCKEYDB' + QUOTENAME(tgt.column_encryption_key_database_name)
                               ,N'')
                           -- Non-Database Collation --------------------------------------------------------
                          + IIF(tgt.uses_database_collation = 0,N' COLL:' + tgt.collation_name,N'')

                          -- Empty tables ------------------------------------------------------------------------------
                          + IIF(mt_partitions.object_id IS NOT NULL
                               ,N' (MT)'          -- table is empty
                               ,N'')
                          -- Full Text ---------------------------------------------------------
                          +IIF(ftic.column_id IS NOT NULL
                              ,IIF(ftic.language_id           > 0,N' LCID ' + QUOTENAME(ftic.language_id),N'')
                              + N' Smntcs ' + IIF(ftic.statistical_semantics = 1,N'ON',N'OFF')
                              ,N'')

                          -- Statistics Properties - substitute lead index key column stats if none found for column -----------------------
                          + IIF(COALESCE(col_stats.steps,iles.steps) IS NULL
                               ,N''                                                                       -- NO STATS
                               , IIF(COALESCE(col_stats.steps,iles.steps) > 0
                                    ,N' STP ' + CAST(COALESCE(col_stats.steps,iles.steps) AS NVARCHAR(20))
                                    ,N'')
                               + IIF(COALESCE(col_stats.param_sniff,iles.param_sniff) IS NOT NULL
                                    ,N' SNF ' + [dbo].[SQLXL_3SD](COALESCE(col_stats.param_sniff,iles.param_sniff),N'N') + N'x'
                                    ,N'')
                               + IIF(col_stats_prop.filter_definition IS NOT NULL,N' FLTR'  ,N'')
                               + IIF(col_stats_prop.has_persisted_sample      = 1
                                    ,N' STATPRST ' + [dbo].[SQLXL_3SD](col_stats_prop.persisted_sample_percent,N'N') + N'%'
                                    ,N'')
                               + IIF(col_stats_prop.is_incremental            = 1,N' INCR'  ,N'')
                               + IIF(col_stats_prop.no_recompute              = 1,N' NORECO',N'')
                               + IIF(col_stats_prop.auto_drop                 = 0,N' NODROP',N'')
                               )
                          ,NCHAR(031),NCHAR(032)) -- strip out any "Unit Separator" control codes
  FROM [##SQLXL_Index_sys_columns] AS tgt WITH (TABLOCKX)
  ------------------------------------------------------------------------------------------------------------------------------------------
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON tgt.database_id = obj.database_id
   AND tgt.object_id   = obj.object_id
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER -- full text index columns
  JOIN [##SQLXL_Index_sys_index_columns] AS ftic  -- info for full text columns
    ON tgt.database_id = ftic.database_id
   AND tgt.object_id   = ftic.object_id
   AND tgt.column_id   = ftic.column_id
   AND N'T'            = ftic.type                -- full-text index of a tabular object
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- Column Statistics - numeric values
        SELECT sssh.database_id
              ,sssh.object_id
              ,sssh.column_id
              ,sssh.Rows
              ,sssh.steps
              ,ssdv.all_density
              ,ssdv.average_length
              ,sshs.param_sniff
          FROM [##SQLXL_Index_sys_showstatistics_statheader]        AS sssh
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_showstatistics_densityvector]     AS ssdv
            ON sssh.database_id = ssdv.database_id
           AND sssh.object_id   = ssdv.object_id
           AND sssh.column_id   = ssdv.column_id         -- column statistics. index computed separately
           AND 1                = ssdv.row_ID            -- some column_ids have more than one row. looks like broken references
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_showstatistics_histogram_summary] AS sshs
            ON sssh.database_id = sshs.database_id
           AND sssh.object_id   = sshs.object_id
           AND sssh.column_id   = sshs.column_id
         WHERE sssh.filter_expression IS NULL -- using only unfiltered statistics for now <FUTURE>
      ) AS col_stats
    ON tgt.database_id = col_stats.database_id
   AND tgt.object_id   = col_stats.object_id
   AND tgt.column_id   = col_stats.column_id
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- Column Statistics - properties
        SELECT st.database_id
              ,st.object_id
              ,sc.column_id
              ,st.name
              ,st.no_recompute
              ,st.filter_definition
              ,st.is_incremental
              ,st.has_persisted_sample
              ,st.auto_drop
              ,sp.persisted_sample_percent
              ,rn = ROW_NUMBER() OVER (PARTITION BY st.database_id
                                                   ,st.object_id
                                                   ,sc.column_id
                                           ORDER BY st.no_recompute         DESC
                                                   ,st.has_filter           DESC
                                                   ,st.has_persisted_sample DESC
                                      )
          FROM [##SQLXL_Index_sys_stats]                  AS st
          JOIN [##SQLXL_Index_sys_stats_columns]          AS sc
            ON st.database_id = sc.database_id
           AND st.object_id   = sc.object_id
           AND st.stats_id    = sc.stats_id
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_dm_db_stats_properties] AS sp
            ON sc.database_id = sp.database_id
           AND sc.object_id   = sp.object_id
           AND sc.stats_id    = sp.stats_id
         WHERE 1 = 1    -- simplifies adding additional clauses for testing
           AND st.auto_created = 1
       ) col_stats_prop
    ON tgt.database_id = col_stats_prop.database_id
   AND tgt.object_id   = col_stats_prop.object_id
   AND tgt.column_id   = col_stats_prop.column_id
   AND 1               = col_stats_prop.rn
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- identify objects that are empty - no rows in any partitions
        SELECT database_id,object_id
          FROM [##SQLXL_Index_sys_partitions]
         GROUP BY
               database_id,object_id
        HAVING SUM(rows) = 0
       ) AS mt_partitions
    ON tgt.database_id = mt_partitions.database_id
   AND tgt.object_id   = mt_partitions.object_id
  ------------------------------------------------------------------------------------------------------------------------------------------
  -- Column CHECK & default (constraint or stand-alone)
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- list of columns with check &/or default (constraint or stand-alone) - get one record per column in case of multiple constraints
        -- chk.object_id is the check/default constraint ID
        SELECT database_id
              ,parent_object_id                                                                     -- for System, History, Constraints
              ,parent_column_id
              ,con = MAX(IIF(type = N'C',N' CHK',N''))              -- check constraint
                   + MAX(IIF(type = N'D',N' DEF',N''))              -- default (constraint or stand-alone)
          FROM [##SQLXL_Index_sys_objects]
         WHERE parent_column_id > 0    -- not a table constraint
           AND definition NOT LIKE N'(NEXT VALUE FOR [Sequences].%'
         GROUP BY
               database_id
              ,parent_object_id                                                                     -- for System, History, Constraints
              ,parent_column_id
       ) AS chk
    ON tgt.database_id = chk.database_id
   AND tgt.object_id   = chk.parent_object_id                                                       -- for System, History, Constraints
   AND tgt.column_id   = chk.parent_column_id
  ------------------------------------------------------------------------------------------------------------------------------------------
  -- Column default (constraint or stand-alone) definition
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS def_con
    ON tgt.database_id       = def_con.database_id
   AND tgt.default_object_id = def_con.object_id   -- link to "D" object types
  ------------------------------------------------------------------------------------------------------------------------------------------
  -- Index lead key element statistics
  -- If statistics have not been computed individually for a column try the lead element from index statistics
  ------------------------------------------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- compute column statistics from lead index key element. used if column has not had statistics created on it yet
        SELECT sic.database_id
              ,sic.object_id
              ,sic.column_id
              ,steps            = AVG(sssh.steps)
              ,uniqueness       = AVG(1.0 * sssh.rows * ssdv.all_density)
              ,param_sniff      = MIN(sshs.param_sniff) -- if multiples get the best case scenario
          FROM [##SQLXL_Index_sys_index_columns]                    AS sic
          JOIN [##SQLXL_Index_sys_showstatistics_densityvector]     AS ssdv
            ON sic.database_id = ssdv.database_id
           AND sic.object_id   = ssdv.object_id
           AND sic.index_id    = ssdv.index_id
           AND sic.type        = ssdv.type
           AND sic.sub_type    = ssdv.sub_type
           AND sic.key_ordinal = ssdv.row_id
          JOIN [##SQLXL_Index_sys_showstatistics_statheader]        AS sssh
            ON ssdv.database_id = sssh.database_id
           AND ssdv.object_id   = sssh.object_id
           AND ssdv.index_id    = sssh.index_id
          JOIN [##SQLXL_Index_sys_showstatistics_histogram_summary] AS sshs
            ON ssdv.database_id = sshs.database_id
           AND ssdv.object_id   = sshs.object_id
           AND ssdv.index_id    = sshs.index_id
         WHERE sic.key_ordinal  = 1 -- first index key element
         GROUP BY
               sic.database_id
              ,sic.object_id
              ,sic.column_id
       ) iles -- Index lead element statistics
    ON tgt.database_id = iles.database_id
   AND tgt.object_id   = iles.object_id
   AND tgt.column_id   = iles.column_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_columns] Incorporate additional column-level elements including statistics'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Insert [##SQLXL_Index_sys_index_columns] Add missing indexes & foreign key constraint columns
 Used below by "Incorporate additional column-level elements"
 NOTE: Table [##SQLXL_Index_sys_index_columns] already includes all:
       [sys].[index_columns]
       [sys].[function_order_columns]
       [sys].[fulltext_index_columns]
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_sys_index_columns] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,index_column_id
      ,column_id
      ,key_ordinal
      ,idx_column_display_sequence
      ,is_included_column
      ,is_descending_key
      ,is_index_column_filtered
      ,partition_ordinal
      ,column_store_order_ordinal
      ,column_usage
      ,idx_stats_uniqueness_prefix
      )
       -- foreign key columns
SELECT database_id
      ,object_id                   = parent_object_id           -- for System, History, Constraints
      ,index_id                    = constraint_object_id
      ,type                        = N'F'                       -- foreign key constraint
      ,sub_type                    = 0
      ,index_column_id             = constraint_column_id
      ,column_id                   = parent_column_id
      ,key_ordinal                 = constraint_column_id
      ,idx_column_display_sequence = constraint_column_id       -- update for index type "F"
      ,is_included_column          = 0
      ,is_descending_key           = 0
      ,is_index_column_filtered    = 0
      ,partition_ordinal           = 0
      ,column_store_order_ordinal  = 0
      ,column_usage                = NULL
      ,idx_stats_uniqueness_prefix = N'FKC'
  FROM [##SQLXL_Index_sys_foreign_key_columns]                  -- get all records
UNION ALL -- missing rowstore index columns
SELECT database_id,object_id
      ,index_id                    = group_handle
      ,type                        = N'M'                       -- missing nonclustered rowstore index
      ,sub_type                    = 0
      ,index_column_id             = 0
      ,column_id                   = column_id
      ,key_ordinal                 = 0
      ,idx_column_display_sequence = 0                          -- update for index type "M", setting all to zero for now.
      ,is_included_column          = IIF(column_usage = N'INCLUDE',1,0)
      ,is_descending_key           = 0
      ,is_index_column_filtered    = 0
      ,partition_ordinal           = 0
      ,column_store_order_ordinal  = 0
      ,column_usage                = column_usage
      ,idx_stats_uniqueness_prefix = N'MIX'
  FROM [##SQLXL_Index_sys_dm_db_missing_index_columns]
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Add missing & foreign key constraint columns to [##SQLXL_Index_sys_index_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Insert [##SQLXL_Index_sys_index_columns] with clustered index key column(s), UNIQUEIFIER, & ROW LOCATOR
 NOTE: Table [##SQLXL_Index_sys_index_columns] already includes all:
       [sys].[index_columns]
       [sys].[function_order_columns]
       [sys].[fulltext_index_columns]
       [sys].[dm_db_missing_index_columns]
       [sys].[foreign_key_columns]
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DELETE FROM [##SQLXL_Index_sys_index_columns] WHERE idx_stats_uniqueness_prefix IN (N'CX',N'RL');
*/

INSERT
  INTO [##SQLXL_Index_sys_index_columns] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,column_id
      ,idx_stats_uniqueness_prefix
      -- columns that do not not allow NULL values -----
      ,index_column_id
      ,key_ordinal
      ,partition_ordinal
      ,column_store_order_ordinal
      ,column_descriptors
      ,is_included_column
      ,is_descending_key
      ,idx_column_display_sequence
      )
----------------------------------------------------------------------------------------------------------------------------
-- Get candidate clustered index key columns required to be part of indexes to lookup source table values
-- NOTE: can't assign key ordinal to added clustered keys in orderto use "EXCEPT" function
----------------------------------------------------------------------------------------------------------------------------
SELECT six.database_id,six.object_id,six.index_id,six.type,six.sub_type
      ,sic.column_id
      ,idx_stats_uniqueness_prefix = N'CX'                   -- indicates clustered index column added to lookup unique row in table
      -- columns that do not not allow NULL values -----
      ,index_column_id             = 0
      ,key_ordinal                 = 0
      ,partition_ordinal           = 0
      ,column_store_order_ordinal  = 0
      ,column_descriptors          = COALESCE(col.column_descriptors,N'')
      ,is_included_column          = 0
      ,is_descending_key           = 0
      ,idx_column_display_sequence = 9999
  FROM [##SQLXL_Index_sys_indexes]       AS six
  JOIN [##SQLXL_Index_sys_index_columns] AS sic
    ON six.database_id = sic.database_id
   AND six.object_id   = sic.object_id
   AND N'1'            = sic.type
   AND six.sub_type    = sic.sub_type
   AND (   0           < sic.key_ordinal
        OR 0           < sic.partition_ordinal
       )
  JOIN [##SQLXL_Index_sys_columns]       AS col
    ON sic.database_id = col.database_id
   AND sic.object_id   = col.object_id
   AND sic.column_id   = col.column_id
 WHERE 1 = 1    -- simplifies adding additional clauses for testing
   AND six.type IN (N'2'             -- nonclustered rowstore index
                   ,N'6'             -- nonclustered columnstore index
                   ,N'M'             -- missing nonclustered rowstore index
                   )
   AND COALESCE(six.is_graph_table,0) = 0
----------------------------------------------------------------------------------------------------------------------------
EXCEPT -- Exclude all clustered index key candidates that already occur in the nonclustered (rowstore,columnstore) and missing indexes
       -- included columns are considered part of the lookup to clustered key since already exist in index
       -- values for is_included_column not included here to allow for all columns from index
----------------------------------------------------------------------------------------------------------------------------
SELECT sic.database_id,sic.object_id,sic.index_id,sic.type,sic.sub_type
      ,sic.column_id
      ,idx_stats_uniqueness_prefix = N'CX'                   -- indicates clustered index column added to lookup unique row in table
      -- columns that do not not allow NULL values -----
      ,index_column_id             = 0
      ,key_ordinal                 = 0
      ,partition_ordinal           = 0
      ,column_store_order_ordinal  = 0
      ,column_descriptors          = COALESCE(col.column_descriptors,N'')
      ,is_included_column          = 0    -- required to create exception to above
      ,is_descending_key           = 0
      ,idx_column_display_sequence = 9999
  FROM [##SQLXL_Index_sys_index_columns] AS sic
  JOIN [##SQLXL_Index_sys_columns]       AS col
    ON sic.database_id = col.database_id
   AND sic.object_id   = col.object_id
   AND sic.column_id   = col.column_id
 WHERE sic.type IN (N'2'             -- nonclustered rowstore index
                   ,N'6'             -- nonclustered columnstore
                   ,N'M'             -- missing nonclustered rowstore index
                   )
----------------------------------------------------------------------------------------------------------------------------
UNION ALL -- Add [UNIQUEIFIER] if table is rowstore and a HEAP or non-Unique CLUSTERED
----------------------------------------------------------------------------------------------------------------------------
SELECT six.database_id,six.object_id,six.index_id,six.type,six.sub_type
      ,column_id                   = 0                      -- zero indicates no assigned column for UNIQUEIFIER or ROW LOCATOR
      ,idx_stats_uniqueness_prefix = N'RL'                   -- indicates additional column created to lookup unique row in table
      -- columns that do not not allow NULL values -----
      ,index_column_id             = 0
      ,key_ordinal                 = 0
      ,partition_ordinal           = 0
      ,column_store_order_ordinal  = 0
      ,column_descriptors          = N'UNIQUEIFIER i4 (1.00)'
      ,is_included_column          = 0
      ,is_descending_key           = 0
      ,idx_column_display_sequence = 9999
  FROM [##SQLXL_Index_sys_indexes] AS six
  JOIN [##SQLXL_Index_sys_indexes] AS suq
    ON six.database_id = suq.database_id
   AND six.object_id   = suq.object_id
   AND suq.type        = N'1'    -- clustered rowstore
   AND 0               = suq.is_unique
   AND 0               = suq.is_primary_key
   AND 0               = suq.is_unique_constraint
 WHERE six.type           = N'2' -- nonclustered rowstore index
   AND COALESCE(six.is_graph_table,0) = 0
----------------------------------------------------------------------------------------------------------------------------
UNION ALL -- Add [ROW LOCATOR] if table is clustered columnstore
----------------------------------------------------------------------------------------------------------------------------
SELECT six.database_id,six.object_id,six.index_id,six.type,six.sub_type
      ,column_id                   = 0                      -- zero indicates no assigned column for UNIQUEIFIER or ROW LOCATOR
      ,idx_stats_uniqueness_prefix = N'RL'                   -- indicates additional column created to lookup unique row in table
      -- columns that do not not allow NULL values -----
      ,index_column_id             = 0
      ,key_ordinal                 = 0
      ,partition_ordinal           = 0
      ,column_store_order_ordinal  = 0
      ,column_descriptors          = N'ROW LOCATOR i4 (1.00)'
      ,is_included_column          = 0
      ,is_descending_key           = 0
      ,idx_column_display_sequence = 9999
  FROM [##SQLXL_Index_sys_indexes] AS six
  JOIN [##SQLXL_Index_sys_indexes] AS suq
    ON six.database_id = suq.database_id
   AND six.object_id   = suq.object_id
   AND suq.type = N'5'           -- clustered columnstore
   AND 0        = suq.is_unique
   AND 0        = suq.is_primary_key
   AND 0        = suq.is_unique_constraint
 WHERE six.type           = N'2' -- nonclustered rowstore index
   AND six.is_graph_table = 0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert [##SQLXL_Index_sys_index_columns] with clustered index key columns, UNIQUEIFIER, ROW LOCATOR'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_index_columns] Flag index columns that are filtered using [sys].[sql_expression_dependencies]
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_index_columns]
   SET is_index_column_filtered = 1
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.column_id,ed.*
--*/
  FROM [##SQLXL_Index_sys_sql_expression_dependencies] AS ed
  JOIN [##SQLXL_Index_sys_index_columns] AS tgt WITH (TABLOCKX)
    ON ed.database_id          = tgt.database_id
   AND ed.referencing_id       = tgt.object_id
   AND ed.referencing_minor_id = tgt.index_id
   AND ed.referenced_minor_id  = tgt.column_id
 WHERE ed.referencing_class    = 7             -- Index class type
   AND ed.referenced_class    IN (0            -- Object or column (non-schema-bound references only)
                                 ,1            -- Object or column (schema-bound references)
                                 )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Flag index columns that are filtered using [sys].[sql_expression_dependencies]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_indexes] with count of columns by index property & list of included columns by ID
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
--*/
UPDATE tgt -- [##SQLXL_Index_sys_indexes]
   SET key_ordinal_CNT      = src.key_ordinal_CNT
      ,key_null_CNT         = src.key_null_CNT
      ,included_columns_CNT = src.included_columns_CNT
      ,is_partitioned       = src.is_partitioned
      ,descending_key_CNT   = src.descending_key_CNT
      ,filtered_column_CNT  = src.filtered_column_CNT
      ------------------------------------------------------
      ,inc_overlap_column_list = (SELECT -- double select required for XML TYPE below
                                 (-- create list of included columns using column ID
                                  SELECT N'.' + CAST(ixc.column_id AS NVARCHAR(20))
                                    FROM dbo.##SQLXL_Index_sys_index_columns AS ixc
                                   WHERE tgt.database_id  = ixc.database_id
                                     AND tgt.object_id    = ixc.object_id
                                     AND tgt.index_id     = ixc.index_id
                                     AND tgt.type         = ixc.type
                                     AND tgt.sub_type     = ixc.sub_type
                                     ---------------------------------------------------------------
                                     AND 1                = ixc.is_included_column
                                   ORDER BY
                                         ixc.column_id
                                     FOR XML PATH(N''),TYPE                                         -- concatenate column id list
                                 ).value('.',N'NVARCHAR(MAX)')
                                 ) + N'.'
  FROM [##SQLXL_Index_sys_indexes] AS tgt WITH (TABLOCKX)
  JOIN (-- count indexes by index properties
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,ic.sub_type
              ,key_ordinal_CNT      = SUM(IIF(ic.key_ordinal              > 0,1,0))
              ,key_null_CNT         = SUM(IIF(c.is_nullable               = 1,1,0))
              ,included_columns_CNT = SUM(IIF(ic.is_included_column       = 1,1,0))
              ,is_partitioned       = CAST(MAX(IIF(ic.partition_ordinal   > 0,1,0)) AS BIT)
              ,descending_key_CNT   = SUM(IIF(ic.is_descending_key        > 0,1,0))
              ,filtered_column_CNT  = SUM(IIF(ic.is_index_column_filtered > 0,1,0))
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_columns]       AS c
            ON ic.database_id = c.database_id
           AND ic.object_id   = c.object_id
           AND ic.column_id   = c.column_id
         GROUP BY
               ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,ic.sub_type
       ) AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
   AND tgt.index_id    = src.index_id
   AND tgt.type        = src.type
   AND tgt.sub_type    = src.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_indexes] with count of columns by property'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_dm_db_missing_index_details] Weight the Missing Index Advantage with percent of table reads factor
 NOTE: In-Memory (XTP) objects don't record index usage statistics. they do records operational statistics
       in [sys].[dm_db_xtp_object_stats]. Since operations and usages can be apples & oranges the weighting factor is not applied.
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_dm_db_missing_index_details]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id.tgt.index_id,tgt.type,tgt.sub_type
      ,tgt.group_handle,tgt.mix_Advantage_AMT
      ,mix_reads = tgt.user_seeks + tgt.user_scans + tgt.system_seeks + tgt.system_scans
      ,usg_reads = usg.reads,
--*/
       mix_advantage_weighted_AMT = 1.0
                                  * tgt.mix_Advantage_AMT
                                  * (tgt.user_seeks + tgt.user_scans + tgt.system_seeks + tgt.system_scans)
                                  / IIF(usg.reads > 0
                                       ,usg.reads
                                       ,(tgt.user_seeks + tgt.user_scans + tgt.system_seeks + tgt.system_scans)) -- in memory no usage
  FROM [##SQLXL_Index_sys_dm_db_missing_index_details] AS tgt WITH (TABLOCKX)
  LEFT OUTER
  JOIN (-- total up usage reads by table. MISSING INDEXES not included in index_usage_stats
        SELECT database_id,object_id
              ,reads = SUM(user_read_CNT)
          FROM [##SQLXL_Index_sys_dm_db_index_usage_stats]
         GROUP BY
               database_id,object_id
        HAVING SUM(user_read_CNT) > 0
       ) AS usg
    ON tgt.database_id = usg.database_id
   AND tgt.object_id   = usg.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_dm_db_missing_index_details] Missing Index Advantage with percent of table reads factor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_index_columns] idx_column_display_sequence for base index types
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_index_columns]
   SET
/*** LOCAL TESTING ***
SELECT src.database_id
      ,src.object_id
      ,src.index_id
      ,src.type
      ,src.sub_type
      ,src.column_id,
--*/
       idx_column_display_sequence = src.idx_column_display_sequence
  FROM [##SQLXL_Index_sys_index_columns] AS tgt WITH (TABLOCKX)

  JOIN (-- compute column display sequence from key order, system added, included columns, and uniqueness
        SELECT database_id,object_id,index_id,type,sub_type
              ,column_id
              ,idx_column_display_sequence = ROW_NUMBER()
                                             OVER (PARTITION BY database_id,object_id,index_id,type,sub_type
                                                       ORDER BY is_included_column                -- key columns first
                                                               ,CASE WHEN key_ordinal > 0
                                                                     THEN key_ordinal
                                                                     ELSE 9999
                                                                END
                                                               ,CASE idx_stats_uniqueness_prefix
                                                                     WHEN N'CX' THEN 9998         -- clustered column keys go second to last
                                                                     WHEN N'RL' THEN 9999         -- UNIQUEIFIER or ROW LOCATOR go last
                                                                     ELSE index_column_id
                                                                END
                                                               ,idx_stats_uniqueness_prefix
                                                  )
          FROM [##SQLXL_Index_sys_index_columns]
       ) AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
   AND tgt.index_id    = src.index_id
   AND tgt.type        = src.type
   AND tgt.sub_type    = src.sub_type
   AND tgt.column_id   = src.column_id
 WHERE tgt.type NOT IN (N'M'  -- missing nonclustered rowstore index
                       ,N'T'  -- fulltext indexe
                       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_index_columns] idx_column_display_sequence'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_index_columns] Missing index column key sequence based on uniqueness computed previously
 Sort by EQUALITY before INEQUALITY, followed by increasing uniqueness
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_index_columns]
   SET
/*** LOCAL TESTING ***
SELECT src.database_id
      ,src.object_id
      ,src.index_id
      ,src.type
      ,src.sub_type
      ,src.column_id,
--*/
       idx_column_display_sequence = src.idx_column_display_sequence -- update for index type "M" using column statistics
      ,key_ordinal                 = CASE WHEN tgt.column_usage <> N'INCLUDE'
                                          THEN src.idx_column_display_sequence
                                          ELSE tgt.key_ordinal
                                     END
  FROM [##SQLXL_Index_sys_index_columns] AS tgt WITH (TABLOCKX)
  JOIN (-- get key column "order" for missing indexes tied to increasing uniqueness
        SELECT ic.database_id,ic.object_id,ic.index_id,ic.type,ic.sub_type
              ,ic.column_id
              ,idx_column_display_sequence = ROW_NUMBER()
                                             OVER (PARTITION BY ic.database_id
                                                               ,ic.object_id
                                                               ,ic.index_id
                                                               ,ic.type
                                                               ,ic.sub_type
                                                       ORDER BY CASE ic.column_usage
                                                                     WHEN N'EQUALITY'   THEN 1
                                                                     WHEN N'INEQUALITY' THEN 2
                                                                     WHEN N'INCLUDE'    THEN 3
                                                                     ELSE 4
                                                                END
                                                               ,c.Uniqueness    -- most unique-est
                                                               ,IIF(c.max_length = -1,2147483647,c.max_length)  -- shortest
                                                               ,c.Precision     -- bits before tinyints
                                                               ,c.is_nullable   -- NULLable last
                                                  )
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_columns]       AS c
            ON ic.database_id   = c.database_id
           AND ic.object_id     = c.object_id
           AND ic.column_id     = c.column_id
         WHERE ic.type          = N'M'          -- missing nonclustered rowstore index
      ) AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
   AND tgt.index_id    = src.index_id
   AND tgt.type        = src.type
   AND tgt.sub_type    = src.sub_type
   AND tgt.column_id   = src.column_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update Missing index key sequence based on column uniqueness'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_index_columns] statistic uniqueness & display properties
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_index_columns]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       column_display_suffix = IIF(tgt.partition_ordinal  > 0,N' PTN' ,N'')
                             + IIF(tgt.is_descending_key  = 1,N' DESC',N'')
                             + IIF(tgt.column_usage       = N'INEQUALITY',N' {' + NCHAR(60) + NCHAR(62) + N'}',N'')
                             + CASE WHEN tgt.idx_stats_uniqueness_prefix IS NULL
                                     AND cix.column_id > 0  -- index key columns also in clustered index
                                     AND tgt.type IN (N'2'  -- nonclustered rowstore index
                                                     ,N'6'  -- nonclustered columnstore
                                                     ,N'M'  -- missing nonclustered rowstore index
                                                     )
                                    THEN N' =CX(' + CAST(cix.idx_column_display_sequence AS NVARCHAR(20)) + N')'
                                    ELSE N''
                               END                                                                  COLLATE Latin1_General_100_CI_AI

      ,stat_uniqueness       = IIF(tgt.idx_stats_uniqueness_prefix = N'RL' -- if a uniquifier or row locator
                                  ,1.00                                    -- set the uniqueness to 1.00 (unique)
                                  ,1.0 * sssh.Rows * ssdv.all_density)     -- index statistics computed uniqueness

      ,idx_stats_uniqueness_prefix = CASE WHEN tgt.idx_stats_uniqueness_prefix = N'CX' -- key added from clustered index for table lookups
                                           AND cix.key_ordinal > 0
                                          THEN N'CX(' + COALESCE(CAST(cix.key_ordinal AS NVARCHAR(20)),N'?') + N')>'
                                          WHEN tgt.idx_stats_uniqueness_prefix = N'RL' -- uniquifier or row locator
                                          THEN N'RL>'                                  -- Row locator - UNIQUEIFIER or heap ROW LOCATOR
                                          ELSE tgt.idx_stats_uniqueness_prefix
                                     END                                                            COLLATE Latin1_General_100_CI_AI

      ,column_descriptors    = IIF(LTRIM(tgt.column_descriptors) > N''
                                  ,tgt.column_descriptors
                                  ,col.column_descriptors)
                             + IIF(tgt.is_index_column_filtered = 1,N' FLT',N'')                    COLLATE Latin1_General_100_CI_AI

      ,col_uniqueness        = CAST(IIF(-- Candidates for Clustered indexes
                                           1 = col.is_identity
                                        OR 1 = col.is_sequence
                                        OR def_con.definition = N'(newsequentialid())'
                                        OR def_con.definition = N'(newid())'
                                        OR tgt.idx_stats_uniqueness_prefix = N'RL'
                                       ,1.00
                                       ,col.uniqueness)
                                   AS FLOAT)

      ,idx_uniqueness        = COALESCE(1.0 * sssh.Rows * ssdv.all_density,tgt.col_uniqueness)

      ,idx_uniqueness_3sd    = [dbo].[SQLXL_3SD](COALESCE((1.0 * sssh.Rows * ssdv.all_density)
                                                         ,CAST(IIF(-- Candidates for Clustered indexes
                                                                      1 = col.is_identity
                                                                   OR 1 = col.is_sequence
                                                                   OR def_con.definition = N'(newsequentialid())'
                                                                   OR def_con.definition = N'(newid())'
                                                                   OR tgt.idx_stats_uniqueness_prefix = N'RL'
                                                                  ,1.00
                                                                  ,col.uniqueness)
                                                              AS FLOAT)
                                                         )
                                                ,N'N')                                              COLLATE Latin1_General_100_CI_AI

      ,all_density           = IIF(tgt.idx_stats_uniqueness_prefix = N'RL',1.0,ssdv.all_density) -- if row locator always 1.0
      ,average_length        = ssdv.average_length

  FROM [##SQLXL_Index_sys_index_columns] AS tgt WITH (TABLOCKX)

  JOIN [##SQLXL_Index_sys_objects]                      AS obj
    ON tgt.database_id = obj.database_id
   AND tgt.object_id   = obj.object_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_columns]                      AS col              -- object all columns
    ON tgt.database_id = col.database_id
   AND tgt.object_id   = col.object_id
   AND tgt.column_id   = col.column_id

  LEFT OUTER                                                 -- Column default (constraint or stand-alone) definition
  JOIN [##SQLXL_Index_sys_objects]                      AS def_con
    ON col.database_id       = def_con.database_id
   AND col.default_object_id = def_con.object_id             -- link to "D" object types

  LEFT OUTER -- look for key columns also found in the CLUSTERED ROWSTORE index
  JOIN [##SQLXL_Index_sys_index_columns] AS cix              -- clustered index if available
    ON tgt.database_id = cix.database_id
   AND tgt.object_id   = cix.object_id
   AND N'1'            = cix.type                            -- clustered rowstore index
   AND tgt.column_id   = cix.column_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_showstatistics_statheader]    AS sssh -- 1 row per index/column
    ON tgt.database_id = sssh.database_id
   AND tgt.object_id   = sssh.object_id
   AND tgt.index_id    = sssh.index_id
   AND tgt.type        = sssh.type
   AND tgt.sub_type    = sssh.sub_type

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_showstatistics_densityvector] AS ssdv
    ON tgt.database_id = ssdv.database_id
   AND tgt.object_id   = ssdv.object_id
   AND tgt.index_id    = ssdv.index_id
   AND tgt.type        = ssdv.type
   AND tgt.sub_type    = ssdv.sub_type
   AND tgt.key_ordinal = ssdv.row_ID

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_index_columns] statistic uniqueness & display properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_index_columns] synergies: key_sequence_column_list, key_overlap_column_list
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_index_columns]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,tgt.idx_column_display_sequence,tgt.key_ordinal,tgt.is_included_column,
--*/
       key_sequence_column_list = (SELECT  -- double SELECT required for XML TYPE VALUE below
                                  (-- create concatenated list of key column IDs by key order
                                   SELECT N'.' + CAST(ixc.column_id AS NVARCHAR(20))
                                     FROM dbo.##SQLXL_Index_sys_index_columns AS ixc
                                    WHERE tgt.database_id  = ixc.database_id
                                      AND tgt.object_id    = ixc.object_id
                                      AND tgt.index_id     = ixc.index_id
                                      AND tgt.type         = ixc.type
                                      AND tgt.sub_type     = ixc.sub_type
                                      AND 0                < ixc.key_ordinal -- non-key columns excluded
                                      AND tgt.key_ordinal >= ixc.key_ordinal
                                    ORDER BY
                                          ixc.key_ordinal
                                      FOR XML PATH(N''), TYPE                                    -- column_ids
                                  ).value('.',N'NVARCHAR(MAX)')
                                  ) + N'.'
      ,key_overlap_column_list  = (SELECT  -- double SELECT required for XML TYPE VALUE below
                                  (-- reate concatenated list of key column IDs by column id order
                                   SELECT N'.' + CAST(ixc.column_id AS NVARCHAR(20))
                                     FROM dbo.##SQLXL_Index_sys_index_columns AS ixc
                                    WHERE tgt.database_id  = ixc.database_id
                                      AND tgt.object_id    = ixc.object_id
                                      AND tgt.index_id     = ixc.index_id
                                      AND tgt.type         = ixc.type
                                      AND tgt.sub_type     = ixc.sub_type
                                      AND tgt.key_ordinal >= ixc.key_ordinal
                                      --------------------------------------------------------------
                                      AND 0                < ixc.key_ordinal -- exclude added clustered index columns and row locators
                                    ORDER BY
                                          ixc.column_id
                                      FOR XML PATH(N''), TYPE                                    -- column_ids
                                  ).value('.',N'NVARCHAR(MAX)')
                                  ) + N'.'
      ,inc_overlap_column_list  = (SELECT  -- double SELECT required for XML TYPE VALUE below
                                  (-- reate concatenated list of included column IDs by column id order
                                   SELECT N'.' + CAST(ixc.column_id AS NVARCHAR(20))
                                     FROM dbo.##SQLXL_Index_sys_index_columns AS ixc
                                    WHERE tgt.database_id  = ixc.database_id
                                      AND tgt.object_id    = ixc.object_id
                                      AND tgt.index_id     = ixc.index_id
                                      AND tgt.type         = ixc.type
                                      AND tgt.sub_type     = ixc.sub_type
                                      AND tgt.column_id   >= ixc.column_id
                                      --------------------------------------------------------------
                                      AND (   0            < ixc.key_ordinal -- exclude added clustered index columns and row locators
                                           OR 1            = ixc.is_included_column
                                          )
                                    ORDER BY
                                          ixc.column_id
                                      FOR XML PATH(N''), TYPE                                    -- column_ids
                                  ).value('.',N'NVARCHAR(MAX)')
                                  ) + N'.'
  FROM [##SQLXL_Index_sys_index_columns] AS tgt WITH (TABLOCKX)
  LEFT OUTER
  JOIN (-- find largest index column display to create column list for larger containing index with includes
        SELECT database_id,object_id,index_id,type,sub_type
              ,idx_column_display_sequence = MAX(idx_column_display_sequence)
          FROM [##SQLXL_Index_sys_index_columns]
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) AS idx_max
    ON tgt.database_id = idx_max.database_id
   AND tgt.object_id   = idx_max.object_id
   AND tgt.index_id    = idx_max.index_id
   AND tgt.type        = idx_max.type
   AND tgt.sub_type    = idx_max.sub_type

 WHERE 1 = 1    -- simplifies adding additional clauses for testing
   AND tgt.type NOT IN (N'0' -- rowstore heap
                       ,N'5' -- nonclustered columnstore
                       ,N'6' -- clustered columnstore
                       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update index key synergy columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_columns] usage by type, After update to [##SQLXL_Index_sys_index_columns] and [##SQLXL_Index_sys_columns]
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_index_columns]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.column_id,tgt.name,
--*/
       indexed_columns           = src.idx_usage
      ,indexed_column_usage_sort = COALESCE(src.idx_usage_sort,1000 + tgt.column_id) -- indexed columns ordered below, non-indexed after
  FROM [##SQLXL_Index_sys_columns] AS tgt WITH (TABLOCKX)
  JOIN (-- display column usage representation - how often each column appears in indexes, foreign keys, missing indexes
        SELECT src.database_id
              ,src.object_id
              ,src.column_id
              ,idx_usage = LTRIM( IIF(CCS_CNT       > 0,N' CCS '                                        ,N'')
                                --------------------------------------------------------------------------
                                + IIF(prtn_lead_CNT > 0,N' PTN '                                        ,N'')
                                + IIF(prtn_key_CNT  > 0,N' PTN '    + CAST(prtn_key_CNT AS NVARCHAR(20)),N'') -- should not happen
                                --------------------------------------------------------------------------
                                + IIF(CX_Lead_CNT   > 0,N' CXLead ' + CAST(CX_Lead_CNT  AS NVARCHAR(20)),N'')
                                + IIF(CX_key_CNT    > 0,N' CXKey '  + CAST(CX_key_CNT   AS NVARCHAR(20)),N'')
                                --------------------------------------------------------------------------
                                + IIF(lead_CNT      > 0,N' Lead '   + CAST(lead_CNT     AS NVARCHAR(20)),N'')
                                + IIF(key_CNT       > 0,N' Key '    + CAST(key_CNT      AS NVARCHAR(20)),N'')
                                + IIF(include_CNT   > 0,N' Inc '    + CAST(include_CNT  AS NVARCHAR(20)),N'')
                                --------------------------------------------------------------------------
                                + IIF(MIX_key_CNT   > 0,N' MXKey '  + CAST(MIX_key_CNT  AS NVARCHAR(20)),N'')
                                + IIF(MIX_inc_CNT   > 0,N' MXInc '  + CAST(MIX_inc_CNT  AS NVARCHAR(20)),N'')
                                --------------------------------------------------------------------------
                                + IIF(FKC_lead_CNT  > 0,N' FKLead ' + CAST(FKC_lead_CNT AS NVARCHAR(20)),N'')
                                + IIF(FKC_key_CNT   > 0,N' FKKey '  + CAST(FKC_key_CNT  AS NVARCHAR(20)),N'')
                                --------------------------------------------------------------------------
                                + IIF(XML_CNT       > 0,N' XML '    + CAST(XML_CNT      AS NVARCHAR(20)),N'')
                                --------------------------------------------------------------------------
                                + IIF(JSON_CNT      > 0,N' JSN '    + CAST(JSON_CNT     AS NVARCHAR(20)),N'')
                                --------------------------------------------------------------------------
                                + IIF(fulltext_CNT  > 0,N' FTX '    + CAST(fulltext_CNT AS NVARCHAR(20)),N'')
                                --------------------------------------------------------------------------
                                + IIF(Spatial_CNT   > 0,N' SPT '    + CAST(Spatial_CNT  AS NVARCHAR(20)),N'')
                                --------------------------------------------------------------------------
                                + IIF(NCS_CNT       > 0,N' NCS '    + CAST(NCS_CNT      AS NVARCHAR(20)),N'')
                                --------------------------------------------------------------------------
                                + IIF(Hash_CNT      > 0,N' CCH '    + CAST(Hash_CNT     AS NVARCHAR(20)),N'')
                                --------------------------------------------------------------------------
                                + IIF(desc_CNT      > 0,N' Dsc '    + CAST(desc_CNT     AS NVARCHAR(20)),N'')
                                + IIF(filter_CNT    > 0,N' Flt '    + CAST(filter_CNT   AS NVARCHAR(20)),N'')
                                )
              ,idx_usage_sort = ROW_NUMBER() OVER (PARTITION BY src.database_id
                                                               ,src.object_id
                                                       ORDER BY CASE WHEN prtn_lead_CNT > 0 THEN  2
                                                                     WHEN prtn_key_CNT  > 0 THEN  4
                                                                     WHEN CX_Lead_CNT   > 0 THEN 11
                                                                     WHEN CX_key_CNT    > 0 THEN 12
                                                                     WHEN lead_CNT      > 0 THEN 13
                                                                     WHEN key_CNT       > 0 THEN 14
                                                                     WHEN include_CNT   > 0 THEN 18
                                                                     WHEN FKC_lead_CNT  > 0 THEN 25
                                                                     WHEN FKC_key_CNT   > 0 THEN 26
                                                                     WHEN MIX_key_CNT   > 0 THEN 27
                                                                     WHEN MIX_inc_CNT   > 0 THEN 29
                                                                     WHEN XML_CNT       > 0 THEN 32
                                                                     WHEN JSON_CNT      > 0 THEN 33
                                                                     WHEN Spatial_CNT   > 0 THEN 40
                                                                     WHEN fulltext_CNT  > 0 THEN 36
                                                                     WHEN Hash_CNT      > 0 THEN 41
                                                                     WHEN CCS_CNT       > 0 THEN 52
                                                                     WHEN NCS_CNT       > 0 THEN 62
                                                                     ELSE                        99
                                                                END
                                                               ,prtn_lead_CNT DESC
                                                               ,CX_Lead_CNT   DESC
                                                               ,CX_key_CNT    DESC
                                                               ,lead_CNT      DESC
                                                               ,key_CNT       DESC
                                                               ,FKC_lead_CNT  DESC
                                                               ,FKC_key_CNT   DESC
                                                               ,MIX_key_CNT   DESC
                                                               ,XML_CNT       DESC
                                                               ,fulltext_CNT  DESC
                                                               ,Spatial_CNT   DESC
                                                               ,Hash_CNT      DESC
                                                               ,NCS_CNT       DESC
                                                  )
          FROM (-- count each columns representation across index types
                SELECT database_id,object_id
                      ,column_id
                      ,cnt           = COUNT_BIG(1)
                      -- Partitioning key(s) -----------------------------------------------
                      ,prtn_lead_CNT = SUM(IIF(type = N'1' AND partition_ordinal   = 1,1,0))        -- clustered rowstore index
                      ,prtn_key_CNT  = SUM(IIF(type = N'1' AND partition_ordinal   > 1,1,0))        -- should not happen
                      -- clustered rowstore indexes ----------------------------------------
                      ,CX_Lead_CNT   = SUM(IIF(type = N'1' AND key_ordinal = 1,1,0))                -- clustered rowstore index
                      ,CX_key_CNT    = SUM(IIF(type = N'1' AND key_ordinal > 1,1,0))                -- clustered rowstore index
                      -- nonclustered rowstore index ---------------------------------------
                      ,lead_CNT      = SUM(IIF(type = N'2' AND is_included_column  = 0              -- nonclustered rowstore index
                                                           AND key_ordinal = 1,1,0))
                      ,key_CNT       = SUM(IIF(type = N'2' AND is_included_column  = 0              -- nonclustered rowstore index
                                                           AND key_ordinal > 1,1,0))
                      ,include_CNT   = SUM(IIF(type = N'2' AND is_included_column  = 1,1,0))        -- nonclustered rowstore index
                      -- XML ---------------------------------------------------------------
                      ,XML_CNT       = SUM(IIF(type = N'3'                            ,1,0))        -- XML index
                      -- Spatial ----------------------------------------------------------
                      ,Spatial_CNT   = SUM(IIF(type = N'4'                            ,1,0))        -- spatial index
                      -- Clustered Columnstore ---------------------------------------------
                      ,CCS_CNT       = SUM(IIF(type = N'5'                            ,1,0))        -- clustered columnstore
                      -- nonclustered columnstore index ------------------------------------
                      ,NCS_CNT       = SUM(IIF(type = N'6'                            ,1,0))        -- nonclustered columnstore
                      -- Nonclustered Hash -------------------------------------------------
                      ,Hash_CNT      = SUM(IIF(type = N'7'                            ,1,0))        -- nonclustered hash index on XTP
                      -- Nonclustered Hash -------------------------------------------------
                      ,JSON_CNT      = SUM(IIF(type = N'9'                            ,1,0))        -- JSON index
                      -- Foreign Keys ------------------------------------------------------
                      ,FKC_lead_CNT  = SUM(IIF(type = N'F' AND key_ordinal = 1        ,1,0))        -- foreign key constraint
                      ,FKC_key_CNT   = SUM(IIF(type = N'F' AND key_ordinal > 1        ,1,0))        -- foreign key constraint
                      -- missing nonclustered rowstore index -------------------------------
                      ,MIX_key_CNT   = SUM(IIF(    type = N'M'                                      -- missing nonclustered rowstore index
                                               AND is_included_column  = 0            ,1,0))
                      ,MIX_inc_CNT   = SUM(IIF(    type = N'M'                                      -- missing nonclustered rowstore index
                                               AND is_included_column  = 1            ,1,0))
                      -- Full Text ---------------------------------------------------------
                      ,fulltext_CNT  = SUM(IIF(type = N'T'                            ,1,0))        -- full text index
                      -- Index properties --------------------------------------------------
                      ,desc_CNT      = SUM(IIF(is_descending_key        = 1           ,1,0))
                      ,filter_CNT    = SUM(IIF(is_index_column_filtered = 1           ,1,0))
                  FROM [##SQLXL_Index_sys_index_columns]    -- includes missing, foreign key, fulltext columns
                 WHERE 0 < index_column_id                  -- filter out columns added for CLUSTERED LOOKUPS
                    OR (    type         = N'M'             -- missing rowstore index
                        AND column_usage > N''              -- more than NULL or empty string
                       )
                 GROUP BY
                       database_id,object_id
                      ,column_id
               ) AS src
       ) AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
   AND tgt.column_id   = src.column_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_sys_columns] column usage across indexes, foreign key constraints, missing indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();

   SET @sql = N'SELECT N''Completed merging & updating source tables'''
            + N' AS [Elapsed Time '
            + [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@collection_DTTM,GETDATE()),0))
            + N' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]'
      EXECUTE (@sql);
END;

/******************************************************************************************************************************************\
 *Task* Index  [##SQLXL_Index_sys_index_columns] - Clustered
\******************************************************************************************************************************************/
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_index_columns -- used in APPLY & subqueries
    ON [##SQLXL_Index_sys_index_columns]
      (database_id,object_id,index_id,type,sub_type
      ,column_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N'    ... ' + @db_name_quoted + N' Index [ixuc_SQLXL_Index_sys_index_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END -- IF @ssms_ads > 0 BEGIN

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_sys_objects] foreign key constraint reference
 NOTE: in table [##SQLXL_Index_sys_index_columns] the foreign key object ID is used as the index ID
       the foreign key parent object ID is the object ID
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_sys_objects]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.parent_object_id,tgt.object_id,tgt.name,ref_obj.object_id,
--*/
       fkc_referenced_object_desc = N'-- Foreign Key Reference ---'
                     + CHAR(096)
                     + REPLACE(
                       CAST(
                       LEFT((-- get Foreign Key Constraint referenced schema + table + column(s)
                             SELECT  N'SCH '
                                   + QUOTENAME(ref_obj.schema_name)
                                   + CHAR(096)
                                   + N'TBL  '
                                   + QUOTENAME(ref_obj.name)
                                   + CHAR(096)
                                   + N'COL '
                                   + STUFF((-- loop through columns in foreign key since can have more than one
                                            SELECT  CHAR(096)
                                                  + N'        ,'         -- extra space added if multi-column display in spreadsheet
                                                  + QUOTENAME(eix.name)
                                              FROM [##SQLXL_Index_sys_index_columns] AS fkc
                                              LEFT OUTER
                                              JOIN [##SQLXL_Index_sys_index_columns] AS ref_idx
                                                ON ref_obj.database_id             = ref_idx.database_id
                                               AND ref_obj.object_id               = ref_idx.object_id
                                               AND tgt.key_index_id                = ref_idx.index_id
                                               AND ref_idx.type                   IN (N'1',N'2')
                                               AND 0                               = ref_idx.sub_type
                                               AND fkc.idx_column_display_sequence = ref_idx.idx_column_display_sequence
                                              LEFT OUTER
                                              JOIN [##SQLXL_Index_sys_columns]       AS eix
                                                ON ref_idx.database_id             = eix.database_id
                                               AND ref_idx.object_id               = eix.object_id
                                               AND ref_idx.column_id               = eix.column_id
                                             WHERE tgt.database_id                 = fkc.database_id
                                               AND tgt.parent_object_id            = fkc.object_id
                                               AND tgt.object_id                   = fkc.index_id
                                               AND N'F'                            = fkc.type
                                             ORDER BY
                                                   fkc.idx_column_display_sequence
                                               FOR XML PATH(N''),TYPE                               -- foreign key references
                                           ).value('.',N'NVARCHAR(MAX)')
                                          ,1,10,N'')
                            ),4000) AS NVARCHAR(4000))

                       ,N'^',N' ')                        -- Referenced schema + table + column(s)
                     + CHAR(096)
                     + N'OID DB ' + QUOTENAME(tgt.database_id)          -- Referenced Database ID
                     + N' TBL '   + QUOTENAME(tgt.referenced_object_id) -- Referenced Table ID
                     + N' IDX '   + QUOTENAME(tgt.key_index_id)         -- Referenced Index ID
  FROM [##SQLXL_Index_sys_objects] AS tgt WITH (TABLOCKX)
  JOIN [##SQLXL_Index_sys_objects] AS ref_obj
    ON tgt.database_id          = ref_obj.database_id
   AND tgt.referenced_object_id = ref_obj.object_id
 WHERE tgt.type = N'F'                                                               -- foreign key constraint

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update historical source for a temporal/ledger table with type = 2, SQL2016+'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/*#########################################################################################################################################\
############################################################################################################################################
 *Task* Create Table [##SQLXL_Index_compilation] -------------------------------------------------------------------------------------------
############################################################################################################################################
\#########################################################################################################################################*/

/*** LOCAL TESTING ***
DECLARE @sql            NVARCHAR(MAX)
       ,@ssms_ads       TINYINT       = 2
       ,@i              INT           = 1
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_compilation];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Index_compilation]
(-------------------------------------------------------------------------------------------------------------------------------------------
-- Aggregate records - [rec_type] column reflects the hierarchy level in the collected data
-- 'A' top level aggregate record of all requested databases or instance level
-- 'D' Database
-- 'P' Parent aggregate of User Table/View/SQL Table Valued Function. includes values from History/archive tables & -- system/internal level aggregate record
-- 'H' History/archive table connected to a parent user table
-- 'S' System/Internal Table conected to a parent user table
-- 'I' "Index" - all index types, fulltext, missing indexes, foreign key constraints

-- object_id is same as parent_object_id except for:
--           Foreign Key Constraints
--           History tables - Change Data Capture, System Versioned, Ledger tables
--           -- system/internal level aggregate record
-- Index Sub_Type sourced from [sys].[xml_indexes].[xml_index_type], [sys].[spatial_indexes].[spatial_index_type]
--------------------------------------------------------------------------------------------------------------------------------------------
 rec_type                                   NCHAR(1)       COLLATE Latin1_General_100_CI_AI NOT NULL
,database_id                                SMALLINT                                        NOT NULL -- KEY from [sys].[databases]
,object_id                                  INT                                             NOT NULL -- KEY from [sys].[objects]
,index_id                                   INT                                             NOT NULL -- KEY from [sys].[indexes] etc.
,type                                       NVARCHAR(2)    COLLATE Latin1_General_100_CI_AI NOT NULL
,sub_type                                   INT                                             NOT NULL  DEFAULT(0)
--------------------------------------------------------------------------------------------------------------------------------------------
-- Element names & Descriptions
--------------------------------------------------------------------------------------------------------------------------------------------
,collation_name                             NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL -- TABLE [##SQLXL_Index_compilation]

--------------------------------------------------------------------------------------------------------------------------------------------
-- COMPUTED prescribed Actions to take by Index & Table
--------------------------------------------------------------------------------------------------------------------------------------------
,prescription                               NVARCHAR(1000) COLLATE Latin1_General_100_CI_AI     NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Object Computed values - labels to flag compilation records
--------------------------------------------------------------------------------------------------------------------------------------------
,obj_type_pfx                               NVARCHAR(3)    COLLATE Latin1_General_100_CI_AI     NULL
,obj_type_hdr                               NVARCHAR(3)    COLLATE Latin1_General_100_CI_AI     NULL
,obj_type_dtl                               NVARCHAR(15)   COLLATE Latin1_General_100_CI_AI NOT NULL DEFAULT(N'')
,idx_type_hdr                               NVARCHAR(3)    COLLATE Latin1_General_100_CI_AI     NULL
,idx_type_dtl                               NVARCHAR(3)    COLLATE Latin1_General_100_CI_AI NOT NULL DEFAULT(N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- additional "object" level info - [sys].[tables], [sys].[views], [sys].[triggers]
--------------------------------------------------------------------------------------------------------------------------------------------
,tbl_row_size_byte_AVG                      FLOAT                                               NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Table computed properties
--------------------------------------------------------------------------------------------------------------------------------------------
,tbl_is_empty                               BIT                                             NOT NULL DEFAULT(0)
,tbl_priority_metric                        FLOAT                                               NULL
,tbl_cx_uniq_ordered_column_TYP             NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL
,tbl_cx_uniq_ordered_column_id              INT                                                 NULL
,tbl_possible_uniq_column_id                INT                                                 NULL
,tbl_smallest_uniq_Nonclustered_idx         INT                                                 NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[indexes] - NOTE: other elements below in Shared Elements
--------------------------------------------------------------------------------------------------------------------------------------------
,type_desc                                  NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL
,sub_type_desc                              NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL
   -- Sources: [sys].[xml_indexes xml_index_type_description],[sys].[spatial_indexes spatial_index_type_desc]
,is_unique                                  BIT                                             NOT NULL DEFAULT(0) -- 1 = unique
,ignore_dup_key                             BIT                                             NOT NULL DEFAULT(0) -- 1 = ON
,suppress_dup_key_messages                  BIT                                             NOT NULL DEFAULT(0) -- 1 = ON
,is_primary_key                             BIT                                             NOT NULL DEFAULT(0) -- 1 = PRIMARY KEY
,is_unique_constraint                       BIT                                             NOT NULL DEFAULT(0) -- 1 = UNIQUE constraint
,fill_factor                                TINYINT                                             NULL            -- for creation / rebuilding
,is_padded                                  BIT                                             NOT NULL DEFAULT(0) -- 1 = ON
,is_hypothetical                            BIT                                             NOT NULL DEFAULT(0) -- 1 = is hypothetical
,is_ignored_in_optimization                 BIT                                             NOT NULL DEFAULT(0) -- NOTE: not found in BOL
,allow_row_locks                            BIT                                                 NULL            -- 1 = allows row locks
,allow_page_locks                           BIT                                                 NULL            -- 1 = allows page locks
,has_filter                                 BIT                                             NOT NULL DEFAULT(0) -- 1 = has a filter
,compression_delay_mm                       INT                                                 NULL            -- NOTE: not found in BOL
,auto_created                               BIT                                             NOT NULL DEFAULT(0) -- 1 = create by auto tuning
,optimize_for_sequential_key                BIT                                             NOT NULL DEFAULT(0) -- 1 = optimize enabled

--------------------------------------------------------------------------------------------------------------------------------------------
-- Shared elements between index & parent
-- Sources: [sys].[internal_tables], [sys].[triggers]
--------------------------------------------------------------------------------------------------------------------------------------------
,name                                       NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL
,is_disabled                                BIT                                             NOT NULL DEFAULT(0)
   -- Sources: [sys].[indexes],[sys].[foreign_keys],[sys].[fulltext_indexes] is_enabled (note value IS flipped here)
,is_not_trusted                             BIT                                             NOT NULL DEFAULT(0)
   -- Sources: [sys].[edge_constraints], [sys].[foreign_keys], [sys].[check_constraints]
,filter_definition                          NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI     NULL
                                            -- Sources: [sys].[indexes], [sys].[xml_indexes].[filter_definition]
,data_space_id                              INT                                                 NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[xml_indexes]
--------------------------------------------------------------------------------------------------------------------------------------------
,xml_index_type                             TINYINT                                             NULL
,xml_index_type_description                 NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL
,xml_using_xml_index_id                     INT                                                 NULL
,xml_secondary_type                         CHAR(1)        COLLATE Latin1_General_100_CI_AI     NULL
,xml_secondary_type_desc                    NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL
,xml_path_ID                                INT                                                 NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[spatial_indexes]. Other tessealtion columns can be found in [##SQLXL_Index_sys_spatial_indexes]
--------------------------------------------------------------------------------------------------------------------------------------------
,si_tessellation_scheme                     NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[hash_indexes]
--------------------------------------------------------------------------------------------------------------------------------------------
,hi_bucket_CNT                              BIGINT                                          NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[fulltext_indexes] see table [##SQLXL_Index_sys_fulltext_indexes] for properties
--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
-- derived values for Foreign Key Constraints - index(es) covering Foreign Key Constraint, non-filtered, in order of enabled, shortest
-- Remaining  [sys].[foreign_keys] columns are in {##SQLXL_Index_sys_objects]
--------------------------------------------------------------------------------------------------------------------------------------------
,fkc_best_covering_idx_name                 NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL
,fkc_best_covering_idx_ID                   INT                                                 NULL
,fkc_best_covering_idx_type                 NVARCHAR(2)    COLLATE Latin1_General_100_CI_AI     NULL
,fkc_covered_by_idx_IDS                     NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI     NULL -- list of all covering indexes
--------------------------------------------
,fkc_candidate_covering_MIX_CNT             BIGINT                                          NOT NULL DEFAULT(0)
,fkc_candidate_covering_MIX_ID              INT                                                 NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Missing index details. See index_Usage_Stats (IUS_*) for remainder of Missing Index columns
--------------------------------------------------------------------------------------------------------------------------------------------
,mix_avg_total_user_cost_AMT                FLOAT                                               NULL
,mix_avg_total_system_cost_AMT              FLOAT                                               NULL
,mix_avg_user_impact_AMT                    FLOAT                                               NULL
,mix_avg_system_impact_AMT                  FLOAT                                               NULL
,mix_unique_compiles_CNT                    BIGINT                                              NULL
,mix_Advantage_AMT                          FLOAT                                               NULL
,mix_advantage_weighted_AMT                 FLOAT                                               NULL
    -- computed  (((i.user_seeks  + i.user_scans) * i.avg_total_user_cost * i.avg_user_impact  )
    --         + ((i.system_seeks + i.system_scans) * i.avg_total_system_cost * i.avg_system_impact))

--------------------------------------------------------------------------------------------------------------------------------------------
-- missing_index_group_stats_query system view
-- NOTE: since this should total to the existing MISSING index values omitting for this version of SQLXL_Index
--------------------------------------------------------------------------------------------------------------------------------------------
--,mqy_user_seeks_CNT                       BIGINT                                          NOT NULL DEFAULT(0)
--,mqy_user_scans_CNT                       BIGINT                                          NOT NULL DEFAULT(0)
--,mqy_last_user_seek_DTTM                  DATETIME                                            NULL
--,mqy_last_user_scan_DTTM                  DATETIME                                            NULL
--,mqy_system_seeks_CNT                     BIGINT                                          NOT NULL DEFAULT(0)
--,mqy_system_scans_CNT                     BIGINT                                          NOT NULL DEFAULT(0)
--,mqy_last_system_seek_DTTM                DATETIME                                            NULL
--,mqy_last_system_scan_DTTM                DATETIME                                            NULL
--,mqy_Advantage_AMT                        FLOAT                                           NOT NULL DEFAULT(0)
--,mqy_query_hash                           BINARY(8)                                       NOT NULL DEFAULT(0)
--,mqy_query_plan_hash                      BINARY(8)                                       NOT NULL DEFAULT(0)
--,mqy_last_sql_handle                      VARBINARY(64)                                   NOT NULL DEFAULT(0)
--,mqy_last_statement_start_offset          BIGINT                                          NOT NULL DEFAULT(0)
--,mqy_last_statement_end_offset            BIGINT                                          NOT NULL DEFAULT(0)
--,mqy_last_statement_sql_handle            VARBINARY(64)                                   NOT NULL DEFAULT(0)
--,mqy_query_text                           NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI     NULL
--,mqy_query_plan                           XML                                                 NULL   --<FUTURE>add as sheet query

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[stats]
--------------------------------------------------------------------------------------------------------------------------------------------
,stats_id                                   INT                                                 NULL
,stats_name                                 NVARCHAR(132)  COLLATE Latin1_General_100_CI_AI     NULL
                                            -- FUTURE - accomodate multiple statistic names for index key & included columns too
,stats_auto_created                         BIT                                                 NULL
,stats_user_created                         BIT                                                 NULL
,stats_no_recompute                         BIT                                                 NULL
,stats_has_filter                           BIT                                                 NULL
,stats_filter_definition                    NVARCHAR(4000)  COLLATE Latin1_General_100_CI_AI    NULL
,stats_is_temporary                         BIT                                                 NULL
,stats_is_incremental                       BIT                                                 NULL
,stats_has_persisted_sample                 BIT                                                 NULL
,stats_generation_method                    BIGINT                                              NULL
,stats_generation_method_desc               NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- ShowStatistics.StatHeader
--------------------------------------------------------------------------------------------------------------------------------------------
,stathdr_updated                            DATETIME                                            NULL
,stathdr_row_CNT                            BIGINT                                          NOT NULL DEFAULT(0)
,stathdr_rows_sampled_CNT                   BIGINT                                          NOT NULL DEFAULT(0)
,stathdr_steps                              BIGINT                                          NOT NULL DEFAULT(0)
,stathdr_density                            FLOAT                                           NOT NULL DEFAULT(0)
,stathdr_average_key_length                 FLOAT                                           NOT NULL DEFAULT(0)
,stathdr_string_index                       NVARCHAR(3)    COLLATE Latin1_General_100_CI_AI     NULL
,stathdr_filter_expression                  NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI     NULL
,stathdr_unfiltered_rows                    BIGINT                                          NOT NULL DEFAULT(0)
,stathdr_Persisted_Sample_Percent           TINYINT                                         NOT NULL DEFAULT(0)
,stathdr_statistics_age_days                INT                                                 NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- ShowStatistics.StatHistogram
--------------------------------------------------------------------------------------------------------------------------------------------
,stathist_range_rows_LO                     FLOAT                                           NOT NULL DEFAULT(0)
,stathist_range_rows_HI                     FLOAT                                           NOT NULL DEFAULT(0)
,stathist_null_rows                         BIGINT                                          NOT NULL DEFAULT(0)
,stathist_param_sniff                       FLOAT                                           NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[dm_db_stats_properties] -- Note: [sys].[dm_db_stats_properties] only used for modification_counter
--------------------------------------------------------------------------------------------------------------------------------------------
,stats_prop_modification_CNT                BIGINT                                          NOT NULL DEFAULT(0)
,stats_prop_last_updated                    DATETIME                                            NULL
,stats_prop_updated_days_ago                BIGINT                                              NULL

----------------------------------------------------------------------------------------------------------
-- Aggregate Operational Metrics Values
-- [sys].[dm_db_index_operational_stats] + [sys].[dm_db_xtp_index_stats] + [sys].[dm_db_xtp_nonclustered_index_stats]
----------------------------------------------------------------------------------------------------------
,ops_total_contacts_CNT                     BIGINT                                          NOT NULL DEFAULT(0)
   -- includes in memory (XTP) - scans_started,row_insert_attempts,row_update_attempts,row_delete_attempts,delta_pages,page_update_count
   -- includes columnstore - scan_CNT, delete_buffer_scan_CNT,row_group_lock_CNT
,ops_total_read_CNT                         BIGINT                                          NOT NULL DEFAULT(0)
   -- Includes in memory (XTP) - scans_started
   -- Includes columnstore - scan_CNT, delete_buffer_scan_CNT
,ops_total_write_CNT                        BIGINT                                          NOT NULL DEFAULT(0)
   -- Include in memory (XTP) - row_insert_attempts, row_update_attempts, row_delete_attempts, delta_pages, page_update_count
   -- included columnstore row_group_lock_CNT
,ops_total_insert_CNT                       BIGINT                                          NOT NULL DEFAULT(0)
   -- Includes in memory (XTP) row_insert_attempts
,ops_total_update_CNT                       BIGINT                                          NOT NULL DEFAULT(0)
   -- Includes in memory (XTP) -row_update_attempts,p age_update_count
,ops_total_delete_CNT                       BIGINT                                          NOT NULL DEFAULT(0)
   -- Includes in memory (XTP) row_delete_attempts
,ops_total_scan_CNT                         BIGINT                                          NOT NULL DEFAULT(0)
   -- Includes in memory (XTP) -scans_started, columnstore scan_CNT
,ops_total_scan_retries_CNT                 BIGINT                                          NOT NULL DEFAULT(0)
   -- Includes in memory (XTP) -scans_started, columnstore scan_CNT
,ops_total_page_split_CNT                   BIGINT                                          NOT NULL DEFAULT(0)
   -- Includes in memory (XTP) - page_split_count, key_split_count
,ops_total_page_merge_CNT                   BIGINT                                          NOT NULL DEFAULT(0)
   -- Includes in memory (XTP) - page_merge_count, key_merge_count & page_consolidation_count
,ops_total_wait_CNT                         BIGINT                                          NOT NULL DEFAULT(0)
,ops_total_wait_MS_CNT                      BIGINT                                          NOT NULL DEFAULT(0)
,ops_total_wait_MS_AVG                      FLOAT                                               NULL
,ops_no_read_total_write_CNT                BIGINT                                          NOT NULL DEFAULT(0)
,ops_total_lock_CNT                         BIGINT                                          NOT NULL DEFAULT(0)
   -- includes columnstore row_group_lock_CNT
,ops_total_lock_wait_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
   -- includes [dm_db_column_store_row_group_operational_stats].row_group_lock_wait_CNT
,ops_total_lock_wait_MS_CNT                 BIGINT                                          NOT NULL DEFAULT(0)
   -- includes [dm_db_column_store_row_group_operational_stats].row_group_lock_wait_MS_CNT
,ops_total_lock_wait_MS_AVG                 FLOAT                                               NULL
   -- includes [dm_db_column_store_row_group_operational_stats].row_group_lock_wait_CNT
   --         ,dm_db_column_store_row_group_operational_stats.row_group_lock_wait_MS_CNT

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[dm_db_index_operational_stats] + [sys].[dm_db_xtp_index_stats] + [sys].[dm_db_xtp_nonclustered_index_stats]
--------------------------------------------------------------------------------------------------------------------------------------------
,ios_total_Column_value_off_row_CNT         BIGINT                                          NOT NULL DEFAULT(0)
-------------------------------------
,ios_partition_CNT                          BIGINT                                          NOT NULL DEFAULT(0)
-------------------------------------
,ios_leaf_insert_CNT                        BIGINT                                          NOT NULL DEFAULT(0)
,ios_leaf_update_CNT                        BIGINT                                          NOT NULL DEFAULT(0)
,ios_leaf_delete_CNT                        BIGINT                                          NOT NULL DEFAULT(0)
,ios_leaf_ghost_CNT                         BIGINT                                          NOT NULL DEFAULT(0)
,ios_total_leaf_Contacts_CNT                BIGINT                                          NOT NULL DEFAULT(0)
-------------------------------------
,ios_nonleaf_insert_CNT                     BIGINT                                          NOT NULL DEFAULT(0)
,ios_nonleaf_delete_CNT                     BIGINT                                          NOT NULL DEFAULT(0)
,ios_nonleaf_update_CNT                     BIGINT                                          NOT NULL DEFAULT(0)
,ios_total_nonleaf_Contacts_CNT             BIGINT                                          NOT NULL DEFAULT(0)
-------------------------------------
,ios_leaf_allocation_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
,ios_nonleaf_allocation_CNT                 BIGINT                                          NOT NULL DEFAULT(0)
-------------------------------------
,ios_leaf_page_merge_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
,ios_nonleaf_page_merge_CNT                 BIGINT                                          NOT NULL DEFAULT(0)
-------------------------------------
,ios_range_scan_CNT                         BIGINT                                          NOT NULL DEFAULT(0)
,ios_singleton_lookup_CNT                   BIGINT                                          NOT NULL DEFAULT(0)
,ios_forwarded_fetch_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
-------------------------------------
,ios_lob_fetch_pages_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
 -- Cumulative count of large object (LOB) pages retrieved from the LOB_DATA allocation unit
,ios_lob_fetch_bytes_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
 -- Cumulative count of LOB data bytes retrieved
,ios_lob_orphan_create_CNT                  BIGINT                                          NOT NULL DEFAULT(0)
 -- Cumulative count of orphan LOB values created for bulk operations
,ios_lob_orphan_insert_CNT                  BIGINT                                          NOT NULL DEFAULT(0)
 -- Cumulative count of orphan LOB values inserted during bulk operations.
,ios_row_overflow_fetch_in_pages_CNT        BIGINT                                          NOT NULL DEFAULT(0)
,ios_row_overflow_fetch_in_bytes_CNT        BIGINT                                          NOT NULL DEFAULT(0)
,ios_column_value_push_off_row_CNT          BIGINT                                          NOT NULL DEFAULT(0)
,ios_column_value_pull_in_row_CNT           BIGINT                                          NOT NULL DEFAULT(0)
-------------------------------------
,ios_row_lock_CNT                           BIGINT                                          NOT NULL DEFAULT(0)
,ios_row_lock_wait_CNT                      BIGINT                                          NOT NULL DEFAULT(0)
,ios_row_lock_wait_MS_CNT                   BIGINT                                          NOT NULL DEFAULT(0)
,ios_row_lock_wait_MS_AVG                   FLOAT                                               NULL
-------------------------------------
,ios_page_lock_CNT                          BIGINT                                          NOT NULL DEFAULT(0)
,ios_page_lock_wait_CNT                     BIGINT                                          NOT NULL DEFAULT(0)
,ios_page_lock_wait_MS_CNT                  BIGINT                                          NOT NULL DEFAULT(0)
,ios_page_lock_wait_MS_AVG                  FLOAT                                               NULL
-------------------------------------
,ios_lock_promotion_attempt_CNT             BIGINT                                          NOT NULL DEFAULT(0)
,ios_lock_promotion_CNT                     BIGINT                                          NOT NULL DEFAULT(0)
,ios_lock_promotion_fail_CNT                BIGINT                                          NOT NULL DEFAULT(0)
-------------------------------------
,ios_page_latch_wait_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
,ios_page_latch_wait_MS_CNT                 BIGINT                                          NOT NULL DEFAULT(0)
,ios_page_latch_wait_MS_AVG                 FLOAT                                               NULL
-------------------------------------
,ios_page_io_latch_wait_CNT                 BIGINT                                          NOT NULL DEFAULT(0)
,ios_page_io_latch_wait_MS_CNT              BIGINT                                          NOT NULL DEFAULT(0)
,ios_page_io_latch_wait_MS_AVG              FLOAT                                               NULL
-------------------------------------
,ios_tree_page_latch_wait_CNT               BIGINT                                          NOT NULL DEFAULT(0)
 -- Subset of ios_page_latch_wait_CNT
,ios_tree_page_latch_wait_MS_CNT            BIGINT                                          NOT NULL DEFAULT(0)
 -- Subset of ios_page_latch_wait_MS_CNT
,ios_tree_page_latch_wait_MS_AVG            FLOAT                                               NULL
 -- Subset of ios_page_latch_wait_MS_AVG
-------------------------------------
,ios_tree_page_io_latch_wait_CNT            BIGINT                                          NOT NULL DEFAULT(0)
 -- Subset of ios_page_io_latch_wait_CNT
,ios_tree_page_io_latch_wait_MS_CNT         BIGINT                                          NOT NULL DEFAULT(0)
 -- Subset of ios_page_io_latch_wait_MS_CNT
,ios_tree_page_io_latch_wait_MS_AVG         FLOAT                                               NULL
 -- Subset of ios_page_io_latch_wait_MS_AVG
-------------------------------------
,ios_page_compression_attempt_CNT           BIGINT                                          NOT NULL DEFAULT(0)
,ios_page_compression_success_CNT           BIGINT                                          NOT NULL DEFAULT(0)
,ios_page_compression_fail_CNT              BIGINT                                          NOT NULL DEFAULT(0)
-------------------------------------
-- New for 2019
-------------------------------------
,ios_version_generated_inrow_CNT            BIGINT                                          NOT NULL DEFAULT(0)
 -- In-row version records retained by Snapshot isolation
,ios_version_generated_off_row_CNT          BIGINT                                          NOT NULL DEFAULT(0)
 -- off_row version records retained by Snapshot isolation
,ios_ghost_version_inrow_CNT                BIGINT                                          NOT NULL DEFAULT(0)
 -- Ghost in-row version records retained by Snapshot isolation
,ios_ghost_version_off_row_CNT              BIGINT                                          NOT NULL DEFAULT(0)
 -- Ghost off_row version records retained by Snapshot isolation
,ios_insert_over_ghost_version_inrow_CNT    BIGINT                                          NOT NULL DEFAULT(0)
 -- Inserts over Ghost in-row version records retained by Snapshot isolation
,ios_insert_over_ghost_version_off_row_CNT  BIGINT                                          NOT NULL DEFAULT(0)
 -- Inserts over Ghost off_row version records retained by Snapshot isolation

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[dm_db_index_usage_stats] + [sys].[dm_db_missing_index_group_stats] for missing indexes
--------------------------------------------------------------------------------------------------------------------------------------------
,ius_user_total_CNT                         BIGINT                                              NULL DEFAULT(0)
,ius_user_read_CNT                          BIGINT                                              NULL DEFAULT(0)
,ius_user_seeks_CNT                         BIGINT                                              NULL DEFAULT(0)
                                            -- includes: [sys].[dm_db_missing_index_group_stats] user_seeks
,ius_user_scans_CNT                         BIGINT                                              NULL DEFAULT(0)
                                            -- includes: [sys].[dm_db_missing_index_group_stats] user_scans
,ius_user_lookups_CNT                       BIGINT                                              NULL DEFAULT(0)
,ius_user_updates_CNT                       BIGINT                                              NULL DEFAULT(0)
,ius_system_seeks_CNT                       BIGINT                                              NULL DEFAULT(0)
                                            -- includes: [sys].[dm_db_missing_index_group_stats] system_seeks
,ius_system_scans_CNT                       BIGINT                                              NULL DEFAULT(0)
                                            -- includes: [sys].[dm_db_missing_index_group_stats] system_scans
,ius_system_lookups_CNT                     BIGINT                                              NULL DEFAULT(0)
,ius_system_updates_CNT                     BIGINT                                              NULL DEFAULT(0)

,ius_last_user_seek_DTTM                    DATETIME                                            NULL
                                            -- includes: [sys].[dm_db_missing_index_group_stats] last_user_seek
,ius_last_user_scan_DTTM                    DATETIME                                            NULL
                                            -- includes: [sys].[dm_db_missing_index_group_stats] last_user_scan
,ius_last_user_lookup_DTTM                  DATETIME                                            NULL
,ius_last_user_update_DTTM                  DATETIME                                            NULL

,ius_last_system_seek_DTTM                  DATETIME                                            NULL
                                            -- includes: [sys].[dm_db_missing_index_group_stats] last_system_seek
,ius_last_system_scan_DTTM                  DATETIME                                            NULL
                                            -- includes: [sys].[dm_db_missing_index_group_stats] last_system_scan
,ius_last_system_lookup_DTTM                DATETIME                                            NULL
,ius_last_system_update_DTTM                DATETIME                                            NULL
----------------------------
,ius_no_read_user_updates_CNT               BIGINT                                              NULL DEFAULT(0)
,ius_last_read_days_ago                     BIGINT                                              NULL
,ius_last_write_days_ago                    BIGINT                                              NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Column Store - [sys].[dm_db_column_store_row_group_operational_stats]
--------------------------------------------------------------------------------------------------------------------------------------------
,cs_partition_CNT                           BIGINT                                          NOT NULL DEFAULT(0)
,cs_row_group_CNT                           BIGINT                                          NOT NULL DEFAULT(0)
,cs_index_scan_CNT                          BIGINT                                          NOT NULL DEFAULT(0)
,cs_scan_CNT                                BIGINT                                          NOT NULL DEFAULT(0)
,cs_delete_buffer_scan_CNT                  BIGINT                                          NOT NULL DEFAULT(0)
,cs_row_group_lock_CNT                      BIGINT                                          NOT NULL DEFAULT(0)
,cs_row_group_lock_wait_CNT                 BIGINT                                          NOT NULL DEFAULT(0)
,cs_row_group_lock_wait_MS_CNT              BIGINT                                          NOT NULL DEFAULT(0)
,cs_row_group_lock_wait_MS_AVG              FLOAT                                               NULL
,cs_returned_row_CNT                        BIGINT                                          NOT NULL DEFAULT(0)
,cs_returned_aggregate_CNT                  BIGINT                                          NOT NULL DEFAULT(0)
,cs_returned_group_CNT                      BIGINT                                          NOT NULL DEFAULT(0)
,cs_input_groupby_row_CNT                   BIGINT                                          NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- In-Memory tables & indexes - [sys].[dm_db_xtp_index_stats],[sys].[dm_db_xtp_nonclustered_index_stats]
--                             ,[sys].[dm_db_xtp_memory_consumers]
--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[dm_db_xtp_object_stats] -------------
,xtp_row_insert_attempts_CNT                BIGINT                                          NOT NULL DEFAULT(0)
,xtp_row_update_attempts_CNT                BIGINT                                          NOT NULL DEFAULT(0)
,xtp_row_delete_attempts_CNT                BIGINT                                          NOT NULL DEFAULT(0)
,xtp_write_conflicts_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
,xtp_unique_constraint_violations_CNT       BIGINT                                          NOT NULL DEFAULT(0)
-- [sys].[dm_db_xtp_index_stats] --------------
,xtp_object_id                              INT                                                 NULL
,xtp_scans_started_CNT                      BIGINT                                          NOT NULL DEFAULT(0)
,xtp_scans_retries_CNT                      BIGINT                                          NOT NULL DEFAULT(0)
,xtp_rows_returned_CNT                      BIGINT                                          NOT NULL DEFAULT(0)
,xtp_rows_touched_CNT                       BIGINT                                          NOT NULL DEFAULT(0)
-- [sys].[dm_db_xtp_nonclustered_index_stats] -
,xtp_delta_pages_CNT                        BIGINT                                          NOT NULL DEFAULT(0)
,xtp_leaf_pages_CNT                         BIGINT                                          NOT NULL DEFAULT(0)
,xtp_page_update_CNT                        BIGINT                                          NOT NULL DEFAULT(0)
,xtp_page_update_retry_CNT                  BIGINT                                          NOT NULL DEFAULT(0)
,xtp_page_consolidation_CNT                 BIGINT                                          NOT NULL DEFAULT(0)
,xtp_page_consolidation_retry_CNT           BIGINT                                          NOT NULL DEFAULT(0)
,xtp_page_split_CNT                         BIGINT                                          NOT NULL DEFAULT(0)
,xtp_page_split_retry_CNT                   BIGINT                                          NOT NULL DEFAULT(0)
,xtp_key_split_CNT                          BIGINT                                          NOT NULL DEFAULT(0)
,xtp_key_split_retry_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
,xtp_page_merge_CNT                         BIGINT                                          NOT NULL DEFAULT(0)
,xtp_page_merge_retry_CNT                   BIGINT                                          NOT NULL DEFAULT(0)
,xtp_key_merge_CNT                          BIGINT                                          NOT NULL DEFAULT(0)
,xtp_key_merge_retry_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
,xtp_uses_key_normalization                 BIT                                             NOT NULL DEFAULT(0)
-- [sys].[dm_db_xtp_memory_consumers] ---------
,xtp_allocated_bytes_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
,xtp_used_bytes_CNT                         BIGINT                                          NOT NULL DEFAULT(0)
,xtp_allocation_CNT                         BIGINT                                          NOT NULL DEFAULT(0)

-------------------------------------------------------------------------------------------------------------
-- Shared - [sys].[dm_db_partition_stats], [sys].[dm_db_xtp_memory_consumers]
-------------------------------------------------------------------------------------------------------------
,row_CNT                                    BIGINT                                          NOT NULL DEFAULT(0)
,reserved_page_PG_CNT                       BIGINT                                          NOT NULL DEFAULT(0)
 -- Includes in memory (XTP) allocated_bytes/8192.0
,used_page_PG_CNT                           BIGINT                                          NOT NULL DEFAULT(0)
 -- Includes in memory (XTP) CEILING(used_bytes/8192.0)
,in_row_data_page_PG_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
,in_row_used_page_PG_CNT                    BIGINT                                          NOT NULL DEFAULT(0)
,in_row_reserved_page_PG_CNT                BIGINT                                          NOT NULL DEFAULT(0)
,lob_used_page_PG_CNT                       BIGINT                                          NOT NULL DEFAULT(0)
,lob_reserved_page_PG_CNT                   BIGINT                                          NOT NULL DEFAULT(0)
,row_overflow_used_page_PG_CNT              BIGINT                                          NOT NULL DEFAULT(0)
,row_overflow_reserved_page_PG_CNT          BIGINT                                          NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Partition Info
--------------------------------------------------------------------------------------------------------------------------------------------
,partition_CNT                              BIGINT                                          NOT NULL DEFAULT(0)
,partition_column_id                        INT                                                 NULL
,partition_column_name                      NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Partition Compression
--------------------------------------------------------------------------------------------------------------------------------------------
,partition_none_compress_CNT                BIGINT                                          NOT NULL DEFAULT(0)
,partition_row_compress_CNT                 BIGINT                                          NOT NULL DEFAULT(0)
,partition_page_compress_CNT                BIGINT                                          NOT NULL DEFAULT(0)
,partition_columnstore_compress_CNT         BIGINT                                          NOT NULL DEFAULT(0)
,partition_columnstore_archive_compress_CNT BIGINT                                          NOT NULL DEFAULT(0)
,partition_xml_compress_CNT                 BIGINT                                          NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- [sys].[dm_os_buffer_descriptors]
--------------------------------------------------------------------------------------------------------------------------------------------
,buffer_total_KB_CNT                        BIGINT                                              NULL DEFAULT(0)
 -- Includes in memory (XTP) allocated_bytes/1024.0
,buffer_free_KB_CNT                         BIGINT                                              NULL DEFAULT(0)
 -- Includes (allocated_bytes - used_bytes)/1024.0

--------------------------------------------------------------------------------------------------------------------------------------------
-- Computed/derived Values
--------------------------------------------------------------------------------------------------------------------------------------------
--<FUTURE> revisit need for next column if new [##SQLXL_Index_Synergies] could too. handles different key_ordinal counts
,key_column_ids                             NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI     NULL -- concatenated key ordered list of IDs
,covers_fkc_IDs                             NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI     NULL -- list of FKs covered by this index
--------------------------------------------
,index_CNT                                  INT                                            NOT NULL DEFAULT(0)
,fkc_missing_index_CNT                      INT                                            NOT NULL DEFAULT(0)
,relates_fulltext_index_id                  INT                                                 NULL
--------------------------------------------
,is_key_total_datatype_length_MAX           BIT                                                 NULL
,is_inc_total_datatype_length_MAX           BIT                                                 NULL
--------------------------------------------
,key_total_datatype_length_bytes            INT                                                 NULL
,inc_total_datatype_length_bytes            INT                                                 NULL
--------------------------------------------
,key_ordinal_CNT                            BIGINT                                          NOT NULL DEFAULT(0)
,included_columns_CNT                       BIGINT                                          NOT NULL DEFAULT(0)

,Stats_CNT                                  BIGINT                                          NOT NULL DEFAULT(0)
,low_selectivity_additional_keys            NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL

,key_element_uniqueness                     NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI     NULL -- 249 max columns in index
,indexed_columns                            NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI     NULL

,key_column_info                            NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI     NULL
                                            -- 249 max columns in index, needs to be big
,Included_column_info                       NVARCHAR(MAX)  COLLATE Latin1_General_100_CI_AI     NULL
                                            -- 249 max columns in index, needs to be big

,key_element_length                         NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI     NULL -- increasing length of key elements
                                                                                                     -- 249 max columns in index

,lead_element_column_id                     INT                                                 NULL
,lead_element_uniqueness                    FLOAT                                               NULL
,lead_element_Max_Len                       SMALLINT                                            NULL
,lead_element_Data_Type                     NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI     NULL
,lead_element_is_Identity                   BIT                                             NOT NULL DEFAULT(0)
,lead_element_is_Sequence                   BIT                                             NOT NULL DEFAULT(0)
,lead_element_is_newsequentialid            BIT                                             NOT NULL DEFAULT(0)
,lead_element_is_newid                      BIT                                             NOT NULL DEFAULT(0)
,lead_element_is_Nullable                   BIT                                             NOT NULL DEFAULT(0)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Computed Ratios
--------------------------------------------------------------------------------------------------------------------------------------------
,ius_read_to_write_RAT                      FLOAT                                               NULL
,ops_read_to_write_RAT                      FLOAT                                               NULL
,page_lock_to_all_lock_PCT                  FLOAT                                               NULL

,ius_scans_to_read_PCT                      FLOAT                                               NULL
,ius_lookups_to_read_PCT                    FLOAT                                               NULL
,ius_seeks_to_read_PCT                      FLOAT                                               NULL
,ius_read_to_parent_PCT                     FLOAT                                               NULL
,ius_write_to_parent_PCT                    FLOAT                                               NULL
,ius_write_to_instance_PCT                  FLOAT                                               NULL
,ius_scans_to_instance_PCT                  FLOAT                                               NULL

,ops_scans_to_read_PCT                      FLOAT                                               NULL
,ios_singleton_lookup_to_read_PCT           FLOAT                                               NULL
,ios_forwarded_fetch_to_read_PCT            FLOAT                                               NULL
,ops_read_to_parent_PCT                     FLOAT                                               NULL
,ops_write_to_parent_PCT                    FLOAT                                               NULL
,ops_write_to_instance_PCT                  FLOAT                                               NULL
,ops_total_scan_to_instance_PCT             FLOAT                                               NULL

,page_splits_to_write_PCT                   FLOAT                                               NULL
,page_merge_to_write_PCT                    FLOAT                                               NULL
,ios_page_compression_fail_PCT              FLOAT                                               NULL

,used_pages_in_buffer_PCT                   FLOAT                                               NULL
,free_pages_in_buffer_PCT                   FLOAT                                               NULL

,xtp_page_update_retry_PCT                  FLOAT                                               NULL
,xtp_page_consolidation_retry_PCT           FLOAT                                               NULL
,xtp_page_split_retry_PCT                   FLOAT                                               NULL
,xtp_key_split_retry_PCT                    FLOAT                                               NULL
,xtp_page_merge_retry_PCT                   FLOAT                                               NULL
,xtp_key_merge_retry_PCT                    FLOAT                                               NULL

--------------------------------------------------------------------------------------------------------------------------------------------
-- Overlappers
--------------------------------------------------------------------------------------------------------------------------------------------
,synergy_code                               NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI     NULL
                                            -- keys common across "indexes", w/o includes
,constraints                                NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI     NULL
) WITH (DATA_COMPRESSION = PAGE);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Created table [##SQLXL_Index_compilation]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Insert [##SQLXL_Index_compilation]
 Indexes including Heaps (w/o view heaps) & Foreign Key Constraints, Views, SQL Table Valued Functions
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
TRUNCATE TABLE [##SQLXL_Index_compilation]
--*/

INSERT
  INTO [##SQLXL_Index_compilation] WITH (TABLOCKX)
      (rec_type
      ,database_id,object_id,index_id,type,sub_type
      ------------------------------------------------------
      ,name
      ,type_desc
      ,sub_type_desc
      ------------------------------------------------------
      ,is_unique
      ,data_space_id
      ,ignore_dup_key
      ,is_primary_key
      ,is_unique_constraint
      ,fill_factor
      ,is_padded
      ,is_disabled
      ,is_hypothetical
      ,allow_row_locks
      ,allow_page_locks
      ,has_filter
      ,filter_definition
      ------------------------------------------------------
      ,partition_column_id
      ,partition_column_name
      ------------------------------------------------------
      ,compression_delay_mm
      ,is_ignored_in_optimization
      ,suppress_dup_key_messages
      ,auto_created
      ,optimize_for_sequential_key
      ----------------------------------------------------------------------------------------------------
      -- fulltext indexes
      ----------------------------------------------------------------------------------------------------
      ,relates_fulltext_index_id
      ----------------------------------------------------------------------------------------------
      -- [sys].[xml_indexes]
      ----------------------------------------------------------------------------------------------
      ,xml_index_type
      ,xml_index_type_description
      ,xml_using_xml_index_id
      ,xml_secondary_type
      ,xml_secondary_type_desc
      ,xml_path_id
      ----------------------------------------------------------------------------------------------
      -- [sys].[spatial_indexes] -- other tessellation columns can be found in [##SQLXL_Index_sys_spacial_indexes]
      ----------------------------------------------------------------------------------------------
      ,si_tessellation_scheme
      ----------------------------------------------------------------------------------------------
      -- [sys].[hash_indexes]
      ----------------------------------------------------------------------------------------------
      ,hi_bucket_CNT
      ----------------------------------------------------------------------------------------------
      -- [sys].[foreign_keys] in [##SQLXL_Index_sys_objects]
      ----------------------------------------------------------------------------------------------
      -- [sys].[dm_os_buffer_descriptors]
      ----------------------------------------------------------------------------------------------
      ,buffer_total_KB_CNT
      ,buffer_free_KB_CNT
      ----------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------
      ,index_CNT
)
SELECT rec_type                    = N'I'                                                              -- index level composite record
      ,database_id                 = obj.database_id
      ,object_id                   = IIF(obj.type = N'F',obj.parent_object_id,obj.object_id)           -- for System, History, Constraints
      ,index_id                    = COALESCE(i.index_id,obj.object_id)
      ,type                        = COALESCE(i.type,obj.type,N'0')              -- rowstore heap
      ,sub_type                    = COALESCE(i.sub_type,0) -- spatial_index_type     ,xml_index_type
      -----------------------------------------------------------------------------------------------------
      -- Index info consolidated
      -- NOTE: SQL_INLINE_TABLE_VALUED_FUNCTION have no index records
      -----------------------------------------------------------------------------------------------------
      ,name                        = COALESCE(i.name,i.type_desc,obj.name)
      ,type_desc                   = COALESCE(i.type_desc,obj.type_desc,N'HEAP') -- "HEAP"
      ,sub_type_desc               = i.sub_type_desc        -- spatial_index_type_desc,xml_index_type_description
      ----------------------------------------------------------------------------------------------------
      ,is_unique                   = COALESCE(i.is_unique,0)
      ,i.data_space_id
      ,ignore_dup_key              = COALESCE(i.ignore_dup_key,0)
      ,is_primary_key              = COALESCE(i.is_primary_key,0)
      ,is_unique_constraint        = COALESCE(i.is_unique_constraint,0)
      ,fill_factor                 = IIF(i.fill_factor = 0,100,i.fill_factor)
      ,is_padded                   = COALESCE(i.is_padded,0)
      ,is_disabled                 = COALESCE(i.is_disabled,0)
      ,is_hypothetical             = COALESCE(i.is_hypothetical,0)
      ,allow_row_locks             = i.allow_row_locks
      ,allow_page_locks            = i.allow_page_locks
      ,has_filter                  = COALESCE(i.has_filter,0)
      ,filter_definition           = i.filter_definition
      ----------------------------------------------------------------------------------------------------
      ,partition_column_id         = idx_partition.partition_column_id
      ,partition_column_name       = idx_partition.partition_column_name
      ----------------------------------------------------------------------------------------------------
      ,compression_delay_mm        = i.compression_delay
      ,is_ignored_in_optimization  = COALESCE(i.is_ignored_in_optimization,0)
      ,suppress_dup_key_messages   = COALESCE(i.suppress_dup_key_messages,0)
      ,auto_created                = COALESCE(i.auto_created,0)
      ,optimize_for_sequential_key = COALESCE(i.optimize_for_sequential_key,0)
      ----------------------------------------------------------------------------------------------------
      -- fulltext indexes
      ----------------------------------------------------------------------------------------------------
      ,relates_fulltext_index_id   = ftx.object_id
      ----------------------------------------------------------------------------------------------------
      -- XML indexes
      ----------------------------------------------------------------------------------------------------
      ,xml_index_type              = i.xml_index_type
      ,xml_index_type_description  = i.xml_index_type_description
      ,xml_using_xml_index_id      = i.xml_using_xml_index_id
      ,xml_secondary_type          = i.xml_secondary_type
      ,xml_secondary_type_desc     = i.xml_secondary_type_desc
      ,xml_path_id                 = i.xml_path_id
      ----------------------------------------------------------------------------------------------------
      -- Spatial indexes -- other tessellation columns can be found in [##SQLXL_Index_sys_spacial_indexes]
      ----------------------------------------------------------------------------------------------------
      ,si_tessellation_scheme      = i.si_tessellation_scheme
      ----------------------------------------------------------------------------------------------------
      -- HASH indexes
      ----------------------------------------------------------------------------------------------------
      ,hi_bucket_CNT                     = COALESCE(i.hi_bucket_CNT,0)
      ----------------------------------------------------------------------------------------------------
      -- [sys].[foreign_keys] in [##SQLXL_Index_sys_objects]
      ----------------------------------------------------------------------------------------------------
      -- [sys].[dm_os_buffer_descriptors]
      ----------------------------------------------------------------------------------------------------
      ,buffer_total_KB_CNT                = COALESCE(bd.buffer_total_KB,0)
      ,buffer_free_KB_CNT                 = COALESCE(bd.buffer_free_KB ,0)
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT                          = 1                      -- actual stored performance index objects

/*** LOCAL TESTING ***
SELECT obj.database_id,obj.object_id,op.name,obj.object_id,obj.name,obj.type,op.object_id,i.index_id,i.type
--*/
  FROM (-- Candidate objects
        SELECT *
          FROM [##SQLXL_Index_sys_objects]
         WHERE type IN (N'F'  -- Foreign Key Constraint
                       ,N'IT' -- internal table object type
                       ,N'TF' -- SQL Table Valued Function SQL2012+
                       ,N'U'  -- User Table
                       ,N'V'  -- View
                       )
       ) AS obj

------------------------------------------------------------------------------------------------------
-- match up objects to their indexes
------------------------------------------------------------------------------------------------------
  LEFT OUTER -- outer join so HEAP (index type = 0) can be created for objects without indexes
  JOIN [##SQLXL_Index_sys_indexes] AS i
    ON obj.database_id = i.database_id
   AND obj.object_id   = i.object_id
   AND i.type NOT     IN (N'F'   -- foreign key constraints don't have "indexes"
                         ,N'M'   -- missing index, inserted below
                         ,N'T'   -- fulltext indexes, inserted below
                         )

------------------------------------------------------------------------------------------------------
-- add buffer cache summary usage
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_os_buffer_descriptors_EXT] AS bd
    ON obj.database_id = bd.database_id
   AND obj.object_id   = bd.object_id
   AND i.index_id      = bd.index_id
   AND i.type     NOT IN (-- avoid "indexes" with IDs that could match up with physical indexes
                          N'T'  -- full-text index of a tabular object
                         ,N'F'  -- foreign key constraint
                         ,N'M'  -- missing nonclustered rowstore index
                         ,N'V'  -- View
                         )

------------------------------------------------------------------------------------------------------
-- Index Partition information
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- Index Column Partition information
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,partition_column_id   = ic.column_id
              ,partition_column_name = c.name
              ,rn                    = ROW_NUMBER() OVER (PARTITION BY ic.database_id
                                                                      ,ic.object_id
                                                                      ,ic.index_id
                                                              ORDER BY ic.column_id
                                                         )
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_columns]       AS c
            ON ic.database_id = c.database_id
           AND ic.object_id   = c.object_id
           AND ic.column_id   = c.column_id
         WHERE ic.partition_ordinal > 0
       ) AS idx_partition
    ON i.database_id = idx_partition.database_id
   AND i.object_id   = idx_partition.object_id
   AND i.index_id    = idx_partition.index_id
   AND (   1         = idx_partition.rn
        OR idx_partition.rn IS NULL
       )
------------------------------------------------------------------------------------------------------
-- source table unique index used by fulltext index
------------------------------------------------------------------------------------------------------
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_fulltext_indexes] AS ftx
    ON i.database_id      = ftx.database_id
   AND i.object_id        = ftx.object_id
   AND i.index_id         = ftx.unique_index_id
   AND i.type            IN (N'1' -- clustered rowstore index
                            ,N'2' -- nonclustered rowstore index
                            )

------------------------------------------------------------------------------------------------------
 WHERE NOT (    i.index_id IS NULL
            AND obj.type   IN (N'TF'   -- SQL table valued functions. no need for "HEAP" index row (design choice)
                              ,N'V'    -- views. no need for "HEAP" index row (design choice)
                              )
           )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert heaps, indexes, foreign key constraints, SQL table valued functions, views to compilation table'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Insert [##SQLXL_Index_compilation] Full Text indexes
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_compilation] WITH (TABLOCKX)
      (rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,name
      ,type_desc
      ,data_space_id
      ,is_disabled
      ----------------------------------------------------------------------------------------------------
      -- [sys].[dm_os_buffer_descriptors]
      ----------------------------------------------------------------------------------------------------
      ,buffer_total_KB_CNT
      ,buffer_free_KB_CNT
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT
       )
SELECT rec_type                       = N'I'                                                        -- index level composite record
      ,database_id                    = obj.database_id
      ,object_id                      = obj.object_id
      ,index_id                       = i.object_id
      ,type                           = N'T'                      -- HARD CODED for FULL TEXT index
      ,sub_type                       = 0
      ------------------------------------------------------------------------------------------------------------------
      ,name                           = N'FULL TEXT'              -- HARD CODED for FULL TEXT index
      ,type_desc                      = N'FULL TEXT'              -- HARD CODED for FULL TEXT index
      ,i.data_space_id
      ,is_disabled                    = IIF(i.is_enabled = 1,0,1) -- NOTE: opposite of [sys].[indexES]
      ------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_os_buffer_descriptors] - no links between buffer cache and fulltext indexes found as of yet <FUTURE>
      ------------------------------------------------------------------------------------------------------------------
      ,buffer_total_KB_CNT            = NULL -- bd.buffer_total_KB_CNT
      ,buffer_free_KB_CNT             = NULL -- bd.buffer_free_KB_CNT
      ------------------------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ------------------------------------------------------------------------------------------------------------------
      ,index_CNT                      = 1 -- actual stored performance index objects

  FROM [##SQLXL_Index_sys_fulltext_indexes]   AS i
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects]            AS obj
    ON i.database_id         = obj.database_id
   AND i.object_id           = obj.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert Full Text indexes to compilation table'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Insert [##SQLXL_Index_compilation] Missing indexes
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_compilation] WITH (TABLOCKX)
      (rec_type
      ,database_id,object_id,index_id,type,sub_type
      ----------------------------------------------------------------------------------------------------
      ,name
      ,type_desc
      ----------------------------------------------------------------------------------------------------
      ,mix_avg_total_user_cost_AMT
      ,mix_avg_total_system_cost_AMT
      ,mix_avg_user_impact_AMT
      ,mix_avg_system_impact_AMT
      ,mix_unique_compiles_CNT
      ,mix_Advantage_AMT
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT
      )
SELECT rec_type                      = N'I'                 -- index level composite record
      ,database_id                   = i.database_id
      ,object_id                     = i.object_id
      ,index_id                      = i.group_handle
      ,type                          = N'M'                 -- missing nonclustered rowstore index
      ,sub_type                      = 0
      ----------------------------------------------------------------------------------------------------
      ,name                          = N'MISSING'
      ,type_desc                     = N'MISSING'
      ----------------------------------------------------------------------------------------------------
      ,mix_avg_total_user_cost_AMT   = i.avg_total_user_cost
      ,mix_avg_total_system_cost_AMT = i.avg_total_system_cost
      ,mix_avg_user_impact_AMT       = i.avg_user_impact
      ,mix_avg_system_impact_AMT     = i.avg_system_impact
      ,mix_unique_compiles_CNT       = i.unique_compiles
      ,mix_Advantage_AMT             = i.mix_Advantage_AMT
      ----------------------------------------------------------------------------------------------------
      -- Object Computed/derived Values
      ----------------------------------------------------------------------------------------------------
      ,index_CNT                     = 0 -- actual stored performance index objects

/*** LOCAL TESTING ***
SELECT COUNT_BIG(1)
--*/

  FROM [##SQLXL_Index_sys_dm_db_missing_index_details] AS i
    -- NOTE: includes [sys].[dm_db_missing_index_details],[sys].[dm_db_missing_index_groups],[sys].[dm_db_missing_index_group_stats]
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert Missing indexes to compilation table'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Insert [##SQLXL_Index_compilation] Object records
 Base "P" (Table, View), HISTORY TABLE "H", and INTERNAL TABLE "S" records
 Top-level "Parent" "P" tables include:
    object type "U" "Base" tables - Heap, Rowstore Clustered, and Clustered Columnstore
    object type "U" "History" tables created by Change Data Capture, System Versioning, and Ledger
    internal & history tables roll up to their respective parent
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_compilation] WITH (TABLOCKX)
      (rec_type
      ,database_id,object_id,index_id,type,sub_type
      ------------------------------------------------------
      ,data_space_id
      ,name
      ,type_desc
      ,sub_type_desc
      ,Stats_CNT
      ,row_CNT
      )
SELECT rec_type = CASE WHEN obj.cdc_is_history_table = 1     THEN N'H' -- change data capture history tables
                       WHEN obj.temporal_type        = 1     THEN N'H' -- HISTORY_TABLE (associated with a temporal table)
                       WHEN obj.ledger_type          = 1     THEN N'H' -- HISTORY_TABLE (associated with an updatable ledger table)
                       WHEN obj.type                 = N'IT' THEN N'S' -- internal table
                       ELSE                                       N'P' -- parent level aggregate record
                  END
      ,database_id                 = obj.database_id
      ,object_id                   = obj.object_id
      ,index_id                    = obj.object_id
      ,type                        = obj.type
      ,sub_type                    = COALESCE(obj.sub_type,0)
      ----------------------------------------------------------------------------------------------------
      ,data_space_id               = obj.data_space_id
      ,name                        = obj.name
      ,type_desc                   = obj.type_desc
      ,sub_type_desc               = obj.sub_type_desc
      ----------------------------------------------------------------------------------------------------
      ,Stats_CNT                   = COALESCE(stats.statistics_CNT,0)
      ----------------------------------------------------------------------------------------------------
      ,row_CNT                     = ISNULL(part.rows         ,0)
  FROM (-- indexable objects - FOREIGN KEY CONSTRAINTS roll up to their PARENT TABLE
        SELECT *
          FROM [##SQLXL_Index_sys_objects]
         WHERE type
            IN (N'IT' -- Internal Table
               ,N'TF' -- SQL table-valued-function SQL 2012+
               ,N'U'  -- User Table
               ,N'V'  -- View
               )
       ) AS obj

  LEFT OUTER
  JOIN (-- Get count of rows, compressed and archived partitions - OBJECT LEVEL ONLY
        SELECT p.database_id
              ,p.object_id
              ,rows                = SUM(p.rows)
          FROM [##SQLXL_Index_sys_partitions] AS p
          JOIN [##SQLXL_Index_sys_indexes]    AS i
            ON p.database_id = i.database_id
           AND p.object_id   = i.object_id
           AND p.index_id    = i.index_id
         WHERE i.type IN (N'0' -- rowstore heap
                         ,N'1' -- clustered rowstore index
                         ,N'5' -- Clustered columnstore
                         )
         GROUP BY
               p.database_id
              ,p.object_id
       ) AS part
    ON obj.database_id        = part.database_id
   AND obj.object_id          = part.object_id

  LEFT OUTER
  JOIN (-- count of statistics for each table & indexed view
        SELECT s.database_id
              ,s.object_id
              ,statistics_CNT          = COUNT_BIG(1)
              ,statistics_filtered_CNT = SUM(IIF(has_filter = 1,1,0))
          FROM [##SQLXL_Index_sys_stats]   AS s
         GROUP BY
               s.database_id
              ,s.object_id
       ) stats
    ON obj.database_id = stats.database_id
   AND obj.object_id   = stats.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert Object records - Base "P" (Table, View, Table Valued Function), HISTORY TABLE "H", and INTERNAL TABLE "S" records'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Insert [##SQLXL_Index_compilation] DATABASE records
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_compilation] WITH (TABLOCKX)
      (rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,type_desc
      ,name

      )
SELECT rec_type           = N'D'                            -- database level aggregate record
      ,database_id        = database_id
      ,object_id          = database_id
      ,index_id           = database_id
      ,type               = N'DB'                           -- database "index" type
      ,sub_type           = 0
      ,type_desc          = N'Database'
      ,name
  FROM [##SQLXL_Index_sys_databases]
 WHERE database_id > 0                                      -- ignore "instance" database record
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert DATABASE records to compilation table'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Insert [##SQLXL_Index_compilation] INSTANCE record
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Index_compilation] WITH (TABLOCKX)
      (rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,name
      ,type_desc
      )
SELECT rec_type           = N'A'        -- instance level aggregate record
      ,database_id        = 0
      --------------------
      ,object_id          = 0
      ,index_id           = 0
      ,type               = N'A'        -- instance level aggregate record
      ,sub_type           = 0
      ,name               = N'Instance'
      ,type_desc          = N'Instance'
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert INSTANCE record to compilation table'
   RAISERROR(@msg,0,0) WITH NOWAIT;
END;

/******************************************************************************************************************************************\
 ### END OF INSERTS TO [##SQLXL_Index_compilation] ###
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
 *Task* Index [##SQLXL_Index_compilation] clustered key ------------------------------------------------------------------------------------
\******************************************************************************************************************************************/
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_compilation
    ON [##SQLXL_Index_compilation]
      (type,database_id,object_id,index_id,sub_type -- sub_type needed for XML & SPATIAL index uniqueness
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Clustered Index Compilation Table [##SQLXL_Index_compilation]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Concatenate list of index key column IDs in order "key_ordinal"
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET key_column_ids = N',' + key_columns.col_id
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.name
      ,key_column_ids = N',' + key_columns.col_id
--*/
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
 CROSS
 APPLY (-- get comma-separated list of all KEY column ID's. Include leading comma so IDs are stand out from one another
        -- includes ALL "indexes" except HEAP & Columnstore. Foreign Key Constraints added below
        SELECT -- double SELECT required for XML TYPE VALUE below
       (SELECT CAST(ic.column_id AS NVARCHAR(MAX)) + N','
               FROM [##SQLXL_Index_sys_index_columns] ic
              WHERE tgt.database_id = ic.database_id
                AND tgt.object_id   = ic.object_id
                AND tgt.index_id    = ic.index_id
                AND tgt.type        = ic.type
                AND tgt.sub_type    = ic.sub_type
                AND 0               < ic.key_ordinal
              ORDER BY
                    ic.key_ordinal
                FOR XML PATH(N''),TYPE                                                           -- column_id
       ).value('.',N'NVARCHAR(MAX)')
       ) key_columns(col_id)
 WHERE tgt.rec_type  = N'I'  -- index level composite record
   AND tgt.type NOT IN (N'0' -- rowstore heap
                       ,N'5' -- Clustered columnstore
                       ,N'6' -- nonclustered columnstore index
                       ,N'M' -- missing nonclustered rowstore index
                       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Concatenated list of index key column IDs in corrected sequence order'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Abbreviations for object & index types
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       obj_type_pfx = -- used in the spreadsheet for prefixing the "Object & Index Types" selection column
                      CASE WHEN tgt.rec_type = N'A' THEN N'#' -- instance level aggregate record
                           WHEN tgt.rec_type = N'D' THEN N'#' -- database level aggregate record
                           WHEN tgt.rec_type = N'H' THEN N'>' -- historical/archive table aggregate record
                           WHEN tgt.rec_type = N'P' THEN N'*' -- parent user table aggregate record
                           WHEN tgt.rec_type = N'S' THEN N'>' -- internal/system table
                           ELSE N''
                      END
      ,obj_type_hdr = CASE WHEN tgt.rec_type                  = N'A'  THEN N'ALL' -- instance level aggregate record
                           WHEN tgt.rec_type                  = N'D'  THEN N'DB'  -- database level aggregate record
                           WHEN obj.temporal_type             = 1     THEN N'HST' -- history table
                           WHEN obj.ledger_type               = 1     THEN N'HST' -- history table
                           WHEN obj.cdc_is_history_table      = 1     THEN N'HST' -- history table
                           WHEN obj.is_external               = 1     THEN N'EXT' -- external table
                           WHEN obj.is_filetable              = 1     THEN N'FIL' -- file table
                           WHEN obj.clustered_columnstore_CNT > 0     THEN N'CCS' -- clustered columnstore
                           WHEN obj.type                      = N'F'  THEN N'TBL' -- foreign key constraint
                           WHEN obj.type                      = N'IT' THEN N'INT' -- internal table
                           WHEN obj.type                      = N'TF' THEN N'TVF' -- SQL table-valued-function SQL 2012+
                           WHEN obj.type                      = N'U'  THEN N'TBL' -- regular rowstore user table
                           WHEN obj.type                      = N'V'  THEN N'VW'  -- View
                           ELSE COALESCE(obj.type,N'*OBJ TYPE NOT FOUND*')
                      END

      ,obj_type_dtl = LTRIM(
                      CASE WHEN obj.type = N'IT' AND obj.sub_type > 0 -- internal tables
                           THEN CASE obj.sub_type
                                     WHEN   3 THEN N'QDS HNT' -- QUERY_DISK_STORE_QUERY_HINTS
                                     WHEN   4 THEN N'QDS PRM' -- QUERY_DISK_STORE_QUERY_TEMPLATE_PARAMETERIZATION
                                     WHEN   6 THEN N'QDS WTS' -- QUERY_DISK_STORE_WAIT_STATS
                                     WHEN   8 THEN N'QDS QVT' -- PLAN_PERSIST_QUERY_VARIANT_TABLE
                                     WHEN   9 THEN N'QDS REP' -- QUERY_DISK_STORE_REPLICAS
                                     WHEN  10 THEN N'QDS PFL' -- QUERY_DISK_STORE_PLAN_FORCING_LOCATIONS
                                     WHEN  11 THEN N'QDS RTS' -- QUERY_DISK_STORE_RUNTIME_STATS_V2
                                     WHEN  12 THEN N'QDS WT2' -- QUERY_DISK_STORE_WAIT_STATS_V2
                                     ----------------------------------------------------------------
                                     WHEN 201 THEN N'QUE QMS' -- QUEUE_MESSAGES
                                     WHEN 202 THEN N'XML IXN' -- XML_INDEX_NODES                    -- keep in synch with idx_type_hdr
                                     WHEN 203 THEN N'FTX CFL' -- FTX fulltext_CATALOG_FREELIST
                                     WHEN 204 THEN N'FTX MAP' -- FTX fulltext_CATALOG_MAP (BOL)/fulltext_INDEX_MAP (REALITY)
                                     WHEN 205 THEN N'QRY NOT' -- QUERY_NOTIFICATION
                                     WHEN 206 THEN N'SVC BMP' -- SERVICE_BROKER_MAP
                                     WHEN 207 THEN N'EXT IND' -- EXTENDED_INDEXES (such as a spatial index)
                                     WHEN 208 THEN N'FST TMB' -- FILESTREAM_TOMBSTONE
                                     WHEN 209 THEN N'CHG TRK' -- CHANGE_TRACKING
                                     WHEN 210 THEN N'TRK TXN' -- TRACKED_COMMITTED_TRANSACTIONS
                                     ----------------------------------------------------------------
                                     WHEN 211 THEN N'FTX AVD' -- FTX fulltext_AVDL
                                     WHEN 212 THEN N'FTX CFR' -- FTX fulltext_COMP_FRAGMENT
                                     WHEN 213 THEN N'FTX DST' -- FTX fulltext_DOCID_STATUS
                                     WHEN 214 THEN N'FTX IDI' -- FTX fulltext_INDEXED_DOCID
                                     WHEN 215 THEN N'FTX DFL' -- FTX fulltext_DOCID_FILTER
                                     WHEN 216 THEN N'FTX DMP' -- FTX fulltext_DOCID_MAP
                                     WHEN 217 THEN N'FTX TMT' -- FTX fulltext_THESAURUS_METADATA_TABLE
                                     WHEN 218 THEN N'FTX TST' -- FTX fulltext_THESAURUS_STATE_TABLE
                                     WHEN 219 THEN N'FTX TPT' -- FTX fulltext_THESAURUS_PHRASE_TABLE
                                     ----------------------------------------------------------------
                                     WHEN 220 THEN N'CON FTR' -- CONTAINED_FEATURES
                                     WHEN 221 THEN N'SMP DOC' -- SEMPLAT_DOCUMENT_INDEX_TABLE
                                     WHEN 222 THEN N'SMP TIT' -- SEMPLAT_TAG_INDEX_TABLE
                                     WHEN 223 THEN N'SMP MMT' -- SEMPLAT_MODEL_MAPPING_TABLE
                                     WHEN 224 THEN N'SMP LMT' -- SEMPLAT_LANGUAGE_MODEL_TABLE
                                     WHEN 225 THEN N'FTB UPF' -- FILETABLE_UPDATES
                                     ----------------------------------------------------------------
                                     WHEN 236 THEN N'XML SND' -- SELECTIVE_XML_INDEX_NODE_TABLE     -- keep in synch with idx_type_hdr
                                     WHEN 237 THEN N'IT* 237' -- UNKNOWN INTERNAL TABLE TYPE 237
                                     WHEN 238 THEN N'IT* 238' -- UNKNOWN INTERNAL TABLE TYPE 238
                                     WHEN 239 THEN N'IT* 239' -- UNKNOWN INTERNAL TABLE TYPE 239
                                     ----------------------------------------------------------------
                                     WHEN 240 THEN N'QDS TXT' -- QUERY_DISK_STORE_QUERY_TEXT
                                     WHEN 241 THEN N'QDS QDQ' -- QUERY_DISK_STORE_QUERY
                                     WHEN 242 THEN N'QDS PLN' -- QUERY_DISK_STORE_PLAN
                                     WHEN 243 THEN N'QDS RST' -- QUERY_DISK_STORE_RUNTIME_STATS
                                     WHEN 244 THEN N'QDS RSI' -- QUERY_DISK_STORE_RUNTIME_STATS_INTERVAL
                                     WHEN 245 THEN N'QRY CNS' -- QUERY_CONTEXT_SETTINGS
                                     WHEN 246 THEN N'IT* 246' -- UNKNOWN INTERNAL TABLE TYPE 246
                                     WHEN 247 THEN N'IT* 247' -- UNKNOWN INTERNAL TABLE TYPE 247
                                     WHEN 248 THEN N'IT* 248' -- UNKNOWN INTERNAL TABLE TYPE 248
                                     WHEN 249 THEN N'IT* 249' -- UNKNOWN INTERNAL TABLE TYPE 249
                                     WHEN 250 THEN N'QDS PFB' -- QUERY_DISK_STORE_PLAN_FEEDBACK
                                     WHEN 251 THEN N'IT* 251' -- UNKNOWN INTERNAL TABLE TYPE 251
                                     WHEN 252 THEN N'HST SVN' -- INTERNAL_TEMPORAL_HISTORY_TABLE
                                     ELSE COALESCE(N' IT* ' + RIGHT(N'00' + CAST(obj.sub_type AS NVARCHAR(3)),3)
                                                  ,N' MSG ITT')
                                END
                           ELSE N''
                      END

                    + IIF(obj.is_memory_optimized             = 1,N' XTP'    ,N'') -- memory optimized
                    + IIF(obj.cdc_is_history_table            = 1,N' CDC'    ,N'')
                    + IIF(obj.ctt_is_track_columns_updated_on = 1,N' CTT'    ,N'')
                    + IIF(obj.is_node                         = 1,N' GPH NOD',N'')
                    + IIF(obj.is_edge                         = 1,N' GPH EDG',N'')
                    + IIF(obj.is_dropped_ledger_table         = 1,N' LDG DRP',N'') -- is_dropped_ledger_table
                    + IIF(obj.ledger_type                     = 1,N' LDG HST',N'') -- HISTORY_TABLE
                    + IIF(obj.ledger_type                     = 2,N' LDG UPD',N'') -- UPDATABLE_LEDGER_TABLE
                    + IIF(obj.ledger_type                     = 3,N' LDG APP',N'') -- APPEND_ONLY_LEDGER_TABLE
                    + IIF(obj.is_merge_published              = 1,N' MRG'    ,N'')
                    + IIF(obj.is_remote_data_archive_enabled  = 1,N' RDA'    ,N'')
                    + IIF(obj.is_replicated                   = 1,N' REP'    ,N'')
                    + IIF(obj.is_tracked_by_cdc               = 1,N' CDC'    ,N'')
                    + IIF(obj.is_sync_tran_subscribed         = 1,N' SYN'    ,N'')
                    + IIF(obj.temporal_type                   > 0,N' SVN'    ,N'') -- SYSTEM_VERSIONED_TEMPORAL_TABLE
                    ) -- end of LTRIM

      ,idx_type_hdr = CASE tgt.type
                           WHEN N'0'  THEN N'HP'  -- rowstore heap
                           WHEN N'1'  THEN N'CX'  -- clustered rowstore index
                           WHEN N'2'  THEN N'NCX' -- nonclustered rowstore index
                           WHEN N'3'  THEN N'XML' -- XML index
                           WHEN N'4'  THEN N'SPT' -- Spatial index
                           WHEN N'5'  THEN N'CCS' -- clustered columnstore
                           WHEN N'6'  THEN N'NCS' -- nonclustered columnstore index
                           WHEN N'7'  THEN N'CCH' -- Hash index on In-Memory Clustered Columnstore
                           WHEN N'9'  THEN N'JSN' -- JSON index

                           -- non - SYS.INDEXES types included at the "Index" level
                           WHEN N'F'  THEN N'FKC' -- foreign key constraint
                           WHEN N'M'  THEN N'MIX' -- missing nonclustered rowstore index - see below
                           WHEN N'T'  THEN N'FTX' -- full-text index of a tabular object. See Insert code below

                           -- to accomodate REC_TYPEs other than "index" level records
                           ELSE            N''
                      END

      ,idx_type_dtl = CASE tgt.type
                           WHEN N'3'                        -- XML index
                           THEN CASE tgt.sub_type
                                      WHEN 0 THEN N'PRI'    -- 0 = Primary XML index
                                      WHEN 1 THEN N'SEC'    -- 1 = Secondary XML index
                                      WHEN 2 THEN N'SEL'    -- 2 = Selective XML index
                                      WHEN 3 THEN N'SSEL'   -- 3 = Secondary selective XML index
                                      ELSE N' <' + IIF(tgt.sub_type IS NULL,N'subtype?',CAST(tgt.sub_type AS NVARCHAR(20))) + N'>'
                                 END
                            WHEN N'4'
                            THEN CASE tgt.sub_type          -- spatial subtypes
                                      WHEN 1 THEN N'GEM'    -- 1 = Geometry
                                      WHEN 2 THEN N'GEG'    -- 2 = Geographic
                                      WHEN 4 THEN N'GEG'    -- 4 = Geographic
                                      ELSE N' <' + IIF(tgt.sub_type IS NULL,N'subtype?',CAST(tgt.sub_type AS NVARCHAR(20))) + N'>'
                                 END
                            ELSE N''
                      END
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS obj -- all records get TABLE level information
    ON obj.database_id = tgt.database_id
   AND obj.object_id   = tgt.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update [##SQLXL_Index_compilation] Abbreviations for object & index types'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- end of bulk updating of [##SQLXL_Index_compilation]
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_sys_columns
    ON [##SQLXL_Index_sys_columns]
      (database_id,object_id
      ,column_id
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms_ads > 0 BEGIN -- display status to SSMS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index [ixuc_SQLXL_Index_sys_columns] on [##SQLXL_Index_sys_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] list of Columns for Object level
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT rec_type,tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       key_column_info = STUFF((-- Object-level list of all columns in usage order
                                SELECT  CHAR(096)
                                      + COALESCE(icol.column_descriptors,N'')
                                  FROM [##SQLXL_Index_sys_columns] AS icol
                                 WHERE tgt.database_id = icol.database_id
                                   AND tgt.object_id   = icol.object_id
                                 ORDER BY
                                       icol.indexed_column_usage_sort                               -- table column index usage
                                   FOR XML PATH(N''), TYPE                                          -- column_descriptors)
                               ).value('.',N'NVARCHAR(MAX)')
                              ,1,1,N'') -- end of STUFF function
      ,indexed_columns = STUFF((-- Object-level list of how often columns appear across indexes
                                SELECT  CHAR(096)
                                      + icol.indexed_columns
                                  FROM [##SQLXL_Index_sys_columns] AS icol
                                 WHERE tgt.database_id      = icol.database_id
                                   AND tgt.object_id        = icol.object_id
                                   AND icol.indexed_columns > N''                                   -- omit empty references
                                 ORDER BY
                                       icol.indexed_column_usage_sort                               -- table column index usage
                                   FOR XML PATH(N''), TYPE                                          -- column_descriptors
                               ).value('.',N'NVARCHAR(MAX)')
                              ,1,1,N'') -- end of STUFF function
      ,stathdr_filter_expression
                       = STUFF((-- get top 10 columns with filters & most recent filter definition
                                SELECT REPLACE( CHAR(096)
                                              + N'COL STAT' + IIF(sc.flt_CNT > 1,N'S ' + CAST(sc.flt_CNT AS NVARCHAR(20)),N'')
                                              + N': ' + QUOTENAME(ss.name)
                                              + CHAR(096)
                                              + N'> FLTR: ' + ss.filter_definition
                                              ,NCHAR(031),NCHAR(032))
                                  FROM (-- get top columns with most filtered statistics per object
                                        SELECT TOP (10)
                                               ss.database_id,ss.object_id
                                              ,sc.column_id
                                              ,flt_CNT = COUNT(1)
                                              ,flt_max = MAX(ss.stats_id)
                                          FROM [##SQLXL_Index_sys_stats]         AS ss
                                          JOIN [##SQLXL_Index_sys_stats_columns] AS sc
                                            ON ss.database_id = sc.database_id
                                           AND ss.object_id   = sc.object_id
                                           AND ss.stats_id    = sc.stats_id
                                         WHERE ss.user_created = 1
                                           AND ss.has_filter   = 1
                                        GROUP BY
                                              ss.database_id,ss.object_id
                                             ,sc.column_id
                                        ORDER BY
                                              COUNT(1) DESC
                                       ) AS sc
                                  JOIN [##SQLXL_Index_sys_stats] AS ss
                                    ON sc.database_id = ss.database_id
                                   AND sc.object_id   = ss.object_id
                                   AND sc.flt_max     = ss.stats_id
                                 WHERE tgt.database_id = sc.database_id
                                   AND tgt.object_id   = sc.object_id
                                 ORDER BY
                                       sc.flt_CNT DESC
                                   FOR XML PATH(N''), TYPE                                          -- stat filter definition
                               ).value('.',N'NVARCHAR(MAX)')
                              ,1,1,N'') -- end of STUFF function
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
 WHERE type IN (N'IT' -- system/internal table
               ,N'U'  -- user table
               ,N'V'  -- view
               )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update column_descriptors for Objects'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Build table of column uniqueness & display values',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] index size & count attributes
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/

       key_ordinal_CNT                   = COALESCE(lng.key_ordinal_CNT     ,0)  -- for heaps
      ,included_columns_CNT              = COALESCE(lng.included_columns_CNT,0)  -- for heaps
      ,is_key_total_datatype_length_MAX  = CAST(lng.key_column_MAX      AS BIT)
      ,is_inc_total_datatype_length_MAX  = CAST(lng.included_column_MAX AS BIT)
      ,key_total_datatype_length_bytes   = lng.key_column_width
      ,inc_total_datatype_length_bytes   = lng.included_column_width
      -----------------------------------------------------------------------------------------------------
      -- row_CNT is not maintained in sys.dm_db_partition_stats for in memory (XTP) objects
      -----------------------------------------------------------------------------------------------------
      ,row_CNT                           = CASE WHEN ISNULL(ps.row_CNT,0) = 0 THEN tgt.row_CNT ELSE ps.row_CNT END
      -----------------------------------------------------------------------------------------------------
      ,partition_CNT                     = COALESCE(ps.partition_CNT             ,0)  -- <FUTURE> can get from data_spaces.fanout
      ,used_page_PG_CNT                  = COALESCE(ps.used_page_CNT             ,0)
      ,in_row_data_page_PG_CNT           = COALESCE(ps.in_row_data_page          ,0)
      ,in_row_used_page_PG_CNT           = COALESCE(ps.in_row_used_page          ,0)
      ,in_row_reserved_page_PG_CNT       = COALESCE(ps.in_row_reserved_page      ,0)
      ,lob_used_page_PG_CNT              = COALESCE(ps.lob_used_page             ,0)
      ,lob_reserved_page_PG_CNT          = COALESCE(ps.lob_reserved_page         ,0)
      ,row_overflow_used_page_PG_CNT     = COALESCE(ps.row_overflow_used_page    ,0)
      ,row_overflow_reserved_page_PG_CNT = COALESCE(ps.row_overflow_reserved_page,0)
      ,reserved_page_PG_CNT              = COALESCE(ps.reserved_page             ,0)

  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I') AS tgt     -- index level composite record

  LEFT OUTER -- LEFT OUTER required since HEAPS have no columns and get excluded from subquery
  JOIN (-- Index sizes and counts
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,ic.sub_type
              --------------------------------------------------------------------------------------
              ,key_column_MAX        = MAX(IIF(ic.is_included_column = 0 AND ac.max_length = -1,1,0))
              ,included_column_MAX   = MAX(IIF(ic.is_included_column = 1 AND ac.max_length = -1,1,0))
              ,total_width_MAX       = MAX(IIF(ac.max_length = -1,1,0))
              --------------------------------------------------------------------------------------
              ,key_column_width      = SUM(IIF(ic.is_included_column = 0
                                              ,CASE WHEN ac.average_length >  0.0 THEN ac.average_length
                                                    WHEN ac.max_length     = -1   THEN 0
                                                    ELSE                               COALESCE(ac.max_length_unicode,ac.max_length)
                                               END
                                              ,0)
                                          )
              ,included_column_width = SUM(IIF(ic.is_included_column = 1
                                              ,IIF(ac.average_length > 0
                                                  ,ac.average_length
                                                  ,COALESCE(ac.max_length_unicode,ac.max_length))
                                              ,0)
                                          )
              ,total_width           = SUM(IIF(ac.average_length > 0,ac.average_length,COALESCE(ac.max_length_unicode,ac.max_length)))
              --------------------------------------------------------------------------------------
              ,key_ordinal_CNT       = MAX(ic.key_ordinal)
              ,included_columns_CNT  = SUM(IIF(ic.is_included_column = 1,1,0))
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_columns]       AS ac
            ON ic.database_id = ac.database_id
           AND ic.object_id   = ac.object_id
           AND ic.column_id   = ac.column_id
         WHERE 1 = 1    -- simplifies adding additional clauses for testing
           AND ic.type NOT IN (N'0' -- rowstore heap
                              ,N'5' -- clustered columnstore
                              ,N'6' -- nonclustered columnstore
                              )
         GROUP BY
               ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,ic.sub_type
       ) AS lng
    ON tgt.database_id = lng.database_id
   AND tgt.object_id   = lng.object_id
   AND tgt.index_id    = lng.index_id
   AND tgt.type        = lng.type
   AND tgt.sub_type    = lng.sub_type

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_partition_stats] AS ps
    ON tgt.database_id = ps.database_id
   AND tgt.object_id   = ps.object_id
   AND tgt.index_id    = ps.index_id
   AND tgt.type   NOT IN (-- avoid "indexes" with IDs that could match up with physical index partitions
                          N'T'  -- full-text index of a tabular object
                         ,N'F'  -- foreign key constraint
                         ,N'M'  -- missing nonclustered rowstore index
                         )

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update index size & count attributes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] row count for foreign keys. Use rowcount from base object (heap, clustering index)
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       row_CNT = ps.row_CNT
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE type = N'F') AS tgt -- foreign key constraint

  JOIN (-- physical table representation to get row counts below
        SELECT database_id,object_id,index_id
          FROM [##SQLXL_Index_sys_indexes]
         WHERE type IN (N'0'   -- rowstore Heap
                       ,N'1'   -- clustered rowstore index
                       ,N'5'   -- clustered columnstore
                       )
       ) AS tbl
    ON tgt.database_id = tbl.database_id
   AND tgt.object_id   = tbl.object_id

  JOIN [##SQLXL_Index_sys_dm_db_partition_stats] AS ps
    ON tgt.database_id = ps.database_id
   AND tgt.object_id   = ps.object_id
   AND tbl.index_id    = ps.index_id

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update foreign key constraint table row counts'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Update index statistics',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] index statistics
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
      -- [sys].[stats] ----------------------------------------------------------
       stats_id                         = src.stats_id
      ,stats_name                       = QUOTENAME(tgt.idx_type_hdr) + IIF(src.name IS NOT NULL,N' ' + src.name,N' N/A')
      ,stats_user_created               = src.user_created
      ,stats_auto_created               = src.auto_created
      ,stats_no_recompute               = src.no_recompute
      ,stats_has_filter                 = src.has_filter
      ,stats_filter_definition          = src.filter_definition
      ,stats_is_temporary               = COALESCE(src.is_temporary        ,0)
      ,stats_is_incremental             = COALESCE(src.is_incremental      ,0)
      ,stats_has_persisted_sample       = COALESCE(src.has_persisted_sample,0)
      ,stats_generation_method          = src.stats_generation_method
      ,stats_generation_method_desc     = src.stats_generation_method_desc
      -- [sys].[ShowStatistics_statheader] --------------------------------------
      ,stathdr_updated                  = sssh.updated
      ,stathdr_row_CNT                  = COALESCE(sssh.Rows              ,0.0)
      ,stathdr_rows_sampled_CNT         = COALESCE(sssh.rows_sampled      ,0.0)
      ,stathdr_steps                    = COALESCE(sssh.steps             ,0.0)
      ,stathdr_density                  = COALESCE(sssh.density           ,0.0)
      ,stathdr_average_key_length       = COALESCE(sssh.average_key_length,0.0)
      ,stathdr_string_index             = sssh.string_index
      ,stathdr_filter_expression        = sssh.filter_expression
      ,stathdr_unfiltered_rows          = COALESCE(sssh.unfiltered_rows         ,0)
      ,stathdr_Persisted_Sample_Percent = COALESCE(sssh.Persisted_Sample_Percent,0)
      ,stathdr_statistics_age_days      = COALESCE(sssh.statistics_age_days     ,0)
      -- [sys].[ShowStatistics_histogram_summary] -------------------------------
      ,stathist_range_rows_LO           = COALESCE(sshs.min_rows_per_value,0)
      ,stathist_range_rows_HI           = COALESCE(sshs.max_rows_per_value,0)
      ,stathist_null_rows               = COALESCE(sshs.null_rows         ,0)
      ,stathist_param_sniff             = COALESCE(sshs.param_sniff       ,0)
      -- [sys].[dm_db_stats_properties], [sys].[dm_db_incremental_stats_properties] --
      ,stats_prop_modification_CNT      = COALESCE(dsp.modification_counter,dip.modification_counter,0)
      ,stats_prop_last_updated          = COALESCE(dsp.last_updated,dip.last_updated)
      ,stats_prop_updated_days_ago      = COALESCE(dsp.updated_days_ago,dip.updated_days_ago)
/*** LOCAL TESTING ***
SELECT *
--*/
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX)
         WHERE rec_type  = N'I'
           AND type     <> N'M'
       ) AS tgt  -- index-level composite records

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_stats]                     AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
   AND tgt.index_id    = src.stats_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_showstatistics_statheader] AS sssh
    ON tgt.database_id = sssh.database_id
   AND tgt.object_id   = sssh.object_id
   AND tgt.index_id    = sssh.index_id
   AND tgt.type        = sssh.type
   AND tgt.sub_type    = sssh.sub_type

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_showstatistics_histogram_summary] AS sshs
    ON tgt.database_id = sshs.database_id
   AND tgt.object_id   = sshs.object_id
   AND tgt.index_id    = sshs.index_id
   AND tgt.type        = sshs.type
   AND tgt.sub_type    = sshs.sub_type

  LEFT OUTER
  JOIN (-- sum up all of the modifications to this index
        SELECT database_id,object_id
              ,stats_id
              ,modification_counter = SUM(COALESCE(modification_counter,0))
              ,last_updated         = MAX(last_updated)
              ,updated_days_ago     = MIN(updated_days_ago)
          FROM [##SQLXL_Index_sys_dm_db_stats_properties]
         GROUP BY
               database_id,object_id
              ,stats_id
       ) AS dsp
    ON tgt.database_id = dsp.database_id
   AND tgt.object_id   = dsp.object_id
   AND tgt.index_id    = dsp.stats_id

  LEFT OUTER
  JOIN (-- Sum up incremental statistics across partitions for this index
        -- introduced in 2014 (12.x) SP2 and 2016 (13.x) SP1
        SELECT database_id,object_id
              ,stats_id
              ,modification_counter = SUM(COALESCE(modification_counter,0))
              ,last_updated         = MAX(last_updated)
              ,updated_days_ago     = MIN(updated_days_ago)
          FROM [##SQLXL_Index_sys_dm_db_incremental_stats_properties]
         GROUP BY
               database_id,object_id
              ,stats_id
       ) AS dip
    ON tgt.database_id = dip.database_id
   AND tgt.object_id   = dip.object_id
   AND tgt.index_id    = dip.stats_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update index statistics'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] key_element_uniqueness, index column, statistics, uniqueness, compression
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
      --<FUTURE> add to IDX table
       key_element_uniqueness  = COALESCE(STUFF(un.uniq,1,1,N''),NULL)

      --<FUTURE> add to IDX table
      ,lead_element_uniqueness = (-- get statistics from lead key column in index
                                  SELECT TOP (1)
                                         COALESCE(icol.stat_uniqueness,icol.col_uniqueness)
                                    FROM [##SQLXL_Index_sys_index_columns] AS icol
                                   WHERE tgt.type   NOT IN (N'0',N'3',N'4',N'5',N'6',N'9')
                                     AND tgt.database_id = icol.database_id
                                     AND tgt.object_id   = icol.object_id
                                     AND tgt.index_id    = icol.index_id
                                     AND tgt.type        = icol.type
                                     AND 0               = icol.is_included_column
                                     AND 1               = icol.key_ordinal
                                   ORDER BY
                                         icol.idx_column_display_sequence
                                 )
      --<FUTURE> add to IDX table, key_element_uniqueness, use to identify opportunities to shorten keys
      ,key_element_length      = STUFF((-- create concatetnated list of increasing total key lengths by key element
                                        SELECT CHAR(096) + [dbo].[SQLXL_3SD](ssdv.average_length,N'N')
                                          FROM [##SQLXL_Index_sys_showstatistics_densityvector] ssdv
                                         WHERE tgt.database_id = ssdv.database_id
                                           AND tgt.object_id   = ssdv.object_id
                                           AND tgt.index_id    = ssdv.index_id
                                           AND tgt.type        = ssdv.type
                                           AND tgt.sub_type    = ssdv.sub_type
                                         ORDER BY ssdv.row_ID
                                           FOR XML PATH (N''), TYPE                                 -- incremental growing key lengths
                                       ).value('.',N'NVARCHAR(MAX)')
                                      ,1,1,N'') -- end of STUFF function
     ---------------------------------------------------------------------------------------------------------------------------------------
                       -- index level list of all key columns
      ,key_column_info = STUFF(
                               CASE WHEN N'CDC' = obj.schema_name
                                     AND tgt.name LIKE N'fn_cdc_get_%'          -- Exclude Change Data Capture (CDC) functions
                                    THEN CHAR(096) + N'<CDC>'
                                         COLLATE Latin1_General_100_CI_AI
                                    --------------------------------------------------------------------------------------------------------
                                    WHEN tgt.type = N'0'                        -- rowstore Heap
                                    THEN  CHAR(096)
                                        + CASE WHEN obj.is_memory_optimized = 1
                                               THEN N'<XTP HEAP>'
                                               WHEN obj.type = N'U'         -- User Table
                                               THEN COALESCE( N'<HEAP> Candidate Clustered Unique ordered column:'
                                                            + CHAR(096)
                                                            + (-- If unique ordered column found show it here
                                                               SELECT xic.column_descriptors
                                                                 FROM [##SQLXL_Index_sys_columns] AS xic
                                                                WHERE tgt.database_id                   = xic.database_id
                                                                  AND tgt.object_id                     = xic.object_id
                                                                  AND tgt.tbl_cx_uniq_ordered_column_id = xic.column_id
                                                              )
                                                            ,N'<HEAP> Candidate clustering column:'
                                                            + CHAR(096)
                                                            + (-- If no Unique Ordered column found, look for next best candidate
                                                               SELECT TOP (1)
                                                                      xic.column_descriptors
                                                                 FROM [##SQLXL_Index_sys_columns] AS xic
                                                                WHERE tgt.database_id = xic.database_id
                                                                  AND tgt.object_id   = xic.object_id
                                                                  AND xic.Uniqueness  < 1.1
                                                                  AND xic.system_type_name NOT LIKE N'%DATE%'
                                                                ORDER BY
                                                                      xic.uniqueness * COALESCE(xic.average_length,xic.max_length)
                                                              )
                                                            ,N'<HEAP> No candidate clustering column')
                                              WHEN obj.type = N'V' -- View
                                              THEN N'<Unindexed View>'
                                              ELSE N'<Unordered table-valued function>'
                                          END
                                         COLLATE Latin1_General_100_CI_AI
                                    --------------------------------------------------------------------------------------------------------
                                    WHEN tgt.type IN (N'5'  -- clustered columnstore
                                                     ,N'6'  -- nonclustered columnstore
                                                     )
                                    THEN  CHAR(096) + QUOTENAME(tgt.type_desc)
                                        + COALESCE( CHAR(096)
                                                  + (-- flag partitioning column
                                                     SELECT TOP (1)
                                                             COALESCE(ip.column_descriptors,N'')
                                                           + COALESCE(N' ' + ip.column_display_suffix,N'')
                                                      FROM [##SQLXL_Index_sys_index_columns] AS ip
                                                     WHERE tgt.database_id = ip.database_id
                                                       AND tgt.object_id   = ip.object_id
                                                       AND tgt.index_id    = ip.index_id
                                                       AND tgt.type        = ip.type
                                                       AND ip.column_display_suffix LIKE N'PART%'
                                                     ORDER BY
                                                           ip.column_id
                                                    )
                                                  ,N'')
                                         COLLATE Latin1_General_100_CI_AI
                                    --------------------------------------------------------------------------------------------------------
                                        + CASE WHEN tgt.type = N'6' -- nonclustered columnstore
                                               THEN COALESCE((-- add clustering index key(s) to columnstore columns
                                                              SELECT CHAR(096)
                                                                    + COALESCE(ip.column_descriptors,N'')
                                                                    + COALESCE(N' ' + ip.column_display_suffix,N'')
                                                                 FROM [##SQLXL_Index_sys_index_columns] AS ip
                                                                WHERE tgt.database_id = ip.database_id
                                                                  AND tgt.object_id   = ip.object_id
                                                                  AND tgt.index_id    = ip.index_id
                                                                  AND tgt.type        = ip.type
                                                                  AND ip.idx_stats_uniqueness_prefix = N'CX' -- added clustered column keys
                                                                ORDER BY
                                                                      ip.idx_column_display_sequence
                                                                  FOR XML PATH(N''), TYPE           -- column_descriptors
                                                             ).value('.',N'NVARCHAR(MAX)')
                                                            ,N'')
                                               ELSE N''
                                          END
                                         COLLATE Latin1_General_100_CI_AI
                                    --------------------------------------------------------------------------------------------------------
                                    ELSE (-- all other index types and cases
                                          SELECT  CHAR(096)
                                                  -- clustered index, don't include Stats steps  since it's not useful
                                                + CASE WHEN tgt.type = N'1'                       -- clustered rowstore index
                                                        AND CHARINDEX(N'STP(',icol.column_descriptors) > 0
                                                       THEN LEFT(icol.column_descriptors,CHARINDEX(N'STP(',icol.column_descriptors) - 2)
                                                       ELSE COALESCE(icol.column_descriptors,N'')
                                                  END
                                                + IIF(LEN(icol.column_display_suffix) > 0,icol.column_display_suffix,N'')
                                            FROM [##SQLXL_Index_sys_index_columns] AS icol
                                           WHERE tgt.database_id = icol.database_id
                                             AND tgt.object_id   = icol.object_id
                                             AND tgt.index_id    = icol.index_id
                                             AND tgt.type        = icol.type
                                             AND 0               = icol.is_included_column
                                           ORDER BY
                                                 IIF(icol.idx_column_display_sequence = 0,9999,icol.idx_column_display_sequence)
                                             FOR XML PATH(N''), TYPE                                -- column_descriptors
                                         ).value('.',N'NVARCHAR(MAX)')
                                         COLLATE Latin1_General_100_CI_AI
                               END
                              ,1,1,N'') -- end of STUFF function
     ---------------------------------------------------------------------------------------------------------------------------------------
      ,Included_column_info = CASE tgt.type
                                   WHEN N'5'             -- Clustered Column Store
                                   THEN N'<All Columns>' -- CHAR(096) included with concatenation of KEY & INCLUDED in PRESENT.SQL
                                   WHEN N'6'             -- nonclustered columnstore index
                                   THEN (-- Nonclustered Column Store
                                         SELECT COALESCE( N'-- Eligible Table Columns to Add ---------------'
                                                        + (-- concatenated list of candidate columns to add to nonclustered columnstore
                                                           SELECT  CHAR(096)
                                                                 + ac.column_descriptors
                                                                    -- flag key columns used in other indexes not already in columnstore
                                                                 + IIF(ic.column_id IS NOT NULL
                                                                      ,N' <IDXKEY>'
                                                                      ,N'')
                                                            FROM (-- eligible columns for Nonclustered Column Store
                                                                  SELECT c.column_id
                                                                    FROM [##SQLXL_Index_sys_columns] AS c
                                                                   WHERE tgt.database_id = c.database_id
                                                                     AND tgt.object_id   = c.object_id
                                                                     AND 1               = c.is_columnstore_eligible
                                                                  EXCEPT -- table columns already in Nonclustered Column Store
                                                                  SELECT ic.column_id
                                                                    FROM [##SQLXL_Index_sys_index_columns] AS ic
                                                                   WHERE tgt.database_id = ic.database_id
                                                                     AND tgt.object_id   = ic.object_id
                                                                     AND tgt.index_id    = ic.index_id
                                                                     AND tgt.type        = ic.type
                                                                 ) AS c
                                                            JOIN [##SQLXL_Index_sys_columns] AS ac
                                                              ON tgt.database_id = ac.database_id
                                                             AND tgt.object_id   = ac.object_id
                                                             AND c.column_id     = ac.column_id
                                                            LEFT OUTER
                                                            JOIN (-- index & foreign key key columns
                                                                  SELECT ic.column_id
                                                                    FROM [##SQLXL_Index_sys_index_columns] AS ic
                                                                   WHERE tgt.database_id = ic.database_id
                                                                     AND tgt.object_id   = ic.object_id
                                                                     AND 0               = ic.is_included_column
                                                                   GROUP BY
                                                                         ic.column_id
                                                                 ) AS ic
                                                              ON c.column_id = ic.column_id
                                                           ORDER BY
                                                                 ac.name
                                                             FOR XML PATH(N''), TYPE                -- column_descriptors
                                                          ).value('.',N'NVARCHAR(MAX)')
                                                        ,N'<All Columns>')
                                        )
                                   WHEN N'F'  -- foreign key constraint
                                   THEN N''   -- No included columns for Foreign Key Constraints
                                   ELSE STUFF(--  Strip off leading unnecessary characters
                                              (-- list of included columns
                                               SELECT CHAR(096)
                                                       -- clustered index, don't include Stats steps since it's not typically useful
                                                     + CASE WHEN tgt.type = N'1' -- clustered rowstore index
                                                             AND CHARINDEX(N'STP(',icol.column_descriptors) > 0
                                                           THEN LEFT(icol.column_descriptors
                                                                    ,CHARINDEX(N'STP(',icol.column_descriptors)-2)
                                                           ELSE COALESCE(icol.column_descriptors,N'')
                                                       END
                                                     + IIF(LEN(icol.column_display_suffix) > 0,icol.column_display_suffix,N'')
                                                 FROM [##SQLXL_Index_sys_index_columns] AS icol
                                                WHERE tgt.database_id = icol.database_id
                                                  AND tgt.object_id   = icol.object_id
                                                  AND tgt.index_id    = icol.index_id
                                                  AND tgt.type        = icol.type
                                                  AND 1               = icol.is_included_column
                                                ORDER BY
                                                      icol.idx_column_display_sequence
                                                  FOR XML PATH(N''), TYPE                           -- column_descriptors
                                              ).value('.',N'NVARCHAR(MAX)')
                                             ,1,1,N'') -- end of STUFF function
                              END
     ---------------------------------------------------------------------------------------------------------------------------------------
      --<FUTURE> add to IDX table
      ,row_CNT                                    = COALESCE(p.rows         ,0)
      ,partition_none_compress_CNT                = COALESCE(p.none_comp    ,0)
      ,partition_row_compress_CNT                 = COALESCE(p.row_comp     ,0)
      ,partition_page_compress_CNT                = COALESCE(p.page_comp    ,0)
      ,partition_columnstore_compress_CNT         = COALESCE(p.colstore_comp,0)
      ,partition_columnstore_archive_compress_CNT = COALESCE(p.colstore_arch,0)
      ,partition_xml_compress_CNT                 = COALESCE(p.xml_comp     ,0)

/*** LOCAL TESTING ***
SELECT COUNT_BIG(1)
--*/
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I') AS tgt     -- index level composite record

 INNER HASH
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON tgt.database_id = obj.database_id
   AND tgt.object_id   = obj.object_id

  LEFT OUTER HASH
  JOIN (-- Get count of compressed and archived partitions
        SELECT p.database_id
              ,p.object_id
              ,p.index_id
              ,rows          = SUM(p.rows         )
              ,none_comp     = SUM(p.none_comp    )
              ,row_comp      = SUM(p.row_comp     )
              ,page_comp     = SUM(p.page_comp    )
              ,colstore_comp = SUM(p.colstore_comp)
              ,colstore_arch = SUM(p.colstore_arch)
              ,xml_comp      = SUM(p.xml_comp     )
          FROM [##SQLXL_Index_sys_partitions] AS p
         GROUP BY
               p.database_id
              ,p.object_id
              ,p.index_id
       ) AS p
    ON tgt.database_id = p.database_id
   AND tgt.object_id   = p.object_id
   AND tgt.index_id    = p.index_id
   AND tgt.type   NOT IN (-- avoid "indexes" with IDs that could match up with physical index partitions
                          N'F'  -- foreign key constraint
                         ,N'M'  -- missing nonclustered rowstore index
                         )
 OUTER
 APPLY (-- Assemble index uniqueness statistics
        SELECT (-- double select to accomodate .value('.',N'NVARCHAR(MAX)') below
                SELECT  CHAR(096)
                      + IIF(ucol.partition_ordinal > 0, N' PTN',N'') -- add indicator showing partitioning column
                      + IIF(tgt.has_filter         = 1, N' FLT',N'') -- add indicator showing uniqueness values are on filtered index
                      + COALESCE(ucol.idx_stats_uniqueness_prefix,N'')
                      + COALESCE(N' ' + ucol.idx_uniqueness_3sd,N'')
                      + CASE WHEN ucol.all_density > 0.0
                             THEN N' (' + [dbo].[SQLXL_3SD](ucol.all_density,N'%') + N')'
                             WHEN ucol.col_uniqueness > 0.0 AND COALESCE(i.stathdr_row_CNT,i.row_CNT) > 0
                             THEN N' (' + [dbo].[SQLXL_3SD](1.0 * ucol.col_uniqueness
                                                                / COALESCE(i.stathdr_row_CNT,i.row_CNT)
                                                           ,N'%') + N')'
                            ELSE N'(N/A)'
                        END

                  FROM [##SQLXL_Index_sys_index_columns] AS ucol

                  JOIN [##SQLXL_Index_compilation] AS i     -- get parent row count from HEAP, CLUSTERED, or clustered Columnstore index
                    ON i.type IN (N'0'                      -- rowstore heap
                                 ,N'1'                      -- clustered rowstore index
                                 ,N'5'                      -- Clustered columnstore
                                 )
                   AND ucol.database_id = i.database_id
                   AND ucol.object_id   = i.object_id

                 WHERE tgt.database_id  = ucol.database_id
                   AND tgt.object_id    = ucol.object_id
                   AND tgt.index_id     = ucol.index_id
                   AND tgt.type         = ucol.type
                   AND tgt.sub_type     = ucol.sub_type
                   AND 0                = ucol.is_included_column                                   -- index key columns only
                 ORDER BY
                       ucol.idx_column_display_sequence
                   FOR XML PATH(N''), TYPE                                                          -- column_descriptors
               ).value('.',N'NVARCHAR(MAX)')
       ) AS un(uniq)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update index column statistics and attributes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] columns with attributes Unique, Ordered IDs - Identity, Sequence, GUID, Sequence GUID
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,c.UNQ,c.column_id,ncx.index_id,
--*/
       tbl_cx_uniq_ordered_column_TYP       = c.UNQ
      ,tbl_cx_uniq_ordered_column_id        = c.column_id
      ,tbl_smallest_uniq_Nonclustered_idx   = ncx.index_id
  FROM (-- underlying user table physical storage types
        SELECT *
          FROM [##SQLXL_Index_compilation] WITH (TABLOCKX)
         WHERE type IN (N'0' -- rowstore heap
                       ,N'1' -- clustered rowstore index
                       ,N'5' -- clustered columnstore
                       )
       ) AS tgt -- [##SQLXL_Index_compilation]

  LEFT OUTER
  JOIN (-- find all tables with columns that are unique/incrementing
        SELECT c.database_id
              ,c.object_id
              ,c.column_id
              ,UNQ = CASE WHEN c.is_identity      = 1                      THEN N'IDN'
                          WHEN c.seq_object_id    > 0                      THEN N'SEQ'
                          WHEN def_con.definition = N'(newsequentialid())' THEN N'SUID'
                          WHEN def_con.definition = N'(newid())'           THEN N'NUID'
                          ELSE N''
                     END
              ,rn = ROW_NUMBER() OVER (PARTITION BY c.database_id
                                                   ,c.object_id
                                           ORDER BY c.max_length          -- smallest one first if more than one
                                                   ,c.is_identity   DESC
                                                   ,c.seq_object_id DESC
                                                   ,def_con.definition    -- for NUID & SUID
                                      )
          FROM [##SQLXL_Index_sys_columns] AS c
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_objects] AS def_con -- default objects
            ON c.database_id       = def_con.database_id
           AND c.default_object_id = def_con.object_id
         WHERE (   c.is_identity      = 1
                OR c.seq_object_id    > 0
                OR def_con.definition = N'(newsequentialid())'
                OR def_con.definition = N'(newid())'
               )
       ) AS c
    ON tgt.database_id = c.database_id
   AND tgt.object_id   = c.object_id
   AND 1               = c.rn

  LEFT OUTER
  JOIN (-- find smallest unique index to replace heap
        SELECT i.database_id
              ,i.object_id
              ,i.index_id
              ,rn = ROW_NUMBER() OVER (PARTITION BY i.database_id
                                                   ,i.object_id
                                           ORDER BY i.stathdr_average_key_length  -- smallest one first if more than one
                                                   ,i.lead_element_uniqueness     -- most uniquest first key element next
                                                   ,i.key_ordinal_CNT             -- fewest key columns
                                                   ,ius.user_total_CNT  DESC      -- most used
                                      )
          FROM (-- all nonclustered rowstore indexes with constraints
                SELECT database_id,object_id,index_id
                      ,stathdr_average_key_length
                      ,lead_element_uniqueness
                      ,key_ordinal_CNT
                  FROM [##SQLXL_Index_compilation]
                 WHERE type                       = N'2' -- nonclustered rowstore index
                   AND stathdr_average_key_length > 0    -- omits specialty index internal tables, graph objects
                   AND (   is_primary_key         = 1
                        OR is_unique_constraint   = 1
                        OR is_unique              = 1
                       )
               ) AS i
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_dm_db_index_usage_stats] AS ius
            ON i.database_id = ius.database_id
           AND i.object_id   = ius.object_id
           AND i.index_id    = ius.index_id
       ) AS ncx
    ON tgt.database_id = ncx.database_id
   AND tgt.object_id   = ncx.object_id
   AND 1               = ncx.rn
 WHERE c.object_id   IS NOT NULL
    OR ncx.object_id IS NOT NULL

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update table columns with attributes Unique, Ordered,IDs'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Update index column statistics and attributes',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Foreign Key Constraints "covered" by indexes & vice versa
 NOTE: Columnstores can't be used to cover foreign key constraint!
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.name,
--*/
       ---------------------------------------------------------------------------------------------
       -- All indexes covering this foreign key constraint
       ---------------------------------------------------------------------------------------------
       fkc_covered_by_idx_IDS     = all_covering_indexes.index_id  -- list of all indexes covering this Foreign Key Constraint
       ---------------------------------------------------------------------------------------------
       -- "Best" index covering this foreign key constraint
       ---------------------------------------------------------------------------------------------
      ,fkc_best_covering_idx_name = best_covering_index.name     -- name of the "primary" (smallest) index covering the foreign key constraint
      ,fkc_best_covering_idx_ID   = best_covering_index.index_id -- id of the "primary" (smallest)index covering the foreign key constraint
      ,fkc_best_covering_idx_type = best_covering_index.type     -- type of the "primary" (smallest)index covering the foreign key constraint
       ---------------------------------------------------------------------------------------------
       -- All Foreign Key Constraints covered by this index
       ---------------------------------------------------------------------------------------------
      ,covers_fkc_IDs            = covers_fkc.index_id

  FROM (-- get all rowstore indexes and Foreign Key Constraints
        SELECT *
          FROM [##SQLXL_Index_compilation] WITH (TABLOCKX)
         WHERE type IN (N'1' -- clustered rowstore index
                       ,N'2' -- nonclustered rowstore index
                       ,N'F' -- foreign key constraint
                       )     -- NOTE: Columnstores can't be used to cover foreign key constraint!
       ) AS tgt -- [##SQLXL_Index_compilation]

 OUTER APPLY
       (-- Find single "best" non-filtered rowstore index to cover Foreign Key constraints column(s)
        -- Choose clustered over Nonclustered, most readest, most narrowest, fewest key columns, and narrowest included columns
        -- NOTE: Columnstores can't be used to cover foreign key constraint!
        SELECT TOP (1)
               *
          FROM [##SQLXL_Index_compilation] AS i
         WHERE i.type         IN (N'1'                            -- clustered rowstore index
                                 ,N'2'                            -- nonclustered rowstore index
                                 )                                -- NOTE: Columnstores can't be used to cover foreign key constraint!
           AND i.has_filter    = 0                                -- can't be filtered since won't cover the whole key
           AND tgt.database_id = i.database_id
           AND tgt.object_id   = i.object_id
           AND tgt.type        = N'F'                             -- foreign key constraint
           AND CHARINDEX(tgt.key_column_ids,i.key_column_ids) = 1 -- matching comma separated key ordered list of column_ids
         ORDER BY
               i.type                                  -- use clustered if found
              ,i.is_primary_key                   DESC -- Primary Key
              ,i.is_unique_constraint             DESC -- is a CONSTRAINT
              ,i.is_unique                        DESC -- is UNIQUE
              ,i.ius_user_read_CNT                DESC -- most read
              ,i.is_key_total_datatype_length_MAX      -- does this have a MAX WIDTH column
              ,i.stathdr_average_key_length            -- smallest length measured by statistics
              ,i.key_total_datatype_length_bytes       -- narrowest key
              ,i.key_ordinal_CNT                       -- fewest key elements
              ,i.is_inc_total_datatype_length_MAX      -- does this have a MAX WIDTH column
              ,i.inc_total_datatype_length_bytes       -- shortest included columns
              ,i.index_id                              -- tie breaker
       ) best_covering_index

 OUTER APPLY
       (-- Find all other non-filtered indexes covering all Foreign Key Constraint column(s)
        -- Ordered: clustered over Nonclustered, most readest, most narrowest, fewest key columns, and narrowest included columns
        -- NOTE: Columnstores can't be used to cover foreign key constraint!
        SELECT -- double select needed for XML .VALUE clause below
               STUFF(
                     (--
                      SELECT TOP (100) PERCENT
                             N',' + QUOTENAME(i.index_id)
                        FROM [##SQLXL_Index_compilation] AS i
                       WHERE i.type          IN (N'1'              -- clustered rowstore index
                                                ,N'2'              -- nonclustered rowstore index
                                                )                  -- NOTE: Columnstores can't be used to cover foreign key constraint!
                         AND i.has_filter    = 0                   -- can't be filtered since won't cover the whole key
                         AND tgt.database_id = i.database_id
                         AND tgt.object_id   = i.object_id
                         AND tgt.type        = N'F'                -- foreign key constraint
                         AND CHARINDEX(tgt.key_column_ids,i.key_column_ids) = 1 -- matching comma separated key ordered list of column_ids
                      ORDER BY
                            i.type                                  -- use clustered if found
                           ,i.is_primary_key                   DESC -- Primary Key
                           ,i.is_unique_constraint             DESC -- is a CONSTRAINT
                           ,i.is_unique                        DESC -- is UNIQUE
                           ,i.ius_user_read_CNT                DESC -- most read
                           ,i.is_key_total_datatype_length_MAX      -- does this have a MAX WIDTH column
                           ,i.stathdr_average_key_length            -- smallest length measured by statistics
                           ,i.key_total_datatype_length_bytes       -- narrowest key
                           ,i.key_ordinal_CNT                       -- fewest key elements
                           ,i.is_inc_total_datatype_length_MAX      -- does this have a MAX WIDTH column
                           ,i.inc_total_datatype_length_bytes       -- shortest included columns
                           ,i.index_id                              -- tie breaker
                         FOR XML PATH(N''), TYPE                                                    -- index_id
                     ).value('.',N'NVARCHAR(MAX)')
                    ,1,1,N'')
       ) all_covering_indexes(index_id)

 OUTER APPLY
       (-- get list of Foreign Key Constraints covered by the index
        -- NOTE: Columnstores can't be used to cover foreign key constraint!
        SELECT STUFF((-- double select needed for XML .VALUE clause below
                      SELECT TOP (100) PERCENT
                             N',' + QUOTENAME(i.object_id)
                        FROM [##SQLXL_Index_compilation] AS i
                       WHERE i.type          = N'F'                             -- foreign key constraint
                         AND tgt.database_id = i.database_id
                         AND tgt.object_id   = i.object_id
                         AND tgt.type       IN (N'1'                            -- clustered rowstore index
                                               ,N'2'                            -- nonclustered rowstore index
                                               )                                -- NOTE: Columnstores can't be used to cover foreign key constraint!
                         AND tgt.has_filter  = 0                                -- can't be filtered since won't cover the whole key
                         AND CHARINDEX(i.key_column_ids,tgt.key_column_ids) = 1 -- matching comma separated key ordered list of column_ids
                       ORDER BY
                             i.object_id
                         FOR XML PATH(N''), TYPE                                                    -- object_id
                     ).value('.',N'NVARCHAR(MAX)')
                    ,1,1,N'')
       ) covers_fkc(index_id)

 -- only update records with indexes covering foreign key constraints and foreign key constraints covered by indexes
 WHERE best_covering_index.index_id  IS NOT NULL
    OR all_covering_indexes.index_id IS NOT NULL
    OR covers_fkc.index_id           IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Parent "Referred" Foreign Key Constraints "covered" by indexes and vice-versa'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Update Foreign Key Constraints "covered" by indexes & vice versa',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;


/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] index lead element
-- Only rowstore indexes
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       lead_element_column_id           = src.lead_element_column_id
--    ,lead_element_uniqueness          = src.lead_element_uniqueness -- computed above
      ,lead_element_Max_Len             = COALESCE(src.lead_element_Max_Len,0)
      ,lead_element_Data_Type           = src.lead_element_Data_Type
      ,lead_element_is_Identity         = src.lead_element_is_Identity
      ,lead_element_is_Sequence         = src.lead_element_is_Sequence
      ,lead_element_is_newsequentialid  = src.lead_element_is_newsequentialid
      ,lead_element_is_newid            = src.lead_element_is_newid
      ,lead_element_is_Nullable         = src.lead_element_is_Nullable

  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I' ) AS tgt -- index level composite record

  JOIN (--
        SELECT database_id                     = ic.database_id
              ,object_id                       = ic.object_id
              ,index_id                        = ic.index_id
              ,type                            = ic.type
              ,lead_element_Max_Len            = sc.max_length
              ,lead_element_Data_Type          = sc.system_type_name
              ,lead_element_column_id          = ic.column_id
              ,lead_element_is_Identity        = sc.is_identity
              ,lead_element_is_Sequence        = sc.is_sequence
              ,lead_element_is_newsequentialid = IIF(sc.is_newid           = 1,1,0)
              ,lead_element_is_newid           = IIF(sc.is_newsequentialid = 1,1,0)
              ,lead_element_is_Nullable        = sc.is_nullable
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_columns]       AS sc
            ON ic.database_id  = sc.database_id
           AND ic.object_id    = sc.object_id
               -- No object_id column in XL_IDX_column
           AND ic.column_id    = sc.column_id
         WHERE ic.type IN (N'1' -- clustered rowstore index
                          ,N'2' -- nonclustered rowstore index
                          )
           AND ic.idx_column_display_sequence = 1
       ) AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
   AND tgt.index_id    = src.index_id
   AND tgt.type        = src.type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update index lead key element'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] metrics - Usage, Operational, missing index, row GROUP operations, InMemory, ColumnStore
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_index_usage_stats], [sys].[dm_db_missing_index_details]
      -------------------------------------------------------------------------------------------------------------------------------------
       ius_user_total_CNT          = COALESCE(ius.user_total_CNT,mix.user_seeks + mix.user_scans,0)
                                   -- NOTE: writes not captured for missing indexes
      ,ius_user_read_CNT           = COALESCE(mix.user_seeks + mix.user_scans,ius.user_read_CNT,0)
      ----------------------------------------------------------------------------------------------
      ,ius_user_seeks_CNT          = COALESCE(mix.user_seeks     ,0)
                                   + COALESCE(ius.user_seeks     ,0)
      ,ius_user_scans_CNT          = COALESCE(mix.user_scans     ,0)
                                   + COALESCE(ius.user_scans     ,0)
      ,ius_user_lookups_CNT        = IIF(tgt.type = N'M'    -- missing nonclustered rowstore index
                                        ,NULL
                                        ,COALESCE(ius.user_lookups,0))
      ----------------------------------------------------------------------------------------------
      -- missing nonclustered rowstore index metric elements
      ,ius_user_updates_CNT        = IIF(tgt.type = N'M',0,COALESCE(ius.user_updates,0))              -- no missing index updates captured
      ,ius_system_seeks_CNT        = IIF(tgt.type = N'M'                                              -- missing nonclustered rowstore index
                                        ,COALESCE(mix.system_seeks,0)
                                        ,COALESCE(ius.system_seeks,0))
      ,ius_system_scans_CNT        = IIF(tgt.type = N'M'                                              -- missing nonclustered rowstore index
                                        ,COALESCE(mix.system_scans,0)
                                        ,COALESCE(ius.system_scans,0))
      ,ius_system_lookups_CNT      = IIF(tgt.type = N'M',0,COALESCE(ius.system_lookups,0))            -- missing nonclustered rowstore index
      ,ius_system_updates_CNT      = IIF(tgt.type = N'M',0,COALESCE(ius.system_updates,0))            -- missing nonclustered rowstore index
      -- missing nonclustered rowstore index usage date elements. NULL values OK for Dates
      ,ius_last_user_seek_DTTM     = IIF(tgt.type = N'M',mix.last_user_seek  ,ius.last_user_seek    ) -- missing nonclustered rowstore index
      ,ius_last_user_scan_DTTM     = IIF(tgt.type = N'M',mix.last_user_scan  ,ius.last_user_scan    ) -- missing nonclustered rowstore index
      ,ius_last_user_lookup_DTTM   = IIF(tgt.type = N'M',NULL                ,ius.last_user_lookup  ) -- missing nonclustered rowstore index
      ,ius_last_user_update_DTTM   = IIF(tgt.type = N'M',NULL                ,ius.last_user_update  ) -- missing nonclustered rowstore index
      ,ius_last_system_seek_DTTM   = IIF(tgt.type = N'M',mix.last_system_seek,ius.last_system_seek  ) -- missing nonclustered rowstore index
      ,ius_last_system_scan_DTTM   = IIF(tgt.type = N'M',mix.last_system_scan,ius.last_system_scan  ) -- missing nonclustered rowstore index
      ,ius_last_system_lookup_DTTM = IIF(tgt.type = N'M',NULL                ,ius.last_system_lookup) -- missing nonclustered rowstore index
      ,ius_last_system_update_DTTM = IIF(tgt.type = N'M',NULL                ,ius.last_system_update) -- missing nonclustered rowstore index
      ---------------------------------------------------------------------------------------------
      ,ius_last_read_days_ago   = DATEDIFF(DAY,(--
                                                SELECT TOP (1) dt
                                                  FROM (VALUES (mix.last_user_seek)
                                                              ,(mix.last_user_scan)
                                                              ,(ius.last_user_seek)
                                                              ,(ius.last_user_scan)
                                                              ,(ius.last_user_lookup)
                                                              ,(ius.last_user_update)
                                                       ) AS v(dt)
                                                 ORDER BY
                                                       v.dt DESC
                                               )
                                              ,@collection_DTTM
                                          )
      ,ius_last_write_days_ago  = DATEDIFF(DAY
                                          ,ius.last_user_update
                                          ,@collection_DTTM
                                          )

      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_index_operational_stats]
      -- ios.leaf_ghost_CNT NOT INCLUDED in ops stats
      -------------------------------------------------------------------------------------------------------------------------------------
      ,ios_partition_CNT                         = COALESCE(ios.partition_CNT                ,0)
      -----------------------------------------
      --Index Leaf/Key writes -----------------
      ,ios_leaf_insert_CNT                       = COALESCE(ios.leaf_insert_CNT              ,0)
      ,ios_leaf_update_CNT                       = COALESCE(ios.leaf_update_CNT              ,0)
      ,ios_leaf_delete_CNT                       = COALESCE(ios.leaf_delete_CNT              ,0)
      ,ios_leaf_ghost_CNT                        = COALESCE(ios.leaf_ghost_CNT               ,0)
      ,ios_total_leaf_Contacts_CNT               = COALESCE(ios.leaf_insert_CNT              ,0)
                                                 + COALESCE(ios.leaf_update_CNT              ,0)
                                                 + COALESCE(ios.leaf_delete_CNT              ,0)
      --Index NonLeaf/Key writes --------------
      ,ios_nonleaf_insert_CNT                    = COALESCE(ios.nonleaf_insert_CNT           ,0)
      ,ios_nonleaf_delete_CNT                    = COALESCE(ios.nonleaf_delete_CNT           ,0)
      ,ios_nonleaf_update_CNT                    = COALESCE(ios.nonleaf_update_CNT           ,0)
      ,ios_total_nonleaf_Contacts_CNT            = COALESCE(ios.nonleaf_insert_CNT           ,0)
                                                 + COALESCE(ios.nonleaf_update_CNT           ,0)
                                                 + COALESCE(ios.nonleaf_delete_CNT           ,0)
      -----------------------------------------
      ,ios_leaf_allocation_CNT                   = COALESCE(ios.leaf_allocation_CNT          ,0)
                                                 + COALESCE(xis.page_split_CNT               ,0)
      ,ios_nonleaf_allocation_CNT                = COALESCE(ios.nonleaf_allocation_CNT       ,0)
                                                 + COALESCE(xis.key_split_CNT                ,0)
      -----------------------------------------
      ,ios_leaf_page_merge_CNT                   = COALESCE(ios.leaf_page_merge_CNT          ,0)
                                                 + COALESCE(xis.page_merge_CNT               ,0)
                                                 + COALESCE(xis.page_consolidation_CNT       ,0)
      ,ios_nonleaf_page_merge_CNT                = COALESCE(ios.nonleaf_page_merge_CNT       ,0)
                                                 + COALESCE(xis.key_merge_CNT                ,0)
      -----------------------------------------
      ,ios_range_scan_CNT                        = COALESCE(ios.range_scan_CNT               ,0) -- rolls up to TOTAL SCAN
      ,ios_singleton_lookup_CNT                  = COALESCE(ios.singleton_lookup_CNT         ,0)
      ,ios_forwarded_fetch_CNT                   = COALESCE(ios.forwarded_fetch_CNT          ,0)
      -----------------------------------------
      ,ios_lob_fetch_pages_CNT                   = COALESCE(ios.lob_fetch_in_pages           ,0)
      ,ios_lob_fetch_bytes_CNT                   = COALESCE(ios.lob_fetch_in_bytes           ,0)
      ,ios_lob_orphan_create_CNT                 = COALESCE(ios.lob_orphan_create_CNT        ,0)
      ,ios_lob_orphan_insert_CNT                 = COALESCE(ios.lob_orphan_insert_CNT        ,0)
      ,ios_row_overflow_fetch_in_pages_CNT       = COALESCE(ios.row_overflow_fetch_in_pages  ,0)
      ,ios_row_overflow_fetch_in_bytes_CNT       = COALESCE(ios.row_overflow_fetch_in_bytes  ,0)
      ,ios_column_value_push_off_row_CNT         = COALESCE(ios.column_value_push_off_row_CNT,0)
      ,ios_column_value_pull_in_row_CNT          = COALESCE(ios.column_value_pull_in_row_CNT ,0)
      -----------------------------------------
      ,ios_page_compression_attempt_CNT          = COALESCE(ios.page_compression_attempt_CNT,0)
      ,ios_page_compression_success_CNT          = COALESCE(ios.page_compression_success_CNT,0)
      ,ios_page_compression_fail_CNT             = COALESCE(ios.page_compression_attempt_CNT,0)
                                                 - COALESCE(ios.page_compression_success_CNT,0)
      -----------------------------------------
      ,ios_version_generated_off_row_CNT         = COALESCE(ios.version_generated_off_row_CNT        ,0)
      ,ios_ghost_version_inrow_CNT               = COALESCE(ios.ghost_version_inrow_CNT              ,0)
      ,ios_ghost_version_off_row_CNT             = COALESCE(ios.ghost_version_off_row_CNT            ,0)
      ,ios_insert_over_ghost_version_inrow_CNT   = COALESCE(ios.insert_over_ghost_version_inrow_CNT  ,0)
      ,ios_insert_over_ghost_version_off_row_CNT = COALESCE(ios.insert_over_ghost_version_off_row_CNT,0)

      -----------------------------------------
      ,ios_row_lock_CNT                          = COALESCE(ios.row_lock_CNT                 ,0)
      ,ios_row_lock_wait_CNT                     = COALESCE(ios.row_lock_wait_CNT            ,0)
      ,ios_row_lock_wait_MS_CNT                  = COALESCE(ios.row_lock_wait_MS             ,0)
--NOTE:ios_row_lock_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ios_page_lock_CNT                         = COALESCE(ios.page_lock_CNT     ,0)
      ,ios_page_lock_wait_CNT                    = COALESCE(ios.page_lock_wait_CNT,0)
      ,ios_page_lock_wait_MS_CNT                 = COALESCE(ios.page_lock_wait_MS ,0)
--NOTE:ios_page_lock_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ios_lock_promotion_attempt_CNT            = COALESCE(ios.lock_promotion_attempt_CNT,0)
      ,ios_lock_promotion_CNT                    = COALESCE(ios.lock_promotion_CNT        ,0)
      ,ios_lock_promotion_fail_CNT               = COALESCE(ios.lock_promotion_attempt_CNT,0)
                                                 - COALESCE(ios.lock_promotion_CNT        ,0)
      -----------------------------------------
      ,ios_page_latch_wait_CNT                   = COALESCE(ios.page_latch_wait_CNT,0)
      ,ios_page_latch_wait_MS_CNT                = COALESCE(ios.page_latch_wait_MS ,0)
--NOTE:ios_page_latch_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ios_page_io_latch_wait_CNT                = COALESCE(ios.page_io_latch_wait_CNT,0)
      ,ios_page_io_latch_wait_MS_CNT             = COALESCE(ios.page_io_latch_wait_MS ,0)
--NOTE:ios_page_io_latch_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ios_tree_page_latch_wait_CNT              = COALESCE(ios.tree_page_latch_wait_CNT,0)
      ,ios_tree_page_latch_wait_MS_CNT           = COALESCE(ios.tree_page_latch_wait_MS ,0)
--NOTE:ios_tree_page_latch_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ios_tree_page_io_latch_wait_CNT           = COALESCE(ios.tree_page_io_latch_wait_CNT,0)
      ,ios_tree_page_io_latch_wait_MS_CNT        = COALESCE(ios.tree_page_io_latch_wait_MS ,0)
--NOTE:ios_tree_page_io_latch_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      --------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_index_operational_stats] Lock & Wait Aggregates - includes ColumnStore & InMemory if found
      --------------------------------------------------------------------------------------------------------
      ,ops_total_lock_CNT                        = COALESCE(ios.row_lock_CNT       ,0)
                                                 + COALESCE(ios.page_lock_CNT      ,0)
                                                 + COALESCE(rgos.row_group_lock_CNT,0)
      -----------------------------------------
      ,ops_total_lock_wait_CNT                   = COALESCE(ios.row_lock_wait_CNT       ,0)
                                                 + COALESCE(ios.page_lock_wait_CNT      ,0)
                                                 + COALESCE(rgos.row_group_lock_wait_CNT,0)
      -----------------------------------------
      ,ops_total_lock_wait_MS_CNT                = COALESCE(ios.row_lock_wait_ms       ,0)
                                                 + COALESCE(ios.page_lock_wait_ms      ,0)
                                                 + COALESCE(rgos.row_group_lock_wait_MS,0)
      -----------------------------------------
--NOTE:ops_total_lock_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -----------------------------------------
      ,ops_total_wait_CNT                      = (  COALESCE(ios.row_lock_wait_CNT             ,0)
                                                  + COALESCE(ios.page_lock_wait_CNT            ,0)
                                                  + COALESCE(ios.page_latch_wait_CNT           ,0)
                                                  + COALESCE(ios.page_io_latch_wait_CNT        ,0)
                                                  + COALESCE(rgos.row_group_lock_wait_CNT      ,0)
                                                  -- ios.tree_page_latch_wait_CNT, ios.tree_page_io_latch_wait_CNT are subsets
                                                 )
      --------------------------------------
      ,ops_total_wait_MS_CNT                   = (  COALESCE(ios.row_lock_wait_MS          ,0)
                                                  + COALESCE(ios.page_lock_wait_MS         ,0)
                                                  + COALESCE(ios.page_latch_wait_MS        ,0)
                                                  + COALESCE(ios.page_io_latch_wait_MS     ,0)
                                                  + COALESCE(rgos.row_group_lock_wait_MS   ,0)
                                                  -- ios.tree_page_latch_wait_MS, ios.tree_page_io_latch_wait_MS are subsets
                                                 )
      --------------------------------------
--NOTE:ops_total_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_xtp_object_stats]
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_row_insert_attempts_CNT          = COALESCE(xis.row_insert_attempts         ,0)
      ,xtp_row_update_attempts_CNT          = COALESCE(xis.row_update_attempts         ,0)
      ,xtp_row_delete_attempts_CNT          = COALESCE(xis.row_delete_attempts         ,0)
      ,xtp_write_conflicts_CNT              = COALESCE(xis.write_conflicts             ,0)
      ,xtp_unique_constraint_violations_CNT = COALESCE(xis.unique_constraint_violations,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_xtp_index_stats]
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_scans_started_CNT                = COALESCE(xis.scans_started,0)
      ,xtp_scans_retries_CNT                = COALESCE(xis.scans_retries,0)                 -- rolled up to TOTAL
      ,xtp_rows_returned_CNT                = COALESCE(xis.rows_returned,0)
      ,xtp_rows_touched_CNT                 = COALESCE(xis.rows_touched ,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_xtp_nonclustered_index_stats]
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_delta_pages_CNT                  = COALESCE(xis.delta_pages                   ,0)
      ,xtp_leaf_pages_CNT                   = COALESCE(xis.leaf_pages                    ,0)
      ,xtp_page_update_CNT                  = COALESCE(xis.page_update_CNT               ,0)
      ,xtp_page_update_retry_CNT            = COALESCE(xis.page_update_retry_CNT         ,0)
      ,xtp_page_consolidation_CNT           = COALESCE(xis.page_consolidation_CNT        ,0)
      ,xtp_page_consolidation_retry_CNT     = COALESCE(xis.page_consolidation_retry_CNT  ,0)
      ,xtp_page_split_CNT                   = COALESCE(xis.page_split_CNT                ,0)
      ,xtp_page_split_retry_CNT             = COALESCE(xis.page_split_retry_CNT          ,0)
      ,xtp_key_split_CNT                    = COALESCE(xis.key_split_CNT                 ,0)
      ,xtp_key_split_retry_CNT              = COALESCE(xis.key_split_retry_CNT           ,0)
      ,xtp_page_merge_CNT                   = COALESCE(xis.page_merge_CNT                ,0)
      ,xtp_page_merge_retry_CNT             = COALESCE(xis.page_merge_retry_CNT          ,0)
      ,xtp_key_merge_CNT                    = COALESCE(xis.key_merge_CNT                 ,0)
      ,xtp_key_merge_retry_CNT              = COALESCE(xis.key_merge_retry_CNT           ,0)
      ,xtp_uses_key_normalization           = COALESCE(xis.uses_key_normalization        ,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_xtp_memory_consumers]
      -------------------------------------------------------------------------------------------------------------------------------------
      ,xtp_allocated_bytes_CNT              = COALESCE(xis.allocated_bytes ,0)
      ,xtp_used_bytes_CNT                   = COALESCE(xis.used_bytes      ,0)
      ,xtp_allocation_CNT                   = COALESCE(xis.allocation_CNT  ,0)
      -------------------------------------------------------------------------------------------------------------------------------------
      -- [sys].[dm_db_column_store_row_group_operational_stats]
      -------------------------------------------------------------------------------------------------------------------------------------
      ,cs_partition_CNT                     = COALESCE(rgos.partition_CNT          ,0) --<FUTURE> move to appropriate OPS_ value
      ,cs_row_group_CNT                     = COALESCE(rgos.row_group_CNT          ,0)
      ,cs_index_scan_CNT                    = COALESCE(rgos.index_scan_CNT         ,0)
      ,cs_scan_CNT                          = COALESCE(rgos.scan_CNT               ,0)
      ,cs_delete_buffer_scan_CNT            = COALESCE(rgos.delete_buffer_scan_CNT ,0) --<FUTURE> move to appropriate OPS_ value
      ,cs_row_group_lock_CNT                = COALESCE(rgos.row_group_lock_CNT     ,0) --<FUTURE> eliminate in favor of ops_total values
      ,cs_row_group_lock_wait_CNT           = COALESCE(rgos.row_group_lock_wait_CNT,0) --<FUTURE> eliminate in favor of ops_total values
      ,cs_row_group_lock_wait_MS_CNT        = COALESCE(rgos.row_group_lock_wait_MS ,0) --<FUTURE> eliminate in favor of ops_total values
--NOTE:cs_row_group_lock_wait_MS_AVG computed in "All millisecond (_MS) average (_AVG) computed values" below
      ,cs_returned_row_CNT                  = COALESCE(rgos.returned_row_CNT       ,0)
      ,cs_returned_aggregate_CNT            = COALESCE(rgos.returned_aggregate_CNT ,0)
      ,cs_returned_group_CNT                = COALESCE(rgos.returned_group_CNT     ,0)
      ,cs_input_groupby_row_CNT             = COALESCE(rgos.input_groupby_row_CNT  ,0)

      ----------------------------------------------------------------------------------------------
      -- Operational Metrics Aggregates
      ----------------------------------------------------------------------------------------------
      ,ops_total_contacts_CNT = -----------------------------------------------
                                -- WRITES
                                -----------------------------------------------
                                  COALESCE(ios.leaf_insert_CNT              ,0)
                                + COALESCE(ios.leaf_update_CNT              ,0)
                                + COALESCE(ios.leaf_delete_CNT              ,0)
                                + COALESCE(ios.nonleaf_insert_CNT           ,0)
                                + COALESCE(ios.nonleaf_delete_CNT           ,0)
                                + COALESCE(ios.nonleaf_update_CNT           ,0)
                                + COALESCE(ios.lob_orphan_create_CNT        ,0)
                                + COALESCE(ios.column_value_push_off_row_CNT,0)
                                + COALESCE(ios.column_value_pull_in_row_CNT ,0)
                                + COALESCE(ios.page_compression_success_CNT ,0)
                                ---------------------------------
                                + COALESCE(xis.row_insert_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                                + COALESCE(xis.row_update_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                                + COALESCE(xis.row_delete_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                                ---------------------------------
                                + COALESCE(xis.page_update_CNT              ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                                + COALESCE(xis.page_consolidation_CNT       ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                                + COALESCE(xis.page_split_CNT               ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                                + COALESCE(xis.key_split_CNT                ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                                + COALESCE(xis.page_merge_CNT               ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                                + COALESCE(xis.key_merge_CNT                ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                                -----------------------------------------------
                                -- READS
                                -----------------------------------------------
                                + COALESCE(ios.range_scan_CNT               ,0)
                                + COALESCE(ios.singleton_lookup_CNT         ,0)
                                + COALESCE(ios.forwarded_fetch_CNT          ,0)
                                + COALESCE(ios.lob_fetch_in_pages           ,0)
                                + COALESCE(ios.page_compression_attempt_CNT ,0)
                                -- InMemory [sys].[dm_db_xtp_index_stats]
                                + COALESCE(xis.scans_started                ,0)
--                              + COALESCE(xis.rows_touched                 ,0)
                                -- Columnstore [dm_db_column_store_row_group_operational_stats]
                                + COALESCE(rgos.delete_buffer_scan_CNT      ,0)
                                + COALESCE(rgos.row_group_lock_CNT          ,0)
      ----------------------------------------------------------------------------------------------
      ,ops_total_read_CNT =   COALESCE(ios.range_scan_CNT               ,0)
                            + COALESCE(ios.singleton_lookup_CNT         ,0)
                            + COALESCE(ios.forwarded_fetch_CNT          ,0)
                            + COALESCE(ios.lob_fetch_in_pages           ,0)
                            + COALESCE(ios.page_compression_attempt_CNT ,0)
                            + COALESCE(xis.scans_started                ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                            + COALESCE(rgos.delete_buffer_scan_CNT      ,0) -- Columnstore [dm_db_column_store_row_group_operational_stats]
      --------------------------------
      ,ops_total_scan_CNT =   COALESCE(ios.range_scan_CNT               ,0)
                            + COALESCE(xis.scans_started                ,0) -- InMemory [sys].[dm_db_xtp_index_stats]
      --------------------------------
      ,ops_total_scan_retries_CNT     =   COALESCE(xis.scans_retries                ,0)
      ----------------------------------------------------------------------------------------------
      ,ops_total_write_CNT =   COALESCE(ios.leaf_insert_CNT              ,0)
                             + COALESCE(ios.leaf_update_CNT              ,0)
                             + COALESCE(ios.leaf_delete_CNT              ,0)
                             + COALESCE(ios.nonleaf_insert_CNT           ,0)
                             + COALESCE(ios.nonleaf_update_CNT           ,0)
                             + COALESCE(ios.nonleaf_delete_CNT           ,0)
                             -----------------------------------------------
                             + COALESCE(ios.leaf_allocation_CNT          ,0)
                             + COALESCE(ios.leaf_page_merge_CNT          ,0)
                             + COALESCE(ios.nonleaf_allocation_CNT       ,0)
                             + COALESCE(ios.nonleaf_page_merge_CNT       ,0)
                             -----------------------------------------------
                             + COALESCE(ios.lob_orphan_create_CNT        ,0)
                             + COALESCE(ios.lob_orphan_insert_CNT        ,0)
                             + COALESCE(ios.column_value_push_off_row_CNT,0)
                             + COALESCE(ios.column_value_pull_in_row_CNT ,0)
--                           + COALESCE(ios.page_compression_success_CNT ,0) -- excluded since is a system process
                             -----------------------------------------------
                             + COALESCE(xis.row_insert_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                             + COALESCE(xis.row_update_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                             + COALESCE(xis.row_delete_attempts          ,0) -- InMemory [sys].[dm_db_xtp_object_stats]
                             + COALESCE(xis.page_update_CNT              ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                             -----------------------------------------------
                             + COALESCE(xis.page_consolidation_CNT       ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                             + COALESCE(xis.page_split_CNT               ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                             + COALESCE(xis.key_split_CNT                ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                             + COALESCE(xis.page_merge_CNT               ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                             + COALESCE(xis.key_merge_CNT                ,0) -- InMemory [sys].[dm_db_xtp_nonclustered_index_stats]
                             + COALESCE(xis.write_conflicts              ,0)
                             + COALESCE(xis.unique_constraint_violations ,0)
      --------------------------------
      ,ops_total_insert_CNT           =   COALESCE(ios.leaf_insert_CNT              ,0)
                                        + COALESCE(ios.nonleaf_insert_CNT           ,0)
                                        + COALESCE(ios.lob_orphan_insert_CNT        ,0)    -- bulk operations
                                        ---------------------------------
                                        + COALESCE(xis.row_insert_attempts          ,0)    -- InMemory
      --------------------------------
      ,ops_total_update_CNT           =   COALESCE(ios.leaf_update_CNT              ,0)
                                        + COALESCE(ios.nonleaf_update_CNT           ,0)
                                        ---------------------------------
                                        + COALESCE(xis.row_update_attempts          ,0)    -- InMemory
                                        + COALESCE(xis.page_update_CNT              ,0)    -- InMemory
      --------------------------------
      ,ops_total_delete_CNT           =   COALESCE(ios.leaf_delete_CNT              ,0)
                                        + COALESCE(ios.nonleaf_delete_CNT           ,0)
--                                      + COALESCE(ios.leaf_ghost_CNT               ,0)
                                        ---------------------------------
                                        + COALESCE(xis.row_delete_attempts          ,0)    -- InMemory
      --------------------------------
      ,ops_total_page_split_CNT       =   COALESCE(ios.leaf_allocation_CNT          ,0)
                                        + COALESCE(ios.nonleaf_allocation_CNT       ,0)
                                        + COALESCE(ios.column_value_push_off_row_CNT,0)
                                        + COALESCE(xis.page_split_CNT               ,0)    -- InMemory
                                        + COALESCE(xis.key_split_CNT                ,0)    -- InMemory
      --------------------------------
      ,ops_total_page_merge_CNT       =   COALESCE(ios.leaf_page_merge_CNT          ,0)
                                        + COALESCE(ios.nonleaf_page_merge_CNT       ,0)
                                        + COALESCE(ios.column_value_pull_in_row_CNT ,0)
                                        + COALESCE(xis.page_merge_CNT               ,0)    -- InMemory
                                        + COALESCE(xis.key_merge_CNT                ,0)    -- InMemory
                                        + COALESCE(xis.page_consolidation_CNT       ,0)    -- InMemory
      ----------------------------------------------------------------------------------------------
      ,reserved_page_PG_CNT           = IIF(  COALESCE(xis.allocated_bytes,0) / 8192.0     -- InMemory
                                            > COALESCE(tgt.reserved_page_PG_CNT,0)
                                           ,COALESCE(xis.allocated_bytes,0) / 8192.0       -- InMemory
                                           ,COALESCE(tgt.reserved_page_PG_CNT,0))
      --------------------------------
      ,used_page_PG_CNT               = IIF(  CEILING(COALESCE(xis.used_bytes,0) / 8192.0) -- InMemory
                                            > COALESCE(tgt.used_page_PG_CNT,0)
                                           ,CEILING(COALESCE(xis.used_bytes,0) / 8192.0)   -- InMemory
                                           ,COALESCE(tgt.used_page_PG_CNT,0))
      ----------------------------------------------------------------------------------------------
      ,buffer_total_KB_CNT            = IIF(  COALESCE(xis.allocated_bytes,0) / 1024.0     -- InMemory
                                            > COALESCE(tgt.buffer_total_KB_CNT,0)
                                           ,COALESCE(xis.allocated_bytes,0) / 1024.0       -- InMemory
                                           ,COALESCE(tgt.buffer_total_KB_CNT,0))
      --------------------------------
      ,buffer_free_KB_CNT             = IIF(  (COALESCE(xis.allocated_bytes,0) - COALESCE(xis.used_bytes,0)) / 1024.0 -- InMemory
                                            > COALESCE(tgt.buffer_free_KB_CNT,0)
                                           ,(COALESCE(xis.allocated_bytes,0) - COALESCE(xis.used_bytes,0)) / 1024.0   -- InMemory
                                           ,COALESCE(tgt.buffer_free_KB_CNT,0))
/*** LOCAL TESTING ***
SELECT COUNT_BIG(1)
--*/
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I') AS tgt -- index level composite record

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_index_operational_stats] AS ios
    ON tgt.database_id = ios.database_id
   AND tgt.object_id   = ios.object_id
   AND tgt.index_id    = ios.index_id
   AND tgt.type   NOT IN (     -- avoids overlapping index IDs for foreign key constraint, missing index
                          N'F' -- foreign key constraint
                         ,N'M' -- missing nonclustered rowstore index
                         )

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_index_usage_stats]       AS ius
    ON tgt.database_id = ius.database_id
   AND tgt.object_id   = ius.object_id
   AND tgt.index_id    = ius.index_id
   AND tgt.type   NOT IN (     -- avoids overlapping index IDs for foreign key constraint, missing index
                          N'F' -- foreign key constraint
                         )

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_missing_index_details]   AS mix
    ON tgt.database_id = mix.database_id
   AND tgt.object_id   = mix.object_id
   AND tgt.index_id    = mix.group_handle
   AND tgt.type        = N'M'  -- missing nonclustered rowstore index. avoids overlapping index IDs

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_xtp_index_stats]         AS xis
    ON tgt.database_id = xis.database_id
   AND tgt.object_id   = xis.object_id
   AND tgt.index_id    = xis.index_id
   AND tgt.type        = xis.type
   AND tgt.type   NOT IN (     -- avoids overlapping index IDs for foreign key constraint, missing index
                          N'F' -- foreign key constraint
                         ,N'M' -- missing nonclustered rowstore index
                         )

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_db_column_store_row_group_operational_stats] AS rgos
    ON tgt.database_id = rgos.database_id
   AND tgt.object_id   = rgos.object_id
   AND tgt.index_id    = rgos.index_id
   AND tgt.type       IN (     -- avoids overlapping index IDs for foreign key constraint, missing index
                          N'5' -- Clustered columnstore
                         ,N'6' -- nonclustered columnstore index
                         )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update metrics - Usage, Operational, missing index, row GROUP operational'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] indexes with WRITEs and Zero READs. Final partition count update
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
       ius_no_read_user_updates_CNT = IIF(ius_user_updates_CNT > 0 AND ius_user_read_CNT  = 0,ius_user_updates_CNT,0)
      ,ops_no_read_total_write_CNT  = IIF(ops_total_write_CNT  > 0 AND ops_total_read_CNT = 0,ops_total_write_CNT ,0)
      ,partition_CNT                = CASE WHEN ios_partition_CNT > 0 THEN ios_partition_CNT
                                           WHEN partition_CNT     > 0 THEN partition_CNT
                                           WHEN cs_partition_CNT  > 0 THEN cs_partition_CNT
                                           ELSE 0
                                      END
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update indexes with WRITEs and Zero READs, partition counts'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] physical object partition information, using HEAP or CLUSTERED values
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/

       partition_CNT                     = CASE WHEN hoc.cs_partition_CNT  > 0 THEN hoc.cs_partition_CNT
                                                WHEN hoc.ios_partition_CNT > 0 THEN hoc.ios_partition_CNT
                                                WHEN hoc.partition_CNT     > 0 THEN hoc.partition_CNT
                                                ELSE 0
                                           END
      ,partition_column_id               = hoc.partition_column_id
      ,partition_column_name             = hoc.partition_column_name
      --------------------------------------------------------------------------------------------------------------------------------------
      -- average table rows size - computed here in order to make sure all reserved sizes are captured, especially in memory
      --------------------------------------------------------------------------------------------------------------------------------------
      ,tbl_row_size_byte_AVG            = IIF(hoc.row_CNT > 0,(8192.0 * hoc.reserved_page_PG_CNT) / hoc.row_CNT,NULL)
      ,tbl_is_empty                     = IIF(ISNULL(hoc.row_CNT,0) = 0,1,0)

  FROM (-- table & view objects only
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type IN (N'H' -- history/archive table aggregate record
                           ,N'P' -- parent level aggregate record
                           ,N'S' -- system/insternal table aggregate record
                           )
       ) AS tgt  -- [##SQLXL_Index_compilation]
  JOIN [##SQLXL_Index_compilation] AS hoc
    ON tgt.database_id = hoc.database_id
   AND tgt.object_id   = hoc.object_id
   AND hoc.type       IN (N'0'  -- rowstore heap
                         ,N'1'  -- clustered rowstore index
                         ,N'5'  -- clustered columnstore
                         )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update Parent partition information, using HEAP or CLUSTERED values'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] indexes with low key additional selectivity
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.rec_type,tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       low_selectivity_additional_keys = src.low_sel
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
 CROSS
 APPLY (-- List of keys not making the index that much more selective
        SELECT (--
                SELECT CASE WHEN src.row_ID      = 1 THEN             N'Additional key selectivity low > '
                            WHEN src.row_ID % 13 = 0 THEN CHAR(096) + N'> ' -- add line feed after every 12 key values to wrap in cell
                            ELSE N' '
                       END
                      + src.dlt
                  FROM (--
                        SELECT dv1.database_id
                              ,dv1.object_id
                              ,dv1.index_id
                              ,ic.type
                              ,dlt    = [dbo].[SQLXL_3SD](dv1.row_ID,N'I')
                                      + N' ('
                                      + [dbo].[SQLXL_3SD](dv1.all_density / dv0.all_density,N'%') -- divide by zero handled by JOIN clause below
                                      + N')'
                              ,row_ID = ROW_NUMBER() OVER (PARTITION BY dv1.database_id
                                                                       ,dv1.object_id
                                                                       ,dv1.index_id
                                                               ORDER BY ic.idx_column_display_sequence
                                                          )
                          FROM [##SQLXL_Index_sys_index_columns]                AS ic
                          JOIN [##SQLXL_Index_sys_showstatistics_densityvector] AS dv1
                            ON dv1.database_id  = ic.database_id
                           AND dv1.object_id    = ic.object_id
                           AND dv1.index_id     = ic.index_id
                           AND dv1.type         = ic.type
                           AND dv1.sub_type     = ic.sub_type
                           AND dv1.row_ID       = ic.idx_column_display_sequence
                           AND 0                = ic.is_included_column      -- only KEY index elements are to be compared
                          JOIN [##SQLXL_Index_sys_showstatistics_densityvector] AS dv0
                            ON dv1.database_id  = dv0.database_id
                           AND dv1.object_id    = dv0.object_id
                           AND dv1.index_id     = dv0.index_id
                           AND dv1.type         = dv0.type
                           AND dv1.sub_type     = dv0.sub_type
                           AND (ic.idx_column_display_sequence - 1) = dv0.row_ID
                           AND 0.0              < dv0.all_density            -- avoid divide by zero below
                         WHERE 1 = 1    -- simplifies adding additional clauses for testing
                           AND tgt.database_id = ic.database_id
                           AND tgt.object_id   = ic.object_id
                           AND tgt.index_id    = ic.index_id
                           AND tgt.type        = ic.type
                           AND tgt.sub_type    = ic.sub_type
                           AND 0               < ic.key_ordinal
                           AND dv1.all_density / dv0.all_density > 1.0 / 3.0 -- if more then 1/3 of previous keys records returned
                       ) AS src
                 ORDER BY
                       src.row_ID
                   FOR XML PATH(N''),TYPE                                                           -- stats density vector - all_density
               ).value('.',N'NVARCHAR(MAX)')
       ) AS src(low_sel)
 WHERE tgt.rec_type          = N'I'    -- index level composite record
   AND tgt.type             IN (N'1'   -- clustered rowstore index
                               ,N'2'   -- nonclustered rowstore index
                               )
   AND tgt.obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                               ,N'INT' -- system internal table
                               )
   AND src.low_sel IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update indexes without activity and low key additional selectivity'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Table & column Constraints - Check & Default
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
       constraints = LEFT(COALESCE(tgt.constraints,N'') + chk.constraints,4000)
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.name,tgt.index_id,tgt.type,tgt.sub_type
      ,chk.constraints
--*/
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX) -- parent level aggregate record
  JOIN (-- Column-level Check Constraints
        SELECT obj_con.database_id
              ,obj_con.parent_object_id            -- "object parent" id of the parent Internal, History, or User table
              ,constraints =
               (-- check constraints for this table - full definitions.
                -- FOR XML PATH used since there can be multiple constraints on a column.
                -- STUFF not used since there may already be items in the [constraints] column and we'll want to go to next line
                SELECT  CHAR(096)
                      + CASE obj.type
                             WHEN N'C' THEN N'CHK' -- check constraint
                             WHEN N'D' THEN N'DEF' -- default (constraint or stand-alone)
                             ELSE obj.type_desc    -- something other than a CHECK or default (constraint or stand-alone)
                        END
                      + N' ' + IIF(obj.parent_column_id = 0,N'TBL',N'COL') + N': '
                      + IIF(obj.parent_column_id > 0
                           , QUOTENAME(COALESCE(col.name,N'*COLUMN name NOT FOUND*'))
                           + CHAR(096) + N'> name: '
                           , N'name: ')
                      ------------------------------------------------------------------------------
                      + QUOTENAME(obj.name)
                      ------------------------------------------------------------------------------
                      + CHAR(096)
                      + N'> Defn: ' + COALESCE(obj.definition,N'')
                  FROM [##SQLXL_Index_sys_objects] AS obj
                  LEFT OUTER                              -- to accomodate "0" column_id - table level
                  JOIN [##SQLXL_Index_sys_columns] AS col
                    ON obj.database_id          = col.database_id
                   AND obj.parent_object_id     = col.object_id        -- "object parent" id of the parent Internal, History, or User table
                   AND obj.parent_column_id     = col.column_id
                 WHERE obj_con.database_id      = obj.database_id
                   AND obj_con.parent_object_id = obj.parent_object_id -- "object parent" id of the parent Internal, History, or User table
                   AND 0                       <= obj.parent_column_id
                 ORDER BY
                       obj.parent_column_id
                   FOR XML PATH (N''), TYPE                                                         -- object constraints
               ).value('.',N'NVARCHAR(MAX)')
          FROM (-- list of tables with column & table constraints - get one record per table
                SELECT database_id
                      ,parent_object_id             -- "object parent" id of the parent Internal, History, or User table
                  FROM [##SQLXL_Index_sys_objects]
                 WHERE parent_column_id >= 0        -- column_id zero is table level constraint
                 GROUP BY
                       database_id
                      ,parent_object_id             -- "object parent" id of the parent Internal, History, or User table
               ) AS obj_con
       ) AS chk
    ON tgt.database_id = chk.database_id
   AND tgt.object_id   = chk.parent_object_id       -- for System, History, Constraints
   AND tgt.index_id    = chk.parent_object_id
   AND tgt.type IN (N'H'                            -- historical/archive table aggregate record
                   ,N'IT'                           -- syste/internal table aggregate record
                   ,N'U'                            -- user table object type
                   )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Check & default (constraint or stand-alone) Definitions'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Check Index & default (constraint or stand-alone) Definitions',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Index columns with Check & default (constraint or stand-alone)
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.name,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       constraints = LEFT(COALESCE(tgt.constraints,N'') + chk.constraints,4000)
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I') AS tgt  -- index level composite record
  JOIN (-- Column-level Check Constraints
        SELECT col_con.database_id
              ,col_con.object_id
              ,col_con.index_id
              ,col_con.type
              ,constraints =
               (-- check constraints for this table - full definitions.
                -- FOR XML PATH used since there can be multiple constraints on a column.
                SELECT  CHAR(096)
                      + CASE obj.type
                             WHEN N'C' THEN N'CHK' -- check constraint
                             WHEN N'D' THEN N'DEF' -- default (constraint or stand-alone)
                             ELSE obj.type_desc    -- something other than a CHECK or default (constraint or stand-alone)
                        END
                      + N' COL: '
                      + IIF(obj.parent_column_id > 0
                         , QUOTENAME(COALESCE(col.name,N'*COLUMN name NOT FOUND*'))
                         + CHAR(096) + N'> name: '
                         , N'name: ')
                      -------------------------------------------
                      + QUOTENAME(obj.name)
                      -------------------------------------------
                      + CHAR(096)
                      + N'> Defn: ' + COALESCE(obj.definition,N'')
                  FROM [##SQLXL_Index_sys_index_columns] AS idx_col

                  JOIN [##SQLXL_Index_sys_objects]       AS obj
                    ON idx_col.database_id      = obj.database_id
                   AND idx_col.object_id        = obj.parent_object_id                              -- for System, History, Constraints
                   AND idx_col.column_id        = obj.parent_column_id

                  JOIN [##SQLXL_Index_sys_columns]       AS col
                    ON obj.database_id          = col.database_id
                   AND obj.parent_object_id     = col.object_id                                     -- for System, History, Constraints
                   AND obj.parent_column_id     = col.column_id

                 WHERE col_con.database_id      = idx_col.database_id
                   AND col_con.object_id        = idx_col.object_id
                   AND col_con.index_id         = idx_col.index_id
                   AND col_con.type             = idx_col.type
                 ORDER BY
                       idx_col.column_id
                   FOR XML PATH (N''), TYPE                                                         -- column constraints
               ).value('.',N'NVARCHAR(MAX)')
          FROM [##SQLXL_Index_sys_objects]       AS obj_con
          JOIN [##SQLXL_Index_sys_index_columns] AS col_con
            ON obj_con.database_id      = col_con.database_id
           AND obj_con.parent_object_id = col_con.object_id                                         -- for System, History, Constraints
           AND obj_con.parent_column_id = col_con.column_id
         GROUP BY
               col_con.database_id
              ,col_con.object_id
              ,col_con.index_id
              ,col_con.type
       ) AS chk
    ON tgt.database_id      = chk.database_id
   AND tgt.object_id        = chk.object_id
   AND tgt.index_id         = chk.index_id
   AND tgt.type             = chk.type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Check Index & default (constraint or stand-alone) Definitions'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Add Computed Columns to physical objects
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET constraints = LEFT(COALESCE(tgt.constraints,N'') + chk.computed_column,4000)
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_compilation] WITH (TABLOCKX)
         WHERE type IN (N'IT' -- internal/system aggregate record
                       ,N'U'  -- user table aggregate record
                       )
       ) AS tgt -- [##SQLXL_Index_compilation]
  JOIN (-- Computed columns
        SELECT cc.database_id
              ,cc.object_id
              ,computed_column = (-- Computed constraints for this column - full definitions.
                                  -- FOR XML PATH used since there can be multiple constraints on a column.
                                  SELECT  CHAR(096)
                                        + N'CMP COL: ' + QUOTENAME(cx.name)
                                        + IIF(cx.uses_sql_proc = 1,N' *PROCEDURE*' ,N'')
                                        + IIF(cx.uses_sql_ftn  = 1,N' *FUNCTION*'  ,N'')
                                        + IIF(cx.uses_sql_mthd = 1,N' *SQL METHOD*',N'')
                                        + N' ' + cx.definition
                                        + IIF(cx.is_persisted = 0 OR cx.uses_database_collation = 0
                                             , CHAR(096) + N'> '
                                             + STUFF( IIF(cx.is_persisted = 0           ,N' NOT PERSISTED'  ,N'')
                                                    + IIF(cx.uses_database_collation = 0,N' NOT DB COLLATED',N'')
                                                    ,1,1,N'') -- end of STUFF function
                                            ,N'')
                                    FROM [##SQLXL_Index_sys_columns] AS cx
                                    JOIN [##SQLXL_Index_sys_objects] AS obj
                                      ON cx.database_id = obj.database_id
                                     AND cx.object_id   = obj.object_id
                                   WHERE cc.database_id = cx.database_id
                                     AND cc.object_id   = cx.object_id
                                     FOR XML PATH (N''), TYPE                                       -- computed columns & properties
                                 ).value('.',N'NVARCHAR(MAX)')
          FROM [##SQLXL_Index_sys_columns]   AS cc
         WHERE cc.definition IS NOT NULL
         GROUP BY -- get list of all columns with computed values
               cc.database_id
              ,cc.object_id
       ) AS chk
    ON tgt.database_id = chk.database_id
   AND tgt.object_id   = chk.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Check if Table has Computed Columns using SQL procedures, functions, or methods'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Consolidate contraints - Key Constraints
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       constraints = COALESCE(tgt.constraints,N'')
                   + (--
                      SELECT  CHAR(096) + QUOTENAME(kx.type + N'C')
                            + IIF(kx.is_enforced = 0,N' *NOT ENFORCED* ',N'')
                            + N' ' + kx.name
                        FROM [##SQLXL_Index_sys_objects] AS kx
                       WHERE tgt.database_id = kx.database_id
                         AND tgt.object_id   = kx.parent_object_id                                  -- for System, History, Constraints
                         AND tgt.index_id    = kx.key_unique_index_id
                         AND N'F'           <> kx.type                -- foreign key constraint
                         FOR XML PATH(N''), TYPE                                                    -- key constraints
                     ).value('.',N'NVARCHAR(MAX)')
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
  JOIN (-- target objects
        SELECT database_id
              ,parent_object_id                                                                     -- for System, History, Constraints
              ,key_unique_index_id
          FROM [##SQLXL_Index_sys_objects]
         WHERE key_unique_index_id IS NOT NULL
           AND type                <> N'F'     -- foreign key constraint
         GROUP BY
               database_id
              ,parent_object_id                                                                     -- for System, History, Constraints
              ,key_unique_index_id
       ) AS kc
    ON tgt.database_id = kc.database_id
   AND tgt.object_id   = kc.parent_object_id                                                        -- for System, History, Constraints
   AND tgt.index_id    = kc.key_unique_index_id
 WHERE tgt.type IN (N'1' -- clustered rowstore index
                   ,N'2' -- nonclustered rowstore index
                   )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Consolidated Key Constraints'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Consolidate contraints - Computed Columns
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT ic.*,
--*/
       -- NOTE: after "*/" this must be a new line, else syntax error
       constraints = COALESCE(constraints,N'') + c.txt
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
  JOIN (--
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,ic.sub_type
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_columns]       AS c
            ON ic.database_id = c.database_id
           AND ic.object_id   = c.object_id
           AND ic.column_id   = c.column_id
         WHERE c.computed_column_definition IS NOT NULL
         GROUP BY
               ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,ic.sub_type
       ) AS ic
     ON ic.database_id = tgt.database_id
    AND ic.object_id   = tgt.object_id
    AND ic.index_id    = tgt.index_id
    AND ic.type        = tgt.type
    AND ic.sub_type    = tgt.sub_type
 CROSS
 APPLY (--
        SELECT -- double SELECT required for XML TYPE VALUE below
       (SELECT COALESCE(CHAR(096) + N'CMP COL: ' + QUOTENAME(c2.name) + c2.computed_column_definition,N'')
          FROM [##SQLXL_Index_sys_index_columns] AS ic2
          JOIN [##SQLXL_Index_sys_columns]       AS c2
            ON ic2.database_id = c2.database_id
           AND ic2.object_id   = c2.object_id
           AND ic2.column_id   = c2.column_id
         WHERE ic.database_id  = ic2.database_id
           AND ic.object_id    = ic2.object_id
           AND ic.index_id     = ic2.index_id
           AND ic.type         = ic2.type
           FOR XML PATH(N''), TYPE                                                          -- computed columns
       ).value('.',N'NVARCHAR(MAX)')
       ) AS c(txt)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Incorporate Column Constraints'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Consolidate contraints - Parent table Edge Constraints
 <FUTURE> add sys.edge_constraint_clauses
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET constraints = LEFT(COALESCE(tgt.constraints,N'') + chk.edg_con,4000)
  FROM  (-- Edge Constraints
/*** LOCAL TESTING ***
--*/
        SELECT ec.database_id
              ,ec.parent_object_id                                                                  -- for System, History, Constraints
              ,(-- get edge constraint names for this table
                SELECT  CHAR(096) + obj.type + N':'
                      + NCHAR(032) + QUOTENAME(LTRIM(RTRIM(obj.name)))
                      + COALESCE(IIF(obj.definition LIKE '%~].~[%' ESCAPE '~',N' ,*FTN*',N'')
                                +IIF(obj.is_disabled             = 1,N' ,DISABLED'    ,N'')
                                +IIF(obj.is_not_for_replication  = 1,N' ,NOT_REPL'    ,N'')
                                +IIF(obj.is_not_trusted          = 1,N' ,NOT TRUSTED' ,N'')
                                +IIF(obj.uses_database_collation = 0,N' ,NON-DB_COLL' ,N'')
                                +IIF(obj.delete_referential_action_desc IS NOT NULL
                                                                   ,N' ,DEL_REF ' +obj.delete_referential_action_desc,N'')
                                +IIF(obj.is_published            = 1,N' ,PBLSHD'      ,N'')
                                +IIF(obj.is_schema_published     = 1,N' ,SCH_PBLSHD'  ,N'')
                                ,N'')
                      + N' ' + LTRIM(RTRIM(obj.definition))
                  FROM [##SQLXL_Index_sys_objects] AS obj
                 WHERE ec.database_id      = obj.database_id
                   AND ec.parent_object_id = obj.parent_object_id -- for System, History, Constraints
                   AND N'EC'               = obj.type             -- edge constraint
                 ORDER BY
                       obj.object_id
                   FOR XML PATH (N''), TYPE                                                         -- table edge constraints
               ).value('.',N'NVARCHAR(MAX)')
          FROM (-- list of tables (parent objects) with edge constraints
                SELECT database_id
                      ,parent_object_id                           -- for System, History, Constraints
                  FROM [##SQLXL_Index_sys_objects]
                 WHERE type = N'EC' -- edge constraint
                 GROUP BY
                       database_id
                      ,parent_object_id                           -- for System, History, Constraints
               ) AS ec
       ) chk (database_id
             ,parent_object_id                                    -- for System, History, Constraints
             ,edg_con
             )
  JOIN [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
    ON N'P'                 = tgt.rec_type                        -- parent level aggregate record
   AND chk.database_id      = tgt.database_id
   AND chk.parent_object_id = tgt.object_id                       -- for System, History, Constraints
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Incorporate Parent table Edge Constraints'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Referenced Foreign Keys, Referred Foreign Key Constraints, & Index Covers',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Create [##SQLXL_Index_Synergies] Synergies between indexes, foreign key constraints, and missing indexes ---------------------------
-- Compare indexes within a table for synergies, run through candidates looking for match type.
-- match indexes on the "Left" side with columns in indexes in the same table on the "right" side
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SELECT * FROM [##SQLXL_Index_Synergies]

DECLARE @msg           NVARCHAR(MAX)
       ,@step_exec_dttm     DATETIME = GETDATE()
       ,@ssms_ads      TINYINT  = (SELECT (1)
                                     FROM [sys].[dm_exec_sessions] WITH (READUNCOMMITTED)
                                    WHERE session_id = @@SPID
                                      AND (   program_name LIKE N'Microsoft SQL Server Management Studio%'
                                           OR program_name LIKE N'azdata%' --azure data studio
                                           OR program_name    = N'SQLCMD'
                                          )
                                  );

--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_Synergies];
END TRY
BEGIN CATCH
END CATCH

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index synergies - exact key duplicates - same keys in same sequence
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
DROP TABLE [##SQLXL_Index_Synergies]
SELECT * FROM [##SQLXL_Index_Synergies]
--*/
SELECT seql.database_id,seql.object_id
      ,l_index_id = seql.index_id,l_type = seql.type,l_sub_type = seql.sub_type
      ,r_index_id = seqr.index_id,r_type = seqr.type,r_sub_type = seqr.sub_type
      -----------------------------------------------------------------------------
      ,synergy_prefix  = CAST(N'D' AS NVARCHAR(2)) COLLATE Latin1_General_100_CI_AI -- duplicates
      ,synergy_columns = seql.key_sequence_column_list
      ,synergy_suffix  = CAST(N''  AS NVARCHAR(2)) COLLATE Latin1_General_100_CI_AI
      ,key_ordinal     = CAST(seql.key_ordinal AS INT)
      ,rn              = CAST(0 AS INT)
      ,seql.all_density
  INTO [##SQLXL_Index_Synergies]

  FROM [##SQLXL_Index_sys_indexes]       AS idxl
  JOIN [##SQLXL_Index_sys_indexes]       AS idxr
    ON idxl.database_id     = idxr.database_id
   AND idxl.object_id       = idxr.object_id
   AND (   idxl.index_id   <> idxr.index_id
        OR idxl.type       <> idxr.type
        OR idxl.sub_type   <> idxr.sub_type
       )
  JOIN [##SQLXL_Index_sys_index_columns] AS seql
    ON idxl.database_id     = seql.database_id
   AND idxl.object_id       = seql.object_id
   AND idxl.index_id        = seql.index_id
   AND idxl.type            = seql.type
   AND idxl.sub_type        = seql.sub_type
   AND idxl.key_ordinal_CNT = seql.key_ordinal

  JOIN [##SQLXL_Index_sys_index_columns] AS seqr
    ON idxr.database_id     = seqr.database_id
   AND idxr.object_id       = seqr.object_id
   AND idxr.index_id        = seqr.index_id
   AND idxr.type            = seqr.type
   AND idxr.sub_type        = seqr.sub_type
   AND idxr.key_ordinal_CNT = seqr.key_ordinal
   AND seql.key_sequence_column_list = seqr.key_sequence_column_list

 WHERE idxl.type NOT IN (N'0'  -- rowstore heap
                        ,N'5'  -- clustered columnstore
                        ,N'6'  -- nonclustered columnstore
                        )
   AND idxr.type NOT IN (N'0'  -- rowstore heap
                        ,N'5'  -- clustered columnstore
                        ,N'6'  -- nonclustered columnstore
                        )
   AND CASE
       -------------------------------------------------------------------------------------------
       -- foreign keys matching candidate covering rowtore indexes or duplicates
       -------------------------------------------------------------------------------------------
            WHEN idxl.type  = N'F'
             AND idxr.type IN (N'1',N'2',N'F',N'M')
            THEN 1
       -------------------------------------------------------------------------------------------
       -- missing indexes matchng existing rowstore indexes or other missing indexes
       -------------------------------------------------------------------------------------------
            WHEN idxl.type  = N'M'
             AND idxr.type IN (N'1',N'2',N'M')
            THEN 1
       -------------------------------------------------------------------------------------------
       -- non-specialty and specialty indexes matching other specialty indexes
       -------------------------------------------------------------------------------------------
            WHEN idxl.type IN (N'1',N'2',N'3',N'4',N'7',N'9')
             AND idxr.type IN (N'3',N'4',N'7',N'9')
            THEN 1
       -------------------------------------------------------------------------------------------
       -- nonclustered rowstore indexes matching clustered or other nonclustered rowstore indexes
       -------------------------------------------------------------------------------------------
            WHEN idxl.type  =  N'2'                         -- nonclustered rowstore index
             AND idxr.type IN (N'1',N'2')
            THEN 1
            ELSE 0
       END = 1

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER,HASH JOIN); -- HASH JOIN added for performance

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Sequence synergies - duplicate keys'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

CREATE CLUSTERED
 INDEX ixc_SQLXL_Index_Synergies
    ON [##SQLXL_Index_Synergies]
      (database_id
      ,object_id
      ,l_index_id
      ,l_type
      ,l_sub_type
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index synergies - First or more keys the same but not exact key duplicates captured above
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SELECT * FROM [##SQLXL_Index_Synergies]
--*/
INSERT
  INTO [##SQLXL_Index_Synergies]
SELECT *
  FROM (--
        SELECT idxl.database_id,idxl.object_id
              ,l_index_id      = idxl.index_id,l_type = idxl.type,l_sub_type = idxl.sub_type
              ,r_index_id      = idxr.index_id,r_type = idxr.type,r_sub_type = idxr.sub_type
              -----------------------------------------------------------------------------
              ,synergy_prefix  = CAST(N'S' AS NVARCHAR(2)) COLLATE Latin1_General_100_CI_AI -- same sequence
              ,synergy_columns = idxl.key_sequence_column_list
              ,synergy_suffix  = CAST(N''  AS NVARCHAR(2)) COLLATE Latin1_General_100_CI_AI
              ,idxl.key_ordinal
              ,rn = ROW_NUMBER() OVER (PARTITION BY idxl.database_id,idxl.object_id
                                                   ,idxl.index_id,idxl.type,idxl.sub_type
                                                   ,idxr.index_id,idxr.type,idxr.sub_type
                                           ORDER BY idxl.key_ordinal DESC -- get the matched row with the most number of matching keys
                                      )
              ,idxl.all_density
          FROM [##SQLXL_Index_sys_index_columns] AS idxl
          JOIN [##SQLXL_Index_sys_index_columns] AS idxr
            ON idxl.database_id  = idxr.database_id
           AND idxl.object_id    = idxr.object_id
           AND (   idxl.index_id   <> idxr.index_id
                OR idxl.type       <> idxr.type
                OR idxl.sub_type   <> idxr.sub_type
               )
           AND CHARINDEX(idxl.key_sequence_column_list,idxr.key_sequence_column_list) = 1
         WHERE 1 = 1   -- simplifies adding additional clauses for testing
           AND NOT EXISTS (-- if duplicate synergies already called out, no need to add sequence synergy
                           SELECT 1/0
                             FROM [##SQLXL_Index_Synergies] AS syn
                            WHERE idxl.database_id = syn.database_id
                              AND idxl.object_id   = syn.object_id
                              AND idxl.index_id    = syn.l_index_id
                              AND idxl.type        = syn.l_type
                              AND idxl.sub_type    = syn.l_sub_type
                              AND idxr.index_id    = syn.r_index_id
                              AND idxr.type        = syn.r_type
                              AND idxr.sub_type    = syn.r_sub_type
                          )
           AND idxl.key_ordinal > 0
           AND idxl.type NOT IN (N'0'  -- rowstore heap
                                ,N'5'  -- clustered columnstore
                                ,N'6'  -- nonclustered columnstore
                                )
           AND idxr.type NOT IN (N'0'  -- rowstore heap
                                ,N'5'  -- clustered columnstore
                                ,N'6'  -- nonclustered columnstore
                                )
           AND CASE
              -------------------------------------------------------------------------------------------
              -- foreign keys matching candidate covering rowtore indexes or duplicates
              -------------------------------------------------------------------------------------------
                   WHEN idxl.type  = N'F'
                    AND idxr.type IN (N'1',N'2',N'F',N'M')
                   THEN 1
              -------------------------------------------------------------------------------------------
              -- missing indexes matchng existing rowstore indexes or other missing indexes
              -------------------------------------------------------------------------------------------
                   WHEN idxl.type  = N'M'
                    AND idxr.type IN (N'1',N'2',N'M')
                   THEN 1
              -------------------------------------------------------------------------------------------
              -- non-specialty and specialty indexes matching other specialty indexes
              -------------------------------------------------------------------------------------------
                   WHEN idxl.type IN (N'1',N'2',N'3',N'4',N'7',N'9')
                    AND idxr.type IN (N'3',N'4',N'7',N'9')
                   THEN 1
              -------------------------------------------------------------------------------------------
              -- nonclustered rowstore indexes matching clustered or other nonclustered rowstore indexes
              -------------------------------------------------------------------------------------------
                   WHEN idxl.type  =  N'2'                  -- nonclustered rowstore index
                    AND idxr.type IN (N'1',N'2')
                   THEN 1
                   ELSE 0
              END = 1
       ) AS synergy

 WHERE synergy.rn = 1 -- get the matched row with the most number of matching keys
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER,HASH JOIN); -- HASH JOIN added for performance

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Sequence synergies - same keys, same sequence'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------
-- Index synergies - OVERLAP - same key columns in different sequence
--------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SELECT * FROM [##SQLXL_Index_Synergies]
--*/
INSERT
  INTO [##SQLXL_Index_Synergies]
SELECT *
  FROM (--
        SELECT idxl.database_id,idxl.object_id
              ,l_index_id = idxl.index_id,l_type = idxl.type,l_sub_type = idxl.sub_type
              ,r_index_id = idxr.index_id,r_type = idxr.type,r_sub_type = idxr.sub_type
              -----------------------------------------------------------------------------
              ,synergy_prefix  = CAST(N'O' AS NVARCHAR(2)) COLLATE Latin1_General_100_CI_AI -- overlapping keys
              ,synergy_columns = idxl.key_overlap_column_list
              ,synergy_suffix  = CAST(N''  AS NVARCHAR(2)) COLLATE Latin1_General_100_CI_AI
              ,key_ordinal      = CAST(idxl.key_ordinal AS INT)
              ,rn = ROW_NUMBER() OVER (PARTITION BY idxl.database_id,idxl.object_id
                                                   ,idxl.index_id,idxl.type,idxl.sub_type
                                                   ,idxr.index_id,idxr.type,idxr.sub_type
                                           ORDER BY idxl.key_ordinal DESC
                                      )
              ,idxl.all_density
          FROM [##SQLXL_Index_sys_index_columns] AS idxl
          JOIN [##SQLXL_Index_sys_index_columns] AS idxr
            ON idxl.database_id  = idxr.database_id
           AND idxl.object_id    = idxr.object_id
           AND (   idxl.index_id   <> idxr.index_id
                OR idxl.type       <> idxr.type
                OR idxl.sub_type   <> idxr.sub_type
               )
           AND idxl.key_overlap_column_list = idxr.key_overlap_column_list
         WHERE 1 = 1
           AND NOT EXISTS (-- if the sequence and overlap synergies already been called out no need to add contained synergy
                           SELECT 1/0
                             FROM [##SQLXL_Index_Synergies] AS syn
                            WHERE idxl.database_id = syn.database_id
                              AND idxl.object_id   = syn.object_id
                              AND idxl.index_id    = syn.l_index_id
                              AND idxl.type        = syn.l_type
                              AND idxl.sub_type    = syn.l_sub_type
                              AND idxr.index_id    = syn.r_index_id
                              AND idxr.type        = syn.r_type
                              AND idxr.sub_type    = syn.r_sub_type
                          )

           AND idxl.type NOT IN (N'0'  -- rowstore heap
                                ,N'5'  -- clustered columnstore
                                ,N'6'  -- nonclustered columnstore
                                )
           AND idxr.type NOT IN (N'0'  -- rowstore heap
                                ,N'5'  -- clustered columnstore
                                ,N'6'  -- nonclustered columnstore
                                )
           AND CASE
              -------------------------------------------------------------------------------------------
              -- foreign keys matching candidate covering rowtore indexes or duplicates
              -------------------------------------------------------------------------------------------
                   WHEN idxl.type  = N'F'
                    AND idxr.type IN (N'1',N'2',N'F',N'M')
                   THEN 1
              -------------------------------------------------------------------------------------------
              -- missing indexes matchng existing rowstore indexes or other missing indexes
              -------------------------------------------------------------------------------------------
                   WHEN idxl.type  = N'M'
                    AND idxr.type IN (N'1',N'2',N'M')
                   THEN 1
              -------------------------------------------------------------------------------------------
              -- non-specialty and specialty indexes matching other specialty indexes
              -------------------------------------------------------------------------------------------
                   WHEN idxl.type IN (N'1',N'2',N'3',N'4',N'7',N'9')
                    AND idxr.type IN (N'3',N'4',N'7',N'9')
                   THEN 1
              -------------------------------------------------------------------------------------------
              -- nonclustered rowstore indexes matching clustered or other nonclustered rowstore indexes
              -------------------------------------------------------------------------------------------
                   WHEN idxl.type  =  N'2'                  -- nonclustered rowstore index
                    AND idxr.type IN (N'1',N'2')
                   THEN 1
                   ELSE 0
              END = 1
       ) AS overlap

 WHERE overlap.rn = 1
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER,HASH JOIN); -- HASH JOIN added for performance

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Overlap synergies - same keys, different sequence'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index synergies - Contained - all key columns also found in a larger index's key columns
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SELECT * FROM [##SQLXL_Index_Synergies]
--*/
INSERT
  INTO [##SQLXL_Index_Synergies]
SELECT con.database_id,con.object_id
      ,con.l_index_id,con.l_type,con.l_sub_type
      ,con.r_index_id,con.r_type,con.r_sub_type
       -----------------------------------------------------------------------------
      ,synergy_prefix  = CAST(N'C' AS NVARCHAR(2))   -- smaller index contained in another
      ,synergy_columns = col.key_overlap_column_list
      ,synergy_suffix  = CAST(N'<' AS NVARCHAR(2))
      ,con.key_ordinal
      ,rn = 1
      ,col.all_density
  FROM (--
        SELECT sicl.database_id,sicl.object_id
              ,l_index_id = sicl.index_id,l_type = sicl.type,l_sub_type = sicl.sub_type
              ,r_index_id = sicr.index_id,r_type = sicr.type,r_sub_type = sicr.sub_type
              ,key_ordinal = COUNT_BIG(1)

          FROM [##SQLXL_Index_sys_indexes]       AS idxl
          JOIN [##SQLXL_Index_sys_indexes]       AS idxr
            ON idxl.database_id     = idxr.database_id
           AND idxl.object_id       = idxr.object_id
           AND (   idxl.index_id   <> idxr.index_id
                OR idxl.type       <> idxr.type
                OR idxl.sub_type   <> idxr.sub_type
               )

          JOIN [##SQLXL_Index_sys_index_columns] AS sicl
            ON idxl.database_id     = sicl.database_id
           AND idxl.object_id       = sicl.object_id
           AND idxl.index_id        = sicl.index_id
           AND idxl.type            = sicl.type
           AND idxl.sub_type        = sicl.sub_type
           AND 0                    < sicl.key_ordinal

          JOIN [##SQLXL_Index_sys_index_columns] AS sicr
            ON idxr.database_id     = sicr.database_id
           AND idxr.object_id       = sicr.object_id
           AND idxr.index_id        = sicr.index_id
           AND idxr.type            = sicr.type
           AND idxr.sub_type        = sicr.sub_type
           AND 0                    < sicr.key_ordinal


         WHERE 1 = 1   -- simplifies adding additional clauses for testing
           AND idxl.type NOT IN (N'0'  -- rowstore heap
                                ,N'5'  -- clustered columnstore
                                ,N'6'  -- nonclustered columnstore
                                ,N'F'  -- foreign key constraint - key sequence captured above
                                )
           AND idxr.type NOT IN (N'0'  -- rowstore heap
                                ,N'5'  -- clustered columnstore
                                ,N'6'  -- nonclustered columnstore
                                ,N'F'  -- foreign key constraint - key sequence captured above
                                )

           AND NOT EXISTS (-- if the sequence and overlap synergies already been called out no need to add contained synergy
                           SELECT 1/0
                             FROM [##SQLXL_Index_Synergies] AS syn
                            WHERE sicl.database_id = syn.database_id
                              AND sicl.object_id   = syn.object_id
                              AND sicl.index_id    = syn.l_index_id
                              AND sicl.type        = syn.l_type
                              AND sicl.sub_type    = syn.l_sub_type
                              AND sicr.index_id    = syn.r_index_id
                              AND sicr.type        = syn.r_type
                              AND sicr.sub_type    = syn.r_sub_type
                          )
           AND CASE
              -------------------------------------------------------------------------------------------
              -- missing indexes matchng existing rowstore indexes or other missing indexes
              -------------------------------------------------------------------------------------------
                   WHEN idxl.type  = N'M'
                    AND idxr.type IN (N'1',N'2',N'M')
                   THEN 1
              -------------------------------------------------------------------------------------------
              -- non-specialty and specialty indexes matching other specialty indexes
              -------------------------------------------------------------------------------------------
                   WHEN idxl.type IN (N'1',N'2',N'3',N'4',N'7',N'9')
                    AND idxr.type IN (N'3',N'4',N'7',N'9')
                   THEN 1
              -------------------------------------------------------------------------------------------
              -- nonclustered rowstore indexes matching clustered or other nonclustered rowstore indexes
              -------------------------------------------------------------------------------------------
                   WHEN idxl.type  =  N'2'                  -- nonclustered rowstore index
                    AND idxr.type IN (N'1',N'2')
                   THEN 1
                   ELSE 0
              END = 1

           AND sicl.column_id       = sicr.column_id
           AND idxl.key_ordinal_CNT < idxr.key_ordinal_CNT

         GROUP BY
               sicl.database_id,sicl.object_id
              ,sicl.index_id,sicl.type,sicl.sub_type
              ,sicr.index_id,sicr.type,sicr.sub_type
              ,idxl.key_ordinal_CNT
        HAVING COUNT_BIG(1) = idxl.key_ordinal_CNT -- count of matching column_id is the same as number of index key elements
       ) AS con

  JOIN [##SQLXL_Index_sys_index_columns] AS col
    ON con.database_id     = col.database_id
   AND con.object_id       = col.object_id
   AND con.l_index_id      = col.index_id
   AND con.l_type          = col.type
   AND con.l_sub_type      = col.sub_type
   AND con.key_ordinal     = col.key_ordinal
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER,HASH JOIN); -- HASH JOIN added for performance

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Contained synergies - smaller indexes with key columns in larger indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index synergies - Containing - larger index keys contain all the keys from smaller indexes
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SELECT * FROM [##SQLXL_Index_Synergies]
--*/
INSERT
  INTO [##SQLXL_Index_Synergies]
SELECT con.database_id,con.object_id
      ,con.r_index_id,con.r_type,con.r_sub_type
      ,con.r_index_id,con.r_type,con.r_sub_type
       -----------------------------------------------------------------------------
      ,synergy_prefix  = CAST(N'>' AS NVARCHAR(2))   -- larger index containg all keys from a smaller index
      ,synergy_columns = col.key_overlap_column_list
      ,synergy_suffix  = CAST(N''  AS NVARCHAR(2))
      ,idx.key_ordinal_CNT
      ,rn = 1
      ,col.all_density
  FROM (--------------------------------------------------------------------------------------------------------------------
        -- indexes that can contain other smaller indexes
        --------------------------------------------------------------------------------------------------------------------
        SELECT database_id,object_id,r_index_id,r_type,r_sub_type
          FROM [##SQLXL_Index_Synergies]
         WHERE 1 = 1   -- simplifies adding additional clauses for testing
           AND synergy_prefix = N'C'
         GROUP BY
               database_id,object_id,r_index_id,r_type,r_sub_type
       ) AS con
  JOIN [##SQLXL_Index_sys_indexes]        AS idx
    ON con.database_id     = idx.database_id
   AND con.object_id       = idx.object_id
   AND con.r_index_id      = idx.index_id
   AND con.r_type          = idx.type
   AND con.r_sub_type      = idx.sub_type
  JOIN [##SQLXL_Index_sys_index_columns] AS col
    ON con.database_id     = col.database_id
   AND con.object_id       = col.object_id
   AND con.r_index_id      = col.index_id
   AND con.r_type          = col.type
   AND con.r_sub_type      = col.sub_type
   AND idx.key_ordinal_CNT = col.key_ordinal
 WHERE col.key_overlap_column_list IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER,HASH JOIN); -- HASH JOIN added for performance

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Containing synergies - larger indexes with columns from smaller index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index synergies - Contain Includes - all key columns also found in a larger index with included columns
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SELECT * FROM [##SQLXL_Index_Synergies]
--*/
INSERT
  INTO [##SQLXL_Index_Synergies]
SELECT con.database_id,con.object_id
      ,con.l_index_id,con.l_type,con.l_sub_type
      ,con.r_index_id,con.r_type,con.r_sub_type
       ---------------------------------------------------------------------------------------------
      ,synergy_prefix  = CAST(N'I' AS NVARCHAR(2))   -- smaller index contained in a larger index with included columns
      ,synergy_columns = col.inc_overlap_column_list
      ,synergy_suffix  = CAST(N'<' AS NVARCHAR(2))
      ,con.key_ordinal
      ,rn = 1
      ,col.all_density
  FROM (--
        SELECT sicl.database_id,sicl.object_id
              ,l_index_id = sicl.index_id,l_type = sicl.type,l_sub_type = sicl.sub_type
              ,r_index_id = sicr.index_id,r_type = sicr.type,r_sub_type = sicr.sub_type
              ,key_ordinal = COUNT_BIG(1)
          FROM [##SQLXL_Index_sys_indexes]       AS idxl
          JOIN [##SQLXL_Index_sys_index_columns] AS sicl
            ON idxl.database_id     = sicl.database_id
           AND idxl.object_id       = sicl.object_id
           AND idxl.index_id        = sicl.index_id
           AND idxl.sub_type        = sicl.sub_type
          JOIN [##SQLXL_Index_sys_index_columns] AS sicr
            ON sicl.database_id     = sicr.database_id
           AND sicl.object_id       = sicr.object_id
           AND (   sicl.index_id   <> sicr.index_id
                OR sicl.type       <> sicr.type
                OR sicl.sub_type   <> sicr.sub_type
               )
           AND sicl.column_id       = sicr.column_id

         WHERE 1 = 1   -- simplifies adding additional clauses for testing
           AND sicl.type NOT IN (N'0'  -- rowstore heap
                                ,N'5'  -- clustered columnstore
                                ,N'6'  -- nonclustered columnstore
                                ,N'F'  -- foreign key constraint - key sequence captured above
                                )
           AND sicr.type NOT IN (N'0'  -- rowstore heap
                                ,N'5'  -- clustered columnstore
                                ,N'6'  -- nonclustered columnstore
                                ,N'F'  -- foreign key constraint - key sequence captured above
                                )
           AND NOT EXISTS (-- if the sequence and overlap synergies already been called out no need to add contained synergy
                           SELECT 1/0
                             FROM [##SQLXL_Index_Synergies] AS syn
                            WHERE sicl.database_id = syn.database_id
                              AND sicl.object_id   = syn.object_id
                              AND sicl.index_id    = syn.l_index_id
                              AND sicl.type        = syn.l_type
                              AND sicl.sub_type    = syn.l_sub_type
                              AND sicr.index_id    = syn.r_index_id
                              AND sicr.type        = syn.r_type
                              AND sicr.sub_type    = syn.r_sub_type
                          )
           AND sicl.key_ordinal > 0
           AND (sicr.key_ordinal > 0 OR sicr.is_included_column = 1)
         GROUP BY
               sicl.database_id,sicl.object_id
              ,sicl.index_id,sicl.type,sicl.sub_type
              ,sicr.index_id,sicr.type,sicr.sub_type
              ,idxl.key_ordinal_CNT
        HAVING COUNT_BIG(1) = idxl.key_ordinal_CNT -- count of matching column_id is the same as number of index key elements
       ) AS con
  JOIN [##SQLXL_Index_sys_index_columns] AS col
    ON con.database_id     = col.database_id
   AND con.object_id       = col.object_id
   AND con.l_index_id      = col.index_id
   AND con.l_type          = col.type
   AND con.l_sub_type      = col.sub_type
   AND con.key_ordinal     = col.key_ordinal
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER,HASH JOIN); -- HASH JOIN added for performance

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Included synergies - all key columns found in a larger index with included columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index synergies - containing includes larger indexes with included columns containing all the keys from smaller indexes
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SELECT * FROM [##SQLXL_Index_Synergies]
--*/
INSERT
  INTO [##SQLXL_Index_Synergies]
SELECT con.database_id,con.object_id
      ,con.r_index_id,con.r_type,con.r_sub_type
      ,con.r_index_id,con.r_type,con.r_sub_type
       -----------------------------------------------------
      ,synergy_prefix  = CAST(N'>>' AS NVARCHAR(2))  -- larger index with included columns containing all keys from smaller
      ,synergy_columns = col.inc_overlap_column_list
      ,synergy_suffix  = CAST(N''  AS NVARCHAR(2))
      ,idx.idx_column_display_sequence_MAX
      ,rn = 1
      ,col.all_density
  FROM (--------------------------------------------------------------------------------------------
        -- indexes that can contain other smaller indexes
        --------------------------------------------------------------------------------------------
        SELECT database_id,object_id,r_index_id,r_type,r_sub_type
          FROM [##SQLXL_Index_Synergies]
         WHERE 1 = 1   -- simplifies adding additional clauses for testing
           AND synergy_prefix = N'I'
         GROUP BY
               database_id,object_id,r_index_id,r_type,r_sub_type
       ) AS con
  JOIN (--
        SELECT database_id,object_id,index_id,type,sub_type
              ,idx_column_display_sequence_MAX = MAX(idx_column_display_sequence)
          FROM [##SQLXL_Index_sys_index_columns]
         WHERE key_ordinal        > 0
            OR is_included_column = 1
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) AS idx
    ON con.database_id     = idx.database_id
   AND con.object_id       = idx.object_id
   AND con.r_index_id      = idx.index_id
   AND con.r_type          = idx.type
   AND con.r_sub_type      = idx.sub_type
  JOIN [##SQLXL_Index_sys_index_columns] AS col
    ON con.database_id     = col.database_id
   AND con.object_id       = col.object_id
   AND con.r_index_id      = col.index_id
   AND con.r_type          = col.type
   AND con.r_sub_type      = col.sub_type
   AND idx_column_display_sequence_MAX = col.idx_column_display_sequence
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER,HASH JOIN);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Including synergies - larger indexes with included columns containing all the keys from smaller indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Add synergies to indexes
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*
SELECT * FROM [##SQLXL_Index_Synergies]
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       synergy_code = CAST(STUFF((--
                                  SELECT  CHAR(096)
                                        + MAX(COALESCE(src.synergy_prefix ,N''))
                                        + MAX(COALESCE(src.synergy_columns,N''))
                                        + MAX(COALESCE(src.synergy_suffix ,N''))
                                    FROM [##SQLXL_Index_Synergies] AS src
                                   WHERE tgt.database_id = src.database_id
                                     AND tgt.object_id   = src.object_id
                                     AND tgt.index_id    = src.l_index_id
                                     AND tgt.type        = src.l_type
                                     AND tgt.sub_type    = src.l_sub_type
                                   GROUP BY
                                         src.database_id,src.object_id,src.l_index_id,src.l_type,src.l_sub_type
                                        ,src.synergy_prefix
                                   ORDER BY
                                         CASE src.synergy_prefix
                                              WHEN N'D'  THEN 1 -- sequence match - keys in same order starting with first
                                              WHEN N'S'  THEN 2 -- sequence match - keys in same order starting with first
                                              WHEN N'O'  THEN 3 -- overlap - same keys in different order starting with first
                                              WHEN N'C'  THEN 4 -- contained - all key from index found in another index keys
                                              WHEN N'>'  THEN 5 -- index keys that smaller indexes roll up to
                                              WHEN N'I'  THEN 6 -- contained - all key from index found in another index keys
                                              WHEN N'>>' THEN 7 -- index keys and includes that smaller indexes roll up to
                                              ELSE            9
                                         END
                                     FOR XML PATH(''), TYPE                                         -- index synergies and column ids
                                 ).value('.','NVARCHAR(886)')
                                ,1,1,N'') -- end of STUFF function
                          AS NVARCHAR(1000))
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I') AS tgt     -- index level composite record
  JOIN (-- only need to update indexes with one or more synergies
        SELECT database_id,object_id
              ,l_index_id
              ,l_type
              ,l_sub_type
          FROM [##SQLXL_Index_Synergies]
         GROUP BY
               database_id,object_id
              ,l_index_id
              ,l_type
              ,l_sub_type
       ) AS src
    ON tgt.database_id  = src.database_id
   AND tgt.object_id    = src.object_id
   AND tgt.index_id     = src.l_index_id
   AND tgt.type         = src.l_type
   AND tgt.sub_type     = src.l_sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update SQLXL_Index_compilation with SYNERGIES'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Weight the Missing Index Advantage with percent of table reads factor
 NOTE: performed here so values can be used for Foreign Key Missing Index covers
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.mix_Advantage_AMT,tgt.ius_user_read_CNT,usg.reads,
--*/
       mix_advantage_weighted_AMT = IIF(usg.reads > 0
                                       ,tgt.mix_Advantage_AMT * (1.0 * tgt.ius_user_read_CNT / usg.reads) -- /zero handled by HAVING
                                       ,NULL)
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE type = N'M') AS tgt  -- missing nonclustered rowstore index
  JOIN (--
        SELECT database_id,object_id
              ,reads = SUM(ius_user_read_CNT)
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type = N'I' -- index level composite record
           AND type    <> N'M' -- missing nonclustered rowstore index
         GROUP BY
               database_id,object_id
        HAVING SUM(ius_user_read_CNT) > 0
       ) usg
    ON tgt.database_id = usg.database_id
   AND tgt.object_id   = usg.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update Missing Index Advantage with percent of table reads factor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Find best missing index to cover an uncovered foreign key constraint
 uncovered foreign keys have NULL column [fkc_best_covering_idx_ID]
 Look for missing indexes with key columns matching the foreign key constraint columns. Order is not required for Overlap & Contained
 <FUTURE> add included_column_CNT, ius_user_read_CNT to break any ties
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,src.*,
--*/
       fkc_candidate_covering_MIX_ID = src.mix_index_id
  FROM (--
        SELECT type,database_id,object_id,index_id,sub_type
              ,fkc_candidate_covering_MIX_ID
          FROM [##SQLXL_Index_compilation] WITH (TABLOCKX)
         WHERE type = N'F'                                 -- foreign key constraint
           AND fkc_best_covering_idx_ID IS NULL            -- no existing covering index
       ) AS tgt
 CROSS
 APPLY (--
        SELECT TOP (1)
               mix_index_id = idxM.r_index_id
          FROM [##SQLXL_Index_Synergies] AS idxM            -- missing index synergies
         WHERE tgt.type         = idxM.l_type
           AND tgt.database_id  = idxM.database_id
           AND tgt.object_id    = idxM.object_id
           AND tgt.index_id     = idxM.l_index_id
           AND 0                = idxM.l_sub_type
           AND N'M'             = idxM.r_type               -- missing index
           AND 0                = idxM.r_sub_type
         ORDER BY
               CASE idxM.synergy_prefix
                    WHEN N'D' THEN 1  -- duplicate synergy
                    WHEN N'S' THEN 2  -- sequence synergy
                    WHEN N'O' THEN 3  -- overlap synergy
                    WHEN N'C' THEN 4  -- contained synergy
                    ELSE           9
               END
              ,idxM.rn DESC
       ) AS src
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Find best missing index to cover a foreign key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Create [##SQLXL_Index_synergies_count_by_type]
\******************************************************************************************************************************************/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_synergies_count_by_type];
END TRY
BEGIN CATCH
END CATCH

SELECT database_id,object_id,index_id = l_index_id,type = l_type,sub_type = l_sub_type
      ,rn = ROW_NUMBER()
                  OVER(PARTITION BY database_id,object_id,l_index_id,l_type,l_sub_type
                           ORDER BY CASE synergy_prefix
                                         WHEN N'D'  THEN  0 -- duplicate synergy keys
                                         WHEN N'S'  THEN 10 -- same leading key(s) sequence
                                         WHEN N'O'  THEN 20 -- same key columns different sequence
                                         WHEN N'C'  THEN 30 -- same key columns found in a larger index
                                         WHEN N'>'  THEN 40 -- index encompasses key columns from other indexes
                                         WHEN N'I'  THEN 50 -- key columns found in another index with includes
                                         WHEN N'>>' THEN 60 -- Including larger indexes
                                         ELSE            90
                                    END
                                   ,CASE l_type
                                         WHEN N'1' THEN  1  -- clustered rowstore index
                                         WHEN N'T' THEN  2  -- fulltext index
                                         WHEN N'3' THEN  3  -- XML index
                                         WHEN N'9' THEN  4  -- JSON index
                                         WHEN N'4' THEN  5  -- spatial index
                                         WHEN N'7' THEN  6  -- hash index
                                         WHEN N'2' THEN  7  -- clustered rowstore index
                                         WHEN N'F' THEN  8  -- foreign key constraint
                                         WHEN N'M' THEN  9  -- missing nonclustered rowstore index
                                         ELSE           10
                                    END
                      )
      ,pfx = CASE synergy_prefix
                  WHEN N'D'  THEN N'[DUP]'  -- duplicate synergy keys
                  WHEN N'S'  THEN N'[SEQ]'  -- same leading key sequence
                  WHEN N'O'  THEN N'[OVL]'  -- same key columns different sequence

                  WHEN N'C'  THEN N'[CON]'  -- same key columns found in larger index keys
                  WHEN N'I'  THEN N'[INC]'  -- same key columns found in larger index with includes

                  WHEN N'>'  THEN N'[COI]'  -- smaller index key columns found in this index keys
                  WHEN N'>>' THEN N'[INI]'  -- smaller index key columns found in this index with includes

                  ELSE            N'[<?>]'
              END
      ,typ = CASE r_type
                  WHEN N'1' THEN N'CX'  -- clustered rowstore index
                  WHEN N'2' THEN N'NCX' -- clustered rowstore index
                  WHEN N'3' THEN N'XML' -- XML index
                  WHEN N'4' THEN N'SPT' -- spatial index
                  WHEN N'7' THEN N'CCH' -- hash index
                  WHEN N'9' THEN N'JSN' -- JSON index
                  WHEN N'F' THEN N'FKC' -- foreign key constraint
                  WHEN N'M' THEN N'MIX' -- missing nonclustered rowstore index
                  WHEN N'T' THEN N'FTX' -- fulltext index
                  ELSE           N'<?>'
             END
      ,cnt = CAST(COUNT_BIG(1) AS NVARCHAR(20))
  INTO [##SQLXL_Index_synergies_count_by_type]
  FROM (--
        SELECT database_id,object_id
              ,l_index_id
              ,l_type
              ,l_sub_type
              ,synergy_prefix
              ,r_type
          FROM [##SQLXL_Index_Synergies]
         WHERE synergy_prefix IN (N'D'  -- D  DUP synergy duplicates
                                 ,N'S'  -- S  SEQ first key same
                                 ,N'O'  -- O  OVL overlap
                                 ,N'C'  -- C  CON contained
                                 ,N'I'  -- I  INC contained with includes
                                 )
        UNION ALL -- get the right side "containing" indexes
        SELECT database_id,object_id
              ,r_index_id
              ,r_type
              ,r_sub_type
              ,synergy_prefix = CASE synergy_prefix
                                     WHEN N'C' THEN N'>'
                                     WHEN N'I' THEN N'>>'
                                     ELSE           N'??'
                                END
              ,l_type
          FROM [##SQLXL_Index_Synergies]
         WHERE synergy_prefix IN (N'C',N'I')
       ) AS syn
 GROUP BY database_id,object_id,l_index_id,l_type,l_sub_type
         ,r_type
         ,synergy_prefix
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Create [##SQLXL_Index_synergies_count_by_type]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update [##SQLXL_Index_compilation] Add *ALL* Missing index usage values to Uncovered Foreign Key Constraints
 Look for missing indexes with key columns matching the foreign key constraint columns.
 NOTE: column order is not required since missing index columns are in table creation order
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT fkc_mix.database_id,fkc_mix.object_id,fkc_mix.index_id,fkc_mix.type,fkc_mix.sub_type,
--*/
       fkc_missing_index_CNT          = fkc_mix.fkc_missing_index_CNT
      ---------------------
      ,mix_avg_total_user_cost_AMT    = fkc_mix.mix_avg_total_user_cost_AMT
      ,mix_avg_total_system_cost_AMT  = fkc_mix.mix_avg_total_system_cost_AMT
      ,mix_avg_user_impact_AMT        = fkc_mix.mix_avg_user_impact_AMT
      ,mix_avg_system_impact_AMT      = fkc_mix.mix_avg_system_impact_AMT
      ,mix_unique_compiles_CNT        = fkc_mix.mix_unique_compiles_CNT
      ,mix_Advantage_AMT              = fkc_mix.mix_Advantage_AMT
      ,mix_advantage_weighted_AMT     = fkc_mix.mix_advantage_weighted_AMT
      ---------------------
      ,ius_user_total_CNT             = fkc_mix.ius_user_total_CNT
      ,ius_user_read_CNT              = fkc_mix.ius_user_read_CNT
      ,ius_user_seeks_CNT             = fkc_mix.ius_user_seeks_CNT
      ,ius_user_scans_CNT             = fkc_mix.ius_user_scans_CNT
      ,ius_system_seeks_CNT           = fkc_mix.ius_system_seeks_CNT
      ,ius_system_scans_CNT           = fkc_mix.ius_system_scans_CNT
      ---------------------
      ,ius_last_user_seek_DTTM        = fkc_mix.ius_last_user_seek_DTTM
      ,ius_last_user_scan_DTTM        = fkc_mix.ius_last_user_scan_DTTM
      ,ius_last_system_seek_DTTM      = fkc_mix.ius_last_system_seek_DTTM
      ,ius_last_system_scan_DTTM      = fkc_mix.ius_last_system_scan_DTTM

  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
  JOIN (-- add up usage values from missing indexes that could be used to cover uncovered foreign keys
        SELECT fkc_mix.database_id
              ,fkc_mix.object_id
              ,fkc_mix.index_id
              ,fkc_mix.type
              ,fkc_mix.sub_type
              ---------------------
              ,fkc_missing_index_CNT         = COUNT_BIG(1)
              ---------------------
              ,mix_avg_total_user_cost_AMT   = AVG(COALESCE(mix.mix_avg_total_user_cost_AMT  ,0.0))
              ,mix_avg_total_system_cost_AMT = AVG(COALESCE(mix.mix_avg_total_system_cost_AMT,0.0))
              ,mix_avg_user_impact_AMT       = AVG(COALESCE(mix.mix_avg_user_impact_AMT      ,0.0))
              ,mix_avg_system_impact_AMT     = AVG(COALESCE(mix.mix_avg_system_impact_AMT    ,0.0))
              ,mix_unique_compiles_CNT       = SUM(COALESCE(mix.mix_unique_compiles_CNT      ,0.0))
              ,mix_Advantage_AMT             = SUM(COALESCE(mix.mix_Advantage_AMT            ,0.0))
              ,mix_advantage_weighted_AMT    = SUM(COALESCE(mix.mix_advantage_weighted_AMT   ,0.0))
              ---------------------
              ,ius_user_total_CNT            = SUM(COALESCE(mix.ius_user_total_CNT           ,0))
              ,ius_user_read_CNT             = SUM(COALESCE(mix.ius_user_read_CNT            ,0))
              ,ius_user_seeks_CNT            = SUM(COALESCE(mix.ius_user_seeks_CNT           ,0))
              ,ius_user_scans_CNT            = SUM(COALESCE(mix.ius_user_scans_CNT           ,0))
              ,ius_system_seeks_CNT          = SUM(COALESCE(mix.ius_system_seeks_CNT         ,0))
              ,ius_system_scans_CNT          = SUM(COALESCE(mix.ius_system_scans_CNT         ,0))
              ---------------------
              ,ius_last_user_seek_DTTM       = MAX(COALESCE(mix.ius_last_user_seek_DTTM      ,0))
              ,ius_last_user_scan_DTTM       = MAX(COALESCE(mix.ius_last_user_scan_DTTM      ,0))
              ,ius_last_system_seek_DTTM     = MAX(COALESCE(mix.ius_last_system_seek_DTTM    ,0))
              ,ius_last_system_scan_DTTM     = MAX(COALESCE(mix.ius_last_system_scan_DTTM    ,0))
         FROM (-- look for missing indexes covering uncovered foreign keys
               SELECT fkc.database_id
                     ,fkc.object_id
                     ,fkc.index_id
                     ,fkc.type
                     ,fkc.sub_type
                     ,mix_index_id = mix.index_id
                     ,mix_type     = mix.type
                     ,mix_sub_type = mix.sub_type
                 FROM [##SQLXL_Index_sys_indexes]       AS fkc
                 JOIN [##SQLXL_Index_sys_indexes]       AS mix
                   ON fkc.type             = N'F'                               -- foreign key constraint
                  AND fkc.database_id      = mix.database_id
                  AND fkc.object_id        = mix.object_id
                  AND N'M'                 = mix.type                           -- missing nonclustered rowstore index
                  AND fkc.key_ordinal_CNT  = mix.key_ordinal_CNT                -- same count of keys
                 JOIN [##SQLXL_Index_sys_index_columns] AS fkc_col
                   ON fkc.database_id      = fkc_col.database_id
                  AND fkc.object_id        = fkc_col.object_id
                  AND fkc.index_id         = fkc_col.index_id
                  AND fkc.type             = fkc_col.type
                  AND fkc.sub_type         = fkc_col.sub_type
                  AND fkc.key_ordinal_CNT <= fkc_col.key_ordinal
                  AND 0                    = fkc_col.is_included_column
                 JOIN [##SQLXL_Index_sys_index_columns] AS mix_col
                   ON mix.database_id      = mix_col.database_id
                  AND mix.object_id        = mix_col.object_id
                  AND mix.type             = mix_col.type
                  AND fkc_col.column_id    = mix_col.column_id
                  AND fkc.key_ordinal_CNT <= mix_col.key_ordinal
                  AND 0                    = mix_col.is_included_column
                WHERE fkc_col.key_overlap_column_list = mix_col.key_overlap_column_list -- same column_id values. Order is not required
              ) AS fkc_mix
         JOIN [##SQLXL_Index_compilation] AS mix
           ON fkc_mix.database_id     = mix.database_id
          AND fkc_mix.object_id       = mix.object_id
          AND fkc_mix.mix_index_id    = mix.index_id
          AND fkc_mix.mix_type        = mix.type
          AND fkc_mix.mix_sub_type    = mix.sub_type
        GROUP BY
              fkc_mix.database_id
             ,fkc_mix.object_id
             ,fkc_mix.index_id
             ,fkc_mix.type
             ,fkc_mix.sub_type
       ) AS fkc_mix
    ON fkc_mix.database_id     = tgt.database_id
   AND fkc_mix.object_id       = tgt.object_id
   AND fkc_mix.index_id        = tgt.index_id
   AND fkc_mix.type            = tgt.type
   AND fkc_mix.sub_type        = tgt.sub_type
 WHERE tgt.type = N'F'
   AND tgt.fkc_best_covering_idx_ID IS NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Add Missing index values to Uncovered Foreign Key Constraints'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Start numeric metrics computations -----------------------------------',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Create [#key_column_filtered_statistics] - Filtered Statistics on key columns
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
--*/
BEGIN TRY
   DROP TABLE [#key_column_filtered_statistics;]
END TRY
BEGIN CATCH
END CATCH

SELECT stat_idx.database_id
      ,stat_idx.object_id
      ,idx_col.column_id
      ,idx_col.index_id
      ,idx_col.type
      ,sub_type                    = 0
      ,idx_col.idx_column_display_sequence
      ,col.name
      ,cnt                         = COUNT_BIG(1)
      ,auto_created                = SUM(IIF(stat.auto_created         = 1,1,0))
      ,no_recompute                = SUM(IIF(stat.no_recompute         = 1,1,0))
      ,is_temporary                = SUM(IIF(stat.is_temporary         = 1,1,0))
      ,is_incremental              = SUM(IIF(stat.is_incremental       = 1,1,0))
      ,has_persisted_sample        = SUM(IIF(stat.has_persisted_sample = 1,1,0))
  INTO [#key_column_filtered_statistics]
/*** LOCAL TESTING ***
SELECT stat_idx.database_id
      ,stat_idx.object_id
      ,idx_col.column_id
      ,idx_col.index_id
      ,idx_col.type
      ,sub_type                    = 0
      ,idx_col.idx_column_display_sequence
      ,col.name
      ,cnt                         = COUNT_BIG(1)
      ,auto_created                = SUM(IIF(stat.auto_created         = 1,1,0))
      ,no_recompute                = SUM(IIF(stat.no_recompute         = 1,1,0))
      ,is_temporary                = SUM(IIF(stat.is_temporary         = 1,1,0))
      ,is_incremental              = SUM(IIF(stat.is_incremental       = 1,1,0))
      ,has_persisted_sample        = SUM(IIF(stat.has_persisted_sample = 1,1,0))
--*/
  FROM (       -- all statistics that are filtered
        SELECT database_id,object_id
              ,stats_id
          FROM [##SQLXL_Index_sys_stats]
         WHERE has_filter = 1
        EXCEPT -- indexes that already have a filter
        SELECT database_id,object_id
              ,index_id
          FROM [##SQLXL_Index_sys_indexes]
         WHERE has_filter = 1
       ) AS stat_idx
  JOIN [##SQLXL_Index_sys_stats] AS stat
    ON stat_idx.database_id     = stat.database_id
   AND stat_idx.object_id       = stat.object_id
   AND stat_idx.stats_id        = stat.stats_id
  JOIN [##SQLXL_Index_sys_sql_expression_dependencies] AS stat_sed
    ON stat_idx.database_id     = stat_sed.database_id
   AND stat_idx.object_id       = stat_sed.referencing_id
   AND stat_idx.stats_id        = stat_sed.referencing_minor_id
   AND 9                        = stat_sed.referencing_class
  JOIN (--
        SELECT database_id,object_id,index_id,type,sub_type
              ,column_id
              ,idx_column_display_sequence
          FROM [##SQLXL_Index_sys_index_columns]            -- includes foreign key columns, missig indexes, full text
         WHERE is_included_column = 0
       ) AS idx_col
    ON stat_idx.database_id         = idx_col.database_id
   AND stat_idx.object_id           = idx_col.object_id
   AND stat_sed.referenced_minor_id = idx_col.column_id
  JOIN [##SQLXL_Index_sys_columns] AS col
    ON stat_idx.database_id         = col.database_id
   AND stat_idx.object_id           = col.object_id
   AND stat_sed.referenced_minor_id = col.column_id
 GROUP BY
       stat_idx.database_id
      ,stat_idx.object_id
      ,idx_col.column_id
      ,idx_col.index_id
      ,idx_col.type
      ,idx_col.sub_type
      ,idx_col.idx_column_display_sequence
      ,col.name
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - create [#key_column_filtered_statistics]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Create temp table of columns to compute aggregates and percents --------------------------------------------------------------------
 since unable to access system metadata column list for global temp tables on Azure SQL Database.
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql            NVARCHAR(MAX)
       ,@ssms_ads       TINYINT       = 2 -- used below to output generated @sql code
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_compilation_compute_columns];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Index_compilation_compute_columns]
      (typ  NVARCHAR(3)   COLLATE Latin1_General_100_CI_AI NULL
      ,name NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Created table [##SQLXL_Index_compilation_compute_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_compilation_compute_columns]
SELECT typ
      ,name
  FROM (VALUES
 (N'SUM',N'buffer_free_KB_CNT')
,(N'SUM',N'buffer_total_KB_CNT')
,(N'SUM',N'cs_delete_buffer_scan_CNT')                      -- columnstore
,(N'SUM',N'cs_index_scan_CNT')                              -- columnstore
,(N'SUM',N'cs_input_groupby_row_CNT')                       -- columnstore
,(N'SUM',N'cs_partition_CNT')                               -- columnstore
,(N'SUM',N'cs_returned_aggregate_CNT')                      -- columnstore
,(N'SUM',N'cs_returned_group_CNT')                          -- columnstore
,(N'SUM',N'cs_returned_row_CNT')                            -- columnstore
,(N'SUM',N'cs_row_group_CNT')                               -- columnstore
,(N'SUM',N'cs_row_group_lock_CNT')                          -- columnstore
,(N'SUM',N'cs_row_group_lock_wait_CNT')                     -- columnstore
,(N'AVG',N'cs_row_group_lock_wait_MS_AVG')                  -- columnstore
,(N'SUM',N'cs_row_group_lock_wait_MS_CNT')                  -- columnstore
,(N'SUM',N'cs_scan_CNT')                                    -- columnstore
,(N'SUM',N'fkc_candidate_covering_MIX_CNT')
,(N'SUM',N'fkc_missing_index_CNT')
,(N'PCT',N'free_pages_in_buffer_PCT')
,(N'SUM',N'hi_bucket_CNT')                                  -- hash index
,(N'SUM',N'in_row_data_page_PG_CNT')
,(N'SUM',N'in_row_reserved_page_PG_CNT')
,(N'SUM',N'in_row_used_page_PG_CNT')
,(N'SUM',N'included_columns_CNT')
,(N'SUM',N'ios_column_value_pull_in_row_CNT')
,(N'SUM',N'ios_column_value_push_off_row_CNT')
,(N'SUM',N'ios_forwarded_fetch_CNT')
,(N'PCT',N'ios_forwarded_fetch_to_read_PCT')
,(N'SUM',N'ios_ghost_version_inrow_CNT')
,(N'SUM',N'ios_ghost_version_off_row_CNT')
,(N'SUM',N'ios_insert_over_ghost_version_inrow_CNT')
,(N'SUM',N'ios_insert_over_ghost_version_off_row_CNT')
,(N'SUM',N'ios_leaf_allocation_CNT')
,(N'SUM',N'ios_leaf_delete_CNT')
,(N'SUM',N'ios_leaf_ghost_CNT')
,(N'SUM',N'ios_leaf_insert_CNT')
,(N'SUM',N'ios_leaf_page_merge_CNT')
,(N'SUM',N'ios_leaf_update_CNT')
,(N'SUM',N'ios_lob_fetch_bytes_CNT')
,(N'SUM',N'ios_lob_fetch_pages_CNT')
,(N'SUM',N'ios_lob_orphan_create_CNT')
,(N'SUM',N'ios_lob_orphan_insert_CNT')
,(N'SUM',N'ios_lock_promotion_attempt_CNT')
,(N'SUM',N'ios_lock_promotion_CNT')
,(N'SUM',N'ios_lock_promotion_fail_CNT')
,(N'SUM',N'ios_nonleaf_allocation_CNT')
,(N'SUM',N'ios_nonleaf_delete_CNT')
,(N'SUM',N'ios_nonleaf_insert_CNT')
,(N'SUM',N'ios_nonleaf_page_merge_CNT')
,(N'SUM',N'ios_nonleaf_update_CNT')
,(N'SUM',N'ios_page_compression_attempt_CNT')
,(N'SUM',N'ios_page_compression_fail_CNT')
,(N'PCT',N'ios_page_compression_fail_PCT')
,(N'SUM',N'ios_page_compression_success_CNT')
,(N'SUM',N'ios_page_io_latch_wait_CNT')
,(N'AVG',N'ios_page_io_latch_wait_MS_AVG')
,(N'SUM',N'ios_page_io_latch_wait_MS_CNT')
,(N'SUM',N'ios_page_latch_wait_CNT')
,(N'AVG',N'ios_page_latch_wait_MS_AVG')
,(N'SUM',N'ios_page_latch_wait_MS_CNT')
,(N'SUM',N'ios_page_lock_CNT')
,(N'SUM',N'ios_page_lock_wait_CNT')
,(N'AVG',N'ios_page_lock_wait_MS_AVG')
,(N'SUM',N'ios_page_lock_wait_MS_CNT')
,(N'SUM',N'ios_partition_CNT')
,(N'SUM',N'ios_range_scan_CNT')
,(N'SUM',N'ios_row_lock_CNT')
,(N'SUM',N'ios_row_lock_wait_CNT')
,(N'AVG',N'ios_row_lock_wait_MS_AVG')
,(N'SUM',N'ios_row_lock_wait_MS_CNT')
,(N'SUM',N'ios_row_overflow_fetch_in_bytes_CNT')
,(N'SUM',N'ios_row_overflow_fetch_in_pages_CNT')
,(N'SUM',N'ios_singleton_lookup_CNT')
,(N'PCT',N'ios_singleton_lookup_to_read_PCT')
,(N'SUM',N'ios_total_Column_value_off_row_CNT')
,(N'SUM',N'ios_total_leaf_Contacts_CNT')
,(N'SUM',N'ios_total_nonleaf_Contacts_CNT')
,(N'SUM',N'ios_tree_page_io_latch_wait_CNT')
,(N'AVG',N'ios_tree_page_io_latch_wait_MS_AVG')
,(N'SUM',N'ios_tree_page_io_latch_wait_MS_CNT')
,(N'SUM',N'ios_tree_page_latch_wait_CNT')
,(N'AVG',N'ios_tree_page_latch_wait_MS_AVG')
,(N'SUM',N'ios_tree_page_latch_wait_MS_CNT')
,(N'SUM',N'ios_version_generated_inrow_CNT')
,(N'SUM',N'ios_version_generated_off_row_CNT')
,(N'MIN',N'ius_last_read_days_ago')
,(N'MAX',N'ius_last_system_lookup_DTTM')
,(N'MAX',N'ius_last_system_scan_DTTM')
,(N'MAX',N'ius_last_system_seek_DTTM')
,(N'MAX',N'ius_last_system_update_DTTM')
,(N'MAX',N'ius_last_user_lookup_DTTM')
,(N'MAX',N'ius_last_user_scan_DTTM')
,(N'MAX',N'ius_last_user_seek_DTTM')
,(N'MAX',N'ius_last_user_update_DTTM')
,(N'MIN',N'ius_last_write_days_ago')
,(N'PCT',N'ius_lookups_to_read_PCT')
,(N'SUM',N'ius_no_read_user_updates_CNT')
,(N'PCT',N'ius_read_to_parent_PCT')
,(N'RAT',N'ius_read_to_write_RAT')
,(N'PCT',N'ius_scans_to_read_PCT')
,(N'PCT',N'ius_seeks_to_read_PCT')
,(N'SUM',N'ius_system_lookups_CNT')
,(N'SUM',N'ius_system_scans_CNT')
,(N'SUM',N'ius_system_seeks_CNT')
,(N'SUM',N'ius_system_updates_CNT')
,(N'SUM',N'ius_user_lookups_CNT')
,(N'SUM',N'ius_user_read_CNT')
,(N'SUM',N'ius_user_scans_CNT')
,(N'SUM',N'ius_user_seeks_CNT')
,(N'SUM',N'ius_user_total_CNT')
,(N'SUM',N'ius_user_updates_CNT')
,(N'PCT',N'ius_write_to_instance_PCT')
,(N'PCT',N'ius_write_to_parent_PCT')
,(N'SUM',N'lob_reserved_page_PG_CNT')
,(N'SUM',N'lob_used_page_PG_CNT')
,(N'SUM',N'mix_Advantage_AMT')
,(N'SUM',N'mix_advantage_weighted_AMT')
,(N'SUM',N'mix_avg_system_impact_AMT')
,(N'SUM',N'mix_avg_total_system_cost_AMT')
,(N'SUM',N'mix_avg_total_user_cost_AMT')
,(N'SUM',N'mix_avg_user_impact_AMT')
,(N'SUM',N'mix_unique_compiles_CNT')
,(N'SUM',N'ops_no_read_total_write_CNT')
,(N'PCT',N'ops_read_to_parent_PCT')
,(N'RAT',N'ops_read_to_write_RAT')
,(N'PCT',N'ops_scans_to_read_PCT')
,(N'SUM',N'ops_total_contacts_CNT')
,(N'SUM',N'ops_total_delete_CNT')
,(N'SUM',N'ops_total_insert_CNT')
,(N'SUM',N'ops_total_lock_CNT')
,(N'SUM',N'ops_total_lock_wait_CNT')
,(N'AVG',N'ops_total_lock_wait_MS_AVG')
,(N'SUM',N'ops_total_lock_wait_MS_CNT')
,(N'SUM',N'ops_total_page_merge_CNT')
,(N'SUM',N'ops_total_page_split_CNT')
,(N'SUM',N'ops_total_read_CNT')
,(N'SUM',N'ops_total_scan_CNT')
,(N'SUM',N'ops_total_scan_retries_CNT')
,(N'SUM',N'ops_total_update_CNT')
,(N'SUM',N'ops_total_wait_CNT')
,(N'AVG',N'ops_total_wait_MS_AVG')
,(N'SUM',N'ops_total_wait_MS_CNT')
,(N'SUM',N'ops_total_write_CNT')
,(N'PCT',N'ops_write_to_instance_PCT')
,(N'PCT',N'ops_write_to_parent_PCT')
,(N'RAT',N'page_lock_to_all_lock_PCT')
,(N'PCT',N'page_merge_to_write_PCT')
,(N'PCT',N'page_splits_to_write_PCT')
,(N'SUM',N'reserved_page_PG_CNT')
,(N'SUM',N'row_overflow_reserved_page_PG_CNT')
,(N'SUM',N'row_overflow_used_page_PG_CNT')
,(N'SUM',N'used_page_PG_CNT')
,(N'PCT',N'used_pages_in_buffer_PCT')
,(N'SUM',N'xtp_allocated_bytes_CNT')
,(N'SUM',N'xtp_allocation_CNT')
,(N'SUM',N'xtp_delta_pages_CNT')
,(N'SUM',N'xtp_key_merge_CNT')
,(N'SUM',N'xtp_key_merge_retry_CNT')
,(N'PCT',N'xtp_key_merge_retry_PCT')
,(N'SUM',N'xtp_key_split_CNT')
,(N'SUM',N'xtp_key_split_retry_CNT')
,(N'PCT',N'xtp_key_split_retry_PCT')
,(N'SUM',N'xtp_leaf_pages_CNT')
,(N'SUM',N'xtp_page_consolidation_CNT')
,(N'SUM',N'xtp_page_consolidation_retry_CNT')
,(N'PCT',N'xtp_page_consolidation_retry_PCT')
,(N'SUM',N'xtp_page_merge_CNT')
,(N'SUM',N'xtp_page_merge_retry_CNT')
,(N'PCT',N'xtp_page_merge_retry_PCT')
,(N'SUM',N'xtp_page_split_CNT')
,(N'SUM',N'xtp_page_split_retry_CNT')
,(N'PCT',N'xtp_page_split_retry_PCT')
,(N'SUM',N'xtp_page_update_CNT')
,(N'SUM',N'xtp_page_update_retry_CNT')
,(N'PCT',N'xtp_page_update_retry_PCT')
,(N'SUM',N'xtp_row_delete_attempts_CNT')
,(N'SUM',N'xtp_row_insert_attempts_CNT')
,(N'SUM',N'xtp_row_update_attempts_CNT')
,(N'SUM',N'xtp_rows_returned_CNT')
,(N'SUM',N'xtp_rows_touched_CNT')
,(N'SUM',N'xtp_scans_retries_CNT')
,(N'SUM',N'xtp_scans_started_CNT')
,(N'SUM',N'xtp_unique_constraint_violations_CNT')
,(N'SUM',N'xtp_used_bytes_CNT')
,(N'SUM',N'xtp_write_conflicts_CNT')
) AS v(typ,name)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

/*** Computed columns with special cases
,(N'SUM',N'index_CNT')
,(N'SUM',N'key_ordinal_CNT')
,(N'SUM',N'partition_CNT')
,(N'SUM',N'partition_columnstore_archive_compress_CNT')
,(N'SUM',N'partition_columnstore_compress_CNT')
,(N'MAX',N'partition_function_create_DTTM')
,(N'MAX',N'partition_function_modify_DTTM')
,(N'SUM',N'partition_none_compress_CNT')
,(N'SUM',N'partition_row_compress_CNT')
,(N'SUM',N'partition_page_compress_CNT')
,(N'SUM',N'partition_xml_compress_CNT')
,(N'MAX',N'row_CNT')
,(N'SUM',N'stathdr_row_CNT')
,(N'SUM',N'stathdr_rows_sampled_CNT')
,(N'SUM',N'Stats_CNT')
,(N'SUM',N'stats_prop_modification_CNT')
,(N'MIN',N'stats_prop_updated_days_ago')
,(N'AVG',N'tbl_row_size_byte_AVG')
*/

/*** Candidate Computed columns not in Compilation table
,(N'MAX',N'partition_function_create_date') -- in [##SQLXL_Index_data_spaces]
,(N'MAX',N'partition_function_modify_date') -- in [##SQLXL_Index_data_spaces]
*/

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Inserted [##SQLXL_Index_compilation_compute_columns]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *** LOCAL TESTING ***
 Identify candidate columns that are not included in the column compute list above
   AND (   t.name = N'FLOAT'
        OR t.name = N'BIGINT'
        OR t.name = N'DATETIME'
       )

USE tempdb;

SELECT c.name COLLATE Latin1_General_100_CI_AI
FROM sys.columns AS c
JOIN sys.types   AS t
  ON c.user_type_id = t.user_type_id
 WHERE object_id = object_id(N'##SQLXL_Index_compilation')
   AND (   (t.name = N'FLOAT'    AND c.name LIKE N'%_AMT')
        OR (t.name = N'FLOAT'    AND c.name LIKE N'%_AVG')
        OR (t.name = N'BIGINT'   AND c.name LIKE N'%_CNT')
        OR (t.name = N'DATETIME' AND c.name LIKE N'%_DTTM')
        OR (t.name = N'FLOAT'    AND c.name LIKE N'%_PCT')
        OR (t.name = N'FLOAT'    AND c.name LIKE N'%_RAT')
       )
EXCEPT
SELECT name COLLATE Latin1_General_100_CI_AI
  FROM [##SQLXL_Index_compilation_compute_columns]
 ORDER BY 1

-- ALl columns by data type
SELECT c.name COLLATE Latin1_General_100_CI_AI
FROM sys.columns AS c
JOIN sys.types   AS t
  ON c.user_type_id = t.user_type_id
 WHERE object_id = object_id(N'##SQLXL_Index_compilation')
   AND (   (t.name = N'FLOAT'   )
        OR (t.name = N'BIGINT'  )
        OR (t.name = N'DATETIME')
       )
EXCEPT
SELECT name COLLATE Latin1_General_100_CI_AI
  FROM [##SQLXL_Index_compilation_compute_columns]
 ORDER BY 1
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
 *Task* Compute performance metric column totals for Internal/system, history/Archive, Parent, Database, and Instance levels
 Omit Missing indexes usage statistics since already included in exiting index & heap totals
 NOTE: Parent level performance metrics includes totals from system/internal & history tables
 Use dynamic SQL to create list of columns from table of columns above
 ******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT       ON
SET ANSI_WARNINGS ON
DECLARE @sql        NVARCHAR(MAX)
       ,@msg        NVARCHAR(MAX)
       ,@step_exec_dttm  DATETIME = GETDATE()
       ,@ssms_ads   TINYINT  = 2;
--*/
SET @sql = N'-- Compute metric column totals
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET ' + STUFF((-- list of columns to update with totals
                  SELECT  NCHAR(13) + NCHAR(10)
                        + N'      ,'
                        + c.name + N' = COALESCE(src.' + c.name + N',0)'
                    FROM [##SQLXL_Index_compilation_compute_columns] AS c
                   WHERE c.typ         = N'SUM'
                     AND c.name NOT LIKE N'mix_%'
                     FOR XML PATH(N''), TYPE                                                        -- column summation
                 ).value('.',N'NVARCHAR(MAX)')
                ,1,9,N'')
+ N'
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
  JOIN (--
        SELECT database_id      = CASE WHEN ic.database_id IS NULL
                                       THEN 0
                                       ELSE ic.database_id
                                  END
              ,parent_object_id = CASE WHEN ic.database_id IS NULL
                                       THEN 0
                                       WHEN obj.parent_object_id IS NULL
                                       THEN ic.database_id
                                       ELSE obj.parent_object_id
                                  END
              ,object_id        = CASE WHEN ic.database_id       IS NULL
                                       THEN 0
                                       WHEN obj.parent_object_id IS NULL
                                       THEN ic.database_id
                                       WHEN ic.object_id         IS NULL
                                       THEN obj.parent_object_id
                                       ELSE ic.object_id
                                  END
              ,index_id         = CASE WHEN ic.database_id       IS NULL
                                       THEN 0
                                       WHEN obj.parent_object_id IS NULL
                                       THEN ic.database_id
                                       WHEN ic.object_id         IS NULL
                                       THEN obj.parent_object_id
                                       ELSE ic.object_id
                                  END'
              + (-- get list of columns to total up
                 SELECT  NCHAR(13) + NCHAR(10)
                       + N'              ,'
                       + c.name + N' = SUM(COALESCE(ic.' + c.name + N',0))'
                   FROM [##SQLXL_Index_compilation_compute_columns] AS c
                  WHERE c.typ         = N'SUM'
                    AND c.name NOT LIKE N'mix_%'
                    FOR XML PATH(N''), TYPE                                                         -- column summation
                ).value('.',N'NVARCHAR(MAX)')
+ N'
          FROM [##SQLXL_Index_compilation] AS ic
          JOIN [##SQLXL_Index_sys_objects] AS obj
            ON ic.database_id = obj.database_id
           AND ic.object_id   = obj.object_id
         WHERE ic.rec_type    = N''I''                 -- index level composite record
           AND ic.type       <> N''M''                 -- omit missing index usage totals since already included in index & heap metrics
         GROUP BY
               ROLLUP (ic.database_id
                      ,obj.parent_object_id
                      ,ic.object_id
                      )
        HAVING obj.parent_object_id <> ic.object_id
            OR ic.object_id IS NULL
       ) AS src
    ON N''I''          <> tgt.rec_type                      -- do not want to update index-level compsoite records
   AND src.database_id  = tgt.database_id
   AND src.object_id    = tgt.object_id
   AND src.index_id     = tgt.index_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_edge_constraints]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Rollup metric totals to instance, database, parent, history, & internal/system levels'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Compute performance metric column totals for missing indexes
 NOTE: Parent level performance metrics includes totals from system/internal & history tables
 Use dynamic SQL to create list of columns from table of columns above
 ******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT       ON
SET ANSI_WARNINGS ON
DECLARE @sql        NVARCHAR(MAX)
       ,@msg        NVARCHAR(MAX)
       ,@step_exec_dttm  DATETIME = GETDATE()
       ,@ssms_ads   TINYINT  = 2;
--*/
SET @sql = N'-- Compute metric column totals
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET ' + STUFF((-- list of columns to update with totals
                  SELECT  NCHAR(13) + NCHAR(10)
                        + N'      ,'
                        + c.name + N' = COALESCE(src.' + c.name + N',0)'
                    FROM [##SQLXL_Index_compilation_compute_columns] AS c
                   WHERE c.typ     = N'SUM'
                     AND c.name LIKE N'mix_%'
                     FOR XML PATH(N''), TYPE                                                        -- column summation
                 ).value('.',N'NVARCHAR(MAX)')
                ,1,9,N'')
+ N'
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
  JOIN (--
        SELECT database_id      = CASE WHEN ic.database_id IS NULL
                                       THEN 0
                                       ELSE ic.database_id
                                  END
              ,parent_object_id = CASE WHEN ic.database_id IS NULL
                                       THEN 0
                                       WHEN obj.parent_object_id IS NULL
                                       THEN ic.database_id
                                       ELSE obj.parent_object_id
                                  END
              ,object_id        = CASE WHEN ic.database_id       IS NULL
                                       THEN 0
                                       WHEN obj.parent_object_id IS NULL
                                       THEN ic.database_id
                                       WHEN ic.object_id         IS NULL
                                       THEN obj.parent_object_id
                                       ELSE ic.object_id
                                  END
              ,index_id         = CASE WHEN ic.database_id       IS NULL
                                       THEN 0
                                       WHEN obj.parent_object_id IS NULL
                                       THEN ic.database_id
                                       WHEN ic.object_id         IS NULL
                                       THEN obj.parent_object_id
                                       ELSE ic.object_id
                                  END'
              + (-- get list of columns to total up
                 SELECT  NCHAR(13) + NCHAR(10)
                       + N'              ,'
                       + c.name + N' = SUM(COALESCE(ic.' + c.name + N',0))'
                   FROM [##SQLXL_Index_compilation_compute_columns] AS c
                  WHERE c.typ     = N'SUM'
                    AND c.name LIKE N'mix_%'
                  FOR XML PATH(N''), TYPE                                                           -- column summation
                ).value('.',N'NVARCHAR(MAX)')
+ N'
          FROM [##SQLXL_Index_compilation] AS ic
          JOIN [##SQLXL_Index_sys_objects] AS obj
            ON ic.database_id = obj.database_id
           AND ic.object_id   = obj.object_id
         WHERE ic.type        = N''M''                      -- missing index
         GROUP BY
               ROLLUP (ic.database_id
                      ,obj.parent_object_id
                      ,ic.object_id
                      )
        HAVING obj.parent_object_id <> ic.object_id
            OR ic.object_id IS NULL
       ) AS src
    ON N''I''          <> tgt.rec_type                      -- do not want to update index-level compsoite records
   AND src.database_id  = tgt.database_id
   AND src.object_id    = tgt.object_id
   AND src.index_id     = tgt.index_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 -- SSMS/ADS and first database only
SELECT '[##SQLXL_Index_sys_edge_constraints]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Rollup missing index totals to instance, database, parent, history, & internal/system levels'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* rollup specialty index metrics with values from internal/system tables - XML, JSON, spatial, fulltext
 Use dynamic SQL to create list of columns from table of columns above
 ******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql        NVARCHAR(MAX)
       ,@msg        NVARCHAR(MAX)
       ,@step_exec_dttm  DATETIME = GETDATE()
       ,@ssms_ads   TINYINT  = 2;
--*/
SET @sql = N'-- Add to specialty index metrics
SET ANSI_WARNINGS OFF;
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET ' + STUFF((-- list of columns to update with totals
                  SELECT  NCHAR(13) + NCHAR(10)
                        + N'      ,'
                        + c.name + N' = tgt.' + c.name + N' + COALESCE(src.' + c.name + N',0)'
                    FROM [##SQLXL_Index_compilation_compute_columns] AS c
                   WHERE c.typ = N'SUM'
                     FOR XML PATH(N''), TYPE                                                        -- column summation
                 ).value('.',N'NVARCHAR(MAX)')
                ,1,9,N'')
+ N'
  FROM (--
        SELECT obj.database_id
              ,obj.parent_object_id AS object_id
              ,CASE WHEN src.obj_type_dtl LIKE N''FTX%''
                    THEN obj.parent_object_id
                    WHEN par.sub_type = 207 -- EXTENDED_INDEXES (such as a spatial index)
                      OR src.obj_type_dtl LIKE N''XML%''
                      OR src.obj_type_dtl LIKE N''JSN%''                                            -- <FUTURE> JSON index
                    THEN CAST(RIGHT(par.name,CHARINDEX(N''_'',REVERSE(par.name))-1) AS INT)
                    ELSE NULL
               END AS index_id
              ,CASE WHEN src.obj_type_dtl LIKE N''FTX%'' THEN N''T''
                    WHEN src.obj_type_dtl LIKE N''XML%'' THEN N''3''
                    WHEN src.obj_type_dtl LIKE N''JSN%'' THEN N''9''                                -- <FUTURE> JSON index
                    WHEN par.sub_type        = 207       THEN N''4''
               END AS type
              ,src.sub_type'

             + (-- get list of columns to total up
                SELECT  NCHAR(13) + NCHAR(10)
                      + N'              ,' + c.name + N' = SUM(src.' + c.name + N')'
                   FROM [##SQLXL_Index_compilation_compute_columns] AS c
                  WHERE c.typ = N'SUM'
                  FOR XML PATH(N''), TYPE                                                           -- column summation
               ).value('.',N'NVARCHAR(MAX)')

+ N'
          FROM [##SQLXL_Index_compilation] AS src
          JOIN [##SQLXL_Index_compilation] AS par
            ON src.database_id = par.database_id
           AND src.object_id   = par.object_id
           AND N''S''          = par.rec_type     -- system/internal table aggregate record
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_objects] AS obj
            ON src.database_id = obj.database_id
           AND src.object_id   = obj.object_id
         WHERE src.rec_type  = N''I''
           AND (   src.obj_type_dtl LIKE N''FTX%''
                OR src.obj_type_dtl LIKE N''XML%''
                OR src.obj_type_dtl LIKE N''JSN%''                                                  -- <FUTURE> JSON index
                OR par.sub_type        = 207
               )
         GROUP BY
               obj.database_id,obj.parent_object_id
              ,CASE WHEN src.obj_type_dtl LIKE N''FTX%''
                    THEN obj.parent_object_id
                    WHEN par.sub_type = 207 -- EXTENDED_INDEXES (such as a spatial index)
                      OR src.obj_type_dtl LIKE N''XML%''
                      OR src.obj_type_dtl LIKE N''JSN%''                                            -- <FUTURE> JSON index
                    THEN CAST(RIGHT(par.name,CHARINDEX(N''_'',REVERSE(par.name))-1) AS INT)
                    ELSE NULL
               END
              ,CASE WHEN src.obj_type_dtl LIKE N''FTX%'' THEN N''T''
                    WHEN src.obj_type_dtl LIKE N''XML%'' THEN N''3''
                    WHEN src.obj_type_dtl LIKE N''JSN%'' THEN N''9''                                -- <FUTURE> JSON index
                    WHEN par.sub_type        = 207       THEN N''4''
               END
              ,src.sub_type
        ) AS src
  JOIN [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
   AND tgt.index_id    = src.index_id
   AND tgt.type        = src.type
   AND tgt.sub_type    = src.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

IF @ssms_ads > 1 -- SSMS/ADS
SELECT '[##SQLXL_Index_sys_edge_constraints]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Add to specialty index metrics with values from internal/system tables - xml, spatial, fulltext, JSON'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Compute MAX values for Parent - only includes direct user access of parent user table
 NOTE: fulltext indexes only have crawl_start_date, crawl_end_date
 Use dynamic SQL to create list of columns and then populate each one
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql       NVARCHAR(MAX)
       ,@ssms_ads   TINYINT  = 2
--*/

SET @sql = N'-- Compute MAX values for Parent
SET ANSI_WARNINGS OFF;
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET ' + STUFF((--
                  SELECT NCHAR(13) + NCHAR(10) + N'      ,' + c.name + N' = src.' + c.name -- No COALESCE since no date is NULL
                    FROM [##SQLXL_Index_compilation_compute_columns] AS c
                   WHERE c.typ IN (N'MAX'
                                  ,N'MIN'
                                  )
                     FOR XML PATH(N''), TYPE                                                        -- column summation
                 ).value('.',N'NVARCHAR(MAX)')
                ,1,9,N'') -- includes the first CR + LF too!
+ N'
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_compilation] WITH (TABLOCKX)
         WHERE rec_type IN (N''H''         -- history/archive level aggregate record
                           ,N''P''         -- parent level aggregate record
                           ,N''S''         -- system/internal level aggregate record
                           )
       ) AS tgt -- [##SQLXL_Index_compilation]
  JOIN (--
        SELECT database_id,object_id'
              + (--
                 SELECT NCHAR(13) + NCHAR(10) + N'              ,'
                       + c.name + N' = '
                       + UPPER(c.typ)
                       + N'(' + c.name + N')'
                    FROM [##SQLXL_Index_compilation_compute_columns] AS c
                   WHERE c.typ IN (N'MAX'
                                  ,N'MIN'
                                  )
                     FOR XML PATH(N''), TYPE                                                        -- column summation
                ).value('.',N'NVARCHAR(MAX)')
+ N'
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type = N''I''                                                                    -- index level composite record
         GROUP BY
               database_id,object_id
       ) AS src
    ON tgt.database_id = src.database_id
   AND tgt.object_id   = src.object_id
   AND tgt.index_id    = src.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);
SET ANSI_WARNINGS ON;'

IF @ssms_ads > 1 -- SSMS/ADS
SELECT '[##SQLXL_Index_sys_edge_constraints]'
      ,lsql = LEN(@sql)
      ,sql1 = SUBSTRING(@sql,    1,16383)
      ,sql2 = SUBSTRING(@sql,16384,16383)
      ,sql3 = SUBSTRING(@sql,32768,16383);

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Parent MAX Values - Latest DTTM, last read/write days ago, row count'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Update row_count value for fulltext indexes using fulltext_INDEXED_DOCID
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET row_CNT = src.row_CNT
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
         WHERE type        = N'T'          -- full-text index of a tabular object
           AND sub_type    = 0
       ) AS tgt -- [##SQLXL_Index_compilation]
  JOIN (--
        SELECT obj.database_id
              ,object_id       = obj.parent_object_id
              ,itbl.row_CNT
          FROM [##SQLXL_Index_sys_objects] AS obj
          JOIN [##SQLXL_Index_compilation] AS itbl
            ON N'S'            = itbl.rec_type              -- system/internal level aggregate record
           AND obj.database_id = itbl.database_id
           AND obj.object_id   = itbl.object_id
           AND obj.type        = itbl.type
         WHERE N'IT'           = obj.type                   -- internal table object type
           AND obj.sub_type_desc = N'fulltext_INDEXED_DOCID'
       ) AS src
   ON tgt.database_id = src.database_id
  AND tgt.object_id   = src.object_id
  AND tgt.index_id    = src.object_id -- only 1 fulltext index per table
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update row_CNT for fulltext indexes using fulltext_INDEXED_DOCID'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Compute All millisecond (_MS) average (_AVG) computed values for All Records
 Requires all other values computed. Calculates for all levels (Index->Parent->Database->Instance)
 Use dynamic SQL to create list of columns and then populate each one
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql NVARCHAR(MAX)
--*/
SET @sql = N'-- Compute All millisecond (_MS) average (_AVG) computed values
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET ' + STUFF((--
                  SELECT NCHAR(13) + NCHAR(10)
                        + N'      ,'
                        + c.name + N' = IIF(' + REPLACE(c.name,N'_MS_AVG',N'_CNT') + N' ' + NCHAR(62) + N' 0' -- NCHAR(62) is ">"
                                       + N',1.0 * COALESCE(' + REPLACE(c.name,N'_MS_AVG',N'_MS_CNT')
                                                             + N',0.0) / '
                                                             + REPLACE(c.name,N'_MS_AVG',N'_CNT')
                                                      + N',NULL)'
                   FROM [##SQLXL_Index_compilation_compute_columns] AS c
                  WHERE c.typ = N'AVG'
                     FOR XML PATH(N''), TYPE                                                        -- column summation
                 ).value('.',N'NVARCHAR(MAX)')
                ,1,9,N'')
+ N'
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Calculated all millisecond Averages'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Compute Update [##SQLXL_Index_compilation] percents and ratios of Parent & Instance
 Index/Internal Table/History table of Parent table/view, parent table of instance
 Requires all other values computed.
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
 ius_read_to_write_RAT     = IIF(tgt.ius_user_updates_CNT > 0,1.0 * COALESCE(tgt.ius_user_read_CNT ,0) / tgt.ius_user_updates_CNT,NULL)
,ops_read_to_write_RAT     = IIF(tgt.ops_total_write_CNT  > 0,1.0 * COALESCE(tgt.ops_total_read_CNT,0) / tgt.ops_total_write_CNT ,NULL)
------------------------------------------------------------
,page_lock_to_all_lock_PCT = IIF((tgt.ios_row_lock_CNT + tgt.ios_page_lock_CNT) > 0
                                ,100.0 * COALESCE(tgt.ios_page_lock_CNT ,0) / (tgt.ios_row_lock_CNT + tgt.ios_page_lock_CNT)
                                ,NULL)
,ius_scans_to_read_PCT     = IIF(tgt.ius_user_read_CNT    > 0,100.0 * tgt.ius_user_scans_CNT   / tgt.ius_user_read_CNT ,NULL)
,ius_lookups_to_read_PCT   = IIF(tgt.ius_user_read_CNT    > 0,100.0 * tgt.ius_user_lookups_CNT / tgt.ius_user_read_CNT ,NULL)
,ius_seeks_to_read_PCT     = IIF(tgt.ius_user_read_CNT    > 0,100.0 * tgt.ius_user_seeks_CNT   / tgt.ius_user_read_CNT ,NULL)
------------------------------------------------------------
,ops_scans_to_read_PCT            = IIF(tgt.ops_total_read_CNT > 0,100.0 * tgt.ops_total_scan_CNT       / tgt.ops_total_read_CNT,NULL)
                                    -- NOTE: COLUMNSTORE excluded from above since ALL reads are SCANS
,ios_singleton_lookup_to_read_PCT = IIF(tgt.ops_total_read_CNT > 0,100.0 * tgt.ios_singleton_lookup_CNT / tgt.ops_total_read_CNT,NULL)
,ios_forwarded_fetch_to_read_PCT  = IIF(tgt.ops_total_read_CNT > 0,100.0 * tgt.ios_forwarded_fetch_CNT  / tgt.ops_total_read_CNT,NULL)
,page_splits_to_write_PCT         = IIF((COALESCE(tgt.ops_total_insert_CNT,0) + COALESCE(tgt.ops_total_update_CNT,0)) > 0
                                       ,100.0 *  tgt.ops_total_page_split_CNT / (tgt.ops_total_insert_CNT + tgt.ops_total_update_CNT)
                                       ,NULL)
,page_merge_to_write_PCT          = IIF(tgt.ops_total_write_CNT > 0
                                       ,100.0 * COALESCE(tgt.ops_total_page_merge_CNT,0) / tgt.ops_total_write_CNT
                                       ,NULL)
,ios_page_compression_fail_PCT    = IIF(tgt.ios_page_compression_attempt_CNT > 0
                                       ,100.0 * tgt.ios_page_compression_fail_CNT / tgt.ios_page_compression_attempt_CNT
                                       ,NULL)
------------------------------------------------------------
,used_pages_in_buffer_PCT         = IIF(tgt.reserved_page_PG_CNT > 0
                                       ,100.0 * tgt.buffer_total_KB_CNT / (tgt.reserved_page_PG_CNT * 8.0)
                                       ,NULL)
------------------------------------------------------------
-- Parent percents - index => table, table => instance
------------------------------------------------------------
,ius_read_to_parent_PCT    = IIF(IIF(tgt.rec_type = N'I',p.ius_user_read_CNT   ,a.ius_user_read_CNT   ) > 0
                                ,100.0 * tgt.ius_user_read_CNT    / IIF(tgt.rec_type = N'I',p.ius_user_read_CNT   ,a.ius_user_read_CNT   )
                                ,0.0)
,ius_write_to_parent_PCT   = IIF(IIF(tgt.rec_type = N'I',p.ius_user_updates_CNT,a.ius_user_updates_CNT) > 0
                                ,100.0 * tgt.ius_user_updates_CNT / IIF(tgt.rec_type = N'I',p.ius_user_updates_CNT,a.ius_user_updates_CNT)
                                ,0.0)
,ops_read_to_parent_PCT    = IIF(IIF(tgt.rec_type = N'I',p.ops_total_read_CNT  ,a.ops_total_read_CNT  ) > 0
                                ,100.0 * tgt.ops_total_read_CNT   / IIF(tgt.rec_type = N'I',p.ops_total_read_CNT  ,a.ops_total_read_CNT  )
                                ,0.0)
,ops_write_to_parent_PCT   = IIF(IIF(tgt.rec_type = N'I',p.ops_total_write_CNT ,a.ops_total_write_CNT ) > 0
                                ,100.0 * tgt.ops_total_write_CNT  / IIF(tgt.rec_type = N'I',p.ops_total_write_CNT ,a.ops_total_write_CNT )
                                ,0.0)
------------------------------------------------------------
-- Instance percents - index => instance
------------------------------------------------------------
,ius_write_to_instance_PCT      = IIF(a.ius_user_updates_CNT > 0,100.0 * tgt.ius_user_updates_CNT / a.ius_user_updates_CNT,0)
,ius_scans_to_instance_PCT      = IIF(a.ius_user_scans_CNT   > 0,100.0 * tgt.ius_user_scans_CNT   / a.ius_user_scans_CNT,0)
,ops_total_scan_to_instance_PCT = IIF(a.ops_total_scan_CNT   > 0,100.0 * tgt.ops_total_scan_CNT   / a.ops_total_scan_CNT  ,0)
                                  -- NOTE: COLUMNSTORE excluded from above since ALL reads are SCANS
,ops_write_to_instance_PCT      = IIF(a.ops_total_write_CNT  > 0,100.0 * tgt.ops_total_write_CNT  / a.ops_total_write_CNT ,0)

  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE type = N'A') AS a                   -- instance level aggregate record
 CROSS
  JOIN [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)                 -- all aggregate & composite records
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON tgt.database_id = obj.database_id
   AND tgt.object_id   = obj.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_compilation] AS p                                   -- parent level aggregate record
    ON obj.database_id      = p.database_id
   AND obj.parent_object_id = p.object_id
   AND obj.parent_object_id = p.index_id
   AND N'P'                 = p.rec_type                                  -- parent level aggregate record
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Calculate percents and ratios - Index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Compute metrics as percent of Parent or Instance
 Table [##SQLXL_Index_Metrics] is required to exist before creating procedure [##SQLXL_Index_Present] & it is created below
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql        NVARCHAR(MAX)
       ,@ssms_ads       TINYINT = 1
       ,@msg       N(1000)
       ,@step_exec_dttm  DATETIME      = GETDATE()
--*/
BEGIN TRY
   TRUNCATE TABLE [##SQLXL_Index_Metrics]
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
   DROP INDEX ixuc_SQLXL_Index_Metrics ON [##SQLXL_Index_Metrics];
END TRY
BEGIN CATCH
END CATCH


--------------------------------------------------------------------------------------------------------------------------------------------
-- Insert All millisecond (_MS) average (_AVG) computed values to [##SQLXL_Index_Metrics]
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Metrics] WITH (TABLOCKX)
      (rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,metric
      ,metric_AMT
      ,metric_fmt
      )
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,'ops_total_wait_MS_AVG'
      ,ops_total_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ops_total_wait_MS_AVG, N'ms')
  FROM [##SQLXL_Index_compilation] AS ic
 WHERE ops_total_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,'ops_total_lock_wait_MS_AVG'
      ,ops_total_lock_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ops_total_lock_wait_MS_AVG, N'ms')
  FROM [##SQLXL_Index_compilation] AS ic
 WHERE ops_total_lock_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,'ios_row_lock_wait_MS_AVG'
      ,ios_row_lock_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_row_lock_wait_MS_AVG, N'ms')
  FROM [##SQLXL_Index_compilation] AS ic
 WHERE ios_row_lock_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,'ios_page_lock_wait_MS_AVG'
      ,ios_page_lock_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_page_lock_wait_MS_AVG, N'ms')
  FROM [##SQLXL_Index_compilation] AS ic
 WHERE ios_page_lock_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,'ios_page_latch_wait_MS_AVG'
      ,ios_page_latch_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_page_latch_wait_MS_AVG, N'ms')
  FROM [##SQLXL_Index_compilation] AS ic
 WHERE ios_page_latch_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,'ios_page_io_latch_wait_MS_AVG'
      ,ios_page_io_latch_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_page_io_latch_wait_MS_AVG, N'ms')
  FROM [##SQLXL_Index_compilation] AS ic
 WHERE ios_page_io_latch_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,'ios_tree_page_latch_wait_MS_AVG'
      ,ios_tree_page_latch_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_tree_page_latch_wait_MS_AVG, N'ms')
  FROM [##SQLXL_Index_compilation] AS ic
 WHERE ios_tree_page_latch_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,'ios_tree_page_io_latch_wait_MS_AVG'
      ,ios_tree_page_io_latch_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](ios_tree_page_io_latch_wait_MS_AVG, N'ms')
  FROM [##SQLXL_Index_compilation] AS ic
 WHERE ios_tree_page_io_latch_wait_MS_AVG > 0.0
UNION ALL
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,'cs_row_group_lock_wait_MS_AVG'
      ,cs_row_group_lock_wait_MS_AVG
      ,[dbo].[SQLXL_3SD](cs_row_group_lock_wait_MS_AVG, N'ms')
  FROM [##SQLXL_Index_compilation] AS ic
 WHERE cs_row_group_lock_wait_MS_AVG > 0.0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Add all millisecond Averages to [##SQLXL_Index_Metrics]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Compute index SUM metrics as percent of Parent or Instance',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;


/******************************************************************************************************************************************\
 *Task* Compute Cursor through all Parent & index Metrics - AMT (FLOAT) & CNT (%INT)
 Excludes %_AVG            handled separately
          %_PCT            handled separately
          %_RAT            handled separately
          partition_%
          key_ordinal_CNT
          row_CNT
          clr_trigger_CNT
          sql_trigger_CNT
          is_instead_of_trigger_CNT
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DROP INDEX ixuc_SQLXL_Index_Metrics ON [##SQLXL_Index_Metrics];

SET STATISTICS TIME OFF
TRUNCATE TABLE [##SQLXL_Index_Metrics];
SET NOCOUNT ON
DECLARE @sql            NVARCHAR(MAX)
       ,@ssms_ads       TINYINT = 1
       ,@msg            NVARCHAR(1000)
       ,@step_exec_dttm DATETIME       = GETDATE()
--*/

DECLARE @column_name NVARCHAR(MAX);

DECLARE agg_crsr CURSOR LOCAL FAST_FORWARD FOR
SELECT name
  FROM [##SQLXL_Index_compilation_compute_columns]
 WHERE typ = N'SUM'
 ORDER BY
       name;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Loop through cursor of columns to calculate INDEX level values as percent of PARENT & PARENT values as percent of INSTANCE
-- <FUTURE> replace cursor with list of columns
--------------------------------------------------------------------------------------------------------------------------------------------
OPEN agg_crsr;

WHILE 1 = 1 BEGIN
   FETCH NEXT
    FROM agg_crsr
    INTO @column_name;

   IF @@fetch_status <> 0 BREAK

/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql         NVARCHAR(MAX)
       ,@column_name NVARCHAR(MAX) = N'ios_forwarded_fetch_CNT'
       ,@ssms_ads    TINYINT = 2
--*/

   SET @sql = N'-- calculate INDEX level as percent of PARENT & PARENT as percent of INSTANCE
INSERT
  INTO [##SQLXL_Index_Metrics] WITH (TABLOCKX)
      (rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,metric
      ,metric_AMT
      ,metric_fmt
      ,diagnostic_PCT
      )
SELECT i.rec_type
      ,i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,metric     = N''' + @column_name + N'''
      ,metric_AMT = i.' + @column_name + N'
      ,metric_fmt = CASE WHEN i.' + @column_name + N' IS NULL THEN N''n/a''
                         ELSE [dbo].[SQLXL_3SD](i.' + @column_name + N'
                                               ,CASE WHEN CHARINDEX(N''_KB_'',''' + @column_name + N''') > 0
                                                     THEN N''KB'' -- excluded by cursor WHERE clause
                                                     WHEN CHARINDEX(N''_MS_'',''' + @column_name + N''') > 0
                                                     THEN N''MS'' -- excluded by cursor WHERE clause
                                                     WHEN CHARINDEX(N''_PG_'',''' + @column_name + N''') > 0
                                                     THEN N''P''  -- excluded by cursor WHERE clause
                                                     WHEN ''' + @column_name + N''' LIKE N''%_CNT''
                                                     THEN N''I''  -- excluded by cursor WHERE clause
                                                     ELSE N''N''
                                                END
                                               )
                             + CASE WHEN ''' + @column_name + N''' LIKE N''%_PCT'' THEN N''%''
                                    WHEN ''' + @column_name + N''' LIKE N''%_RAT'' THEN N''x''
                                    ELSE N''''
                               END
                    END
      ,diagnostic_PCT  = CASE WHEN i.rec_type IN (N''H''    -- history/archive table aggregate record
                                                 ,N''I''    -- index composite record
                                                 ,N''S''    -- system/internal table aggregate record
                                                 )
                               AND par.' + @column_name + N' > 0
                              THEN 100.0 * i.' + @column_name + N' / par.' + @column_name + N' -- share of parent level aggregate
                              ELSE 100.0 * i.' + @column_name + N' / a.'   + @column_name + N' -- share of instance level aggregate
                         END
  FROM (-- All composite records
        SELECT i.rec_type
              ,i.database_id
              ,i.object_id
              ,i.index_id
              ,i.type
              ,i.sub_type
              ,parent_object_id = COALESCE(obj.parent_object_id,0)
              ,i.' + @column_name + N'
          FROM [##SQLXL_Index_compilation] AS i
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_objects] AS obj
            ON i.database_id = obj.database_id
           AND i.object_id   = obj.object_id
         WHERE i.' + @column_name + N' > 0
       ) AS i
 CROSS
  JOIN (-- instance level aggregate record
        SELECT ' + @column_name + N'
          FROM [##SQLXL_Index_compilation]
         WHERE type        = N''A''                         -- instance level aggregate record
           AND database_id = 0
           AND object_id   = 0
           AND index_id    = 0
           AND sub_type    = 0
           AND ' + @column_name + N' > 0
       ) AS a
  LEFT OUTER
  JOIN (-- parent level aggregate record
        SELECT database_id,object_id,index_id,type,sub_type
              ,' + @column_name + N'
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type = N''P''                            -- parent level object totals
           AND ' + @column_name + N' > 0
       ) AS par
    ON par.database_id = i.database_id
   AND par.object_id   = i.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

   IF @ssms_ads > 1 -- SSMS/ADS
   SELECT '[##SQLXL_Index_sys_database_scoped_configurations]'
         ,lsql = LEN(@sql)
         ,sql1 = SUBSTRING(@sql,    1,16383)
         ,sql2 = SUBSTRING(@sql,16384,16383)
         ,sql3 = SUBSTRING(@sql,32768,16383);

   EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;

END; -- WHILE 1 = 1

CLOSE agg_crsr;
DEALLOCATE agg_crsr;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Compute index metrics as percent of Parent or Instance'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Add Ratio and Percent metrics to [##SQLXL_Index_Metrics]',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Compute Cursor through all percent & ratio columns - %_PCT (float) & %_RAT (float) - for index, parent levels
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @sql         NVARCHAR(MAX)
       ,@column_name NVARCHAR(MAX)
       ,@ssms_ads    TINYINT = 1
--*/
DECLARE agg_crsr CURSOR LOCAL FAST_FORWARD FOR
SELECT name
  FROM [##SQLXL_Index_compilation_compute_columns] AS c
 WHERE c.typ IN (N'PCT',N'RAT')
 ORDER BY
       name
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

--------------------------------------------------------------------------------------------------------------------------------------------
-- Loop through cursor of columns to save off Percent, Ratio computations for use below
-- <FUTURE> replace cursor with list of columns
--------------------------------------------------------------------------------------------------------------------------------------------
OPEN agg_crsr;

WHILE 1 = 1 BEGIN
   FETCH NEXT
    FROM agg_crsr
    INTO @column_name;

   IF @@fetch_status <> 0 BREAK

   SET @sql = N'-- Add metrics records
   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Add metrics records for ' + @column_name + N' for Indexes
   -----------------------------------------------------------------------------------------------------------------------------------------
   INSERT
     INTO [##SQLXL_Index_Metrics] WITH (TABLOCKX)
         (rec_type
         ,database_id,object_id,index_id,type,sub_type
         ,metric
         ,metric_AMT
         ,metric_fmt
         ,diagnostic_PCT
         )
   SELECT rec_type
         ,database_id,object_id,index_id,type,sub_type
         ,metric     = ''' + @column_name + N'''
         ,metric_AMT = ' + @column_name + N'
         ,metric_fmt = CASE WHEN ' + @column_name + N' IS NULL THEN N''n/a''
                            ELSE [dbo].[SQLXL_3SD](' + @column_name + N'
                                                  ,CASE WHEN CHARINDEX(N''_KB_'',''' + @column_name + N''') > 0
                                                        THEN N''KB'' -- excluded by cursor WHERE clause
                                                        WHEN CHARINDEX(N''_MS_'',''' + @column_name + N''') > 0
                                                        THEN N''MS'' -- excluded by cursor WHERE clause
                                                        WHEN CHARINDEX(N''_PG_'',''' + @column_name + N''') > 0
                                                        THEN N''P''  -- excluded by cursor WHERE clause
                                                        WHEN ''' + @column_name + N''' LIKE N''%_CNT''
                                                        THEN N''I''  -- excluded by cursor WHERE clause
                                                        ELSE N''N''
                                                   END
                                                  )
                                + CASE WHEN ''' + @column_name + N''' LIKE N''%_PCT'' THEN N''%''
                                       WHEN ''' + @column_name + N''' LIKE N''%_RAT'' THEN N''x''
                                       ELSE N''''
                                  END
                       END
         ,diagnostic_PCT  = ' + @column_name + N' -- NULL
     FROM [##SQLXL_Index_compilation] AS i
    WHERE ' + @column_name + N' > 0
   OPTION(RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);'

   EXECUTE (@sql); IF @@Error > 0 BEGIN SELECT @sql;RAISERROR('### BLAMMO ! ###',0,0) WITH NOWAIT; END;
   -- NOTE: no RAISERROR here since would occur for each column name

END;  -- WHILE 1 = 1

CLOSE agg_crsr;
DEALLOCATE agg_crsr;

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Add Ratio and Percent metrics to [##SQLXL_Index_Metrics]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Create index on [##SQLXL_Index_Metrics]
\******************************************************************************************************************************************/
BEGIN TRY
   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Index_Metrics
       ON [##SQLXL_Index_Metrics]
          (database_id,object_id,index_id,type,sub_type
          ,metric
          )
     WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);
END TRY
BEGIN CATCH
END CATCH

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Indexed table [##SQLXL_Index_Metrics]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Update column rankings - PARENT within TOTAL & INDEX within PARENT',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Compute Update [SQLXL_Index_Metrics] Rank percent of parent within instance & index within Parent (below)
 Update column rankings - PARENT within TOTAL
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Update - [SQLXL_Index_Metrics] - column rankings - PARENT within INSTANCE
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_Metrics]
   SET
/*** LOCAL TESTING ***
SELECT c.*,
--*/
       diagnostic = IIF(RIGHT(c.metric,4) IN (N'_AVG',N'_PCT',N'_RAT')
                       ,NULL -- exclude from rankings
                       ,N'(' + [dbo].[SQLXL_3SD](tgt.diagnostic_PCT,N'N') + N'%'
                             + COALESCE(N' #' + CAST(c.diagnostic_rank AS NVARCHAR(20)),N'')
                       + N')')
      ,diagnostic_rank  = c.diagnostic_rank
      ,previous_sum_PCT = COALESCE(c.previous_sum_PCT,0.0)
  FROM [##SQLXL_Index_Metrics] AS tgt WITH (TABLOCKX)
  JOIN (--
        SELECT c.rec_type
              ,c.database_id
              ,c.object_id
              ,c.index_id
              ,c.type
              ,c.sub_type
              ,c.metric
              ,c.diagnostic_PCT
              ,c.diagnostic_rank
              ,previous_sum_PCT = LAG(c.running_sum) OVER (PARTITION BY c.metric
                                                               ORDER BY c.running_sum
                                                                       ,c.object_id
                                                          )
          FROM (--
                SELECT rec_type
                      ,database_id,object_id,index_id,type,sub_type
                      ,metric
                      ,diagnostic_PCT
                      ,diagnostic_rank = CASE WHEN metric IN (N'ops_read_to_write_RAT'
                                                             ,N'ius_read_to_write_RAT'
                                                             )
                                              THEN NULL
                                              WHEN diagnostic_PCT > 1.0 -- minimum percent of parent within instance for inclusion
                                              THEN RANK() OVER (PARTITION BY metric
                                                                    ORDER BY diagnostic_PCT DESC
                                                               )
                                              ELSE NULL
                                         END
                      ,running_sum  = IIF(RIGHT(metric,4) NOT IN (N'_AVG',N'_RAT')
                                         ,SUM(diagnostic_PCT) OVER (PARTITION BY metric
                                                                        ORDER BY diagnostic_PCT DESC
                                                                   )
                                         ,NULL)
                  FROM [##SQLXL_Index_Metrics]
                 WHERE 1 = 1   -- simplifies adding additional clauses for testing
                   AND rec_type = N'P'                      -- parent level aggregate record
                   AND metric NOT LIKE N'%_parent_PCT'
               ) AS c
       ) AS c
    ON tgt.rec_type         = c.rec_type
   AND tgt.database_id      = c.database_id
   AND tgt.object_id        = c.object_id
   AND tgt.index_id         = c.index_id
   AND tgt.type             = c.type
   AND tgt.sub_type         = c.sub_type
   AND tgt.metric           = c.metric
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update column rankings - PARENT within TOTAL & INDEX within PARENT'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Update column rankings - INDEX within PARENT',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Update - [SQLXL_Index_Metrics] - column rankings - INDEX within PARENT
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_Metrics]
   SET
/*** LOCAL TESTING ***
SELECT c.*,
--*/
       diagnostic = IIF(RIGHT(c.metric,4) IN (N'_AVG',N'_PCT',N'_RAT')
                       ,NULL -- exclude from rankings
                       ,N'(' + [dbo].[SQLXL_3SD](tgt.diagnostic_PCT,N'N') + N'%'
                             + COALESCE(N' #' + CAST(c.diagnostic_rank AS NVARCHAR(20)),N'')
                       + N')')
      ,diagnostic_rank  = c.diagnostic_rank
      ,previous_sum_PCT = COALESCE(c.previous_sum_PCT,0.0)
  FROM [##SQLXL_Index_Metrics] AS tgt WITH (TABLOCKX)
  JOIN (--
        SELECT c.rec_type
              ,c.database_id
              ,c.object_id
              ,c.index_id
              ,c.type
              ,c.sub_type
              ,c.metric
              ,c.diagnostic_PCT
              ,c.diagnostic_rank
              ,previous_sum_PCT = LAG(c.running_sum) OVER (PARTITION BY c.metric
                                                                       ,c.object_id
                                                               ORDER BY c.running_sum
                                                          )
          FROM (--
                SELECT rec_type
                      ,database_id,object_id,index_id,type,sub_type
                      ,metric
                      ,diagnostic_PCT
                      ,diagnostic_rank = CASE WHEN metric IN (N'ops_read_to_write_RAT'
                                                             ,N'ius_read_to_write_RAT'
                                                             )
                                              THEN NULL
                                              WHEN diagnostic_PCT > 1.0 -- minimum percent of index within parent for inclusion
                                              THEN RANK() OVER (PARTITION BY object_id
                                                                            ,metric
                                                                    ORDER BY diagnostic_PCT DESC
                                                               )
                                              ELSE NULL
                                         END
                      ,running_sum  = IIF(RIGHT(metric,4) NOT IN (N'_AVG',N'_RAT')
                                         ,SUM(diagnostic_PCT) OVER (PARTITION BY object_id
                                                                                ,metric
                                                                        ORDER BY diagnostic_PCT DESC
                                                                   )
                                         ,NULL)
                  FROM [##SQLXL_Index_Metrics]
                 WHERE 1 = 1   -- simplifies adding additional clauses for testing
                   AND rec_type = N'I'         -- index level composite record
               ) AS c
       ) AS c
    ON tgt.rec_type         = c.rec_type
   AND tgt.database_id      = c.database_id
   AND tgt.object_id        = c.object_id
   AND tgt.index_id         = c.index_id
   AND tgt.type             = c.type
   AND tgt.sub_type         = c.sub_type
   AND tgt.metric           = c.metric
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Update column rankings - INDEX within PARENT'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Create [##SQLXL_Index_Diagnostics], Metrics_Summary, Metric_Rollup -----------------------------------------------------------------
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @sql       NVARCHAR(MAX) = N''
       ,@ssms_ads  TINYINT       = 2 -- used below to output generated @sql code
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_Diagnostics];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Index_Diagnostics]
      (diagnostic_ID INT             IDENTITY(1,1)
      --------------------------
      ,rec_type      CHAR(1)         COLLATE Latin1_General_100_CI_AI NOT NULL
      ,database_id   SMALLINT                                         NOT NULL
      ,object_id     INT                                              NOT NULL
      ,index_id      INT                                              NOT NULL
      ,type          NVARCHAR(2)     COLLATE Latin1_General_100_CI_AI NOT NULL
      ,sub_type      SMALLINT                                         NOT NULL DEFAULT(0)
      --------------------------
      ,prescription  NVARCHAR(50)   COLLATE Latin1_General_100_CI_AI      NULL
      ,diagnostic    NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI      NULL
      );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Created table [##SQLXL_Index_Diagnostics]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Create Metric Control tables
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_Metric_Rollup];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Index_Metric_Rollup]
      (metric_rollup_nbr INT     IDENTITY(1,1)
      ,min_value_1       FLOAT                               NULL
      ,Level_1           NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      ,abbr_1            NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      ,min_value_2       FLOAT                               NULL
      ,Level_2           NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      ,abbr_2            NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      ,min_value_3       FLOAT                               NULL
      ,Level_3           NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      ,abbr_3            NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      ,min_value_4       FLOAT                               NULL
      ,Level_4           NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      ,abbr_4            NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      ,min_value_5       FLOAT                               NULL
      ,Level_5           NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      ,abbr_5            NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      ,min_value_6       FLOAT                               NULL
      ,Level_6           NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      ,abbr_6            NVARCHAR(200) COLLATE Latin1_General_100_CI_AI NULL
      );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Created table [##SQLXL_Index_Metric_Rollup]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Populate Metric Control tables - adds friendlier names and chooses which totals to compute and concatenate together for display
-- ,(NULL,NULL  -- level 1
--  ,NULL,NULL,NULL  -- level 2
--  ,NULL,NULL,NULL  -- level 3
--  ,NULL,NULL,NULL  -- level 4
--  ,NULL,NULL,NULL  -- level 5
--  ,NULL,NULL,NULL) -- level 6
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
TRUNCATE TABLE [##SQLXL_Index_Metric_Rollup];
--*/
INSERT
  INTO [##SQLXL_Index_Metric_Rollup] WITH (TABLOCKX)
      (min_value_1,Level_1,abbr_1
      ,min_value_2,Level_2,abbr_2
      ,min_value_3,Level_3,abbr_3
      ,min_value_4,Level_4,abbr_4
      ,min_value_5,Level_5,abbr_5
      ,min_value_6,Level_6,abbr_6)
VALUES
-- OPS RD/WRT Ratio
-- USG RD/WRT Ratio
-- OPS Reads
-- OPS Scans
-- OPS Lookups
-- OPS FWD Fetch
-- USG Reads
-- USG Scans
-- USG Lookups
-- LOB ACTVY
-- Last Read Days

/*------------------------------------------------------------------------------------------------------------------------------------------
Priority Metrics
------------------------------------------------------------------------------------------------------------------------------------------*/
-- Diagnostic - Index - Wait Time & percent of parent & ranking
-- Diagnostic - Index - Wait Counts & percent of parent & ranking
-- Diagnostic - Index - Wait Average time
-- Diagnostic - Index - Wait Time & percent of parent & ranking
-- Diagnostic - Index - Wait Counts & percent of parent & ranking
-- Diagnostic - Index - Wait Average time
 ( 0.0,N'ops_total_wait_MS_CNT',N'*Waits: Time'
  ,0.0,N'ops_total_wait_CNT',N'CNT'
  ,0.0,N'ops_total_wait_MS_AVG',N'Average'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Total Locks & percent of parent & ranking
-- Diagnostic - Index - Lock Promotion Attempts & percent of parent & ranking
-- Diagnostic - Index - Lock Promotion Success & percent of parent & ranking
-- Diagnostic - Index - Lock Promotion Fail & percent of parent & ranking
,( 0.0,N'ops_total_lock_CNT',N'*Locks: CNT'
  ,0.0,N'page_lock_to_all_lock_PCT',N'Page Locks'
  ,0.0,N'ios_lock_promotion_attempt_CNT',N'Promo Attempts'
  ,0.0,N'ios_lock_promotion_fail_CNT',N'Fail'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Operations Page Splits - Total & percent of parent & ranking
-- Diagnostic - Index - Operations Page Splits - percent of writes
-- Diagnostic - Index - Operations Page Splits - Leaf & percent of parent & ranking
-- Diagnostic - Index - Operations Page Splits - NonLeaf & percent of parent & ranking
,( 0.0,N'ops_total_page_split_CNT',N'*Splits: CNT'
  ,0.0,N'page_splits_to_write_PCT',N'%WRT'
  ,0.0,N'ios_leaf_allocation_CNT',N'Leaf'
  ,0.0,N'ios_nonleaf_allocation_CNT',N'Nonleaf'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Operations Merges - Total & percent of parent & ranking
-- Diagnostic - Index - Operations Merges - percent of writes
-- Diagnostic - Index - Operations Merges - Leaf & percent of parent & ranking
-- Diagnostic - Index - Operations Merges - Nonleaf & percent of parent & ranking
,( 0.0,N'ops_total_page_merge_CNT',N'*Merges: CNT'
  ,0.0,N'page_merge_to_write_PCT',N'%WRT'
  ,0.0,N'ios_leaf_page_merge_CNT',N'Leaf'
  ,0.0,N'ios_nonleaf_page_merge_CNT',N'Nonleaf'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Missing index advantage Weighted & percent of parent & ranking
-- Diagnostic - Index - Missing index advantage unweighted & percent of parent & ranking
,( 0.0,N'mix_advantage_weighted_AMT',N'*MIX Advantage - Weighted'
  ,0.0,N'mix_Advantage_AMT',N'UnWeighted'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Missing index Compiles & percent of parent & ranking
-- Diagnostic - Index - Missing index Cost & percent of parent & ranking
-- Diagnostic - Index - Missing index Impact & percent of parent & ranking
,( 0.0,N'mix_unique_compiles_CNT',N'*MIX Compiles'
  ,0.0,N'mix_avg_total_user_cost_AMT',N'Cost'
  ,0.0,N'mix_avg_user_impact_AMT',N'Impact'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - data pages in memory buffer & percent of parent & ranking
-- Diagnostic - Index - reserved data pages & percent of parent & ranking
-- Diagnostic - Index - Memory Buffer % Used & ranking
,( 0.1,N'buffer_total_KB_CNT',N'*Buffer: Used'
  ,NULL,N'reserved_page_PG_CNT',N'Reserved'
  ,0.0,N'used_pages_in_buffer_PCT',N'%Buffered'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Operations Reads & percent of parent & ranking
-- Diagnostic - Index - Operations Writes & percent of parent & ranking
-- Diagnostic - Index - Operations Read/Write ratio
,( 0.0,N'ops_total_contacts_CNT',N'*OPS: TOT'
  ,0.0,N'ops_total_read_CNT',N'RDS'
  ,0.0,N'ops_total_write_CNT',N'WRT'
  ,0.0,N'ops_read_to_write_RAT',N'R/W'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Operations Scan Detail & percent of parent & ranking
-- Diagnostic - Index - Operations Scan percent of reads
-- Diagnostic - Index - Operations Lookup Detail & percent of parent & ranking
-- Diagnostic - Index - Operations Lookup percent of reads
-- Diagnostic - Index - Operations Forwarded Fetch Detail & percent of parent & ranking
-- Diagnostic - Index - Operations Forwarded Fetch percent of reads
,( 0.0,N'ops_total_scan_CNT',N'*OPS: Scans'
  ,0.0,N'ops_scans_to_read_PCT',N'%RDS'
  ,0.0,N'ios_singleton_lookup_CNT',N'LKP'
  ,0.0,N'ios_singleton_lookup_to_read_PCT',N'%RDS'
  ,0.0,N'ios_forwarded_fetch_CNT',N'FWD Fetch'
  ,0.0,N'ios_forwarded_fetch_to_read_PCT',N'%RDS')

-- Diagnostic - Index - Operations Inserts & percent of parent & ranking
-- Diagnostic - Index - Operations Updates & percent of parent & ranking
-- Diagnostic - Index - Operations Deletes & percent of parent & ranking
,( 0.0,N'ops_total_insert_CNT',N'*OPS: Ins'
  ,0.0,N'ops_total_update_CNT',N'Upd'
  ,0.0,N'ops_total_delete_CNT',N'Del'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

----------------------------------------------------------------------------------------------
-- Diagnostic - Index - Usage Touches & percent of parent & ranking
-- Diagnostic - Index - Usage Reads & percent of parent & ranking
-- Diagnostic - Index - Usage Writes & percent of parent & ranking
-- Diagnostic - Index - Usage Read/Write ratio
,( 0.0,N'ius_user_total_CNT',N'*USG: TOT'
  ,0.0,N'ius_user_read_CNT',N'RDS'
  ,0.0,N'ius_user_updates_CNT',N'WRT'
  ,0.0,N'ius_read_to_write_RAT',N'R/W'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - Usage Seek Detail & percent of parent & ranking
-- Diagnostic - Index - Usage Seek as percent of Reads
-- Diagnostic - Index - Usage Scan Detail & percent of parent & ranking
-- Diagnostic - Index - Usage Scan as percent of Reads
-- Diagnostic - Index - Usage Lookup Detail & percent of parent & ranking
-- Diagnostic - Index - Usage Lookup as percent of Reads
,( 0.0,N'ius_user_seeks_CNT',N'*USG: Seeks'
  ,0.0,N'ius_seeks_to_read_PCT',N'%RDS'
  ,0.0,N'ius_user_scans_CNT',N'Scans'
  ,0.0,N'ius_scans_to_read_PCT',N'%RDS'
  ,0.0,N'ius_user_lookups_CNT',N'LKP'
  ,NULL,N'ius_lookups_to_read_PCT',N'%RDS')

----------------------------------------------------------------------------------------------
-- Diagnostic - Index - LOB Fetches & percent of parent & ranking
-- Diagnostic - Index - LOB Overflow Fetches & percent of parent & ranking
-- Diagnostic - Index - LOB Push off row & percent of parent & ranking
-- Diagnostic - Index - LOB Pull in row & percent of parent & ranking
,( 0.0,N'ios_lob_fetch_pages_CNT',N'*LOB: Fetch PG'
  ,0.0,N'ios_row_overflow_fetch_in_pages_CNT',N'Overflow'
  ,0.0,N'ios_column_value_push_off_row_CNT',N'Push off row'
  ,0.0,N'ios_column_value_pull_in_row_CNT',N'Pull in row'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

----------------------------------------------------------------------------------------------
-- Diagnostic - Index - In Memory - unique constraint violations
-- Diagnostic - Index - In Memory - write conflictes
,( 0.0,N'xtp_unique_constraint_violations_CNT',N'*XTP UQ Violations'
  ,0.0,N'xtp_write_conflicts_CNT',N'WRT conflicts'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - In Memory - insert attempts
-- Diagnostic - Index - In Memory - update attempts
-- Diagnostic - Index - In Memory - delete attemps
,( 0.0,N'xtp_row_insert_attempts_CNT',N'*XTP Attempts INS'
  ,0.0,N'xtp_row_update_attempts_CNT',N'UPD'
  ,0.0,N'xtp_row_delete_attempts_CNT',N'DEL'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - In Memory - scans started
-- Diagnostic - Index - In Memory - scans retried
-- Diagnostic - Index - In Memory - rows returned
-- Diagnostic - Index - In Memory - rows touched
,( 0.0,N'xtp_scans_started_CNT',N'*XTP Scans Start'
  ,0.0,N'xtp_scans_retries_CNT',N'Retry'
  ,0.0,N'xtp_rows_returned_CNT',N'Rows Returned'
  ,0.0,N'xtp_rows_touched_CNT',N'Touched'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - In Memory - pages updated
-- Diagnostic - Index - In Memory - page updates retried
-- Diagnostic - Index - In Memory - page consolidations
-- Diagnostic - Index - In Memory - page consolidations retried
,( 0.0,N'xtp_page_update_CNT',N'*XTP PG UPD'
  ,0.0,N'xtp_page_update_retry_CNT',N'Retry'
  ,0.0,N'xtp_page_consolidation_CNT',N'Consolidate'
  ,0.0,N'xtp_page_consolidation_retry_CNT',N'Retry'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - In Memory - page splits
-- Diagnostic - Index - In Memory - page split retries
-- Diagnostic - Index - In Memory - key splits
-- Diagnostic - Index - In Memory - key splits retried
,( 0.0,N'xtp_page_split_CNT',N'*XTP PG Split'
  ,0.0,N'xtp_page_split_retry_CNT',N'Retry'
  ,0.0,N'xtp_key_split_CNT',N'Key Split'
  ,0.0,N'xtp_key_split_retry_CNT',N'Retry'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)

-- Diagnostic - Index - In Memory - page merges
-- Diagnostic - Index - In Memory - page merge retries
-- Diagnostic - Index - In Memory - key merges
-- Diagnostic - Index - In Memory - key merge retries
,( 0.0,N'xtp_page_merge_CNT',N'*XTP PG Merge'
  ,0.0,N'xtp_page_merge_retry_CNT',N'Retry'
  ,0.0,N'xtp_key_merge_CNT',N'Key Merge'
  ,0.0,N'xtp_key_merge_retry_CNT',N'Retry'
  ,NULL,NULL,NULL
  ,NULL,NULL,NULL)
----------------------------------------------------------------------------------------------
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert consolidated metrics to diagnostic table'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* COMPUTE Insert [##SQLXL_Index_ranked_metrics] ranked metrics for each index
\******************************************************************************************************************************************/
BEGIN TRY
   DROP TABLE [#SQLXL_Index_ranked_metrics];
END TRY
BEGIN CATCH
END CATCH

SELECT f.rec_type
      ,f.database_id
      ,f.object_id
      ,f.index_id
      ,f.type
      ,f.sub_type
      ,r.metric_rollup_nbr
  INTO [#SQLXL_Index_ranked_metrics]
/*** LOCAL TESTING ***
SELECT f.rec_type
      ,f.database_id
      ,f.object_id
      ,f.index_id
      ,f.type
      ,f.sub_type
      ,r.metric_rollup_nbr
--*/
  FROM (          SELECT metric_rollup_nbr,level_1 FROM [##SQLXL_Index_Metric_Rollup] AS r WHERE level_1 IS NOT NULL
        UNION ALL SELECT metric_rollup_nbr,level_2 FROM [##SQLXL_Index_Metric_Rollup] AS r WHERE level_2 IS NOT NULL
        UNION ALL SELECT metric_rollup_nbr,level_3 FROM [##SQLXL_Index_Metric_Rollup] AS r WHERE level_3 IS NOT NULL
        UNION ALL SELECT metric_rollup_nbr,level_4 FROM [##SQLXL_Index_Metric_Rollup] AS r WHERE level_4 IS NOT NULL
        UNION ALL SELECT metric_rollup_nbr,level_5 FROM [##SQLXL_Index_Metric_Rollup] AS r WHERE level_5 IS NOT NULL
        UNION ALL SELECT metric_rollup_nbr,level_6 FROM [##SQLXL_Index_Metric_Rollup] AS r WHERE level_6 IS NOT NULL
       ) AS r
  JOIN (--
        SELECT rec_type
              ,database_id,object_id,index_id,type,sub_type
              ,metric
          FROM [##SQLXL_Index_Metrics]
         WHERE diagnostic_RANK  > 0
            OR metric IN (N'ops_total_contacts_CNT'         -- always show index operations summary
                         ,N'ius_user_total_CNT'             -- always show index usage summary
                         ,N'buffer_total_KB_CNT'            -- always show memory used & physical size
                         )
         GROUP BY
               rec_type
              ,database_id,object_id,index_id,type,sub_type
              ,metric
       ) AS f
    ON r.level_1 = f.metric
 GROUP BY
       f.rec_type
      ,f.database_id
      ,f.object_id
      ,f.index_id
      ,f.type
      ,f.sub_type
      ,r.metric_rollup_nbr
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert [#SQLXL_Index_ranked_metrics] ranked metrics for each index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* COMPUTE Insert [##SQLXL_Index_metrics_summary] consolidated metrics
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SELECT * FROM [#SQLXL_Index_ranked_metrics];
--*/
BEGIN TRY
   DROP TABLE [##SQLXL_Index_metrics_summary];
END TRY
BEGIN CATCH
END CATCH

SELECT f.rec_type
      ,f.database_id
      ,f.object_id
      ,f.index_id
      ,type       = f.type                                            COLLATE Latin1_General_100_CI_AI
      ,f.sub_type
      ,f.metric_rollup_nbr
      ,diagnostic = CAST(
                    STUFF( IIF(r.abbr_1 IS NOT NULL                                    -- label found in Rollup table
                              , N' ' + r.abbr_1 + N': '
                              + COALESCE(f1.metric_fmt,N'0')
                              + COALESCE(N' ' + f1.diagnostic,N'')
                              ,N'')
                         + IIF(r.abbr_2 IS NOT NULL
                              , N' ' + r.abbr_2 + N': '
                              + COALESCE(f2.metric_fmt,N'0')
                              + COALESCE(N' ' + f2.diagnostic,N'')
                              ,N'')
                         + IIF(r.abbr_3 IS NOT NULL
                              , N' ' + r.abbr_3 + N': '
                              + COALESCE(f3.metric_fmt,N'0')
                              + CASE f3.metric
                                     WHEN N'mix_avg_user_impact_AMT' THEN N'%'
                                     ELSE N''
                                END
                              + COALESCE(N' ' + f3.diagnostic,N'')
                              ,N'')
                         + IIF(r.abbr_4 IS NOT NULL
                              , N' ' + r.abbr_4 + N': '
                              + COALESCE(f4.metric_fmt,N'0')
                              + COALESCE(N' ' + f4.diagnostic,N'')
                              ,N'')
                         + IIF(r.abbr_5 IS NOT NULL
                              , N' ' + r.abbr_5 + N': '
                              + COALESCE(f5.metric_fmt,N'0')
                              + COALESCE(N' ' + f5.diagnostic,N'')
                              ,N'')
                         + IIF(r.abbr_6 IS NOT NULL
                              , N' ' + r.abbr_6 + N': '
                              + COALESCE(f6.metric_fmt,N'0')
                              + COALESCE(N' ' + f6.diagnostic,N'')
                              ,N'')
                         ,1,1,N'') -- end of STUFF function
                         AS NVARCHAR(4000))                           COLLATE Latin1_General_100_CI_AI
  INTO [##SQLXL_Index_metrics_summary]
/*** LOCAL TESTING ***
SELECT r.level_1
      ,[dbo].[SQLXL_3SD](COALESCE(f1.metric_AMT,0)
                        ,CASE WHEN CHARINDEX(N'_KB_',r.level_1) > 0 THEN N'KB'
                              WHEN CHARINDEX(N'_MS_',r.level_1) > 0 THEN N'MS'
                              ELSE N'N'
                         END)
      ,r.level_2
      ,r.level_3
      ,r.level_4
      ,r.level_5
      ,r.level_6
--*/
  FROM [#SQLXL_Index_ranked_metrics] AS f
  JOIN [##SQLXL_Index_Metric_Rollup] AS r
    ON f.metric_rollup_nbr = r.metric_rollup_nbr
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f1
    ON f.database_id      = f1.database_id
   AND f.object_id        = f1.object_id
   AND f.index_id         = f1.index_id
   AND f.type             = f1.type
   AND f.sub_type         = f1.sub_type
   AND r.level_1          = f1.metric
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f2
    ON f.database_id      = f2.database_id
   AND f.object_id        = f2.object_id
   AND f.index_id         = f2.index_id
   AND f.type             = f2.type
   AND f.sub_type         = f2.sub_type
   AND r.level_2          = f2.metric
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f3
    ON f.database_id      = f3.database_id
   AND f.object_id        = f3.object_id
   AND f.index_id         = f3.index_id
   AND f.type             = f3.type
   AND f.sub_type         = f3.sub_type
   AND r.level_3          = f3.metric
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f4
    ON f.database_id      = f4.database_id
   AND f.object_id        = f4.object_id
   AND f.index_id         = f4.index_id
   AND f.type             = f4.type
   AND f.sub_type         = f4.sub_type
   AND r.level_4          = f4.metric
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f5
    ON f.database_id      = f5.database_id
   AND f.object_id        = f5.object_id
   AND f.index_id         = f5.index_id
   AND f.type             = f5.type
   AND f.sub_type         = f5.sub_type
   AND r.level_5          = f5.metric
  LEFT OUTER
  JOIN [##SQLXL_Index_Metrics] AS f6
    ON f.database_id      = f6.database_id
   AND f.object_id        = f6.object_id
   AND f.index_id         = f6.index_id
   AND f.type             = f6.type
   AND f.sub_type         = f6.sub_type
   AND r.level_6          = f6.metric
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Insert metric rollups to [##SQLXL_Index_metrics_summary]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Index on [##SQLXL_Index_metrics_summary]
\******************************************************************************************************************************************/
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_Metrics_Summary
    ON [##SQLXL_Index_metrics_summary]
      (database_id,object_id,index_id,type,sub_type
      ,metric_rollup_nbr
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Created Index on [##SQLXL_Index_metrics_summary]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/*** HELPER CODE: Find metric columns not included in consolidated metrics groupings ***
SELECT c.name
  FROM [sys].[columns] AS c WITH (READUNCOMMITTED)
  JOIN [sys].[types]   AS t WITH (READUNCOMMITTED)
    ON c.user_type_id = t.user_type_id
 WHERE c.object_id = object_id(N'tempDB..[##SQLXL_Index_compilation]')
    AND (   (t.name    = 'float'    AND RIGHT(c.name,4) = N'_AMT')
         OR (t.name LIKE N'%INT'    AND c.name LIKE N'%CNT%')
         OR (t.name    = 'DATETIME' AND c.name LIKE N'%_DTTM')
         OR (t.name LIKE N'%INT'    AND c.name LIKE N'%_days_ago%')
         OR (t.name    = N'float'   AND c.name LIKE N'%_AVG')
         OR (t.name    = N'float'   AND c.name LIKE N'%_RAT')
         OR c.name     = N'row_CNT'
        )
EXCEPT
SELECT Level_1 FROM (--
SELECT Level_1 FROM [##SQLXL_Index_Metric_Rollup] UNION
SELECT Level_2 FROM [##SQLXL_Index_Metric_Rollup] UNION
SELECT Level_3 FROM [##SQLXL_Index_Metric_Rollup] UNION
SELECT Level_4 FROM [##SQLXL_Index_Metric_Rollup] UNION
SELECT Level_5 FROM [##SQLXL_Index_Metric_Rollup] UNION
SELECT Level_6 FROM [##SQLXL_Index_Metric_Rollup]
) AS c
ORDER BY 1
--*/

/***************************************************************************************************************************************\
 End of Data consolidation status notification
\***************************************************************************************************************************************/
IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @sql = N'SELECT N''Completed data consolidation'''
            + N' AS [Elapsed Time '
            + [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@collection_DTTM,GETDATE()),0))
            + N' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]'
   EXECUTE (@sql);
END;

/*########################################################################################################################################*\
 *Task* Diagnostics Start ------------------------------------------------------------------------------------------------------------------
 Format & Priorities of Diagnostics entries: (rec_type,database_id,object_id,index_id,type,diagnostic)
\*########################################################################################################################################*/

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'--------- Start SQLXL Index Investigate ------------------------------------------',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Local Temp table to house prescriptions
-- <FUTURE> add sub_type
--------------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRY
   DROP TABLE [##SQLXL_Index_prescription];
END TRY
BEGIN CATCH
END CATCH

SELECT TOP 0
       database_id,object_id,index_id
      ,type         = type                         COLLATE Latin1_General_100_CI_AI
      ,sub_type     = sub_type
      ,action_desc  = CAST(NULL AS NVARCHAR(20))   COLLATE Latin1_General_100_CI_AI
      ,srt          = CAST(NULL AS BIGINT)
      ,prescription = CAST(NULL AS NVARCHAR(1000)) COLLATE Latin1_General_100_CI_AI
  INTO [##SQLXL_Index_prescription]
  FROM [##SQLXL_Index_compilation]
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Created table [##SQLXL_Index_prescription]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_prescription
    ON [##SQLXL_Index_prescription]
      (database_id,object_id,index_id,type,sub_type
      ,srt
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Created table [##SQLXL_Index_prescription] and added clustered index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Insert consolidated metrics to diagnostic table',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
********************************************************************************************************************************************
*** INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE I
    For additional SERVER & INSTANCE diagnostics, and creation of global temp table [##SQLXL_Instance_info] see procedure [SQLXL_Instance]
********************************************************************************************************************************************
\******************************************************************************************************************************************/
DECLARE @srt INT = 0; -- used to control the sequence of Prescriptions within a category

--------------------------------------------------------------------------------------------------------------------------------------------
-- Columnstore Indexes with Trace Flag 834
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Instance_diagnostics] WITH (TABLOCKX)
      (diagnostic) -- remaining columns defaulted
-- Diagnostic - Instance - (BI72) - Abnormal Design Pattern - Columnstore Indexes with Trace Flag 834
SELECT N'(BI72) Trace Flag 834 (large-page allocations for the buffer pool) in use with Columnstore indexes - not a good thing! See:'
      + CHAR(096)
      + N'https://docs.microsoft.com/en-US/troubleshoot/sql/admin/performance-issues-using-columstore-indexes-large-pages'
  FROM [##SQLXL_Instance_info] AS a
 WHERE EXISTS (-- list of all server-level trace flags
               SELECT 1/0
                 FROM [##SQLXL_Instance_info]
                WHERE source = N'TRACESTATUS'
                  AND 834    = CAST(name AS BIGINT)
              )
   AND EXISTS (-- All columnstore indexes
               SELECT 1/0
                 FROM [##SQLXL_Index_compilation]
                WHERE type
                   IN (N'5' -- clustered columnstore
                      ,N'6' -- nonclustered columnstore index
                      )
              )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Instance Diagnostics - TF834 enabled & Columnstore indexes used'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- SQL Instance - tied to index usage
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Instance - SQL <2019, Entp Ed, Mem model <> LARGE_PAGES, 8GB+ RAM, TF834 not enabled, NO columnstore, enable Lock/Large Pgs?
-- Diagnostic - Instance - SQL 2019+, Entp Ed, Mem model <> LARGE_PAGES, 8GB+ RAM, TF876 (Lock/Lg Pages) not enabled
INSERT
  INTO [##SQLXL_Instance_diagnostics] WITH (TABLOCKX)
      (diagnostic) -- remaining columns defaulted
SELECT N'SQL Memory Model ' + text_value_in_use
      + IIF(text_value_in_use = N'LOCK_PAGES',N', use "LARGE_PAGES"?',N', use "LOCK_PAGES/LARGE_PAGES"?')
      + CASE WHEN CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 15
             THEN CASE WHEN NOT EXISTS (-- check if large-page allocations for columnstore enabled
                                        SELECT 1/0
                                          FROM [##SQLXL_Instance_info]
                                         WHERE source = N'TRACESTATUS'
                                           AND 876    = CAST(name AS BIGINT)
                                       )
                       THEN ' Requires TF876 (SQL 2019+)'
                       ELSE N''
                  END
             WHEN EXISTS (-- columnstore indexes found
                          SELECT 1/0
                            FROM [##SQLXL_Index_compilation]
                           WHERE type IN (N'5' -- clustered columnstore
                                         ,N'6' -- nonclustered columnstore index
                                         )
                         )
             THEN CASE WHEN EXISTS (-- uses Windows large-page allocations for the buffer pool
                                    SELECT 1/0
                                      FROM [##SQLXL_Instance_info]
                                     WHERE source = N'TRACESTATUS'
                                       AND 834    = CAST(name AS BIGINT)
                                   )
                       THEN N'' -- remove TF834 flagged above
                       ELSE N' - Columnstore indexes found, do not enable TF834 (SQL <2019)'
                  END
             ELSE CASE WHEN EXISTS (-- uses Windows large-page allocations for the buffer pool
                                    SELECT 1/0
                                      FROM [##SQLXL_Instance_info]
                                     WHERE source = N'TRACESTATUS'
                                       AND 834    = CAST(name AS BIGINT)
                                   )
                       THEN N''
                       ELSE N' - Requires TF834 (<SQL 2019)'
                  END
        END
/*** LOCAL TESTING ***
SELECT *
--*/
  FROM [##SQLXL_Instance_info]
 WHERE source      = N'dm_os_sys_info'
   AND name        = N'sql_memory_model_desc'
   AND text_value_in_use <> N'LARGE_PAGES'
   AND EXISTS (-- check if more than 8GB memory allocated to SQL server. Large Pages requires minimum 8GB of memory
               SELECT CAST(run_value AS BIGINT)
                  FROM [##SQLXL_Instance_info]
                 WHERE source = N'configurations'
                   AND name   = N'max server memory (MB)'
                   AND 8192  <= CAST(run_value AS BIGINT)
               )
   AND (-- get SQL Server edition
        SELECT text_value_in_use
          FROM [##SQLXL_Instance_info]
         WHERE source    = N'SERVERPROPERTY'
           AND name      = N'Edition'
           AND (   text_value_in_use LIKE N'ENTERPRISE%'
                OR text_value_in_use LIKE N'DEVELOPER%'
               )
       ) IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Instance Diagnostics - Enable LARGE PAGES if not Columnstore'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Selected aggregates from database compilations
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
-- Diagnostic - Instance - Missing index count across sample
SELECT rec_type     = N'A'  -- instance level aggregate record
      ,database_id  = 0     -- instance level aggregate record
      ,object_id    = 0     -- instance level aggregate record
      ,index_id     = 0     -- instance level aggregate record
      ,type         = N'A'  -- instance level aggregate record
      ,sub_type     = 0     -- instance level aggregate record
      ,prescription = NULL
      ,diagnostic   = COALESCE( N'Missing indexes in requested databases: '
                              + CAST(COALESCE(obj.missing_index_CNT,0) AS NVARCHAR(20))
                              ,N'< Missing index count not found>'
                              )
  FROM (-- instance count of missing indexes
        SELECT missing_index_CNT = SUM(COALESCE(missing_index_CNT,0))
          FROM [##SQLXL_Index_sys_objects]
       ) AS obj
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Instance Diagnostics - Missing Indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Selected Instance aggregates
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Instance_diagnostics] WITH (TABLOCKX)
      (diagnostic) -- remaining columns defaulted
-- Diagnostic - Instance - Missing index count across instance
SELECT diagnostic   = COALESCE( N'Missing indexes in instance: '
                              + CAST(COALESCE(obj.missing_index_CNT,0) AS NVARCHAR(20))
                              + N' out of 600 possible (excludes missing on tempdb)'
                              ,N'< Missing index count not found>'
                              )
  FROM (-- instance missing user index count
        SELECT missing_index_CNT = COUNT_BIG(1)
          FROM [sys].[dm_db_missing_index_details] WITH (READUNCOMMITTED)
         WHERE database_id > 4
       ) AS obj
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Instance Diagnostics - Missing Indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 ##########################################################################################################################################
 *Task* Diagnostics - Database - Blitz Index
--  See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
 ##########################################################################################################################################
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Blitz Index BI21 - Database - > 5% of Nonclustered rowstore indexes are unused
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'D'          -- database level aggregate record
      ,database_id  = database_id
      ,object_id    = database_id
      ,index_id     = database_id
      ,type         = N'DB'         -- database "index" type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = N'(BI21) >5% Indexes Are Unused - '
                    + [dbo].[SQLXL_3SD](unused_idx_CNT,N'I')
                    + N' (' + [dbo].[SQLXL_3SD](1.0 * unused_idx_CNT / idx_CNT,N'%') + N') of '
                    + [dbo].[SQLXL_3SD](idx_CNT,N'I') + N' indexes (not counting HP,CX,CCS)'
/*** LOCAL TESTING ***
SELECT i.*
--*/
  FROM (-- count of unread and "all" indexes on database
        SELECT database_id
              ,unused_idx_CNT = SUM(IIF((COALESCE(ops_total_read_CNT,0) + COALESCE(ius_user_read_CNT,0)) = 0,1,0))
              ,idx_CNT        = COUNT_BIG(1)
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type  = N'I'
           AND type NOT IN (N'0'    -- rowstore heap index
                           ,N'1'    -- clustered rowstore index
                           ,N'5'    -- clustered columnstore index
                           ,N'F'    -- foreign key constraint
                           ,N'M'    -- missing nonclustered rowstore index
                           )
         GROUP BY
               database_id
       ) AS i
 WHERE IIF(idx_CNT > 0,100.0 * unused_idx_CNT / idx_CNT,0.0) > 5.0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - More Than 5 Percent Databases Indexes Are Unused (BI21)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Blitz Index (BI30) - Database - non nonnonclustered rowstore indexes with Included Columns
-- Diagnostic - Blitz Index (BI31) - Database - < 3% of table & view nonclustered rowstore indexes with Included Columns
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'D'          -- database level aggregate record
      ,database_id  = i.database_id
      ,object_id    = i.database_id
      ,index_id     = i.database_id
      ,type         = N'DB'         -- database "index" type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = IIF(included_index_CNT = 0
                         ,N'(BI30) No included columns in nonclustered rowstore indexes'
                         ,N'(BI31) Included Columns in < 3% nonclustered rowstore indexes - ')
                    + CAST(i.included_index_CNT AS NVARCHAR(20))
                    + N'/'
                    + CAST(i.index_CNT AS NVARCHAR(20))
                    + N' (' + [dbo].[SQLXL_3SD](1.0 * i.included_index_CNT / i.index_CNT,N'%') + N')' -- /zero handled by HAVING clause
  FROM (-- All index-level nonclustered rowstores, in tables or views, that are not non-history table
        SELECT database_id
              ,included_index_CNT = SUM(IIF(included_columns_CNT > 0,1,0))
              ,index_CNT          = COUNT_BIG(1)
          FROM [##SQLXL_Index_compilation]
         WHERE type          = N'2'    -- Nonclustered rowstore index
           AND obj_type_hdr NOT IN (N'INT' -- internal table
                                   ,N'HST' -- History/archive table
                                   )
         GROUP BY
               database_id
        HAVING COUNT_BIG(1) > 0  -- count of indexes greater than zero
       ) AS i
 WHERE (100.0 * i.included_index_CNT / i.index_CNT) < 3.0 -- /zero handled by HAVING clause above
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - < 10% of table & view nonclustered rowstore indexes with Included Columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - (BI32) - Database - less than 5% of views have indexes
-- Divide by zero handled by HAVING clause below
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'D'          -- database level aggregate record
      ,database_id  = i.database_id
      ,object_id    = i.database_id
      ,index_id     = i.database_id
      ,type         = N'DB'         -- database "index" type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = N'(BI32)'
                    + CASE WHEN (100.0 * i.clustered_index_CNT / i.view_CNT) = 0.0 THEN N' No'
                           WHEN (100.0 * i.clustered_index_CNT / i.view_CNT) < 5.0 THEN N' Few'
                           ELSE N''
                      END
                    + N' Few indexed views - ' + CAST(i.clustered_index_CNT AS NVARCHAR(20)) + N' of '  + CAST(i.view_CNT AS NVARCHAR(20))
                    + N' (' + [dbo].[SQLXL_3SD](1.0 * i.clustered_index_CNT / i.view_CNT,N'%') + N')'
                    + N' NCX: ' + CAST(i.nonclustered_index_CNT AS NVARCHAR(20))
                                + N' (' + [dbo].[SQLXL_3SD](1.0 * i.nonclustered_index_CNT / i.view_CNT,N'%') + N')'
  FROM (--  All "index" records in views
        SELECT database_id
              ,clustered_index_CNT    = SUM(clustered_index_CNT)
              ,nonclustered_index_CNT = SUM(nonclustered_index_CNT)
              ,view_CNT               = SUM(IIF(type = N'V',1,0)) -- View, count
          FROM [##SQLXL_Index_sys_objects] AS obj
         WHERE obj.type           = N'V'                          -- View parent/object only
         GROUP BY
               database_id
        HAVING SUM(IIF(type = N'V',1,0)) > 0                      -- view, count
       ) AS i
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - less than 5% of views have indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI32) - Database - less than 5% of nonclustered rowstore indexes with Filters
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'D'          -- database level aggregate record
      ,database_id  = i.database_id
      ,object_id    = i.database_id
      ,index_id     = i.database_id
      ,type         = N'DB'         -- database "index" type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = IIF(100.0 * i.filtered_index_CNT / i.index_CNT < 5.0,N'(BI32) Few ',N'')
                    + N'Filtered nonclustered rowstore indexes: '
                    + CAST(i.filtered_index_CNT AS NVARCHAR(20))
                    + N' of '
                    + CAST(i.index_CNT AS NVARCHAR(20))
                    + N' ('
                    + [dbo].[SQLXL_3SD](1.0 * i.filtered_index_CNT / i.index_CNT,N'%') -- /zero handled by HAVING clause below
                    + N') '

  FROM (-- source user table nonclustered rowstore indexes
        SELECT database_id
              ,filtered_index_CNT = SUM(IIF(filter_definition > N'',1,0))
              ,index_CNT          = COUNT_BIG(1)
          FROM [##SQLXL_Index_compilation]
         WHERE type              = N'2'    -- nonclustered rowstore index
           AND obj_type_hdr NOT IN (N'HST' -- not History/archive table
                                   ,N'INT' -- noot Internal table
                                   )
         GROUP BY
               database_id
        HAVING COUNT_BIG(1) > 0 -- count of nonclustered rowstore indexes
       ) AS i
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - less than 5% of indexes with Filters'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 ##########################################################################################################################################
 ** DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABASE DATABA **
 *Task* Diagnostics - Database
 ##########################################################################################################################################
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- [##SQLXL_Index_sys_databases] - properties & features
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'D'           -- database level aggregate record
      ,database_id  = db.database_id
      ,object_id    = db.database_id
      ,index_id     = db.database_id
      ,type         = N'DB'          -- database "index" type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = STUFF(

--------------------------------------------------------------------------------------------------------------------------------------------
-- Database recommended settings -or- good to know
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Database - Recently created or attached (< 90 days)
+IIF(DATEDIFF(DAY,db.create_date,@collection_DTTM) < 90
    , CHAR(096) + N'Created/Attached/Restored on ' + CONVERT(NVARCHAR(11),db.create_date,2)
                + N' - ' + CAST(DATEDIFF(DAY,db.create_date,@collection_DTTM) AS NVARCHAR(20)) + N' Days ago'
    ,N'')

-- Diagnostic - Database - non-default - Recovery model is not FULL
+IIF(db.recovery_model > 1,CHAR(096) + N'Recovery model ' + QUOTENAME(db.recovery_model_desc),N'')


-- Diagnostic - Database - non-default - [page_verify_option] not CHECKSUM
+IIF(db.[page_verify_option] <> 2,CHAR(096) + N'Page verify option: ' + db.page_verify_option_desc,N'')

-- Diagnostic - Database - non-default - User Access is not MULTI_USER
+IIF(db.user_access > 0,CHAR(096) + N'User Access ' + QUOTENAME(db.user_access_desc),N'')

-- Diagnostic - Database - non-default - Catalog Collation type not DATABASE DEFAULT - Azure SQL Database
+IIF(db.catalog_collation_type > 0
    ,CHAR(096) + N'Catalog Collation type ' + db.catalog_collation_type_desc + N', default [Latin1_General_100_CI_AI]'
    ,N'')

-- Diagnostic - Database - non-default - Database marked NOT Trustworthy
+IIF(db.is_trustworthy_on = 0,CHAR(096) + N'Database marked [NOT TRUSTWORTHY]',N'')

-- Diagnostic - Database - non-default - Database compatibility <> Instance Product Major Version
+IIF(db.compatibility_level <> 10 * CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)
    , CHAR(096) + N'Database version compatibility: ' + QUOTENAME(db.compatibility_level)
                + N' <> Server ' + QUOTENAME(10 * CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT))
    ,N'')

-- Diagnostic - Database - non-default - Database Collation <> Server Collation
+IIF(db.collation_name <> inst.collation
    ,CHAR(096) + N'Database collation: ' + QUOTENAME(db.collation_name) + N' <> Server: ' + QUOTENAME(inst.collation)
    ,N'')

-- Diagnostic - Database - non-default - Delayed durability ALLOWED or FORCED
+IIF(db.delayed_durability > 0,CHAR(096) + N'Delayed durability ' + QUOTENAME(db.delayed_durability_desc) + N', default [DISABLED]',N'')

-- Diagnostic - Database - non-default - Query parameterization FORCED
+IIF(db.is_parameterization_forced = 1,CHAR(096) + N'Query parameterization is [FORCED]',N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Database DDL Triggers
--------------------------------------------------------------------------------------------------------------------------------------------
+ IIF(   db.clr_trigger_CNT           > 0
      OR db.sql_trigger_CNT           > 0
      OR db.is_instead_of_trigger_CNT > 0
     , CHAR(096)
-- Diagnostic - Database - has CLR trigger(s)
     + N'DDL Triggers' + N' CLR: ' + IIF(db.clr_trigger_CNT > 0,CAST(db.clr_trigger_CNT AS NVARCHAR(20)),N'0')
-- Diagnostic - Database - has SQL trigger(s)
     + N' SQL: ' + IIF(db.sql_trigger_CNT > 0,CAST(db.sql_trigger_CNT AS NVARCHAR(20)),N'0')
-- Diagnostic - Database - has INSTEAD OF trigger(s)
     + N' Instead Of: ' + IIF(db.is_instead_of_trigger_CNT > 0,CAST(db.is_instead_of_trigger_CNT AS NVARCHAR(20)),N'0')
     , N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Database Statistics settings
--------------------------------------------------------------------------------------------------------------------------------------------
+ CHAR(096) + N'Statistics: '
-- Diagnostic - Database - Statistics Auto create OFF/ON
            + N'auto create ' + IIF(db.is_auto_create_stats_on = 1,N'[ON]',N'[OFF] (non-default)')
-- Diagnostic - Database - Statistics Auto update OFF/ON
            + N', auto update '         + IIF(db.is_auto_update_stats_on       = 1,N'[ON]',N'[OFF] (non-default)')
-- Diagnostic - Database - Statistics Auto update asynchronous OFF/ON
            + N', update asynchronous ' + IIF(db.is_auto_update_stats_async_on = 1,N'[ON] (non-default)',N'[OFF]')
-- Diagnostic - Database - (SQL 2014+) Statistics Incremental OFF/ON
            + IIF(PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 12 -- SQL 2014+
                 ,N', incremental create ' + IIF(db.is_auto_create_stats_incremental_on = 1,N'[ON] (non-default)',N'[OFF]')
                 ,N'')

-- Diagnostic - Database - consider enabling auto create statistics
-- Diagnostic - Database - consider enabling auto update statistics
-- Diagnostic - Database - consider enabling asynch auto update statistics
+ IIF(   db.is_auto_create_stats_on       = 0
      OR db.is_auto_update_stats_on       = 0
      OR db.is_auto_update_stats_async_on = 0
     , CHAR(096)
     + N'> Consider enabling statistics'
     + STUFF( IIF(db.is_auto_create_stats_on       = 0,N', auto creation'           ,N'')
            + IIF(db.is_auto_update_stats_on       = 0,N', auto update'             ,N'')
            + IIF(db.is_auto_update_stats_async_on = 0,N', auto update asynchronous',N'')
            ,1,1,N'')
     ,N'')

-- Diagnostic - Database - (SQL 2014+) Consider enabling incremental statistics - Statistics Incremental OFF with partitioned tables
+ IIF(    PARSENAME(CONVERT(SYSNAME,SERVERPROPERTY('ProductVersion')),4) >= 12 -- SQL 2014+
      AND partitioned_tbl.CNT                    > 0
      AND db.is_auto_create_stats_incremental_on = 0
     , CHAR(096) + N'> ' + [dbo].[SQLXL_3SD](partitioned_tbl.CNT,N'I')
                         + N' partitioned tables in database - consider enabling incremental statistics'
     , N'')

-- Diagnostic - Database - reconsider DB auto_update_stats due to high volumes of data changes (>10% stats rows) & NO_RECOMPUTE off
+ IIF(   db.is_auto_update_stats_on = 1 -- ON
     ,COALESCE( CHAR(096) + N'> '
              + (-- rowstore indexes with auto stats recompute & more than 10% rows midified
                 SELECT  CONVERT(NVARCHAR(20),SUM(1))
                       + N' high write (>10% statistics rows) indexes with NO_RECOMPUTE off - consider auto update stats [OFF]?'
                   FROM [##SQLXL_Index_compilation] AS i
                  WHERE db.database_id = i.database_id
                    AND i.type        IN (N'1'              -- clustered rowstore index
                                         ,N'2'              -- nonclustered rowstore index
                                         )                  -- rowstore heapS handled separately.
                    AND i.stats_no_recompute  = 0           -- only affects indexes getting recomputed automagically
                    AND IIF(i.stathdr_row_CNT > 0, 100.0 * i.stats_prop_modification_CNT / i.stathdr_row_CNT,0.0) > 10.0
                )
              ,N'')
     ,N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Database ANSI Settings
--------------------------------------------------------------------------------------------------------------------------------------------
+IIF(   db.is_ansi_null_default_on       = 0
     OR db.is_ansi_nulls_on              = 0
     OR db.is_ansi_padding_on            = 0
     OR db.is_ansi_warnings_on           = 0
     OR db.is_cursor_close_on_commit_on  = 0
     OR db.is_arithabort_on              = 0
     OR db.is_concat_null_yields_null_on = 0
    , CHAR(096)
    + N'ANSI DEFAULTS OFF: '
    + STUFF(
-- Diagnostic - Database - ANSI DEFAULT is ON: ansi_null_default
           + IIF(db.is_ansi_null_default_on       = 0,N', NULL DEFAULT',N'')
-- Diagnostic - Database - ANSI DEFAULT is ON: ansi_nulls
           + IIF(db.is_ansi_nulls_on              = 0,N', NULLS'  ,N'')
-- Diagnostic - Database - ANSI DEFAULT is ON: ansi_padding
           + IIF(db.is_ansi_padding_on            = 0,N', PADDING',N'')
-- Diagnostic - Database - ANSI DEFAULT is ON: ansi_warnings
           + IIF(db.is_ansi_warnings_on           = 0,N', WARNNGS',N'')
-- Diagnostic - Database - ANSI DEFAULT is ON: cursor_close_on_commit
           + IIF(db.is_cursor_close_on_commit_on  = 0,N', CURSOR CLOSE ON COMMIT' ,N'')
-- Diagnostic - Database - ANSI DEFAULT is ON: arithabort
           + IIF(db.is_arithabort_on              = 0,N', ARITHABORT'             ,N'')
-- Diagnostic - Database - ANSI DEFAULT is ON: concat_null_yields_null
           + IIF(db.is_concat_null_yields_null_on = 0,N', CONCAT NULL YIELDS NULL',N'')
           ,1,1,N'') -- end of STUFF function
    ,N'')

-- Diagnostic - Database - non-default - ANSI Quoted identifier ON
+IIF(db.is_quoted_identifier_on > 0,CHAR(096) + N'ANSI Quoted identifier [ON]',N'')

-- Diagnostic - Database - non-default - ANSI Numeric roundabort ON
+IIF(db.is_numeric_roundabort_on > 0,CHAR(096) + N'Numeric roundabort [ON]',N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Change Tracking - [sys].[change_tracking_databases]
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Database - non-default - Change Tracking Enabled
-- Diagnostic - Database - non-default - Change Tracking Properties
+ IIF(db.is_auto_cleanup_on IS NOT NULL                     -- DMV only allows values of 0 = Off, 1 = On
     , CHAR(096)
     + N'CTT Change Tracking Enabled - Auto Cleanup '
     + IIF(is_auto_cleanup_on = 1,N'[ON]',N'[OFF]')
     + N' Retention = [' + CAST(retention_period AS NVARCHAR(20))
     + N' ' + retention_period_units_desc + N']'
     ,N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Query Store
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Database - Good to know - Query Store Status & Properties
+IIF(CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 13 -- only show if SQL Server version 2016+
    ,CHAR(096) + N'Query Store ' + QUOTENAME(qso.actual_state_desc)

-- Diagnostic - Database - non-default - Query Store Readonly - Reason
    + IIF(qso.readonly_reason > 0
         , N' Reason: '
         + CASE qso.readonly_reason
                WHEN      1 THEN N'DB READ_ONLY'
                WHEN      2 THEN N'DB SINGLE_USER'
                WHEN      4 THEN N'DB EMERGENCY'
                WHEN      8 THEN N'DB SECONDARY REPLICA'
                WHEN  65536 THEN N'QS SIZE LIMIT'
                WHEN 131072 THEN N'QS STATEMENT MEMORY LIMIT'
                WHEN 262144 THEN N'QS PERSISTENCE LIMIT'
                WHEN 524288 THEN N'DB OUT OF SPACE'
                ELSE N'*NOT FOUND*'
           END
         ,N'') -- IIF(qso.readonly_reason > 0

    + IIF(qso.actual_state > 0
         , CHAR(096) + N'> Size - Max: ' + [dbo].[SQLXL_3SD](qso.max_storage_size_mb    ,N'MB')
                      + N' Used: '       + [dbo].[SQLXL_3SD](qso.current_storage_size_mb,N'MB')
                      + IIF(qso.max_storage_size_mb > 0
                           ,N' (' + [dbo].[SQLXL_3SD](1.0 * qso.current_storage_size_mb / qso.max_storage_size_mb,N'%') + N')'
                           ,N'')
                      + N' Aggregation interval: ' + [dbo].[SQLXL_3SD](qso.interval_length_minutes,N'I') + N' minutes'
                      + N' Flush interval: '       + [dbo].[SQLXL_3SD](qso.flush_interval_seconds,N'I')  + N' seconds'
                      + N' Max Plans: '            + [dbo].[SQLXL_3SD](qso.max_plans_per_query   ,N'I')

         -----------------------------------------------------
         + CHAR(096) + N'> Capture mode '    + QUOTENAME(COALESCE(qso.query_capture_mode_desc,N'ALL')) -- default for 2016 is ALL
                      + N' Size cleanup '    + QUOTENAME(qso.size_based_cleanup_mode_desc)
                      + N' Stale threshold ' + QUOTENAME([dbo].[SQLXL_3SD](qso.stale_query_threshold_days,N'I') + N' days')
                      + IIF(CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 14  -- 2017+
                           ,N' Wait stats ' + QUOTENAME(qso.wait_stats_capture_mode_desc)
                           ,N'')
                      + IIF(CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 15  -- 2019+
                           , IIF(qso.capture_policy_execution_count >= 0
                                ,N', Exec CNT: ' + QUOTENAME(qso.capture_policy_execution_count)
                                ,N'')
                           + IIF(qso.capture_policy_total_compile_cpu_time_ms   >= 0
                                ,N', Compile Time: ' + [dbo].[SQLXL_3SD](qso.capture_policy_total_compile_cpu_time_ms,N'ms')
                                ,N'')
                           + IIF(qso.capture_policy_total_execution_cpu_time_ms >= 0
                                ,N', Execution Time: ' + [dbo].[SQLXL_3SD](qso.capture_policy_total_execution_cpu_time_ms,N'ms')
                                ,N'')
                           + IIF(qso.capture_policy_stale_threshold_hours       >= 0
                                ,N', Stale: ' + CAST(qso.capture_policy_stale_threshold_hours AS NVARCHAR(20)) + N'hrs'
                                ,N'')
                           ,N'')
         ,N'') -- IIF(qso.actual_state > 0

-- Diagnostic - Database - Query Store settings and properties, actual_state_additional_info
    + IIF(qso.actual_state_additional_info > N''
         ,CHAR(096) + N'> State Info: ' + qso.actual_state_additional_info
         ,N'')
    ,N'') -- IIF(CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 13)

-- Diagnostic - Database - non-default - Query Store Auto Tune states
    + COALESCE((--
                SELECT diagnostic = CHAR(096)
                                  + N'> Auto Tune: '
                                  + ato.name + N' is ' + ato.actual_state_desc
                                  + IIF(ato.desired_state <> ato.actual_state
                                       , N', Desired state: ' + ato.desired_state_desc
                                       + N', Reason: '        + ato.reason_desc
                                       , N'')
                  FROM [##SQLXL_Index_sys_database_automatic_tuning_options] AS ato
                 WHERE db.database_id = ato.database_id
                   FOR XML PATH(N''), TYPE                                                          -- database autotune properties
               ).value('.','VARCHAR(MAX)')
              ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
-- Database interesting to know
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Database - non-default - Date correlation optimization ENABLED
+IIF(db.is_date_correlation_on = 0,CHAR(096) + N'Date correlation optimization [OFF] - [ON] can create more efficient plans',N'')

-- Diagnostic - Database - non-default - Accelerated database recovery ON
+IIF(db.is_accelerated_database_recovery_on > 0,CHAR(096) + N'Accelerated database recovery [ON], default [OFF]',N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Database non-default History/Replication settings
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Database - non-default - Change Data Capture ENABLED
+IIF(db.is_cdc_enabled > 0,CHAR(096) + N'Change Data Capture (CDC) [ENABLED]',N'')

-- Diagnostic - Database - non-default - Temporal history retention Enabled
+IIF(db.is_temporal_history_retention_enabled > 0,CHAR(096) + N'temporal retention policy cleanup task [ENABLED]',N'')

-- Diagnostic - Database - non-default - Data retention Enabled - automatic deletion of obsolete records
+IIF(    db.is_data_retention_enabled > 0
     AND CAST(SERVERPROPERTY(N'EngineEdition') AS INT) = 9  -- Azure SQL Edge
    , CHAR(096) + N'Data retention [ENABLED] - automatic deletion of obsolete records'
    , N'')

-- Diagnostic - Database - non-default - Publication database in  replication
+IIF(db.is_merge_published > 0,CHAR(096) + N'Publication database in  replication',N'')

-- Diagnostic - Database - non-default - Distribution Database for replication
+IIF(db.is_distributor > 0,CHAR(096) + N'Distribution Database for replication',N'')

-- Diagnostic - Database - non-default - Database in Sync with backup
+IIF(db.is_sync_with_backup > 0,CHAR(096) + N'Database Replication synchronization with backup',N'')

-- Diagnostic - Database - non-default - Database is Published
+IIF(db.is_published > 0,CHAR(096) + N'Published',N'')

-- Diagnostic - Database - non-default - Database Broker DISABLED
-- Diagnostic - Database - non-default - Honor broker priority is OFF
+IIF(   db.is_broker_enabled           = 0
     OR db.is_honor_broker_priority_on = 0
    , CHAR(096)
    + STUFF( IIF(db.is_broker_enabled = 0,N', Broker [DISABLED]',N'')
           + IIF(db.is_honor_broker_priority_on = 0,N', Honor broker priority [OFF]',N'')
           ,1,2,N'')
    ,N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Database non-default features settings
-- <FUTURE> consider grouping all INSTALLABLE COMPONENTS together
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Database - non-default - Read committed snapshot isolation ENABLED
+IIF(db.is_read_committed_snapshot_on > 0,CHAR(096) + N'Read committed snapshot [ON]',N'')

-- Diagnostic - Database - non-default - fulltext ENABLED
+IIF(db.is_fulltext_enabled > 0,CHAR(096) + N'Fulltext feature [ENABLED]',N'')

-- Diagnostic - Database - non-default - Ledger Database Enabled
+IIF(db.is_ledger_on > 0,CHAR(096) + N'Ledger Database feature [ENABLED]',N'')

-- Diagnostic - Database - non-default - Remote data archive ENABLED - deprecated SQL 2022+
+IIF(db.is_remote_data_archive_enabled > 0,CHAR(096) + N'Remote data archive feature [ENABLED] - deprecated SQL 2022+',N'')

-- Diagnostic - Database - non-default - additional Memory optimized features (e.g. Hybrid Buffer Pool) are enabled
+IIF(db.is_memory_optimized_ENABLED > 0,CHAR(096) + N'XTP In-Memory optimized feature [ENABLED]',N'')

-- Diagnostic - Database - non-default - Encrypted
+IIF(db.is_encrypted > 0,CHAR(096) + N'Database is Encrypted' + IIF(db.is_master_key_encrypted_by_server > 0,N', Master key server encrypted',N''),N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Database non-default operational modes
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Database - non-default - Database is Non-Readable Secondary
+ IIF(    hdrs.is_primary_replica                    = 0
      AND hdrs.secondary_role_allow_connections_desc = N'NO'
     ,CHAR(096) + N'[NON-READABLE SECONDARY]'
     ,N'')

-- Diagnostic - Database - non-default - Reuse of Log space is waiting on
+IIF(db.log_reuse_wait > 0,CHAR(096) + N'Log reuse wait ' + QUOTENAME(db.log_reuse_wait_desc),N'')

-- Diagnostic - Database - non-default - Auto Close is ON
+IIF(db.is_auto_close_on > 0,CHAR(096) + N'Auto Close [ON] - turn [OFF]!}',N'')

-- Diagnostic - Database - non-default - Auto shrink is ON
+IIF(db.is_auto_shrink_on > 0,CHAR(096) + N'Auto Shrink [ON] - turn OFF!',N'')

-- Diagnostic - Database - non-default - Database in [STANDBY] mode - read-only for restore log
+IIF(db.is_in_standby > 0,CHAR(096) + N'Database in [STANDBY] - read-only for restore log',N'')

-- Diagnostic - Database - non-default - Database NOT cleanly shut down
+IIF(db.is_cleanly_shutdown = 0 AND db.is_auto_close_on = 1,CHAR(096) + N'[NOT] cleanly shut down',N'')

-- Diagnostic - Database - non-default - Database in READ ONLY mode
+IIF(db.is_read_only > 0,CHAR(096) + N'Database in [READ ONLY] mode',N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Database non-default settings
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Database - non-default - Database State is not not ONLINE
+ IIF(db.state <> 0,CHAR(096) + N'Database state: ' + db.state_desc,N'')

-- Diagnostic - Database - non-default - DB Mixed page allocations are OFF
+IIF(db.is_mixed_page_allocation_on = 0,CHAR(096) + N'DB Mixed page allocations [OFF], ON can reduce SGAM contention',N'')

-- Diagnostic - Database - non-default - Target recovery time = 0, using Automatic Checkpoints
-- Diagnostic - Database - non-default - Target recovery time <> 0 (default 60 seconds)
+IIF(COALESCE(db.target_recovery_time_in_seconds,0) = 0
    ,CHAR(096) + N'Target recovery time [ZERO], using Automatic Checkpoints'
    ,IIF(COALESCE(db.target_recovery_time_in_seconds,0) NOT IN (0,60)
        ,CHAR(096) + N'Target recovery time '
                   + QUOTENAME(db.target_recovery_time_in_seconds)
                   + N' seconds, affects CHECKPOINT frequency'
        ,N'')
    )

-- Diagnostic - Database - non-default - Database is Always On
+IIF(db.replica_id IS NOT NULL OR db.group_database_id IS NOT NULL
    , CHAR(096) + N'Always On database:'
    + N' Replica ID '   + QUOTENAME(CAST(db.replica_id        AS NVARCHAR(36))) -- uniqueidentifiers
    + N', GROUP DB ID ' + QUOTENAME(CAST(db.group_database_id AS NVARCHAR(36))) -- uniqueidentifiers
    ,N'')

-- Diagnostic - Database - non-default - Supplemental logging ENABLED
+IIF(db.is_supplemental_logging_enabled > 0,CHAR(096) + N'Supplemental logging [ENABLED]',N'')

-- Diagnostic - Database - non-default - tempdb spills to remote store ENABLED
+IIF(db.is_tempdb_spill_to_remote_store > 0,CHAR(096) + N'tempdb spills to [REMOTE STORE]',N'')

-- Diagnostic - Database - non-default - Result set caching - Azure Synapse Analytics Gen2 -  ENABLED
+IIF(db.is_result_set_caching_on > 0,CHAR(096) + N'Result set caching [ON]',N'') -- Azure Synapse Analytics Gen2

-- Diagnostic - Database - non-default - Snapshot isolation ENABLED
+IIF(db.snapshot_isolation_state > 0,CHAR(096) + N'Snapshot isolation ' + QUOTENAME(db.snapshot_isolation_state_desc),N'')

-- Diagnostic - Database - non-default - Change Feed ENABLED
+IIF(db.is_change_feed_enabled > 0,CHAR(096) + N'Change Feed [ENABLED]',N'')

-- Diagnostic - Database - non-default - Recursive triggers ON
+IIF(db.is_recursive_triggers_on > 0,CHAR(096) + N'Recursive triggers [ON]',N'')

-- Diagnostic - Database - non-default - Local cursor default ON
+IIF(db.is_local_cursor_default > 0,CHAR(096) + N'Local cursor default [ON]',N'')

-- Diagnostic - Database - non-default - Database chaining ON
+IIF(db.is_db_chaining_on > 0,CHAR(096) + N'Database chaining [ON]',N'')

-- NOTE - DB - column [is_subscribed] - BOL: "This column isn't usedb. It will always return 0"

-- Diagnostic - Database - non-default - Federation member
+IIF(db.is_federation_member > 0,CHAR(096) + N'Database is Federation member',N'')

-- Diagnostic - Database - non-default - Stale page detection Enabled - Azure Synapse Analytics Gen2.
+IIF(db.is_stale_page_detection_on > 0,CHAR(096) + N'Stale page detection [ON]',N'')

-- Diagnostic - Database - non-default - Memory optimized tables elevate to SNAPSHOT is OFF
+IIF(db.is_memory_optimized_elevate_to_snapshot_on = 0,CHAR(096) + N'XTP Memory optimized elevate to SNAPSHOT [OFF]',N'')

-- Diagnostic - Database - non-default - Snapshot source database
+IIF(db.source_database_id > 0
    ,CHAR(096) + N'Snapshot source DB '
               + QUOTENAME((--
                            SELECT name
                              FROM [##SQLXL_Index_sys_databases] x
                             WHERE db.source_database_id = x.database_id
                           ))
    ,N'')

-- Diagnostic - Database - non-default - Physical database name <> DB name
+IIF(db.physical_database_name <> db.name,CHAR(096) + N'Physical database name ' + QUOTENAME(db.physical_database_name),N'')

-- Diagnostic - Database - non-default - Contained database status PARTIAL
+IIF(db.containment > 0
    , CHAR(096) + N'Contained database status ' + db.containment_desc + N', default [NONE]'
-- Diagnostic - Database - non-default - Contained database default language
    + IIF(db.default_language_lcid > 0,CHAR(096) + N'> Default language ' + QUOTENAME(db.default_language_name),N'')
-- Diagnostic - Database - non-default - Contained database fulltext language
    + IIF(db.default_fulltext_language_lcid > 0,CHAR(096) + N'> fulltext language ' + QUOTENAME(db.default_fulltext_language_name),N'')
-- Diagnostic - Database - non-default - Contained database 2 digit year cutoff
    + IIF(db.two_digit_year_cutoff > 0,CHAR(096) + N'> 2 digit year cutoff ' + QUOTENAME(db.two_digit_year_cutoff),N'')
-- Diagnostic - Database - non-default - Contained DB nested triggers ON
    + IIF(db.is_nested_triggers_on > 0,CHAR(096) + N'> Nested triggers [ON]',N'')
-- Diagnostic - Database - non-default - Contained DB transform noise words ON
    + IIF(db.is_transform_noise_words_on > 0,CHAR(096) + N'> Transform noise words [ON]',N'')
    ,N'')

-- Diagnostic - Database - non-default - Memory Optimized resource pool ID
+IIF(db.resource_pool_id > 0,CHAR(096) + N'XTP Memory optimized resource pool ID ' + CAST(db.resource_pool_id AS NVARCHAR(20)),N'')

----------------------------------------------------------------------------------------------------
,1,1,N'') -- end of STUFF function

/*** LOCAL TESTING ***
SELECT db.name,db.replica_id,db.replica_id,qso.database_id
--*/
  FROM (-- Get instance-level collation
        SELECT collation = text_value_in_use
          FROM [##SQLXL_Instance_info]
         WHERE source = N'SERVERPROPERTY'
           AND name   = N'COLLATION'
       ) AS inst
 CROSS
  JOIN [##SQLXL_Index_sys_databases]                    AS db

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_database_query_store_options] AS qso
    ON db.database_id = qso.database_id

  LEFT OUTER
  JOIN  [##SQLXL_Index_sys_database_automatic_tuning_options] AS ato
    ON db.database_id = ato.database_id

  LEFT OUTER
  JOIN (-- count tables with more than 1 partition by database
        SELECT database_id
              ,CNT = COUNT_BIG(1)
          FROM [##SQLXL_Index_compilation]
         WHERE N'P' = rec_type             -- parent level aggregate record
           AND 1    < partition_CNT
         GROUP BY
               database_id
       ) AS partitioned_tbl
    ON db.database_id = partitioned_tbl.database_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_dm_hadr_database_replica] AS hdrs
    ON db.database_id = hdrs.database_id
   AND 1              = hdrs.is_local
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - includes query store, partition count, hadr, automatic tuning)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Database scoped configurations
--------------------------------------------------------------------------------------------------------------------------------------------
-- For SQL 2016, create reference table of all DATABASE SCOPED CONFIGURATIONS and their DEFAULT VALUES to compare against actual settings
-- SQL 2017 introduced new column [is_value_default] to simplify matters going forwardS
-- SQL 2019 changed some of the names as reflected below

SELECT TOP (0)
       name          = CAST(NULL AS NVARCHAR(60))  COLLATE Latin1_General_100_CI_AI
      ,default_value = CAST(NULL AS NVARCHAR(100)) COLLATE Latin1_General_100_CI_AI
      ,default_label = CAST(NULL AS NVARCHAR(100)) COLLATE Latin1_General_100_CI_AI
  INTO #database_scoped_configurations;

INSERT
  INTO #database_scoped_configurations WITH (TABLOCKX)
      (name
      ,default_value
      ,default_label
      )
VALUES -- default values for database scoped configurations
 (N'ACCELERATED_PLAN_FORCING',N'1',N'ON')
,(N'ASYNC_STATS_UPDATE_WAIT_AT_LOW_PRIORITY',N'0',N'OFF')
,(N'BATCH_MODE_ADAPTIVE_JOINS',N'1',N'ON')                 -- 2019+
,(N'BATCH_MODE_MEMORY_GRANT_FEEDBACK',N'1',N'ON')          -- 2019+
,(N'BATCH_MODE_ON_ROWSTORE',N'1',N'ON')
,(N'CE_FEEDBACK',N'1',N'ON')
,(N'DEFERRED_COMPILATION_TV',N'1',N'ON')
,(N'DISABLE_BATCH_MODE_ADAPTIVE_JOINS',N'0',N'OFF')        -- 2017
,(N'DISABLE_BATCH_MODE_MEMORY_GRANT_FEEDBACK',N'0',N'OFF') -- 2017
,(N'DISABLE_INTERLEAVED_EXECUTION_TVF',N'1',N'ON')         -- 2017
,(N'DOP_FEEDBACK',N'0',N'OFF')
,(N'DW_COMPATIBILITY_LEVEL',N'0',N'AUTO')                  -- Azure Synapse Analytics only
,(N'ELEVATE_ONLINE',N'OFF',N'OFF')
,(N'ELEVATE_RESUMABLE',N'OFF',N'OFF')
,(N'EXEC_QUERY_STATS_FOR_SCALAR_FUNCTIONS',N'1',N'ON')
,(N'FORCE_SHOWPLAN_RUNTIME_PARAMETER_COLLECTION',N'0',N'OFF')
,(N'GLOBAL_TEMPORARY_TABLE_AUTO_DROP',N'1',N'ON')
,(N'IDENTITY_CACHE',N'1',N'ON')
,(N'INTERLEAVED_EXECUTION_TVF',N'1',N'ON')                 -- 2019+
,(N'ISOLATE_SECURITY_POLICY_CARDINALITY',N'0',N'OFF')
,(N'LAST_QUERY_PLAN_STATS',N'0',N'OFF')
,(N'LEDGER_DIGEST_STORAGE_ENDPOINT',N'OFF',N'OFF')
,(N'LEGACY_CARDINALITY_ESTIMATION',N'0',N'OFF')
,(N'LIGHTWEIGHT_QUERY_PROFILING',N'1',N'ON')
,(N'MAXDOP',N'0',N'PRIMARY')
,(N'MEMORY_GRANT_FEEDBACK_PERCENTILE_GRANT',N'1',N'ON')
,(N'MEMORY_GRANT_FEEDBACK_PERSISTENCE',N'1',N'ON')
,(N'OPTIMIZE_FOR_AD_HOC_WORKLOADS',N'0',N'OFF')
,(N'OPTIMIZED_PLAN_FORCING',N'1',N'ON')
,(N'PARAMETER_SENSITIVE_PLAN_OPTIMIZATION',N'1',N'ON')
,(N'PARAMETER_SNIFFING',N'1',N'ON')
,(N'PAUSED_RESUMABLE_INDEX_ABORT_DURATION_MINUTES',N'1440',N'1440 Minutes')
,(N'QUERY_OPTIMIZER_HOTFIXES',N'0',N'OFF')
,(N'ROW_MODE_MEMORY_GRANT_FEEDBACK',N'1',N'ON')
,(N'TSQL_SCALAR_UDF_INLINING',N'1',N'ON')
,(N'VERBOSE_TRUNCATION_WARNINGS',N'1',N'ON')
,(N'XTP_PROCEDURE_EXECUTION_STATISTICS',N'0',N'OFF')
,(N'XTP_QUERY_EXECUTION_STATISTICS',N'0',N'OFF')
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - created database scoped configuration default values'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

-- Diagnostic - Database - Configuration non-default - ACCELERATED_PLAN_FORCING is OFF
-- Diagnostic - Database - Configuration non-default - ASYNC_STATS_UPDATE_WAIT_AT_LOW_PRIORITY is ON
-- Diagnostic - Database - Configuration non-default - CE_FEEDBACK is OFF
-- Diagnostic - Database - Configuration non-default - DISABLE_BATCH_MODE_ADAPTIVE_JOINS is ON
-- Diagnostic - Database - Configuration non-default - BATCH_MODE_ADAPTIVE_JOINS is OFF
-- Diagnostic - Database - Configuration non-default - DISABLE_BATCH_MODE_MEMORY_GRANT_FEEDBACK is ON
-- Diagnostic - Database - Configuration non-default - BATCH_MODE_MEMORY_GRANT_FEEDBACK is OFF
-- Diagnostic - Database - Configuration non-default - BATCH_MODE_ON_ROWSTORE is OFF
-- Diagnostic - Database - Configuration non-default - DEFERRED_COMPILATION_TV is OFF
-- Diagnostic - Database - Configuration non-default - DOP_FEEDBACK is ON
-- Diagnostic - Database - Configuration non-default - DW_COMPATIBILITY_LEVEL is not AUTO
-- Diagnostic - Database - Configuration non-default - ELEVATE_ONLINE is not OFF
-- Diagnostic - Database - Configuration non-default - ELEVATE_RESUMABLE is not OFF
-- Diagnostic - Database - Configuration non-default - EXEC_QUERY_STATS_FOR_SCALAR_FUNCTIONS is OFF
-- Diagnostic - Database - Configuration non-default - FORCE_SHOWPLAN_RUNTIME_PARAMETER_COLLECTION is ON
-- Diagnostic - Database - Configuration non-default - GLOBAL_TEMPORARY_TABLE_AUTO_DROP is OFF
-- Diagnostic - Database - Configuration non-default - IDENTITY_CACHE is OFF
-- Diagnostic - Database - Configuration non-default - INTERLEAVED_EXECUTION_TVF is OFF
-- Diagnostic - Database - Configuration non-default - DISABLE_INTERLEAVED_EXECUTION_TVF is OFF
-- Diagnostic - Database - Configuration non-default - ISOLATE_SECURITY_POLICY_CARDINALITY is ON
-- Diagnostic - Database - Configuration non-default - LAST_QUERY_PLAN_STATS is ON
-- Diagnostic - Database - Configuration non-default - LEDGER_DIGEST_STORAGE_ENDPOINT is ON
-- Diagnostic - Database - Configuration non-default - LEGACY_CARDINALITY_ESTIMATION is not OFF
-- Diagnostic - Database - Configuration non-default - LIGHTWEIGHT_QUERY_PROFILING is OFF
-- Diagnostic - Database - Configuration non-default - MAXDOP is not 0 - does not use instance setting
-- Diagnostic - Database - Configuration non-default - MEMORY_GRANT_FEEDBACK_PERCENTILE_GRANT is OFF
-- Diagnostic - Database - Configuration non-default - MEMORY_GRANT_FEEDBACK_PERSISTENCE is OFF
-- Diagnostic - Database - Configuration non-default - OPTIMIZE_FOR_AD_HOC_WORKLOADS is ON
-- Diagnostic - Database - Configuration non-default - OPTIMIZED_PLAN_FORCING is OFF
-- Diagnostic - Database - Configuration non-default - PARAMETER_SENSITIVE_PLAN_OPTIMIZATION is OFF
-- Diagnostic - Database - Configuration non-default - PARAMETER_SNIFFING is OFF
-- Diagnostic - Database - Configuration non-default - PAUSED_RESUMABLE_INDEX_ABORT_DURATION_MINUTES is not 1 day
-- Diagnostic - Database - Configuration non-default - QUERY_OPTIMIZER_HOTFIXES is not OFF
-- Diagnostic - Database - Configuration non-default - ROW_MODE_MEMORY_GRANT_FEEDBACK is OFF
-- Diagnostic - Database - Configuration non-default - TSQL_SCALAR_UDF_INLINING is OFF
-- Diagnostic - Database - Configuration non-default - VERBOSE_TRUNCATION_WARNINGS is OFF
-- Diagnostic - Database - Configuration non-default - XTP_PROCEDURE_EXECUTION_STATISTICS is ON
-- Diagnostic - Database - Configuration non-default - XTP_QUERY_EXECUTION_STATISTICS is ON

INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'D'           -- database level aggregate record
      ,database_id  = d.database_id
      ,object_id    = d.database_id
      ,index_id     = d.database_id
      ,type         = N'DB'          -- database "index" type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = N'Database Scoped Configurations:' + sc.diagnostic
  FROM [##SQLXL_Index_sys_databases] d
 OUTER
 APPLY (--
        SELECT -- double SELECT required for XML TYPE VALUE below
       (SELECT  CHAR(096)
              + N'> '
              + dbsc.name
              + N' value '
              + QUOTENAME(CASE dbsc.value WHEN N'0'              -- rowstore heap
                                          THEN N'OFF'
                                          WHEN N'1'              -- clustered rowstore index
                                          THEN N'ON'
                                          ELSE dbsc.value
                          END)
              + N' is not DEFAULT '
              + QUOTENAME(COALESCE(src.default_label,N'not found'))
          FROM [##SQLXL_Index_sys_database_scoped_configurations] AS dbsc
          LEFT OUTER
          JOIN #database_scoped_configurations                    AS src
            ON dbsc.name                 = src.name
         WHERE d.database_id             = dbsc.database_id
           AND (   src.default_value    <> CAST(dbsc.value AS NVARCHAR(100))
                OR dbsc.is_value_default = 0
               )
           FOR XML PATH(N''), TYPE                                                                 -- database scoped configurations
       ).value('.',N'NVARCHAR(MAX)')
       ) sc(diagnostic)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Database Diagnostics - database scoped configuration non-default values'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
############################################################################################################################################
*** PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT PARENT ***
 *Task* Diagnostics - Parent & Index Types
############################################################################################################################################
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
        SELECT i.rec_type
              ,i.database_id
              ,i.object_id
              ,i.index_id
              ,i.type
              ,i.sub_type
              ,prescription = NULL
              ,diagnostic = STUFF(-- remove unneeded leading CHAR(096)

-- Diagnostic - Table - Is empty

-----------------------------------------------------------------------------------------------------------------------
-- Storage
-----------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Parent - (BI73) - Memory Optimized (XTP) & Durability description
-- Diagnostic - Index - (BI73) - Memory Optimized (XTP) & Durability description
                                 + IIF(obj.is_memory_optimized = 1
                                      , CHAR(096) + N'(BI73) [MEMORY OPTIMIZED]' + N' Durability ' + QUOTENAME(obj.durability_desc)
-- Diagnostic - (BI73) - Parent - Memory Optimized (XTP) NOT PERSISTED (SCHEMA_ONLY)
-- Diagnostic - (BI73) - Index - Memory Optimized (XTP) NOT PERSISTED (SCHEMA_ONLY)
                                      + IIF(obj.durability = 1,N' *data NOT PERSISTED*',N'')
                                      + IIF(i.tbl_is_empty = 1,N' [EMPTY]',N'')
                                      ,N'')
-- Diagnostic - Table - EXTERNAL TABLE
                                 + IIF(obj.is_external= 1,CHAR(096) + N'[EXTERNAL TABLE]',N'')
-- Diagnostic - Table - FILETABLE
                                 + IIF(obj.is_filetable = 1,CHAR(096) + N'[FILETABLE]',N'')

-----------------------------------------------------------------------------------------------------------------------
-- Internal, SQL Table Valued Function, View
-----------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Parent - is Internal (System) Table & internal type description
-- Diagnostic - Parent - is SQL Table Valued Function
-- Diagnostic - Parent - is View
                                 + IIF(obj.type IN (N'IT'   -- internal/system table
                                                   ,N'TF'   -- SQL table-valued-function SQL 2012+
                                                   ,N'V'    -- View
                                                   )
                                      , CHAR(096) + QUOTENAME(obj.type_desc)
                                      + COALESCE(N' ' + QUOTENAME(obj.sub_type_desc),N'')
                                      + COALESCE(QUOTENAME( IIF(obj.is_dropped_ledger_view = 1,N'DROPPED_',N'')
                                                          + IIF(obj.ledger_view_type > 0,obj.ledger_view_type_desc,NULL)
                                                          ),N'')
                                      + IIF(i.tbl_is_empty = 1,N' [EMPTY]',N'')
                                      ,N'')

-----------------------------------------------------------------------------------------------------------------------
-- History - CDC
-----------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI110) - Parent - History - Change Data Capture ENABLED
-- Diagnostic - (BI110) - Parent - History - Change Data Capture ENABLED, Net changes enabled/disabled
                                 + IIF(obj.is_tracked_by_cdc = 1
                                      , CHAR(096) + N'(BI110) [CHANGE DATA CAPTURE ENABLED]'
                                      + N' Net Changes '
                                      + IIF(obj.cdc_supports_net_changes = 1,N'[ENABLED]',N'[DISABLED]')
                                      + IIF(i.tbl_is_empty = 1,N' [EMPTY]',N'')
                                      ,N'')

-- Diagnostic - (BI110) - Parent - History - Change Data Capture History Table
-- Diagnostic - (BI110) - Parent - History - Change Data Capture History Table, Net changes enabled/disabled
                                 + IIF(obj.cdc_is_history_table = 1
                                      , CHAR(096) + N'(BI110) [CHANGE DATA CAPTURE HISTORY TABLE]'
                                      + IIF(obj.cdc_supports_net_changes = 1,N'[ENABLED]',N'[DISABLED]')
                                      + IIF(i.tbl_is_empty = 1,N' [EMPTY]',N'')
                                      ,N'')

-----------------------------------------------------------------------------------------------------------------------
-- History - SVN
-----------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI110) - Parent - is System Versioned Temporal Table
-- Diagnostic - (BI110) - Parent - is System Versioned Temporal History Table
                                 + IIF(obj.temporal_type > 0  -- HISTORY & SYSTEM_VERSIONED_TEMPORAL_TABLE
                                      , CHAR(096)
                                      + N'(BI110) [SYSTEM_VERSIONED] '
                                      + QUOTENAME(REPLACE(obj.temporal_type_desc,N'SYSTEM_VERSIONED_',N''))
                                      + IIF(i.tbl_is_empty = 1,N' [EMPTY]',N'')
-- Diagnostic - Parent - History - System Versioned Temporal Table, retention
                                      + IIF(obj.temporal_type = 2
                                           , N' Retention '
                                           + IIF(obj.history_retention_period_unit_desc = N'INFINITE'
                                                ,N'INFINITE'
                                                , CAST(obj.history_retention_period AS NVARCHAR(20))
                                                + obj.history_retention_period_unit_desc)

-- Diagnostic - Parent - History - System Versioned Temporal Table, related history table, column names
-- <FUTURE> add source SVN table to HISTORY TABLE Diagnostic
                                           + IIF(rec_type <> N'I'
                                                , CHAR(096)
                                                + N'> Versions: '
                                                + COALESCE(QUOTENAME(hst_obj.schema_name) + N'.' + QUOTENAME(hst_obj.name)
                                                          ,N'<Missing History table>'
                                                          )
                                                + CHAR(096)
                                                + N'> Start Column ' + QUOTENAME(scol.name)
                                                + N' End Column '    + QUOTENAME(ecol.name)
                                                + N' Period Name '   + QUOTENAME(obj.period_name)
                                                ,N'')
                                           ,N'')
                                      ,N'')

-----------------------------------------------------------------------------------------------------------------------
-- History - Ledger
-----------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI110) - Parent - History - is Ledger History Table
-- Diagnostic - (BI110) - Parent - History - is Updatable Ledger Table
-- Diagnostic - (BI110) - Parent - History - Append Only Ledger Table
                                 + IIF(obj.ledger_type > 0
                                      , CHAR(096)
                                      + N' (BI110) '
                                      + QUOTENAME( IIF(obj.is_dropped_ledger_table = 1,N'DROPPED ',N'')
                                                 + IIF(obj.ledger_type = 1,N'LEDGER_',N'')
                                                 + obj.ledger_type_desc
                                                 )
                                      + IIF(i.tbl_is_empty = 1,N' [EMPTY]',N'')
                                      + CHAR(096)
                                      + N'> Ledger View '
                                      + IIF(lv.is_dropped_ledger_view = 1,N'*DROPPED* ',N'')
-- Diagnostic - (BI110) - Parent - History - Updatable Ledger View name, SQL2022+ & Azure SQL Database
                                      + COALESCE(QUOTENAME(lv.name),N'')
                                        + IIF(obj.ledger_type = 1
                                             , CHAR(096) + N'> Versioned: '
                                             + COALESCE(QUOTENAME(hst_obj.schema_name) + N'.'+ QUOTENAME(hst_obj.name)
                                                       ,N'*Missing History table*'
                                                       )
                                             ,N'')
                                      ,N'')

-----------------------------------------------------------------------------------------------------------------------
-- History - Change tracking enabled
-----------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Parent - Change Tracking Enabled
                                 + IIF(obj.ctt_is_track_columns_updated_on = 1,CHAR(096) + N'[CHANGE TRACKING ENABLED]',N'')

-----------------------------------------------------------------------------------------------------------------------
-- Parent Storage
-----------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI61) - Table - is Clustered Columnstore
                                 +IIF(i.type = N'U'                                -- user table aggregate record
                                     ,IIF(obj.clustered_columnstore_CNT > 0
                                         ,CHAR(096) + N'(BI61) [COLUMNSTORE TABLE]'
                                         ,N'')
                                     ,N'')

-----------------------------------------------------------------------------------------------------------------------
-- Index types, subtypes, unique attributes
-----------------------------------------------------------------------------------------------------------------------
                                 + CASE WHEN i.rec_type = N'I'
                                        THEN CHAR(096)
                                            + CASE i.type
-- Diagnostic - Index - is Clustered Rowstore
-- Diagnostic - Index - is NonClustered Rowstore
-- Diagnostic - (BI60) - Index - Blitz Index Check IDs for index types - XML index
-- Diagnostic - (BI62) - Index - Blitz Index Check IDs for index types - Spatial index
-- Diagnostic - (BI61) - Index - Blitz Index Check IDs for index types - clustered columnstore
-- Diagnostic - (BI61) - Index - Blitz Index Check IDs for index types - nonclustered columnstore index
-- Diagnostic - (BI61) - Index - Blitz Index Check IDs for index types - Nonclustered HASH on in-memory table
-- Diagnostic - (BI60) - Index - Blitz Index Check IDs for index types - JSON index
-- Diagnostic - Index - is Full-Text
-- Diagnostic - Index - is Missing Index
-- Diagnostic - Index - is Foreign Key Constraint
                                                   WHEN N'3' THEN N'(BI60) ' -- XML index
                                                   WHEN N'4' THEN N'(BI62) ' -- Spatial index
                                                   WHEN N'5' THEN N'(BI61) ' -- clustered columnstore
                                                   WHEN N'6' THEN N'(BI61) ' -- nonclustered columnstore index
                                                   WHEN N'7' THEN N'(BI61) ' -- Hash index on In-Memory Clustered Columnstore
                                                   WHEN N'9' THEN N'(BI60) ' -- JSON index <FUTURE> JSON
                                                   ELSE N''
                                              END
-- Diagnostic - Index - type and base table storage
                                            + QUOTENAME(i.type_desc + CASE i.type WHEN N'1' THEN N' ROWSTORE' -- clustered index
                                                                                  WHEN N'2' THEN N' ROWSTORE' -- nonclustered index
                                                                                  WHEN N'3' THEN N' INDEX'    -- XML
                                                                                  WHEN N'4' THEN N' INDEX'    -- spatial
                                                                                  WHEN N'9' THEN N' INDEX'    -- JSON
                                                                                  WHEN N'M' THEN N' INDEX'    -- missing
                                                                                  ELSE N''
                                                                      END)
-- Diagnostic - Index - Sub Type description
                                            + COALESCE(N' ' + QUOTENAME(i.sub_type_desc),N'')
-- Diagnostic - Index - XML index - index secondary type description
                                            + COALESCE(N' ' + QUOTENAME(i.xml_secondary_type_desc),N'')
-- Diagnostic - Index - Spatial index - tesselation type description
                                            + COALESCE(N' ' + QUOTENAME(i.si_tessellation_scheme),N'')
-- Diagnostic - Index - Filtered
                                            + IIF(i.has_filter = 1,N'[FILTERED] ',N'')
-- Diagnostic - Index - Rowstore - is Primary Key
-- Diagnostic - Index - Rowstore - is Unique Constraint
-- Diagnostic - Index - Rowstore - is Unique
                                            + CASE WHEN i.is_primary_key       = 1 THEN N' [PRIMARY KEY]'
                                                   WHEN i.is_unique_constraint = 1 THEN N' [UNIQUE CONSTRAINT]'
                                                   WHEN i.is_unique            = 1 THEN N' [UNIQUE]'
                                                   ELSE N''
                                              END
                                        ELSE N''
                                   END
                                 -----------------------------------------------------------------------------------------------------------
                                 ,1,1,N'') -- end of STUFF
/*** LOCAL TESTING ***
SELECT COUNT_BIG(1)
--*/
         FROM (-- All aggregate and composite records except instance & database levels
               SELECT *
                 FROM [##SQLXL_Index_compilation]
                WHERE rec_type NOT IN (N'A' -- instance level aggregate record
                                      ,N'D' -- database level aggregate record
                                      )
              ) AS i
         JOIN [##SQLXL_Index_sys_objects] AS obj
           ON i.database_id = obj.database_id
          AND i.object_id   = obj.object_id
         LEFT OUTER
         JOIN [##SQLXL_Index_sys_objects] AS hst_obj
           ON obj.database_id = hst_obj.database_id
          AND obj.object_id   = hst_obj.parent_object_id
          AND obj.object_id  <> hst_obj.object_id
          AND obj.type        = hst_obj.type
         LEFT OUTER
         JOIN [##SQLXL_Index_sys_objects] AS lv   -- ledger view objects
           ON obj.database_id    = lv.database_id
          AND obj.ledger_view_id = lv.object_id
         LEFT OUTER
         JOIN [##SQLXL_Index_sys_columns] AS scol -- ledger view objects
           ON obj.database_id            = scol.database_id
          AND obj.object_id              = scol.object_id
          AND obj.period_start_column_id = scol.column_id
         LEFT OUTER
         JOIN [##SQLXL_Index_sys_columns] AS ecol -- ledger view objects
           ON obj.database_id          = ecol.database_id
          AND obj.object_id            = ecol.object_id
          AND obj.period_end_column_id = ecol.column_id
       ) AS i
 WHERE i.diagnostic > N''
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Add principal parent and index types'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Parent - table & index column constraint has non-standard property or references a procedure, function, or CLR - (BI94)
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = con_obj.rec_type           -- parent level aggregate record
      ,database_id  = con_obj.database_id
      ,object_id    = con_obj.parent_object_id   -- for System, History, Constraints
      ,index_id     = con_obj.parent_object_id   -- for System, History, Constraints
      ,type         = N'U'                       -- User Table aggregate record
      ,sub_type     = 0

-- Diagnostic - Table/Column has check constraint(s) - see details
      ,prescription = NULL
      ,diagnostic   = IIF(con_obj.parent_column_id = 0,N'TABLE ',N'COLUMN ')
                    + con_obj.type_desc + N' ' + QUOTENAME(con_obj.name)
                    + COALESCE(CHAR(096) + N'> on column ' + QUOTENAME(c.name),N'')
                    + COALESCE(  CHAR(096) + N'>'
                               + STUFF(-- trim off unneeded leading characters
-- Diagnostic - Index Column Constraint - is DISABLED
                                       + IIF(con_obj.is_disabled         = 1,N', Disabled',N'')
-- Diagnostic - Index Column Constraint - is NOT TRUSTED
                                       + IIF(con_obj.is_not_trusted      = 1,N', Not Trusted',N'')
-- Diagnostic - Index Column Constraint - table is Replicated, column has REPLICATION enabled
                                       + IIF(    tbl_obj.is_replicated          = 1
                                             AND con_obj.is_not_for_replication = 0
                                            ,N'> Replicated - consider "NOT FOR REPLICATION"'
                                            ,N'')
-- Diagnostic - Index Column Constraint - is PUBLISHED
                                       + IIF(con_obj.is_published        = 1,N', Published',N'')
-- Diagnostic - Index Column Constraint - is SCHEMA PUBLISHED
                                       + IIF(con_obj.is_schema_published = 1,N', Schema Published',N'')
                                      ,1,1,N'') -- end of STUFF function
                              ,N'')
-- Diagnostic - Index Column constraint - uses non-database collation
                    + IIF(con_obj.uses_database_collation = 0,CHAR(096) + N'> uses non-Database Collation',N'')

-- Diagnostic - (BI94) - Index Column constraint - references a procedure - can force serialization
                    + IIF(con_obj.uses_sql_proc           = 1,CHAR(096) + N'>(BI94) references procedure - can force serialization' ,N'')

-- Diagnostic - (BI94) - Index Column constraint - references a function - can force serialization
                    + IIF(con_obj.uses_sql_ftn            = 1,CHAR(096) + N'>(BI94) references function - can force serialization'  ,N'')

-- Diagnostic - (BI94) - Index Column constraint - references a SQL method - can force serialization
                    + IIF(con_obj.uses_sql_mthd           = 1,CHAR(096) + N'>(BI94) references SQL method - can force serialization',N'')

/*** LOCAL TESTING ***
SELECT *
--*/
  FROM (--
        SELECT rec_type = N'P'                              -- parent level aggregate record
              ,*
          FROM [##SQLXL_Index_sys_objects]
         WHERE parent_column_id >= 0                        -- parent/table level constraints
       ) AS con_obj

  JOIN [##SQLXL_Index_sys_objects] AS tbl_obj               -- parent table record
    ON con_obj.database_id      = tbl_obj.database_id
   AND con_obj.parent_object_id = tbl_obj.object_id         -- for System, History, Constraints

  LEFT OUTER
  JOIN (-- indexed columns - used to identify columns used in indexes
        SELECT database_id,object_id --,index_id,type,sub_type
              ,column_id
          FROM [##SQLXL_Index_sys_index_columns]
         GROUP BY
               database_id,object_id --,index_id,type,sub_type
              ,column_id
       ) AS idx_col
    ON con_obj.database_id      = idx_col.database_id
   AND con_obj.parent_object_id = idx_col.object_id         -- for System, History, Constraints
   AND con_obj.parent_column_id = idx_col.column_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_columns] AS c                     -- column details
    ON con_obj.database_id      = c.database_id
   AND con_obj.parent_object_id = c.object_id               -- for System, History, Constraints
   AND con_obj.parent_column_id = c.column_id               -- tie constraint to column if found

 WHERE (   con_obj.parent_column_id = 0                     -- zero for TABLE level, non-zero for COLUMN constraint
        OR idx_col.column_id       IS NOT NULL
       )
   AND (   con_obj.is_disabled             = 1
        OR con_obj.is_not_trusted          = 1
        OR (tbl_obj.is_replicated = 1 AND con_obj.is_not_for_replication = 0)
        OR con_obj.is_published            = 1
        OR con_obj.is_schema_published     = 1
        OR con_obj.uses_database_collation = 0
        OR con_obj.uses_sql_proc           = 1
        OR con_obj.uses_sql_ftn            = 1
        OR con_obj.uses_sql_mthd           = 1
       )
 ORDER BY
       con_obj.type                             -- check constraints first
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Parent Diagnostics - Constraint attributes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Object Level - Many Indexes on a Single Table - BI20
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT * -- eliminates NULL diagnostics below
  FROM (--
SELECT rec_type     = N'P'                                  -- parent level aggregate record
      ,obj.database_id,obj.object_id
      ,index_id     = obj.object_id
      ,obj.type
      ,sub_type     = 0
      ,prescription = N''
      ,diagnostic   = STUFF(
-- Diagnostic - (BI20) - Table - Many Indexes on a Single object
+ IIF(( obj.nonclustered_index_CNT
      + obj.xml_index_CNT
      + obj.spatial_index_CNT
      + obj.nonclustered_columnstore_CNT
      + obj.nonclustered_hash_CNT
      + obj.fulltext_index_CNT
      + obj.json_index_CNT
      ) > 5
     , CHAR(096)
     + N'(BI20) Many indexes (' + [dbo].SQLXL_3SD((  obj.nonclustered_index_CNT
                                                   + obj.xml_index_CNT
                                                   + obj.spatial_index_CNT
                                                   + obj.nonclustered_columnstore_CNT
                                                   + obj.nonclustered_hash_CNT
                                                   + obj.json_index_CNT
                                                   + obj.fulltext_index_CNT
                                                  ),N'I') + N')'
     + N' on ' + obj.type_desc + N' - '
-- Diagnostic - Table - Count by type of index on table
     + LTRIM(  IIF(obj.nonclustered_index_CNT       > 0,N' NCX ' + [dbo].SQLXL_3SD(obj.nonclustered_index_CNT      ,N'I'),N'')
             + IIF(obj.xml_index_CNT                > 0,N' XML ' + [dbo].SQLXL_3SD(obj.xml_index_CNT               ,N'I'),N'')
             + IIF(obj.spatial_index_CNT            > 0,N' SPT ' + [dbo].SQLXL_3SD(obj.spatial_index_CNT           ,N'I'),N'')
             + IIF(obj.nonclustered_columnstore_CNT > 0,N' NCS ' + [dbo].SQLXL_3SD(obj.nonclustered_columnstore_CNT,N'I'),N'')
             + IIF(obj.nonclustered_hash_CNT        > 0,N' CCH ' + [dbo].SQLXL_3SD(obj.nonclustered_hash_CNT       ,N'I'),N'')
             + IIF(obj.json_index_CNT               > 0,N' JSN ' + [dbo].SQLXL_3SD(obj.json_index_CNT              ,N'I'),N'')
             + IIF(obj.fulltext_index_CNT           > 0,N' FTX ' + [dbo].SQLXL_3SD(obj.fulltext_index_CNT          ,N'I'),N'')
            )
     + N' (not counting HP,CX,CCS)'

-- Diagnostic - Table - Count of under-used NCX indexes (<2% table reads)
     + IIF(idx.ncx_lo_use_CNT > 3
          , CHAR(096) + N'> ' + CAST(idx.ncx_lo_use_CNT AS NVARCHAR(20)) + N' NCX indexes have lo reads (<2% table total) - '
-- Diagnostic - Table - consider replacing NCX with existing nonclustered columnstore
-- Diagnostic - Table - consider replacing NCX with new nonclustered columnstore
          + IIF(ncs_chk.ncs_ok = 1
               ,IIF(obj.nonclustered_columnstore_CNT = 0,N'Consider creating NCS?',N'Consider existing NCS?')
               ,N'')
          , N'')
     ,IIF(idx.ncx_lo_use_CNT > 0 AND idx.ncx_CNT > 3
          , CHAR(094) + CAST(idx.ncx_lo_use_CNT AS NVARCHAR(20)) + N' of ' + CAST(idx.ncx_CNT AS NVARCHAR(20))
          + N' NCX indexes have lo reads (<2% table total) - '
          + IIF(ncs_chk.ncs_ok = 1
               ,IIF(obj.nonclustered_columnstore_CNT = 0,N'Consider creating NCS?',N'Consider existing NCS?')
               ,N'')
          , N'')
     )
      ,1,1,N'') -- end of STUFF
/*** LOCAL TESTING ***
SELECT ncs_chk.ncs_ok
      ,obj.database_id,obj.object_id
      ,idx.ncx_CNT,idx.ncx_lo_use_CNT
--*/
  FROM (--
        SELECT *
          FROM [dbo].[##SQLXL_Index_sys_objects]
         WHERE type IN (N'U' -- user table object types
                       ,N'V' -- views
                       )
       ) AS obj

  LEFT OUTER
  JOIN (-- check if appropriate version end edition supports updatable nonclustered columnstore
        SELECT ncs_ok = COALESCE((--
                                  SELECT 1
                                    FROM [##SQLXL_Instance_info]
                                   WHERE source    = N'SERVERPROPERTY'
                                     AND name      = N'Edition'
                                     AND (   text_value_in_use LIKE N'ENTERPRISE%'
                                          OR text_value_in_use LIKE N'DEVELOPER%'
                                         )
                                     AND CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 13 -- SQL 2016+
                                 ),0)
       ) AS ncs_chk
    ON 1 = 1  -- required to enable OUTER JOIN since no value may be returned from subquery

  LEFT OUTER
  JOIN (-- get the "physical" respresentation of the underlying data
        SELECT database_id,object_id,reserved_page_PG_CNT
          FROM [##SQLXL_Index_compilation]
         WHERE type  -- physical table structure
            IN (N'0' -- rowstore heap
               ,N'1' -- clustered rowstore index
               ,N'5' -- clustered columnstore
               )
       ) AS raw
    ON obj.database_id = raw.database_id
   AND obj.object_id   = raw.object_id

  LEFT OUTER
  JOIN (-- get count of nonclustered rowstore indexes with less than 2% of table reads
        SELECT i.database_id,i.object_id
              ,reserved_page_PG_CNT = SUM(IIF(i.type NOT IN (N'0' -- rowstore heap
                                                            ,N'1' -- clustered rowstore index
                                                            ,N'5' -- clustered columnstore
                                                            )
                                             ,p.reserved_page_PG_CNT
                                             ,0))
              ,ncx_CNT        = SUM(IIF(i.type  = N'2',1,0))      -- nonclustered rowstore index
              ,ncx_lo_use_CNT = SUM(IIF(i.type  = N'2'            -- nonclustered rowstore index
                                       ,IIF(p.ops_total_read_CNT > 0
                                           ,IIF((100.0 * COALESCE(i.ops_total_read_CNT,0) / p.ops_total_read_CNT) < 2.0
                                               ,1
                                               ,0)
                                           ,1)
                                       ,0))
          FROM [##SQLXL_Index_compilation] AS i
          JOIN [##SQLXL_Index_compilation] AS p
            ON i.database_id = p.database_id
           AND i.object_id   = p.object_id
           AND N'U'          = p.type        -- user table aggregate record
         WHERE i.type  = N'2'                -- nonclustered rowstore index
         GROUP BY
               i.database_id
              ,i.object_id
       ) AS idx
    ON obj.database_id = idx.database_id
   AND obj.object_id   = idx.object_id

       ) AS o
 WHERE diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Many IDX on object - BI20, FKC Cascading - BI71'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Object Level - Identity Column Near End of Range (BI68) or Using a Negative Seed or Increment Other Than 1 (BI74)
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
-- <FUTURE> consider adding these diagnostics to INDEX level also
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Identity and Sequence value usage
-- Diagnostic - (BI68) - Table - Abnormal Design Pattern - Identity Column Near End of Range (50%)
-- Diagnostic - (BI74) - Table - Identity Columns - not using 1 as increment
-- Diagnostic - (BI74) - Table - Identity Columns - with negative or zero seed
-- Diagnostic - (BI74) - Table - Sequence Columns - not using 1 as increment
-- Diagnostic - (BI74) - Table - Sequence Columns - with negative or zero start value
-- Diagnostic - Table - column with NEWID or NEWSEQUENTIALID
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH cte AS (-- min & max values by integer data type
SELECT data_type = N'tinyint'
      ,min_value = CAST(0 AS BIGINT)
      ,max_value = CAST(255 AS BIGINT)
      ,max_fmt   = [dbo].[SQLXL_3SD](255,N'I')

UNION ALL
SELECT data_type = N'smallint'
      ,min_value = -32768
      ,max_value =  32767
      ,max_fmt   = [dbo].[SQLXL_3SD](32767,N'I')

UNION ALL
SELECT data_type = N'int'
      ,min_value = -2147483648
      ,max_value =  2147483647
      ,max_fmt   = [dbo].[SQLXL_3SD](2147483647,N'I')

UNION ALL
SELECT data_type = N'bigint'
      ,min_value = -9223372036854775808
      ,max_value =  9223372036854775807
      ,max_fmt   = N'9.22E'                                 -- Can't use [dbo].[SQLXL_3SD] because generates OVERFLOW message
)
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'P'                                  -- parent level aggregate record
      ,database_id  = sc.database_id
      ,object_id    = sc.object_id
      ,index_id     = sc.object_id
      ,type         = obj.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   =
  IIF(100.0 * COALESCE(CAST(sc.Last_Value AS BIGINT),CAST(sc.seq_current_value AS BIGINT),0) / cte.max_value > 50.0
     ,N'(BI68) '
     ,N'')
+ CASE WHEN sc.is_identity        = 1 THEN N'Identity'
       WHEN sc.is_sequence        = 1 THEN N'Sequence'
       WHEN sc.is_newsequentialid = 1 THEN N'Sequence GUID'
       WHEN sc.is_newid           = 1 THEN N'NewID'
  END
+ N' column ' + QUOTENAME(sc.name)

+ IIF(100.0 * COALESCE(CAST(sc.Last_Value AS BIGINT),CAST(sc.seq_current_value AS BIGINT),0) / cte.max_value > 50.0
     ,N' Near End of Range - '
     ,N'')

+ IIF(sc.increment_value IS NOT NULL OR sc.seq_increment IS NOT NULL
     , IIF(   LEN(sc.name) > 60
           OR (100.0 * COALESCE(CAST(sc.Last_Value AS BIGINT),CAST(sc.seq_current_value AS BIGINT),0) / cte.max_value) > 50.0
          ,CHAR(096) + N'> '
         ,N' ')
     + N'at ' + [dbo].[SQLXL_3SD](100.0 * CAST(COALESCE(sc.Last_Value,sc.seq_current_value,0) AS BIGINT) / cte.max_value,N'N')
     + N'% used: ' + [dbo].[SQLXL_3SD](COALESCE(CAST(sc.Last_Value AS BIGINT),CAST(sc.seq_current_value AS BIGINT),0),N'I')
                   + N'/' + cte.max_fmt + N' (' + cte.data_type + N')'
     + IIF(   sc.increment_value <> 1
           OR sc.seed_value      <  1
           OR sc.seq_increment   <> 1
           OR sc.seq_start_value <  1
          , COALESCE( CHAR(096)
                    + N'> (BI74)'
                    + IIF(sc.increment_value <> 1,N' Increment ' + CAST(sc.increment_value AS NVARCHAR(20)),N'')
                    + IIF(sc.seed_value      <  1,N' Seed '      + CAST(sc.seed_value      AS NVARCHAR(20)),N'')
                    + IIF(sc.seq_increment   <> 1,N' Increment ' + CAST(sc.seq_increment   AS NVARCHAR(20)),N'')
                    + IIF(sc.seq_start_value <  1,N' Seed '      + CAST(sc.seq_start_value AS NVARCHAR(20)),N'')
                    ,N'') -- COALESCE used for views on
          ,N'')
     ,N'')
  FROM [##SQLXL_Index_sys_columns] AS sc
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON sc.database_id = obj.database_id
   AND sc.object_id   = obj.object_id
  JOIN cte
    ON sc.system_type_name = cte.data_type
 WHERE sc.is_identity        = 1
    OR sc.is_sequence        = 1
    OR sc.is_newsequentialid = 1
    OR sc.is_newid           = 1
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Identities/Sequences/GUIDs'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Object level - aggregate table columns by properties
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
SELECT rec_type     = N'P'  -- parent level aggregate record
      ,database_id  = c.database_id
      ,object_id    = c.object_id
      ,index_id     = c.object_id
      ,type         = N'U'  -- User Table
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = STUFF(
                    ----------------------------------------------------------------
-- Diagnostic - (BI25) - Over-Indexing - High Ratio of table columns are NULLABLE
                             IIF( c.column_NULL_PCT > 20.0 -- more than 20% of table columns are NULLable
                                , CHAR(096)
                                + N'(BI25) High ratio of NULL columns - ' + CAST(c.column_NULL_CNT AS NVARCHAR(20))
                                + N' of ' + CAST(c.column_CNT     AS NVARCHAR(20))
                                + N' (' + [dbo].[SQLXL_3SD](c.column_NULL_PCT,N'N') + N'%) are NULLable'
                                ,N'')
                           + IIF(   column_CNT          >= 35    -- (BI26)
                                 OR c.column_NON_length >  2000  -- (BI26)
                                 OR column_LOB_CNT      >  0     -- (BI26)
-- Diagnostic - (BI26) - Over-Indexing - Wide Tables: 35+ cols
-- Diagnostic - (BI26) - Over-Indexing - Wide Tables: > 2000 non-LOB bytes
-- Diagnostic - (BI26) - Over-Indexing - Wide Tables: LOB columns
                                , CHAR(096)
                                + N'(BI26) Wide table -'
                                + STUFF( IIF(c.column_LOB_CNT > 0 -- one or more columns are LOB datatypes
                                            ,N', ' + CAST(c.column_LOB_CNT AS NVARCHAR(20)) + N' LOB columns (' + lob.max_col + N')'
                                            ,N'')
                                       + IIF(c.column_NON_length > 2000 OR c.column_CNT > 35 -- tbale has more than 35 columns
                                            , N', ' + CAST(c.column_NON_length  AS NVARCHAR(20)) + N' bytes in '
                                            + CAST(c.column_NON_LOB_CNT AS NVARCHAR(20)) + N' non-LOB columns'
                                            ,N'')
                                       ,1,1,N'')
                                ,N'')
-- Diagnostic - (BI27) - Over-Indexing - High Ratio of table columns are strings
                           + IIF(c.column_CHR_PCT >= 80.0 -- more than 80% of tbale columns are strings
                                , CHAR(096)
                                + N'(BI27) High Ratio of string columns - ' + CAST(c.column_CHR_CNT AS NVARCHAR(20))
                                + N' of ' + CAST(c.column_CNT     AS NVARCHAR(20))
                                + N' (' + [dbo].[SQLXL_3SD](c.column_CHR_PCT,N'N') + N'%) are strings'
                                ,N'')
                    ----------------------------------------------------------------
                           ,1,1,N'')
/*
SELECT *
--*/
  FROM (--
        SELECT c.database_id
              ,c.object_id
              ,column_CNT         = COUNT_BIG(1)
              ,column_NON_LOB_CNT = SUM(IIF(c.max_length > -1,1,0))
              ,column_LOB_CNT     = SUM(IIF(c.max_length = -1,1,0))
              ,column_NULL_CNT    = SUM(IIF(c.is_nullable = 1,1,0))
              ,column_NULL_PCT    = 100.0 * SUM(IIF(c.is_nullable = 1,1,0)) / COUNT_BIG(1)
              ,column_CHR_CNT     = SUM(IIF(c.system_type_name LIKE N'%char%',1,0))
              ,column_CHR_PCT     = 100.0 * SUM(IIF(c.system_type_name LIKE N'%char%',1,0)) / COUNT_BIG(1)
              ,column_NON_length  = SUM(IIF(c.max_length = -1,0,c.max_length))
          FROM [##SQLXL_Index_sys_objects] AS t
          JOIN [##SQLXL_Index_sys_columns] AS c
            ON t.database_id  = c.database_id
           AND t.object_id    = c.object_id
         WHERE t.type = N'U' -- User Table
         GROUP BY
               c.database_id
              ,c.object_id
       ) AS c
 OUTER
 APPLY (--
        SELECT -- double SELECT required for XML TYPE VALUE below
        STUFF((SELECT max_col = N', ' + col.data_type_abbr_len + N' ' + CAST(COUNT_BIG(1) AS NVARCHAR(20))
                 FROM [##SQLXL_Index_sys_columns] AS col
                WHERE c.column_LOB_CNT > 0
                  AND c.database_id    = col.database_id
                  AND c.object_id      = col.object_id
                  AND col.max_length   = -1
                GROUP BY
                      col.data_type_abbr_len
                  FOR XML PATH(N''), TYPE                                                    -- count of MAX LEN columns
              ).value('.',N'NVARCHAR(MAX)')
             ,1,2,N'')
       ) AS lob(max_col)
) AS c
 WHERE c.diagnostic > N''
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Many columns and/or wide'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Table - Performance related
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
SELECT rec_type     = p.rec_type
      ,database_id  = p.database_id
      ,object_id    = p.object_id
      ,index_id     = p.index_id
      ,type         = p.type
      ,sub_type     = p.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(
-- Diagnostic - Table - text stored in row - limit (up to 200 bytes)
 IIF(   obj.text_in_row_limit > 0
     OR lob.lob_pct IS NOT NULL
    ,CHAR(096) + N'LOB stored in row - size limit '
                + IIF(obj.text_in_row_limit = 0
                     ,N'NONE SET'
                     ,CAST(obj.text_in_row_limit AS NVARCHAR(20)) + N' bytes')
                + IIF(lob.lob_pct IS NOT NULL
                     ,N' - LOB activity ' + lob.lob_pct
                     ,N' - No LOB activity')
    ,N'')

-- Diagnostic - Table - Large types out of row - adds 16 byte pointer
+IIF(obj.large_value_types_out_of_row > 0,CHAR(096) + N'Large types out of row - adds 16 byte pointer',N'')

-- Diagnostic - Table - Lock Escalation DISABLED
+IIF(obj.lock_escalation = 1
    ,CHAR(096) + N'Lock Escalation ' + QUOTENAME(obj.lock_escalation_desc) + N' Consider Enabling Table or Auto (for partitions)'
    ,N'')

-- Diagnostic - (BI64) - Table - is Partitioned & partitioning column name
+IIF(   raw.partition_CNT         > 1
     OR raw.partition_column_name > N''
    , CHAR(096)
    + N'(BI64) Table partitioned on '
    + QUOTENAME(raw.partition_column_name)
    + N' - '
    + CAST(raw.partition_CNT AS NVARCHAR(20))
    + N' partitions'
    ,N'')

-- Diagnostic - Table - Lock Escalation TABLE with Partitions
+IIF(    obj.lock_escalation = 0
     AND p.partition_column_id > 0
    ,CHAR(096) + N'Lock Escalation ' + QUOTENAME(obj.lock_escalation_desc) + N' Use AUTO for Partitioned tables'
    ,N'')

-- Diagnostic - Table - indexes are larger than the physical table (index types 0,1,5)
+IIF(    raw.reserved_page_PG_CNT > 0
     AND (1.0 * (p.reserved_page_PG_CNT - raw.reserved_page_PG_CNT) / raw.reserved_page_PG_CNT) > 1.0
    , CHAR(096)
    + N'Indexes are ' + [dbo].[SQLXL_3SD](1.0 * (p.reserved_page_PG_CNT - raw.reserved_page_PG_CNT) / raw.reserved_page_PG_CNT,N'N')
    + N'X physical table size'
    ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
,1,1,N'') -- end of STUFF function
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'P') AS p                       -- parent level aggregate record

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON p.database_id = obj.database_id
   AND p.object_id   = obj.object_id

  LEFT OUTER
  JOIN (-- get the "physical" respresentation of the underlying data
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE type  -- physical table structure
            IN (N'0' -- rowstore heap
               ,N'1' -- clustered rowstore index
               ,N'5' -- clustered columnstore
               )
       ) AS raw
    ON p.database_id = raw.database_id
   AND p.object_id   = raw.object_id

  LEFT OUTER
  JOIN (-- get LOB activity as percent of total
        SELECT database_id,object_id
              ,lob_pct = [dbo].[SQLXL_3SD](1.0 * ( ios_lob_fetch_pages_CNT
                                                 + ios_lob_orphan_create_CNT
                                                 + ios_lob_orphan_insert_CNT
                                                 ) / ops_total_contacts_CNT
                                          ,N'%')
                       + N' ('
                       + [dbo].[SQLXL_3SD]( ios_lob_fetch_pages_CNT
                                          + ios_lob_orphan_create_CNT
                                          + ios_lob_orphan_insert_CNT
                                          ,N'I')
                       + N'/'
                       + [dbo].[SQLXL_3SD](ops_total_contacts_CNT,N'I')
                       + N')'
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type = N'P'                              -- parent level aggregate record
           AND ops_total_contacts_CNT > 0
           AND ( ios_lob_fetch_pages_CNT
               + ios_lob_orphan_create_CNT
               + ios_lob_orphan_insert_CNT
               ) > 0
       ) AS lob
    ON p.database_id = lob.database_id
   AND p.object_id   = lob.object_id
) AS p
 WHERE p.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Performance related'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Parent - (BI70) Replicated columns
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'P'  -- parent level aggregate record
      ,database_id  = c.database_id
      ,object_id    = c.object_id
      ,index_id     = c.object_id
      ,type         = N'U'  -- User Table
      ,sub_type     = 0
-- Diagnostic - (BI70) - Table - has replicated columns & count (not change data capture)
      ,prescription = NULL
      ,diagnostic   = N'(BI70) Replicated columns: '
                    + IIF(c.replicated_columns <> c.all_columns
                         ,CAST(c.replicated_columns AS NVARCHAR(20)) + N' of ' + CAST(c.all_columns AS NVARCHAR(20))
                         ,N'All'
                         )
/*** LOCAL TESTING ***
SELECT c.*
--*/
  FROM (--
        SELECT database_id,object_id
              ,replicated_columns = SUM(IIF(is_replicated = 1,1,0))
              ,all_columns        = SUM(1)
          FROM [##SQLXL_Index_sys_columns]
         GROUP BY
               database_id,object_id
        HAVING SUM(IIF(is_replicated = 1,1,0)) > 0
       ) AS c
  JOIN [##SQLXL_Index_sys_objects] AS t
    ON c.database_id = t.database_id
   AND c.object_id   = t.object_id
   AND 0             = t.is_tracked_by_cdc
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Replicated columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Parent - (BI69) String column with non-database collation
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'P'  -- parent level aggregate record
      ,database_id  = col.database_id
      ,object_id    = col.object_id
      ,index_id     = col.object_id
      ,type         = N'U'  -- User Table
      ,sub_type     = 0
-- Diagnostic - (BI69) - Table - has column(s) with Collation not matching database collation
      ,prescription = NULL
      ,diagnostic   = N'(BI69) Column ' + QUOTENAME(col.name)
                    + N' collation '    + QUOTENAME(col.collation_name)
                    + N' <> DB '        + QUOTENAME(db.collation_name)
  FROM [##SQLXL_Index_sys_columns]   AS col
  JOIN [##SQLXL_Index_sys_databases] AS db
    ON col.database_id     = db.database_id
 WHERE col.collation_name IS NOT NULL
   AND col.collation_name <> db.collation_name
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - String column with non-database collation'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Parent - Computed columns - can force serialization
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'P'  -- parent level aggregate record
      ,database_id  = c.database_id
      ,object_id    = c.object_id
      ,index_id     = c.object_id
      ,type         = N'U'  -- User Table
      ,sub_type     = 0
-- Diagnostic - Table - Has Computed Column
-- Diagnostic - (BI100) - Table - Computed Column is non-persisted
      ,prescription = NULL
      ,diagnostic   = IIF(c.is_persisted = 0,N'(BI100) Non-persisted ',N'') + N'Computed Column '
                    + CHAR(096) + N'> ' + QUOTENAME(c.name)

-- Diagnostic - (BI99) - Table - Computed Column - uses a SQL procedure - can force serialization
                   + IIF(c.uses_sql_proc = 1,CHAR(096) + N'> (BI99) references a procedure - can force serialization' ,N'')

-- Diagnostic - (BI99) - Table - Computed Column - uses a SQL function - can force serialization
                   + IIF(c.uses_sql_ftn  = 1,CHAR(096) + N'> (BI99) references a function - can force serialization'  ,N'')

-- Diagnostic - (BI99) - Table - Computed Column - uses a SQL method - can force serialization
                   + IIF(c.uses_sql_mthd = 1,CHAR(096) + N'> (BI99) references a SQL method - can force serialization',N'')

-- Diagnostic - Table - has non-persisted Computed Columns as index key column
-- Diagnostic - Table - has non-persisted Computed Columns as index included column
                   + COALESCE( CHAR(096)
                             + N'> In Index(s):'
                             + STUFF((-- List of indexes with included column in key or includes
                                      SELECT  N', ' + IIF(ic.type = N'T' -- full-text index of a tabular object
                                                         ,N'FTX'
                                                         ,CAST(index_id AS NVARCHAR(20)))
                                            + N' (' + IIF(ic.is_included_column = 0,N'Key',N'Inc') + N')'
                                        FROM [##SQLXL_Index_sys_index_columns] AS ic
                                       WHERE c.database_id                           = ic.database_id
                                         AND c.object_id                             = ic.object_id
                                         AND c.column_id                             = ic.column_id
                                       ORDER BY
                                             ic.index_id
                                         FOR XML PATH (N''), TYPE                                   -- computed columns
                                     ).value('.',N'NVARCHAR(MAX)')
                                    ,1,1,N'') -- end of STUFF function
                            ,N'')
  FROM [##SQLXL_Index_sys_columns] AS c
 WHERE c.is_computed  = 1
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Computed columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index -
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------

/******************************************************************************************************************************************\
 *Task* Diagnostics - Table Non-Defaults
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT f.*
  FROM (--
SELECT i.rec_type
      ,i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(
---------------------------------------------------------------------------------------------------
-- Diagnostic - Table - COLUMN CHANGE TRACKING ENABLED
+IIF(obj.ctt_is_track_columns_updated_on = 1
    , CHAR(096)
    + N'COLUMN CHANGE TRACKING ENABLED - Auto Cleanup '
    + IIF(db.is_auto_cleanup_on = 1,N'[ON]',N'[OFF]')
    + N' Retention = ' + CAST(db.retention_period AS NVARCHAR(20))
    + N' ' + db.retention_period_units_desc
    ,N'')
-- Diagnostic - Table - GRAPH NODE
+IIF(obj.is_node                         = 1,CHAR(096) + QUOTENAME(N'GRAPH NODE'),N'')
-- Diagnostic - Table - GRAPH EDGE
+IIF(obj.is_edge                         = 1,CHAR(096) + QUOTENAME(N'GRAPH EDGE'),N'')
-- Diagnostic - Table - REMOTE DATA ARCHIVE ENABLED
+IIF(obj.is_remote_data_archive_enabled  = 1,CHAR(096) + QUOTENAME(N'REMOTE DATA ARCHIVE ENABLE - DEPRECATED 2022+D'),N'')
-- Diagnostic - Table - is SUBSCRIBED SYNCHRONOUS
+IIF(obj.is_sync_tran_subscribed         = 1,CHAR(096) + QUOTENAME(N'SUBSCRIBED SYNCHRONOUS'),N'')
---------------------------------------------------------------------------------------------------
+IIF(   obj.is_published           > 0
     OR obj.is_schema_published    > 0
     OR obj.is_replicated          > 0
     OR obj.is_merge_published     > 0
     OR obj.has_replication_filter > 0
-- Diagnostic - Table - is PUBLISHED
    ,CHAR(096) + QUOTENAME( N'PUBLISHED'
-- Diagnostic - Table - is SCHEMA PUBLISHED
                         + STUFF( IIF(obj.is_schema_published    > 0,N', SCHEMA'  ,N'')
-- Diagnostic - Table - is Merge PUBLISHED
                                + IIF(obj.is_merge_published     > 0,N', MERGE'   ,N'')
-- Diagnostic - Table - is PUBLISHED WITH FILTER
                                + IIF(obj.has_replication_filter > 0,N', FILTERED',N'')
                                ,1,1,N'') -- end of STUFF function
                         )
    ,N'')
---------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Is empty
+IIF(i.tbl_is_empty = 1,CHAR(096) + QUOTENAME(N'EMPTY'),N'')
-- Diagnostic - Table - Locked for BULK LOAD
+IIF(obj.lock_on_bulk_load > 0,CHAR(096) + QUOTENAME(N'Locked for BULK LOAD'),N'') -- Locked for BULK LOAD
---------------------------------------------------------------------------------------------------
,1,1,N'') -- end of STUFF function
  FROM (-- aggregate and composite records, except for instance and database level
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type IN (N'I'  -- index level
                           ,N'H'  -- historical/archive table aggregate record
                           ,N'P'  -- parent level aggregate record
                           ,N'S'  -- system/internal level aggregate record
                           )
       )  AS i
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id
   AND N'TF'        <> obj.type       -- don't need SQL table valued functions here
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_databases] AS db
    ON i.database_id = db.database_id
) AS f
 WHERE f.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - Non-default properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - ANSI values & Unchecked assempbly
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
SELECT rec_type     = N'P'                                  -- parent level aggregate record
      ,database_id
      ,object_id    = parent_object_id
      ,index_id     = object_id
      ,type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = STUFF(

-- Diagnostic - Table - Created without "ANSI NULLS ON"
 IIF(uses_ansi_nulls = 0,CHAR(096) + N'Created without "ANSI NULLS ON"',N'')

-- Diagnostic - Table - Assembly definition changed by ALTER ASSEMBLY
+IIF(has_unchecked_assembly_data > 0,CHAR(096) + N'Assembly definition changed by ALTER ASSEMBLY',N'')
--------------------------------------------------------------------------------------------------------------------------------------------
,1,1,N'') -- end of STUFF function
  FROM [##SQLXL_Index_sys_objects]
 WHERE uses_ansi_nulls             = 0
    OR has_unchecked_assembly_data > 0
) AS obj
 WHERE diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - ANSI values & Unchecked assempbly'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Object definitions
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
SELECT rec_type     = N'P'                        -- parent level aggregate record
      ,database_id  = obj.database_id
      ,object_id    = obj.object_id
      ,index_id     = obj.object_id
      ,type         = obj.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = STUFF(
--------------------------------------------------------------------------------------------------------------------------------------------
-- Objects with Code Definitions (functions, views)
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Code Object - Does not use ANSI NULLS
+IIF(def.uses_ansi_nulls = 0,CHAR(096) + N'Does not use ANSI NULLS',N'')

-- Diagnostic - Code Object - Uses Quoted Identifier
+IIF(def.uses_quoted_identifier = 1,CHAR(096) + N'Uses Quoted Identifier',N'')

-- Diagnostic - Code Object - Is NOT Schema Bound
+IIF(def.is_schema_bound = 0 ,CHAR(096) + N'Is NOT Schema Bound',N'')

-- Diagnostic - Code Object - Does NOT use Database Collation
+IIF(def.uses_database_collation = 0
    ,CHAR(096) + N'Does NOT Use Database Collation - add "COLLATE Latin1_General_100_CI_AI" on %CHAR columns'
    ,N'')

-- Diagnostic - Code Object - Contains WITH RECOMPILE
+IIF(def.is_recompiled =  1,CHAR(096) + N'Contains WITH RECOMPILE',N'')

-- Diagnostic - Code Object - Does NOT return NULL on NULL input
+IIF(    def.null_on_null_input =  0
     AND obj.type <> N'V'            -- View
    ,CHAR(096) + N'Does NOT return NULL on NULL input',N'')

-- Diagnostic - Code Object - Executes AS OWNER
+IIF(def.execute_as_principal_id = -2,CHAR(096) + N'Executes AS OWNER',N'')

-- Diagnostic - Code Object - Executes AS PRINCIPAL ID
+IIF(def.execute_as_principal_id >  0
    ,CHAR(096) + N'Executes AS PRINCIPAL ID ' + CAST(def.execute_as_principal_id AS NVARCHAR(20))
    ,N'')

-- Diagnostic - Code Object - Is natively compiled
+IIF(def.uses_native_compilation =  1,CHAR(096) + N'Is natively compiled',N'')

------------------------------------------------------------
-- Diagnostic - SQL Table Valued Function - is INLINEABLE, inlining OFF or ON
+IIF(def.is_inlineable =  1
    ,CHAR(096) + N'Is inlineable' + IIF(def.inline_type = 1,N', inlining [ON]',N', Inlining *OFF*')
    ,N'')
------------------------------------------------------------
,1,1,N'') -- end of STUFF function
  FROM [##SQLXL_Index_sql_definitions] AS def
  JOIN [##SQLXL_Index_sys_objects]     AS obj
    ON def.database_id = obj.database_id
   AND def.object_id   = obj.object_id
) AS p
 WHERE p.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Object Diagnostics - Information from [##SQLXL_Index_sql_definitions]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Has Deprecated data types
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'P'                     -- parent level aggregate record
      ,database_id,object_id
      ,index_id     = p.object_id
      ,type         = N'U'                     -- User Table
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = N'Deprecated datatypes: '
                    + STUFF((--
                             SELECT N',' + c.system_type_name + IIF(c.max_length = -1,N'(MAX)',N'')
                               FROM [##SQLXL_Index_sys_columns] AS c
                              WHERE p.database_id       = c.database_id
                                AND p.object_id         = c.object_id
                                AND c.system_type_name IN (N'IMAGE',N'TEXT',N'NTEXT')
                              GROUP BY
                                    c.system_type_name
                                   ,c.max_length
                                FOR XML PATH(N''), TYPE                                             -- column data types
                            ).value('.',N'NVARCHAR(MAX)')
                           ,1,1,N'') -- end of STUFF function
  FROM (-- tables with deprecated data types
        SELECT database_id,object_id
          FROM [##SQLXL_Index_sys_columns]
         WHERE system_type_name IN (N'IMAGE',N'TEXT',N'NTEXT')
         GROUP BY
               database_id,object_id
       ) AS p
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - tables with deprecated data types'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - Information - Other
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Table - No PRIMARY KEY
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'P'             -- parent level aggregate record
      ,database_id  = p.database_id
      ,object_id    = p.object_id
      ,index_id     = p.object_id
      ,type         = N'U'             -- User Table
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = 'No Primary Key' + IIF(i.index_id > 0
                                            ,N', has ' + IIF(i.is_unique = 1,N'Unique',N'NonUnique') + N' CX'
                                            ,N'')
  FROM (-- Tables without primary keys
        SELECT database_id,object_id
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type     = N'P'   -- parent level aggregate record
           AND obj_type_hdr = N'TBL' -- omits History & Internal tables, Clustered columnstores cannot have PK constraints
         GROUP BY
               database_id,object_id
       EXCEPT -- indexes that are primary keys
        SELECT database_id,object_id
          FROM [##SQLXL_Index_compilation]
         WHERE is_primary_key = 1
       ) AS p
  LEFT OUTER
  JOIN [##SQLXL_Index_compilation] AS i
    ON N'I'               = i.rec_type       -- index level composite record
   AND p.database_id      = i.database_id
   AND p.object_id        = i.object_id
   AND i.type            IN (N'0' -- rowstore heap
                            ,N'1' -- Rowstore Clustered
                            )     -- Clustered columnstores cannot have PK constraints
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - tables without primary keys'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - Tables with filtered statistics
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'P'                        -- parent level aggregate record
      ,database_id  = s.database_id
      ,object_id    = s.object_id
      ,index_id     = s.object_id
      ,type         = N'U'                        -- User Table
      ,sub_type     = 0
-- Diagnostic - Table - has non-indexed statistics - may indicate more indexes needed
      ,prescription = NULL
      ,diagnostic   = N'Table has ' + CAST(SUM(IIF(s.has_filter = 1,1,0)) AS NVARCHAR(20)) + N' non-index filtered statistics'
  FROM [##SQLXL_Index_sys_stats]   AS s
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_indexes] AS i
    ON s.database_id                  = i.database_id
   AND s.object_id                    = i.object_id
   AND s.stats_id                     = i.index_id
 WHERE i.index_id IS NULL
 GROUP BY
       s.database_id,s.object_id
HAVING SUM(IIF(s.has_filter = 1,1,0)) > 0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - filtered statistics'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - CDC - History File group
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = p.rec_type
      ,database_id  = p.database_id
      ,object_id    = p.object_id
      ,index_id     = p.object_id
      ,type         = p.type
      ,sub_type     = p.sub_type
-- Diagnostic - Table - Change data capture filegroup name
      ,prescription = NULL
      ,diagnostic   = CHAR(096)
                    + IIF(obj.cdc_filegroup_name IS NOT NULL
                         ,N'Filegroup name ' + QUOTENAME(obj.cdc_filegroup_name)
                         ,N'Uses default Filegroup')
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'P') AS p                       -- parent level aggregate record
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON p.database_id = obj.database_id
   AND p.object_id   = obj.object_id
 WHERE obj.cdc_is_history_table = 1
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - History File group'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Parent - DML Triggers - enabled, non-MS
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'P'                        -- parent level aggregate record
      ,database_id  = obj.database_id
      ,object_id    = obj.object_id
      ,index_id     = obj.object_id
      ,type         = obj.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = N'DML Triggers'
-- Diagnostic - Table - has CLR trigger(s)
                    + N' CLR: '        + IIF(obj.clr_trigger_CNT > 0,CAST(obj.clr_trigger_CNT AS NVARCHAR(20)),N'0')
-- Diagnostic - Table - has SQL trigger(s)
                    + N' SQL: '        + IIF(obj.sql_trigger_CNT > 0,CAST(obj.sql_trigger_CNT AS NVARCHAR(20)),N'0')
-- Diagnostic - Table - has INSTEAD OF trigger(s)
                    + N' Instead Of: ' + IIF(obj.is_instead_of_trigger_CNT > 0,CAST(obj.is_instead_of_trigger_CNT AS NVARCHAR(20)),N'0')
  FROM [##SQLXL_Index_sys_objects] AS obj
 WHERE (   obj.clr_trigger_CNT           > 0
        OR obj.sql_trigger_CNT           > 0
        OR obj.is_instead_of_trigger_CNT > 0
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Table Diagnostics - DML Triggers'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Diagnostics - Objects - Count of System named & Likely System named - Constraints, Defaults, Primaary Keys, Sequences
-- Diagnostic - Objects - System named - Constraints, Defaults, Primaary Keys, Sequences
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     =  N'P'                        -- parent level aggregate record
      ,par_obj.database_id
      ,object_id    = par_obj.parent_object_id
      ,index_id     = par_obj.parent_object_id
      ,type         = obj.type
      ,sub_type     = 0
      ,prescription = NULL
      ,par_obj.diagnostic
  FROM (--
        SELECT database_id
              ,parent_object_id
              ,diagnostic = N'System named objects:'
                          + IIF([C]  IS NOT NULL,N' TBL CHK CON: ' + CAST([C]  AS NVARCHAR(20)),N'') -- Check constraint
                          + IIF([D0] IS NOT NULL,N' TBL DEF CON: ' + CAST([D0] AS NVARCHAR(20)),N'') -- Table Default constraint
                          + IIF([D]  IS NOT NULL,N' COL DEF CON: ' + CAST([D]  AS NVARCHAR(20)),N'') -- Column default constraint
                          + IIF([EC] IS NOT NULL,N' EDG CON:'      + CAST([EC] AS NVARCHAR(20)),N'') -- Edge constraint
                          + IIF([F]  IS NOT NULL,N' FKC: '         + CAST([F]  AS NVARCHAR(20)),N'') -- Foreign key constraint
                          + IIF([IT] IS NOT NULL,N' INT TBL: '     + CAST([IT] AS NVARCHAR(20)),N'') -- Internal Table
                          + IIF([PK] IS NOT NULL,N' PRI KEY CON:'  + CAST([PK] AS NVARCHAR(20)),N'') -- Primary key constraint
                          + IIF([SO] IS NOT NULL,N' SEQ: '         + CAST([SO] AS NVARCHAR(20)),N'') -- Sequence object
                          + IIF([UQ] IS NOT NULL,N' UNIQ CON:'     + CAST([UQ] AS NVARCHAR(20)),N'') -- Unique constraint
          FROM (--
                SELECT database_id
                      ,parent_object_id
                      ,CASE WHEN type = N'D'                -- Default (constraint or stand-alone)
                             AND parent_column_id = 0
                            THEN N'D0'
                            ELSE type
                       END AS type
                      ,cnt = COUNT_BIG(1)
                  FROM [##SQLXL_Index_sys_objects] AS par_obj
                 WHERE is_system_named > 0
                   AND type IN (N'C'   -- Check constraint
                               ,N'D'   -- Default (constraint or stand-alone)
                               ,N'EC'  -- Edge constraint
                               ,N'F'   -- Foreign key constraint
                               ,N'IT'  -- Internal Table
                               ,N'PK'  -- Primary key constraint
                               ,N'SO'  -- Sequence object
                               ,N'UQ'  -- Unique constraint
                               )
                 GROUP BY
                       database_id
                      ,parent_object_id
                      ,CASE WHEN type = N'D'          -- default (constraint or stand-alone)
                             AND parent_column_id = 0 -- column "zero" is the table
                            THEN N'D0'
                            ELSE type
                       END
               ) AS isn
         PIVOT (MAX(cnt) FOR type IN ([C],[D0],[D],[EC],[F],[IT],[PK],[SO],[UQ])) AS pvt
       ) AS par_obj
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON par_obj.database_id      = obj.database_id
   AND par_obj.parent_object_id = obj.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Diagnostic - Objects - Count of System named - Constraints, Defaults, Primaary Keys, Sequences'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Diagnostics - Objects - System named - History tables, External, Filetable
-- Diagnostic - Objects - System named - History tables, External, Filetable
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = CASE WHEN cdc_is_history_table = 1     THEN N'H' -- historical/archive table aggregate record
                           WHEN temporal_type        = 1     THEN N'H' -- historical/archive table aggregate record
                           WHEN ledger_type          = 1     THEN N'H' -- historical/archive table aggregate record
                           WHEN type                 = N'IT' THEN N'S' -- system internal table, ignored for now
                           ELSE                                   N'P' -- parent level aggregate record
                      END
      ,database_id,object_id
      ,index_id     = object_id
      ,type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = IIF(is_system_named = 2,N'Likely ',N'') + N'System named Object'
  from [##SQLXL_Index_sys_objects]
 WHERE is_system_named > 0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Diagnostic - Objects - System named - History tables, External, Filetable'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 ##########################################################################################################################################
 *Task* Diagnostics - Blitz Index - Index Checks;
############################################################################################################################################
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Total Lock Time with Long/Short Average Waits - BI11, BI12
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
-- Diagnostic - (BI11) - Locking-Prone Indexes - Total Lock Time with Long Average Waits
-- Diagnostic - (BI12) - Locking-Prone Indexes - Total Lock Time with Short Average Waits
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,prescription = N''
      ,diagnostic   = CASE WHEN wait_avg_factor > 1.0
                           THEN N'(BI11) ' -- Locking-Prone Indexes - Total Lock Time with Long Average Waits
                           ELSE N'(BI12) ' -- Locking-Prone Indexes - Total Lock Time with Short Average Waits
                      END
                    + N'Total Locks ' + ops_total_lock_wait_CNT
                    + N' Time ' + ops_total_lock_wait_MS_CNT
                    + N' with '
                    + CASE WHEN wait_avg_factor > 1.0
                           THEN N'Long Average Waits '  + ops_total_lock_wait_MS_AVG -- greater than average wait
                           ELSE N'Short Average Waits ' + ops_total_lock_wait_MS_AVG -- less than average wait
                      END
  FROM (--
        SELECT i.rec_type
              ,i.database_id
              ,i.object_id
              ,i.index_id
              ,i.type
              ,i.sub_type
              ,ops_total_lock_wait_CNT    = [dbo].[SQLXL_3SD](i.ops_total_lock_wait_CNT   ,N'I')
              ,ops_total_lock_wait_MS_CNT = [dbo].[SQLXL_3SD](i.ops_total_lock_wait_MS_CNT,N'ms')
              ,prev_wait_pct_sum = 1.0 * SUM(i.ops_total_lock_wait_MS_CNT)
                                         OVER (ORDER BY i.ops_total_lock_wait_MS_CNT DESC ROWS
                                               BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
                                              ) / t.ops_total_lock_wait_MS_CNT
              ,ops_total_lock_wait_MS_AVG = [dbo].[SQLXL_3SD](i.ops_total_lock_wait_MS_AVG,N'ms')
              ,wait_avg_factor = 1.0 * i.ops_total_lock_wait_MS_AVG / t.ops_total_lock_wait_MS_AVG
          FROM (-- instance level aggregate lock values
                SELECT ops_total_lock_wait_CNT
                      ,ops_total_lock_wait_MS_CNT
                      ,ops_total_lock_wait_MS_AVG
                  FROM [##SQLXL_Index_compilation]
                 WHERE type = N'A'                          -- instance level aggregate record
               ) AS t
         CROSS
          JOIN (-- index level composite records with waits
                SELECT *
                  FROM [##SQLXL_Index_compilation]
                 WHERE rec_type                = N'I'       -- index level composite record
                   AND ops_total_lock_wait_CNT > 0
               ) AS i
       ) AS met
 WHERE ISNULL(met.prev_wait_pct_sum,0.0) < 0.80 -- running total less than 80% of total wait time
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Total Lock Time with Long/Short Average Waits (BI11,12)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Operations: Low read to write ratio, no reads with writes - BI22, BI29, BI48
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
-- Diagnostic - (BI22) - Index Operations - No reads, High % writes
-- Diagnostic - (BI29) - Index Operations - No reads, Low % writes
-- Diagnostic - Index Operations - No reads, Medium % writes
-- Diagnostic - (BI48) - Index Operations - Lo Read to write ratio - High % writes
-- Diagnostic - (BI48) - Index Operations - Lo Read to write ratio - Low % writes
-- Diagnostic - Index Operations - Lo Read to write ratio - Medium % writes
SELECT i.rec_type,i.database_id,i.object_id,i.index_id,i.type,i.sub_type
      ,prescription = N''
      ,diagnostic = CASE WHEN i.ops_read_to_write_RAT > 0.0
                         THEN N'(BI48)'
                            + IIF(i.type = N'0',N' Heap ',N' ' + i.idx_type_hdr + N' Index')
                            + N' with '
                            + CASE WHEN ISNULL(i.prev_pct_sum,0.0) < 80.0 THEN N'High'
                                   WHEN i.prev_pct_sum > 99.995           THEN N'Low'
                                   ELSE                                        N'Medium'
                              END
                            + N' OPS Writes & Low Read/Write - '
                         WHEN ISNULL(i.prev_pct_sum,0.0) < 80.0
                         THEN N'(BI22) Unused '
                            + IIF(i.type = N'0',N'Heap ',i.idx_type_hdr + N' Index')
                            + N' with High OPS Writes - '
                         WHEN i.prev_pct_sum > 99.995
                         THEN N'(BI29) Unused ' + i.idx_type_hdr + N' Index with Low Writes - '
                         ELSE N'Unused ' + i.idx_type_hdr + N' Index with Medium Writes - '
                    END
                  + IIF(i.ops_read_to_write_RAT > 0.0
                       ,[dbo].[SQLXL_3SD](1.0 / i.ops_read_to_write_RAT,N'N') + N'x '
                       ,N'')
                  + N'RDS: '
                  + IIF(i.ops_total_read_CNT > 0,[dbo].[SQLXL_3SD](i.ops_total_read_CNT,N'I'),N'0')
                  + N' WRT: ' + [dbo].[SQLXL_3SD](i.ops_total_write_CNT,N'I')
                              + N' (' + [dbo].[SQLXL_3SD](i.ops_write_to_instance_PCT,N'N') + N'%)'
  FROM (-- identify 80/20 rule  80/20 rule  no reads with no/low writes
        SELECT rec_type,database_id,object_id,index_id,type,sub_type
              ,idx_type_hdr
              ,ops_total_write_CNT
              ,ops_write_to_instance_PCT
              ,ops_read_to_write_RAT
              ,ops_total_read_CNT
              ,pct_sum
              ,prev_pct_sum = LAG(pct_sum) OVER (ORDER BY pct_sum)
          FROM (--
                SELECT rec_type,database_id,object_id,index_id,type,sub_type
                      ,idx_type_hdr
                      ,ops_total_write_CNT
                      ,ops_write_to_instance_PCT
                      ,ops_read_to_write_RAT
                      ,ops_total_read_CNT
                      ,sum_ops_writes = SUM(ops_total_write_CNT) OVER (ORDER BY ops_write_to_instance_PCT
                                                                       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
                                                                      )
                      ,pct_sum = 100.0
                               * SUM(ops_total_write_CNT) OVER (ORDER BY ops_write_to_instance_PCT DESC
                                                                ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
                                                               )
                               / SUM(ops_total_write_CNT) OVER (ORDER BY ops_write_to_instance_PCT
                                                                ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
                                                               )
                  FROM [##SQLXL_Index_compilation]
                 WHERE rec_type            = N'I'       -- index-level composite records
                   AND type               <> N'1'       -- clustered rowstore index
                   AND ops_total_write_CNT > 0          -- index was written to
                   AND (   ops_read_to_write_RAT < 4.0  -- low reads to writes -OR- high writes to reads
                        OR ops_total_read_CNT    = 0    -- no reads
                       )
               ) AS i
       ) AS i
 WHERE (   ISNULL(i.prev_pct_sum,0.0) < 80.0 -- running total less than 80% of total - most written to indexes
        OR i.prev_pct_sum > 99.995           -- running total greater then 99.995 of total - least written to indexes
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Diagnostics - Operations low read/write ratio (BI22,29,48)'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - properties - Heaps
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
-- NOTE: Heaps with Waits covered later
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(
------------------------------------------------------------
-- Diagnostic - (BI43) - Index - Heap - with Forwarded Fetches
+ IIF(p.ios_forwarded_fetch_CNT > 0
     , CHAR(096) + N'(BI43) Heap with forwarded fetches: '
     + [dbo].[SQLXL_3SD](p.ios_forwarded_fetch_CNT,N'I')
     + IIF(p.row_CNT > 0,N' (' + [dbo].[SQLXL_3SD](COALESCE(1.0 * p.ios_forwarded_fetch_CNT / p.row_CNT,0),N'N') + N'x)',N' (No rows)'),N'')
------------------------------------------------------------
-- Diagnostic - (BI47) - Index - Heap - table has PRIMARY KEY
+ IIF(ip.is_primary_key > 0,CHAR(096) + N'(BI47) Heap with Primary Key: ' + CAST(ip.is_primary_key AS NVARCHAR(20)),N'')
-- Diagnostic - (BI47) - Index - Heap - tasble has UNIQUE CONSTRAINT
+ IIF(ip.is_unique_constraint > 0,CHAR(096) + N'(BI47) Heap with Unique Constraint: ' + CAST(ip.is_primary_key AS NVARCHAR(20)),N'')
-- Diagnostic - (BI47) - Index - Heap - table has unique index
+ IIF(ip.is_unique > 0,CHAR(096) + N'(BI47) Heap with Unique index: ' + CAST(ip.is_primary_key AS NVARCHAR(20)),N'')
------------------------------------------------------------
-- Diagnostic - (BI47) - Index - Heap - table has write/delete activity
+ CHAR(096)
+ IIF(i.ios_leaf_delete_CNT > 0
     ,N'(BI49) Heap with deletes:'
     ,N'Heap write activity:')
+ N' OPS'
+ N' DEL: ' + [dbo].[SQLXL_3SD](COALESCE(i.ops_total_delete_CNT,0),N'I')
+ N' UPD: ' + [dbo].[SQLXL_3SD](COALESCE(i.ops_total_update_CNT,0),N'I')
+ N' INS: ' + [dbo].[SQLXL_3SD](COALESCE(i.ops_total_insert_CNT,0),N'I')
+ N' USG'
+ N' WRT: ' + [dbo].[SQLXL_3SD](COALESCE(i.ius_user_updates_CNT,0),N'I')
------------------------------------------------------------
-- Diagnostic - (BI44) - Index - Large Heap - with operations
-- Diagnostic - (BI45) - Index - Medium Heap - with operations
-- Diagnostic - (BI46) - Index - Small Heap - with operations
+ CHAR(096)
+ IIF(   i.ops_total_read_CNT > 0 OR i.ops_total_write_CNT  > 0
      OR i.ius_user_read_CNT  > 0 OR i.ius_user_updates_CNT > 0
     ,CASE WHEN LOG10(p.row_CNT) > 6 THEN N'(BI44) Large'
           WHEN LOG10(p.row_CNT) > 4 THEN N'(BI45) Medium'
           WHEN p.row_CNT        > 0 THEN N'(BI46) Small'
           ELSE N'Empty'
      END + N' active heap -'
     ,CASE WHEN LOG10(p.row_CNT) > 6 THEN N'Large'
           WHEN LOG10(p.row_CNT) > 4 THEN N'Medium'
           WHEN p.row_CNT        > 0 THEN N'Small'
           ELSE N'Empty'
      END + N' inactive heap - ')
------------------------------------------------------------
-- Diagnostic - Index - Heap - Number of data rows or empty
+ N' Rows: ' + [dbo].[SQLXL_3SD](COALESCE(p.row_CNT            ,0),N'I')    -- number of table rows else empty
-- Diagnostic - Index - Heap - with indexes - Count
+ N' Idx: '  + [dbo].[SQLXL_3SD](COALESCE(p.index_CNT          ,0),N'I')    -- parent indexes
-- Diagnostic - Index - Heap - with Missing indexes - Count
+ N' MIX: '  + [dbo].[SQLXL_3SD](COALESCE(obj.missing_index_CNT,0),N'I')    -- missing indexes
-- Diagnostic - Index - Heap - with query Usage (reads, writes)
+ N' USG'
+ N' RDS: '  + [dbo].[SQLXL_3SD](COALESCE(p.ius_user_read_CNT  ,0),N'I')
+ N' OPS'
+ N' RDS: '  +[dbo].[SQLXL_3SD](COALESCE(p.ops_total_read_CNT  ,0),N'I')
------------------------------------------------------------
+ IIF(p.ops_total_write_CNT > 0 OR p.ius_user_updates_CNT > 0
     , N' R/W'
-- Diagnostic - Index - Heap - Usage read to write ratio
     + N' USG ' + [dbo].[SQLXL_3SD](COALESCE(i.ius_read_to_write_RAT,0),N'N') + N'x '
-- Diagnostic - Index - Heap - Operations read to write ratio
     + N' OPS ' + [dbo].[SQLXL_3SD](COALESCE(i.ops_read_to_write_RAT,0),N'N') + N'x '
     ,N'')
------------------------------------------------------------
                           ,1,1,N'')                        -- end of STUFF function
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SELECT i.rec_type
      ,obj.database_id
      ,obj.object_id
      ,i.index_id
      ,i.type
      ,ip.*
--*/
  FROM (-- rowstore heap Tables
        SELECT *
          FROM [##SQLXL_Index_sys_objects]
         WHERE N'U' = type                      -- user table
           AND 0    < heap_index_CNT            -- is a HEAP table
           AND 0    = is_memory_optimized       -- not memory optimized
           AND 0    = clustered_columnstore_CNT -- not a clustered columnstore
       ) AS obj

  JOIN [##SQLXL_Index_compilation] AS p
    ON obj.database_id = p.database_id
   AND obj.object_id   = p.object_id
   AND p.rec_type     IN (N'H'                  -- historical/archive table aggregate record
                         ,N'P'                  -- parent level aggregate record
                         ,N'S'                  -- system/internal table composite record
                         )

  JOIN [##SQLXL_Index_compilation] AS i
    ON obj.database_id = i.database_id
   AND obj.object_id   = i.object_id
   AND N'I'            = i.rec_type             -- index level composite record
   AND N'0'            = i.type                 -- rowstore heap

  LEFT OUTER
  JOIN (-- Tables with Primary Key, Unique Constraint, or Unique index
        SELECT database_id,object_id
              ,is_primary_key       = MAX(IIF(is_primary_key       = 1,index_id,0))
              ,is_unique_constraint = MAX(IIF(is_unique_constraint = 1,index_id,0))
              ,is_unique            = MAX(IIF(is_unique            = 1,index_id,0))
          FROM [##SQLXL_Index_sys_indexes]
         GROUP BY
               database_id,object_id
        HAVING 0 < MAX(IIF(is_primary_key       = 1,index_id,0))
            OR 0 < MAX(IIF(is_unique_constraint = 1,index_id,0))
            OR 0 < MAX(IIF(is_unique            = 1,index_id,0))
       ) AS ip
    ON i.database_id      = ip.database_id
   AND i.object_id        = ip.object_id

) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Heap properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - High Value Missing Index (BI50)
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
-- Diagnostic - (BI50) Index - System named
SELECT i.rec_type,i.database_id,i.object_id,i.index_id,i.type,i.sub_type
      ,prescription = N''
      ,diagnostic = N'(BI50) High Value Missing Index - '
                  + [dbo].[SQLXL_3SD](mix_advantage_weighted_PCT,N'%')
                  + N' - weighted by table total reads'
  FROM (SELECT rec_type,database_id,object_id,index_id,type,sub_type
              ,idx_type_hdr
              ,mix_advantage_weighted_AMT
              ,mix_advantage_weighted_PCT
              ,prev_pct_sum = LAG(pct_sum) OVER (ORDER BY pct_sum)
          FROM (--
                SELECT rec_type,database_id,object_id,index_id,type,sub_type
                      ,idx_type_hdr
                      ,mix_advantage_weighted_AMT
                      ,mix_advantage_weighted_PCT = mix_advantage_weighted_AMT
                                                  / SUM(mix_advantage_weighted_AMT)
                                                    OVER (ORDER BY mix_advantage_weighted_AMT
                                                          ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
                                                         )
                      ,pct_sum = 100.0
                               * SUM(mix_advantage_weighted_AMT)
                                 OVER (ORDER BY mix_advantage_weighted_AMT DESC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
                               / SUM(mix_advantage_weighted_AMT)
                                 OVER (ORDER BY mix_advantage_weighted_AMT ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
                  FROM [##SQLXL_Index_compilation]
                 WHERE type    = N'M'                   -- missing nonclustered rowstore index
               ) AS i
       ) AS i
 WHERE ISNULL(i.prev_pct_sum,0.0) < 80.0 -- running total less than 80% of total
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Blitz Index - High Value Missing Index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - filtered index & candidate filtered keys
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
-- Diagnostic - (BI33) - Index - BIT data type, candidate for Filter
-- Diagnostic - (BI33) - Index - SPARSE column, potential for filtering
-- Diagnostic - (BI33) - Index - Lead key 2-19 steps, hi parameter sniff (>25X), candidate for Filter
-- Diagnostic - (BI33) - Index - non-Lead key 2-19 steps, hi parameter sniff (>25X), candidate for Filter
-- Diagnostic - (BI33) - Index - Ratio hi histogram bucket to low is HIGH, candidate for parameter sniffing
-- Diagnostic - (BI33) - Index - name implies potential for filtering
SELECT rec_type     = N'I' -- index level composite record
      ,database_id  = ic.database_id
      ,object_id    = ic.object_id
      ,index_id     = ic.index_id
      ,type         = ic.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = N'(BI33) Key '
                    + CAST(ic.idx_column_display_sequence AS NVARCHAR(20)) + N':'
                    + IIF(ic.is_index_column_filtered = 1
                         ,N' filtered'
                         ,IIF(cx.column_id IS NOT NULL,N' named like filter.',N''))
                    + IIF(c.system_type_name          = N'BIT',N' BIT'              ,N'')
                    + IIF(c.is_sparse                 = 1     ,N' SPARSE'           ,N'')
                    -----------------------------------------------------------------
                    + N' Stat Rows ' + IIF(comp.stathdr_row_CNT > 0
                                          ,[dbo].[SQLXL_3SD](comp.stathdr_row_CNT,N'I')
                                          ,N'N/A')
                    + N' Part Rows ' + IIF(comp.row_CNT IS NOT NULL
                                          ,[dbo].[SQLXL_3SD](comp.row_CNT,N'I')
                                          ,N'N/A')
                    + N' Steps '  + CAST(COALESCE(c.histogram_steps,1) AS NVARCHAR(20))
                    + N' Sniffs ' + [dbo].[SQLXL_3SD](COALESCE(c.param_sniff,1),N'N') + N'x'
                    + IIF(ic.is_index_column_filtered = 0,N' - add filter?',N'')
  FROM [##SQLXL_Index_sys_indexes]       AS i
  JOIN [##SQLXL_Index_sys_index_columns] AS ic
    ON i.database_id = ic.database_id
   AND i.object_id   = ic.object_id
   AND i.index_id    = ic.index_id
   AND i.type        = ic.type
   AND i.sub_type    = ic.sub_type
  JOIN [##SQLXL_Index_sys_columns]       AS c
    ON ic.database_id = c.database_id
   AND ic.object_id   = c.object_id
   AND ic.column_id   = c.column_id
  LEFT OUTER
  JOIN (-- candidates for filter based on index name
        SELECT database_id,object_id,column_id
          FROM [##SQLXL_Index_sys_columns]
         WHERE is_identity              = 0
           AND is_sequence              = 0
           AND is_newsequentialid       = 0
           AND is_newid                 = 0
           AND (   name LIKE N'is%'
                OR name LIKE N'%active%'
                OR (name LIKE N'%archive%' AND system_type_name NOT LIKE N'%DATE%')
                OR name LIKE N'%_band'
                OR name LIKE N'%_band_%'
                OR name LIKE N'%_closed%'
                OR name LIKE N'%flag%'
                OR name LIKE N'%_open%'
                OR name LIKE N'%status%'
              )
       ) AS cx
    ON ic.database_id = cx.database_id
   AND ic.object_id   = cx.object_id
   AND ic.column_id   = cx.column_id
  JOIN [##SQLXL_Index_compilation] AS comp
    ON i.database_id = comp.database_id
   AND i.object_id   = comp.object_id
   AND i.index_id    = comp.index_id
   AND i.type        = comp.type
   AND i.sub_type    = comp.sub_type
 WHERE i.type                 = N'2' -- Nonclustered rowstore index
   AND i.is_primary_key       = 0
   AND i.is_unique_constraint = 0
   AND ic.is_included_column  = 0
   AND ic.partition_ordinal   = 0
   AND c.is_identity          = 0
   AND c.is_sequence          = 0
   AND c.is_newsequentialid   = 0
   AND c.is_newid             = 0
   -------------------------------------------------
   AND (   (    c.histogram_steps BETWEEN 2 AND 19          -- only looking for filter opportunities
            AND c.param_sniff            >= 25.0              -- greater than 25 times rowcounts between high and low
           )
        OR N'bit'                      = c.system_type_name
        OR c.is_sparse                 = 1
        OR cx.column_id               IS NOT NULL
        -------------------------------------------
        OR ic.is_index_column_filtered = 1
      )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Blitz Index - filtered index & candidate filtered keys'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - filtered columns in indexs keys - BI93
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                    -- index level composite record
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
-- Diagnostic - (BI93) - Statistics - Filtered Statistics on key columns (Index, Missing Index, foreign key constraint) NOT on an Index
      ,diagnostic   = N'(BI93) Filtered Statistics on column -'
                    + COALESCE((--
                                SELECT  N' Key '
                                      + CAST(cfs.idx_column_display_sequence AS NVARCHAR(20))
                                      + N' Count ' + [dbo].[SQLXL_3SD](cfs.cnt,N'I')
                                      + N' - see Table row for details'
                                  FROM [#key_column_filtered_statistics] AS cfs
                                 WHERE i.database_id      = cfs.database_id
                                   AND i.object_id        = cfs.object_id
                                   AND i.index_id         = cfs.index_id
                                   AND i.type             = cfs.type
                                   FOR XML PATH(N''), TYPE                                          -- idx_column_display_sequence
                               ).value('.',N'NVARCHAR(MAX)')
                              ,CHAR(096) + N'> Column not found')
  FROM (-- distinc list of indexes with filtered statistics
        SELECT database_id,object_id,index_id,type,sub_type
          FROM [#key_column_filtered_statistics]
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) AS i
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Filtered Statistics on other columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Table + column check constraint has non-standard property or references a procedure, function, or CLR - (BI94)
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = con_obj.rec_type           -- parent level aggregate record
      ,database_id  = con_obj.database_id
      ,object_id    = con_obj.parent_object_id   -- for System, History, Constraints
      ,index_id     = idx_col.index_id           -- for System, History, Constraints
      ,type         = idx_col.type               -- User Table
      ,sub_type     = idx_col.sub_type

-- Diagnostic - Table/Column has check constraint(s) - see details
      ,prescription = NULL
      ,diagnostic   = IIF(con_obj.parent_column_id = 0,N'TABLE ',N'COLUMN ')
                    + con_obj.type_desc + N' ' + QUOTENAME(con_obj.name)
                    + COALESCE(CHAR(096) + N'> on column ' + QUOTENAME(c.name),N'')
                    + COALESCE(  CHAR(096) + N'>'
                               + STUFF(-- trim off unneeded leading characters
-- Diagnostic - Index Column Constraint - is DISABLED
                                       + IIF(con_obj.is_disabled         = 1,N', Disabled',N'')
-- Diagnostic - Index Column Constraint - is NOT TRUSTED
                                       + IIF(con_obj.is_not_trusted      = 1,N', Not Trusted',N'')
-- Diagnostic - Index Column Constraint - table is Replicated, column has REPLICATION enabled
                                       + IIF(    tbl_obj.is_replicated          = 1
                                             AND con_obj.is_not_for_replication = 0
                                            ,N'> Replicated - consider "NOT FOR REPLICATION"'
                                            ,N'')
-- Diagnostic - Index Column Constraint - is PUBLISHED
                                       + IIF(con_obj.is_published        = 1,N', Published',N'')
-- Diagnostic - Index Column Constraint - is SCHEMA PUBLISHED
                                       + IIF(con_obj.is_schema_published = 1,N', Schema Published',N'')
                                      ,1,1,N'') -- end of STUFF function
                              ,N'')
-- Diagnostic - Index Column constraint - uses non-database collation
                    + IIF(con_obj.uses_database_collation = 0,CHAR(096) + N'> uses non-Database Collation',N'')

-- Diagnostic - (BI94) - Index Column constraint - references a procedure - can force serialization
                    + IIF(con_obj.uses_sql_proc           = 1,CHAR(096) + N'>(BI94) references procedure - can force serialization' ,N'')

-- Diagnostic - (BI94) - Index Column constraint - references a function - can force serialization
                    + IIF(con_obj.uses_sql_ftn            = 1,CHAR(096) + N'>(BI94) references function - can force serialization'  ,N'')

-- Diagnostic - (BI94) - Index Column constraint - references a SQL method - can force serialization
                    + IIF(con_obj.uses_sql_mthd           = 1,CHAR(096) + N'>(BI94) references SQL method - can force serialization',N'')

/*** LOCAL TESTING ***
SELECT *
--*/
  FROM (-- index level constraints
        SELECT rec_type = N'I'
              ,*
          FROM [##SQLXL_Index_sys_objects]
         WHERE parent_column_id > 0
       ) AS con_obj

  JOIN [##SQLXL_Index_sys_objects] AS tbl_obj                                                       -- parent table record
    ON con_obj.database_id      = tbl_obj.database_id
   AND con_obj.parent_object_id = tbl_obj.object_id                                                 -- for System, History, Constraints

  LEFT OUTER
  JOIN (-- indexed columns - used to identify columns used in indexes
        SELECT database_id,object_id,index_id,type,sub_type
              ,column_id
          FROM [##SQLXL_Index_sys_index_columns]
         GROUP BY
               database_id,object_id,index_id,type,sub_type
              ,column_id
       ) AS idx_col
    ON con_obj.database_id      = idx_col.database_id
   AND con_obj.parent_object_id = idx_col.object_id                                                 -- for System, History, Constraints
   AND con_obj.parent_column_id = idx_col.column_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_columns] AS c                                                             -- column details
    ON con_obj.database_id      = c.database_id
   AND con_obj.parent_object_id = c.object_id                                                       -- for System, History, Constraints
   AND con_obj.parent_column_id = c.column_id                                                       -- tie constraint to column if found

 WHERE idx_col.column_id       IS NOT NULL
   AND (   con_obj.is_disabled             = 1
        OR con_obj.is_not_trusted          = 1
        OR (tbl_obj.is_replicated = 1 AND con_obj.is_not_for_replication = 0)
        OR con_obj.is_published            = 1
        OR con_obj.is_schema_published     = 1
        OR con_obj.uses_database_collation = 0
        OR con_obj.uses_sql_proc           = 1
        OR con_obj.uses_sql_ftn            = 1
        OR con_obj.uses_sql_mthd           = 1
       )
 ORDER BY
       con_obj.type                             -- check constraints first
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Column Constraint attributes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Uncovered Foreign Key Constraints - BI72
-- If there are candidate covering Missing index(es) (sequence,overlap,contained) found show that too.
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
-- Note: as of 2024-12-28 release BlitzIndex refers to 2 CHECK_ID 72's - Woo!
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = fkc_idx.rec_type
      ,database_id  = fkc_idx.database_id
      ,object_id    = fkc_idx.object_id
      ,index_id     = fkc_idx.index_id     -- is really the FKC object_id
      ,type         = fkc_idx.type
      ,sub_type     = fkc_idx.sub_type
      ,prescription = NULL
      ,diagnostic   = N'(BI72) Uncovered FKC'
-- Diagnostic - (BI72) - Foreign Key Constraint - No covering index lead key element
+ IIF(fkc_idx.fkc_missing_index_CNT > 0 -- candidate missing indexes found
-- Diagnostic - Foreign Key Constraint - elements found in Missing indexes
     , CHAR(096)
     + N'> In '       + CAST(fkc_idx.fkc_missing_index_CNT AS NVARCHAR(20)) + N' MIX Candidate(s) '
     + N' Adv: '      + IIF(a.mix_Advantage_AMT > 0
                           ,[dbo].[SQLXL_3SD](1.0 * COALESCE(fkc_idx.mix_Advantage_AMT,0) / a.mix_Advantage_AMT,N'%')
                           ,N'')
     ---------------------------------
     + N' Cost: '     + IIF((a.mix_avg_total_user_cost_AMT + a.mix_avg_total_system_cost_AMT) > 0
                            ,[dbo].[SQLXL_3SD](1.0 * COALESCE(( fkc_idx.mix_avg_total_user_cost_AMT
                                                              + fkc_idx.mix_avg_total_system_cost_AMT
                                                              ),0)
                                              / (a.mix_avg_total_user_cost_AMT + a.mix_avg_total_system_cost_AMT)
                                              ,N'%')
                            ,N'')
     ---------------------------------
     + N' Impact: '   + IIF((a.mix_avg_user_impact_AMT + a.mix_avg_system_impact_AMT) > 0
                           ,[dbo].[SQLXL_3SD](1.0 * COALESCE(( fkc_idx.mix_avg_user_impact_AMT
                                                             + fkc_idx.mix_avg_system_impact_AMT
                                                             ),0)
                                                  / (a.mix_avg_user_impact_AMT + a.mix_avg_system_impact_AMT)
                                             ,N'%')
                           ,N'')
     + N' Compiles: ' + [dbo].[SQLXL_3SD](COALESCE(fkc_idx.mix_unique_compiles_CNT,0),N'I')
     + N' USG: '      + [dbo].[SQLXL_3SD](COALESCE(fkc_idx.ius_user_total_CNT     ,0),N'I')
                      + IIF(tbl.ius_user_total_CNT > 0
                           , N' ('
                           + [dbo].[SQLXL_3SD](1.0 * COALESCE(fkc_idx.ius_user_total_CNT,0)/ tbl.ius_user_total_CNT,N'%')
                           + N')'
                          ,N'')
     + N' Last: '     + COALESCE(
                        CONVERT(NVARCHAR(11)
                               ,(--
                                 SELECT MAX(dt)
                                   FROM (VALUES (fkc_idx.ius_last_user_seek_DTTM)
                                               ,(fkc_idx.ius_last_user_scan_DTTM)
                                               ,(fkc_idx.ius_last_system_seek_DTTM)
                                               ,(fkc_idx.ius_last_system_scan_DTTM)
                                        ) AS value(dt)
                               ),2)
                                ,N'N/A')
     , N' - ' + IIF(fc.stats_name IS NULL,N' No',N'') + N' column statistics found'
     + N' - no candidate covering MIX'
    )
/*** LOCAL TESTING ***
SELECT COUNT_BIG(1)
SELECT fkc_idx.database_id,fkc_idx.object_id,fkc_idx.index_id,fkc_idx.type,fc.stats_name
--*/
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE type = N'A') AS a                           -- instance level aggregate record
 CROSS
  JOIN (-- All uncovered foreign key records
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE 1 = 1   -- simplifies adding additional clauses for testing
           AND type                    = N'F'               -- foreign key constraint
           AND fkc_covered_by_idx_IDS IS NULL               -- no covering index found
       ) AS fkc_idx

  JOIN [##SQLXL_Index_compilation] AS tbl
    ON fkc_idx.database_id = tbl.database_id
   AND fkc_idx.object_id   = tbl.object_id
   AND fkc_idx.object_id   = tbl.index_id
   AND tbl.rec_type       IN (N'H' -- history/archive table aggregate record
                             ,N'P' -- parent level aggregate record
                             ,N'S' -- system/internal table aggregate record
                             )
 OUTER
 APPLY (-- statistics elements for missing foreign key columns
        SELECT fc.database_id
              ,fc.object_id
              ,fc.index_id
              ,c.stats_name
              ,c.name
              ,c.Uniqueness
          FROM [##SQLXL_Index_sys_index_columns] AS fc      -- foreign key columns inserted to index_columns
          JOIN [##SQLXL_Index_sys_columns]       AS c
            ON fc.database_id = c.database_id
           AND fc.object_id   = c.object_id
           AND fc.column_id   = c.column_id
         WHERE fkc_idx.database_id         = fc.database_id
           AND fkc_idx.object_id           = fc.object_id
           AND fkc_idx.index_id            = fc.index_id    -- obly check if lead foreign key column has statistics
           AND 1                           = fc.idx_column_display_sequence
           AND c.stats_name IS NOT NULL
       ) AS fc
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - uncovered, candidate MIX'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - index properties
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (-- Diagnostics, subquery to enable NOT NULL below
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI23) - Index - Nonclustered Rowstore - More than 4 Key columns or more than 16 bytes or MAX length column
-- Diagnostic - (BI24) - Index - Clustered Rowstore - More than 3 Key columns or more than 16 bytes or MAX length column
+ IIF(    type IN (N'1' -- clustered rowstore index
                  ,N'2' -- nonclustered rowstore index
                  )
      AND (   COALESCE(stathdr_average_key_length,key_total_datatype_length_bytes) > 16
           OR (   (    type            = N'1' -- clustered rowstore index
                   AND key_ordinal_CNT > 3
                  )
               OR (    type            = N'2' -- nonclustered rowstore index
                   AND key_ordinal_CNT > 4
                  )
               OR is_key_total_datatype_length_MAX = 1
              )
          )
   , CHAR(096) + IIF(type = N'2',N'(BI23)',N'(BI24)')
   + N' Wide key: '
   + IIF(is_key_total_datatype_length_MAX = 1
        ,N'MAX'
        ,IIF(stathdr_average_key_length > 0.0
            ,[dbo].[SQLXL_3SD](stathdr_average_key_length,N'B') + N' Avg Stats Length'
            ,[dbo].[SQLXL_3SD](key_total_datatype_length_bytes,N'B') + N' Col Length'
            )
        )
   + N' In ' + CAST(key_ordinal_CNT AS NVARCHAR(20)) + N' cols'
   + IIF(type = N'2' -- Nonclustered rowstore index
        ,N' excl CX elements'
        ,N'')
    ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI28) - Index - Clustered Rowstore - index Not Unique
+ IIF(type = N'1' AND is_unique = 0,CHAR(096) + N'(BI28) Non-Unique Clustered Index',N'')
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI41) - Index - Hypothetical INdex
+ IIF(is_hypothetical = 1,CHAR(096) + N'(BI41) Hypothetical index, can''t be used, holds stats',N'')
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI42) - Index - Disabled Index
+ IIF(is_disabled     = 1
     , CHAR(096) + N'*DISABLED '
     + IIF(rec_type = N'I'
          ,idx_type_hdr + IIF(idx_type_dtl > N'',N' ' + idx_type_dtl,N'')
          ,obj_type_hdr + IIF(obj_type_dtl > N'',N' ' + obj_type_dtl,N'')
          )
     + N'*' + IIF(type <> N'F',N' (BI42)',N'')
     ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI63) - Index - Compression - count of compressed Partitions ROW
-- Diagnostic - (BI63) - Index - Compression - count of compressed Partitions PAGE
-- Diagnostic - (BI63) - Index - Compression - count of compressed Partitions Columnstore
-- Diagnostic - (BI63) - Index - Compression - count of compressed Partitions Archive
-- Diagnostic - (BI63) - Index - Compression - count of compressed Partitions XML
+ IIF((   partition_row_compress_CNT                 > 0
       OR partition_page_compress_CNT                > 0
       OR ios_page_compression_fail_PCT              > 0
       OR partition_columnstore_compress_CNT         > 0
       OR partition_columnstore_archive_compress_CNT > 0
       OR partition_xml_compress_CNT                 > 0
      )
     , CHAR(096)
     + IIF(    i.type NOT IN (N'5' -- clustered columnstore
                             ,N'6' -- non-clustered columnstore
                             )
           AND i.obj_type_hdr NOT IN (N'INT')
          ,N'(BI63) Compression: '
          ,N'Compression: ')
     + STUFF( IIF(partition_row_compress_CNT > 0
                 ,N' ROW(' + [dbo].[SQLXL_3SD](partition_row_compress_CNT,N'I') + N')'
                 ,N'')
            + IIF(partition_page_compress_CNT > 0
                 , N' PAGE(' + [dbo].[SQLXL_3SD](partition_page_compress_CNT,N'I') + N')'
-- Diagnostic - Index - Compression - Page Compression Failure Rate
                 + IIF(ios_page_compression_fail_PCT > 0.0
                      ,N' Fails: '+ [dbo].[SQLXL_3SD](ios_page_compression_fail_PCT,N'N') + N'%'
                      ,N'')
                 ,N'')
            + IIF(partition_columnstore_compress_CNT > 0
                 ,N' CS(' + [dbo].[SQLXL_3SD](partition_columnstore_compress_CNT,N'I') + N')'
                 ,N'')
            + IIF(partition_columnstore_archive_compress_CNT > 0
                 ,N' ARC(' + [dbo].[SQLXL_3SD](partition_columnstore_archive_compress_CNT,N'I') + N')'
                 ,N'')
            + IIF(partition_xml_compress_CNT > 0
                 ,N' XML(' + [dbo].[SQLXL_3SD](partition_xml_compress_CNT,N'I') + N')'
                 ,N'')
            ,1,1,N'') -- end of STUFF function
      ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI64) - Index - is partitioned & partitioning column
+IIF(    type NOT IN (N'3'            -- XML indexes are partitioned by default if table is partitioned
                     ,N'T'            -- fulltext index cannot be partitioned
                     )
     AND (   ios_partition_CNT > 1
          OR partition_column_id > 0
         )
    , CHAR(096) + N'(BI64) Index partitioned on column '
    + QUOTENAME(COALESCE(partition_column_name,N'PART COL NOT FOUND')) + N' - in '
    + COALESCE(CAST(partition_CNT AS NVARCHAR(20)),N'PART CNT NOT FOUND') + N' partitions'
    ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI40) - Index - low fill factor - for all non-100% factors
+ IIF(    i.fill_factor BETWEEN 1 AND 99
      AND (   i.ops_total_page_split_CNT > 0
           OR i.page_merge_to_write_PCT  > 0
          )
     , CHAR(096) + N'(BI40) Low Fill Factor '
     + IIF(i.type = N'T'                                      -- full-text index of a tabular object
          ,N'FTX N/A%'
          ,[dbo].[SQLXL_3SD](i.fill_factor,N'I')
     + N'%')

-- Diagnostic - Index - Padding -- Fill_Factor < 100% - tree level padding status
     + IIF(i.fill_factor NOT IN (0,100)
          ,IIF(i.is_padded = 0,N', Padding Disabled',N', Padding Enabled')
          ,N'')

-- Diagnostic - Index - Page Splits & Percent writes
     + IIF(    i.ops_total_page_split_CNT > 0.0
          , N' Splits ' + [dbo].[SQLXL_3SD](i.ops_total_page_split_CNT,N'I')
          + N' (' + IIF(i.page_splits_to_write_PCT IS NOT NULL
                       ,[dbo].[SQLXL_3SD](i.page_splits_to_write_PCT,N'N') + N'% INS+UPD'
                       ,N'NO WRITES RECORDED') + N')'
          , N'')

-- Diagnostic - Index - Page Merges & Percent writes
     + IIF(i.ops_total_page_merge_CNT > 0.0
          , N' Merges ' + [dbo].[SQLXL_3SD](i.ops_total_page_merge_CNT,N'I')
          + N' (' + IIF(i.page_merge_to_write_PCT IS NOT NULL
                       ,[dbo].[SQLXL_3SD](i.page_merge_to_write_PCT,N'N') + N'% UPD+DEL'
                       ,N'NO WRITES RECORDED') + N')'
          , N'')
     ,N'')
--------------------------------------------------------------------------------------------------------------------------------------------
                           ,1,1,N'')     -- end of STUFF function
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type    = N'I'                           -- index composite records
       ) AS i
       ) AS i -- from  subquery above
 WHERE i.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Blitz Index - Index Properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index synergies
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
BEGIN TRY
   DROP TABLE [##SQLXL_Index_synergies_count_prev_row];
END TRY
BEGIN CATCH
END CATCH

SELECT *
      ,prv = LAG(pfx,1,N'') OVER (PARTITION BY database_id,object_id,index_id,type,sub_type
                                      ORDER BY rn
                                 )
  INTO [##SQLXL_Index_synergies_count_prev_row]
  FROM [##SQLXL_Index_synergies_count_by_type]
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - index synergy previous display row'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

-- Diagnostic - (BI01) - Redundant Indexes - Duplicate Keys. Includes Foreign Key Constraints
-- Diagnostic - (BI02) - Redundant Indexes - Approximate Duplicate Keys. Same lead key, includes Foreign Key Constraints
-- Diagnostic - Index synergies - overlapping keys - same keys different sequence
-- Diagnostic - Index synergies - index keys contained in another larger index without included columns
-- Diagnostic - Index synergies - index keys contained in another larger index with included columns
-- Diagnostic - Index synergies - larger index without included columns containing all keys from a smaller index
-- Diagnostic - Index synergies - larger index with included columns containing all keys from a smaller index
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type = N'I'
      ,idx.database_id,idx.object_id,idx.index_id,idx.type,idx.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF((--
                             SELECT CASE WHEN syn.prv <> syn.pfx
                                         THEN CASE syn.pfx
                                                   WHEN N'[DUP]' THEN N' (BI01) Duplicate keys'
                                                   WHEN N'[SEQ]' THEN N' (BI02) Same starting key'
                                                        -------------------------------------------------
                                                   WHEN N'[OVL]' THEN N' Overlapping keys'
                                                   WHEN N'[CON]' THEN N' Contained keys'
                                                   WHEN N'[INC]' THEN N' Included keys'
                                                        -------------------------------------------------
                                                   WHEN N'[COI]' THEN N' Contains keys'
                                                   WHEN N'[INI]' THEN N' Includes keys'
                                                        -------------------------------------------------
                                                   ELSE syn.pfx
                                              END
                                         ELSE N''
                                    END
                                    + N' ' + syn.typ + N'(' + syn.cnt + N')'
                               FROM [##SQLXL_Index_synergies_count_prev_row] AS syn
                              WHERE idx.database_id = syn.database_id
                                AND idx.object_id   = syn.object_id
                                AND idx.index_id    = syn.index_id
                                AND idx.type        = syn.type
                                AND idx.sub_type    = syn.sub_type
                              ORDER
                                 BY syn.rn
                                FOR XML PATH(N''), TYPE                                             -- stats density vector - all_density
                            ).value('.',N'NVARCHAR(MAX)')
                           ,1,1,N'')
  FROM (--
        SELECT database_id,object_id,index_id,type,sub_type
          FROM [##SQLXL_Index_synergies_count_prev_row]
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) AS idx
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - count of synergies across indexes, foreign keys, missing indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Filtered indexes (BI34)
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                    -- index level composite record
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = STUFF(
-- Diagnostic - (BI34) - Index - filtered on a column not in the index - with column name(s)
                             IIF(ed.non_index > 0
                                , CHAR(096)
                                + N'(BI34) Filter columns not in Index:'
                                + COALESCE((--
                                            SELECT CHAR(096) + N'> ' + QUOTENAME(c.name)
                                              FROM [##SQLXL_Index_sys_sql_expression_dependencies] AS edc
                                              LEFT OUTER
                                              JOIN [##SQLXL_Index_sys_columns]       AS c
                                                ON edc.database_id         = c.database_id
                                               AND edc.referencing_id      = c.object_id
                                               AND edc.referenced_minor_id = c.column_id
                                              LEFT OUTER
                                              JOIN [##SQLXL_Index_sys_index_columns] AS ic
                                                ON edc.database_id          = ic.database_id
                                               AND edc.referencing_id       = ic.object_id
                                               AND edc.referencing_minor_id = ic.index_id
                                               AND edc.referenced_minor_id  = ic.column_id
                                             WHERE ed.non_index             > 0
                                               AND ed.database_id           = edc.database_id
                                               AND ed.object_id             = edc.referencing_id
                                               AND ed.index_id              = edc.referencing_minor_id
                                               AND 7                        = edc.referencing_class
                                               AND 1                        = edc.referenced_class
                                               AND ic.column_id            IS NULL
                                               FOR XML PATH(N''), TYPE                              -- column names
                                           ).value('.',N'NVARCHAR(MAX)')
                                          ,CHAR(096) + N'> Column not found')
                                ,N'')

                           + CHAR(096)
                           + N'Index Filtered on'
                           + STUFF(
-- Diagnostic - Index - has filter on lead key column
                                    IIF(ed.lead_key > 0,N', lead key',N'')

-- Diagnostic - Index - has filter on non-lead key column
                                  + IIF(ed.non_lead_key > 0
                                       ,N', ' + CAST(ed.non_lead_key AS NVARCHAR(20)) + N' non-lead Key(s)'
                                       ,N'')

-- Diagnostic - Index - has filter on included column
                                  + IIF(ed.non_key > 0
                                       ,N', ' + CAST(ed.non_key AS NVARCHAR(20)) + N' included column(s)'
                                       ,N'')
                                  ,1,1,N'') -- end of STUFF function
                           ,1,1,N'') -- end of STUFF function
  FROM (--
        SELECT database_id      = ed.database_id
              ,object_id        = ed.referencing_id
              ,index_id         = ed.referencing_minor_id
              ,lead_key         = SUM(IIF(ic.idx_column_display_sequence = 1,1,0))
              ,non_lead_key     = SUM(IIF(ic.idx_column_display_sequence > 1,1,0))
              ,non_key          = SUM(IIF(ic.is_included_column          = 1,1,0))
              ,non_index        = SUM(IIF(ic.column_id               IS NULL,1,0))
          FROM [##SQLXL_Index_sys_sql_expression_dependencies] AS ed
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_index_columns]               AS ic
            ON ed.database_id          = ic.database_id
           AND ed.referencing_id       = ic.object_id
           AND ed.referencing_minor_id = ic.index_id
           AND ed.referenced_minor_id  = ic.column_id
         WHERE ed.referencing_class    = 7
           AND ed.referenced_class     = 1
         GROUP BY
               ed.database_id
              ,ed.referencing_id
              ,ed.referencing_minor_id
       ) ed
  JOIN [##SQLXL_Index_sys_indexes] AS i
    ON ed.database_id           = i.database_id
   AND ed.object_id             = i.object_id
   AND ed.index_id              = i.index_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Filtered indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index -  Hi Usage Scans (BI80) Hi Operations Scans (BI81)
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
-- NOTE: No InMemory, or columnstore since all non-hash reads are scans
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
/*** LOCAL TESTING ***
DECLARE @collection_DTTM DATETIME = GETDATE()
--*/
SELECT i.rec_type,i.database_id,i.object_id,i.index_id,i.type,i.sub_type
      ,prescription = NULL
      --------------------------------------------------------------------------------------
      ,diagnostic = STUFF(
                    IIF(i.ius_scans_to_read_PCT > 5.0
                       , CHAR(096) + N'(BI80) Hi Usage Scans: '
                       + [dbo].[SQLXL_3SD](i.ius_user_scans_CNT,N'I')
                       + N' Index reads '    + [dbo].[SQLXL_3SD](i.ius_scans_to_read_PCT,N'N') + N'%'
                       + N' All scans '      + [dbo].[SQLXL_3SD](ius.pct                ,N'N') + N'%'
                       + N' Weighted scans ' + [dbo].[SQLXL_3SD](ius_weighted.pct       ,N'N') + N'%'
                       + N' Last scan '
                       + IIF(i.ius_last_user_scan_DTTM IS NOT NULL
                            ,CAST(DATEDIFF(DAY,i.ius_last_user_scan_DTTM,@collection_DTTM) AS NVARCHAR(20)) + N' days ago'
                            ,N' Not captured')
                       ,N'')

                  + IIF(i.ops_scans_to_read_PCT > 5.0
                       , CHAR(096) + N'(BI81) Hi Operations Scans: '
                       + [dbo].[SQLXL_3SD](i.ops_total_scan_CNT,N'I')
                       + N' Index Reads '    + [dbo].[SQLXL_3SD](i.ops_scans_to_read_PCT,N'N') + N'%'
                       + N' All Scans '      + [dbo].[SQLXL_3SD](ops.pct                ,N'N') + N'%'
                       + N' All Weighted scans ' + [dbo].[SQLXL_3SD](ops_weighted.pct   ,N'N') + N'%'
                       ,N'')
                       ,1,1,N'')
  FROM (--
        SELECT ius_user_read_CNT
              ,ops_total_read_CNT
          FROM [##SQLXL_Index_compilation]
         WHERE type = N'A'                                  -- instance level aggregate record
        ) AS a
 CROSS
  JOIN (--
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type  = N'I'  -- index level composite record
           AND type NOT IN (N'5' -- clustered columnstore
                           ,N'6' -- nonclustered columnstore index
                           ,N'M' -- missing indexes
                           )

       ) AS i

  LEFT OUTER
  JOIN (--
        SELECT rec_type,database_id,object_id,index_id,type,sub_type
              ,ius_user_scans_CNT
              ,pct          = 100.0
                            * ius_user_scans_CNT
                            / SUM(ius_user_scans_CNT)
                              OVER (ORDER BY ius_user_scans_CNT
                                     ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
                                   )
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type = N'I'
           AND type NOT IN (N'5' -- clustered columnstore
                           ,N'6' -- nonclustered columnstore index
                           ,N'M' -- missing indexes
                           )
           AND ius_user_scans_CNT > 0
       ) as ius
    ON i.database_id = ius.database_id
   AND i.object_id   = ius.object_id
   AND i.index_id    = ius.index_id
   AND i.type        = ius.type
   AND i.sub_type    = ius.sub_type

  LEFT OUTER
  JOIN (--
        SELECT rec_type,database_id,object_id,index_id,type,sub_type
              ,ops_total_scan_CNT
              ,pct          = 100.0
                            * ops_total_scan_CNT
                            / SUM(ops_total_scan_CNT)
                              OVER (ORDER BY ops_total_scan_CNT
                                     ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
                                   )
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type  = N'I'
           AND type NOT IN (N'5' -- clustered columnstore
                           ,N'6' -- nonclustered columnstore index
                           ,N'M' -- missing indexes
                           )
           AND ops_total_scan_CNT > 0
       ) as ops
    ON i.database_id = ops.database_id
   AND i.object_id   = ops.object_id
   AND i.index_id    = ops.index_id
   AND i.type        = ops.type
   AND i.sub_type    = ops.sub_type

  LEFT OUTER
  JOIN (--
        SELECT rec_type,database_id,object_id,index_id,type,sub_type
              ,ius_user_scans_CNT
              ,pct          = 100.0
                            * (ius_user_scans_CNT * reserved_page_PG_CNT)
                            / SUM(ius_user_scans_CNT * reserved_page_PG_CNT)
                              OVER (ORDER BY (ius_user_scans_CNT * reserved_page_PG_CNT)
                                     ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type  = N'I'
           AND type NOT IN (N'5' -- clustered columnstore
                           ,N'6' -- nonclustered columnstore index
                           ,N'M' -- missing indexes
                           )
           AND (ius_user_scans_CNT * reserved_page_PG_CNT) > 0
       ) as ius_weighted
    ON i.database_id = ius_weighted.database_id
   AND i.object_id   = ius_weighted.object_id
   AND i.index_id    = ius_weighted.index_id
   AND i.type        = ius_weighted.type
   AND i.sub_type    = ius_weighted.sub_type

  LEFT OUTER
  JOIN (--
        SELECT rec_type,database_id,object_id,index_id,type,sub_type
              ,ops_total_scan_CNT
              ,pct          = 100.0
                            * (ops_total_scan_CNT * reserved_page_PG_CNT)
                            / SUM(ops_total_scan_CNT * reserved_page_PG_CNT)
                              OVER (ORDER BY (ops_total_scan_CNT * reserved_page_PG_CNT)
                                     ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING
                                   )
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type  = N'I'
           AND type NOT IN (N'5' -- clustered columnstore
                           ,N'6' -- nonclustered columnstore index
                           ,N'M' -- missing indexes
                           )
           AND (ops_total_scan_CNT * reserved_page_PG_CNT) > 0
       ) as ops_weighted
    ON i.database_id = ops_weighted.database_id
   AND i.object_id   = ops_weighted.object_id
   AND i.index_id    = ops_weighted.index_id
   AND i.type        = ops_weighted.type
   AND i.sub_type    = ops_weighted.sub_type

 WHERE 1 = 1   -- simplifies adding additional clauses for testing
   AND (   i.ius_scans_to_read_PCT > 5.0
        OR i.ops_scans_to_read_PCT > 5.0
       )
   AND (   ius.pct          > 0.1
        OR ops.pct          > 0.1
        OR ius_weighted.pct > 0.1
        OR ops_weighted.pct > 0.1
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - (BI80) Hi scans'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Created/Modified < 90 days, last Read, last write - (BI66) (BI67)
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
-- **NOTE** must appear LAST in Blitz Index section since dates are displayed regardless of BI checks
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic = LTRIM(
-- Diagnostic - (BI67) - Object - Changed within last 90 days
-- Diagnostic - (BI66) - Object - Created within last 90 days
-- Diagnostic - Table - Days since Last Read
-- Diagnostic - Table - Days since Last Write
-- Diagnostic - Table - Not used since last usage data reset
-- Diagnostic - Foreign Key Constraint - no usage history for Foreign Key Constraints
-- Diagnostic - Table Valued Function - no usage history for SQL table valued functions
-- Diagnostic - View - no usage history for views
+ IIF(i.rec_type NOT IN (N'A' -- instance level aggregate record
                        ,N'D' -- database level aggregate record
                        ,N'I' -- index level composite record
                        )
        AND DATEDIFF(DAY,obj.create_date,@collection_DTTM) <= 90
     ,N' (BI66) Created ' + CAST(DATEDIFF(DAY,obj.create_date,@collection_DTTM) AS NVARCHAR(20)) + N' days ago'
     ,N'')
+ IIF(i.rec_type NOT IN (N'A' -- instance level aggregate record
                        ,N'D' -- database level aggregate record
                        ,N'I' -- index level composite record
                        )
        AND DATEDIFF(DAY,obj.create_date,obj.modify_date) > 0
        AND DATEDIFF(DAY,obj.modify_date,@collection_DTTM) <= 90
     ,N' (BI67) Modified ' + CAST(DATEDIFF(DAY,obj.modify_date,@collection_DTTM) AS NVARCHAR(20)) + N' days ago'
     ,N'')
+ CASE WHEN i.ius_last_read_days_ago  IS NULL
        AND i.ius_last_write_days_ago IS NULL
       THEN  N' Last Usage N/A'
           + CASE WHEN obj.is_memory_optimized = 1
                  THEN N' - In Memory'
                  ELSE N''
             END
-- Diagnostic - Index - Usage Last Read Days Ago
       ELSE  N' Last Read: '
           + IIF(i.ius_last_read_days_ago IS NOT NULL
                ,[dbo].[SQLXL_3SD](i.ius_last_read_days_ago,N'I') + N' days ago'
                ,N'NONE')

-- Diagnostic - Index - Usage Last Write days Ago. Note:  missing indexes do not capture write stats
           + N' Last Write: '
           + IIF(i.ius_last_write_days_ago IS NOT NULL
                ,[dbo].[SQLXL_3SD](i.ius_last_write_days_ago,N'I') + N' days ago'
                ,N'NONE')
  END  -- CASE WHEN i.ius_last_read_days_ago  IS NULL
)      -- end of LTRIM
/*** LOCAL TESTING ***
SELECT COUNT_BIG(1)
--*/
  FROM [##SQLXL_Index_compilation] AS i
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id
 WHERE i.rec_type NOT IN (N'A' -- instance level aggregate record
                         ,N'D' -- database level aggregate record
                         )
   AND i.type     NOT IN (N'F' -- foreign key constraint
                         )
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Last used, lock ratio'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
############################################################################################################################################
 *INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX INDEX*
 *Task* Diagnostics - Index
############################################################################################################################################
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- System named indexes
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
-- Diagnostic - Index - System named
SELECT rec_type    = N'I'
      ,database_id,object_id,index_id,type,sub_type
      ,prescription = NULL
      ,diagnostic   = IIF(is_system_named = 2,N'Likely ',N'') + N'System named Index'
  FROM [##SQLXL_Index_sys_indexes]
 WHERE is_system_named > 0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Diagnostic - Index - System named'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index All Types. HEAPS flagged later on
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(
+IIF(   i.is_not_trusted             = 1
     OR i.is_ignored_in_optimization = 1
    ,CHAR(096)
-- Diagnostic - Index - is NOT TRUSTED
    + IIF(i.is_not_trusted = 1,N' *Not trusted*',N'')
-- Diagnostic - Index - is IGNORED IN OPTIMIZATION
    + IIF(i.is_ignored_in_optimization = 1,N' *Ignored in optimization*',N'')
    ,N'')

-- Diagnostic - Index - Duplicate keys ignored
+IIF(i.ignore_dup_key = 1,CHAR(096) + N'Duplicate keys ignored, inserted rows can be discarded',N'')

-- Diagnostic - Index - Duplicate key warning suppressed on index Refresh
+IIF(i.suppress_dup_key_messages = 1,CHAR(096) + N'Duplicate key messages are suppressed on index Rebuild',N'')

-- Diagnostic - Index - High ratio of page locks to row locks
+IIF(    i.type NOT IN (N'5'  -- clustered columnstore
                       ,N'6'  -- nonclustered columnstore index
                       )
     AND i.page_lock_to_all_lock_PCT > 50.0
    ,CHAR(096) + N'HIGH PAGE locks ' + [dbo].[SQLXL_3SD](i.page_lock_to_all_lock_PCT,N'N') + N'% of all locks'
    ,N'')
------------------------------------------------------------
,1,1,N'') -- end of STUFF function
  FROM [##SQLXL_Index_compilation] AS i  -- only table source in query
) AS diag
 WHERE diag.diagnostic > N''
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Special types'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index - Columnstores rowgroup info
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Columnstore - vertipaq_optimization SKIPPED
-- Diagnostic - Index - Columnstore - has OPEN/DELETED rowgroups - REORGANIZE/REBUILD?
-- Diagnostic - Index - Columnstore - compression delay > 0
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'               -- index level composite record
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = IIF(i.compression_delay > 0
                         ,N'> Columnstore compression delay ' + CAST(i.compression_delay AS NVARCHAR(20)) + N' minutes' + CHAR(096)
                         ,N'')
                    + STUFF(s.diagnostic,1,1,N'') -- end of STUFF function
  FROM [##SQLXL_Index_sys_indexes] AS i
 OUTER
 APPLY (--
        SELECT -- double select to accomodate the "XML TYPE" clause below
       (SELECT  CHAR(096) + N'> '
              + CAST(COUNT_BIG(1) AS NVARCHAR(20)) + N' Rowgroup(s) ' + state_desc
              + IIF(trim_reason_desc IS NOT NULL,N' Trimmed ' + trim_reason_desc,N'')
              + IIF(transition_to_compressed_state_desc IS NOT NULL,N' Transition ' + transition_to_compressed_state_desc,N'')
              + IIF(SUM(IIF(has_vertipaq_optimization = 0,1,0)) > 0
                   ,N' Vertipaq OFF ' + CAST(SUM(IIF(has_vertipaq_optimization = 0,1,0)) AS NVARCHAR(20))
                   ,N'') -- rearranging the order of the rows in the rowgroup to achieve higher compression
              + N' Size ' + [dbo].[SQLXL_3SD](SUM(size_in_bytes),N'B')
              + IIF(SUM(deleted_rows) > 0,N' Deletes ' + [dbo].[SQLXL_3SD](SUM(deleted_rows),N'I'),N'')
              + IIF(SUM(total_rows) > 0,N' Rows ' + [dbo].[SQLXL_3SD](SUM(total_rows),N'I'),N'')
              + IIF(SUM(deleted_rows) > 0 OR state_desc = N'OPEN'
                   ,N' - REORGANIZE'
                   + IIF(CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 15 -- SQL 2019
                        ,N'/REBUILD (2019+ Online)'
                        ,N'') + N'?'
                   ,N'')
          FROM [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats] AS s
         WHERE i.database_id = s.database_id
           AND i.object_id   = s.object_id
           AND i.index_id    = s.index_id
         GROUP BY
               database_id,object_id,index_id
              ,state_desc
              ,trim_reason_desc
              ,transition_to_compressed_state_desc
        ORDER BY
              CASE state_desc
                   WHEN N'INVISIBLE'  THEN 0
                   WHEN N'OPEN'       THEN 1
                   WHEN N'CLOSED'     THEN 2
                   WHEN N'COMPRESSED' THEN 3
                   WHEN N'TOMBSTONE'  THEN 4
                   ELSE                    9
              END
             ,CASE trim_reason_desc
                   WHEN N'UNKNOWN_UPGRADED_FROM_PREVIOUS_VERSION' THEN  0
                   WHEN N'NO_TRIM'                                THEN  1
                   WHEN N'REORG'                                  THEN  2
                   WHEN N'DICTIONARY_SIZE'                        THEN  3
                   WHEN N'MEMORY_LIMITATION'                      THEN  4
                   WHEN N'STATS_MISMATCH'                         THEN  5
                   WHEN N'SPILLOVER'                              THEN  6
                   WHEN N'AUTO_MERGE'                             THEN  7
                   WHEN N'BULKLOAD'                               THEN  8
                   WHEN N'RESIDUAL_ROW_GROUP'                     THEN  9
                   ELSE                                                99
              END
             ,CASE transition_to_compressed_state_desc
                   WHEN N'REORG_FORCED'   THEN 1
                   WHEN N'INDEX_BUILD'    THEN 2
                   WHEN N'TUPLE_MOVER'    THEN 3
                   WHEN N'REORG_NORMAL'   THEN 4
                   WHEN N'BULKLOAD'       THEN 5
                   WHEN N'MERGE'          THEN 6
                   WHEN N'NOT_APPLICABLE' THEN 7
                   ELSE                        9
              END
          FOR XML PATH(N''), TYPE                                                                   -- column store states
       ).value('.',N'NVARCHAR(MAX)')
       ) AS s(diagnostic)
 WHERE i.type IN (N'5' -- clustered columnstore
                 ,N'6' -- nonclustered columnstore index
                 )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Columnstore reorg'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Properties - Spatial
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'
      ,database_id  = spt.database_id
      ,object_id    = spt.object_id
      ,index_id     = spt.index_id
      ,type         = N'4'                   -- spatial index
      ,sub_type     = spt.spatial_index_type -- same as [sub_type] in compilation table
      ,prescription = NULL
      ,diagnostic  = N'Spatial Properties:'
                   + IIF(   spt.bounding_box_xmin IS NOT NULL
                         OR spt.bounding_box_ymin IS NOT NULL
                         OR spt.bounding_box_xmax IS NOT NULL
                         OR spt.bounding_box_ymax IS NOT NULL
                        ,CHAR(096)
                        + N'> '
-- Diagnostic - Index - Spatial index - tesellation scheme - bounding box x & y min & max
                        + STUFF( IIF(spt.bounding_box_xmin IS NOT NULL,N',box_xmin:' + CAST(spt.bounding_box_xmin AS NVARCHAR(20)),N'')
                               + IIF(spt.bounding_box_ymin IS NOT NULL,N',box_ymin:' + CAST(spt.bounding_box_ymin AS NVARCHAR(20)),N'')
                               + IIF(spt.bounding_box_xmax IS NOT NULL,N',box_xmax:' + CAST(spt.bounding_box_xmax AS NVARCHAR(20)),N'')
                               + IIF(spt.bounding_box_ymax IS NOT NULL,N',box_ymax:' + CAST(spt.bounding_box_ymax AS NVARCHAR(20)),N'')
                               ,1,1,N'') -- end of STUFF function
                        ,N'')
-- Diagnostic - Index - Spatial index - tesellation scheme - level grid 1 - 4 description
                   + CHAR(096)
                   + N'> Grid1:' + COALESCE(spt.level_1_grid_desc,N'AUTO')
                   + N' Grid2:'  + COALESCE(spt.level_2_grid_desc,N'AUTO')
                   + N' Grid3:'  + COALESCE(spt.level_3_grid_desc,N'AUTO')
                   + N' Grid4:'  + COALESCE(spt.level_4_grid_desc,N'AUTO')
-- Diagnostic - Index - Spatial index - tesellation scheme - cells per object
                   + N' Cells per object: ' + CAST(spt.cells_per_object AS NVARCHAR(20))
  FROM [##SQLXL_Index_sys_spatial_indexes] AS spt;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Properties - fulltext index
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
-- Diagnostic - Index - Full Text - Change tracking & Crawl type
-- Diagnostic - Index - Full Text - Crawl status / laast completed date time
      ,diagnostic   = N'Full Text Change Tracking ' + QUOTENAME(ftx.change_tracking_state_desc)
                    + N' Crawl Type '     + QUOTENAME(ftx.crawl_type_desc)
                    + IIF(ftx.has_crawl_completed = 0
                         ,N' In Progress ' + [dbo].[SQLXL_DTTM_HMSM](@collection_DTTM - ftx.crawl_start_date)
                         ,N' Completed '   + [dbo].[SQLXL_DTTM_HMSM](@collection_DTTM - ftx.crawl_end_date) + N' ago')
                    + CHAR(096)
                    + N'> Catalog ID ' + QUOTENAME(ftc.fulltext_catalog_ID)
                    + N' name '      + QUOTENAME(ftc.name) + IIF(ftc.is_default = 1,N' (DEFAULT)',N'')
-- Diagnostic - Index - Full Text - Semantic Search status & column count
-- Diagnostic - Index - Full Text - ID of corresponding unique rowstore index
                    + CHAR(096)
                    + N'> Semantic Search Columns -'
                    + N' ON '  + [dbo].[SQLXL_3SD](ic.semantics_ON ,N'I')
                    + N' OFF ' + [dbo].[SQLXL_3SD](ic.semantics_OFF,N'I')
                    + CHAR(096)
                    + N'> Uses Unique Index '   + QUOTENAME(ftx.unique_index_id)
-- Diagnostic - Index - Full Text - Stoplist ID
                    + N' Stoplist '           + QUOTENAME(IIF(ftx.stoplist_ID = 0,N'DEFAULT',CAST(ftx.stoplist_ID AS NVARCHAR(20))))
-- Diagnostic - Index - Full Text - Property List ID
                    + N' Property List '      + QUOTENAME(IIF(ftx.property_list_id IS NULL
                                                             ,N'NONE'
                                                             ,CAST(ftx.property_list_id AS NVARCHAR(20))))
-- Diagnostic - Index - Full Text - Accent Sensitivity Status
                    + N' Accent Sensitivity ' + QUOTENAME(IIF(ftc.is_accent_sensitivity_on = 1,N'ON',N'OFF'))
  FROM [##SQLXL_Index_compilation]          AS i

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_fulltext_indexes] AS ftx
    ON i.database_id = ftx.database_id
   AND i.object_id   = ftx.object_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_fulltext_catalogs] AS ftc
    ON ftx.database_id         = ftc.database_id
   AND ftx.fulltext_catalog_id = ftc.fulltext_catalog_id

  LEFT OUTER
  JOIN (--
        SELECT database_id,object_id,index_id,type,sub_type
              ,semantics_ON  = SUM(IIF(statistical_semantics = 1,1,0))
              ,semantics_OFF = SUM(IIF(statistical_semantics = 0,1,0))
          FROM [##SQLXL_Index_sys_index_columns]
         WHERE type = N'T'                        -- full-text index of a tabular object
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) AS ic
    ON i.database_id      = ic.database_id
   AND i.object_id        = ic.object_id
   AND i.index_id         = ic.index_id
   AND i.type             = ic.type

 WHERE i.type     = N'T'  -- full-text index of a tabular object
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - fulltext'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index - properties
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
-- NOTE: row locks not supported on columnstore indexes
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(
-- Diagnostic - Index - row locks not allowed
-- Diagnostic - Index - page locks not allowed
+CASE WHEN i.type NOT IN (N'5'               -- clustered columnstore
                         ,N'6'               -- nonclustered columnstore index
                         )
       AND obj.is_memory_optimized = 0       -- memory optimized uses Row Versions
       AND i.obj_type_hdr NOT IN (N'HST'     -- Not a History/archive table
                                 ,N'INT'     -- Not a system/internal table
                                 )
       AND (   i.allow_row_locks = 0        -- locks not allowed. value for non-indexes is NULL
            OR i.allow_page_locks = 0        -- locks not allowed. value for non-indexes is NULL
           )
      THEN  CHAR(096) + N'Locks not allowed - '
          + STUFF( IIF(i.allow_page_locks = 0,N', Page',N'')
                 + IIF(i.allow_row_locks  = 0,N', Row' ,N'')
                 ,1,1,N'') -- end of STUFF function
      ELSE N''
 END  -- CASE WHEN (   (    i.allow_row_locks = 0

-- Diagnostic - Index - Created by Auto Tuning
+IIF(i.auto_created = 1,N'Index created by auto tuning',N'')

-- Diagnostic - (BI65) - Index - index partition not match table partition
-- Diagnostic - Index - table partitioned, index isn't
+IIF(COALESCE(data_space_idx.partition_function_id,0) <> COALESCE(data_space_obj.partition_function_id,0)
    ,IIF(data_space_idx.partition_function_id IS NULL
        , CHAR(096) + N'(BI65) Index not partitioned, table is - '
                    + QUOTENAME(COALESCE(data_space_obj.partition_function_name,N'NOT PARTITIONED'))
        , CHAR(096) + N'(BI65) Index Partition function does not match Table'
        + CHAR(096) + N'> IDX ' + QUOTENAME(COALESCE(data_space_idx.partition_function_name,N'NOT PARTITIONED'))
                    + N' TBL ' + QUOTENAME(COALESCE(data_space_obj.partition_function_name,N'NOT PARTITIONED'))
        )
    ,N'')

------------------------------------------------------------
,1,1,N'') -- end of STUFF function
  FROM (--  All non-internal "index" records
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type = N'I'
           AND type NOT IN (N'0' -- rowstore heap
                           ,N'F' -- Foreign key constraint
                           ,N'M' -- missing nonclustered rowstore index
                           ,N'V' -- View
                           )
       ) AS i
  JOIN (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'P') AS p  -- parent level aggregate record
    ON i.database_id     = p.database_id
   AND i.object_id       = p.object_id
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id     = obj.database_id
   AND i.object_id       = obj.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_data_spaces] AS data_space_idx                       -- data space at index level
    ON i.database_id     = data_space_idx.database_id
   AND i.data_space_id   = data_space_idx.data_space_id
  LEFT OUTER
  JOIN [##SQLXL_Index_data_spaces] AS data_space_obj                       -- data space at object level
    ON obj.database_id   = data_space_obj.database_id
   AND obj.data_space_id = data_space_obj.data_space_id
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Priamry Key Constraint NOT ENFORCED
-- Diagnostic - Unique Constraint NOT ENFORCED
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'
      ,database_id  = idx.database_id
      ,object_id    = idx.object_id
      ,index_id     = idx.index_id
      ,type         = idx.type
      ,sub_type     = idx.sub_type
      ,prescription = NULL
      ,diagnostic   = kc.type_desc + N' NOT ENFORCED: '+ QUOTENAME(kc.name)
  FROM [##SQLXL_Index_sys_objects] AS kc
  JOIN [##SQLXL_Index_sys_indexes] AS idx
    ON idx.database_id = kc.database_id
   AND idx.object_id   = kc.object_id
   AND idx.index_id    = kc.key_unique_index_id
   AND 0               = kc.is_enforced
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Constraints NOT ENFORCED'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index fill factor, splits, & merges.
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
-- NOTE: Filtered indexes - included in Information 8 below
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(
-- Diagnostic - Index - Fill_Factor 100% and splits or merges > 1.0% of writes
+ IIF(    i.fill_factor IN (0,100)
      AND (   (i.page_splits_to_write_PCT > 1.0 OR i.page_merge_to_write_PCT  > 1   )
           OR (i.ops_total_page_split_CNT > 0 AND i.page_splits_to_write_PCT IS NULL)
           OR (i.page_merge_to_write_PCT  > 0 AND i.ops_total_page_merge_CNT IS NULL)
          )
     , CHAR(096) + N'Fill Factor '
     + IIF(i.type = N'T'                                       -- full-text index of a tabular object
          ,N'FTX N/A%'
          ,[dbo].[SQLXL_3SD](i.fill_factor,N'I') + N'%')

-- Diagnostic - Index - Padding - Fill_Factor 100% and PADDING not enabled
     + IIF(i.fill_factor NOT IN (0,100) AND i.is_padded = 0
          ,N', Pad Disabled'
          ,N'') -- Fill factor < 100, PADDING not enabled

-- Diagnostic - Index - Fill_Factor 100% Page Splits & Percent writes > 1.0
     + IIF(    i.ops_total_page_split_CNT > 0
          , N' Splits ' + [dbo].[SQLXL_3SD](i.ops_total_page_split_CNT,N'I')
          + N' (' + IIF(i.page_splits_to_write_PCT IS NOT NULL
                       ,[dbo].[SQLXL_3SD](i.page_splits_to_write_PCT,N'N') + N'% INS+UPD'
                       ,N'NO WRITES RECORDED') + N')'
          , N'')

-- Diagnostic - Index - Fill_Factor 100% Page Merges & Percent writes > 1.0
     + IIF(i.ops_total_page_merge_CNT > 0
          , N' Merges ' + [dbo].[SQLXL_3SD](i.ops_total_page_merge_CNT,N'I')
          + N' (' + IIF(i.page_merge_to_write_PCT IS NOT NULL
                       ,[dbo].[SQLXL_3SD](i.page_merge_to_write_PCT,N'N') + N'% UPD+DEL'
                       ,N'NO WRITES RECORDED') + N')'
          , N'')
     ,NULL)
----------------------------------------
,1,1,N'') -- end of STUFF function
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'I') AS i -- index level composite record
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Fill Factor, Splits, Merges'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Indexed column (key & include) constraints & defaults
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                 -- index level composite record
      ,database_id  = ic.database_id
      ,object_id    = ic.object_id
      ,index_id     = ic.index_id
      ,type         = ic.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = CASE con_obj.type
                           WHEN N'C' THEN N'Check'          -- check constraint
                           WHEN N'D' THEN N'Default'        -- Default (constraint or stand-alone)
                           ELSE con_obj.type_desc
                      END
                    + N' column: ' + QUOTENAME(c.name)
                    + IIF(   con_obj.is_published        = 1
                          OR con_obj.is_schema_published = 1
                          OR con_obj.is_disabled         = 1
                          OR con_obj.is_not_trusted      = 1
                         , CHAR(096) + N'>'
                         + STUFF(-- trim off unneeded leading characters
-- Diagnostic - Index Column Constraint - is PUBLISHED
                                  IIF(con_obj.is_published        = 1,N', Published',N'')
-- Diagnostic - Index Column Constraint - is SCHEMA PUBLISHED
                                + IIF(con_obj.is_schema_published = 1,N', Schema Published',N'')
-- Diagnostic - Index Column Constraint - is DISABLED
                                + IIF(con_obj.is_disabled         = 1,N', Disabled',N'')
-- Diagnostic - Index Column Constraint - is NOT TRUSTED
                                + IIF(con_obj.is_not_trusted      = 1,N', Not Trusted',N'')
                                ,1,1,N'') -- end of STUFF function
                         ,N'')

-- Diagnostic - Index Column Constraint - table is Replicated, column has REPLICATION enabled
                    + IIF(    tbl_obj.is_replicated          = 1
                          AND con_obj.is_not_for_replication = 0
                         ,CHAR(096) + N'> Replicated - consider "NOT FOR REPLICATION"'
                         ,N'')

-- Diagnostic - Index Column constraint - uses non-database collation
                    + IIF(con_obj.uses_database_collation = 0,CHAR(096) + N'> uses non-Database Collation',N'')

-- Diagnostic - (BI94) - Index Column constraint - references a procedure - can force serialization
                    + IIF(con_obj.uses_sql_proc           = 1,CHAR(096) + N'> (BI94) references procedure - can force serialization' ,N'')

-- Diagnostic - (BI94) - Index Column constraint - references a function - can force serialization
                    + IIF(con_obj.uses_sql_ftn            = 1,CHAR(096) + N'> (BI94) references function - can force serialization'  ,N'')

-- Diagnostic - (BI94) - Index Column constraint - references a SQL method - can force serialization
                    + IIF(con_obj.uses_sql_mthd           = 1,CHAR(096) + N'> (BI94) references SQL method - can force serialization',N'')

/*** LOCAL TESTING ***
SELECT con_obj.database_id,con_obj.object_id,con_obj.parent_column_id,ic.object_id,c.object_id,c.column_id
--*/
  FROM [##SQLXL_Index_sys_objects]       AS con_obj         -- get constraints
  JOIN [##SQLXL_Index_sys_index_columns] AS ic              -- only get constraints on index columns
    ON con_obj.database_id      = ic.database_id
   AND con_obj.parent_object_id = ic.object_id                                                      -- for System, History, Constraints
   AND con_obj.parent_column_id = ic.column_id              -- map constraint to column in table
  JOIN [##SQLXL_Index_sys_columns]       AS c               -- get column details
    ON con_obj.database_id      = c.database_id
   AND con_obj.parent_object_id = c.object_id                                                       -- for System, History, Constraints
   AND con_obj.parent_column_id = c.column_id
  JOIN [##SQLXL_Index_sys_objects]       AS tbl_obj         -- check if table is replicated
    ON con_obj.database_id      = tbl_obj.database_id
   AND con_obj.parent_object_id = tbl_obj.object_id                                                 -- for System, History, Constraints
 WHERE con_obj.parent_column_id > 0                         -- column constraints only
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Constraints'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - (BI99) - Index - computed column references a procedure - can force serialization
-- Diagnostic - (BI99) - Index - computed column references a function - can force serialization
-- Diagnostic - (BI99) - Index - computed column references a SQL method - can force serialization
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                     -- index level composite record
      ,database_id  = ic.database_id
      ,object_id    = ic.object_id
      ,index_id     = ic.index_id
      ,type         = ic.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = N'Computed Column '
                    + CHAR(096) + N'> ' + QUOTENAME(c.name)
                    + IIF(c.uses_sql_proc = 1,CHAR(096) + N'> references a procedure - can force serialization (BI99)' ,N'')
                    + IIF(c.uses_sql_ftn  = 1,CHAR(096) + N'> references a function - can force serialization (BI99)' ,N'')
                    + IIF(c.uses_sql_mthd = 1,CHAR(096) + N'> references a SQL method - can force serialization (BI99)',N'')
  FROM [##SQLXL_Index_sys_index_columns] AS ic
  JOIN [##SQLXL_Index_sys_columns]       AS c
    ON ic.database_id = c.database_id
   AND ic.object_id   = c.object_id
   AND ic.column_id   = c.column_id
 WHERE c.uses_sql_proc    = 1
    OR c.uses_sql_ftn     = 1
    OR c.uses_sql_mthd    = 1
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - Computed columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Performance - Additional key density VECTOR
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type
      ,database_id,object_id,index_id,type,sub_type
-- Diagnostic - Index - adding another key element doesn't make index much more selective
      ,prescription = NULL
      ,diagnostic   = low_selectivity_additional_keys
  FROM [##SQLXL_Index_compilation]
 WHERE low_selectivity_additional_keys IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - key density vector'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Performance - Stats Properties
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic   = N'Stats: '
-- Diagnostic - Index Stats - No statistics found on index / index type
-- Diagnostic - Index Stats - No Statistics - is InMemory table
-- Diagnostic - Index Stats - No Statistics - XML index
-- Diagnostic - Index Stats - No Statistics - Spatial index
-- Diagnostic - Index Stats - No Statistics - clustered columnstore
-- Diagnostic - Index Stats - No Statistics - nonclustered columnstore index

+ IIF(i.stathdr_updated IS NULL
     , N'None found'
     + IIF(obj.is_memory_optimized = 1,N' - In Memory',N'')
     + N' - Type '
     + QUOTENAME(i.type_desc + CASE i.type_desc
                                    WHEN N'0' THEN N' ROWSTORE' -- rowstore heap
                                    WHEN N'1' THEN N' ROWSTORE' -- clustered rowstore index
                                    WHEN N'2' THEN N' ROWSTORE' -- nonclustered rowstore index
                                    ELSE N''
                               END)
-- Diagnostic - (BI90) - Index Stats - Age of statistics
     ,IIF(    i.stathdr_statistics_age_days     > 7
          AND (   i.stats_prop_modification_CNT > 0
               OR i.stathdr_row_CNT <> obj_i.row_CNT
              )
         ,N'(BI90)'
         ,N'')

     + [dbo].[SQLXL_3SD](i.stathdr_statistics_age_days,N'I') + N' days old'
     + IIF(i.stathdr_row_CNT > 0
-- Diagnostic - (BI91) - Index Stats - Percent of table sampled
          , IIF((100.0 * i.stathdr_rows_sampled_CNT / i.stathdr_row_CNT) < 10.0
               ,N'(BI91) Low Sampling Rate'
               ,N'')
          + N' on ' + [dbo].[SQLXL_3SD](1.0 * i.stathdr_rows_sampled_CNT / i.stathdr_row_CNT,N'%')
          ,N' no ')

-- Diagnostic - Index Stats - Default statistics sampling rate
-- Diagnostic - Index Stats - Persisted statistics sampling rate >= 2016 SP1 CU4 and SQL Server 2017 CU1
     + N' rows, Persisted sample '
     + IIF(i.stats_has_persisted_sample = 0
          ,N'DEFAULT' + IIF(   CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)      >= 14   -- SQL 2017+
                            -----------------------------------------------------------------------------
                            OR (    CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)  = 13   -- SQL 2016 SP1
                                AND CAST(SERVERPROPERTY(N'ProductBuild')        AS INT) >= 4446 -- SQL 2016 SP1 CU4+
                               )
                           ,N' - Persisting Allowed 2016SP1+'
                           ,N'')
          ,CAST(i.stathdr_Persisted_Sample_Percent AS NVARCHAR(20)) + N'%'
          )

     -----------------------------------------------------------------------------------------------
     + IIF(i.type = N'1'                                    -- clustered rowstore index
          ,IIF(i.is_unique = 0
              , CHAR(096) + N'>'
-- Diagnostic - Index - Clustered Rowstore - index not very selective
              + IIF(1.0 * ssdv.all_density * i.stathdr_row_CNT >  1.10
                   ,N' Index not selective ' + QUOTENAME([dbo].[SQLXL_3SD](1.0 * ssdv.all_density * i.stathdr_row_CNT,N'N')) + N' rows/key'
-- Diagnostic - Index - Clustered Rowstore - index candidate for Uniqueness
                   ,N' UNIQUE candidate ' + QUOTENAME([dbo].[SQLXL_3SD](1.0 * ssdv.all_density * i.stathdr_row_CNT,N'N')) + N' rows/key'
                   )
-- Diagnostic - Index - Clustered Rowstore - index is unique but statistics are not - out of date?
              ,IIF(1.0 * ssdv.all_density * i.stathdr_row_CNT > 1.01
                  , CHAR(096) + N'>'
                  + N' Unique index, stats show '+ [dbo].[SQLXL_3SD](1.0 * ssdv.all_density * i.stathdr_row_CNT,N'N') + N' records per key(s)'
                  ,N'')
              )
          ,N'')

     -----------------------------------------------------------------------------------------------
-- Diagnostic - Index Stats - Index Histogram Buckets count
     + CHAR(096)
     + N'> Histogram steps ' -- extra space added to make 2nd column in cell align
     + IIF(i.stathdr_steps IS NULL,N'N/A',[dbo].[SQLXL_3SD](i.stathdr_steps,N'I'))
     -----------------------------------------------------------------------------------------------
-- Diagnostic - Index Stats - Index Parameter Sniffing Ratio > 1
     + IIF(i.stathist_param_sniff IS NOT NULL
          ,N', Parameter sniffing ' + [dbo].[SQLXL_3SD](i.stathist_param_sniff,N'N') + N'x'
          ,N'')
     + CASE WHEN i.lead_element_is_Identity = 1
            THEN N' - IDENTITY column'
            WHEN i.lead_element_is_Sequence = 1
            THEN N' - SEQUENCE column'
            WHEN i.lead_element_is_newsequentialid = 1
            THEN N' - SEQUID column'
            WHEN i.lead_element_is_newid = 1
            THEN N' - NEWUID column'
            ELSE N''
       END
     -------------------------------------------------------
     -- Diagnostic - Index Stats - Index first element Nullable & NULL row count
     + IIF(i.lead_element_is_Nullable = 1 OR i.stathist_null_rows > 0
          , N', Null Rows '
          + [dbo].[SQLXL_3SD](i.stathist_null_rows,N'I')
          + N' (' + IIF(i.stathdr_row_CNT > 0
                       ,[dbo].[SQLXL_3SD](1.0 * i.stathist_null_rows / i.stathdr_row_CNT,N'%')
                       ,IIF(i.stathist_null_rows = 0,N'0.00%',N'N/A')
                       )
          + N')'
          ,N', Not nullable')

     -----------------------------------------------------------------------------------------------
-- Diagnostic - Index Stats - statistics rowcount delta from index record count
     + CHAR(096) + N'>'
     + IIF(i.stats_no_recompute = 1
-- Diagnostic - (BI92) - Index Stats - Stats NoRecompute enabled
          ,N' (BI92) NoRecompute [ENABLED]'
-- Diagnostic - Index Stats - consider enabling Stats NoRecompute
          ,IIF(100.0 * i.stats_prop_modification_CNT / i.stathdr_row_CNT > 10.0
              ,N'Consider enabling NoRecompute'
              ,N''
              )
          )
     + N' Row Count Delta '
     + CASE WHEN i.row_CNT = i.stathdr_row_CNT
            THEN N'[none]'
            WHEN i.row_CNT         > 0
             AND i.stathdr_row_CNT > 0
            THEN  [dbo].[SQLXL_3SD](1.0 * ABS(obj_i.row_CNT - i.stathdr_row_CNT) / i.stathdr_row_CNT,N'%')
                + N' ('
                + [dbo].[SQLXL_3SD](i.row_CNT,N'I') + N'/' + [dbo].[SQLXL_3SD](i.stathdr_row_CNT,N'I')
                + N')'
            ELSE STUFF( IIF(obj_i.row_CNT = 0        ,N' [table empty]',N'')
                      + IIF(i.stathdr_row_CNT = 0,N' [stats empty]',N'')
                      ,1,1,N'') -- end of STUFF function
       END
-- Diagnostic - Index Stats - stats modifications
     + N' Modified Pct '
     + IIF(i.stats_prop_modification_CNT = 0
          ,N'[none]'
          ,IIF(i.stathdr_row_CNT > 0
              , [dbo].[SQLXL_3SD](COALESCE(100.0 * i.stats_prop_modification_CNT / i.stathdr_row_CNT,0),N'N') + N'%'
              + N' ('
              + [dbo].[SQLXL_3SD](COALESCE(i.stats_prop_modification_CNT,0),N'I')
              + N'/'
              + [dbo].[SQLXL_3SD](COALESCE(i.stathdr_row_CNT,0),N'I')
              + N')'
              ,N''
              )
          )
     ) -- IIF(i.stathdr_updated IS NULL

+ IIF(   i.stats_auto_created      = 1
      OR i.stats_has_filter        = 1
      OR i.stats_is_temporary      = 1
      OR i.stats_is_incremental    = 1
      OR i.stats_generation_method > 0
      OR i.lead_element_data_type LIKE N'%CHAR%'
      OR i.lead_element_data_type LIKE N'%TEXT%'
      -- NOTE: stats_no_recompute handled above
     , CHAR(096)
     + N'>'
     + STUFF(
-- Diagnostic - Index Stats - Auto Created
              IIF(i.stats_auto_created = 1,N', Auto created',N'')
-- Diagnostic - Index Stats - Has filter
            + IIF(i.stats_has_filter   = 1
                 , N', Filtered - '
                 + IIF(i.stathdr_unfiltered_rows > 0
                      ,[dbo].[SQLXL_3SD](1.0 * i.stathdr_row_CNT / i.stathdr_unfiltered_rows,N'%') + N' rows'
                      ,N'no stats rows')
                 ,N'')
-- Diagnostic - Index Stats - temporary - on READ ONLY secondary
            + IIF(i.stats_is_temporary   = 1,N', temporary stats - on READ ONLY secondary',N'')
-- Diagnostic - Index Stats - Incremental statistics update enabled
-- Diagnostic - Index Stats - Partitioned Index & Incremental stats NOT ENABLED
            + IIF(i.stats_is_incremental = 1
                 ,N', Incremental Update [ENABLED]'
                 ,IIF(    data_space_idx.partition_function_id > 0
                      AND (        CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 14   -- 2017+
                           OR (    CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)  = 13   -- 2016 SP1 13.0.4001.0
                               AND CAST(SERVERPROPERTY(N'ProductBuild')        AS INT) >= 4001 -- 2016 SP1 13.0.4001.0
                              )
                           OR (    CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)  = 12   -- 2014 SP2 12.0.5000.0
                               AND CAST(SERVERPROPERTY(N'ProductBuild')        AS INT) >= 5000 -- 2014 SP2 12.0.5000.0
                              )
                          )
                     ,N', Partitioned & Incremental update [NOT ENABLED]'
                     ,N'')
                 )
-- Diagnostic - Index Stats - Generated by other than sort-based method
            + IIF(i.stats_generation_method > 0
                 ,N', generated by ' + i.stats_generation_method_desc
                 ,N'')
-- Diagnostic - Index Stats - Lead key STRING, STRING INDEX statistics not created
            + IIF(   i.lead_element_data_type LIKE N'%CHAR%'
                  OR i.lead_element_data_type LIKE N'%TEXT%'
                 ,IIF(i.stathdr_string_index = N'YES'
                     ,N', String summary statistics created'
                     ,N', NO string summary statistics')
                 ,N'')
            ,1,1,N'') -- end of STUFF function
     ,N'')

  FROM [##SQLXL_Index_compilation] AS i

  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id

  JOIN [##SQLXL_Index_compilation] AS obj_i
    ON obj_i.rec_type IN (N'H'                                  -- history/archive table
                         ,N'P'                                  -- parent level aggregate record
                         ,N'S'                                  -- system/internal table aggregate record
                         )
   AND i.database_id = obj_i.database_id
   AND i.object_id   = obj_i.object_id
   AND i.object_id   = obj_i.index_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_showstatistics_densityvector] AS ssdv -- Get uniqueness from the last indexed key column
    ON i.database_id     = ssdv.database_id
   AND i.object_id       = ssdv.object_id
   AND i.index_id        = ssdv.index_id
   AND i.type            = ssdv.type
   AND i.sub_type        = ssdv.sub_type
   AND i.key_ordinal_CNT = ssdv.row_ID                          -- skip the added clustering index keys in getting uniqueness

  LEFT OUTER
  JOIN [##SQLXL_Index_data_spaces] AS data_space_idx        -- data space at index level
    ON i.database_id   = data_space_idx.database_id
   AND i.data_space_id = data_space_idx.data_space_id

 WHERE i.rec_type         = N'I'                            -- index level composite record
   AND i.type        NOT IN (N'F'
                            ,N'M'                           -- missing nonclustered rowstore index
                            )
   AND NOT i.obj_type_hdr = N'TVF'                          -- SQL table-valued-function SQL 2012+

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - statistics - properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - no statistics found for index Keys, Missing Index keys, foreign key columns
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                  -- index level composite record
      ,database_id  = ic.database_id
      ,object_id    = ic.object_id
      ,index_id     = ic.index_id
      ,type         = ic.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostics  = N'No column stats for ' + QUOTENAME(c.name)
  FROM (-- Index & Missing Index key columns
        SELECT ic.database_id
              ,object_id = IIF(ic.type = N'F'               -- foreign key constraint
                              ,ic.index_id
                              ,ic.object_id)
              ,ic.index_id
              ,ic.type
              ,ic.column_id
              ,ic.idx_column_display_sequence -- note: actual order as captured by SSMS "Index Properties"
          FROM [##SQLXL_Index_sys_index_columns] AS ic
         WHERE ic.type IN (N'1' -- clustered rowstore index
                          ,N'2' -- nonclustered rowstore index
                          ,N'F' -- foreign key constraint
                          ,N'M' -- missing nonclustered rowstore index
                          )
           AND ic.is_included_column = 0
       ) AS ic
  JOIN [##SQLXL_Index_sys_columns] AS c
    ON ic.database_id = c.database_id
   AND ic.object_id   = c.object_id                         -- want parent table
   AND ic.column_id   = c.column_id
  JOIN [##SQLXL_Index_compilation] AS cp
    ON ic.database_id = cp.database_id
   AND ic.object_id   = cp.object_id
   AND ic.index_id    = cp.index_id
   AND ic.type        = cp.type
   AND N'TBL'         = cp.obj_type_hdr
 WHERE 1 = 1   -- simplifies adding additional clauses for testing
   AND c.Uniqueness IS NULL
 ORDER BY
       ic.idx_column_display_sequence -- order results by column location in the index or foreign key constraint
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - no statistics found for Keys & Missing Index columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Information. Skipping is_primary_key,is_unique_constraint since covered later
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(

-- Diagnostic - Index - Covers Foreign Key(s)
 IIF(i.covers_fkc_IDs IS NOT NULL,CHAR(096) + N'Covers Foreign Key(s) ' + i.covers_fkc_IDs,N'')

-- Diagnostic - Index - Used by Change Data Capture
+IIF(i.name = obj.cdc_index_name,CHAR(096) + N'Used by Change Data Capture (CDC) on this table',N'')

-- Diagnostic - Index - Created by Database Tuning Advisor (DTA)
+IIF(CHARINDEX(N'_DTA_',i.name) > 0,CHAR(096) + N'Created through Database Tuning Advisor (DTA)',N'')

-----------------------------------------------------
-- Diagnostic - Index - Candidate Clustering key for HEAP
+IIF(    i.type                  = N'0' -- rowstore heap
     AND obj.is_memory_optimized = 0
     AND c.column_descriptors IS NOT NULL
    ,CHAR(096) + N'Candidate Clustering key' + CHAR(096) + N'> ' + c.column_descriptors
    ,N'')

-----------------------------------------------------
,1,1,N'') -- end of STUFF function
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'I') AS i -- index level composite record
  JOIN [##SQLXL_Index_sys_objects]                   AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_showstatistics_statheader] AS sssh
    ON i.database_id = sssh.database_id
   AND i.object_id   = sssh.object_id
   AND i.index_id    = sssh.index_id
   AND i.type        = sssh.type
   AND i.sub_type    = sssh.sub_type
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_columns]                   AS c
    ON i.database_id = c.database_id
   AND i.object_id   = c.object_id
   AND COALESCE(i.tbl_cx_uniq_ordered_column_id
               ,i.tbl_possible_uniq_column_id  ) = c.column_id
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - additional properties 2'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;


IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - index synergy count by type'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - High (> 25X) Ratio histogram bucket count Hi to low - candidate for parameter sniffing
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                    -- index level composite record
      ,database_id  = ic.database_id
      ,object_id    = ic.object_id
      ,index_id     = ic.index_id
      ,type         = ic.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = N'Parameter sniffing candidate - Range '
                    + [dbo].[SQLXL_3SD](sshs.param_sniff,N'N')
                    + N'x for Key '
                    + CAST(ic.idx_column_display_sequence AS NVARCHAR(20))
  FROM [##SQLXL_Index_sys_index_columns]                    AS ic
  JOIN [##SQLXL_Index_sys_showstatistics_histogram_summary] AS sshs
    ON ic.database_id = sshs.database_id
   AND ic.object_id   = sshs.object_id
   AND ic.index_id    = sshs.index_id
   AND ic.type        = sshs.type
   AND ic.sub_type    = sshs.sub_type
 WHERE ic.idx_column_display_sequence = 1
   AND sshs.param_sniff        > 25
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - parameter sniffing'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Possible UNIQUEIDENTIFIER not stored as UID data type - name or %char data length (16,29,22,32,36,38,68)
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
-- <FUTURE> evaluate if "AND sc.name NOT LIKE N'%_IDENTIFIER'" needed
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'P'                                    -- parent level aggregate record
      ,database_id  = sc.database_id
      ,object_id    = sc.object_id
      ,index_id     = sc.object_id
      ,type         = obj.type
      ,sub_type     = 0
-- Diagnostic - Table - has what looks like a GUID stored as something else
      ,prescription = NULL
      ,diagnostic   = N'Column ' + QUOTENAME(sc.name)
                    + CHAR(096)
                    + N'> Possible UNIQUEID, type is ' + UPPER(sc.system_type_name)
                    + N'(' + IIF(sc.max_length = -1,N'MAX',CAST(sc.max_length AS NVARCHAR(4))) + N')'
  FROM [##SQLXL_Index_sys_columns] AS sc
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON sc.database_id = obj.database_id
   AND sc.object_id   = obj.object_id
 WHERE sc.system_type_id NOT IN (36     -- uniqueidentifier
                                ,104    -- BIT
                                )
   AND sc.system_type_name NOT LIKE N'%INT%'
   AND (   sc.name LIKE N'%IDENTIFIER%'
        OR sc.name LIKE N'%GUID%'          -- globally unique identifier
        OR sc.name LIKE N'%UUID%'          -- universally unique identifier
        OR (    sc.name LIKE N'%ID%'
            AND sc.system_type_name LIKE N'%CHAR'
            AND COALESCE(sc.max_length_unicode,sc.max_length)
             IN (16 -- ASCII256 encoded
                ,20 -- ASCII85 encoded
                ,22 -- Base64 encoded
                ,32 -- Readable, no dashes or braces/parentheses
                ,36 -- Readable, dashes no braces/parentheses
                ,38 -- Readable, dashes and braces/parettheses
                ,68 -- Dot.Net ToString "X" format - Four braced hex values, 4th value is subset of 8 braced hex values
                )
           )
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Possible UNIQUEIDENTIFIER not stored as UID data type - name or %char data length (16,29,22,32,36,38,68)
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
-- <FUTURE> add to table level
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                    -- index level composite record
      ,database_id  = ic.database_id
      ,object_id    = ic.object_id
      ,index_id     = ic.index_id
      ,type         = ic.type
      ,sub_type     = 0
-- Diagnostic - Table - has what looks like a GUID stored as something else
      ,prescription = NULL
      ,diagnostic   = IIF(ic.is_included_column = 0,N'Key ',N'')
                    + N'Column ' + QUOTENAME(sc.name)
                    + CHAR(096)
                    + N'> Possible UNIQUEID, type is ' + UPPER(sc.system_type_name)
                    + N'(' + IIF(sc.max_length = -1,N'MAX',CAST(sc.max_length AS NVARCHAR(4))) + N')'
  FROM [##SQLXL_Index_sys_index_columns] AS ic
  JOIN [##SQLXL_Index_sys_columns]       AS sc
    ON ic.database_id                          = sc.database_id
   AND ic.object_id                            = sc.object_id
   AND ic.column_id                            = sc.column_id
 WHERE sc.system_type_id NOT IN (36     -- uniqueidentifier
                                ,104    -- BIT
                                )
   AND sc.system_type_name NOT LIKE N'%INT%'
   AND (   sc.name LIKE N'%IDENTIFIER%'
        OR sc.name LIKE N'%GUID%'          -- globally unique identifier
        OR sc.name LIKE N'%UUID%'          -- universally unique identifier
        OR (    sc.name LIKE N'%ID%'
            AND sc.system_type_name LIKE N'%CHAR'
            AND COALESCE(sc.max_length_unicode,sc.max_length)
             IN (16 -- ASCII256 encoded
                ,20 -- ASCII85 encoded
                ,22 -- Base64 encoded
                ,32 -- Readable, no dashes or braces/parentheses
                ,36 -- Readable, dashes no braces/parentheses
                ,38 -- Readable, dashes and braces/parettheses
                ,68 -- Dot.Net ToString "X" format - Four braced hex values, 4th value is subset of 8 braced hex values
                )
           )
       )
   AND sc.name NOT LIKE N'%_IDENTIFIER'
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - UNIQUEIDENTIFIER not stored as UNIQUEIDENTIFIER'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - Another key column has better lead uniqueness, does not cover foreign key constraint
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                    -- index level composite record
      ,database_id  = xc.database_id
      ,object_id    = xc.object_id
      ,index_id     = xc.index_id
      ,type         = xc.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = N'Key ' + u.column_descriptors + N' is more unique than key 1'
  FROM (-- find index key element with higherst uniqueness
        SELECT bc.database_id
              ,bc.object_id
              ,bc.index_id
              ,bc.type
              ,bc.column_id
          FROM (--
                SELECT u.database_id
                      ,u.object_id
                      ,u.index_id
                      ,u.type
                      ,u.idx_column_display_sequence
                      ,u.column_id
                      ,rn = ROW_NUMBER() OVER (PARTITION BY u.database_id
                                                           ,u.object_id
                                                           ,u.index_id
                                                           ,u.type
                                                   ORDER BY u.col_uniqueness ASC
                                              )
                  FROM [##SQLXL_Index_sys_index_columns]  AS u
                  JOIN [##SQLXL_Index_sys_columns] AS col
                    ON u.database_id = col.database_id
                   AND u.object_id   = col.object_id
                   AND u.column_id   = col.column_id
                  JOIN [##SQLXL_Index_compilation] AS cmp
                    ON u.database_id = cmp.database_id
                   AND u.object_id   = cmp.object_id
                   AND N'P'          = cmp.rec_type            -- parent level aggregate record
                   AND N'TBL'        = cmp.obj_type_hdr        -- top level tables only
                 WHERE u.type IN (N'1'                         -- clustered rowstore index
                                 ,N'2'                         -- nonclustered rowstore index
                                 )
                   AND u.is_included_column            = 0
                   AND u.idx_column_display_sequence   > 0
                   AND CHARINDEX(N'CX(',u.idx_stats_uniqueness_prefix) = 0 -- exclude columns added from the clustering index
                   AND u.col_uniqueness                > 0
                   AND cmp.covers_fkc_IDs            IS NULL
                   --------------------------------------------
                   AND col.max_length            BETWEEN 1 AND 16 -- candidates between 1 and 16 bytes wide
               ) bc
         WHERE bc.rn = 1
        EXCEPT -- all first key index columns
        SELECT u.database_id
              ,u.object_id
              ,u.index_id
              ,u.type
              ,u.column_id
          FROM [##SQLXL_Index_sys_index_columns] AS u
         WHERE u.type IN (N'1' -- clustered rowstore index
                         ,N'2' -- nonclustered rowstore index
                         )
           AND u.is_included_column          = 0
           AND u.idx_column_display_sequence = 1
       ) xc
  JOIN [##SQLXL_Index_sys_index_columns] u
    ON xc.database_id = u.database_id
   AND xc.object_id   = u.object_id
   AND xc.index_id    = u.index_id
   AND xc.type        = u.type
   AND xc.column_id   = u.column_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - better lead index key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - nonclustered rowstore index has more than 5 included columns
-- Diagnostic - Index - nonclustered rowstore index included columns 100 or more bytes
-- Diagnostic - Index - nonclustered rowstore index included column with MAX length
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                    -- index level composite record
      ,database_id  = ic.database_id
      ,object_id    = ic.object_id
      ,index_id     = ic.index_id
      ,type         = ic.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = N'Bulky includes: '
                    + STUFF(                N', ' + CAST(ic.cnt AS NVARCHAR(20)) + N' cols'
                           + IIF(ic.len > 0,N', ' + CAST(ic.len AS NVARCHAR(20)) + N' bytes',N'')
                           + IIF(ic.big > 0,N', ' + CAST(ic.big AS NVARCHAR(20)) + N' MAX',N'')
                           ,1,1,N'') -- end of STUFF function
  FROM (-- all candidate indexes with big/many included columns
        SELECT ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
              ,cnt = COUNT_BIG(1)
              ,len = SUM(IIF(c.max_length = -1,0,c.max_length))
              ,big = SUM(IIF(c.max_length = -1,1,0))
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_columns]       AS c
            ON ic.database_id = c.database_id
           AND ic.object_id   = c.object_id
           AND ic.column_id   = c.column_id
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_index_columns] AS ix -- filter out CLUSTERED index columns
            ON ic.database_id = ix.database_id
           AND ic.object_id   = ix.object_id
           AND 1              = ix.index_id
           AND N'1'           = ix.type                -- clustered rowstore index
           AND ic.column_id   = ix.column_id
         WHERE ic.type               = N'2'            -- nonclustered rowstore index
           AND ic.is_included_column = 1
           AND ix.column_id         IS NULL
         GROUP BY
               ic.database_id
              ,ic.object_id
              ,ic.index_id
              ,ic.type
        HAVING  5 < COUNT_BIG(1)                                  -- included column count
            OR 99 < SUM(IIF(c.max_length < 0,0,c.max_length)) -- total included column length
            OR  0 < SUM(IIF(c.max_length < 0,1,0))            -- MAX length columns
       ) AS ic
  JOIN (-- parent objects that are not INTERNAL or HISTORY TABLES
        SELECT database_id,object_id
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type          = N'P'    -- parent level aggregate record
           AND obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                                   ,N'INT' -- Not a system/internal table
                                   )
       ) AS p
    ON ic.database_id  = p.database_id
   AND ic.object_id    = p.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - big indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Index - with resumable operations and metrics
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                 -- index level composite record
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic   = N'[RESUMABLE OPERATION - ' + r.state_desc + N']'
                    + CHAR(096) + N'> Started: '
                                + CAST(DATEDIFF(DAY,r.start_time,GETDATE()) AS NVARCHAR(20))
                                + N' days ago)'
                    + CHAR(096) + N'> Paused:'
                                + CONVERT(NVARCHAR(11),r.last_pause_time,11)
                                + N'@'
                                + CONVERT(NVARCHAR(8),r.last_pause_time,114)
                                + N' Complete: '
                                + CAST(r.percent_complete_MAX AS NVARCHAR(2)) + N'%'
  FROM [##SQLXL_Index_sys_index_resumable_operations] AS r
  JOIN [##SQLXL_Index_sys_indexes]                    AS i
    ON r.database_id               = i.database_id
   AND r.object_id                 = i.object_id
   AND r.index_id                  = i.index_id
   AND i.type NOT IN (N'F' -- Foreign Key constraint
                     ,N'M' -- Missing nonclustered rowstore Index
                     )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - resumable operations'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- LEAD ROWSTORE INDEX KEY - ALL ELEMENTS
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (--
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(
-- Diagnostic - Index - Lead Key - is IDENTITY and index is NOT UNIQUE
-- Diagnostic - Index - Lead Key - is SEQUENCE and index is NOT UNIQUE
-- Diagnostic - Index - Lead Key - is NEWSEQUENTIALID and index is NOT UNIQUE
-- Diagnostic - (BI121) - Index - Lead Key - is SEQUENTIAL UNIQUE and optimize_for_sequential_key not enabled (2019+)
-- Diagnostic - (BI121) - Index - Lead Key - is SEQUENTIAL UNIQUE and optimize_for_sequential_key is  enabled (2019+)
+IIF(   i.lead_element_is_Identity        = 1
     OR i.lead_element_is_Sequence        = 1
     OR i.lead_element_is_newsequentialid = 1
    , CHAR(096)
    + IIF(    CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 15 -- SQL 2019+
          AND obj.clustered_columnstore_CNT = 0                 -- OPTIMIZE_FOR_SEQUENTIAL_KEY cannot be used on clustered columnstore table
         , N'(BI121) optimize_for_sequential_key (2019+) is '
         + IIF(i.optimize_for_sequential_key = 0,N'NOT ',N'') + N'ENABLED '
         ,N'')
    + N'Lead Key is '
    + IIF(i.lead_element_is_Identity        = 1,N'IDENTITY'       ,N'')
    + IIF(i.lead_element_is_Sequence        = 1,N'SEQUENCE'       ,N'')
    + IIF(i.lead_element_is_newsequentialid = 1,N'NEWSEQUENTIALID',N'')
    + N', index is ' + IIF(i.is_unique = 0,N'not ',N'') + N'UNIQUE'
    + IIF(obj.clustered_columnstore_CNT = 1,N', table is CLUSTERED COLUMNSTORE',N'')
    ,N'')

-- Diagnostic - (BI121) - Index - Lead Key - optimize_for_sequential_key is enabled & lead key not SEQUENTIAL UNIQUE (2019+)
+IIF(    i.optimize_for_sequential_key = 1
     AND NOT (   i.lead_element_is_Identity        = 1
              OR i.lead_element_is_Sequence        = 1
              OR i.lead_element_is_newsequentialid = 1
             )
    ,CHAR(096) + N'(BI121) Optimize_for_sequential_key (2019+) is ENABLED, lead key *NOT* Sequential'
    ,N'')

-- Diagnostic - Index - Lead Key - is NEWID and index is not unique
+IIF(i.lead_element_is_newid = 1
    , CHAR(096) + N'Lead Key is ' + N'NEWID'
    + IIF(i.is_unique = 0,N', index not UNIQUE',N'')
    ,N'')

-- Diagnostic - Index - Lead Key - lead element uniqueness is >5% of table row count
-- lead_element_uniqueness is the stats density factor X # of rows when stats last computed
+IIF(i.stathdr_unfiltered_rows > 99
    ,IIF(    100.0 * i.lead_element_uniqueness / i.stathdr_unfiltered_rows > 5.0
         AND i.key_ordinal_CNT > (1 + IIF(data_space_idx.partition_function_id > 0,1,0)) -- if partitioned must have partitioned column
        ,  CHAR(096) + N'Lead key low uniqueness - ' + [dbo].[SQLXL_3SD](i.lead_element_uniqueness,N'N') + N' rows, '
         + [dbo].[SQLXL_3SD](1.0 * i.lead_element_uniqueness / i.stathdr_unfiltered_rows,N'%') + N' of table'
        ,N'')
    ,N'')

-- Diagnostic - Index - Lead Key - clustered index lead is unique & has extraneous key columns
-- Diagnostic - Index - Lead Key - Nonclustered index lead key is unique, extraneous columns can be included
+IIF(    (   i.lead_element_is_Identity        = 1
          OR i.lead_element_is_Sequence        = 1
          OR i.lead_element_is_newsequentialid = 1
          OR i.lead_element_is_newid           = 1
         )
     AND i.key_ordinal_CNT > (1 + IIF(data_space_idx.partition_function_id > 0,1,0)) -- if partitioned must have partitioned column
    ,CHAR(096) + IIF(i.type = N'1' -- clustered rowstore index
                     ,N'> has '  + CAST(i.key_ordinal_CNT - 1 AS NVARCHAR(20)) + N' unneeded col(s)'
                     ,N'> move ' + CAST(i.key_ordinal_CNT - 1 AS NVARCHAR(20)) + N' unneeded columns to Include'
                     )
    ,N'')
-- Diagnostic - Index - Lead Key - another column may be a better clustering lead key
+IIF(    i.type                          IN (N'1')                   -- clustered rowstore index
     AND obj.is_memory_optimized          = 0                        -- base mem opt table is always HEAP
     AND i.tbl_cx_uniq_ordered_column_id <> i.lead_element_column_id
    ,CHAR(096) + N'Candidate Rebuilding key ' + CHAR(096) + N'> ' + c.column_descriptors
    ,N'')
-- Diagnostic - Index - Lead Key - is string/text and summary statistics have not been computed
+IIF(    obj.type = N'U'                                             -- User Table
     AND (   i.lead_element_Data_Type LIKE N'%CHAR%'
          OR i.lead_element_Data_Type LIKE N'%TEXT%'
         )
     AND i.stathdr_string_index IS NULL
     AND i.row_CNT               > 0
    , CHAR(096) + N'Lead key ' + UPPER(i.lead_element_Data_Type) + N', String Summary statistics are '
    + IIF(i.stathdr_string_index = N'YES',N'',N'*NOT* ') + N'computed'
    ,N'')
------------------------------------------------------------
                           ,1,1,N'')                        -- end of STUFF function
  FROM [##SQLXL_Index_sys_objects] AS obj

  JOIN (-- All rowstore clustered and nonclustered index records
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE type IN (N'1'                                -- clustered rowstore index
                       ,N'2'                                -- nonclustered rowstore index
                       )
       ) AS i
    ON obj.database_id = i.database_id
   AND obj.object_id   = i.object_id

  LEFT OUTER
  JOIN [##SQLXL_Index_data_spaces] AS data_space_idx        -- data space at index level
    ON i.database_id   = data_space_idx.database_id
   AND i.data_space_id = data_space_idx.data_space_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_columns] AS c
    ON obj.database_id                 = c.database_id
   AND obj.object_id                   = c.object_id
   AND i.tbl_cx_uniq_ordered_column_id = c.column_id
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - lead key properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index column properties - NULLABLE, Large key elements, non-standard data types,
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT * -- outer SELECT used to remove NULL disgnostic columns
  FROM (--
SELECT rec_type     = N'I'
      ,database_id  = ic.database_id
      ,object_id    = ic.object_id
      ,index_id     = ic.index_id
      ,type         = ic.type
      ,sub_type     = ic.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(
-- Diagnostic - Index - High Ratio of Nulls. Index Key element NULLable, count of NULL values and percent of index
                    + IIF(sc.is_nullable = 1 AND ic.is_included_column = 0
                         , CHAR(096) + N'NULLable Index Key ' + CONVERT(NVARCHAR(20),ic.idx_column_display_sequence)
                         + IIF(sshs.null_rows IS NOT NULL
                              , N' - ' + [dbo].[SQLXL_3SD](sshs.null_rows,N'I') + N' NULL rows '
                              + N'(' + IIF(sssh.Rows > 0
                                          ,[dbo].[SQLXL_3SD](1.0 * sshs.null_rows / sssh.Rows,N'%')
                                          ,N'empty ') + N' table)'
                              , N' - no column statistics captured')
                         ,NULL)
-- Diagnostic - Index - Key Element is non-standard data type
                    + IIF(    ic.is_included_column = 0
                          AND sc.system_type_name IN (N'hierarchyid'
                                                     ,N'image'
                                                     ,N'ntext'
                                                     ,N'numeric'
                                                     ,N'real'
                                                     ,N'sql_variant'
                                                     )
                         , CHAR(096)
                         + N'Non-typical datatype - ' + UPPER(sc.system_type_name)
                         + N' key element ' + CONVERT(NVARCHAR(20),ic.idx_column_display_sequence)
                         , N'')
-- Diagnostic - Index - large key elements - greater than 8 bytes per element
                    + IIF(    ic.is_included_column = 0
                          AND (   (sc.system_type_name = N'binary'    AND sc.max_length >  8)
                               OR (sc.system_type_name = N'char'      AND sc.max_length >  8)
                               OR (sc.system_type_name = N'decimal'   AND sc.max_length >  9)
                               OR (sc.system_type_name = N'nchar'     AND sc.max_length >  4)
                               OR (sc.system_type_name = N'nvarchar'  AND sc.max_length >  4)
                               OR (sc.system_type_name = N'numeric'   AND sc.max_length >  9)
                               OR (sc.system_type_name = N'varbinary' AND sc.max_length >  8)
                               OR (sc.system_type_name = N'varchar'   AND sc.max_length >  8)
                               OR (    ic.type NOT IN (N'3' -- XML index
                                                      ,N'4' -- Spatial indext
                                                      )
                                   AND sc.max_length = -1
                                  )
                              )
                         , CHAR(096)
                         + N'Big Key ' + CONVERT(NVARCHAR(20),ic.idx_column_display_sequence)
                         + N' datatype ' + UPPER(sc.system_type_name)
                         + N'(' + IIF(sc.max_length = -1,N'MAX',CAST(sc.max_length AS NVARCHAR(20))) + N')'
                         , N'')
-- Diagnostic - (BI69) - Abnormal Design Pattern - Column Collation Does Not Match Database Collation
                    + IIF(sc.collation_name <> db.collation_name
                         , CHAR(096)
                         + N'(BI69) Index key ' + CONVERT(NVARCHAR(20),ic.idx_column_display_sequence)
                         + N' Collation: ' + sc.collation_name + N' <> Database: ' + db.collation_name
                         , N'')

                           ,1,1,N'') -- end of STUFF

  FROM [##SQLXL_Index_sys_databases]     AS db

  JOIN [##SQLXL_Index_sys_objects]       AS obj
    ON db.database_id  = obj.database_id

  JOIN [##SQLXL_Index_sys_index_columns] AS ic
    ON obj.database_id = ic.database_id
   AND obj.object_id   = ic.object_id

  JOIN [##SQLXL_Index_sys_columns]       AS sc
    ON ic.database_id  = sc.database_id
   AND ic.object_id    = sc.object_id
   AND ic.column_id    = sc.column_id

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_showstatistics_statheader]        AS sssh
    ON ic.database_id  = sssh.database_id
   AND ic.object_id    = sssh.object_id
   AND ic.index_id     = sssh.index_id
   AND ic.type         = sssh.type
   AND ic.sub_type     = sssh.sub_type

  LEFT OUTER
  JOIN [##SQLXL_Index_sys_showstatistics_histogram_summary] AS sshs
    ON ic.database_id  = sshs.database_id
   AND ic.object_id    = sshs.object_id
   AND ic.column_id    = sshs.column_id
   AND ic.type         = sshs.type
   AND ic.sub_type     = sshs.sub_type

       ) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - nullable keys'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES INDEX TYPES IN **
 *Task* Diagnostics - Index Types
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Blitz Index - Index Properties - nonclustered rowstore index
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM ( -- pairs with "WHERE i.diagnostic IS NOT NULL" below
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(

       IIF(    i.partition_CNT         > 1
           AND obj.heap_index_CNT      > 0
           AND obj.is_memory_optimized = 0
-- Diagnostic - Index - Partitioned nonclustered rowstore index found on Heap
          ,CHAR(096) + N'Heap - Nonclustered index has ' + [dbo].[SQLXL_3SD](i.partition_CNT,N'I') + N' partitions'
          ,N'')

     + IIF(    i.is_primary_key        = 1
           AND obj.heap_index_CNT      > 0
           AND obj.is_memory_optimized = 0
-- Diagnostic - (BI47) - Index - nonclustered rowstore index primary key found on Heap
          ,CHAR(096) + N'(BI47) PRIMARY KEY on Heap'
          ,N'')

     + IIF(    i.is_primary_key        = 0
           AND i.is_unique_constraint  = 1
           AND obj.heap_index_CNT      > 0
           AND obj.is_memory_optimized = 0
-- Diagnostic - (BI47) - Index - Unique Constraint nonclustered rowstore index found on Heap
          ,CHAR(096) + N'(BI47) Unique Constraint on Heap'
          ,N'')

     + IIF(    i.is_primary_key        = 0
           AND i.is_unique_constraint  = 0
           AND obj.heap_index_CNT      > 0
           AND obj.is_memory_optimized = 0
           AND i.is_unique             = 1
-- Diagnostic - (BI47) - Index - Unique nonclustered rowstore index found on Heap
          ,CHAR(096) + N'(BI47) Unique index found on Heap'
          ,N'')

                           ,1,1,N'') -- end of STUFF function
  FROM [##SQLXL_Index_compilation] AS i
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id
 WHERE i.rec_type          = N'I'    -- index level composite record
   AND i.type              = N'2'    -- nonclustered rowstore index
   AND i.obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                             ,N'INT' -- Not a system/internal table
                             )
) AS i
 WHERE i.diagnostic > N''
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Index Diagnostics - nonclustered rowstore'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CON**
 *Task* Diagnostics - Foreign Key Constraints
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
-- NOTE: fk.is_not_trusted & fk.is_disabled are covered by index Diagnostics
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                -- index level composite record
      ,database_id  = obj.database_id
      ,object_id    = obj.object_id
      ,index_id     = obj.object_id
      ,type         = obj.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = STUFF(
-- Diagnostic - Foreign Key Constraint - Self Referencing
                    + IIF(obj.parent_object_id = obj.referenced_object_id
                         ,CHAR(096) + QUOTENAME(N'Self referencing FKC')
                         ,N'')
                    + CHAR(096)
                    + IIF(   obj.delete_referential_action > 0
                          OR obj.update_referential_action > 0
                         ,N'(BI71) '
                         ,N'')
                    + N'FKC Cascade:'
-- Diagnostic - Foreign Key Constraint - Referential Actions - Delete
                    + N' Delete ' + QUOTENAME(obj.delete_referential_action_desc)
-- Diagnostic - Foreign Key Constraint - Referential Actions - Update
                    + N' Update ' + QUOTENAME(obj.update_referential_action_desc)
-- Diagnostic - (BI71) - Foreign Key Constraint - Any action forces serializable isolation
                    + IIF(   obj.delete_referential_action > 0
                          OR obj.update_referential_action > 0
                         ,N' - forces serializable isolation'
                         ,N'')
                           ,1,1,N'') -- end of STUFF
  FROM [##SQLXL_Index_sys_objects] AS obj
 WHERE obj.type             = N'F'                           -- foreign key constraint
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - self referencing'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'                                  -- index level composite record
      ,database_id  = fkc_obj.database_id
      ,object_id    = fkc_obj.parent_object_id                                               -- for System, History, Constraints
      ,index_id     = fkc_obj.object_id
      ,type         = N'F'                                  -- foreign key constraint
      ,sub_type     = 0
-- Diagnostic - Foreign Key Constraint - *DISABLED*
      ,prescription = NULL
      ,diagnostic   = STUFF( IIF(fkc_obj.is_disabled    = 1,N' *DISABLED*',N'')
-- Diagnostic - Foreign Key Constraint - *NOT TRUSTED*
                           + IIF(fkc_obj.is_not_trusted = 1,N' *NOT TRUSTED*',N'')
-- Diagnostic - Foreign Key Constraint - *ENABLED FOR REPLICATION*
                           + IIF(fkc_obj.is_not_for_replication = 1 AND tbl_obj.is_replicated = 1
                                ,N' *NOT ENABLED FOR REPLICATION*'
                                ,N'')
                           ,1,1,N'') -- end of STUFF function
  FROM (-- Foreign Key Constraints
        SELECT *
          FROM [##SQLXL_Index_sys_objects]
         WHERE type = N'F' -- foreign key constraint
       ) AS fkc_obj
  JOIN [##SQLXL_Index_sys_objects] AS tbl_obj
    ON fkc_obj.database_id      = tbl_obj.database_id
   AND fkc_obj.parent_object_id = tbl_obj.object_id                                                 -- for System, History, Constraints
 WHERE (   (    fkc_obj.is_not_for_replication = 0
            AND tbl_obj.is_replicated     = 1
           )
        OR fkc_obj.is_not_trusted             = 1
        OR fkc_obj.is_disabled                = 1
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - properties'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type = N'I'
      ,idxL.database_id,idxL.object_id,idxL.l_index_id,idxL.l_type,idxL.l_sub_type
      ,prescription = NULL
-- Diagnostic - Foreign Key Constraint - duplicate keys
-- Diagnostic - Foreign Key Constraint - overlapping keys
-- Diagnostic - Foreign Key Constraint - keys contained
-- Diagnostic - Foreign Key Constraint - containing keys
-- Diagnostic - Foreign Key Constraint - keys included
-- Diagnostic - Foreign Key Constraint - including keys
      ,diagnostic   = CASE idxL.synergy_prefix
                           WHEN N'D'  THEN N'(BI01) Duplicate'
                           WHEN N'S'  THEN N'(BI02) Same starting'
                           WHEN N'O'  THEN N'Overlapping'
                           WHEN N'C'  THEN N'Contained'
                           WHEN N'>'  THEN N'Containing'
                           WHEN N'I'  THEN N'Included'
                           WHEN N'>>' THEN N'Including'
                           ELSE            N'UNKNOWN'
                      END + N' keys Foreign Key Constraint'
  FROM [##SQLXL_Index_Synergies] AS idxL
  JOIN [##SQLXL_Index_Synergies] AS idxR
    ON idxL.database_id     = idxR.database_id
   AND idxL.object_id       = idxR.object_id
   AND idxL.l_index_id     <> idxR.l_index_id
   AND idxL.synergy_columns = idxR.synergy_columns
   AND idxL.l_sub_type      = idxR.l_sub_type
   AND idxL.l_type          = N'F'          -- nonclustered rowstore index
   AND idxL.r_type          = N'F'          -- nonclustered rowstore index
   AND N'F'                 = idxR.l_type
   AND N'F'                 = idxR.r_type
   AND idxL.synergy_prefix  = idxR.synergy_prefix
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - key synergies'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Foreign Key Constraint - count of referring foreign key constraint to this reference
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = N'I'
      ,database_id  = ref.database_id
      ,object_id    = ref.referenced_object_id
      ,index_id     = ref.key_index_id
      ,type         = N'F'
      ,sub_type     = 0
-- Diagnostic - Foreign Key Constraint - count of referring foreign key constraint to this reference
      ,prescription = NULL
      ,diagnostic   = IIF(ref.CNT > 0
                         ,N'Foreign Key References ' + [dbo].[SQLXL_3SD](ref.CNT,N'I')
-- Diagnostic - Foreign Key Constraint - count of disabled foreign key constraint to this reference
                         + IIF(ref.disabled_CNT > 0
                              ,N' Disabled ' + [dbo].[SQLXL_3SD](ref.disabled_CNT,N'I')
                              ,N'')
-- Diagnostic - Foreign Key Constraint - count of not trusted foreign key constraint to this reference
                         + IIF(ref.not_trusted_CNT > 0
                              ,N' Not Trusted ' + [dbo].[SQLXL_3SD](ref.not_trusted_CNT,N'I')
                              ,N'')
                         + IIF(   ref.delete_action_cascade_CNT > 0
                               OR ref.delete_action_null_CNT    > 0
                               OR ref.delete_action_default_CNT > 0
                              , N' (Delete:'
-- Diagnostic - Foreign Key Constraint - count of delete cascade action foreign key constraint to this reference
                              + IIF(ref.delete_action_cascade_CNT > 0
                                   ,N' Cascade ' + [dbo].[SQLXL_3SD](ref.delete_action_cascade_CNT,N'I')
                                   ,N'')
-- Diagnostic - Foreign Key Constraint - count of delete NULL action foreign key constraint to this reference
                              + IIF(ref.delete_action_null_CNT    > 0
                                   ,N' NULL '    + [dbo].[SQLXL_3SD](ref.delete_action_null_CNT   ,N'I')
                                   ,N'')
-- Diagnostic - Foreign Key Constraint - count of delete default action foreign key constraint to this reference
                              + IIF(ref.delete_action_default_CNT > 0
                                   ,N' Default ' + [dbo].[SQLXL_3SD](ref.delete_action_default_CNT,N'I')
                                   ,N'')
                              + N')'
                              ,N'')
                         + IIF(   ref.update_action_cascade_CNT > 0
                               OR ref.update_action_null_CNT    > 0
                               OR ref.update_action_default_CNT > 0
                              , N' (Update:'
-- Diagnostic - Foreign Key Constraint - count of update cascade action foreign key constraint to this reference
                              + IIF(ref.update_action_cascade_CNT > 0
                                   ,N' Cascade ' + [dbo].[SQLXL_3SD](ref.update_action_cascade_CNT,N'I')
                                   ,N'')
-- Diagnostic - Foreign Key Constraint - count of update NULL action foreign key constraint to this reference
                              + IIF(ref.update_action_null_CNT    > 0
                                   ,N' NULL '    + [dbo].[SQLXL_3SD](ref.update_action_null_CNT   ,N'I')
                                   ,N'')
-- Diagnostic - Foreign Key Constraint - count of update default action foreign key constraint to this reference
                              + IIF(ref.update_action_default_CNT > 0
                                   ,N' Default ' + [dbo].[SQLXL_3SD](ref.update_action_default_CNT,N'I')
                                   ,N'')
                              + N')'
                              ,N'')
                         ,N'')
  FROM (-- get count of Foreign Key Constraints ("Parent" or referring) to each referenced table and unique index
        SELECT database_id
              ,referenced_object_id
              ,key_index_id
              ------------------------------------------------------------------------------------
              ,CNT                       = COUNT_BIG(1)
              ,disabled_CNT              = SUM(IIF(is_disabled               = 1,1,0))
              ,not_replicated_CNT        = SUM(IIF(is_not_for_replication    = 1,1,0))
              ,not_trusted_CNT           = SUM(IIF(is_not_trusted            = 1,1,0))
              ,delete_action_none_CNT    = SUM(IIF(delete_referential_action = 0,1,0))
              ,delete_action_cascade_CNT = SUM(IIF(delete_referential_action = 1,1,0))
              ,delete_action_null_CNT    = SUM(IIF(delete_referential_action = 2,1,0))
              ,delete_action_default_CNT = SUM(IIF(delete_referential_action = 3,1,0))
              ,update_action_none_CNT    = SUM(IIF(update_referential_action = 0,1,0))
              ,update_action_cascade_CNT = SUM(IIF(update_referential_action = 1,1,0))
              ,update_action_null_CNT    = SUM(IIF(update_referential_action = 2,1,0))
              ,update_action_default_CNT = SUM(IIF(update_referential_action = 3,1,0))
          FROM [##SQLXL_Index_sys_objects]
         WHERE type = N'F'
         GROUP BY
               database_id
              ,referenced_object_id
              ,key_index_id
       ) AS ref
  JOIN [##SQLXL_Index_compilation] AS i
    ON ref.database_id              = i.database_id
   AND ref.referenced_object_id     = i.object_id
   AND ref.key_index_id             = i.index_id
   AND i.type                      IN (N'1' -- clustered rowstore index
                                      ,N'2' -- nonclustered rowstore index
                                      )
   AND 0                            = i.sub_type

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - index references and action counts'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Foreign Key Constraint - indexes with lead key(s) covering this foreign key constraint, in size order
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = fk.rec_type
      ,database_id  = fk.database_id
      ,object_id    = fk.object_id
      ,index_id     = fk.index_id
      ,type         = fk.type
      ,sub_type     = fk.sub_type
-- Diagnostic - Foreign Key Constraint - indexes with lead key(s) covering this foreign key constraint, in size order
      ,prescription = NULL
      ,diagnostic   = N'Covered by index ID(s) ' + fk.fkc_covered_by_idx_IDS
  FROM [##SQLXL_Index_compilation] AS fk
 WHERE fk.type                    = N'F'                    -- foreign key constraint
   AND fk.fkc_covered_by_idx_IDS IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Foreign Key Diagnostics - covering indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING INDEXES MISSING**
 *Task* Diagnostics - Missing Indexes
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (-- Index level
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic   = STUFF(-- remove unneeded leading CHAR(096)
-- Diagnostic - Missing index - candidate to cover foreign key constraint
        IIF(mix.fkc_id IS NOT NULL
           , CHAR(096)
           + N'> Possible cover for Foreign Key(s) '
           + STUFF(mix.fkc_id,1,1,N'') -- end of STUFF function
           ,N'')
-- Diagnostic - Missing index - Most resource intensive query generating MIX request
      + IIF(def.definition IS NOT NULL                                     -- most resource intensive missing index query found
           ,CHAR(096) + N'See column "M" for largest resource query generating MIX'
           ,CHAR(096) + N'No query found')
                           ,1,1,N'') -- end of STUFF function
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE type = N'M') AS i  -- missing nonclustered rowstore index

  LEFT OUTER                                                               -- outer needed for ALL rows
  JOIN [##SQLXL_Index_sql_definitions] AS def                              -- check if most resource used query caotured for missing index
    ON i.database_id = def.database_id
   AND i.index_id    = def.group_handle
   AND i.type        = N'M'                                                -- missing nonclustered rowstore index

 OUTER
 APPLY (-- uncovered Foreign Key Constraints with possible missing index reference
        SELECT-- Double select to accomodate XML.value below
       (SELECT N',N' + CAST(fkc.l_index_id AS NVARCHAR(20))
                 FROM [##SQLXL_Index_Synergies] AS mix
                 JOIN [##SQLXL_Index_Synergies] AS fkc                      -- foreign key columns matching missing index keys
                   ON mix.database_id     = fkc.database_id
                  AND mix.object_id       = fkc.object_id
                  AND N'F'                = fkc.l_type
                  AND mix.l_sub_type      = fkc.l_sub_type
                  AND mix.synergy_columns = fkc.synergy_columns
                 JOIN [##SQLXL_Index_compilation] AS idx                   -- computed properties of foreign key constraints
                   ON fkc.database_id     = idx.database_id
                  AND fkc.object_id       = idx.object_id
                  AND fkc.l_index_id      = idx.index_id
                  AND fkc.l_type          = idx.type
                  AND fkc.l_sub_type      = idx.sub_type
                  AND idx.fkc_covered_by_idx_IDS IS NULL                   -- no covering rowstore index previously found
                WHERE i.database_id       = mix.database_id
                  AND i.object_id         = mix.object_id
                  AND i.index_id          = mix.l_index_id
                  AND i.type              = mix.l_type
                  AND i.sub_type          = mix.l_sub_type
                GROUP BY
                      fkc.l_index_id
                ORDER BY
                      fkc.l_index_id
                  FOR XML PATH(N''), TYPE                                  -- index_id
       ).value('.',N'NVARCHAR(MAX)')
       ) mix(fkc_id)
) AS i
 WHERE diagnostic > N''
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Missing Index Diagnostics - candidate covers'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
--
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = i.rec_type
      ,database_id  = i.database_id
      ,object_id    = i.object_id
      ,index_id     = i.index_id
      ,type         = i.type
      ,sub_type     = i.sub_type
      ,prescription = NULL
      ,diagnostic   = N'> Table '
-- Diagnostic - Missing index - table is Clustered Columnstore
                    + IIF(obj.clustered_columnstore_CNT > 0,N'is Clustered Columnstore',N'')
-- Diagnostic - Missing index - table has Nonclustered Columnstore
                    + IIF(obj.nonclustered_columnstore_CNT > 0,N'has Nonclustered Columnstore (FK can''t use)',N'')
  FROM [##SQLXL_Index_sys_objects] AS obj
  JOIN [##SQLXL_Index_compilation] AS i
    ON obj.database_id = i.database_id
   AND obj.object_id   = i.object_id
 WHERE N'M'            = i.type           -- missing nonclustered rowstore index
   AND (   obj.clustered_columnstore_CNT    > 0
        OR obj.nonclustered_columnstore_CNT > 0
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Missing Index Diagnostics - tables has columnstore'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Table - candidate for Nonclustered Columnstore due to missing index count
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT *
  FROM (-- Table level
SELECT rec_type     = p.rec_type
      ,database_id  = p.database_id
      ,object_id    = p.object_id
      ,index_id     = p.index_id
      ,type         = p.type
      ,sub_type     = p.sub_type
-- Diagnostic - Table - candidate for Nonclustered Columnstore due to missing index count
      ,prescription = NULL
      ,diagnostic   = N'Missing index CNT: ' + CAST(obj.missing_index_CNT AS NVARCHAR(20))
                    + IIF(a.mix_Advantage_AMT > 0
                         ,N' Advantage: ' + [dbo].[SQLXL_3SD](1.0 * p.mix_Advantage_AMT / a.mix_Advantage_AMT,N'%')
                         ,N'')
                    + IIF(    CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 13 -- SQL 2016+
                          AND (   CAST(SERVERPROPERTY(N'EngineEdition') AS INT)  = 3
                                      -- Enterprise (For Evaluation, Developer, and Enterprise editions)
                               OR CAST(SERVERPROPERTY(N'EngineEdition') AS INT) >= 5
                                      -- As Of 06/20/2023
                                      -- 5 = SQL Database
                                      -- 6 = Azure Synapse Analytics
                                      -- 8 = Azure SQL Managed Instance
                                      -- 9 = Azure SQL Edge (For all editions of Azure SQL Edge)
                                      -- 11 = Azure Synapse serverless SQL pool
                              )
                          AND IIF(a.mix_Advantage_AMT > 0.0
                                 ,p.mix_Advantage_AMT / a.mix_Advantage_AMT
                                 ,0.0) > 0.02
                         ,CHAR(096) + N'> Consider Nonclustered Columnstore?'
                         ,N'')
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE type = N'A') AS a  -- instance level aggregate record
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON a.database_id = obj.database_id
   AND a.object_id   = obj.object_id
  JOIN [##SQLXL_Index_compilation] AS p
    ON obj.database_id = p.database_id
   AND obj.object_id   = p.object_id
   AND obj.object_id   = p.index_id
   AND p.rec_type     IN (N'H' -- history/archive table aggregate record
                         ,N'P' -- parent level aggregate record
                         ,N'S' -- system/internal table aggregate record
                         )
 WHERE obj.type = N'U'         -- user table
   AND COALESCE(obj.missing_index_CNT           ,0) >= 3
   AND COALESCE(obj.nonclustered_columnstore_CNT,0)  = 0
) AS i
 WHERE i.diagnostic IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Missing Indexes diagnostics - table candidate for nonclustered columnstore'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N'    Start Possible temporary object based on name',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS OTHER ELEMENTS **
 *Task* Diagnostics - Other Elements
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Object - possible temporary object based on name
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT rec_type     = c.rec_type
      ,database_id  = c.database_id
      ,object_id    = c.object_id
      ,index_id     = c.index_id
      ,type         = c.type
      ,sub_type     = 0
      ,prescription = NULL
      ,diagnostic   = c.diagnostic
  FROM (-- Diagnostics, subquery to allow use of NOT NULL below
        SELECT c.rec_type
              ,c.database_id
              ,c.object_id
              ,c.index_id
              ,c.type
              ,diagnostic = IIF(    p3.string <> N'TEMPLATE'
                                AND p3.string <> N'HOLD'
                                AND p3.string <> N'ERRORLOG'
                                AND (   c.name LIKE N'GRAPH_UNIQUE_INDEX_%'
                                     OR c.name LIKE N'%[_]PERF[_]%'
                                     OR c.name LIKE N'REN_%'
                                     OR c.name LIKE N'%XX%'
                                     OR c.name LIKE N'%ZZ%'
                                     OR c.name LIKE N'%\_TRACE'
                                     OR c.name LIKE N'%$%'
                                     -----------------------------------------------------------------
                                     OR p3.string = N'BAK'
                                     OR p3.string = N'BACKUP'
                                     OR p3.string = N'BCKUP'
                                     OR p3.string = N'BKP'
                                     OR p3.string = N'BKUP'
                                     OR p3.string = N'BK'
                                     OR p3.string = N'COPY'
                                     OR p3.string = N'DELETE' OR p3.string = N'DELETED' OR p3.string = N'DELETEME'
                                     OR p3.string = N'DEMO'
                                     OR p3.string LIKE N'DEPRECATE%'
                                  -- OR c.name LIKE N'%ERROR%'    OR c.name LIKE N'%ERR'  OR c.name LIKE N'ERR%'
                                     OR p3.string = N'NEW'
                                     OR p3.string = N'HIDE'
                                     OR p3.string = N'OLD'
                                     OR p3.string = N'REFRESH'
                                     OR p3.string = N'ROLLBACK'
                                     OR p3.string = N'TBD'
                                     OR p3.string = N'TEMP' OR p3.string = N'TMP'
                                     OR p3.string = N'TRACE'
                                     -----------------------------------------------------------------
                                     OR CASE WHEN LEN(n.nbr) = 4 AND CAST(n.nbr AS INT) BETWEEN YEAR(GETDATE()) - 20 AND YEAR(GETDATE()) + 1
                                             THEN 1
                                             ELSE NULL
                                        END = 1
                                     OR CASE WHEN LEN(n.nbr) = 6 AND ISDATE(n.nbr) = 1
                                             THEN 1
                                             ELSE NULL
                                        END = 1
                                     OR CASE WHEN LEN(n.nbr) = 8 AND ISDATE(n.nbr) = 1
                                             THEN 1
                                             ELSE NULL
                                        END = 1
                                     OR CASE WHEN LEN(n.nbr) = 8 AND ISDATE(RIGHT(n.nbr,4) + LEFT(n.nbr,4)) = 1
                                             THEN 1
                                             ELSE NULL
                                        END = 1
                                    )
                               ,N'[POSSIBLE TEMPORARY NAME]'
                               ,N'')
              ,c.name
              ,p3.string
              ,n.nbr
          FROM [##SQLXL_Index_compilation] AS c
          JOIN [##SQLXL_Index_sys_objects] AS obj
            ON obj.database_id   = c.database_id
           AND obj.object_id     = c.object_id
          LEFT OUTER
          JOIN [##SQLXL_Index_sys_indexes] AS idx
            ON c.database_id   = idx.database_id
           AND c.object_id     = idx.object_id
           AND c.index_id      = idx.index_id
           AND c.type          = idx.type
           AND c.sub_type      = idx.sub_type
         OUTER
         APPLY (SELECT string FROM [dbo].[SQLXL_Parse_Strings](c.name   ,N' ')) AS p1 -- parse by blanks
         OUTER
         APPLY (SELECT string FROM [dbo].[SQLXL_Parse_Strings](p1.string,N'_')) AS p2 -- parse by underscores
         OUTER
         APPLY (SELECT string FROM [dbo].[SQLXL_Parse_Strings](p2.string,N'-')) AS p3 -- parse by dashes
         OUTER -- get the numbers in the name to check if they are a date
         APPLY (SELECT nbr = [dbo].[SQLXL_Keep_Strings](p3.string,N'0-9',N''))  AS n  -- only get the numbers to check for a date
         WHERE NOT (    c.rec_type IN (N'H'  -- historical/archive table aggregate record
                                      ,N'P'  -- parent level aggregate record
                                      ,N'S'  -- system/internal level aggregate record
                                      )
                    AND obj.is_system_named > 0
                   )
           AND NOT (    c.rec_type          = N'I'
                    AND idx.is_system_named > 0
                   )
       ) c
 WHERE c.diagnostic IS NOT NULL
 GROUP BY            -- needed since a name can be flagged multiple times
       c.rec_type
      ,c.database_id
      ,c.object_id
      ,c.index_id
      ,c.type
      ,c.diagnostic

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Possible temporary object based on name'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Add Priority Metric computations to Parent & Indexes - Buffer Cache
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Table - Hi buffer cache usage (> 4MB reserved size, > 20% in buffer cache)
-- Diagnostic - Index - Hi buffer cache usage (> 2MB reserved size, > 20% in buffer cache)
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT i.rec_type
      ,i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,prescription = NULL
      ,diagnostic = N'High buffer cache used ' + [dbo].[SQLXL_3SD](1.0 * i.buffer_total_KB_CNT / (i.reserved_page_PG_CNT * 8.0),N'%')
   FROM [##SQLXL_Index_compilation] AS i
   JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id
   AND 0             = obj.is_memory_optimized              -- not a memory object
 WHERE i.rec_type NOT IN (N'A'                              -- instance level aggregate record
                         ,N'D'                              -- database level aggregate record
                         )
    AND i.reserved_page_PG_CNT > 0
    AND (   (i.rec_type = N'I' AND i.reserved_page_PG_CNT > 256) -- index level composite record, 2MB
         OR (i.rec_type = N'H' AND i.reserved_page_PG_CNT > 512) -- historical/archive table aggregate record, 4MB
         OR (i.rec_type = N'P' AND i.reserved_page_PG_CNT > 512) -- parent level aggregate record, 4MB
         OR (i.rec_type = N'S' AND i.reserved_page_PG_CNT > 512) -- system/internal table composite record, 4MB
        )
    AND i.buffer_total_KB_CNT > (8.0 * i.reserved_page_PG_CNT * 0.20) -- 8.0 to convert PAGE to KB
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Added Buffer Cache metric diagnostic records to Parent'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Add Priority Metric computations to Index diagnostics
-- Checking not performed of denominators since any value in any index should mean that the Instance value is also non-zero
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- for Blitz Index Checks
-- See https://github.com/BrentOzarULTD/SQL-Server-First-Responder-Kit/blob/dev/Documentation/sp_BlitzIndex_Checks_by_Priority.md
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Index_Diagnostics] WITH (TABLOCKX)
SELECT i.rec_type
      ,i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,prescription = NULL
      ,diagnostic = CASE WHEN i.diagnostic LIKE N'*OPS: TOT: 0 %'
                         THEN N'*OPS: NONE'
                         WHEN i.diagnostic LIKE N'*USG: TOT: 0 %'
                         THEN CASE WHEN par_obj.is_memory_optimized = 1
                                   THEN N'*USG: N/A'
                                   ELSE N'*USG: NONE'
                              END
                         WHEN i.diagnostic LIKE N'*USG: TOT: %'
                         THEN CASE WHEN CHARINDEX(N' WRT: 0 ',i.diagnostic) > 0
                                   THEN LEFT(i.diagnostic,CHARINDEX(N'R/W: 0',i.diagnostic) + 4) + N'ALL READS'
                                   WHEN CHARINDEX(N' RDS: 0 ',i.diagnostic) > 0
                                   THEN LEFT(i.diagnostic,CHARINDEX(N'R/W: 0',i.diagnostic) + 4) + N'ALL WRITES'
                                   ELSE i.diagnostic
                              END
                         WHEN i.diagnostic LIKE N'*USG: TOT:%'
                          AND i.type = N'M'                                           -- missing nonclustered rowstore index
                         THEN LEFT(i.diagnostic,CHARINDEX(N' WRT:',i.diagnostic) - 1) -- missing indexes don't capture writes
                         WHEN i.diagnostic LIKE N'*USG: Seeks:%'
                          AND i.type = N'M'                                           -- missing nonclustered rowstore index
                         THEN REPLACE(i.diagnostic,N'LKP: 0 %RDS: 0.00%',N'LKP: N/A') -- missing indexes don't capture lookups
                         ELSE i.diagnostic
                    END
/*** LOCAL TESTING ***
SELECT i.database_id,i.object_id,i.index_id,i.type,i.sub_type
      ,obj.database_id,obj.object_id,obj.parent_object_id
      ,par_obj.database_id,par_obj.object_id,par_obj.parent_object_id
--*/
  FROM [##SQLXL_Index_metrics_summary] AS i -- only valid rec_types created above
  JOIN [##SQLXL_Index_sys_objects]     AS obj
    ON i.database_id        = obj.database_id
   AND i.object_id          = obj.object_id
  JOIN [##SQLXL_Index_sys_objects]     AS par_obj
    ON obj.database_id      = par_obj.database_id
   AND obj.parent_object_id = par_obj.object_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Added significant index metrics diagnostic records'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Index on [##SQLXL_Index_Diagnostics]
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Index [##SQLXL_Index_Diagnostics]
--------------------------------------------------------------------------------------------------------------------------------------------
CREATE UNIQUE CLUSTERED
 INDEX ixuc_SQLXL_Index_Diagnostics
    ON [##SQLXL_Index_Diagnostics]
      (database_id,object_id,index_id,type,sub_type
      ,diagnostic_ID
      )
  WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Created index on [##SQLXL_Index_Diagnostics]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/*#########################################################################################################################################\
############################################################################################################################################
 *Task* Prescriptions Start ----------------------------------------------------------------------------------------------------------------
############################################################################################################################################
\#########################################################################################################################################*/
/*** LOCAL TESTING ***
SET NOCOUNT ON
DECLARE @cover_foreign_keys TINYINT = 1
--*/

/******************************************************************************************************************************************\
** FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CONSTRAINTS FOREIGN KEY CO **
\******************************************************************************************************************************************/
-- This code stands alone since only 3 choices available for foreign key constraints
-- PRESCRIBE - RETAIN - Foreign Key Constraints that are enabled, trusted, and replicable
-- PRESCRIBE - REVIEW - Foreign Key Constraints that are NOT enabled, trusted, or replicable
-- PRESCRIBE - REMOVE - Foreign Key Constraints that are redundant (same or overlapping key sequence)
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_Compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription = CASE WHEN synergy_fkc.index_id IS NOT NULL
                            AND synergy_fkc.index_id <> best_synergy_fkc.index_id -- index_id = object_id for a foreign key constraint
                           THEN N'Remove FKC' + CHAR(096) + N' Redundant'
                           ELSE N'Retain FKC'
                      END
                    + CASE WHEN src.is_disabled    = 1
                             OR src.is_not_trusted = 1
                             OR (    src.is_not_for_replication = 0
                                 AND tbl_obj.is_replicated      = 1
                                )
                             OR synergy_fkc.seq    > 0
                             OR synergy_fkc.ovl    > 0
                           THEN CHAR(096) + N'Review FKC'
                           ELSE N''
                      END
                    + IIF(src.is_disabled    = 1,CHAR(096) + N' Is Disabled',N'')
                    + IIF(src.is_not_trusted = 1,CHAR(096) + N' Not Trusted',N'')
                    + IIF(src.is_not_for_replication = 0 AND tbl_obj.is_replicated = 1
                         ,CHAR(096) + N' Disabled Replication'
                         ,N'')
                    + IIF(synergy_fkc.seq > 0,CHAR(096) + N' Sequence',N'')
                    + IIF(synergy_fkc.ovl > 0,CHAR(096) + N' Overlpas',N'')
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type
--*/
  FROM (SELECT * FROM [##SQLXL_Index_sys_objects] WHERE type = N'F') AS src                         -- foreign key constraints

  JOIN [##SQLXL_Index_sys_objects] AS tbl_obj   -- table object information
    ON src.database_id      = tbl_obj.database_id
   AND src.parent_object_id = tbl_obj.object_id                                                     -- for System, History, Constraints

  JOIN [##SQLXL_Index_Compilation] AS tgt WITH (TABLOCKX)   -- matching foreign key record. object_id is for parent table, index_id is for the FKC ID
    ON src.database_id      = tgt.database_id
   AND src.parent_object_id = tgt.object_id                                                         -- for System, History, Constraints
   AND src.object_id        = tgt.index_id                                                          -- FKC index_id is the FKC object_id
   AND src.type             = tgt.type
   AND 0                    = tgt.sub_type

  LEFT OUTER
  JOIN (-- list Foreign Key Constraint sequence matches
        SELECT database_id,object_id
              ,index_id    = l_index_id
              ,type        = l_type
              ,sub_type    = l_sub_type
              ,dup         = SUM(IIF(synergy_prefix = N'D',1,0))
              ,seq         = SUM(IIF(synergy_prefix = N'S',1,0))
              ,ovl         = SUM(IIF(synergy_prefix = N'O',1,0))
          FROM [##SQLXL_Index_Synergies] AS s
         WHERE l_type                = N'F' -- foreign key constraint
           AND r_type                = N'F' -- foreign key constraint
         GROUP BY
               database_id,object_id
              ,l_index_id
              ,l_type
              ,l_sub_type
       ) AS synergy_fkc
    ON src.database_id      = synergy_fkc.database_id
   AND src.parent_object_id = synergy_fkc.object_id         -- for System, History, Constraints
   AND src.object_id        = synergy_fkc.index_id          -- FKC index_id is the FKC object_id
   AND N'F'                 = synergy_fkc.type
   AND 0                    = synergy_fkc.sub_type

 OUTER
 APPLY (-- If a duplicate Foreign Key sequence found, choose one to live on (in order):
            -- enabled
            -- trusted
            -- replicable
            -- with most columns
            -- not system named
            -- published, schema published
            -- delete action enabled, update action enabled
            -- first built
        SELECT TOP (1)
               database_id = sy.database_id
              ,object_id   = sy.object_id
              ,index_id    = sy.r_index_id
          FROM [##SQLXL_Index_Synergies] AS sx
          JOIN [##SQLXL_Index_Synergies] AS sy
            ON sx.database_id       = sy.database_id
           AND sx.object_id         = sy.object_id
           AND sx.synergy_columns   = sy.synergy_columns
           AND N'F'                 = sy.l_type             -- foreign key constraint
           AND N'F'                 = sy.r_type             -- foreign key constraint
          JOIN [##SQLXL_Index_sys_objects]  AS obj
            ON sy.database_id       = obj.database_id
           AND sy.r_index_id        = obj.object_id         -- obj.index_id is the FKC ID

         WHERE synergy_fkc.dup         > 0
           AND synergy_fkc.database_id = sx.database_id
           AND synergy_fkc.object_id   = sx.object_id       -- for System, History, Constraints
           AND synergy_fkc.index_id    = sx.l_index_id
           AND N'F'               = sx.l_type               -- foreign key constraint
           AND N'F'               = sx.r_type               -- foreign key constraint
           AND sx.synergy_columns = sy.synergy_columns
         ORDER BY
               obj.is_disabled
              ,obj.is_not_trusted
              ,sx.key_ordinal             DESC
              ,CASE WHEN obj.delete_referential_action = 0 THEN 4   -- 0 = No action,1 = Cascade,2 = Set null,3 = Set default
                    ELSE obj.delete_referential_action
               END
              ,CASE WHEN obj.update_referential_action = 0 THEN 4   -- 0 = No action,1 = Cascade,2 = Set null,3 = Set default
                    ELSE obj.update_referential_action
               END
              ,obj.is_published           DESC
              ,obj.is_schema_published    DESC
              ,obj.is_not_for_replication                   -- 1 is "bad" since influences replication performance but was user created
              ,obj.is_system_named        DESC
              ,obj.object_id                                -- if sorting to this point get the first one created
       ) AS best_synergy_fkc
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Foreign Key Constraints - Retain, Review, Remove'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REMOVE - Nonclustered rowstore with key sequence matching Clustered index
-- PRESCRIBE - REVIEW - Check if application is using this index in a skipped key scan
-- Moved here since no good reason for index to exist except application full scans index key elements
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_Compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription =  N'Remove'
                    + CHAR(096) + N' Synergy CX Seq'
                                + CASE WHEN tgt.is_primary_key       = 1
                                       THEN CHAR(096) + N' Add PK to CX'
                                       WHEN tgt.is_unique_constraint = 1
                                        AND cx.is_primary_key        = 0
                                        AND cx.is_unique_constraint  = 0
                                       THEN CHAR(096) + N' Add UNIQ to CX'
                                       WHEN tgt.is_unique            = 1
                                        AND cx.is_primary_key        = 0
                                        AND cx.is_unique_constraint  = 0
                                        AND cx.is_unique             = 0
                                       THEN CHAR(096) + N' Add UNIQ to CX'
                                       ELSE N''
                                  END
                    + CHAR(096) + N'Review'
                    + CHAR(096) + N' Check app for NCX scan'
  FROM (--
        SELECT tgt.*
          FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
          JOIN [##SQLXL_Index_sys_objects] AS obj
            ON tgt.database_id = obj.database_id
           AND tgt.object_id   = obj.object_id
         WHERE tgt.type          = N'2'  -- nonclustered rowstore index
           AND tgt.prescription IS NULL
           AND obj.type         <> N'IT' -- internal tables
       ) AS tgt -- [##SQLXL_Index_compilation]
  JOIN [##SQLXL_Index_compilation] AS cx
    ON tgt.database_id = cx.database_id
   AND tgt.object_id   = cx.object_id
   AND tgt.index_id    > cx.index_id
   AND N'1'            = cx.type         -- clustered rowstore index
   AND tgt.sub_type    = cx.sub_type
 WHERE EXISTS (-- check for nonclustered index matching column sequence of clustered index
               SELECT 1/0
                 FROM [##SQLXL_Index_Synergies] AS idxs          -- candidate matching index elements
                WHERE tgt.database_id      = idxs.database_id
                  AND tgt.object_id        = idxs.object_id
                  AND tgt.index_id         = idxs.l_index_id
                  AND tgt.type             = idxs.l_type
                  AND tgt.sub_type         = idxs.l_sub_type
                  AND N'D'                 = idxs.synergy_prefix -- duplicate index
                  AND N'2'                 = idxs.r_type
              )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Remove - Nonclustered rowstore with key sequence matching Clustered index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - RETAIN - System-Maintained History Table - CDC
-- PRESCRIBE - RETAIN - System-Maintained History Table - Temporal
-- PRESCRIBE - RETAIN - System-Maintained History Table - Ledger
-- PRESCRIBE - RETAIN - Internal Tables - Temporal
-- PRESCRIBE - RETAIN - Internal Tables - XML
-- PRESCRIBE - RETAIN - Internal Tables - fulltext
-- PRESCRIBE - RETAIN - Internal Tables - Spatial
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = obj_type_hdr
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type      = N'I'    -- index level composite record
   AND obj_type_hdr IN (N'HST' -- History/archive table
                       ,N'INT' -- system/internal table
                       )
   AND type         <> N'M'    -- missing nonclustered rowstore indexes
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - System Internal & History tables'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - RETAIN - Base Table Objects - Clustered index on Rowstore
-- PRESCRIBE - RETAIN - Base Table Objects - Clustered Columnstore table
-- PRESCRIBE - RETAIN - Base Table Objects - Heaps on Memory Tables
-- PRESCRIBE - RETAIN - Base Table Objects - Nonclustered rowstores on Memory Tables
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = IIF(obj.is_memory_optimized = 1,i.obj_type_dtl + N' ',N'')
                     + i.idx_type_hdr
                     + IIF(i.is_primary_key = 1,N' PK',N'')
  FROM [##SQLXL_Index_compilation] AS i
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id
 WHERE rec_type = N'I'                           -- index level composite record
   AND (   i.type IN (N'1'                       -- clustered rowstore index
                     ,N'5'                       -- clustered columnstore
                     )
        OR (    obj.is_memory_optimized = 1      -- memory optimized
            AND (   i.type              = N'0'   -- rowstore heap, basic storage structure of in-memory
                 OR i.is_primary_key    = 1      -- primary key on memory optimized, similar to clustered rowstore index
                )
           )
      )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - underlying persisted data tables - CX, CCS, XTP HP'          -- keep in synch with idx_type_hdr, obj_type_dtl
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - RETAIN - index types - XML
-- PRESCRIBE - RETAIN - index types - JSON
-- PRESCRIBE - RETAIN - index types - Spatial
-- PRESCRIBE - RETAIN - index types - Nonclustered Columnstore
-- PRESCRIBE - RETAIN - index types - Hash on
-- PRESCRIBE - RETAIN - index types - Full Text
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = idx_type_hdr
  FROM [##SQLXL_Index_compilation]     -- only table source in query
 WHERE rec_type = N'I'                 -- index level composite record
   AND type  IN (N'3'                  -- XML index
                ,N'4'                  -- Spatial
                ,N'6'                  -- Nonclustered ColumnStore
                ,N'7'                  -- Hash on in-memory (XTP)
                ,N'9'                  -- JSON                                                    -- <FUTURE> JSON
                ,N'T'                  -- full-text index of a tabular object
                )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - specialty indexes - XML, SPT, NCS, FTX'                                   -- Keep in syncg with idx_type_hdr
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- PRESCRIBE - RETAIN - Required by others: Foreign Key Constraint reference
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = N'FKC Reference'
  FROM (-- get count of Foreign Key Constraints ("Parent" or referring) to each referenced table and unique index
        SELECT database_id
              ,referenced_object_id
              ,key_index_id
          FROM [##SQLXL_Index_sys_objects]
         WHERE type = N'F'
         GROUP BY
               database_id
              ,referenced_object_id
              ,key_index_id
       ) AS ref

  JOIN [##SQLXL_Index_compilation] AS i
    ON ref.database_id          = i.database_id
   AND ref.referenced_object_id = i.object_id
   AND ref.key_index_id         = i.index_id
   AND i.type                  IN (N'1' -- clustered rowstore index
                                  ,N'2' -- nonclustered rowstore index
                                  )
   AND 0                        = i.sub_type

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Foreign Key Constraint reference'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- PRESCRIBE - RETAIN - Required by others: Change Data Capture (CDC) Table - Primary Key or unique
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = N'Used by CDC'
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id
   AND i.name        = obj.cdc_index_name
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Change Data Capture (CDC) Table - Primary Key or unique'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- PRESCRIBE - RETAIN - Required by others: Temporal (SVN) Table - Primary Key
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = N'Used by SVN'
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN [##SQLXL_Index_sys_objects] AS tbl
    ON i.database_id = tbl.database_id
   AND i.object_id   = tbl.object_id
 WHERE 2 = tbl.temporal_type -- SYSTEM_VERSIONED_TEMPORAL_TABLE
   AND 1 = i.is_primary_key
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Temporal (SVN) Table - Primary Key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- PRESCRIBE - RETAIN - Required by others: Ledger Tables (2022+) - Primary Key
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = N'Used by Ledger'
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN [##SQLXL_Index_sys_objects] AS tbl
    ON i.database_id = tbl.database_id
   AND i.object_id   = tbl.object_id
 WHERE (   2 = tbl.ledger_type -- UPDATABLE_LEDGER_TABLE
        OR 3 = tbl.ledger_type -- APPEND_ONLY_LEDGER_TABLE
       )
   AND 1     = i.is_primary_key
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Ledger Table (2022+) - Primary Key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- PRESCRIBE - RETAIN - Required by others: XML Index
-- PRESCRIBE - RETAIN - Required by others: Spatial (SPT) Index - can be multiple spatial indexes using a primary key
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc = N'Retain'
      ,sort        = @srt
      ,prescription = N'Used by' + COALESCE(N' ' + x.idx_type_hdr,N'') + COALESCE(N' ' + s.idx_type_hdr,N'')
  FROM (-- All clustered primary key "index" records
        SELECT database_id,object_id,index_id,type,sub_type
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type       = N'I' -- index level composite record
           AND is_primary_key = 1    -- primary key
       ) AS i
  LEFT OUTER
  JOIN (-- All XML indexes
        SELECT database_id,object_id
              ,idx_type_hdr
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type = N'I' -- index level composite record
           AND type     = N'3' -- XML index
         GROUP BY
               database_id,object_id
              ,idx_type_hdr
       ) AS x
    ON i.database_id      = x.database_id
   AND i.object_id        = x.object_id
  LEFT OUTER
  JOIN (-- All SPATIAL indexes
        SELECT database_id,object_id
              ,idx_type_hdr
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type = N'I' -- index level composite record
           AND type     = N'4' -- Spatial Index
         GROUP BY
               database_id,object_id
              ,idx_type_hdr
       ) AS s
    ON i.database_id      = s.database_id
   AND i.object_id        = s.object_id
 WHERE x.idx_type_hdr IS NOT NULL
    OR s.idx_type_hdr IS NOT NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: XML Index, Spatial (SPT) Index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- PRESCRIBE - RETAIN - Required by others: Full Text (FTX) Index - Primary Key or Unique
SELECT ftx.database_id
      ,ftx.object_id
      ,index_id        = ftx.unique_index_id
      ,idx.type
      ,idx.sub_type
      ,action_desc     = N'Retain'
      ,sort            = @srt
      ,prescription    = N'Used by FTX'
  FROM [##SQLXL_Index_sys_fulltext_indexes] AS ftx
  JOIN [##SQLXL_Index_sys_indexes]          AS idx
    ON ftx.database_id     = idx.database_id
   AND ftx.object_id       = idx.object_id
   AND ftx.unique_index_id = idx.index_id
   AND idx.type IN (N'1' -- clustered rowstore index
                   ,N'2' -- nonclustered rowstore index
                   )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Full Text (FTX) Index - Primary Key or Unique'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
-- PRESCRIBE - RETAIN - Required by others: Constraints - Primary Key - NOTE: does not filter out NOCHECKS <FUTURE>
-- PRESCRIBE - RETAIN - Required by others: Constraints - Unique Key  - NOTE: does not filter out NOCHECKS <FUTURE>
SELECT obj.database_id
      ,object_id    = obj.parent_object_id                                                          -- for System, History, Constraints
      ,index_id     = obj.key_unique_index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Retain'
      ,sort         = @srt
      ,prescription = N'Used by ' + CASE obj.type WHEN N'PK' THEN N'PKC'
                                                  WHEN N'UQ' THEN N'UQC'
                                                  ELSE obj.type
                                    END
  FROM [##SQLXL_Index_sys_objects] AS obj
  JOIN [##SQLXL_Index_sys_indexes] AS i
    ON obj.database_id         = i.database_id
   AND obj.object_id           = i.object_id
   AND obj.key_unique_index_id = i.index_id
   AND i.type IN (N'1'  -- clustered rowstore index
                 ,N'2'  -- nonclustered rowstore index
                 )
 WHERE obj.key_unique_index_id > 0
   AND obj.type <> N'F' -- foreign key constraint
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - Required by others: Constraints - Primary Key, Unique Key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - RETAIN - "Best" covering index for Active Foreign Key - clustered over nonclustered, no filter, most read, narrowest, fewest keys
--                                                       , narrowest includes
-- PRESCRIBE - REVIEW - "Best" covering index for InActive Foreign Key - clustered over nonclustered, no filter, most read, narrowest, fewest keys
--                                                         , narrowest includes
--          "Best" previously computed in "Foreign Key Analysis". Grouped in case multiple FK covered by same index
-- NOTE: Can't use Nonclustered Columnstore to cover a Foreign Key Parent
-- NOTE: Returns values only if variable @cover_foreign_keys = 1
-- @cover_foreign_keys:
--  0 = no need to continue to cover Foreign Key Constraints, do not create new indexes based on MISSING index recommendations
--  1 = continue to cover keys that are TRUSTED, ENABLED, and REPLICATED & have referential action enabled
--      Includes creating new indexes based on MISSING index recommendations
--  2 = continue to cover all Foreign Key Constraints that are TRUSTED, ENABLED, and REPLICATED
--      Includes creating new indexes based on MISSING index recommendations
--  3 = continue to cover all Foreign Key Constraints regardless of status
--      Includes creating new indexes based on MISSING index recommendations
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0
       ,@cover_foreign_keys TINYINT = 2;
--*/
SELECT fk.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,IIF(fk.active = 1,N'Retain',N'Review')
      ,@srt
      ,prescription = N'Covers ' + IIF(fk.active = 1,N'',N'NFC ') + N'FKC'
  FROM (-- get Foreign Key Constraints to cover based on passed in parameter

/*** LOCAL TESTING ***
DECLARE @srt INT = 0
       ,@cover_foreign_keys TINYINT = 2;
--*/
        SELECT database_id,object_id
              ,is_disabled
              ,is_not_for_replication
              ,is_not_trusted
              ,delete_referential_action
              ,update_referential_action
              ,active = IIF(    is_disabled    = 0    -- are enabled
                            AND is_not_trusted = 0    -- and trusted
                           ,1
                           ,0)
          FROM [##SQLXL_Index_sys_objects] AS fk
         WHERE 1 = 1   -- simplifies adding additional clauses for testing
           AND fk.type = N'F'                         -- foreign key constraint
           AND (   (    @cover_foreign_keys = 1
                    AND (    is_disabled    = 0
                         AND is_not_trusted = 0
                        )
                    AND (   delete_referential_action > 0
                         OR update_referential_action > 0
                        )
                   )
                OR (    @cover_foreign_keys = 2
                    AND (    is_disabled    = 0
                         AND is_not_trusted = 0
                        )
                   )
                OR (    @cover_foreign_keys = 3
                   )
               )
       ) AS fk
  JOIN (-- get best covering indexes for foreign key constraints
        SELECT database_id,object_id,index_id,type,sub_type
              ,fkc_best_covering_idx_ID
          FROM [##SQLXL_Index_compilation]
         WHERE N'F' = type                            -- foreign key constraint
           AND 0    < fkc_best_covering_idx_ID
       ) AS fx
    ON fk.database_id      = fx.database_id
   AND fk.object_id        = fx.object_id
   AND fk.object_id        = fx.index_id
  JOIN (-- rowstore indexes eligible to cover a foreign key constraint
        SELECT database_id,object_id,index_id,type,sub_type
          FROM [##SQLXL_Index_compilation]
         WHERE type    IN (N'1' -- clustered rowstore index
                          ,N'2' -- nonclustered rowstore index
                          )
       ) AS i
    ON fk.database_id              = i.database_id
   AND fk.object_id                = i.object_id
   AND fx.fkc_best_covering_idx_ID = i.index_id
 GROUP BY              -- needed because there can be redundant foreign keys
       fk.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,fk.active
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - Best existing covering index for FKC'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - RETAIN - Nonclustered rowstore indexes with NO WRITES & Poor usage
-- PRESCRIBE - REVIEW - Nonclustered rowstore indexes with NO WRITES & Low usage
-- PRESCRIBE - REMOVE - Nonclustered rowstore indexes with NO WRITES & No usage
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = CASE WHEN i.ops_read_to_parent_PCT > 1.0 OR i.ius_read_to_parent_PCT > 1.0
                           THEN N'Retain'
                           WHEN i.ops_read_to_parent_PCT > 0.0 OR i.ius_read_to_parent_PCT > 0.0
                           THEN N'Review'
                           ELSE N'Remove'
                      END
      ,@srt
      ,prescription = CASE WHEN i.ops_read_to_parent_PCT > 0.5 OR i.ius_read_to_parent_PCT > 0.5
                           THEN N'No WRT some RDS'
                           WHEN i.ops_read_to_parent_PCT > 0.0 OR i.ius_read_to_parent_PCT > 0.0
                           THEN N'No WRT low RDS'
                           ELSE N'No WRT No RDS'
                      END
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 WHERE i.type                 = N'2' -- Nonclustered rowstore index
   AND i.ops_total_write_CNT  = 0
   AND i.ius_user_updates_CNT = 0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - Nonclustered rowstore indexes with NO WRITES & Poor/Low/No usage'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Update all Retained objects up to this point
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_Compilation]
   SET
/*** LOCAL TESTING ***
SELECT ref.database_id
      ,ref.object_id
      ,ref.index_id
      ,ref.type
      ,ref.sub_type,
--*/
       prescription = N'Retain'
                    + STUFF((-- list all prescriptions
                             SELECT CHAR(096) + N' ' + rex.prescription
                               FROM [##SQLXL_Index_prescription] AS rex
                              WHERE tgt.database_id      = rex.database_id
                                AND tgt.object_id        = rex.object_id
                                AND tgt.index_id         = rex.index_id
                                AND tgt.type             = rex.type
                                AND N'Retain'            = rex.action_desc
                              ORDER BY
                                    rex.srt
                                FOR XML PATH(N''), TYPE                                             -- prescriptions
                            ).value('.',N'NVARCHAR(MAX)')
                           ,1,1,N'') -- end of STUFF function
  FROM (-- list of "retained" indexes to update
        SELECT database_id,object_id,index_id,type,sub_type
          FROM [##SQLXL_Index_prescription]
         WHERE action_desc   = N'Retain'
           AND prescription IS NOT NULL
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) AS ref
  JOIN (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I') AS tgt     -- index level composite record
    ON ref.database_id   = tgt.database_id
   AND ref.object_id     = tgt.object_id
   AND ref.index_id      = tgt.index_id
   AND ref.type          = tgt.type
   AND ref.sub_type      = tgt.sub_type
   AND tgt.prescription IS NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Apply Retain labels to indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM [##SQLXL_Index_prescription]
 WHERE action_desc = N'Retain'        -- already updated appropriate values
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Clear out interim results table - Retain'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REQUEST - Heaps - Create CX using existing nonclustered rowstore index
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT obj.database_id
      ,obj.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Request'
      ,sort         = @srt
      ,prescription = N'CX ' + i.tbl_cx_uniq_ordered_column_TYP -- get autogen type
                    + IIF(uniq_idx.index_id IS NOT NULL
                         , IIF(   uniq_idx.is_primary_key       = 1
                               OR uniq_idx.is_unique_constraint = 1
                              , IIF(uniq_idx.is_primary_key       = 1,N' USE IDX PK ' + QUOTENAME(uniq_idx.index_id),N'')
                              + IIF(uniq_idx.is_unique_constraint = 1,N' USE IDX UQ ' + QUOTENAME(uniq_idx.index_id),N'')
                              ,N' USE IDX ' + QUOTENAME(uniq_idx.index_id)
                              )
                         + IIF(uniq_idx.is_primary_key       = 1,CHAR(096) + N' Make PK',N'')
                         + IIF(uniq_idx.is_unique_constraint = 1,CHAR(096) + N' Make UNIQUE',N'')
                         ,N' See candidate')
  FROM (-- heaps with unique sequence columns
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE type = N'0'                                  -- rowstore heap
           AND tbl_cx_uniq_ordered_column_TYP IS NOT NULL
       ) AS i

  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id
   AND N'U'          = obj.type                             -- user table aggregate record
   AND 0             = obj.is_memory_optimized              -- Memory-optimized tables don't have CLUSTERED INDEXES, just HEAPS

  JOIN (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'P') AS p  -- parent level aggregate record
    ON i.database_id      = p.database_id
   AND i.object_id        = p.object_id
   AND (   p.ius_user_total_CNT     > 0                     -- need to have some usage metrics
        OR p.ops_total_contacts_CNT > 0                     -- need to have some usage metrics
       )

 OUTER
 APPLY (--
        SELECT TOP (1)
               ic.index_id
              ,ix.is_primary_key
              ,ix.is_unique_constraint
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_indexes]       AS ix
            ON ic.database_id                  = ix.database_id
           AND ic.object_id                    = ix.object_id
           AND ic.index_id                     = ix.index_id
           AND ic.type                         = ix.type
         WHERE i.database_id                   = ic.database_id
           AND i.object_id                     = ic.object_id
           AND i.tbl_cx_uniq_ordered_column_id = ic.column_id
           AND ic.type                         = N'2'       -- nonclustered rowstore index
           AND 1                               = ic.idx_column_display_sequence
         ORDER BY
               ix.is_primary_key       DESC
              ,ix.is_unique_constraint DESC
              ,ix.index_id
       ) AS uniq_idx

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Request - clustered index on heaps with UNIQUE ORDERED columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REMOVE - Nonclustered indexes on HEAPS replaced by new CLUSTERED index using Sequential Unique key column
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT i.database_id,i.object_id,i.index_id,i.type,
--*/
       prescription = N'Remove' + CHAR(096) + N' Use new CX on ' + tgt.tbl_cx_uniq_ordered_column_TYP
  FROM (-- rowstore heaps with candidate unique ordered columns
        SELECT database_id,object_id,index_id,type,sub_type
              ,tbl_cx_uniq_ordered_column_id
              ,tbl_cx_uniq_ordered_column_TYP
              ,prescription
          FROM [##SQLXL_Index_compilation] WITH (TABLOCKX)
         WHERE rec_type = N'I'                                   -- index level composite record
           AND type     = N'0'                                   -- rowstore heap
           AND sub_type = 0
           AND tbl_cx_uniq_ordered_column_id > 0
       ) AS tgt -- [##SQLXL_Index_compilation]
  JOIN [##SQLXL_Index_sys_objects]       AS obj
    ON tgt.database_id = obj.database_id
   AND tgt.object_id   = obj.object_id
   AND 0             = obj.is_memory_optimized
  JOIN [##SQLXL_Index_sys_index_columns] AS i
    ON tgt.database_id                   = i.database_id
   AND tgt.object_id                     = i.object_id
   AND N'2'                              = i.type                -- nonclustered rowstore index
   AND tgt.tbl_cx_uniq_ordered_column_id = i.column_id
   AND 1                                 = i.idx_column_display_sequence
  JOIN [##SQLXL_Index_compilation]       AS p
    ON N'P'          = p.rec_type                                -- parent level aggregate record
   AND i.database_id = p.database_id
   AND i.object_id   = p.object_id
 WHERE (   p.ius_user_total_CNT     > 0                          -- need to have some usage metrics
        OR p.ops_total_contacts_CNT > 0                          -- need to have some usage metrics
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Remove - replace nonclustered on former heaps'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REQUEST - "Best" Missing index for covering uncovered Foreign Key Constraints - key columns only, no included columns
--------------------------------------------------------------------------------------------------------------------------------------------
IF @cover_foreign_keys > 0 BEGIN
   SET @srt += 1;

   INSERT
     INTO [##SQLXL_Index_prescription]
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
   SELECT database_id,object_id,index_id,type,sub_type
         ,action_desc  = N'Request'
         ,sort         = @srt
         ,prescription = N'MIX > FKC'
                       + CHAR(096) + N' ' + CAST(fkc_candidate_covering_MIX_ID AS NVARCHAR(20))
        FROM [##SQLXL_Index_compilation]
       WHERE type = N'F'
         AND fkc_candidate_covering_MIX_ID > 0
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);
END; -- IF @cover_foreign_keys > 0

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Request - best missing index to cover foreign key constraint'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REQUEST - Heaps - Create clustered index using unique nonclustered rowstore (no auto-generated unique Column)
--                 - smallest, uniquest, fewest keys, most usedest
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Request'
      ,sort         = @srt
      ,prescription = N'CX from NCX ' + CAST(i.tbl_smallest_uniq_Nonclustered_idx AS NVARCHAR(20)) -- Keep in synch with idx_type_hdr
  FROM [##SQLXL_Index_sys_objects] AS obj
  JOIN [##SQLXL_Index_compilation] AS i
    ON obj.database_id = i.database_id
   AND obj.object_id   = i.object_id
   AND N'I'            = i.rec_type                     -- index level composite record
   AND N'0'            = i.type                         -- rowstore heap
   AND 0               = i.sub_type
   AND i.tbl_smallest_uniq_Nonclustered_idx IS NOT NULL

  JOIN [##SQLXL_Index_compilation] AS p
    ON obj.database_id = p.database_id
   AND obj.object_id   = p.object_id
   AND N'P'            = p.rec_type                     -- parent level aggregate record
   AND (   p.ius_user_total_CNT     > 0                 -- need to have some usage metrics
        OR p.ops_total_contacts_CNT > 0                 -- need to have some usage metrics
       )

  LEFT OUTER
  JOIN [##SQLXL_Index_prescription] AS a
    ON obj.database_id   = a.database_id
   AND obj.object_id     = a.object_id
   AND i.index_id        = a.index_id
   AND i.type            = a.type
   AND i.sub_type        = a.sub_type
 WHERE obj.type      = N'U'                             -- User Table
   AND obj.is_memory_optimized = 0                      -- Memory-optimized tables don't have CLUSTERED INDEXES
   ---------------------------------------------------------
   AND a.type                 IS NULL                   -- not already flagged above
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Request - Promote nonclustered to clustered on HEAP rowstore table'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REQUEST - Heaps - Create CX from smallest "unique" column greater than a BIT
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Request'
      ,sort         = @srt
      ,prescription = N'CX Candidate Col'
  FROM [##SQLXL_Index_sys_objects] AS obj
  JOIN [##SQLXL_Index_compilation] AS i
    ON obj.database_id = i.database_id
   AND obj.object_id   = i.object_id
   AND N'I'            = i.rec_type            -- index level composite record
   AND N'0'            = i.type                -- rowstore heap
   AND 0               = i.sub_type
   AND i.key_column_info LIKE N'<HEAP> Candidate cluster%'

  JOIN [##SQLXL_Index_compilation] AS p        -- parent level aggregate record
    ON obj.database_id = p.database_id
   AND obj.object_id   = p.object_id
   AND N'P'            = p.rec_type            -- parent level aggregate record
   AND (   p.ius_user_total_CNT     > 0        -- need to have some usage metrics
        OR p.ops_total_contacts_CNT > 0        -- need to have some usage metrics
       )

  LEFT OUTER
  JOIN [##SQLXL_Index_prescription]  AS a
    ON i.database_id      = a.database_id
   AND i.object_id        = a.object_id
   AND i.index_id         = a.index_id
   AND i.type             = a.type
   AND i.sub_type        = a.sub_type

 WHERE obj.type                = N'U'          -- User Table
   AND obj.is_memory_optimized = 0             -- Memory-optimized tables don't have CLUSTERED INDEXES
   ---------------------------------------------------------
   AND a.type                     IS NULL      -- not already flagged above
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Request - Unique-est column on HEAP'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REQUEST - Heaps with Activity - Indicate a clustered index will help
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Request'
      ,sort         = @srt
      ,prescription = N'Create Uniq CX'
  FROM [##SQLXL_Index_sys_objects] AS obj
  JOIN [##SQLXL_Index_compilation] AS i
    ON obj.database_id = i.database_id
   AND obj.object_id   = i.object_id
   AND N'I'            = i.rec_type        -- index level composite record
   AND N'0'            = i.type            -- rowstore heap

  JOIN [##SQLXL_Index_compilation] AS p    -- parent level aggregate record
    ON obj.database_id = p.database_id
   AND obj.object_id   = p.object_id
   AND N'P'            = p.rec_type        -- parent level aggregate record
   AND (   p.ius_user_total_CNT     > 0    -- table need to have some usage metrics
        OR p.ops_total_contacts_CNT > 0    -- table need to have some usage metrics
       )

  LEFT OUTER
  JOIN [##SQLXL_Index_prescription]  AS a
    ON i.database_id      = a.database_id
   AND i.object_id        = a.object_id
   AND i.index_id         = a.index_id
   AND i.type             = a.type
   AND i.sub_type         = a.sub_type

 WHERE obj.type                    = N'U'  -- User Table
   AND obj.is_memory_optimized     = 0     -- Memory-optimized tables don't have CLUSTERED INDEXES
   ---------------------------------------------------------
   AND a.type                     IS NULL -- not already flagged above
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Request - Heap benefitting from CX'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REQUEST - SQL Table-Valued Functions without Clustered Index
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Request'
      ,sort         = @srt
      ,prescription = N' Create Uniq CX'
  FROM [##SQLXL_Index_sys_objects] AS obj
  JOIN [##SQLXL_Index_compilation] AS i
    ON obj.database_id = i.database_id
   AND obj.object_id   = i.object_id
   AND N'TF'           = obj.type
  LEFT OUTER
  JOIN [##SQLXL_Index_prescription] AS a
    ON obj.database_id = a.database_id
   AND obj.object_id   = a.object_id
   AND i.index_id      = a.index_id
   AND i.type          = a.type
   AND i.sub_type      = a.sub_type
 WHERE obj.type   = N'TF' -- SQL table-valued-function SQL 2012+
   AND i.rec_type = N'I'  -- index level composite record
   AND i.type     = N'0'  -- rowstore heap
   AND a.type    IS NULL  -- not already flagged above
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Request -SQL  Table Valued Function without unique clustering index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Update REQUEST (CREATE)
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type,
--*/
       prescription = COALESCE(tgt.prescription + CHAR(096),N'')
                    + N'Request'
                    + (--
                       SELECT CHAR(096) + N' ' + rex.prescription
                         FROM [##SQLXL_Index_prescription]       AS rex
                        WHERE tgt.database_id      = rex.database_id
                          AND tgt.object_id        = rex.object_id
                          AND tgt.index_id         = rex.index_id
                          AND tgt.type             = rex.type
                          AND N'Request'           = rex.action_desc
                        ORDER BY
                              rex.srt
                          FOR XML PATH(N''), TYPE                                                   -- prescriptions
                      ).value('.',N'NVARCHAR(MAX)')

  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I'             -- index level composite record
       ) AS tgt
  JOIN (--
        SELECT database_id,object_id,index_id,type,sub_type
          FROM [##SQLXL_Index_prescription]
         WHERE action_desc  = N'Request'
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) AS ref
    ON tgt.database_id      = ref.database_id
   AND tgt.object_id        = ref.object_id
   AND tgt.index_id         = ref.index_id
   AND tgt.type             = ref.type
   AND tgt.sub_type         = ref.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Apply Request labels to indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM [##SQLXL_Index_prescription]
 WHERE action_desc = N'Request' -- already updated appropriate values
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Clear out interim results table - Request'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- BEGIN Special Cases - Heaps not flagged as candidates for Clustered index
\******************************************************************************************************************************************/
-- PRESCRIBE - RETAIN - Unused Heaps not flagged as candidates for Clustering index
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription = N'Retain HP'
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)   -- only table source in query
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON tgt.database_id = obj.database_id
   AND tgt.object_id   = obj.object_id
   AND 0               = obj.is_memory_optimized            -- Memory-optimized tables don't have CLUSTERED INDEXES
 WHERE obj.type         = N'U'  -- User Table
   AND tgt.rec_type     = N'I'  -- index level composite record
   AND tgt.type         = N'0'  -- rowstore heap
   AND tgt.prescription IS NULL -- not already flagged above
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - unused heap'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- END Special Cases
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
-- What about a Nonclustered ColumnStore? Gotta be on 2016+ to be updatable
\******************************************************************************************************************************************/
--------------------------------------------------------------------------------------------------------------------------------------------
-- Find indexes with table options and key column data types that can't be included in Nonclustered Columnstore indexes
-- Create temp table and use this list to exclude them below
-- For further reference see https:/docs.microsoft.com/en-us/sql/t-sql/statements/create-columnstore-index-transact-sql
--------------------------------------------------------------------------------------------------------------------------------------------
SELECT ic.database_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
  INTO #index_Key_DataType_Not_Eligible_for_NCS
/*** LOCAL TESTING ***
SELECT ic.database_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
--*/
  FROM [##SQLXL_Index_sys_index_columns] AS ic
  JOIN [##SQLXL_Index_sys_columns]       AS c
    ON ic.database_id = c.database_id
   AND ic.object_id   = c.object_id
   -- No object_id column in XL_IDX_column table
   AND ic.column_id   = c.column_id
 WHERE 1 = 1   -- simplifies adding additional clauses for testing
   AND CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 13 -- SQL 2016+ introduced updatable nonclustered columnstore
   AND CAST(SERVERPROPERTY(N'EngineEdition')       AS INT) <> 2  -- can't run columnstore on standard edition
   AND ic.type              IN (N'2'  -- nonclustered rowstore index
                               ,N'M'  -- missing nonclustered rowstore index
                               )
   AND ic.is_included_column = 0                         -- only care about KEY columns in new index
   AND 0                     = c.is_columnstore_eligible -- previously computed
 GROUP BY
       ic.database_id
      ,ic.object_id
      ,ic.index_id
      ,ic.type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' #index_Key_DataType_Not_Eligible_for_NCS'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- List all Nonclustered and missing indexes that are candidates to be replaced by a Nonclustered Columnstore index
-- For Nonclustered index, must have been read/written to, and is not a "principally" used index
--------------------------------------------------------------------------------------------------------------------------------------------
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,excluded = CAST(CASE WHEN i.is_primary_key   = 1      THEN 1
                            WHEN obj.cdc_index_name = i.name THEN 1
                            ELSE 0
                       END AS TINYINT)
      ,ius      = i.ius_read_to_parent_PCT
      ,rtw      = i.ius_read_to_write_RAT
      ,ios      = i.ops_read_to_parent_PCT
      ,stw      = i.ops_read_to_write_RAT
  INTO #Candidate_indexes_for_NCS
/*** LOCAL TESTING ***
SELECT i.database_id,i.object_id,i.index_id,i.type
      ,excluded = CAST(CASE WHEN i.is_primary_key   = 1      THEN 1
                            WHEN obj.cdc_index_name = i.name THEN 1
                            ELSE 0
                       END AS TINYINT)
      ,ius      = i.ius_read_to_parent_PCT
      ,rtw      = i.ius_read_to_write_RAT
      ,ios      = i.ops_read_to_parent_PCT
      ,stw      = i.ops_read_to_write_RAT
--*/
  FROM [##SQLXL_Index_sys_objects] AS obj

  JOIN (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'I') AS i  -- index level composite record
    ON obj.database_id = i.database_id
   AND obj.object_id   = i.object_id

  LEFT OUTER
  JOIN #index_Key_DataType_Not_Eligible_for_NCS AS x
    ON obj.database_id = x.database_id
   AND obj.object_id   = x.object_id
   AND i.index_id      = x.index_id

 WHERE 1 = 1   -- simplifies adding additional clauses for testing
   AND CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 13 -- SQL 2016+ introduced updatable nonclustered columnstore
   AND CAST(SERVERPROPERTY(N'EngineEdition')       AS INT) <> 2  -- can't run columnstore on standard edition
   --------------------------------------------------------
   AND i.obj_type_hdr                        NOT IN (N'HST' -- Not a History/archive table
                                                    ,N'INT' -- Not a system/internal table
                                                    )
   AND COALESCE(obj.nonclustered_columnstore_CNT,0) = 0     -- Nonclustered columnstore doesn't alreay exist on table
   AND x.index_id                                IS NULL    -- all index key columns are eligible to be in Nonclustered columnstore
   --------------------------------------------------------
   AND (   (    i.type                            = N'2'    -- nonclustered rowstore index
            AND (   i.ops_read_to_parent_PCT      < 2.0     -- Read Usage < 2% of all reads on this table/view
                 OR i.ops_read_to_write_RAT       < 4.0     -- Reads/Writes < 4 Usage stats - writes = 4: memory lock, memory, index, log
                )
           )
        OR (    i.type                            = N'M'    -- missing nonclustered rowstore index
            AND i.ius_read_to_parent_PCT          < 2.0     -- MIX Usage > 2.0% of all reads on this table/view
           )
       )
   AND COALESCE(i.prescription,N'') NOT LIKE N'Remove%'     -- not flagged above
   AND COALESCE(i.prescription,N'') NOT LIKE N'Retain%'     -- not flagged above
   AND COALESCE(i.prescription,N'') NOT LIKE N'Request%'    -- not flagged above as Missing index to create to cover a foreign key constraint
                                                            -- NOTE: Nonclustered Columnstores cannot cover a Foreign Key!
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Create temp table #Candidate_indexes_for_NCS'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/*** LOCAL TESTING ***
SELECT * FROM #index_Key_DataType_Not_Eligible_for_NCS ORDER BY 1,2,3
SELECT * FROM #Candidate_indexes_for_NCS ORDER BY 1,2,4,3
*/

--------------------------------------------------------------------------------------------------------------------------------------------
-- Total up the unique key columns & identify Nonclustered Columnstore candidates
--------------------------------------------------------------------------------------------------------------------------------------------
;WITH cte AS (--
SELECT database_id,object_id
      ,ncx = SUM(IIF(type = N'2',1,0)) -- nonclustered rowstore index
      ,mix = SUM(IIF(type = N'M',1,0)) -- missing nonclustered rowstore index
  FROM #Candidate_indexes_for_NCS
 WHERE excluded = 0
 GROUP BY
       database_id,object_id
)
SELECT database_id,object_id
  INTO #Candidate_for_NCS
  FROM cte
 WHERE COALESCE(ncx,0) + COALESCE(mix,0) > 3
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Create #Candidate_for_NCS'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REPLACE - NEW Nonclustered Columnstore index to replace existing lo-use Nonclustered rowstores and candidate missing indexes
-- DOES NOT NEED a unique index to refer to
-- Omit tables with an already existing Nonclustered Columnstore
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription = COALESCE(tgt.prescription + CHAR(096),N'') -- should not be anything added before this point
                    + N'Request new NCS'                        -- NOTE: keep in synch with related ACTION codes
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_compilation] WITH (TABLOCKX)
         WHERE rec_type = N'P'                   -- parent level aggregate record
           AND type     = N'U'                   -- User Table
       ) AS tgt -- [##SQLXL_Index_compilation]

  LEFT OUTER
  JOIN (-- tables that already have a Nonclustered or a Clustered Columnstore
        SELECT database_id,object_id
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type = N'I'   -- index level composite record
           AND type    IN (N'5'  -- Clustered columnstore - SQL 2016+ allows for Nonclustered rowstore indexes on clustered Columnstore
                          ,N'6'  -- Nonclustered columnstore - updatable with SQL 2016+
                          )
         GROUP BY
               database_id,object_id
       ) AS ncs
    ON tgt.database_id      = ncs.database_id
   AND tgt.object_id        = ncs.object_id

  JOIN #Candidate_for_NCS  AS c
    ON tgt.database_id      = c.database_id
   AND tgt.object_id        = c.object_id
   AND tgt.index_id         = c.object_id

 WHERE 1 = 1   -- simplifies adding additional clauses for testing
   AND CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 13 -- SQL 2016+ introduced updatable nonclustered columnstore
   AND CAST(SERVERPROPERTY(N'EngineEdition')       AS INT) <> 2  -- can't run columnstore on standard edition
   --------------------------------------------------------
  AND ncs.object_id IS NULL  -- no existing Nonclustered columnstore on table
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' REPLACE - NEW Nonclustered Columnstore index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REPLACE - Nonclustered rowstore indexes, not Retained, replace with EXISTING Nonclustered Columnstore
-- PRESCRIBE - REPLACE - Nonclustered rowstore indexes, not Retained, replace with NEW Nonclustered Columnstore
-- PRESCRIBE - REJECT - Missing indexes, not Requested, accomodated by EXISTING Nonclustered Columnstore index
-- PRESCRIBE - REJECT - Missing indexes, not Requested, accomodated by NEW Nonclustered Columnstore
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription = IIF(tgt.type = N'M' -- missing nonclustered rowstore index
                         ,N'Reject'
                         ,N'Replace')
                    + CHAR(096)
                    + N' Use ' + IIF(p.new_ncs = 1,N'new',N'existing') + N' NCS'   -- NOTE: keep in synch with related ACTION codes
  FROM (-- nonclustered rowstore indexes and missing indexes
        SELECT *
          FROM [##SQLXL_Index_compilation] WITH (TABLOCKX)
         WHERE 1 = 1   -- simplifies adding additional clauses for testing
           AND CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 13 -- SQL 2016+ introduced updatable nonclustered columnstore
           AND CAST(SERVERPROPERTY(N'EngineEdition')       AS INT) <> 2  -- can't run columnstore on standard edition
           AND type IN (N'2' -- nonclustered rowstore index
                       ,N'M' -- missing nonclustered rowstore index
                       )
       ) AS tgt -- [##SQLXL_Index_compilation]
  JOIN (--
        SELECT database_id
              ,object_id
              ,new_ncs     = CAST(1 AS BIT)
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type     = N'P'                          -- parent level aggregate record
           AND prescription = N'Request new NCS'            -- NOTE: keep in synch with related ACTION codes

        UNION -- list of existing nonclustered columnstore indexes
        SELECT database_id
              ,object_id
              ,new_ncs = CAST(0 AS BIT)
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type = N'I' -- index level composite record
           AND type     = N'6' -- nonclustered columnstore index
       ) AS p
    ON tgt.database_id                            = p.database_id
   AND tgt.object_id                              = p.object_id
  LEFT OUTER
  JOIN #index_Key_DataType_Not_Eligible_for_NCS AS x        -- Indexes that have columns unusable in Nonclustered columnstore
    ON tgt.database_id                            = x.database_id
   AND tgt.object_id                              = x.object_id
   AND tgt.index_id                               = x.index_id
 WHERE x.index_id                                IS NULL    -- Index keys data types are allowed in Nonclustered columnstore
   AND (   COALESCE(tgt.ius_read_to_parent_PCT,0.0) < 1.0   -- not used too much
        OR tgt.type = N'M'                                  -- missing nonclustered rowstore index
       )
   -- Index hasn't been called out before for action
   AND COALESCE(tgt.prescription,N'') NOT LIKE N'Remove%'   -- not flagged above
   AND COALESCE(tgt.prescription,N'') NOT LIKE N'Retain%'   -- not flagged above
   AND COALESCE(tgt.prescription,N'') NOT LIKE N'Request%'  -- not flagged above as Missing index to create to cover a foreign key constraint
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Nonclustered Columnstores - Request, Replace, Reject'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REQUEST - High Value Missing indexes - Large Advantage, synergies addressed above
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type
--*/
       prescription = N'Request' + CHAR(096) + N' MIX Hi Gain'
                    + IIF(tgt.synergy_code IS NOT NULL
                         ,CHAR(096) + N' MIX Synergies'
                         ,N'')
  FROM (--
        SELECT mix_advantage_weighted_AMT
          FROM [##SQLXL_Index_compilation]
         WHERE type                       = N'A'  -- instance level aggregate record
           AND mix_advantage_weighted_AMT > 0     -- divide by zero handled here
       ) AS ins
 CROSS
  JOIN (--
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE type          = N'M'  -- missing nonclustered rowstore index
           AND prescription IS NULL  -- not already flagged above
       ) AS tgt -- [##SQLXL_Index_compilation]
 WHERE (100.0 * tgt.mix_advantage_weighted_AMT / ins.mix_advantage_weighted_AMT) > 2.0              -- seems like a good enough number
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Request - High Value Missing indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REJECT - Low value Missing indexes
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription  = N'Reject' + CHAR(096) + N' MIX low Gain'
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
 WHERE tgt.type          = N'M'  -- missing nonclustered rowstore index
   ------------------------------------------
   AND tgt.prescription IS NULL  -- haven't been flagged up to this point
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Reject - Low value Missing indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - RETAIN - keep "best" sequence-matching non-filtered Nonclustered rowstore - not previously actioned and has statistics
-- <FUTURE> add: % of reads logic & if NCS available
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription = N'Retain' + CHAR(096) + N' Best NCX Sequence'
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I') AS tgt                     -- index level composite record
  JOIN (--
        SELECT rn = ROW_NUMBER() OVER (PARTITION BY seq.database_id
                                                   ,seq.object_id
                                                   ,seq.synergy_columns
                                           ORDER BY ----------------------------------------------------------------------------------------
                                                    -- find the bestest index based on their properties
                                                    ----------------------------------------------------------------------------------------
                                                 -- il.is_primary_key                  DESC -- PRIMARY KEY already Retained above
                                                 -- il.is_unique_constraint            DESC -- UNIQUE CONSTRAINT already Retained above
                                                    il.is_unique                       DESC -- is UNIQUE
                                                   ,il.ius_read_to_parent_PCT          DESC -- most used
                                                   ,il.stathdr_average_key_length      DESC -- biggest
                                                   ,il.key_ordinal_CNT                 DESC -- most key elements
                                                   ,il.key_total_datatype_length_bytes DESC -- widest key
                                                   ,il.inc_total_datatype_length_bytes      -- fewest included columns
                                                   ,il.index_id
                                      )
               ,seq.database_id
               ,seq.object_id
               ,il.index_id
               ,il.type
               ,il.sub_type
          FROM (-- Get list of all synergy SEQUENCES shared between Nonclustered rowstores. NOTE: only UNFILTERED indexes appear
                SELECT database_id
                      ,object_id
                      ,synergy_columns
                  FROM [##SQLXL_Index_Synergies]
                 WHERE l_type         = N'2' -- nonclustered rowstore index
                   AND r_type         = N'2' -- nonclustered rowstore index
                   AND synergy_prefix = N'S'
                 GROUP BY
                       database_id
                      ,object_id
                      ,synergy_columns

                ----------------------------------------------------------------------------------------------------------------------------
                EXCEPT -- Get list of all synergy SEQUENCES already used by Retained Clustered and Nonclustered rowstores
                       -- PRIMARY KEY, UNIQUE CONSTRAINT, Clustered index already Retained above
                ----------------------------------------------------------------------------------------------------------------------------
                SELECT il.database_id
                      ,il.object_id
                      ,o.synergy_columns
                  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'I') AS il      -- index level composite record
                  JOIN [##SQLXL_Index_Synergies] AS o
                    ON o.database_id = il.database_id
                   AND o.object_id   = il.object_id
                   AND o.l_index_id  = il.index_id
                   AND o.l_type      = il.type
                   AND o.l_sub_type  = il.sub_type
                 WHERE il.prescription LIKE 'Retain%'
                   AND il.type           IN (N'1' -- clustered rowstore index
                                            ,N'2' -- nonclustered rowstore index
                                            )
                   AND o.l_type          IN (N'1' -- clustered rowstore index
                                            ,N'2' -- nonclustered rowstore index
                                            )
                   AND o.r_type          IN (N'1' -- clustered rowstore index
                                            ,N'2' -- nonclustered rowstore index
                                            )
                   AND o.synergy_prefix = N'S'
                 GROUP BY
                       il.database_id
                      ,il.object_id
                      ,o.synergy_columns
               ) seq
          ---------------------------------------------------------------------------------------------------------------------------------
          -- rejoin to Synergies table to get the indexes sharing the synergy sequences found above
          ---------------------------------------------------------------------------------------------------------------------------------
          JOIN [##SQLXL_Index_Synergies] AS o
            ON seq.database_id           = o.database_id
           AND seq.object_id             = o.object_id
           AND seq.synergy_columns       = o.synergy_columns
           AND N'S'                      = o.synergy_prefix
           AND N'2'                      = o.l_type                -- nonclustered rowstore index
           AND N'2'                      = o.r_type                -- nonclustered rowstore index
          ---------------------------------------------------------------------------------------------------------------------------------
          -- Get properties for candidate sequence indexes
          ---------------------------------------------------------------------------------------------------------------------------------
          JOIN (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'I') AS il              -- index level composite record
            ON seq.database_id = il.database_id
           AND seq.object_id   = il.object_id
           AND o.l_index_id    = il.index_id
           AND o.l_type        = il.type
           AND o.l_sub_type    = il.sub_type
       ) ix
    ON tgt.database_id      = ix.database_id
   AND tgt.object_id        = ix.object_id
   AND tgt.index_id         = ix.index_id
   AND tgt.type             = ix.type
   AND tgt.sub_type         = ix.sub_type
 WHERE 1                    = ix.rn
   AND tgt.prescription IS NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - keep "best" synergy key SEQUENCE index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REMOVE - Nonclustered rowstore with same key sequence as another Nonclustered rowstore, worse density, not already flagged
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription = N'Remove' + CHAR(096) + N' Synergy NCX Seq'            -- Keep in synch with idx_type_hdr
  FROM (--
        SELECT tgt.*
          FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
          JOIN [##SQLXL_Index_sys_objects] AS obj
            ON tgt.database_id   = obj.database_id
           AND tgt.object_id     = obj.object_id
         WHERE tgt.type          = N'2'                       -- nonclustered rowstore index
           AND obj.type         <> N'IT'                    -- internal tables
           AND tgt.prescription IS NULL
       ) AS tgt -- [##SQLXL_Index_compilation]
 WHERE EXISTS (-- Nonclustered rowstore with same key sequence as another Nonclustered rowstore
               SELECT 1/0
                 FROM [##SQLXL_Index_Synergies] AS idxL       -- missing index elements
                 JOIN [##SQLXL_Index_Synergies] AS idxR       -- candidate matching index elements
                   ON idxL.database_id     = idxR.database_id
                  AND idxL.object_id       = idxR.object_id
                  AND idxL.l_index_id     <> idxR.l_index_id
                  AND idxL.synergy_columns = idxR.synergy_columns
                  AND idxR.l_type          = N'2'             -- nonclustered rowstore index
                  AND idxL.l_sub_type      = idxR.l_sub_type
                  AND idxL.synergy_prefix  = N'S'             -- index is contained in another index
                  AND idxR.synergy_prefix  = N'S'             -- other indexes could be contained in this index
                WHERE tgt.database_id      = idxL.database_id
                  AND tgt.object_id        = idxL.object_id
                  AND tgt.index_id         = idxL.l_index_id
                  AND tgt.type             = idxL.l_type
                  AND tgt.sub_type         = idxL.l_sub_type
                  -------------------------------------------
                  AND idxL.all_density < 0.01               -- less than 1% of records. Likely unique enough to trigger a SEEK operation
                  AND idxL.all_density > idxR.all_density   -- selected index is less unique than compared index
              )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Remove - nonclustered index with sequence synergy keys'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REMOVE - Nonclustered rowstores on used tables with Poor Read/Write ratio (< 4X) & low usage (< 2% of table)
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription = N'Remove' + CHAR(096) + N' low R/W Ratio'
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I') AS tgt  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_compilation]                 WHERE rec_type = N'P') AS p    -- parent level aggregate record
    ON tgt.database_id      = p.database_id
   AND tgt.object_id        = p.object_id
 WHERE tgt.prescription            IS NULL
   ---------------------------------------------------------------------------
   AND tgt.type                     = N'2' -- nonclustered rowstore index
   AND (   p.ius_user_total_CNT     > 0    -- need to have some usage metrics
        OR p.ops_total_contacts_CNT > 0    -- need to have some usage metrics
       )
   AND tgt.row_CNT                    > 0
   ---------------------------------------------------------
   AND COALESCE(tgt.ius_read_to_write_RAT ,0.0) < 4.0
   AND COALESCE(tgt.ops_read_to_write_RAT ,0.0) < 4.0
   AND COALESCE(tgt.ius_read_to_parent_PCT,0.0) < 2.0
   AND COALESCE(tgt.ops_read_to_parent_PCT,0.0) < 2.0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Remove - low read/write ratio & low reads'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REMOVE - Nonclustered indexes with Poor usage or operational activity
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       tgt.prescription = N'Remove' + CHAR(096) + N' Lo/No Activity'
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I') AS tgt  -- index level composite record
  JOIN (SELECT * FROM [##SQLXL_Index_compilation]                 WHERE rec_type = N'P') AS p    -- parent level aggregate record
    ON tgt.database_id      = p.database_id
   AND tgt.object_id        = p.object_id
 WHERE tgt.prescription    IS NULL
   ---------------------------------------------------------------------------
   AND tgt.type                     = N'2' -- nonclustered rowstore index
   AND (   p.ius_user_total_CNT     > 0    -- need to have some usage metrics
        OR p.ops_total_contacts_CNT > 0    -- need to have some usage metrics
       )
   ---------------------------------------------------------
   AND COALESCE(tgt.ops_total_read_CNT,0)     > 0
   AND COALESCE(tgt.ius_user_updates_CNT,0)   > 0
   AND COALESCE(tgt.ius_read_to_parent_PCT,0) < 0.5
   AND COALESCE(tgt.ops_read_to_parent_PCT,0) < 0.5
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Remove - low % of reads '
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE -- [##SQLXL_Index_prescription]
  FROM [##SQLXL_Index_prescription] WITH (TABLOCKX)
 WHERE action_desc = N'Remove' -- already updated appropriate values
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Clear out interim results table - Remove'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - RETAIN - Heaps, Clustered, Nonclustered Leftovers - some Activity OR few waits OR is small
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT database_id,object_id,index_id,type,
--*/
       prescription = N'Retain ' + idx_type_hdr
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
 WHERE type IN (N'0'   -- rowstore heap
               ,N'1'   -- clustered rowstore index
               ,N'2'   -- nonclustered rowstore index
               )       -- All other types should have been flagged by now
   AND prescription IS NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Retain - not flagged above'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - Clustered index not created with Identity, Sequence, NEWID, SEQUENTIALID as lead CLUSTERED key.
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Use ' + tbl_cx_uniq_ordered_column_TYP
                    + IIF(fill_factor NOT IN (0,100),CHAR(096) + N' FillFactor 100%',N'')
                      -- check if covering Foreign Key Constraint, if do gonna need another index created to provide cover
                    + IIF(CHARINDEX(N'Covers FKC',prescription) > 0
                         ,CHAR(096) + N' Recreate FKC cover'
                         ,N'')
                    + IIF(partition_column_id > 0
                         ,CHAR(096) + N' Include Partition Col'
                         ,N'')
  FROM [##SQLXL_Index_compilation] -- only source table in query
 WHERE rec_type = N'I'             -- index level composite record
   AND type     = N'1'             -- clustered rowstore index
   AND tbl_cx_uniq_ordered_column_id <> lead_element_column_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - CX not using existing unique ordered column'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - Lead Key UNIQUE (or nearly so) & has extra key columns
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Drop Xtra Keys'
  FROM [##SQLXL_Index_compilation]  -- only source table in query
 WHERE rec_type = N'I'              -- index level composite record
   AND obj_type_hdr NOT IN (N'HST'  -- Not a History/archive table
                           ,N'INT'  -- Not a system/internal table
                           )
   AND type NOT IN (N'0'            -- rowstore heap
                   ,N'M'            -- missing index
                   ,N'F'            -- foreign key constraint
                   )
   ---------------------------------------------------------
   AND lead_element_column_id  = COALESCE(tbl_cx_uniq_ordered_column_id,tbl_possible_uniq_column_id)
   AND key_ordinal_CNT         > 1
   --------------------------------------
   AND prescription         LIKE N'Retain%' -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - unneeded key columns - lead key UNIQUE'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - Lead Key Element is ORDERED UNIQUE and optimize for sequential key not enabled - 2019+
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Optimize Seq Key?'
  FROM [##SQLXL_Index_compilation] -- only source table in query
 WHERE CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) >= 15 --2019+
   AND rec_type          = N'I'    -- index level composite record
   AND obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                           ,N'INT' -- Not a system/internal table
                           )
   AND type IN (N'1'               -- clustered rowstore index
               ,N'2'               -- nonclustered rowstore index
               )
   ---------------------------------------------------------
   AND (   lead_element_is_Identity        = 1
        OR lead_element_is_Sequence        = 1
        OR lead_element_is_newsequentialid = 1
       )
   AND optimize_for_sequential_key         = 0
   --------------------------------------
   AND prescription LIKE N'Retain%' -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - enable Opt for Seq Key'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - Lead Key Element is ORDERED UNIQUE data type and is_unique = 0
-- PRESCRIBE - REFACTOR - Lead Key Element is ORDERED UNIQUE data type and Stat uniqueness <> 1, Not PK or Unique Constraint
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Key'
                    + IIF(lead_element_is_Identity        = 1,N' IDN' ,N'')
                    + IIF(lead_element_is_Sequence        = 1,N' SEQ' ,N'')
                    + IIF(lead_element_is_newsequentialid = 1,N' SUID',N'')
                    + IIF(lead_element_is_newid           = 1,N' NUID',N'')
                    + IIF(is_unique                       = 0
                         ,N' NOT UNIQ'
                         ,IIF(is_primary_key = 1 OR is_unique_constraint = 1,N'',N' BAD STATS')
                         )
  FROM [##SQLXL_Index_compilation] -- only source table in query
 WHERE rec_type = N'I'             -- index level composite record
   AND COALESCE(tbl_cx_uniq_ordered_column_id,tbl_possible_uniq_column_id) > 0
   AND type IN (N'1' -- clustered rowstore index
               ,N'2' -- nonclustered rowstore index
               )
   AND (   is_unique                  = 0
        OR (    ROUND(lead_element_uniqueness,4) > 1.0
            AND is_primary_key       = 0
            AND is_unique_constraint = 0
            AND is_unique            = 0
           )
       )
   --------------------------------------
   AND prescription LIKE N'Retain%' -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - lead key unique datatype not unique'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - index partition not match table partition
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Chk Idx Partition'
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE type = N'2') AS i  -- nonclustered rowstore index
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id      = obj.database_id
   AND i.object_id        = obj.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_data_spaces] AS data_space_idx                       -- data space at index level
    ON i.database_id   = data_space_idx.database_id
   AND i.data_space_id = data_space_idx.data_space_id
  LEFT OUTER
  JOIN [##SQLXL_Index_data_spaces] AS data_space_obj                       -- data space at object level
    ON obj.database_id   = data_space_obj.database_id
   AND obj.data_space_id = data_space_obj.data_space_id
 WHERE COALESCE(data_space_idx.partition_function_id,0) <> COALESCE(data_space_obj.partition_function_id,0)
   AND i.prescription NOT LIKE N'Remove%'   -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - match index to table partition'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - Non-Empty index with writes and FILL FACTOR < 100% AND low page splits (< 2% since restart / DDL)
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'FillFactor >' + [dbo].[SQLXL_3SD](fill_factor,N'I') + N'%'
  FROM [##SQLXL_Index_compilation] -- only source table in query
 WHERE rec_type = N'I'             -- index level composite record
   AND type    <> N'T'             -- full-text index of a tabular object
   ---------------------------------------------------------
   AND obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                           ,N'INT' -- Not a system/internal table
                           )
   AND fill_factor NOT IN (0,100)
   AND COALESCE(page_splits_to_write_PCT,0.0) BETWEEN 0.0 AND 2.0
   AND reserved_page_PG_CNT                   > 0
   ---------------------------------------------------------
   AND prescription   LIKE N'Retain%'   -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - low splits low fill factor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - rowstore index with hi page splits (> 5% since restart / DDL) -- reduce FILL FACTOR
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'FillFactor <' + [dbo].[SQLXL_3SD](fill_factor,N'I') + N'%'
  FROM [##SQLXL_Index_compilation]  -- only source table in query
 WHERE rec_type = N'I'              -- index level composite record
   AND obj_type_hdr NOT IN (N'HST'  -- Not a History/archive table
                           ,N'INT'  -- Not a system/internal table
                           )
   AND type    IN (N'1'             -- clustered rowstore index
                  ,N'2'             -- nonclustered rowstore index
                  )
   AND page_splits_to_write_PCT  >   5.0
   --------------------------------------
   AND prescription LIKE N'Retain%' -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - hi splits hi fill factor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - ROWSTORE indexes with Page/Row Locks OFF. BOL NOTE: An index can't be reorganized when allow_page_locks is set to OFF.
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Enable '
                     + STUFF( IIF(i.allow_page_locks = 0,N',Page',N'')
                            + IIF(i.allow_row_locks  = 0,N',Row' ,N'')
                            ,1,1,N'') -- end of STUFF function
                     + N' Locks'
  FROM [##SQLXL_Index_compilation] AS i
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id
 WHERE i.type IN (N'1'                   -- clustered rowstore index
                 ,N'2'                   -- nonclustered rowstore index
                 )
   ---------------------------------------------------------
   AND (   i.allow_page_locks = 0        -- non-index value is NULL
        OR i.allow_row_locks  = 0        -- non-index value is NULL
       )
   ---------------------------------------------------------
   AND 0 = obj.is_memory_optimized       -- not a memory table
   AND prescription LIKE N'Retain%'      -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - Page/Row locks OFF'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - index with additional keys not improving record selectivity
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription              = N'Chk Key Selectivity'
  FROM [##SQLXL_Index_compilation] -- only source table in query
 WHERE rec_type = N'I'             -- index level composite record
   AND obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                           ,N'INT' -- Not a system/internal table
                           )
   AND low_selectivity_additional_keys IS NOT NULL
   AND prescription LIKE N'Retain%'                -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - unneeded key columns pt 2'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - index with column collations not matching database collation
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Check Collation'
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'I') AS i  -- index level composite record
  JOIN [##SQLXL_Index_sys_index_columns] AS ic
    ON i.database_id                        = ic.database_id
   AND i.object_id                          = ic.object_id
   AND i.index_id                           = ic.index_id
   AND i.type                               = ic.type
  JOIN [##SQLXL_Index_sys_columns]       AS c
    ON ic.database_id                       = c.database_id
   AND ic.object_id                         = c.object_id
   AND ic.column_id                         = c.column_id
 WHERE i.obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                             ,N'INT' -- Not a system/internal table
                             )
   AND c.collation_name                    IS NOT NULL
   AND c.uses_database_collation            = 0
   ---------------------------------------------------------
   AND i.prescription         LIKE N'Retain%'    -- NOTE: no leading "%", filters out MISSING INDEXES
 GROUP BY
       i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - match index column collation to database collation'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - Big included columns
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Check Incl Len'
  FROM [##SQLXL_Index_compilation]   -- only source table in query
 WHERE rec_type = N'I'               -- index level composite record
   AND  obj_type_hdr NOT IN (N'HST'  -- Not a History/archive table
                            ,N'INT'  -- Not a system/internal table
                            )
   ---------------------------------------------------------
   AND (   inc_total_datatype_length_bytes >= 128
        OR is_inc_total_datatype_length_MAX = 1
       )
   ---------------------------------------------------------
   AND prescription   LIKE N'Retain%'           -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - index with BIG included columns'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - Nonclustered Columnstores - to replace nonclustered rowstores need to add index key columns
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Add IDX key columns'
  FROM [##SQLXL_Index_compilation]  -- only table source in query
 WHERE rec_type = N'I'              -- index level composite record
   AND type     = N'6'              -- nonclustered columnstore index
   AND CHARINDEX(N'<IDXKEY>',included_column_info) > 0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - add Replaced nonclustered KEY columns to existing nonclustered columnstore'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - Non-Partitioned Table and LOCK_ESCALATION is DISABLED - should be AUTO or TABLE
-- <FUTURE> refactor all similar to eliminate reference to HST & INT since not needed (can't be a 'P')
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT p.database_id
      ,p.object_id
      ,p.index_id
      ,p.type
      ,p.sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription =  N'Enable Auto Lock Esc'
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'P') AS p  -- parent level aggregate record
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON p.database_id = obj.database_id
   AND p.object_id   = obj.object_id
   AND 1             = obj.lock_escalation -- lock escalation DISABLED
 WHERE p.obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                             ,N'INT' -- Not a system/internal table
                             )
   AND p.partition_column_id  IS NULL
   ---------------------------------------------------------
   AND (   p.prescription LIKE N'Retain%'          -- NOTE: no leading "%"
        OR p.prescription IS NULL
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - Non-Partitioned Table and LOCK_ESCALATION is DISABLED'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - Partitioned Table and LOCK_ESCALATION is TABLE or DISABLE - should be AUTO
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT p.database_id
      ,p.object_id
      ,p.index_id
      ,p.type
      ,p.sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription =  N'Enable Auto Lock Esc'
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'P') AS p  -- parent level aggregate record
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON p.database_id = obj.database_id
   AND p.object_id   = obj.object_id
   AND 2            <> obj.lock_escalation -- lock escalation DISABLED = 1 or TABLE = 0
 WHERE p.obj_type_hdr   NOT IN (N'HST'     -- Not a History/archive table
                               ,N'INT'     -- Not a system/internal table
                               )
   AND p.partition_column_id > 0
   ---------------------------------------------------------
   AND (   p.prescription LIKE N'Retain%'    -- NOTE: no leading "%"
        OR p.prescription IS NULL
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - Partitioned Table and LOCK_ESCALATION is TABLE or DISABLE'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - SQL Table-Valued Functions with Clustered index that is not UNIQUE
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'TVF Unique IDX'
  FROM [##SQLXL_Index_sys_objects] AS obj
  JOIN [##SQLXL_Index_compilation] AS i
    ON N'I'            = i.rec_type  -- index level composite record
   AND obj.database_id = i.database_id
   AND obj.object_id   = i.object_id
 WHERE obj.type    = N'TF' -- SQL table-valued-function SQL 2012+
   AND i.type      = N'1'  -- clustered rowstore index
   AND i.is_unique = 0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refactor - SQL Table-Valued Functions with Clustered index that is not UNIQUE'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - Consider Index Stats NoRecompute due to high volumes of data changes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Stats NoRecompute?'
  FROM [##SQLXL_Index_compilation] -- only table source in query
 WHERE rec_type = N'I'             -- index level composite record
   AND type    IN (N'1'            -- clustered rowstore index
                  ,N'2'            -- nonclustered rowstore index
                  )                -- rowstore heapS handled separately.
   AND stats_no_recompute  = 0
   AND IIF(stathdr_row_CNT > 0
          ,100.0 * stats_prop_modification_CNT / stathdr_row_CNT
          ,IIF(row_CNT > 0
              ,100.0 * ops_total_write_CNT     / row_CNT
              ,0.0)
          ) >= 25.0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFACTOR - Consider Database AUTO_UPDATE_STATISTICS_ASYNC due to high volumes of data changes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id  = database_id
      ,object_id    = database_id
      ,index_id     = database_id
      ,type         = N'DB'              -- database "index" type
      ,sub_type     = 0
      ,N'Refactor'
      ,sort         = @srt
      ,prescription = N'Enable UPD_STATS_ASYNC'
  FROM [##SQLXL_Index_compilation] -- only table source in query
 WHERE rec_type = N'I'             -- index level composite record
   AND type    IN (N'1'            -- clustered rowstore index
                  ,N'2'            -- nonclustered rowstore index
                  )                -- rowstore heapS handled separately.
   AND stats_no_recompute  = 0
   AND IIF(stathdr_row_CNT > 0
          ,100.0 * stats_prop_modification_CNT / stathdr_row_CNT
          ,IIF(row_CNT > 0
              ,100.0 * ops_total_write_CNT     / row_CNT
              ,0.0)
          ) > 25.0
 GROUP BY
       database_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

/******************************************************************************************************************************************\
-- Update REFACTOR for RETAINed indexes
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription = COALESCE(tgt.prescription + CHAR(096),N'')
                    + N'Refactor'
                    + (--
                       SELECT CHAR(096) + N' ' + rex.prescription
                         FROM [##SQLXL_Index_prescription]     AS rex
                        WHERE tgt.database_id      = rex.database_id
                          AND tgt.object_id        = rex.object_id
                          AND tgt.index_id         = rex.index_id
                          AND tgt.type             = rex.type
                          AND N'Refactor'        = rex.action_desc
                        ORDER BY
                              rex.srt
                          FOR XML PATH(N''), TYPE                                                   -- prescriptions
                      ).value('.',N'NVARCHAR(MAX)')
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'I') AS tgt     -- index level composite record
  JOIN (-- indexes/tables to refactor
        SELECT database_id,object_id,index_id,type,sub_type
          FROM [##SQLXL_Index_prescription]
         WHERE action_desc = N'Refactor'
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) AS ref
    ON tgt.database_id      = ref.database_id
   AND tgt.object_id        = ref.object_id
   AND tgt.index_id         = ref.index_id
   AND tgt.type             = ref.type
 WHERE tgt.prescription  LIKE N'Retain%'           -- only want to Refresh indexes marked to Retain
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Apply refactor label to indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup applied prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE -- [##SQLXL_Index_prescription]
  FROM [##SQLXL_Index_prescription]
 WHERE action_desc = N'Refactor' -- already updated appropriate values
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Clean up interim results table - Refactor'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - index to remove/replace has Non-Persisted Computed Column in definition
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Review'
      ,sort         = @srt
      ,prescription = N'IDX has '
                    + IIF(COUNT_BIG(1) > 1,CAST(COUNT_BIG(1) AS NVARCHAR(20)),N'')
                    + N' Non Prst Col'
  FROM (-- Computed columns not persisted
        SELECT database_id
              ,object_id
              ,column_id
          FROM [##SQLXL_Index_sys_columns]
         WHERE computed_column_definition IS NOT NULL
           AND is_persisted                = 0
       ) AS cp
  JOIN [##SQLXL_Index_sys_index_columns] AS ic
    ON cp.database_id = ic.database_id
   AND cp.object_id   = ic.object_id
   AND cp.column_id   = ic.column_id
  JOIN [##SQLXL_Index_compilation]       AS i
    ON N'I'           = i.rec_type                          -- index level composite record
   AND ic.database_id = i.database_id
   AND ic.object_id   = i.object_id
   AND ic.index_id    = i.index_id
   AND ic.type        = i.type
   AND ic.sub_type    = i.sub_type
 WHERE i.prescription LIKE N'Remove%'
    OR i.prescription LIKE N'Replace%'
 GROUP BY
       i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - index to Remove has Non-Persisted Computed Column'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - indexes with non-default properties - Ignored in optimization ENABLED
-- PRESCRIBE - REVIEW - indexes with non-default properties - Is Hypothetical
-- PRESCRIBE - REVIEW - indexes with non-default properties - Is Disabled
-- PRESCRIBE - REVIEW - indexes with non-default properties - Duplicate keys are ignored
-- PRESCRIBE - REVIEW - indexes with non-default properties - Duplicate key messages are suppressed
-- PRESCRIBE - REVIEW - indexes with non-default properties - Compression delay > 0
-- PRESCRIBE - REVIEW - indexes with non-default properties - index was Auto created
-- PRESCRIBE - REVIEW - indexes with non-default properties - constraint NOT ENFORCED
-- NOTE - indexes with non-default properties. allow_row_locks, allow_page_locks covered in REFRESH
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.type
      ,action_desc  = N'Review'
      ,sort         = @srt
      ,prescription = STUFF( IIF(i.is_ignored_in_optimization = 1,CHAR(096) + N' Ignored in optimization',N'')
                           + IIF(i.is_hypothetical            = 1,CHAR(096) + N' Hypothetical',N'')
                           + IIF(i.is_disabled                = 1,CHAR(096) + N' Disabled',N'')
                           + IIF(i.ignore_dup_key             = 1,CHAR(096) + N' Dupl keys ignored',N'')
                           + IIF(i.suppress_dup_key_messages  = 1,CHAR(096) + N' Dupl key msg suppressed',N'')
                           + IIF(i.compression_delay_mm       > 0
                                ,CHAR(096) + N' Compression delay ' + CAST(i.compression_delay_mm AS NVARCHAR(20))
                                ,N'')
                           + IIF(i.auto_created               = 1,CHAR(096) + N' Auto created',N'')
                           + IIF(kc.is_enforced               = 0,CHAR(096) + kc.type + N' Constraint NOT ENFORCED',N'')
                           ,1,1,N'') -- end of STUFF function
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type          = N'I'    -- index level composite record
           AND type         NOT IN (N'0'   -- rowstore heap
                                   ,N'F'   -- foreign key constraint
                                   ,N'M'   -- missing index
                                   )
           AND obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                                   ,N'INT' -- Not a system/internal table
                                   ,N'TVF' -- Not a SQL table-valued-function SQL 2012+
                                   )
           AND (   is_ignored_in_optimization = 1
                OR is_hypothetical            = 1
                OR is_disabled                = 1
                OR ignore_dup_key             = 1
                OR suppress_dup_key_messages  = 1
                OR compression_delay_mm       > 0
                OR auto_created               = 1
               )
       ) AS i
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects] AS kc
    ON i.database_id      = kc.database_id
   AND i.object_id        = kc.object_id
   AND i.index_id         = kc.key_unique_index_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - index with non-default properties - ignore, hypo, disabled, dupl keys, comp delay, auto created'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - indexes with resumable operations
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
       ,action_desc = N'Review'
      ,sort         = @srt
      ,prescription = N'Resumable operation'
  FROM [##SQLXL_Index_sys_index_resumable_operations] AS r
  JOIN [##SQLXL_Index_sys_indexes]                    AS i
    ON r.database_id = i.database_id
   AND r.object_id   = i.object_id
   AND r.index_id    = i.index_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - index with resumable operations'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Retained Foreign Key Constraints that are uncovered by an index
-- PRESCRIBE - REVIEW - Retained Foreign Key Constraints that are uncovered by an index - no missing index
-- PRESCRIBE - REVIEW - Retained Foreign Key Constraints that are uncovered by an index - no column statistics
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
       ,action_desc = N'Review'
      ,sort         = @srt
      ,prescription = N'Covering IX?'
                    + STUFF( IIF(i.fkc_candidate_covering_MIX_CNT = 0
                                ,N', No MIX'
                                ,N', Has ' + CAST(i.fkc_candidate_covering_MIX_CNT AS NVARCHAR(20)) + N' MIX')
                           + IIF(fkc_no_stats.CNT > 0
                                , N', No stats'
                                + IIF(fkc_no_stats.CNT > 1
                                     ,N' (' + CAST(fkc_no_stats.CNT AS NVARCHAR(20)) + N')'
                                     ,N'')
                                ,N', Has stats')
                           ,1,1,N'')
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE type                    = N'F'       -- foreign key constraint
           AND prescription         LIKE N'Retain%'
           AND fkc_covered_by_idx_IDS IS NULL
       ) AS i
  LEFT OUTER
  JOIN (--
        SELECT database_id,object_id,index_id,type,sub_type
              ,CNT = COUNT_BIG(1)
          FROM [##SQLXL_Index_sys_index_columns]
         WHERE type = N'F'
           AND col_uniqueness IS NULL
         GROUP BY
               database_id,object_id,index_id,type,sub_type
        HAVING COUNT_BIG(1) > 0
       ) AS fkc_no_stats
    ON i.database_id = fkc_no_stats.database_id
   AND i.object_id   = fkc_no_stats.object_id
   AND i.index_id    = fkc_no_stats.index_id
   AND i.type        = fkc_no_stats.type
   AND i.sub_type    = fkc_no_stats.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - uncovered FKC'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Clustered indexes that are not UNIQUE
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
       ,action_desc = N'Review'
      ,sort          = @srt
      ,prescription  = N'Make CX Uniq'
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type  = N'I'    -- index level composite record
   AND type      = N'1'    -- clustered rowstore index
   AND is_unique = 0
   AND obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                           ,N'INT' -- Not a system/internal table
                           )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - CX that are not UNIQUE'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Views & SQL Table Valued Functions that do not have an index
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT obj.database_id
      ,obj.object_id
      ,index_id = obj.object_id
      ,obj.type
      ,obj.sub_type
      ,action_desc = N'Review'
      ,sort         = @srt
      ,prescription  = N'Add index?'
  FROM [##SQLXL_Index_sys_objects] AS obj
 WHERE obj.type IN (N'TF' -- SQL table valued function
                   ,N'V'  -- View
                   )
   AND NOT EXISTS (-- view / SQL table vlaued function without an index
                   SELECT 1/0
                     FROM [##SQLXL_Index_sys_indexes] AS idx
                    WHERE obj.database_id = idx.database_id
                      AND obj.object_id   = idx.object_id
                      AND 0               < idx.index_id
                  )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - Views that do not have a CX'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Lo/No activity or Empty
-- If statistics recently updated show here
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc = N'Review'
      ,sort         = @srt
      ,prescription = STUFF( IIF(COALESCE(p.row_CNT,0) = 0
                                ,N' Empty TBL'
                                ,N'')
                           + IIF(    i.type NOT IN (N'4' -- Spatial Index
                                                   ,N'F' -- foreign key constraint
                                                   )
                                 AND COALESCE(i.ius_user_read_CNT   ,0) = 0 -- no Usage read activity, used since populated for MIX too
                                 AND COALESCE(i.ius_user_updates_CNT,0) = 0 -- no Usage write activity
                                ,N' No activity'
                                ,N'')
                           ,1,1,N'') -- end of STUFF function
                    + IIF(    i.stathdr_row_CNT              >  0  -- special case of no activity
                          AND i.stathdr_statistics_age_days <= 30  -- and recently updated statistics
                         ,CHAR(096) + N' Has statistics'
                         ,N'')
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type  = N'I'  -- index level composite record
           ---------------------------------------------------------------------------------------------------------------------------------
           AND type NOT IN (N'4' -- Spatial ain't got index usage metrics
                           ,N'F' -- foreign key constraint
                           )
           ---------------------------------------------------------------------------------------------------------------------------------
           AND obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                                   ,N'INT' -- Not a system/internal table
                                   ,N'TVF' -- Not a SQL table-valued-function SQL 2012+
                                   )
           ---------------------------------------------------------------------------------------------------------------------------------
           AND prescription   NOT LIKE N'Remove%'
           AND prescription   NOT LIKE N'Reject%'
       ) AS i
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id
   AND 0             = obj.is_memory_optimized
  JOIN (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'P') AS p -- parent level aggregate record
    ON i.database_id      = p.database_id
   AND i.object_id        = p.object_id
 WHERE 1 = 1   -- simplifies adding additional clauses for testing
   ---------------------------------------------------------
   AND (   (    COALESCE(i.ius_user_total_CNT    ,0) = 0    -- no index usage
            AND COALESCE(i.ops_total_contacts_CNT,0) = 0    -- no index operations
           )
        OR COALESCE(p.row_CNT,0) = 0                        -- empty table
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - Low or NO activity, or empty'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Missing indexes that may have nonclustered rowstore index that they could roll up to
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id
      ,index_id    = i.group_handle
      ,type        = N'M'                                   -- missing nonclustered rowstore index
      ,sub_type    = 0
      ,action_desc = N'Review'
      ,sort        = @srt
      ,prescription = N'Similar CX/NCX'                     -- Keep in synch with idx_type_hdr
  FROM [##SQLXL_Index_sys_dm_db_missing_index_details] AS i -- missing indexes
 WHERE EXISTS (-- Missing indexes with nonclustered rowstore index that they could roll up to
               SELECT 1/0
                 FROM [##SQLXL_Index_Synergies] AS mix      -- missing index elements
                 JOIN [##SQLXL_Index_Synergies] AS idx      -- candidate matching index elements
                   ON mix.database_id     = idx.database_id
                  AND mix.object_id       = idx.object_id
                  AND mix.synergy_columns = idx.synergy_columns
                  AND idx.l_type         IN (N'1'           -- clustered rowstore index
                                            ,N'2'           -- nonclustered rowstore index
                                            )
                  AND mix.l_sub_type      = idx.l_sub_type
                  AND (        mix.synergy_prefix = idx.synergy_prefix
                       OR (    mix.synergy_prefix = N'C'    -- index is contained in another index
                           AND idx.synergy_prefix = N'<'    -- other indexes could be contained in this index
                          )
                       OR (    mix.synergy_prefix = N'<'    -- other indexes could be contained in this index
                           AND idx.synergy_prefix = N'C'    -- index is contained in another index
                          )
                      )
                WHERE -- match to missing index
                      i.database_id  = mix.database_id
                  AND i.object_id    = mix.object_id
                  AND i.group_handle = mix.l_index_id
                  AND N'M'           = mix.l_type           -- missing nonclustered rowstore index
                  AND 0              = mix.l_sub_type
              )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - MIX that can roll up to existing/new NCS'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Lead Key element is a big STRING
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,action_desc = N'Review'
      ,sort         = @srt
      ,prescription = N'Lead big ' + lead_element_Data_Type
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type = N'I'               -- index level composite record
   AND type             IN (N'1'     -- clustered rowstore index
                           ,N'2'     -- nonclustered rowstore index
                           )
   AND obj_type_hdr NOT IN (N'HST'   -- Not a History/archive table
                           ,N'INT'   -- Not a system/internal table
                           )
   --------------------------------------------
   AND (   lead_element_Max_Len > 16
        OR lead_element_Max_Len = -1
       )
   AND (   prescription LIKE N'Retain%'
        OR prescription LIKE N'Request%'
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - Lead Key element is a big STRING'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - index to be replaced by Nonclustered Columnstore has 1 or more non-lead keys that are big STRINGS
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Review'
      ,sort         = @srt
      ,prescription = N'Idx has big keys'
  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'I') AS i  -- index level composite record
 CROSS
 APPLY (--
        SELECT COUNT_BIG(1)
          FROM [##SQLXL_Index_sys_index_columns] AS ic
          JOIN [##SQLXL_Index_sys_columns]       AS sc
            ON ic.database_id = sc.database_id
           AND ic.object_id   = sc.object_id
           AND ic.column_id   = sc.column_id
         WHERE i.database_id  = ic.database_id
           AND i.object_id    = ic.object_id
           AND i.index_id     = ic.index_id
           AND i.type         = ic.type
           AND 0              = ic.is_included_column
           AND (   (sc.system_type_name  = N'NVARCHAR' AND sc.max_length > 16)
                OR (sc.system_type_name <> N'NVARCHAR' AND sc.max_length > 32)
                OR sc.max_length = -1
               )
       ) AS c(cnt)
 WHERE 1 = 1   -- simplifies adding additional clauses for testing
   AND i.prescription   LIKE N'Replace%'
   AND i.obj_type_hdr NOT IN (N'HST' -- Not a History/archive table
                             ,N'INT' -- Not a system/internal table
                             )
   AND c.cnt               > 0
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - index to be replaced by NCS has included big STRING'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - index to be Removed or Replaced by Nonclustered Columnstore that are filtered
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,action_desc  = N'Review'
      ,sort         = @srt
      ,prescription  = N'Filtered IDX'
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type = N'I'                -- index level composite record
   AND (   COALESCE(prescription,N'') LIKE N'Remove%'
        OR COALESCE(prescription,N'') LIKE N'Replace%'
       )
   AND has_filter = 1
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - index to be replaced by NCS is filtered'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - index with Page Compression Failures > 40 Percent
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,action_desc  = N'Review'
      ,sort         = @srt
      ,prescription = N'Chk PageCompress'
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type = N'I'                        -- index level composite record
   AND ios_page_compression_fail_PCT > 40
   --------------------------------------
   AND prescription LIKE N'Retain%'           -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - index with Page Compression Failures > 40 Percent'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Potential Temporary Parents & indexes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT f.database_id
      ,f.object_id
      ,f.index_id
      ,f.type
      ,f.sub_type
      ,action_desc  = N'Review'
      ,sort         = @srt
      ,prescription =  N'Check Temp Object'
  FROM (-- get list of all objects previously flagged as potentially temporary
        SELECT database_id,object_id,index_id,type,sub_type
          FROM [##SQLXL_Index_Diagnostics]
         WHERE diagnostic = N'[POSSIBLE TEMPORARY NAME]'
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) AS f
  JOIN [##SQLXL_Index_compilation] AS i
    ON f.database_id = i.database_id
   AND f.object_id   = i.object_id
   AND f.index_id    = i.index_id
   AND f.type        = i.type
   AND f.sub_type    = i.sub_type
 WHERE i.prescription LIKE N'Retain%'                         -- NOTE: no leading "%"
    OR i.rec_type        = N'P'                               -- parent level aggregate record
 GROUP BY
       f.database_id
      ,f.object_id
      ,f.index_id
      ,f.type
      ,f.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - Potential Temporary Parents & indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Computed columns not persisted
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id
      ,object_id
      ,object_id           -- for index_id
      ,type         = N'U' -- User Table
      ,sub_type     = 0
      ,action_desc  = N'Review'
      ,sort         = @srt
      ,prescription = N'Persist Computed Col'
  FROM [##SQLXL_Index_sys_columns]
 WHERE is_computed  = 1
   AND is_persisted = 0
 GROUP BY
       database_id
      ,object_id
      ,object_id           -- for index_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - Computed columns not persisted'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Potential Filtered Index. Includes all types of previous prescriptions
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT f.database_id
      ,f.object_id
      ,f.index_id
      ,f.type
      ,f.sub_type
      ,action_desc  = N'Review'
      ,sort         = @srt
      ,prescription =  N'Possible Filter'
  FROM (-- get list of all objects previously flagged as potentially temporary
        SELECT database_id,object_id,index_id,type,sub_type
          FROM [##SQLXL_Index_Diagnostics]
         WHERE diagnostic LIKE N'%add filter?%'
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) AS f
  JOIN [##SQLXL_Index_compilation] AS i
    ON f.database_id = i.database_id
   AND f.object_id   = i.object_id
   AND f.index_id    = i.index_id
   AND f.type        = i.type
   AND f.sub_type    = i.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - Potential Filtered Index'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Synergies found on Retain, Reject indexes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,action_desc  = N'Review'
      ,sort         = @srt
      ,prescription = STUFF(  IIF(s.seq_CNT > 0,CHAR(096) + N' Synergy: Sequence' ,N'')
                            + IIF(s.ovl_CNT > 0,CHAR(096) + N' Synergy: Overlap'  ,N'')
                            + IIF(s.con_CNT > 0,CHAR(096) + N' Synergy: Contained',N'')
                            + IIF(s.inc_CNT > 0,CHAR(096) + N' Synergy: Included' ,N'')
                           ,1,2,N'')
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE type IN (N'2'                     -- Nonclustered rowstore index
                       ,N'F'                     -- foreign key constraint
                       ,N'M'                     -- missing nonclustered rowstore index
                       )
           AND prescription NOT LIKE N'Replace%' -- NOTE: no leading "%"
       ) AS i
  JOIN (--
        SELECT database_id
              ,object_id
              ,l_index_id
              ,l_type
              ,l_sub_type
              ,seq_CNT  = SUM(IIF(synergy_prefix = N'S',1,0))
              ,ovl_CNT  = SUM(IIF(synergy_prefix = N'O',1,0))
              ,con_CNT  = SUM(IIF(synergy_prefix = N'C',1,0))
              ,inc_CNT  = SUM(IIF(synergy_prefix = N'I',1,0))
          FROM [##SQLXL_Index_Synergies]
         WHERE synergy_prefix NOT IN (N'>')
           AND l_type             <> N'F'
         GROUP BY
               database_id
              ,object_id
              ,l_index_id
              ,l_type
              ,l_sub_type
        HAVING SUM(IIF(synergy_prefix = N'S',1,0)) > 0
            OR SUM(IIF(synergy_prefix = N'O',1,0)) > 0
            OR SUM(IIF(synergy_prefix = N'C',1,0)) > 0
            OR SUM(IIF(synergy_prefix = N'I',1,0)) > 0
       ) AS s
    ON i.database_id      = s.database_id
   AND i.object_id        = s.object_id
   AND i.index_id         = s.l_index_id
   AND i.type             = s.l_type
   AND i.sub_type         = s.l_sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - Synergies found on Retain, Reject indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Index - Auto Created
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,action_desc  = N'Review'
      ,sort         = @srt
      ,prescription = N'Auto Created'
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type     = N'I'                    -- index level composite record
   AND auto_created = 1
   AND prescription LIKE N'Retain%'           -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - indexes Auto Created'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REVIEW - Index - STATISTICS NORECOMPUTE enabled and low stats writes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,action_desc  = N'Review'
      ,sort         = @srt
      ,prescription = N'Stats NoRecompute'
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type = N'I'  -- index level composite record
   AND type    IN (N'1' -- clustered rowstore index
                  ,N'2' -- nonclustered rowstore index
                  )     -- rowstore heapS handled separately
   AND IIF(stathdr_row_CNT > 0
          ,100.0 * stats_prop_modification_CNT / stathdr_row_CNT
          ,0.0) < 5.0
   AND stats_no_recompute = 1
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Review - STATISTICS NORECOMPUTE enabled, low writes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Update Review
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription = COALESCE(tgt.prescription + CHAR(096),N'')
                    + N'Review'
                    + (--
                       SELECT CHAR(096) + N' ' + rex.prescription
                         FROM [##SQLXL_Index_prescription]       AS rex
                        WHERE tgt.database_id      = rex.database_id
                          AND tgt.object_id        = rex.object_id
                          AND tgt.index_id         = rex.index_id
                          AND tgt.type             = rex.type
                          AND N'Review'            = rex.action_desc
                        ORDER BY
                              rex.srt
                          FOR XML PATH(N''), TYPE                                                   -- prescriptions
                      ).value('.',N'NVARCHAR(MAX)')
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_compilation] WITH (TABLOCKX)
         WHERE rec_type IN (N'I'   -- index level composite record
                           ,N'P'   -- parent level aggregate record
                           )
       ) AS tgt -- [##SQLXL_Index_compilation]
  JOIN (--
        SELECT database_id,object_id,index_id,type,sub_type
          FROM [##SQLXL_Index_prescription]
         WHERE action_desc = N'Review'
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) ref
    ON tgt.database_id = ref.database_id
   AND tgt.object_id   = ref.object_id
   AND tgt.index_id    = ref.index_id
   AND tgt.type        = ref.type
   AND tgt.sub_type    = ref.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Apply Review label to indexes'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM [##SQLXL_Index_prescription]
 WHERE action_desc = N'Review'   -- already updated appropriate values
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Clean up interim results table - Review'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRESH REFRES **
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFRESH - Columnstores with > 8192 Deleted rows
-- PRESCRIBE - REFRESH - Columnstores with > 8192 Open rows
-- PRESCRIBE - REFRESH - Columnstores with multiple compressed row groups not at full size - "Trimmed"
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = STUFF( IIF(cs.deleted_row_CNT   > 8192,CHAR(096) + i.idx_type_hdr + N' Deleted rows'                ,N'')
                           + IIF(cs.open_row_CNT      > 8192,CHAR(096) + i.idx_type_hdr + N' Open delta rows'             ,N'')
                           + IIF(cs.trim_rowgroup_CNT > 1   ,CHAR(096) + i.idx_type_hdr + N' Trimmed compressed rowgroups',N'')
                            ,1,1,N'') -- end of STUFF function
  FROM (--
        SELECT database_id
              ,object_id
              ,index_id
              ,open_rowgroup_CNT    = SUM(IIF(state_desc   = N'OPEN',1         ,0))
              ,open_row_CNT         = SUM(IIF(state_desc   = N'OPEN',total_rows,0))
              ,deleted_rowgroup_CNT = SUM(IIF(deleted_rows > 0      ,1         ,0))
              ,deleted_row_CNT      = SUM(deleted_rows)
              ,trim_rowgroup_CNT    = SUM(IIF(trim_reason_desc <> N'NO_TRIM',1,0))
          FROM [##SQLXL_Index_sys_dm_db_column_store_row_group_physical_stats] -- only includes columnstore indexes
         GROUP BY
               database_id
              ,object_id
              ,index_id
        HAVING SUM(deleted_rows) > 8192           -- chosen to eliminate small delta groups
            OR SUM(CASE WHEN state_desc = N'OPEN' -- deltastore row GROUP accepting new rows, still in rowstore format, not compressed
                        THEN total_rows
                        ELSE 0
                   END)          > 8192
       ) AS cs
  JOIN [##SQLXL_Index_compilation] AS i
    ON cs.database_id = i.database_id
   AND cs.object_id   = i.object_id
   AND cs.index_id    = i.index_id
   AND i.type        IN (N'5' -- clustered columnstore
                        ,N'6' -- nonclustered columnstore index
                        )
   AND 0              = i.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refresh - Columnstores with > 1024 Deleted rows or > 2048 Open rows'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFRESH - index takes up more buffer than reserved size - opportunity for cleanup
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'BUF > Rsrvd Size'
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type = N'I'               -- index level composite record
   AND 1 = 1                         -- simplifies adding additional clauses for testing
   AND prescription  LIKE N'Retain%' -- NOTE: no leading "%", filters out MISSING indexes
   AND buffer_total_KB_CNT > (1.1 * reserved_page_PG_CNT * 8.0)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refresh - index takes up more buffer than reserved size'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFRESH - Buffer Free > 20%
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt        INT      = 0
       ,@ssms_ads       TINYINT  = 1
       ,@msg      NVARCHAR(1000)
       ,@step_exec_dttm DATETIME = GETDATE()
--*/
SELECT i.database_id
      ,i.object_id
      ,i.index_id
      ,i.type
      ,i.sub_type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'BUF free > 20%'
  FROM [##SQLXL_Index_compilation] AS i
  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON i.database_id = obj.database_id
   AND i.object_id   = obj.object_id
   AND 0             = obj.is_memory_optimized -- exclude memoryoptimized
 WHERE rec_type            = N'I'              -- index level composite record
   AND buffer_total_KB_CNT > 0.0
   AND prescription     LIKE N'Retain%'        -- NOTE: no leading "%", filters out MISSING indexes
   AND 100.0 * buffer_free_KB_CNT / buffer_total_KB_CNT > 20.0 -- /zero handled by WHERE clause element above
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refresh - index Buffer Free > 20 percent'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFRESH - statistics over 30 days old
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt        INT      = 0
       ,@ssms_ads       TINYINT  = 1
       ,@msg      NVARCHAR(1000)
       ,@step_exec_dttm DATETIME = GETDATE()
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'Old Stats'
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type = N'I'                -- index level composite record
   AND 1 = 1                          -- simplifies adding additional clauses for testing
   AND prescription   LIKE N'Retain%' -- NOTE: no leading "%", filters out MISSING indexes
   AND obj_type_hdr NOT IN (N'HST'    -- Not a History/archive table
                           ,N'INT'    -- Not a system/internal table
                           )
   AND row_CNT                     >  0
   AND stathdr_statistics_age_days > 30
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refresh - statistics over 30 days old'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFRESH - statistics <= 30 days old and stats row count +/- 1.0% different than index row count
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt        INT      = 0
       ,@ssms_ads       TINYINT  = 1
       ,@msg      NVARCHAR(1000)
       ,@step_exec_dttm DATETIME = GETDATE()
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'Stats Row Delta'
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type        = N'I'               -- index level composite record
   AND stathdr_row_CNT > 0
   AND stathdr_statistics_age_days <= 30    -- NOTE: stats over 30 days old handled separately
   AND (   IIF(row_CNT > 0
              ,ABS(100.0 * (row_CNT - stathdr_row_CNT) / row_CNT)
              ,0) > 1.0
        OR IIF(stathdr_row_CNT > 0
              ,ABS(100.0 * (stathdr_row_CNT - row_CNT) / stathdr_row_CNT)
              ,0) > 1.0
       )
   ---------------------------------------------------------
   AND prescription LIKE N'Retain%'     -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refresh - statistics <= 30 days old and stats row count +/- 1pct different than index row count'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFRESH - statistics <= 30 days old and stats modification_counter > 0.5% index row count
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'Stats Row Delta'
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type                     = N'I'  -- index level composite record
   AND stathdr_statistics_age_days <= 30    -- NOTE: stats over 30 days old handled separately
   AND row_CNT                      >  0
   AND stats_prop_modification_CNT  >  0
   AND ABS(100.0 * stats_prop_modification_CNT / row_CNT) > 0.5  -- /zero handled by WHERE clause above
   ---------------------------------------------------------
   AND prescription LIKE N'Retain%'     -- NOTE: no leading "%"
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refresh - statistics <= 30 days old and stats modification_counter > 0.5pct index row count'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- PRESCRIBE - REFRESH - Statistics not computed on Rowstore Clustered and Nonclustered, XML, and Spatial indexes
--------------------------------------------------------------------------------------------------------------------------------------------
SET @srt += 1;
INSERT
  INTO [##SQLXL_Index_prescription] WITH (TABLOCKX)
      (database_id,object_id,index_id,type,sub_type
      ,action_desc
      ,srt
      ,prescription
      )
/*** LOCAL TESTING ***
DECLARE @srt INT = 0;
--*/
SELECT database_id,object_id,index_id,type,sub_type
      ,N'Refresh'
      ,sort         = @srt
      ,prescription = N'No Stats'
  FROM [##SQLXL_Index_compilation]
 WHERE rec_type = N'I'                   -- index level composite record
   AND type                     IN (N'1' -- Clustered rowstore index
                                   ,N'2' -- nonclustered rowstore index
                                   ,N'3' -- XML index
                                   ,N'4' -- Spatial index
                                   )
   AND obj_type_hdr NOT IN (N'HST'       -- Not a History/archive table
                           ,N'INT'       -- Not a system/internal table
                           ,N'TVF'       -- Not a SQL table-valued-function SQL 2012+
                           )
   ---------------------------------------------------------
   AND stathdr_statistics_age_days    IS NULL
   ---------------------------------------------------------
   AND prescription   LIKE N'Retain%'        -- NOTE: no leading "%"
   AND CHARINDEX(N'Refresh',prescription) = 0    -- don't need if already called out for Refresh
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Refresh - Statistics not computed on CX, NCX, XML, SPT'                            -- Keep in synch with idx_type_hdr
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Update REFRESH
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription = COALESCE(tgt.prescription + CHAR(096),N'')
                    + N'Refresh'
                    + (--
                       SELECT TOP (1)
                              CHAR(096) + N' ' + rex.prescription
                         FROM [##SQLXL_Index_prescription]       AS rex
                        WHERE tgt.database_id      = rex.database_id
                          AND tgt.object_id        = rex.object_id
                          AND tgt.index_id         = rex.index_id
                          AND tgt.type             = rex.type
                          AND N'Refresh'           = rex.action_desc
                        ORDER BY
                              rex.srt
                          FOR XML PATH(N''), TYPE                                                   -- prescriptions
                      ).value('.',N'NVARCHAR(MAX)')
  FROM (--
        SELECT *
          FROM [##SQLXL_Index_compilation] WITH (TABLOCKX)
         WHERE rec_type IN (N'I'                            -- index level composite record
                           ,N'P'                            -- parent level aggregate record. NOTE: parents can be REFACTORED too
                           )
       ) AS tgt -- [##SQLXL_Index_compilation]
  JOIN (--
        SELECT database_id,object_id,index_id,type,sub_type
          FROM [##SQLXL_Index_prescription]
         WHERE action_desc = N'Refresh'
         GROUP BY
               database_id,object_id,index_id,type,sub_type
       ) AS ref
    ON tgt.database_id      = ref.database_id
   AND tgt.object_id        = ref.object_id
   AND tgt.index_id         = ref.index_id
   AND tgt.type             = ref.type
   AND tgt.sub_type         = ref.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Apply Refresh label to indexes '
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Cleanup
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM [##SQLXL_Index_prescription]
 WHERE action_desc = N'Refresh' -- already updated appropriate values
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Clear out interim results table - Refresh'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Flag indexes not ACTIONed
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       prescription = N'TBD ' + obj_type_hdr + CHAR(096) + idx_type_hdr
  FROM [##SQLXL_Index_compilation] AS tgt WITH (TABLOCKX)
 WHERE tgt.rec_type     = N'I'                              -- index level composite record
   AND tgt.prescription IS NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Flag indexes without a prescription'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Delete all empty Diagnostics
--------------------------------------------------------------------------------------------------------------------------------------------
DELETE
  FROM [##SQLXL_Index_Diagnostics]
 WHERE diagnostic IS NULL
    OR LTRIM(diagnostic) = N''
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Clear out empty interim diagnostic records'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
** PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PRESCRIPTION PRIORITY PR **
\******************************************************************************************************************************************/
UPDATE tgt -- [##SQLXL_Index_compilation]
   SET
/*** LOCAL TESTING ***
DECLARE @Prio_wait_time             SMALLINT = 100
       ,@Prio_wait_count            SMALLINT =  40
       ,@Prio_locks                 SMALLINT =  40
       ,@Prio_lock_promotions       SMALLINT =  60
       ,@Prio_lock_promotion_fails  SMALLINT =  80
       ,@Prio_page_splits           SMALLINT =  60
       ,@Prio_page_merges           SMALLINT =  60
       ,@Prio_OPS_forwarded_fetches SMALLINT =  20
       ,@Prio_missing_indexes       SMALLINT =  60
       ,@Prio_OPS_writes            SMALLINT =  30
       ,@Prio_buffer_cache_used     SMALLINT =  60
       ,@Prio_OPS_read_write_ratio  SMALLINT =  4 -- Note: starts with 4X as the "zero" value and works backwards from there
       ,@Prio_reads                 SMALLINT =  10
       ,@Prio_scans                 SMALLINT =  40
       ,@Prio_lookups               SMALLINT =  60
       ,@Prio_LOB                   SMALLINT =  40
       ,@xtp_Priority_deflator      SMALLINT =  25 -- divisor, since activities in memory much faster than disk

SELECT tgt.database_id,tgt.object_id,tgt.index_id,tgt.type,tgt.sub_type,
--*/
       tbl_priority_metric =
-- Waiting (19) ------------------------------------------------------------------------------------
  (  IIF(a.ops_total_wait_MS_CNT > 0,1.0 * COALESCE(tgt.ops_total_wait_MS_CNT,0.0) / a.ops_total_wait_MS_CNT,0.0)
   * @Prio_wait_time
  )

+ (  IIF(a.ops_total_wait_CNT > 0,1.0 * COALESCE(tgt.ops_total_wait_CNT,0.0) / a.ops_total_wait_CNT,0.0)
   * @Prio_wait_count
  )

-- Locks (4) ---------------------------------------------------------------------------------------
+ (  IIF(a.ops_total_lock_CNT > 0,1.0 * COALESCE(tgt.ops_total_lock_CNT,0.0) / a.ops_total_lock_CNT ,0.0)
   * @Prio_locks
  )

-- @Prio_lock_promotions - treat as additional locks (10x) for computing affect on priority
+ (  IIF(a.ios_lock_promotion_CNT > 0
        ,10.0 * COALESCE(tgt.ios_lock_promotion_CNT,0.0) / a.ios_lock_promotion_CNT / a.ops_total_lock_CNT
        ,0.0)
   * @Prio_lock_promotions
  )

-- @Prio_lock_promotion_fail - treat as additional locks (100x)  for computing affect on priority
+ (  IIF(a.ios_lock_promotion_fail_CNT > 0
        ,100.0 * COALESCE(tgt.ios_lock_promotion_fail_CNT,0.0) / a.ios_lock_promotion_fail_CNT / a.ops_total_lock_CNT
        ,0.0)
   * @Prio_lock_promotion_fails
  )

-- Splits (7) --------------------------------------------------------------------------------------
+ (  IIF(a.ops_total_page_split_CNT > 0,1.0 * COALESCE(tgt.ops_total_page_split_CNT,0.0) / a.ops_total_page_split_CNT,0.0)
   * @Prio_page_splits / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- Merges (7) --------------------------------------------------------------------------------------
+ (  IIF(a.ops_total_page_merge_CNT > 0,1.0 * COALESCE(tgt.ops_total_page_merge_CNT,0.0) / a.ops_total_page_merge_CNT,0.0)
   * @Prio_page_merges  / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- Missing index Advantage (8) - total read Weighted -----------------------------------------------
+ (  IIF(a.mix_advantage_weighted_AMT > 0,1.0 * COALESCE(tgt.mix_advantage_weighted_AMT ,0.0) / a.mix_advantage_weighted_AMT,0.0)
   * @Prio_missing_indexes
  )

-- Writes (19) Excludes Splits & Merges computed above ---------------------------------------------
+ (  IIF(a.ops_total_write_CNT > 0,1.0 * COALESCE(tgt.ops_total_write_CNT,0.0) / a.ops_total_write_CNT,0.0)
   * @Prio_OPS_writes / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- Buffer cache usage (5) - weighted by percent of table+indexes in memory times the log of the reserved size of the table + indexes
+ (  COALESCE(b.mem_log,0.0)
   * @Prio_buffer_cache_used
  )

-- Read to Write Ratio  ----------------------------------------------------------------------------
+ (  IIF(COALESCE(tgt.ops_read_to_write_RAT,0.0) < 4.0
        ,(4.0 - COALESCE(tgt.ops_read_to_write_RAT,0.0)) * COALESCE(tgt.ops_write_to_instance_PCT,0.0)
        ,0.0)
   * @Prio_OPS_read_write_ratio / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- Operations Reads (#) ----------------------------------------------------------------------------
+ (  IIF(a.ops_total_read_CNT > 0,1.0 * COALESCE(tgt.ios_range_scan_CNT,0.0) / a.ops_total_scan_CNT,0.0)
   * @Prio_reads / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- Operations Scans (7) ----------------------------------------------------------------------------
-- <FUTURE> cs_delete_buffer_scan_CNT counts twice since extra action required to remove values from nonclustered columnstore result
+ (  IIF(a.ops_total_scan_CNT > 0,1.0 * COALESCE(tgt.ops_total_scan_CNT,0.0) / a.ops_total_scan_CNT,0.0)
   * @Prio_scans / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- Operations Lookups (1) --------------------------------------------------------------------------
+ (  IIF(a.ios_singleton_lookup_CNT > 0,1.0 * tgt.ios_singleton_lookup_CNT / a.ios_singleton_lookup_CNT,0.0)
   * @Prio_lookups / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- Operations Heap Forwarded Fetches (1) - treat as an additional lookup for priority computation --
+ (  IIF(a.ios_forwarded_fetch_CNT > 0
        ,2.0 * COALESCE(tgt.ios_forwarded_fetch_CNT,0.0)
             / a.ios_forwarded_fetch_CNT
             / (a.ios_singleton_lookup_CNT + a.ios_forwarded_fetch_CNT)
        ,0.0)
   * @Prio_OPS_forwarded_fetches / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- Usage Reads (#) ---------------------------------------------------------------------------------
+ (  IIF(a.ius_user_read_CNT > 0,1.0 * COALESCE(tgt.ius_user_read_CNT,0.0) / a.ius_user_read_CNT,0.0)
   * @Prio_reads / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- Usage Scans (7) ---------------------------------------------------------------------------------
-- <FUTURE> NOTE: cs_delete_buffer_scan_CNT counts twice since extra action required to remove values from nonclustered columnstore result
+ (  IIF(a.ius_user_scans_CNT > 0,1.0 * COALESCE(tgt.ius_user_scans_CNT,0.0) / a.ius_user_scans_CNT,0.0)
   * @Prio_scans / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- Usage Lookups (1) -------------------------------------------------------------------------------
+ (  IIF(COALESCE(a.ius_user_lookups_CNT,0) + COALESCE(a.ius_system_lookups_CNT,0) > 0
        ,1.0 * ( COALESCE(tgt.ius_user_lookups_CNT  ,0.0) + COALESCE(tgt.ius_system_lookups_CNT,0.0))
             / ( COALESCE(  a.ius_user_lookups_CNT  ,0.0) + COALESCE(  a.ius_system_lookups_CNT,0.0))
        ,0.0)
   * @Prio_lookups / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- LOB data (6) ------------------------------------------------
+ (  IIF(( COALESCE(a.ios_lob_fetch_pages_CNT            ,0.0)
         + COALESCE(a.ios_lob_orphan_create_CNT          ,0.0) -- Bulk operations
         + COALESCE(a.ios_lob_orphan_insert_CNT          ,0.0) -- Bulk operations
         + COALESCE(a.ios_row_overflow_fetch_in_pages_CNT,0.0)
         + COALESCE(a.ios_column_value_pull_in_row_CNT   ,0.0)
         + COALESCE(a.ios_column_value_push_off_row_CNT  ,0.0)
         ) > 0.0
        ,1.0 * ( COALESCE(tgt.ios_lob_fetch_pages_CNT            ,0.0)
               + COALESCE(tgt.ios_lob_orphan_create_CNT          ,0.0) -- Bulk operations
               + COALESCE(tgt.ios_lob_orphan_insert_CNT          ,0.0) -- Bulk operations
               + COALESCE(tgt.ios_row_overflow_fetch_in_pages_CNT,0.0)
               + COALESCE(tgt.ios_column_value_pull_in_row_CNT   ,0.0)
               + COALESCE(tgt.ios_column_value_push_off_row_CNT  ,0.0)
               )
             / ( COALESCE(a.ios_lob_fetch_pages_CNT            ,0.0)
               + COALESCE(a.ios_lob_orphan_create_CNT          ,0.0) -- Bulk operations
               + COALESCE(a.ios_lob_orphan_insert_CNT          ,0.0) -- Bulk operations
               + COALESCE(a.ios_row_overflow_fetch_in_pages_CNT,0.0)
               + COALESCE(a.ios_column_value_pull_in_row_CNT   ,0.0)
               + COALESCE(a.ios_column_value_push_off_row_CNT  ,0.0)
               )
         ,0.0)
   * @Prio_LOB / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
  )

-- Flagged to create new NCS -------------------------------
+ (  IIF(CHARINDEX(N'Request new NCS',tgt.prescription) > 0                   -- NOTE: keep in synch with idx_type_hdr & action codes
        ,50.0 / IIF(obj.is_memory_optimized = 0,1.0,@xtp_Priority_deflator)
        ,0.0)
  )

  FROM (SELECT * FROM [##SQLXL_Index_compilation] WHERE type = N'A') AS a   -- instance level aggregate record
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_compilation] WITH (TABLOCKX) WHERE rec_type = N'P') AS tgt -- parent level aggregate record

  JOIN [##SQLXL_Index_sys_objects] AS obj
    ON tgt.database_id = obj.database_id
   AND tgt.object_id   = obj.object_id

  LEFT OUTER
  JOIN (-- Buffer cache usage as a percent of the weighted total
        SELECT rec_type
              ,database_id,object_id,index_id,type,sub_type
              ,mem_log = (b.mem_log / SUM(b.mem_log) OVER ())
          FROM (--Buffer cache usage - weighted by percent of table+indexes in memory
                --                     times the log of the reserved size of the table+indexes
                SELECT *
                      ,mem_log = LOG(c.reserved_page_PG_CNT) * c.buffer_total_KB_CNT / (c.reserved_page_PG_CNT * 8.0)
                  FROM [##SQLXL_Index_compilation] AS c
                 WHERE c.rec_type                = N'P'     -- parent level aggregate record
                   AND c.reserved_page_PG_CNT    > 0
               ) AS b
       ) AS b
    ON tgt.rec_type  = b.rec_type
   AND tgt.object_id = b.object_id
   AND tgt.index_id  = b.index_id
   AND tgt.type      = b.type
   AND tgt.sub_type  = b.sub_type
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Compute Parent Prescription Priority - Index Percent of Totals'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Add Priority Metric computations to Parent & Indexes
\******************************************************************************************************************************************/
UPDATE [##SQLXL_Index_compilation] WITH (TABLOCKX)
   SET tbl_priority_metric = (--
                              SELECT SUM(tbl_priority_metric)
                                FROM [##SQLXL_Index_compilation]
                               WHERE rec_type IN (N'P'  -- parent level aggregate records
                                                 ,N'V'  -- SQL table valued function aggregate records
                                                 )
                             )
 WHERE type = N'A'  -- instance level aggregate record
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Aggregate Database & Instance Prescription Priority'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Databases OMITTED from this request
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @rowcount BIGINT
       ,@i        BIGINT
       ,@msg      NVARCHAR(1000)
--*/
BEGIN TRY
   DROP TABLE [#omitted_databases];
END TRY
BEGIN CATCH
END CATCH

SELECT database_id = CAST(db.database_id AS NVARCHAR(20))
      ,[Omitted Reason] = N'Database ' + QUOTENAME(db.name) + N' SKIPPED due to '
                        + LTRIM(  IIF(db.user_access_desc <> N'MULTI_USER'
                                    ,N' User Access Description: ' + db.user_access_desc
                                    ,N'')
                               + IIF(db.state_desc       <> N'ONLINE'
                                    ,N' Database state: ' + db.state_desc
                                    ,N'')
                               )
      ,rn = ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
  INTO #omitted_databases
  FROM [##SQLXL_Index_sys_databases] AS db
 WHERE db.user_access_desc     <> N'MULTI_USER'
    OR db.state_desc           <> N'ONLINE'
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

SET @rowcount = @@ROWCOUNT;

IF @rowcount > 0 BEGIN
   SET @i = 1
   SELECT [Omitted Reason]
     FROM #omitted_databases    -- display on RESULTS tab too
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   RAISERROR(N'',0,0) WITH NOWAIT;
   RAISERROR(N'### OMITTED DATABASES ##################################################################',0,0) WITH NOWAIT;

   WHILE @i <= @rowcount
   BEGIN
      SELECT @msg = [Omitted Reason]
        FROM #omitted_databases
       WHERE rn = @i
      OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @i += 1
   END  -- BEGIN

   RAISERROR(N'########################################################################################',0,0) WITH NOWAIT;
END; -- IF @rowcount > 0

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' List skipped databases if found'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 End of procedure SQLXL_INDEX
\******************************************************************************************************************************************/
IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@collection_DTTM,GETDATE()),0))
            + N' End of procedure [##SQLXL_Index]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   RAISERROR(N''                                                                                       ,0,0) WITH NOWAIT;
   RAISERROR(N'***************************************************************************************',0,0) WITH NOWAIT;
   RAISERROR(N'* Leave this session open to retain SQLXL_Index objects created as #temporary objects *',0,0) WITH NOWAIT;
   RAISERROR(N'***************************************************************************************',0,0) WITH NOWAIT;

/*** LOCAL TESTING ***
DECLARE @sql NVARCHAR(MAX);
--*/
   SET @sql = N'SELECT N''Completed SQLXL_Index data & result gathering'''
            + N' AS [Elapsed Time '
            + [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@collection_DTTM,GETDATE()),0))
            + N' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .]'
            + N'UNION ALL '
            + N'SELECT N''Return to Excel worksheet to retrieve & review captured results'''
            + N'UNION ALL '
            + N'SELECT N''*********************************************************************************************'''
            + N'UNION ALL '
            + N'SELECT N''*********************************************************************************************'''
            + N'UNION ALL '
            + N'SELECT N''**   Leave this session open to retain SQLXL_Index objects created as #temporary objects   **'''
            + N'UNION ALL '
            + N'SELECT N''*********************************************************************************************'''
            + N'UNION ALL '
            + N'SELECT N''*********************************************************************************************'''
   EXECUTE (@sql);
END;

IF @@TRANCOUNT > 0 COMMIT;

GO -- end of stored procedure [SQLXL_Index]

RAISERROR ('Created procedure [##SQLXL_Index] ...',0,0) WITH NOWAIT;

IF @@TRANCOUNT > 0 COMMIT;

/******************************************************************************************************************************************\
############################################################################################################################################
 END SQLXL_INDEX procedure
############################################################################################################################################
\******************************************************************************************************************************************/

-- VERSION 25.01.07
/******************************************************************************************************************************************\
SQLXL BASE FUNCTIONS SQLXL BASE FUNCTIONS SQLXL BASE FUNCTIONS SQLXL BASE FUNCTIONS SQLXL BASE FUNCTIONS SQLXL BASE FUNCTIONS SQLXL BASE FUN
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
PLEASE NOTE: All SQLXL helper functions are created in the database your SSMS, ADS, dBeaver etc. session is connected to,
since you can't create temporary functions.
After clicking the "Get SQL Data" button in the spreadsheet or executing the SQLCMD script to create the text file they will be
deleted.
\******************************************************************************************************************************************/

/******************************************************************************************************************************************/
-- Session Environment settings
/******************************************************************************************************************************************/
SET ANSI_NULLS               ON; -- Specifies ISO compliant behavior of (=) and (<>) comparison operators when used with null values
SET ANSI_WARNINGS            ON; -- Specifies ISO standard behavior for several error conditions. Must be ON with FOR XML statements
SET ARITHABORT               ON; -- Terminates a query when an overflow or divide-by-zero error occurs during query execution
SET ARITHIGNORE             OFF; -- Controls whether error messages are returned from overflow or divide-by-zero errors during a query
SET CURSOR_CLOSE_ON_COMMIT  OFF; -- OFF means that the server will not close cursors when you commit a transaction
SET DATEFORMAT              YMD; -- Sets the order of the month, day, and year date parts for interpreting date&time strings
SET DEADLOCK_PRIORITY       -10; -- Specifies the relative importance of the current session if deadlocked. (-10) is lowest priority
SET FMTONLY                 OFF; -- Returns only metadata to client. Used to test the response format without actually running the query
SET FORCEPLAN               OFF; -- When ON, optimizer uses FORCE ORDER + NESTED LOOP JOIN for FROM clause tables
SET IMPLICIT_TRANSACTIONS   OFF; -- When OFF, sets the connection to autocommit transaction mode
SET LOCK_TIMEOUT           1000; -- Specifies the number of milliseconds a statement waits for a lock to be released
SET NOCOUNT                  ON; -- Stops the message showing the count of rows affected by a statement or stored procedure
SET NOEXEC                  OFF; -- Compiles each query but does not execute it
SET NUMERIC_ROUNDABORT      OFF; -- Specifies the level of error reporting generated when rounding causes a loss of precision
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute
SET QUOTED_IDENTIFIER        ON; -- Causes SQL Server to follow ISO rules using quotation mark delimiting identifiers and literal strings
SET STATISTICS IO,PROFILE,TIME,XML OFF; -- Displays information on statement resource usage
SET TEXTSIZE         2147483647; -- Specifies size of BLOB returned by a SELECT statement. Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON; -- Automatically roll back the current transaction when a statement raises a run-time error

/******************************************************************************************************************************************\
 *Task* Create function [dbo].[SQLXL_Strip_Strings] - remove character elements found in a string
 NOTE: SQL functions cannot be created as temporary objects
 All SQLXL functions are created in the database your SQL studio tool is connected to.
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_Strip_Strings]') IS NULL -- check for object existence
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_Strip_Strings]() RETURNS BIT AS BEGIN RETURN 0 END');
GO

ALTER FUNCTION [dbo].[SQLXL_Strip_Strings]
     (@String  NVARCHAR(MAX)
     ,@Match   NVARCHAR(MAX)
     ,@replace NVARCHAR(MAX)
     )
RETURNS NVARCHAR(MAX)
WITH RETURNS NULL ON NULL INPUT
AS BEGIN
   IF @replace IS NULL SET @replace = N''
   SET @Match = N'%['+ @Match+']%'

   WHILE PATINDEX(@Match, @String) > 0 SET @String = STUFF(@String,PATINDEX(@Match,@String),1,@replace)

   IF @string = N'' SET @string = NULL
   RETURN @String
END;
GO

/******************************************************************************************************************************************\
 *Task* Create function [dbo].[SQLXL_Keep_Strings] - keep only character elements found in a string
 NOTE: SQL functions cannot be created as temporary objects
 All SQLXL functions are created in the database your SQL studio tool is connected to.
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_Keep_Strings]') IS NULL -- check for object existence
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_Keep_Strings]() RETURNS BIT AS BEGIN RETURN 0 END');
GO

ALTER FUNCTION [dbo].[SQLXL_Keep_Strings]
     (@String  NVARCHAR(MAX)
     ,@Match   NVARCHAR(MAX)
     ,@replace NVARCHAR(MAX)
     )
RETURNS NVARCHAR(MAX)
WITH RETURNS NULL ON NULL INPUT
AS BEGIN
   IF @replace IS NULL SET @replace = N''
   SET @Match =  N'%[^'+ @Match+']%'

   WHILE PATINDEX(@Match, @String) > 0 SET @String = STUFF(@String,PATINDEX(@Match,@String),1,@replace)

   IF @string = N'' SET @string = NULL
   RETURN @String
END;
GO

/******************************************************************************************************************************************\
 *Task* Create function [dbo].[SQLXL_Parse_Strings] -  to, unh, parse strings using native functions if available or recursive CTE
 NOTE: SQL functions cannot be created as temporary objects
 All SQLXL functions are created in the database your SQL studio tool is connected to.
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_Parse_Strings]') IS NULL -- check for object existence
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_Parse_Strings]() RETURNS @t TABLE (r BIT, s BIT) AS BEGIN RETURN END');
GO

-----------------------------------------------------------------------------------------------------------
-- SQL 2022+ - use function STRING_SPLIT if possible, else recursive CTE
-----------------------------------------------------------------------------------------------------------
IF     CAST(PARSENAME(CONVERT(VARCHAR(32),SERVERPROPERTY(N'productversion')),4) AS INT) >= 16  -- SQL 2022+
   AND (SELECT compatibility_level FROM sys.databases WHERE database_id = DB_ID())      >= 160 -- SQL 2022+
BEGIN EXEC(N'
   ALTER FUNCTION [dbo].[SQLXL_Parse_Strings]
        (@string    NVARCHAR(MAX)
        ,@separator NVARCHAR(MAX)
        )
   RETURNS @parsedString
     TABLE (RowNbr BIGINT
           ,string NVARCHAR(MAX) COLLATE DATABASE_DEFAULT NULL
           )
   WITH EXECUTE AS CALLER
   AS
   BEGIN

      DECLARE @lensep INT = DATALENGTH(@separator)/2;

      IF     @lensep       = 1    -- STRING_SPLIT function only accepts a single splitting charatcer
         AND LEN(@string) <= 4000 -- STRING_SPLIT function only accepts strings up to 4000 characters
      BEGIN
         INSERT
           INTO @parsedString
         SELECT ordinal
               ,value
           FROM STRING_SPLIT(@string,@separator,1);
      END
      ELSE BEGIN
         SET @string=@string+ @separator;

         WITH p AS (
         SELECT CAST(1 AS BIGINT)                              AS StartPos
               ,CHARINDEX(@separator,@string)                  AS EndPos
         UNION ALL
         SELECT EndPos + @lensep                               AS StartPos
               ,CHARINDEX(@separator,@string,EndPos + @lensep) AS EndPos
           FROM p
          WHERE CHARINDEX(@separator,@string,EndPos + @lensep) > 0
         )
         INSERT
           INTO @parsedString
         SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
               ,SUBSTRING(@string,StartPos,EndPos-StartPos)
           FROM p
         OPTION (MAXRECURSION 0)
      END  -- ELSE BEGIN

      RETURN
   END')  -- EXEC
END;      -- IF CAST(PARSENAME(CONVERT(VARCHAR(32),SERVERPROPERTY(N'productversion')),4) AS INT) >= 16

ELSE IF     CAST(PARSENAME(CONVERT(VARCHAR(32),SERVERPROPERTY(N'productversion')),4) AS INT) >= 13  -- SQL 2016+
        AND (SELECT compatibility_level FROM sys.databases WHERE database_id = DB_ID())      >= 130 -- SQL 2016+
-----------------------------------------------------------------------------------------------------------
-- SQL 2016+ - use function STRING_SPLIT if possible, and ROW_NUMBER to order the result
-- else recursive CTE
-----------------------------------------------------------------------------------------------------------
BEGIN EXEC(N'
   ALTER FUNCTION [dbo].[SQLXL_Parse_Strings]
        (@string    NVARCHAR(MAX)
        ,@separator NVARCHAR(MAX)
        )
   RETURNS @parsedString
     TABLE (RowNbr BIGINT
           ,string NVARCHAR(MAX) NULL
           )
   WITH EXECUTE AS CALLER
   AS
   BEGIN

      DECLARE @lensep INT = DATALENGTH(@separator)/2;

      IF     @lensep       = 1    -- STRING_SPLIT function only accepts a single splitting character
         And Len(@String) <= 4000 -- STRING_SPLIT function only accepts strings up to 4000 characters
      BEGIN
         INSERT
           INTO @parsedString
         SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)),value
           FROM STRING_SPLIT(@string,@separator);
      END
      ELSE BEGIN
         SET @string=@string+ @separator;

         WITH p AS (
         SELECT CAST(1 AS BIGINT)                              AS StartPos
               ,CHARINDEX(@separator,@string)                  AS EndPos
         UNION ALL
         SELECT EndPos + @lensep                               AS StartPos
               ,CHARINDEX(@separator,@string,EndPos + @lensep) AS EndPos
           FROM p
          WHERE CHARINDEX(@separator,@string,EndPos + @lensep) > 0
         )
         INSERT
           INTO @parsedString
         SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
               ,SUBSTRING(@string,StartPos,EndPos-StartPos)
           FROM p
         OPTION (MAXRECURSION 0)
      END

      RETURN
   END')  -- EXEC
END;      -- ELSE IF CAST(PARSENAME(CONVERT(VARCHAR(32),SERVERPROPERTY(N'productversion')),4) AS INT) >= 13

ELSE BEGIN EXEC(N'
-----------------------------------------------------------------------------------------------------------
-- Use only recursive CTE
-----------------------------------------------------------------------------------------------------------
   ALTER FUNCTION [dbo].[SQLXL_Parse_Strings]
        (@string    NVARCHAR(MAX)
        ,@separator NVARCHAR(MAX)
        )
   RETURNS @parsedString
     TABLE (RowNbr BIGINT
           ,string NVARCHAR(MAX) NULL
           )
   WITH EXECUTE AS CALLER
   AS
   BEGIN

     DECLARE @lensep INT = DATALENGTH(@separator)/2;

     BEGIN
        SET @string=@string+ @separator;

        WITH p AS (
        SELECT CAST(1 AS BIGINT)                              AS StartPos
              ,CHARINDEX(@separator,@string)                  AS EndPos
        UNION ALL
        SELECT EndPos + @lensep                               AS StartPos
              ,CHARINDEX(@separator,@string,EndPos + @lensep) AS EndPos
          FROM p
         WHERE CHARINDEX(@separator,@string,EndPos + @lensep) > 0
        )
        INSERT
          INTO @parsedString
        SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL))
              ,SUBSTRING(@string,StartPos,EndPos-StartPos)
          FROM p
        OPTION (MAXRECURSION 0)
     END

     RETURN
   END')  -- EXEC
END;      -- ELSE BEGIN

GO

/******************************************************************************************************************************************\
 *Task* Create function [dbo].[SQLXL_Numbers]
 NOTE: SQL functions cannot be created as temporary objects
 All SQLXL functions are created in the database your SQL studio tool is connected to.
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_Numbers]') IS NULL -- check for object existence
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_Numbers]() RETURNS TABLE AS RETURN (SELECT id = 0)');
GO

ALTER FUNCTION [dbo].[SQLXL_Numbers]
     (@zero_or_one   BIT = 1
     ,@top           BIGINT
     )
RETURNS TABLE AS RETURN
WITH
  P0(n) AS (SELECT NULL FROM (VALUES (1),(2),(3),(4)) n(n)),
  P1(n) AS (SELECT NULL FROM P0 A, P0 B),--        16 rows
  P2(n) AS (SELECT NULL FROM P1 A, P1 B),--       256 rows
  P3(n) AS (SELECT NULL FROM P2 A, P2 B),--     65536 rows
  P4(n) AS (SELECT ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) FROM P3 A, P3 B) -- 4294967296 rows
SELECT 0 n WHERE @zero_or_one = 0
UNION ALL
SELECT TOP(@top - CASE WHEN @zero_or_one = 0 THEN 1 ELSE 0 END) n FROM P4;
GO

/******************************************************************************************************************************************\
 *Task* Create function [dbo].[SQLXL_3SD] - return a number rounded to 3 significant digits
 NOTE: SQL functions cannot be created as temporary objects
 All SQLXL functions are created in the database your SQL studio tool is connected to.
FUTURE: consider using below for straight power of 10 conversions
   ALTER function sfround(@number float, @sigdig int) returns float as
   BEGIN
   return case when @number = 0 THEN 0 ELSE round(@number ,@sigdig -1-floor(log10(abs(@number )))) END
   END
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_3SD]') IS NULL -- check for object existence
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_3SD]() RETURNS BIT AS BEGIN RETURN 0 END');
GO

ALTER FUNCTION [dbo].[SQLXL_3SD]
     (@value FLOAT
     ,@type  NVARCHAR(3) = N''
     )
/*
@Type Parameters
"ns" = Nanoseconds   10^-9 -- NOTE: Cannot use DATEADD with these time types
"mcs"= Microseconds  10^-6 -- NOTE: Cannot use DATEADD with these time types
"u"  = Microseconds  10^-6
"us" = Microseconds  10^-6
"U"  = Microseconds  10^-6
"m"  = Milliseconds  10^-3
"ms" = Milliseconds  10^-3
"M"  = Milliseconds  10^-3
"s"  = Seconds       10^ 0
"ss" = Seconds       10^ 0
"S"  = Seconds       10^ 0
"mi" = Minutes
"hh" = Hours
"dd" = Days
"wk" = Weeks
"yy" = Years

"P"  = SQL Server 8KB (8192 2^12 bytes) Pages
"PG" = SQL Server 8KB (8192 2^12 bytes) Pages
"B"  = Bytes       2^ 0
"KB" = Kilobytes   2^10
"MB" = Megabytes   2^20
"GB" = Gigabytes   2^30
"TB" = Terabytes   2^40
"PB" = Petabytes   2^50
"EB" = Exabytes    2^60
"ZB" = Zettabytes  2^70
"YB" = Yottabytes  2^80

""   = Number
"N"  = Number
"I"  = Integer
"%"  = Percent

TO DO;
- handle negative numbers
- handle tiny numbers

NOTE: cannot use NVARCHAR as value input since FLOAT values get converted to exponents
      when converted to VARCHAR in calculating POWER DIVISOR
*/

RETURNS NVARCHAR(7) -- COLLATE does not work here!
AS BEGIN
   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Special Cases - empty, (MAX) value, less than zero
   -----------------------------------------------------------------------------------------------------------------------------------------
   IF @value IS NULL RETURN N''                     -- return empty string on NULL value
   IF @value = -1 AND @type = N'I' RETURN N'(MAX)'  -- return (MAX) when -1 entered - for %CHAR data types
   IF @value < 0.0   RETURN N'(<ZERO)'              -- no handling negative numbers, return (<ZERO)

   -- Multiply percents by 100
   IF @type = N'%' SET @value = 100.0 * @value

   -- convert SQL Server Pages to 8KB - makes math easier below
   IF @type IN (N'P',N'PG') BEGIN SET @value = @value * 8.0 SET @type  = N'KB' END

   /*********************************************************************************\
    *** There is a bug IN the ROUND function when called inside a scalar function ***
    *** introduced some time after SQL 2008 and before 2019                       ***
    *** without the next line "SET @value = @value + 0.0001" below:               ***
    *** SELECT [dbo].[SQLXL_3SD](0.0150,N'N') returns 0.01 NOT 0.02!              ***
    *** SELECT [dbo].[SQLXL_3SD](0.0450,N'N') returns 0.04 NOT 0.05!              ***
    *** SELECT [dbo].[SQLXL_3SD](0.0750,N'N') returns 0.07 NOT 0.08!              ***
    *** Until this gets figured out add an extra 0.0001 to values:                ***
   \*********************************************************************************/
   SET @value = @value + 0.0001

   -- if too small a number (for now) show zero plus the metric type (when not a number or an integer)
   IF ROUND(@value,2) < 0.01
      RETURN CASE WHEN @type = N'I' THEN N'0' ELSE N'0.00' END
            +CASE WHEN @type NOT IN (N'I',N'N')
                  THEN @type
                  ELSE N''
             END;

   IF ROUND(@value,2) < 1.00
      RETURN LEFT(CONVERT(MONEY,ROUND(@value,2)),4) + CASE WHEN @type NOT IN (N'I',N'N')
                                                           THEN @type
                                                           ELSE N''
                                                      END;

   -- Create a rounded to integer value for range comparisons below
   -- *** NOTE *** rounding the FLOAT(max value of a BIGINT) and converting to BIGINT causes error
   -- *** SELECT CAST(ROUND(CAST(9223372036854775807 AS FLOAT),0) AS BIGINT)
   -- *** fails with "Arithmetic overflow error converting expression to data type bigint"
   DECLARE @value_INT BIGINT  = ROUND(@value,0)

   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Standardize number suffix for datetime & NUMBER types
   -----------------------------------------------------------------------------------------------------------------------------------------
   SET @type = CASE @type -- modify inbound datetime data types to the corresponding DATEADD dateparts
                    WHEN N'N'   THEN N''    -- Number
                    WHEN N'NS'  THEN N'ns'
                    WHEN N'MC'  THEN N'mcs'
                    WHEN N'MCS' THEN N'mcs'
                    WHEN N'U'   THEN N'mcs'
                    WHEN N'US'  THEN N'mcs'
                    WHEN N'M'   THEN N'ms'                  -- milliseconds not missing nonclustered rowstore index
                    WHEN N'MS'  THEN N'ms'
                    WHEN N'S'   THEN N'ss'
                    WHEN N'SS'  THEN N'ss'
                    WHEN N'MI'  THEN N'mi'
                    WHEN N'MM'  THEN N'mi'
                    WHEN N'HH'  THEN N'hh'
                    WHEN N'DD'  THEN N'dd'
                    WHEN N'WK'  THEN N'wk'
                    WHEN N'YY'  THEN N'yy'
                    ELSE @type
               END

   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Special Cases - Dates & Time
   -----------------------------------------------------------------------------------------------------------------------------------------
   IF @type IN (N'ns' -- Nanoseconds   10^-9 -- NOTE: Cannot use DATEADD with these time types
               ,N'mcs'-- Microseconds  10^-6 -- NOTE: Cannot use DATEADD with these time types
               ,N'ms' -- Milliseconds  10^-3
               ,N'ss' -- Seconds       10^ 0
               ,N'mi' -- Minutes
               ,N'hh' -- Hours
               ,N'dd' -- Days
               ,N'wk' -- Weeks
               ,N'yy' -- Years
               )
   BEGIN
      IF @type = N'ns'  AND @value_INT >= 1000 BEGIN SET @type = N'mcs' SET @value = @value /1000.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'mcs' AND @value_INT >= 1000 BEGIN SET @type = N'ms'  SET @value = @value /1000.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'ms'  AND @value_INT >= 1000 BEGIN SET @type = N'ss'  SET @value = @value /1000.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'ss'  AND @value_INT >= 60   BEGIN SET @type = N'mi'  SET @value = @value /  60.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'mi'  AND @value_INT >= 60   BEGIN SET @type = N'hh'  SET @value = @value /  60.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'hh'  AND @value_INT >= 24   BEGIN SET @type = N'dd'  SET @value = @value /  24.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'dd'  AND @value_INT >= 7    BEGIN SET @type = N'wk'  SET @value = @value /   7.0 SET @value_INT = ROUND(@value,0) END
      IF @type = N'wk'  AND @value_INT >= 52   BEGIN SET @type = N'yy'  SET @value = @value /  52.0 SET @value_INT = ROUND(@value,0) END

      IF @value_INT >= 1000 RETURN N'FUTURE'
   END

   IF @value_INT < 10   RETURN CASE WHEN @type = N'I' THEN CAST(@value_int AS VARCHAR(3))
                                    ELSE LEFT(ROUND(CONVERT(MONEY,@value,2),2),4) + @type
                               END
   IF @value_INT < 100  RETURN CASE WHEN @type = N'I' THEN CAST(@value_int AS VARCHAR(3))
                                    ELSE LEFT(ROUND(CONVERT(MONEY,@value,2),1),4) + @type
                               END
   IF @value_INT < 1000 RETURN CASE WHEN @type = N'I' THEN CAST(@value_int AS VARCHAR(3))
                                    ELSE LEFT(ROUND(@value,0),4) + @type
                               END

   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Declares - use COLLATE to differentiate between LOWER and UPPER @type
   -----------------------------------------------------------------------------------------------------------------------------------------
   DECLARE @power  VARCHAR(3) = CASE WHEN @type IN (N'B',N'I',N'',N'%')
                                     THEN N''
                                     ELSE UPPER(LEFT(@type,1)) -- which power of 10 or 2 prefix to show
                                END COLLATE SQL_Latin1_General_CP1_CS_AS

          ,@factor FLOAT      = CASE WHEN @type IN (N'I',N'',N'%')
                                     THEN 1000.0 -- next major power of 10 prefix
                                     ELSE 1024.0 -- 2^10 Kilobytes
                                END
          ,@suffix VARCHAR(3) = CASE WHEN @type IN (N'%')    THEN N'%'  -- percent
                                     WHEN @type IN (N'I',N'') THEN N''   -- numbers and integers
                                     ELSE N'B'                                     -- bytes
                                END COLLATE SQL_Latin1_General_CP1_CS_AS

   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Calcs - if less than 3 digits to LEFT of decimal, multiply to show next lower power
   -----------------------------------------------------------------------------------------------------------------------------------------
   IF ROUND(@value,0) < 1000 AND @type <> N'%'
   BEGIN -- IF ROUND(@value,0) < 1000 AND @type <> N'%'
      WHILE ROUND(@value * @factor,0) < 1000
      BEGIN -- WHILE ROUND(@value * @factor,0) < 1000

         SET @value = @value * @factor
         SET @power = CASE @power COLLATE SQL_Latin1_General_CP1_CS_AS -- for each loop adjust the value type to the next lower size
                           WHEN N'n' THEN N'p' -- nano    > pico
                           WHEN N'u' THEN N'n' -- micro   > nano
                           WHEN N'm' THEN N'u' -- milli   > micro
                           WHEN N''  THEN N'm' -- deka    > milli
                           WHEN N'K' THEN N''  -- kilo    > deka
                           WHEN N'M' THEN N'K' -- mega    > kilo

                           WHEN N'G' THEN N'M' -- giga    > mega
                           WHEN N'B' THEN N'M' -- billion > mega
                           WHEN N'T' THEN CASE WHEN RIGHT(@type,1) = N'B'
                                                    THEN N'G' -- tera  > giga
                                                    ELSE N'B' -- tera  > billion
                                               END
                           WHEN N'P' THEN N'T' -- peta    > tera
                           WHEN N'E' THEN N'P' -- exa     > peta
                           WHEN N'Z' THEN N'E' -- zetta   > exa
                           WHEN N'Y' THEN N'Z' -- yotta   > zetta
                           ELSE N'#'
                      END
      END; -- WHILE ROUND(@value,0) < 1000
   END;    -- IF ROUND(@value,0) < 1000

   -----------------------------------------------------------------------------------------------------------------------------------------
  -- Calcs - if more than 3 digits to LEFT of decimal, divide to show next larger power
   -----------------------------------------------------------------------------------------------------------------------------------------
   ELSE IF ROUND(@value,0) > 999
   BEGIN -- IF ROUND(@value,0) > 999
      WHILE ROUND(@value,0) > 999
      BEGIN -- WHILE ROUND(@value,0) > 999
         SET @value = @value / @factor
         SET @power = CASE @power COLLATE SQL_Latin1_General_CP1_CS_AS  -- for each loop adjust the value type to the next higher size
                           WHEN N'p' THEN N'n' -- pico    > nano
                           WHEN N'n' THEN N'u' -- nano    > micro
                           WHEN N'u' THEN N'm' -- micro   > milli
                           WHEN N'm' THEN N''  -- milli   > deka
                           WHEN N''  THEN N'K' -- deka    > kilo
                           WHEN N'K' THEN N'M' -- kilo    > mega
                           WHEN N'M' THEN CASE WHEN RIGHT(@type,1) = N'B'
                                                    THEN N'G' -- mega  > giga
                                                    ELSE N'B' -- mega  > billion
                                               END
                           WHEN N'G' THEN N'T' -- giga    > tera
                           WHEN N'B' THEN N'T' -- billion > tera

                           WHEN N'T' THEN N'P' -- tera    > peta
                           WHEN N'P' THEN N'E' -- peta    > exa
                           WHEN N'E' THEN N'Z' -- exa     > zetta
                           WHEN N'Z' THEN N'Y' -- zetta   > yotta
                           ELSE N'#'
                      END
      END; -- WHILE ROUND(@value,0) > 999
   END;    -- IF ROUND(@value,0) > 999

   -----------------------------------------------------------------------------------------------------------------------------------------
  -- RETURN formatted value
   -----------------------------------------------------------------------------------------------------------------------------------------
   RETURN LTRIM(CASE WHEN ROUND(@value,0) >= 100 THEN LEFT(ROUND(CAST(@value AS DECIMAL(5,2)),0),3)
                     WHEN ROUND(@value,1) >=  10 THEN LEFT(ROUND(CAST(@value AS DECIMAL(5,2)),1),4)
                     ELSE                             LEFT(ROUND(CAST(@value AS DECIMAL(5,2)),2),4)
                END
               + @power
               + @suffix)

END;  -- of procedure
GO

/******************************************************************************************************************************************\
 *Task* Create Function [dbo].[SQLXL_INT_DTTM]
 Converts BIGINT time count to elapsed DATETIME (e.g. MILLISECONDS -> HOURS)
 NOTE: SQL functions cannot be created as temporary objects
 All SQLXL functions are created in the database your SQL studio tool is connected to.
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_INT_DTTM]') IS NULL -- check for object existence
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_INT_DTTM]() RETURNS BIT AS BEGIN RETURN 0 END');
GO

ALTER FUNCTION [dbo].[SQLXL_INT_DTTM]
     (@cnt  BIGINT   = NULL
     ,@prt  NCHAR(3) = N'ms' -- datepart, defaults to MILLISECONDS
     )
/* Converts elapsed count to DateTime */
RETURNS DATETIME
AS BEGIN
   IF @cnt IS NULL RETURN 0

   WHILE @cnt > 2147483647 -- max size INT for DATEADD parameter
   BEGIN
      IF @prt = N'wk'  BEGIN SET @prt = N'yy'  SET @cnt = @cnt /  52 END
      IF @prt = N'dd'  BEGIN SET @prt = N'wk'  SET @cnt = @cnt /   7 END
      IF @prt = N'hh'  BEGIN SET @prt = N'dd'  SET @cnt = @cnt /  24 END
      IF @prt = N'mi'  BEGIN SET @prt = N'hh'  SET @cnt = @cnt /  60 END
      IF @prt = N'ss'  BEGIN SET @prt = N'mi'  SET @cnt = @cnt /  60 END
      IF @prt = N'ms'  BEGIN SET @prt = N'ss'  SET @cnt = @cnt /1000 END
      IF @prt = N'mcs' BEGIN SET @prt = N'ms'  SET @cnt = @cnt /1000 END
      IF @prt = N'ns'  BEGIN SET @prt = N'mcs' SET @cnt = @cnt /1000 END
   END

   RETURN
      CASE @prt
           WHEN N'yy'  THEN DATEADD(yy ,@cnt,0)
           WHEN N'wk'  THEN DATEADD(wk ,@cnt,0)
           WHEN N'dd'  THEN DATEADD(dd ,@cnt,0)
           WHEN N'hh'  THEN DATEADD(hh ,@cnt,0)
           WHEN N'mi'  THEN DATEADD(mi ,@cnt,0)
           WHEN N'ss'  THEN DATEADD(ss ,@cnt,0)
           WHEN N'ms'  THEN DATEADD(ms ,@cnt,0)
           WHEN N'mcs' THEN DATEADD(mcs,@cnt,0)
           WHEN N'ns'  THEN DATEADD(ns ,@cnt,0)
           ELSE             0
           END
END;  -- of function
GO

/******************************************************************************************************************************************\
 *Task* Create Function [dbo].[SQLXL_DTTM_HMSM]
 Return a formatted date & time formatted elapsed value
 If >= 24 hours returns time in days
 If >= 60 minutes returns time in Hours
 If <  60 minutes returns time in MI:SS.mmm
 NOTE: SQL functions cannot be created as temporary objects
 All SQLXL functions are created in the database your SQL studio tool is connected to.

 For testing:
 SELECT [dbo].[SQLXL_DTTM_HMSM](DATEADD(millisecond, 750.1,0))
 SELECT [dbo].[SQLXL_DTTM_HMSM](DATEADD(millisecond,7500.1,0))
 SELECT [dbo].[SQLXL_DTTM_HMSM](DATEADD(second     ,  75.1,0))
 SELECT [dbo].[SQLXL_DTTM_HMSM](DATEADD(minute     ,  75.1,0))
 SELECT [dbo].[SQLXL_DTTM_HMSM](DATEADD(hour       ,  75.1,0))
\******************************************************************************************************************************************/
IF object_id(N'[dbo].[SQLXL_DTTM_HMSM]') IS NULL -- check for object existence
   EXEC(N'CREATE FUNCTION [dbo].[SQLXL_DTTM_HMSM]() RETURNS BIT AS BEGIN RETURN 0 END');
GO

ALTER FUNCTION [dbo].[SQLXL_DTTM_HMSM]
     (@dt DATETIME
     )
/* Returns elapsed date & time value as "#.## Day" -or- "#.## Hour" -or- "MM:SS:mmm" */
RETURNS NVARCHAR(20)
AS BEGIN
   IF @dt IS NULL RETURN N''

   DECLARE @df FLOAT = CONVERT(FLOAT,@dt,1)

   RETURN RTRIM(-- remove trailing spaces from formatted date/time
   CASE WHEN @df  =  -1          THEN N'NO LIMIT '
        WHEN @df  =   0          THEN N'00:00.000'

        WHEN @df >= 365.25       THEN LEFT(CAST(CONVERT(MONEY,@df / 365.25,1) AS NVARCHAR(21)) + N'yy      ',9) -- padding for same length

        WHEN @df >= 100.00       THEN LEFT(CAST(ROUND(@df,0)                  AS NVARCHAR(21)) + N'dd      ',9) -- padding for same length
        WHEN @df >=  10.00       THEN LEFT(CAST(ROUND(@df,1)                  AS NVARCHAR(21)) + N'dd      ',9) -- padding for same length
        WHEN @df >=   1.0        THEN LEFT(CAST(CONVERT(MONEY,@df         ,1) AS NVARCHAR(21)) + N'dd      ',9) -- padding for same length

        WHEN @df >=   1.0/(24.0) THEN LEFT(CAST(CONVERT(MONEY,@df * 24.0  ,1) AS NVARCHAR(21)) + N'hh      ',9) -- padding for same length

        ELSE RIGHT(CONVERT(NVARCHAR(12),@dt,114),9)

   END COLLATE Latin1_General_100_CI_AI)

END;  -- of function
GO

RAISERROR (N'Created SQLXL helper functions - locally persisted, cannot create temporary functions',0,0) WITH NOWAIT;

/******************************************************************************************************************************************\
********************************************************************************************************************************************
 END SQLXL Helper Functions. All SQLXL functions are created in the database your SQL studio tool is connected to.
********************************************************************************************************************************************
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
SQL Server Versions & Default Compatibility (as of Jan 2025)
--------------------------------------------------------------
Azure SQL DB   - 16   - 160
Azure SQL MI   - 16   - 160
        2025   - 17   - 170
        2022   - 16   - 160
        2019   - 15   - 150
        2017   - 14   - 140
        2016   - 13   - 130
        2014   - 12   - 120
        2012   - 11   - 110
        2008R2 - 10.5 - 100
        2008   - 10   - 100
        2005   -  9   -  90
        2000   -  8   -  80

SQL Server EngineEditions including Azure
-------------------------------------------------------------------------------------
 1 = Personal or Desktop Engine (Not available in SQL Server 2005 (9.x) and later versions.)
 2 = Standard (For Standard, Web, and Business Intelligence.)
 3 = Enterprise (For Evaluation, Developer, and Enterprise editions.)
 4 = Express (For Express, Express with Tools, and Express with Advanced Services)

 5 = Azure SQL Database
 6 = Azure Synapse Analytics
 8 = Azure SQL Managed Instance
 9 = Azure SQL Edge (For all editions of Azure SQL Edge)
11 = Azure Synapse serverless SQL pools
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
-- Session Environment settings
\******************************************************************************************************************************************/
SET ANSI_NULLS               ON; -- Specifies ISO compliant behavior of (=) and (<>) comparison operators when used with null values
SET ANSI_WARNINGS            ON; -- Specifies ISO standard behavior for several error conditions. Must be ON with FOR XML statements
SET ARITHABORT               ON; -- Terminates a query when an overflow or divide-by-zero error occurs during query execution
SET ARITHIGNORE             OFF; -- Controls whether error messages are returned from overflow or divide-by-zero errors during a query
SET CURSOR_CLOSE_ON_COMMIT  OFF; -- OFF means that the server will not close cursors when you commit a transaction
SET DATEFORMAT              YMD; -- Sets the order of the month, day, and year date parts for interpreting date&time strings
SET DEADLOCK_PRIORITY       -10; -- Specifies the relative importance of the current session if deadlocked. (-10) is lowest priority
SET FMTONLY                 OFF; -- Returns only metadata to client. Used to test the response format without actually running the query
SET FORCEPLAN               OFF; -- When ON, optimizer uses FORCE ORDER + NESTED LOOP JOIN for FROM clause tables
SET IMPLICIT_TRANSACTIONS   OFF; -- When OFF, sets the connection to autocommit transaction mode
SET LOCK_TIMEOUT           1000; -- Specifies the number of milliseconds a statement waits for a lock to be released
SET NOCOUNT                  ON; -- Stops the message showing the count of rows affected by a statement or stored procedure
SET NOEXEC                  OFF; -- Compiles each query but does not execute it
SET NUMERIC_ROUNDABORT      OFF; -- Specifies the level of error reporting generated when rounding causes a loss of precision
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute
SET QUOTED_IDENTIFIER        ON; -- Causes SQL Server to follow ISO rules using quotation mark delimiting identifiers and literal strings
SET STATISTICS IO,PROFILE,TIME,XML OFF; -- Displays information on statement resource usage
SET TEXTSIZE         2147483647; -- Specifies size of BLOB returned by a SELECT statement. Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON; -- Automatically roll back the current transaction when a statement raises a run-time error

/******************************************************************************************************************************************\
 *Task* Create table to store computed & formatted metric values. Structure needs to exist prior to creating procedure below
Index created after table is populated with data - see index [##ixuc_SQLXL_Index_Metrics]
\******************************************************************************************************************************************/
DECLARE @sql      NVARCHAR(MAX)
       ,@ssms_ads TINYINT  = (SELECT CASE WHEN program_name LIKE N'Microsoft SQL Server Management Studio%'
                                            OR program_name LIKE N'azdata%'   --azure data studio
                                          THEN 1
                                          WHEN program_name    = N'SQLCMD'
                                          THEN 2
                                          WHEN program_name    = N'Microsoft Office'
                                          THEN 3
                                          ELSE 0
                                     END
                                FROM [sys].[dm_exec_sessions] WITH (READUNCOMMITTED)
                               WHERE session_id = @@SPID
                             );

BEGIN TRY
   DROP TABLE [##SQLXL_Index_Metrics];
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE [##SQLXL_Index_Metrics]
(rec_type         NCHAR(1)       COLLATE Latin1_General_100_CI_AI NOT NULL  -- D-Database,P-Parent,I-index
,database_id      SMALLINT                                        NOT NULL
,object_id        INT                                             NOT NULL
,index_id         INT                                             NOT NULL
,type             NVARCHAR(2)    COLLATE Latin1_General_100_CI_AI NOT NULL
,sub_type         SMALLINT                                        NOT NULL
,metric           NVARCHAR(200)  COLLATE Latin1_General_100_CI_AI NOT NULL
,metric_AMT       FLOAT                                               NULL
,metric_fmt       NVARCHAR(8)    COLLATE Latin1_General_100_CI_AI     NULL  -- longer than 3SD return due to added percent symbol
,diagnostic_PCT   FLOAT                                               NULL
-----------------------------
,diagnostic       NVARCHAR(1000) COLLATE Latin1_General_100_CI_AI     NULL
,diagnostic_RANK  INT                                                 NULL
,previous_sum_PCT FLOAT                                               NULL
);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
RAISERROR(N'Created table [##SQLXL_Index_Metrics]',0,0) WITH NOWAIT;
END;

/*########################################################################################################################################*\
############################################################################################################################################
 *Task* Create Procedure [##SQLXL_Index_Present] -------------------------------------------------------------------------------------------
############################################################################################################################################
\*########################################################################################################################################*/
BEGIN TRY
   EXEC (N'CREATE PROCEDURE [##SQLXL_Index_Present] AS RETURN 0;')
END TRY
BEGIN CATCH
END CATCH
GO

ALTER PROCEDURE [##SQLXL_Index_Present]
  WITH RECOMPILE
AS

/*
Development Notes:
-- TRY_CONVERT & TRY_CAST DO NOT WORK if DATABASE COMPATIBILITY level is less than 11 (SQL 2012) !
*/

/******************************************************************************************************************************************\
 Procedure Environment settings
\******************************************************************************************************************************************/
SET ANSI_NULLS               ON; -- Specifies ISO compliant behavior of (=) and (<>) comparison operators when used with null values
SET ANSI_WARNINGS            ON; -- Specifies ISO standard behavior for several error conditions. Must be ON with FOR XML statements
SET ARITHABORT               ON; -- Terminates a query when an overflow or divide-by-zero error occurs during query execution
SET ARITHIGNORE             OFF; -- Controls whether error messages are returned from overflow or divide-by-zero errors during a query
SET CURSOR_CLOSE_ON_COMMIT  OFF; -- OFF means that the server will not close cursors when you commit a transaction
SET DATEFORMAT              YMD; -- Sets the order of the month, day, and year date parts for interpreting date&time strings
SET DEADLOCK_PRIORITY       -10; -- Specifies the relative importance of the current session if deadlocked. (-10) is lowest priority
SET FMTONLY                 OFF; -- Returns only metadata to client. Used to test the response format without actually running the query
SET FORCEPLAN               OFF; -- When ON, optimizer uses FORCE ORDER + NESTED LOOP JOIN for FROM clause tables
SET IMPLICIT_TRANSACTIONS   OFF; -- When OFF, sets the connection to autocommit transaction mode
SET LOCK_TIMEOUT           1000; -- Specifies the number of milliseconds a statement waits for a lock to be released
SET NOCOUNT                  ON; -- Stops the message showing the count of rows affected by a statement or stored procedure
SET NOEXEC                  OFF; -- Compiles each query but does not execute it
SET NUMERIC_ROUNDABORT      OFF; -- Specifies the level of error reporting generated when rounding causes a loss of precision
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute
SET QUOTED_IDENTIFIER        ON; -- Causes SQL Server to follow ISO rules using quotation mark delimiting identifiers and literal strings
SET STATISTICS IO,PROFILE,TIME,XML OFF; -- Displays information on statement resource usage
SET TEXTSIZE         2147483647; -- Specifies size of BLOB returned by a SELECT statement. Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON; -- Automatically roll back the current transaction when a statement raises a run-time error

DECLARE @max_excel_col_width SMALLINT = (SELECT CASE WHEN program_name = N'Microsoft Office'
                                                     THEN 8180  -- Max string size for VBA ADODB.CopyFromRecordset data loading
                                                     ELSE 32767
                                                END
                                           FROM [sys].[dm_exec_sessions] WITH (READUNCOMMITTED)
                                          WHERE session_id = @@SPID
                                        );

SELECT
/******************************************************************************************************************************************\
Incoming Records Types:
A - All sample/instance level
D - Database(s)
P - Parent object - rowstore table, clustered columnstore, View, SQL Table Valued Function
S - internal table or system object
I - Index, foreign key, missing index,

Excel Column Format Control - Append "|" (pipe) character for number format:
  |D... - Date &/or Time
  |E    - Exponent no decimals (same as E0)
  |E#   - Exponent with # decimals
  |N    - Commas no decimals (same as N0)
  |N#   - Commas with # decimals
  |P    - Percent with no decimals (same as P0)
  |P#   - Percent with # decimals
  |URL  - format cell as LINK
  |HTML - format cell as LINK

Excel column names with "\" (backslash) character code to identify columns to be formatted with a COLOR SCALE:
  \B - a number with LARGEST VALUE BAD - RED
  \G - a number with LARGEST VALUE GOOD - GREEN

Excel Column Label Formats passed to VBA code
  "!"  (exclamation) character code to identify columns to be formatted BOLD
  "!H" Bold Font and bigger size
  "~" (tilda) character code to identify locations of Line feeds to be replaced with CHRW(10)
\******************************************************************************************************************************************/

--------------------------------------------------------------------------------------------------------------------------------------------
-- Weighted sum of hurts
--------------------------------------------------------------------------------------------------------------------------------------------
 [Hurt Priority\B|N2] = IIF(    i.rec_type = N'P'                                  -- parent level aggregate record
                            AND a.tbl_priority_metric > 0
                           ,100.0 * i.tbl_priority_metric / a.tbl_priority_metric
                           ,NULL)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Filtering column used to drill down to table & index level
--------------------------------------------------------------------------------------------------------------------------------------------
,[Drill Down Filter|NW]   = -- Top Level
                          + CASE i.rec_type
                                 WHEN N'A' THEN i.rec_type -- instance level aggregate record
                                 WHEN N'D' THEN i.rec_type -- database level aggregate record
                                 WHEN N'P' THEN i.rec_type -- parent level aggregate record
                                 ELSE N'T'                 -- Index, "T" used so it sorts to the bottom
                            END
                          + IIF(i.rec_type <> N'A'         -- instance level aggregate record
                               ,CAST(i.database_id AS NVARCHAR(20))
                               ,N'')
                          + IIF(i.rec_type NOT IN (N'A'    -- instance level aggregate record
                                                  ,N'D'    -- database level aggregate record
                                                  )
                               ,N'.' + CAST(par_obj.object_id AS NVARCHAR(11))
                               ,N'')
                          -- Parent/History Table source table
                          + IIF(i.rec_type NOT IN (N'A'    -- instance level aggregate record
                                                  ,N'D'    -- database level aggregate record
                                                  )
                               -- Type of "table". Parents/sources first, history seconds, internal third
                               ,N'|'
                               + CASE i.obj_type_hdr
                                      WHEN N'HST'  -- History/archive table
                                      THEN N'3' + RIGHT(N'0000000000' + CAST(i.object_id AS NVARCHAR(20)),10)
                                      WHEN N'INT'  -- system/internal table
                                      THEN N'6' + RIGHT(N'0000000000' + CAST(i.object_id AS NVARCHAR(20)),10)
                                      ELSE N'1'    -- Parent (Heap,Clustered,Clustered column store),SQL Table Valued Function (TVF), View
                                 END
                              + N'|'
                              ,N'')
                          + IIF(i.rec_type = N'I'          -- index level composite record
                               ,N'|'                       -- "Pipe" added to delimit drill down term in Excel filter
                               + CASE RTRIM(i.type)
                                      WHEN N'0'  THEN N'01' -- rowstore heap
                                      WHEN N'1'  THEN N'02' -- clustered rowstore index
                                      WHEN N'5'  THEN N'03' -- clustered columnstore
                                      ---------
                                      WHEN N'6'  THEN N'11' -- nonclustered columnstore index
                                      WHEN N'3'  THEN N'12' -- XML index
                                      WHEN N'9'  THEN N'13' -- JSON index
                                      WHEN N'4'  THEN N'14' -- Spatial index
                                      WHEN N'T'  THEN N'15' -- full-text index of a tabular object
                                      ---------
                                      WHEN N'2'  THEN N'25' -- Foreign Key Constraint
                                      WHEN N'F'  THEN N'26' -- Foreign Key Constraint
                                      WHEN N'M'  THEN N'27' -- missing nonclustered rowstore index
                                      ---------
                                      ELSE            N'9' -- Anything else
                                 END
                               + N'|'
                               + IIF(i.type NOT IN (N'F' -- foreign key constraint
                                                   ,N'M' -- missing index
                                                   )
                                    ,RIGHT(N'000000000' + CAST(i.index_id AS NVARCHAR(20)),10)
                                    ,N'')
                               + IIF(i.type = N'F'         -- foreign key constraint
                                    , IIF(i.fkc_covered_by_idx_IDS IS NULL,N'U',N'C')
                                    + RIGHT(N'0000000000' + CAST(i.object_id AS NVARCHAR(20)),10)
                                    ,N'')                  -- Foreign Key index coverage
                               + IIF(i.type = N'M'         -- missing nonclustered rowstore index
                                    ,RIGHT(N'0000000000' + CAST(i.object_id AS NVARCHAR(20)),10)
                                    ,N'')                  -- Foreign Key index coverage
                               ,N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Object selection column
--------------------------------------------------------------------------------------------------------------------------------------------
,[Parent Type & Object Type~Object Properties & Index Type] = COALESCE(i.obj_type_pfx,N'')
                                                            + COALESCE(i.obj_type_hdr,N'')
                                                            + COALESCE(N' ' + i.obj_type_dtl,N'')
                                                            + COALESCE(N' ' + i.idx_type_hdr,N'')
                                                            + COALESCE(N' ' + i.idx_type_dtl,N'')
                                                            + IIF(i.type = N'F'                     -- foreign key constraint
                                                                 ,IIF(i.fkc_covered_by_idx_IDS IS NULL
                                                                     ,N' UNC'                       -- Foreign Key index uncovered
                                                                     ,N' COV')                      -- Foreign Key index covered
                                                                 ,N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Object & Index names & system-assigned IDs
--------------------------------------------------------------------------------------------------------------------------------------------
,[names~Database~Schema~Table~Index~FK name of FK~REF sch.tbl.col~FLT Idx Filter~EP EXT Prop~OID Object IDs]
   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Line 1 - Instance,Database
   -----------------------------------------------------------------------------------------------------------------------------------------
=IIF(i.rec_type = N'A' -- instance level aggregate record
    ,N'Instance/Sample'
    ,N'DB ' + QUOTENAME(REPLACE(db.name,N'^',N' '))
    )
-- Schema -----------------------------------------------------------
+IIF(i.rec_type NOT IN (N'A' -- instance level aggregate record
                       ,N'D' -- database level aggregate record
                       )
    ,N' SCH ' + QUOTENAME(REPLACE(obj.schema_name,N'^',N' '))
    ,N'')
   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Line 2A - Parent Object - if different than Object
   -----------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.rec_type NOT IN (N'A' -- instance level aggregate record
                       ,N'D' -- database level aggregate record
                       )
    ,IIF(    i.type <> N'F'                                                                         -- exclude FKC, object_id is for TABLE
         AND par_obj.parent_object_id <> obj.object_id                                              -- for System, History, Constraints
        ,CHAR(096) + N'PAR ' + QUOTENAME(REPLACE(par_obj.name,N'^',N' '))
        ,N'')
    ,N'')
   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Line 2B - Object
   -----------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.rec_type NOT IN (N'A' -- instance level aggregate record
                       ,N'D' -- database level aggregate record
                       )
    ,CHAR(096) + i.obj_type_hdr + N' ' + QUOTENAME(REPLACE(obj.name,N'^',N' '))
    ,N'')
   -----------------------------------------------------------------------------------------------------------------------------------------
   -- Line 3 Index
   -----------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.rec_type = N'I'       -- index level composite record
    ,CHAR(096) + i.idx_type_hdr + N' ' + QUOTENAME(REPLACE(i.name  ,N'^',N' '))
    ,N'')
   -----------------------------------------------------------------------------------------------------------------------------------------
    -- Line 4 - "Index" Special Properties
   -----------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.rec_type = N'I'                            -- index level composite record
    ,IIF(   i.is_primary_key       = 1
         OR i.is_unique_constraint = 1
         OR i.is_unique            = 1
         OR (    i.type            = N'1'         -- clustered rowstore index
             AND i.is_unique       = 0
            )
         OR i.has_filter           = 1
        , CHAR(096)
        + STUFF(IIF(i.is_primary_key = 1
                   ,N' PRIMARY KEY'
                   ,IIF(i.is_unique_constraint = 1
                       ,N' UNIQUE CONSTRAINT'
                       ,IIF(i.is_unique = 1
                           ,N' UNIQUE'
                           ,IIF(    i.type      = N'1'  -- clustered rowstore index
                                AND i.is_unique = 0
                               ,N' *NOT UNIQUE*'        -- special flag for CLUSTERED ROWSTORE
                               ,N'')
                           )
                       )
                   )
               +IIF(i.has_filter = 1,N' FILTERED',N'') -- index filter
               ,1,1,N'') -- end of STUFF function
        ,N'')
   ,N'')
   -----------------------------------------------------------------------------------------------------------------------------------------
    -- Line 5 - Object IDs for all objects
   -----------------------------------------------------------------------------------------------------------------------------------------
+IIF(i.rec_type <> N'A'                           -- instance level aggregate record
    ,CHAR(096) + N'DB ' + QUOTENAME(i.database_id)
    ,N'')
+IIF(i.rec_type NOT IN (N'A'                      -- instance level aggregate record
                       ,N'D'                      -- database level aggregate record
                       )
    , IIF(par_obj.object_id <> i.object_id
         , CASE i.obj_type_hdr
                WHEN N'INT' THEN N' PAR '         -- system/internal table
                WHEN N'HST' THEN N' PAR'          -- History/archive table
                ELSE N' ' + i.obj_type_hdr + N' '
           END
         + QUOTENAME(par_obj.object_id)
        ,N'')
    + IIF(obj.type <> N'F'                        -- foreign key constraint
         ,COALESCE(N' ' + i.obj_type_hdr + N' ',N' <OSTL> ') + COALESCE(QUOTENAME(i.object_id),N'<object_id?>')
         ,N'')
    ,N'')
+IIF(i.rec_type = N'I'                            -- index level composite record
    , CASE i.type
           WHEN N'F'                              -- foreign key constraint
           THEN N' FKC ' + COALESCE(QUOTENAME(i.index_id),N'<index_id?>')
           WHEN N'M'                              -- missing nonclustered rowstore index
           THEN N' MIX ' + COALESCE(QUOTENAME(i.index_id),N'<index_id?>')
           WHEN N'V'                              -- View
           THEN N''
           ELSE N' IDX ' + COALESCE(QUOTENAME(i.index_id),N'<index_id?>')
      END
    ,N'')

--------------------------------------------------------------------------------------------------------------------------------------------
-- Detailed actions for each index and selected other objects
--------------------------------------------------------------------------------------------------------------------------------------------
,[Prescriptions] = i.prescription

--------------------------------------------------------------------------------------------------------------------------------------------
-- Detailed diagnostic information for each index and objects
--------------------------------------------------------------------------------------------------------------------------------------------
,[Diagnostics] = LEFT( REPLACE(  CASE WHEN i.rec_type = N'A'                                        -- instance level aggregate record
                                      THEN COALESCE(inst.diagnostics + CHAR(096),N'')
                                      ELSE N''
                                 END
                               + COALESCE(comp.diagnostics,N'')
                              ,N'^',N' ')
                     + CASE WHEN i.type = N'F'                                                      -- foreign key constraint
                            THEN COALESCE(CHAR(096) + fkc_obj.fkc_referenced_object_desc,N'')       -- Referenced schema + table + column(s)
                            ELSE N''
                       END
                     ,@max_excel_col_width) -- to avoid Excel choking on ADODB.CopyFromRecordset

--------------------------------------------------------------------------------------------------------------------------------------------
-- Key Stats, Index Element Uniqueness, in increasing key order
-- also include table level index usages
--------------------------------------------------------------------------------------------------------------------------------------------
,[Idx Element Uniqueness~Stats density X RowCount~F = Filtered~(%) of Table Rows|N2]
= IIF(i.rec_type = N'P'                                     -- parent level aggregate record
     ,i.indexed_columns
     ,IIF(LTRIM(i.key_element_uniqueness) = N'',NULL,i.key_element_uniqueness)
     )

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Key and Included Column Details
-- also included table level columns and details inorder of index usages
--------------------------------------------------------------------------------------------------------------------------------------------
,[Columns~CX(#) Clustered Idx&Key~name~Type+bytes~Identity & attributes~ANSI settings~Partition~(Uniqueness)~Statistics steps]
               = LEFT( COALESCE(i.key_column_info,N'')
                     + IIF(i.Included_column_info IS NOT NULL
                          ,IIF(i.type NOT IN (N'5' -- clustered columnstore
                                             ,N'6' -- non-clustered columnstore
                                             ,N'F' -- foreign key constraint
                                             )
                              ,CHAR(096) + N'-- Included --------------------------'
                              ,N'')
                          + CHAR(096)
                          + i.Included_column_info
                          ,N'')
                     ,@max_excel_col_width) -- to avoid Excel choking on ADODB.CopyFromRecordset

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Synergies
--------------------------------------------------------------------------------------------------------------------------------------------
,[Index Synergies~Sequence,Overlap,Keys] = i.synergy_code

--------------------------------------------------------------------------------------------------------------------------------------------
-- Physical metrics & buffer usage
--------------------------------------------------------------------------------------------------------------------------------------------
,[Index~RSZ Rsrvd size (%Tbl)~BSZ Buffer size (%Rsrv)~Tbl ROW Rows COL cols~LEN Wor Length~FCT Factor & Pad~Idx KEY Cnt & Len] =
      -- RSZ - reserved size on disk or InMemory --------------------------------------
     + N'RSZ  '
     + CASE WHEN i.rec_type NOT IN (N'A',N'D',N'I')
            THEN [dbo].[SQLXL_3SD](i.reserved_page_PG_CNT,N'P') -- (obj.obj_reserved_page,N'P') FOR <FUTURE>

            WHEN i.idx_type_hdr IN (N'FKC'                                 -- foreign key constraint
                                   ,N'MIX'                                 -- missing index
                                   )
            THEN N'(' + i.idx_type_hdr + N')'

            WHEN i.obj_type_hdr IN (N'TVF')                                -- SQL table valued function
            THEN N'(TVF)'
                + CASE WHEN obj.clustered_index_CNT    = 0
                        AND obj.nonclustered_index_CNT = 0
                       THEN CHAR(096) + N'Unindexed'
                       ELSE N''
                  END

            WHEN i.obj_type_hdr IN (N'VW')                                 -- view
             AND obj.clustered_index_CNT = 0
            THEN N'(VW)' + CHAR(096) + N'Unindexed'

            ELSE COALESCE((-- retrieve & format computed metric value
                           SELECT m.metric_fmt + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                             FROM [##SQLXL_Index_Metrics] AS m
                            WHERE i.rec_type              = m.rec_type
                              AND i.database_id           = m.database_id
                              AND i.object_id             = m.object_id
                              AND i.index_id              = m.index_id
                              AND i.type                  = m.type
                              AND i.sub_type              = m.sub_type
                              AND N'reserved_page_PG_CNT' = m.metric
                          )
                         ,[dbo].[SQLXL_3SD](i.reserved_page_PG_CNT,N'P')
                         ,N'')
       END
      -- BSZ - Buffer cache usage & oercent of reserved space -------------------------
     + IIF(i.reserved_page_PG_CNT > 0 OR i.reserved_page_PG_CNT > 0
          , CHAR(096) + N'BSZ  '
          + [dbo].[SQLXL_3SD](COALESCE(i.buffer_total_KB_CNT,0),N'KB')
          + N' ('
          + [dbo].[SQLXL_3SD](COALESCE(1.0 * i.buffer_total_KB_CNT / (i.reserved_page_PG_CNT * 8.0),0),N'%')
          + N')'
          ,N'')
      -- ROW - count of rows ----------------------------------------------------------
     + CASE WHEN i.rec_type NOT IN (N'A',N'D',N'I')
            THEN [dbo].[SQLXL_3SD](obj.obj_row_count,N'I')

            WHEN i.obj_type_hdr IN (N'TVF')                                -- SQL table valued function
            THEN N''

            WHEN i.type = N'VW'                               -- view
             AND obj.clustered_index_CNT = 0
            THEN N''

            WHEN i.type = N'4'                                -- spatial index
            THEN CHAR(096) + N'ROW (SPT)'

            WHEN i.type = N'T'                                -- full text index
            THEN CHAR(096) + N'ROW (FTX)'

            WHEN i.type = N'F'                                -- foreign key constraint
            THEN CHAR(096) + N'ROW (FKC)'

            WHEN i.type = N'M'                                -- missing index
            THEN CHAR(096) + N'ROW (MIX)'

            WHEN i.rec_type NOT IN (N'A' -- instance level aggregate record
                                   ,N'D' -- database level aggregate record
                                   )
            THEN  CHAR(096) + N'ROW '
                + [dbo].[SQLXL_3SD](i.row_CNT,'I') + IIF(i.has_filter = 1,N' (FLT)',N'')
                + IIF(i.rec_type IN (N'H' -- historical/archive table aggregate record
                                    ,N'P' -- parent level aggregate record
                                    ,N'S' -- system/internal table composite record
                                     )
                     ,N' COL ' + IIF(obj.column_CNT > 0,[dbo].[SQLXL_3SD](obj.column_CNT,'I'),N'N/A')
                     ,N'')
            ELSE N''
       END
      -- LEN - average physical row size (reserved size / rowcount) -------------------
     + CASE WHEN i.tbl_row_size_byte_AVG > 0
            THEN CHAR(096) + N'LEN   ' + [dbo].[SQLXL_3SD](i.tbl_row_size_byte_AVG,'B') + N' AVG'
            ELSE N''
       END
      -- KEY - count of key index columns ---------------------------------------------
     + CASE WHEN i.rec_type = N'I' -- index level composite record
            THEN  CHAR(096) + N'KEY  ' -- extra space added to make 2nd column in cell align
                + CASE i.type
                       WHEN N'0' THEN N'(' + i.idx_type_hdr + N')' -- rowstore heap
                       WHEN N'5' THEN N'(' + i.idx_type_hdr + N')' -- Clustered columnstore
                       WHEN N'6' THEN N'(' + i.idx_type_hdr + N')' -- nonclustered columnstore index
                       ELSE  COALESCE(CAST(i.key_ordinal_CNT AS NVARCHAR(20)),N'N/A')
                           + N' LEN '
                           + CASE WHEN i.is_key_total_datatype_length_MAX = 1
                                  THEN N'MAX'
                                  WHEN i.key_total_datatype_length_bytes > 0
                                  THEN [dbo].[SQLXL_3SD](i.key_total_datatype_length_bytes,N'B')
                                  ELSE N'N/A'
                             END
                  END
             ELSE N''
       END
      -- INC - included index columns -------------------------------------------------
     + CASE WHEN i.type IN (N'0'                                      -- rowstore heap
                           ,N'6'                                      -- nonclustered columnstore
                           )
            THEN CHAR(096) + N'INC   ' + N'(' + i.idx_type_hdr + N')' -- rowstore heap, nonclustered columnstore

            WHEN i.type IN (N'1'                                      -- clustered rowstore
                           ,N'5'                                      -- clustered columnstore
                           )
             AND i.obj_type_hdr NOT IN (N'TVF')                       -- SQL table valued function
            THEN CHAR(096) + N'INC   ' + N'<all>'                     -- Clustered Rowstore, Clustered columnstore


            WHEN i.type IN (N'2'                                      -- nonclustered rowstore index
                           ,N'M'                                      -- missing nonclustered rowstore index
                           )
            THEN  CHAR(096) + N'INC   ' + CAST(COALESCE(i.included_columns_CNT,0) AS NVARCHAR(20))
                + CASE WHEN i.is_inc_total_datatype_length_MAX = 1
                       THEN N' LEN MAX'
                       WHEN i.inc_total_datatype_length_bytes > 0
                       THEN N' LEN ' + [dbo].[SQLXL_3SD](i.inc_total_datatype_length_bytes,N'B')
                       ELSE N''
                  END
            ELSE N''
       END
      -- FCT - Fill factor & tree padding ---------------------------------------------
     + CASE WHEN i.type IN (N'1',N'2')
             AND i.obj_type_hdr NOT IN (N'TVF')                                  -- SQL table valued function
            THEN  CHAR(096) + N'FCT  '                                           -- extra space added to make 2nd column in cell align
                + COALESCE([dbo].[SQLXL_3SD](i.fill_factor,N'I') + N'%',N'<??>') -- zeroes converted to 100 previously
                + N' PAD '
                + COALESCE(CASE i.is_padded WHEN 0 THEN N'No' WHEN 1 THEN N'Yes' ELSE N'' END,N'<??>')
            ELSE N''
       END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Operational Metrics
--------------------------------------------------------------------------------------------------------------------------------------------
,[Total Use (%Nxt Lvl)~OPS/CMP TOT CNT~USR USG Contact TOT CNT~R/W OPS & USG Read/Write~WTC Wait CNT~WTS Wait SEC~LCK Lock CNT]
= CASE WHEN obj.type    = N'V'  -- View
        AND i.index_CNT = 0     -- views without indexes
       THEN N'Unindexed View'

       WHEN obj.type    = N'TF' -- SQL table-valued-function SQL 2012+
       THEN i.obj_type_hdr      -- table functions w/o indexes have no stats other than PLAN CACHE

       WHEN i.type      = N'F'  -- foreign key constraint
       THEN N'Foreign Key' + CHAR(096) + N'No data'

       WHEN i.type      = N'M'     -- missing nonclustered rowstore index
       THEN -- extra space added to make 2nd column in cell align
                          N'RDS  '  + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_fmt + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type               = m.rec_type
                                                   AND i.database_id            = m.database_id
                                                   AND i.object_id              = m.object_id
                                                   AND i.index_id               = m.index_id
                                                   AND i.type                   = m.type
                                                   AND i.sub_type               = m.sub_type
                                                   AND N'ius_user_read_CNT'     = m.metric
                                               )
                                              ,N'0'
                                              )
           + CHAR(096) + N'(USG)'
       ELSE               N'RDS  '  + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_fmt + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type               = m.rec_type
                                                   AND i.database_id            = m.database_id
                                                   AND i.object_id              = m.object_id
                                                   AND i.index_id               = m.index_id
                                                   AND i.type                   = m.type
                                                   AND i.sub_type               = m.sub_type
                                                   AND N'ops_total_read_CNT'    = m.metric
                                               )
                                              ,[dbo].[SQLXL_3SD](i.ops_total_read_CNT,N'I')
                                              )
           + CHAR(096) + N'WRT '     + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_fmt + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type               = m.rec_type
                                                   AND i.database_id            = m.database_id
                                                   AND i.object_id              = m.object_id
                                                   AND i.index_id               = m.index_id
                                                   AND i.type                   = m.type
                                                   AND i.sub_type               = m.sub_type
                                                   AND N'ops_total_write_CNT'   = m.metric
                                               )
                                              ,[dbo].[SQLXL_3SD](i.ops_total_write_CNT,N'I')
                                              )
           + CHAR(096) + N'R/W  '    + IIF(i.ops_total_write_CNT > 0
                                          ,IIF(i.ops_read_to_write_RAT IS NOT NULL
                                              ,[dbo].[SQLXL_3SD](i.ops_read_to_write_RAT,N'N') -- value computed previously
                                              ,[dbo].[SQLXL_3SD](1.0 * i.ops_total_read_CNT / i.ops_total_write_CNT,N'N'))
                                          ,N'N/A')
                                       + N'x'
           + CHAR(096) + N'WTS '     + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_fmt + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type               = m.rec_type
                                                   AND i.database_id            = m.database_id
                                                   AND i.object_id              = m.object_id
                                                   AND i.index_id               = m.index_id
                                                   AND i.type                   = m.type
                                                   AND i.sub_type               = m.sub_type
                                                   AND N'ops_total_wait_MS_CNT' = m.metric
                                               )
                                              ,[dbo].[SQLXL_3SD](i.ops_total_wait_MS_CNT,N'ms')
                                              )
           + CHAR(096) + N'WTC '     + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_fmt + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type               = m.rec_type
                                                   AND i.database_id            = m.database_id
                                                   AND i.object_id              = m.object_id
                                                   AND i.index_id               = m.index_id
                                                   AND i.type                   = m.type
                                                   AND i.sub_type               = m.sub_type
                                                   AND N'ops_total_wait_CNT'    = m.metric
                                               )
                                              ,[dbo].[SQLXL_3SD](i.ops_total_wait_CNT,N'I')
                                              )
           + CHAR(096) + N'LCK  '    + COALESCE((-- retrieve & format computed metric value
                                                SELECT m.metric_fmt + IIF(m.diagnostic IS NULL,N'',N' ' + m.diagnostic)
                                                  FROM [##SQLXL_Index_Metrics] AS m
                                                 WHERE i.rec_type               = m.rec_type
                                                   AND i.database_id            = m.database_id
                                                   AND i.object_id              = m.object_id
                                                   AND i.index_id               = m.index_id
                                                   AND i.type                   = m.type
                                                   AND i.sub_type               = m.sub_type
                                                   AND N'ops_total_lock_CNT'    = m.metric
                                               )
                                              ,[dbo].[SQLXL_3SD](i.ops_total_lock_CNT,N'I')
                                              )
  END

--------------------------------------------------------------------------------------------------------------------------------------------
-- Missing Index Query, source code for Views & SQL Table Valued Functions
--------------------------------------------------------------------------------------------------------------------------------------------
,[MIX Biggest Resource Query~View & Function Definition]
=    LEFT(
  REPLACE(
  REPLACE(
  REPLACE(
  REPLACE(
  REPLACE(def.definition                     -- text string to reformat for import to excel
         ,N'^',N' ')                         -- caret with space
         ,NCHAR(013) + NCHAR(010),CHAR(096)) -- carriage return + line feed with back tick & tilde
         ,NCHAR(013)             ,CHAR(096)) -- carriage return with back tick & tilde
         ,NCHAR(010)             ,CHAR(096)) -- line feed with back tick & tilde
         ,NCHAR(009)             ,N'   '  )  -- tab with 3 spaces
         ,@max_excel_col_width)              -- to avoid Excel choking on ADODB.CopyFromRecordset

--------------------------------------------------------------------------------------------------------------------------------------------
-- Constraint reference & Index Filter definition
--------------------------------------------------------------------------------------------------------------------------------------------
,[Constraints & Computed~CHK-Check, Key, DEF-Default~CCOL-Computed Column]
=    LEFT(
    STUFF(
  REPLACE(
  REPLACE(
  REPLACE(
  REPLACE(
  REPLACE(i.constraints                      -- text string to reformat for import to excel
         ,N'^',N' ')                         -- caret with space
         ,NCHAR(013) + NCHAR(010),CHAR(096)) -- carriage return + line feed with back tick & tilde
         ,NCHAR(013)             ,CHAR(096)) -- carriage return with back tick & tilde
         ,NCHAR(010)             ,CHAR(096)) -- line feed with back tick & tilde
         ,NCHAR(009)             ,N'   '               ) -- tab with 3 spaces
         ,1,1,N'') -- end of STUFF function
         ,@max_excel_col_width) -- to avoid Excel choking on ADODB.CopyFromRecordset

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index & Stats Filter Definitions
--------------------------------------------------------------------------------------------------------------------------------------------
,[Statistics names~& Filters]
= LEFT(
  REPLACE(
  STUFF( IIF(i.rec_type = N'A' -- instance level aggregate record
            ,(SELECT  -- required for XML TYPE VALUE used below
             (--
              SELECT  CHAR(096)
                    + IIF(wait_time > N'',wait_time + N' ',N'')
                    + [Wait Type . . . . . . . . . . . . . . . . . . . . .]
                    + N' '
                    + IIF(wait_time > N''
                         ,'(' + wait_count + N')'
                         ,N'')
                FROM [SQLXL_Active_Waits] ()
               ORDER BY
                     rn
                 FOR XML PATH(''), TYPE                                                             -- stats & filter definitions
             ).value('.','VARCHAR(MAX)')
             ) -- for first SELECT above
            ,N'')
       + IIF(i.has_filter = 1
            ,CHAR(096) + N'IDX FLTR:'
                        + REPLACE(
                          REPLACE(
                          REPLACE(i.filter_definition                 -- text string to reformat for import to excel
                                 ,NCHAR(013) + NCHAR(010),CHAR(096)) -- carriage return + line feed to line feed
                                 ,NCHAR(013),CHAR(096))              -- carriage return to line feed
                                 ,NCHAR(009),N'   ')                  -- tab with 3 spaces
           ,N'')

       + IIF(i.stats_name > N''
            ,CHAR(096) + N'STAT:' + i.stats_name                     -- NULL if filtered stat on a table column
            ,N'')
       + IIF(    i.stathdr_filter_expression > N''
             AND i.rec_type <> N'P'                                   -- parent level aggregate record
            ,CHAR(096) + N'STAT FLTR:'
                        + REPLACE(
                          REPLACE(
                          REPLACE(i.stathdr_filter_expression         -- text string to reformat for import to excel
                                 ,NCHAR(013) + NCHAR(010),CHAR(096)) -- carriage return + line feed to line feed
                                 ,NCHAR(013),CHAR(096))              -- carriage return to line feed
                                 ,NCHAR(009),N'   ')                  -- tab with 3 spaces
           ,N'')
       + IIF(    i.stathdr_filter_expression > N''
             AND i.rec_type = N'P'                                    -- parent level aggregate record
            ,CHAR(096) + REPLACE(
                          REPLACE(
                          REPLACE(i.stathdr_filter_expression         -- text string to reformat for import to excel
                                 ,NCHAR(013) + NCHAR(010),CHAR(096))  -- carriage return + line feed to line feed
                                 ,NCHAR(013),CHAR(096))               -- carriage return to line feed
                                 ,NCHAR(009),N'   ')                  -- tab with 3 spaces
           ,N'')
       ,1,1,N'')             -- end of STUFF function
         ,N'^',N' ')         -- REPLACE caret with space
      ,@max_excel_col_width) -- to avoid Excel choking on ADODB.CopyFromRecordset

--------------------------------------------------------------------------------------------------------------------------------------------
-- Table Logical, Physical File Info, Partitions
--------------------------------------------------------------------------------------------------------------------------------------------
,[Table File & Partitions]
=  STUFF(  CASE WHEN data_space_idx.files IS NOT NULL         -- includes partition info
                THEN CHAR(096) + IIF(i.rec_type = N'I',N'INDEX: ',N'TABLE: ') + data_space_idx.files
                ELSE N''
           END
         + CASE WHEN obj.is_memory_optimized = 1
                THEN CHAR(096) + N'IN-MEMORY: ' + data_space_xtp.files
                ELSE N''
           END
         + CASE WHEN data_space_lob.data_space_id IS NOT NULL
                 AND i.rec_type <> N'I'                       -- only show LOB data space on TABLE level
                THEN CHAR(096) + N'LOB: ' + data_space_lob.files
                ELSE N''
           END
         + CASE WHEN data_space_fs.files IS NOT NULL
                 AND i.rec_type <> N'I'                       -- only show FILESTREAM data space on TABLE level
                THEN CHAR(096) + N'FILESTREAM: ' + data_space_fs.files
                ELSE N''
           END
        ,1,1,N'')   -- leading CHAR(096)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Extended Properties  -- replace CarriageReturn (13) & LineFeed(10) with ASCII 167, tab with 3 spaces
--------------------------------------------------------------------------------------------------------------------------------------------
,[Extended Properties]
=    LEFT(
  REPLACE(
  REPLACE(
  REPLACE(
  REPLACE(
  REPLACE(ext_prop.extended_properties       -- text string to reformat for import to excel
         ,N'^',N' ')                         -- caret with space
         ,NCHAR(013) + NCHAR(010),CHAR(096)) -- carriage return + line feed with back tick & tilde
         ,NCHAR(013)             ,CHAR(096)) -- carriage return with back tick & tilde
         ,NCHAR(010)             ,CHAR(096)) -- line feed with back tick & tilde
         ,NCHAR(009)             ,N'   '               ) -- tab with 3 spaces
         ,@max_excel_col_width) -- to avoid Excel choking on ADODB.CopyFromRecordset

/***********************************************************\
 *Task* Present - Table Priority Metrics
\***********************************************************/
,[Table OPS Wait TM!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ops_total_wait_MS_CNT > 0
                              AND i.ops_total_wait_MS_CNT IS NOT NULL
                             ,100.0 * i.ops_total_wait_MS_CNT / a.ops_total_wait_MS_CNT
                             ,NULL)
,[Table OPS Wait CNT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ops_total_wait_CNT > 0
                             ,100.0 * i.ops_total_wait_CNT / a.ops_total_wait_CNT
                             ,NULL)
----------------------------------------------
,[Table OPS Locks CNT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ops_total_lock_CNT > 0
                             ,100.0 * i.ops_total_lock_CNT / a.ops_total_lock_CNT
                             ,NULL)
,[Table OPS Lock Promo!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ios_lock_promotion_attempt_CNT > 0
                             ,100.0 * i.ios_lock_promotion_attempt_CNT / a.ios_lock_promotion_attempt_CNT
                             ,NULL)
,[Table OPS Promo Fail!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ios_lock_promotion_attempt_CNT > 0
                             ,100.0 * (i.ios_lock_promotion_attempt_CNT - i.ios_lock_promotion_CNT)
                                    / a.ios_lock_promotion_attempt_CNT
                             ,NULL)
----------------------------------------------
,[Table OPS Page Split!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ops_total_page_split_CNT > 0
                             ,100.0 * i.ops_total_page_split_CNT / a.ops_total_page_split_CNT
                             ,NULL)
,[Table OPS Splits to Write PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND i.page_splits_to_write_PCT > 0.0
                             ,i.page_splits_to_write_PCT
                             ,NULL)
,[Table OPS Page Merge!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ops_total_page_merge_CNT > 0
                             ,100.0 * i.ops_total_page_merge_CNT / a.ops_total_page_merge_CNT
                             ,NULL)
,[Table OPS Merge to Write PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND i.page_Merge_to_write_PCT > 0.0
                             ,i.page_Merge_to_write_PCT
                             ,NULL)
----------------------------------------------
,[Table MIX Advantage Weighted!H\G|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.mix_advantage_weighted_AMT > 0
                              AND i.mix_advantage_weighted_AMT > 0
                             ,100.0 * i.mix_advantage_weighted_AMT / a.mix_advantage_weighted_AMT
                             ,NULL)
,[Table MIX Advantage!H\G|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.mix_Advantage_AMT > 0
                              AND i.mix_Advantage_AMT > 0
                             ,100.0 * i.mix_Advantage_AMT / a.mix_Advantage_AMT
                             ,NULL)
----------------------------------------------
,[Table OPS Writes!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ops_total_write_CNT > 0
                             ,100.0 * i.ops_total_write_CNT / a.ops_total_write_CNT
                             ,NULL)
,[Table USG Writes!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ius_user_updates_CNT > 0
                             ,100.0 * i.ius_user_updates_CNT / a.ius_user_updates_CNT
                             ,NULL)
----------------------------------------------
,[Table BUF Percent in Buffer!H\B|N1]
                        = IIF(i.rec_type = N'P'                                                     -- parent level aggregate record
                             ,CASE WHEN obj.is_memory_optimized = 1 AND i.buffer_total_KB_CNT > 0.0
                                   THEN 100
                                   WHEN i.reserved_page_PG_CNT > 0
                                   THEN 100.0 * i.buffer_total_KB_CNT / (i.reserved_page_PG_CNT * 8.0)
                                   ELSE NULL
                              END
                             ,NULL)
--------------------------------------------------------------------------------------------------------------------------------------------
,[Table OPS R/W Ratio!H\G|N1]
  = IIF(i.rec_type = N'P'                                                                           -- parent level aggregate record
       ,CASE WHEN i.ops_read_to_write_RAT > 99.9 THEN 99.9
             WHEN i.ops_total_write_CNT   > 0    THEN i.ops_read_to_write_RAT
             ELSE NULL
        END
       ,NULL)
,[Table USG R/W Ratio!H\G|N1]
  = IIF(i.rec_type = N'P'                                                                           -- parent level aggregate record
       ,CASE WHEN i.ius_read_to_write_RAT > 99.9 THEN 99.9
             WHEN i.ius_user_updates_CNT  > 0    THEN i.ius_read_to_write_RAT
             ELSE NULL
        END
       ,NULL)
----------------------------------------------
,[Table OPS Reads PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ops_total_read_CNT > 0
                             ,100.0 * i.ops_total_read_CNT / a.ops_total_read_CNT
                             ,NULL)
,[Table OPS Scans PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ops_total_scan_CNT > 0
                             ,100.0 * i.ops_total_scan_CNT / a.ops_total_scan_CNT
                             ,NULL)
,[Table OPS Lookups PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ios_singleton_lookup_CNT > 0
                             ,100.0 * i.ios_singleton_lookup_CNT / a.ios_singleton_lookup_CNT
                             ,NULL)
,[Table OPS Forwarded Fetch!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ios_forwarded_fetch_CNT > 0
                             ,100.0 * i.ios_forwarded_fetch_CNT / a.ios_forwarded_fetch_CNT
                             ,NULL)
----------------------------------------------
,[Table USG Reads PCT!H\B|N1]
                        = IIF(i.rec_type = N'P',i.ius_read_to_parent_PCT,NULL)                      -- parent level aggregate record
,[Table USG Scans PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ius_user_scans_CNT > 0
                             ,100.0 * i.ius_user_scans_CNT / a.ius_user_scans_CNT
                             ,NULL)
,[Table USG Lookups PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND a.ius_user_lookups_CNT > 0
                             ,100.0 * i.ius_user_lookups_CNT / a.ius_user_lookups_CNT
                             ,NULL)
----------------------------------------------
,[Table OPS LOB Contacts PCT!H\B|N1]
                        = IIF(    i.rec_type = N'P'                                                 -- parent level aggregate record
                              AND     ( a.ios_lob_fetch_pages_CNT
                                      + a.ios_lob_orphan_create_CNT
                                      + a.ios_lob_orphan_insert_CNT
                                      + a.ios_row_overflow_fetch_in_pages_CNT
                                      + a.ios_column_value_pull_in_row_CNT
                                      + a.ios_column_value_push_off_row_CNT
                                      ) > 0
                             ,100.0 * ( i.ios_lob_fetch_pages_CNT
                                      + i.ios_lob_orphan_create_CNT
                                      + i.ios_lob_orphan_insert_CNT
                                      + i.ios_row_overflow_fetch_in_pages_CNT
                                      + i.ios_column_value_pull_in_row_CNT
                                      + i.ios_column_value_push_off_row_CNT
                                      )
                                   /  ( a.ios_lob_fetch_pages_CNT
                                      + a.ios_lob_orphan_create_CNT
                                      + a.ios_lob_orphan_insert_CNT
                                      + a.ios_row_overflow_fetch_in_pages_CNT
                                      + a.ios_column_value_pull_in_row_CNT
                                      + a.ios_column_value_push_off_row_CNT
                                      )
                             ,NULL)

/*------------------------------------------------------------------------------------------------------------------------------------------
 *Task* Present - Index Priority Metrics
------------------------------------------------------------------------------------------------------------------------------------------*/
,[Index OPS Wait TM!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(p.ops_total_wait_MS_CNT > 0,100.0 * i.ops_total_wait_MS_CNT / p.ops_total_wait_MS_CNT,0.0)
       ,NULL)
,[Index OPS Wait CNT!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(p.ops_total_wait_CNT > 0,100.0 * i.ops_total_wait_CNT / p.ops_total_wait_CNT,0.0)
       ,NULL)
----------------------------------------------
,[Index OPS Locks CNT!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(p.ops_total_lock_CNT > 0,100.0 * i.ops_total_lock_CNT / p.ops_total_lock_CNT,0.0)
       ,NULL)
,[Index OPS Lock Promo!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(p.ios_lock_promotion_attempt_CNT > 0,100.0 * i.ios_lock_promotion_attempt_CNT / p.ios_lock_promotion_attempt_CNT,0.0)
       ,NULL)
,[Index OPS Promo Fail!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(p.ios_lock_promotion_attempt_CNT > 0
           ,100.0 * (i.ios_lock_promotion_attempt_CNT - i.ios_lock_promotion_CNT) / p.ios_lock_promotion_attempt_CNT
           ,0.0)
       ,NULL)
----------------------------------------------
,[Index OPS Page Split!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(p.ops_total_page_split_CNT > 0,100.0 * i.ops_total_page_split_CNT / p.ops_total_page_split_CNT,0.0)
       ,NULL)
,[Index OPS Splits to Write PCT!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(i.ops_total_write_CNT > 0,i.page_splits_to_write_PCT,0.0)
       ,NULL)
,[Index OPS Page Merge!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(p.ops_total_page_merge_CNT > 0,100.0 * i.ops_total_page_merge_CNT / p.ops_total_page_merge_CNT,0.0)
       ,NULL)
,[Index OPS Merges to Write PCT!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(i.ops_total_write_CNT > 0,i.page_Merge_to_write_PCT,0.0)
       ,NULL)
--------------------------------------------------------------------------------------------------------------------------------------------
,[Index MIX Advantage Weighted!H\G|N1]
  = IIF(i.type = N'M' AND p.mix_advantage_weighted_AMT > 0
       ,100.0 * i.mix_advantage_weighted_AMT / p.mix_advantage_weighted_AMT
       ,NULL)
,[Index MIX Advantage!H\G|N1]
  = IIF(i.type = N'M' AND p.mix_Advantage_AMT > 0
       ,100.0 * i.mix_Advantage_AMT / p.mix_Advantage_AMT
       ,NULL)
--------------------------------------------------------------------------------------------------------------------------------------------
,[Index OPS Writes!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(p.ops_total_write_CNT > 0,100.0 * i.ops_total_write_CNT / p.ops_total_write_CNT,0.0)
       ,NULL)
,[Index USG Writes!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(p.ius_user_updates_CNT > 0,100.0 * i.ius_user_updates_CNT / p.ius_user_updates_CNT,0.0)
       ,NULL)
--------------------------------------------------------------------------------------------------------------------------------------------
,[Index BUF Percent in Buffer!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,CASE WHEN obj.is_memory_optimized = 1 AND i.buffer_total_KB_CNT > 0.0
             THEN 100
             WHEN i.reserved_page_PG_CNT > 0
             THEN 100.0 * i.buffer_total_KB_CNT / (i.reserved_page_PG_CNT * 8.0)
             ELSE NULL
        END
       ,NULL)
--------------------------------------------------------------------------------------------------------------------------------------------
,[Index OPS R/W Ratio!H\G|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,CASE WHEN i.ops_read_to_write_RAT > 99.9 THEN 99.9
             WHEN i.ops_total_write_CNT   > 0    THEN i.ops_read_to_write_RAT
             ELSE NULL
        END
       ,NULL)
,[Index USG R/W Ratio!H\G|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,CASE WHEN i.ius_read_to_write_RAT > 99.9 THEN 99.9
             WHEN i.ius_user_updates_CNT  > 0    THEN i.ius_read_to_write_RAT
             ELSE NULL
        END
       ,NULL)
--------------------------------------------------------------------------------------------------------------------------------------------
,[Index OPS Reads PCT!H\G|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,i.ops_read_to_parent_PCT
       ,NULL)
,[Index OPS Scans PCT!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M')
       ,IIF(p.ops_total_scan_CNT > 0,100.0 * i.ops_total_scan_CNT / p.ops_total_scan_CNT,0)
       ,NULL)
,[Index OPS Lookups PCT!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M') AND obj.is_memory_optimized = 0
       ,IIF(p.ios_singleton_lookup_CNT > 0,100.0 * i.ios_singleton_lookup_CNT / p.ios_singleton_lookup_CNT,0.0)
       ,NULL)
,[Index OPS Forwarded Fetch!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M') AND obj.is_memory_optimized = 0
       ,IIF(p.ios_forwarded_fetch_CNT > 0,100.0 * i.ios_forwarded_fetch_CNT / p.ios_forwarded_fetch_CNT,0.0)
       ,NULL)
--------------------------------------------------------------------------------------------------------------------------------------------
,[Index USG Reads PCT!H\G|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F')
       ,IIF(p.ius_user_read_CNT > 0,100.0 * i.ius_user_read_CNT /  p.ius_user_read_CNT,0.0)
       ,NULL)
,[Index USG Scans PCT!H\G|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F')
       ,IIF(p.ius_user_scans_CNT > 0,100.0 * i.ius_user_scans_CNT / p.ius_user_scans_CNT,0.0)
       ,NULL)
,[Index USG Lookups PCT!H\G|N1]
  = IIF(i.rec_type = N'I'  AND i.type NOT IN (N'F') AND  obj.is_memory_optimized = 0
       ,IIF(p.ius_user_lookups_CNT > 0,100.0 * i.ius_user_lookups_CNT / p.ius_user_lookups_CNT,0.0)
       ,NULL)
----------------------------------------------
,[Index OPS LOB Contacts PCT!H\B|N1]
  = IIF(i.rec_type = N'I' AND i.type NOT IN (N'F',N'M') AND obj.is_memory_optimized = 0
       ,IIF(( p.ios_lob_fetch_pages_CNT
            + p.ios_lob_orphan_create_CNT           -- Bulk operations only
            + p.ios_lob_orphan_insert_CNT           -- Bulk operations only
            + p.ios_row_overflow_fetch_in_pages_CNT
            + p.ios_column_value_pull_in_row_CNT
            + p.ios_column_value_push_off_row_CNT
            ) > 0
           ,100.0 * ( i.ios_lob_fetch_pages_CNT
                      + i.ios_lob_orphan_create_CNT           -- Bulk operations only
                      + i.ios_lob_orphan_insert_CNT           -- Bulk operations only
                      + i.ios_row_overflow_fetch_in_pages_CNT
                      + i.ios_column_value_pull_in_row_CNT
                      + i.ios_column_value_push_off_row_CNT
                      )
                   /  ( p.ios_lob_fetch_pages_CNT
                      + p.ios_lob_orphan_create_CNT           -- Bulk operations only
                      + p.ios_lob_orphan_insert_CNT           -- Bulk operations only
                      + p.ios_row_overflow_fetch_in_pages_CNT
                      + p.ios_column_value_pull_in_row_CNT
                      + p.ios_column_value_push_off_row_CNT
                      )
           ,0.0)
       ,NULL)
--------------------------------------------------------------------------------------------------------------------------------------------
--Index Priority Metrics FOR SORTING ACROSS INDEXES
--------------------------------------------------------------------------------------------------------------------------------------------
,[Index OPS Wait TM!H\B|N0]             = i.ops_total_wait_MS_CNT
,[Index OPS Wait CNT!H\B|N0]            = i.ops_total_wait_CNT
,[Index OPS Locks CNT!H\B|N0]           = i.ops_total_lock_CNT
,[Index OPS Lock Promo!H\B|N0]          = i.ios_lock_promotion_attempt_CNT
,[Index OPS Promo Fail!H\B|N0]          = i.ios_lock_promotion_attempt_CNT - ISNULL(i.ios_lock_promotion_CNT,0)
----------------------------------------------
,[Index OPS Page Split!H\B|N0]          = i.ops_total_page_split_CNT
,[Index OPS Splits to Write PCT!H\B|N0] = i.page_splits_to_write_PCT
,[Index OPS Page Merge!H\B|N0]          = i.ops_total_page_merge_CNT
,[Index OPS Merges to Write PCT!H\B|N0] = i.page_Merge_to_write_PCT
-- missing nonclustered rowstore index -------------------------------------------------------------
,[Index MIX Advantage Weighted!H\G|N0]  = IIF(i.type = N'M',i.mix_advantage_weighted_AMT,NULL)  -- missing nonclustered rowstore index
,[Index MIX Advantage!H\G|N0]           = IIF(i.type = N'M',i.mix_Advantage_AMT         ,NULL)  -- missing nonclustered rowstore index
----------------------------------------------
,[Index OPS Writes!H\B|N0]              = i.ops_total_write_CNT
,[Index USG Writes!H\B|N0]              = i.ius_user_updates_CNT
----------------------------------------------
,[Index BUF Percent in Buffer!H\B|N0]   = CASE WHEN obj.is_memory_optimized = 1 AND i.buffer_total_KB_CNT > 0.0
                                               THEN 100
                                               WHEN i.reserved_page_PG_CNT > 0
                                               THEN 100.0 * i.buffer_total_KB_CNT / (i.reserved_page_PG_CNT * 8.0)
                                               ELSE NULL
                                          END
----------------------------------------------
,[Index OPS R/W Ratio!H\G|N0] = IIF(i.type NOT IN (N'F' -- foreign key constraint
                                                  ,N'M' -- missing index. no operational metrics
                                                  )
                                   ,IIF(i.ops_read_to_write_RAT < 99.9
                                       ,i.ops_read_to_write_RAT
                                       ,99.9)
                                   ,NULL)
,[Index USG R/W Ratio!H\G|N0] = IIF(i.type NOT IN (N'F' -- foreign key constraint
                                                  ,N'M' -- missing index. no operational metrics
                                                  )
                                   ,IIF(i.ius_read_to_write_RAT < 99.9
                                       ,i.ius_read_to_write_RAT
                                       ,99.9)
                                   ,NULL)
----------------------------------------------
,[Index OPS Reads!H\G|N0]           = i.ops_total_read_CNT
,[Index OPS Scans!H\B|N0]           = i.ops_total_scan_CNT
,[Index OPS Lookups!H\B|N0]         = i.ios_singleton_lookup_CNT
,[Index OPS Forwarded Fetch!H\B|N0] = i.ios_forwarded_fetch_CNT
----------------------------------------------
,[Index USG Reads!H\G|N0]           = i.ius_user_read_CNT
,[Index USG Scans!H\G|N0]           = i.ius_user_scans_CNT
,[Index USG Seeks!H\G|N0]           = i.ius_user_seeks_CNT
,[Index USG Lookups!H\G|N0]         = i.ius_user_lookups_CNT
----------------------------------------------
,[Index OPS LOB Contacts PCT!H\B|N0]    =  i.ios_lob_fetch_pages_CNT
                                         + i.ios_lob_orphan_create_CNT           -- Bulk operations only
                                         + i.ios_lob_orphan_insert_CNT           -- Bulk operations only
                                         + i.ios_row_overflow_fetch_in_pages_CNT
                                         + i.ios_column_value_pull_in_row_CNT
                                         + i.ios_column_value_push_off_row_CNT
--------------------------------------------------------------------------------------------------------------------------------------------
-- Sorters/filters
--------------------------------------------------------------------------------------------------------------------------------------------
,[Last Read Days\B|N0]  = DATEDIFF(DAY
                                  ,(--
                                    SELECT MAX(dt) FROM (VALUES (i.ius_last_user_seek_DTTM)
                                                               ,(i.ius_last_user_scan_DTTM)
                                                               ,(i.ius_last_user_lookup_DTTM)) AS value(dt))
                                  ,sis.collection_DTTM
                                  )

--------------------------------------------------------------------------------------------------------------------------------------------
-- Record Key IDs
--------------------------------------------------------------------------------------------------------------------------------------------
,i.database_id
,i.object_id
,i.index_id
,i.type
,i.rec_type

--------------------------------------------------------------------------------------------------------------------------------------------
-- Missing Index details
--------------------------------------------------------------------------------------------------------------------------------------------
,[mix Advantage AMT\G|N0]             = IIF(i.type = N'M',i.mix_Advantage_AMT            ,NULL) -- missing nonclustered rowstore index
,[mix Advantage weighted AMT\G|N0]    = IIF(i.type = N'M',i.mix_advantage_weighted_AMT   ,NULL) -- missing nonclustered rowstore index
,[mix unique compiles CNT\G|N0]       = IIF(i.type = N'M',i.mix_unique_compiles_CNT      ,NULL) -- missing nonclustered rowstore index
,[mix user seeks CNT\G|N0]            = IIF(i.type = N'M',i.ius_user_seeks_CNT           ,NULL) -- missing nonclustered rowstore index
,[mix user scans CNT\G|N0]            = IIF(i.type = N'M',i.ius_user_scans_CNT           ,NULL) -- missing nonclustered rowstore index
,[mix avg Total user cost AMT\G|N2]   = IIF(i.type = N'M',i.mix_avg_total_user_cost_AMT  ,NULL) -- missing nonclustered rowstore index
,[mix avg user impact AMT\G|N2]       = IIF(i.type = N'M',i.mix_avg_user_impact_AMT      ,NULL) -- missing nonclustered rowstore index
,[mix last user seek\G|DT]            = IIF(i.type = N'M',i.ius_last_user_seek_DTTM      ,NULL) -- missing nonclustered rowstore index
,[mix last user scan\G|DT]            = IIF(i.type = N'M',i.ius_last_user_scan_DTTM      ,NULL) -- missing nonclustered rowstore index
--------------------------------------
,[Table Total Reads CNT\B|N0]         = IIF(i.type = N'M',p.ius_user_read_CNT            ,NULL) -- missing nonclustered rowstore index
--------------------------------------
,[mix avg Total system cost AMT\G|N2] = IIF(i.type = N'M',i.mix_avg_total_system_cost_AMT,NULL) -- missing nonclustered rowstore index
,[mix avg system impact AMT\G|N2]     = IIF(i.type = N'M',i.mix_avg_system_impact_AMT    ,NULL) -- missing nonclustered rowstore index
,[mix system seeks CNT\G|N0]          = IIF(i.type = N'M',i.ius_system_seeks_CNT         ,NULL) -- missing nonclustered rowstore index
,[mix system scans CNT\G|N0]          = IIF(i.type = N'M',i.ius_system_scans_CNT         ,NULL) -- missing nonclustered rowstore index
,[mix last system seek\G|DT]          = IIF(i.type = N'M',i.ius_last_system_seek_DTTM    ,NULL) -- missing nonclustered rowstore index
,[mix last system scan\G|DT]          = IIF(i.type = N'M',i.ius_last_system_scan_DTTM    ,NULL) -- missing nonclustered rowstore index

--------------------------------------------------------------------------------------------------------------------------------------------
-- TOTAL Operational Stats - for all levels
--------------------------------------------------------------------------------------------------------------------------------------------
,[ops_total_contacts_CNT\B|N0]        = i.ops_total_contacts_CNT
,[ops_total_write_CNT\B|N0]           = i.ops_total_write_CNT
,[ops_total_insert_CNT\B|N0]          = i.ops_total_insert_CNT
,[ops_total_update_CNT\B|N0]          = i.ops_total_update_CNT
,[ops_total_delete_CNT\B|N0]          = i.ops_total_delete_CNT
,[ops_total_read_CNT\G|N0]            = i.ops_total_read_CNT
,[ops_total_scan_CNT\B|N0]            = i.ops_total_scan_CNT
,[ops_total_scan_retries_CNT\B|N0]    = i.ops_total_scan_retries_CNT
--------------------------------------
,[ops_total_wait_CNT\B|N0]            = i.ops_total_wait_CNT
,[ops_total_wait_MS_CNT\B|N0]         = i.ops_total_wait_MS_CNT
,[ops_total_wait_MS_AVG\B|N2]         = i.ops_total_wait_MS_AVG

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Operational Stats
--------------------------------------------------------------------------------------------------------------------------------------------
,[ios_singleton_lookup_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_singleton_lookup_CNT                 ,NULL)
,[ios_forwarded_fetch_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_forwarded_fetch_CNT                  ,NULL)
,[ios_lob_fetch_pages_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_lob_fetch_pages_CNT                  ,NULL)
,[ios_partition_CNT\B|N0]                         = IIF(i.rec_type = N'I',i.ios_partition_CNT                        ,NULL)
-------------------------------------------------
,[ios_leaf_insert_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ios_leaf_insert_CNT                      ,NULL)
,[ios_leaf_update_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ios_leaf_update_CNT                      ,NULL)
,[ios_leaf_delete_CNT\B|N0]                       = IIF(i.rec_type = N'I',i.ios_leaf_delete_CNT                      ,NULL)
,[ios_leaf_ghost_CNT\B|N0]                        = IIF(i.rec_type = N'I',i.ios_leaf_ghost_CNT                       ,NULL)
,[ios_total_leaf_Contacts_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_total_leaf_Contacts_CNT              ,NULL)
-------------------------------------------------
,[ios_nonleaf_insert_CNT\B|N0]                    = IIF(i.rec_type = N'I',i.ios_nonleaf_insert_CNT                   ,NULL)
,[ios_nonleaf_delete_CNT\B|N0]                    = IIF(i.rec_type = N'I',i.ios_nonleaf_delete_CNT                   ,NULL)
,[ios_nonleaf_update_CNT\B|N0]                    = IIF(i.rec_type = N'I',i.ios_nonleaf_update_CNT                   ,NULL)
,[ios_total_nonleaf_Contacts_CNT\B|N0]            = IIF(i.rec_type = N'I',i.ios_total_nonleaf_Contacts_CNT           ,NULL)
-------------------------------------------------
,[ios_leaf_allocation_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_leaf_allocation_CNT                  ,NULL)
,[ios_nonleaf_allocation_CNT\B|N0]                = IIF(i.rec_type = N'I',i.ios_nonleaf_allocation_CNT               ,NULL)
,[ops_total_page_split_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ops_total_page_split_CNT                 ,NULL)
-------------------------------------------------
,[ios_leaf_page_merge_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_leaf_page_merge_CNT                  ,NULL)
,[ios_nonleaf_page_merge_CNT\B|N0]                = IIF(i.rec_type = N'I',i.ios_nonleaf_page_merge_CNT               ,NULL)
,[ops_total_page_merge_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ops_total_page_merge_CNT                 ,NULL)
-------------------------------------------------
,[ios_lob_fetch_bytes_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_lob_fetch_bytes_CNT                  ,NULL)
,[ios_lob_orphan_create_CNT\B|N0]                 = IIF(i.rec_type = N'I',i.ios_lob_orphan_create_CNT                ,NULL)
,[ios_lob_orphan_insert_CNT\B|N0]                 = IIF(i.rec_type = N'I',i.ios_lob_orphan_insert_CNT                ,NULL)
,[ios_row_overflow_fetch_in_pages_CNT\B|N0]       = IIF(i.rec_type = N'I',i.ios_row_overflow_fetch_in_pages_CNT      ,NULL)
,[ios_row_overflow_fetch_in_bytes_CNT\B|N0]       = IIF(i.rec_type = N'I',i.ios_row_overflow_fetch_in_bytes_CNT      ,NULL)
,[ios_column_value_push_off_row_CNT\B|N0]         = IIF(i.rec_type = N'I',i.ios_column_value_push_off_row_CNT        ,NULL)
,[ios_column_value_pull_in_row_CNT\B|N0]          = IIF(i.rec_type = N'I',i.ios_column_value_pull_in_row_CNT         ,NULL)
-------------------------------------------------
,[ops_total_lock_CNT\B|N0]                        = IIF(i.rec_type = N'I',i.ops_total_lock_CNT                       ,NULL)
,[ops_total_lock_wait_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ops_total_lock_wait_CNT                  ,NULL)
,[ops_total_lock_wait_MS_CNT\B|N0]                = IIF(i.rec_type = N'I',i.ops_total_lock_wait_MS_CNT               ,NULL)
,[ops_total_lock_wait_MS_AVG\B|N2]                = IIF(i.rec_type = N'I',i.ops_total_lock_wait_MS_AVG               ,NULL)
-------------------------------------------------
,[ios_row_lock_CNT\B|N0]                          = IIF(i.rec_type = N'I',i.ios_row_lock_CNT                         ,NULL)
,[ios_row_lock_wait_CNT\B|N0]                     = IIF(i.rec_type = N'I',i.ios_row_lock_wait_CNT                    ,NULL)
,[ios_row_lock_wait_MS_CNT\B|N0]                  = IIF(i.rec_type = N'I',i.ios_row_lock_wait_MS_CNT                 ,NULL)
,[ios_row_lock_wait_MS_AVG\B|N2]                  = IIF(i.rec_type = N'I',i.ios_row_lock_wait_MS_AVG                 ,NULL)
-------------------------------------------------
,[ios_page_lock_CNT\B|N0]                         = IIF(i.rec_type = N'I',i.ios_page_lock_CNT                        ,NULL)
,[ios_page_lock_wait_CNT\B|N0]                    = IIF(i.rec_type = N'I',i.ios_page_lock_wait_CNT                   ,NULL)
,[ios_page_lock_wait_MS_CNT\B|N0]                 = IIF(i.rec_type = N'I',i.ios_page_lock_wait_MS_CNT                ,NULL)
,[ios_page_lock_wait_MS_AVG\B|N2]                 = IIF(i.rec_type = N'I',i.ios_page_lock_wait_MS_AVG                ,NULL)
-------------------------------------------------
,[ios_lock_promotion_attempt_CNT\B|N0]            = IIF(i.rec_type = N'I',i.ios_lock_promotion_attempt_CNT           ,NULL)
,[ios_lock_promotion_CNT\B|N0]                    = IIF(i.rec_type = N'I',i.ios_lock_promotion_CNT                   ,NULL)
,[ios_lock_promotion_fail_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_lock_promotion_fail_CNT              ,NULL)
-------------------------------------------------
,[ios_page_latch_wait_CNT\B|N0]                   = IIF(i.rec_type = N'I',i.ios_page_latch_wait_CNT                  ,NULL)
,[ios_page_latch_wait_MS_CNT\B|N0]                = IIF(i.rec_type = N'I',i.ios_page_latch_wait_MS_CNT               ,NULL)
,[ios_page_latch_wait_MS_AVG\B|N2]                = IIF(i.rec_type = N'I',i.ios_page_latch_wait_MS_AVG               ,NULL)
-------------------------------------------------
,[ios_page_io_latch_wait_CNT\B|N0]                = IIF(i.rec_type = N'I',i.ios_page_io_latch_wait_CNT               ,NULL)
,[ios_page_io_latch_wait_MS_CNT\B|N0]             = IIF(i.rec_type = N'I',i.ios_page_io_latch_wait_MS_CNT            ,NULL)
,[ios_page_io_latch_wait_MS_AVG\B|N2]             = IIF(i.rec_type = N'I',i.ios_page_io_latch_wait_MS_AVG            ,NULL)
-------------------------------------------------
,[ios_tree_page_latch_wait_CNT\B|N0]              = IIF(i.rec_type = N'I',i.ios_tree_page_latch_wait_CNT             ,NULL)
,[ios_tree_page_latch_wait_MS_CNT\B|N0]           = IIF(i.rec_type = N'I',i.ios_tree_page_latch_wait_MS_CNT          ,NULL)
,[ios_tree_page_latch_wait_MS_AVG\B|N2]           = IIF(i.rec_type = N'I',i.ios_tree_page_latch_wait_MS_AVG          ,NULL)
-------------------------------------------------
,[ios_tree_page_io_latch_wait_CNT\B|N0]           = IIF(i.rec_type = N'I',i.ios_tree_page_io_latch_wait_CNT          ,NULL)
,[ios_tree_page_io_latch_wait_MS_CNT\B|N0]        = IIF(i.rec_type = N'I',i.ios_tree_page_io_latch_wait_MS_CNT       ,NULL)
,[ios_tree_page_io_latch_wait_MS_AVG\B|N2]        = IIF(i.rec_type = N'I',i.ios_tree_page_io_latch_wait_MS_AVG       ,NULL)
-------------------------------------------------
,[ios_page_compression_attempt_CNT\B|N0]          = IIF(i.rec_type = N'I',i.ios_page_compression_attempt_CNT         ,NULL)
-- Fail PCT                                         IIF(i.rec_type = N'I',                                           ,NULL)
,[ios_page_compression_success_CNT\B|N0]          = IIF(i.rec_type = N'I',i.ios_page_compression_success_CNT         ,NULL)
,[ios_page_compression_fail_CNT\B|N0]             = IIF(i.rec_type = N'I',i.ios_page_compression_fail_CNT            ,NULL)
-------------------------------------------------
,[ios_version_generated_off_row_CNT\B|N0]         = IIF(i.rec_type = N'I',i.ios_version_generated_off_row_CNT        ,NULL)
,[ios_ghost_version_inrow_CNT\B|N0]               = IIF(i.rec_type = N'I',i.ios_ghost_version_inrow_CNT              ,NULL)
,[ios_ghost_version_off_row_CNT\B|N0]             = IIF(i.rec_type = N'I',i.ios_ghost_version_off_row_CNT            ,NULL)
,[ios_insert_over_ghost_version_inrow_CNT\B|N0]   = IIF(i.rec_type = N'I',i.ios_insert_over_ghost_version_inrow_CNT  ,NULL)
,[ios_insert_over_ghost_version_off_row_CNT\B|N0] = IIF(i.rec_type = N'I',i.ios_insert_over_ghost_version_off_row_CNT,NULL)
,[ios_total_Column_value_off_row_CNT\B|N0]        = IIF(i.rec_type = N'I',i.ios_total_Column_value_off_row_CNT       ,NULL)

--------------------------------------------------------------------------------------------------------------------------------------------
-- Index Usage Stats
--------------------------------------------------------------------------------------------------------------------------------------------
,[ius_user_total_CNT\B|N0]        = IIF(i.rec_type = N'I',i.ius_user_total_CNT    ,NULL)
,[ius_user_updates_CNT\B|N0]      = IIF(i.rec_type = N'I',i.ius_user_updates_CNT  ,NULL)
,[ius_user_read_CNT\B|N0]         = IIF(i.rec_type = N'I',i.ius_user_read_CNT     ,NULL)
,[ius_user_seeks_CNT\B|N0]        = IIF(i.rec_type = N'I',i.ius_user_seeks_CNT    ,NULL)
,[ius_user_scans_CNT\B|N0]        = IIF(i.rec_type = N'I',i.ius_user_scans_CNT    ,NULL)
,[ius_user_lookups_CNT\B|N0]      = IIF(i.rec_type = N'I',i.ius_user_lookups_CNT  ,NULL)
,[ius_system_seeks_CNT\B|N0]      = IIF(i.rec_type = N'I',i.ius_system_seeks_CNT  ,NULL)
,[ius_system_scans_CNT\B|N0]      = IIF(i.rec_type = N'I',i.ius_system_scans_CNT  ,NULL)
,[ius_system_lookups_CNT\B|N0]    = IIF(i.rec_type = N'I',i.ius_system_lookups_CNT,NULL)
,[ius_system_updates_CNT\B|N0]    = IIF(i.rec_type = N'I',i.ius_system_updates_CNT,NULL)
----------------------------------
,[ius_last_user_seek_DAY\B|N]     = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_seek_DTTM    ,sis.collection_DTTM),NULL)
,[ius_last_user_scan_DAY\B|N]     = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_scan_DTTM    ,sis.collection_DTTM),NULL)
,[ius_last_user_lookup_DAY\B|N]   = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_lookup_DTTM  ,sis.collection_DTTM),NULL)
,[ius_last_user_update_DAY\B|N]   = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_user_update_DTTM  ,sis.collection_DTTM),NULL)
,[ius_last_system_seek_DAY\B|N]   = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_seek_DTTM  ,sis.collection_DTTM),NULL)
,[ius_last_system_scan_DAY\B|N]   = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_scan_DTTM  ,sis.collection_DTTM),NULL)
,[ius_last_system_lookup_DAY\B|N] = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_lookup_DTTM,sis.collection_DTTM),NULL)
,[ius_last_system_update_DAY\B|N] = IIF(i.rec_type = N'I',DATEDIFF(DAY,i.ius_last_system_update_DTTM,sis.collection_DTTM),NULL)
----------------------------------
,[ius_no_read_user_updates_CNT\B] = IIF(i.rec_type = N'I',i.ius_no_read_user_updates_CNT,NULL)
,[ius_last_read_days_ago\B]       = IIF(i.rec_type = N'I',i.ius_last_read_days_ago,NULL)
,[ius_last_write_days_ago\B]      = IIF(i.rec_type = N'I',i.ius_last_write_days_ago,NULL)

--------------------------------------------------------------------------------------------------------------------------------------------
-- InMemory (XTP) Index Stats
--------------------------------------------------------------------------------------------------------------------------------------------
,[xtp_rows_touched_CNT\B|N0]                     = IIF(obj.is_memory_optimized = 1,i.xtp_rows_touched_CNT                ,NULL)
,[xtp_rows_returned_CNT\B|N0]                    = IIF(obj.is_memory_optimized = 1,i.xtp_rows_returned_CNT               ,NULL)
,[xtp_scans_started_CNT\B|N0]                    = IIF(obj.is_memory_optimized = 1,i.xtp_scans_started_CNT               ,NULL)
,[xtp_scans_retries_CNT\B|N0]                    = IIF(obj.is_memory_optimized = 1,i.xtp_scans_retries_CNT               ,NULL)
--------------------------------------------
,[xtp_page_update_CNT\B|N0]                      = IIF(obj.is_memory_optimized = 1,i.xtp_page_update_CNT                 ,NULL)
,[xtp_page_update_retry_CNT\B|N0]                = IIF(obj.is_memory_optimized = 1,i.xtp_page_update_retry_CNT           ,NULL)
,[xtp_page_consolidation_CNT\B|N0]               = IIF(obj.is_memory_optimized = 1,i.xtp_page_consolidation_CNT          ,NULL)
,[xtp_page_consolidation_retry_CNT\B|N0]         = IIF(obj.is_memory_optimized = 1,i.xtp_page_consolidation_retry_CNT    ,NULL)
--------------------------------------------
,[xtp_page_split_CNT\B|N0]                       = IIF(obj.is_memory_optimized = 1,i.xtp_page_split_CNT                  ,NULL)
,[xtp_page_split_retry_CNT\B|N0]                 = IIF(obj.is_memory_optimized = 1,i.xtp_page_split_retry_CNT            ,NULL)
,[xtp_key_split_CNT\B|N0]                        = IIF(obj.is_memory_optimized = 1,i.xtp_key_split_CNT                   ,NULL)
,[xtp_key_split_retry_CNT\B|N0]                  = IIF(obj.is_memory_optimized = 1,i.xtp_key_split_retry_CNT             ,NULL)
--------------------------------------------
,[xtp_page_merge_CNT\B|N0]                       = IIF(obj.is_memory_optimized = 1,i.xtp_page_merge_CNT                  ,NULL)
,[xtp_page_merge_retry_CNT\B|N0]                 = IIF(obj.is_memory_optimized = 1,i.xtp_page_merge_retry_CNT            ,NULL)
,[xtp_key_merge_CNT\B|N0]                        = IIF(obj.is_memory_optimized = 1,i.xtp_key_merge_CNT                   ,NULL)
,[xtp_key_merge_retry_CNT\B|N0]                  = IIF(obj.is_memory_optimized = 1,i.xtp_key_merge_retry_CNT             ,NULL)
--------------------------------------------
,[xtp_unique_constraint_violations_CNT\B|N0]     = IIF(obj.is_memory_optimized = 1,i.xtp_unique_constraint_violations_CNT,NULL)
,[xtp_write_conflicts_CNT\B|N0]                  = IIF(obj.is_memory_optimized = 1,i.xtp_write_conflicts_CNT             ,NULL)
--------------------------------------------
,[xtp_row_insert_attempts_CNT\B|N0]              = IIF(obj.is_memory_optimized = 1,i.xtp_row_insert_attempts_CNT         ,NULL)
,[xtp_row_update_attempts_CNT\B|N0]              = IIF(obj.is_memory_optimized = 1,i.xtp_row_update_attempts_CNT         ,NULL)
,[xtp_row_delete_attempts_CNT\B|N0]              = IIF(obj.is_memory_optimized = 1,i.xtp_row_delete_attempts_CNT         ,NULL)
--------------------------------------------
,[xtp_delta_pages_CNT\B|N0]                      = IIF(obj.is_memory_optimized = 1,i.xtp_delta_pages_CNT                 ,NULL)
,[xtp_leaf_pages_CNT\B|N0]                       = IIF(obj.is_memory_optimized = 1,i.xtp_leaf_pages_CNT                  ,NULL)
,[xtp_uses_key_normalization\B]                  = IIF(obj.is_memory_optimized = 1,i.xtp_uses_key_normalization          ,NULL)
,[xtp_allocated_bytes_CNT\B|N0]                  = IIF(obj.is_memory_optimized = 1,i.xtp_allocated_bytes_CNT             ,NULL)
,[xtp_used_bytes_CNT\B|N0]                       = IIF(obj.is_memory_optimized = 1,i.xtp_used_bytes_CNT                  ,NULL)
,[xtp_allocation_CNT\B|N0]                       = IIF(obj.is_memory_optimized = 1,i.xtp_allocation_CNT                  ,NULL)

--------------------------------------------------------------------------------------------------------------------------------------------
-- ColumnStore Index Stats "5' = Clustered Columnstore "6" = Nonclustered Columnstore
--------------------------------------------------------------------------------------------------------------------------------------------
,[cs_partition_CNT\B|N0]                          = IIF(i.type IN (N'5',N'6'),i.cs_partition_CNT             ,NULL) -- columnstores
,[cs_row_group_CNT\B|N0]                          = IIF(i.type IN (N'5',N'6'),i.cs_row_group_CNT             ,NULL) -- columnstores
,[cs_index_scan_CNT\B|N0]                         = IIF(i.type IN (N'5',N'6'),i.cs_index_scan_CNT            ,NULL) -- columnstores
,[cs_scan_CNT\B|N0]                               = IIF(i.type IN (N'5',N'6'),i.cs_scan_CNT                  ,NULL) -- columnstores
,[cs_delete_buffer_scan_CNT\B|N0]                 = IIF(i.type IN (N'5',N'6'),i.cs_delete_buffer_scan_CNT    ,NULL) -- columnstores
--------------------------------------------
,[cs_row_group_lock_CNT\B|N0]                     = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_CNT        ,NULL) -- columnstores
,[cs_row_group_lock_wait_CNT\B|N0]                = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_wait_CNT   ,NULL) -- columnstores
,[cs_row_group_lock_wait_MS_CNT\B|N2]             = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_wait_MS_CNT,NULL) -- columnstores
,[cs_row_group_lock_wait_MS_AVG\B]                = IIF(i.type IN (N'5',N'6'),i.cs_row_group_lock_wait_MS_AVG,NULL) -- columnstores
--------------------------------------------
,[cs_returned_row_CNT\B|N0]                       = IIF(i.type IN (N'5',N'6'),i.cs_returned_row_CNT          ,NULL) -- columnstores
,[cs_returned_aggregate_CNT\B|N0]                 = IIF(i.type IN (N'5',N'6'),i.cs_returned_aggregate_CNT    ,NULL) -- columnstores
,[cs_returned_group_CNT\B|N0]                     = IIF(i.type IN (N'5',N'6'),i.cs_returned_group_CNT        ,NULL) -- columnstores
,[cs_input_groupby_row_CNT\B|N0]                  = IIF(i.type IN (N'5',N'6'),i.cs_input_groupby_row_CNT     ,NULL) -- columnstores

--------------------------------------------------------------------------------------------------------------------------------------------
-- data sources
--------------------------------------------------------------------------------------------------------------------------------------------
/*** LOCAL TESTING ***
SELECT i.rec_type,i.database_id,i.object_id,i.index_id,i.type,i.sub_type
SELECT COUNT_BIG(1)
--*/
  FROM (SELECT TOP (1) * FROM [##SQLXL_Index_startup]) AS sis
 CROSS
  JOIN (SELECT * FROM [##SQLXL_Index_compilation] WHERE type = N'A') AS a      -- instance level aggregate record

-------------------------------------------------------------------------
 CROSS
  JOIN [##SQLXL_Index_compilation]   AS i                                      -- all records for display in worksheet
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_databases] AS db
    ON i.database_id = db.database_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects]   AS obj
    ON i.database_id                = obj.database_id
   AND i.object_id                  = obj.object_id
  LEFT OUTER
  JOIN [##SQLXL_Index_sys_objects]   AS fkc_obj
    ON i.database_id                = fkc_obj.database_id
   AND i.index_id                   = fkc_obj.object_id
   AND N'F'                         = fkc_obj.type                             -- foreign key constraint

-------------------------------------------------------------------------
-- Data Spaces
-------------------------------------------------------------------------
  LEFT OUTER
  JOIN [##SQLXL_Index_data_spaces] AS data_space_lob                           -- LOB data space retained in OBJECT table
    ON obj.database_id              = data_space_lob.database_id
   AND obj.lob_data_space_id        = data_space_lob.data_space_id
  LEFT OUTER
  JOIN [##SQLXL_Index_data_spaces] AS data_space_fs                            -- file stream data space retained in OBJECT table
    ON obj.database_id              = data_space_fs.database_id
   AND obj.filestream_data_space_id = data_space_fs.data_space_id
  LEFT OUTER
  JOIN [##SQLXL_Index_data_spaces] AS data_space_xtp                           -- in-memory data space at database level
    ON i.database_id                = data_space_xtp.database_id
   AND i.data_space_id              = data_space_xtp.data_space_id
   AND N'FX'                        = data_space_xtp.data_space_type
  LEFT OUTER
  JOIN [##SQLXL_Index_data_spaces] AS data_space_idx                           -- data space at object & index level
    ON i.database_id                = data_space_idx.database_id
   AND i.data_space_id              = data_space_idx.data_space_id

-------------------------------------------------------------------------
  LEFT OUTER                                                                   -- outer needed for ALL rows
  JOIN [##SQLXL_Index_sql_definitions] AS def
    ON i.database_id = def.database_id
   AND (   (    i.index_id = def.group_handle
            AND i.type     = N'M'                                              -- missing nonclustered rowstore index
           )
        OR (    i.rec_type  = N'P'                                             -- parent level aggregate record
            AND i.object_id = def.object_id
            AND i.index_id  = def.object_id
           )
       )

  LEFT OUTER                                                                   -- outer needed for ALL row
  JOIN [##SQLXL_Index_sys_objects]     AS par_obj                              -- parent object for System, History, Constraints
    ON obj.database_id      = par_obj.database_id
   AND obj.parent_object_id = par_obj.object_id                                -- for System, History, Constraints

-------------------------------------------------------------------------
  LEFT OUTER
  JOIN (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'D') AS d  -- database level aggregate record
    ON i.database_id   = d.database_id
 -------------------------------------------------------------------------
  LEFT OUTER                                                                   -- outer needed for ALL row
  JOIN (SELECT * FROM [##SQLXL_Index_compilation] WHERE rec_type = N'P') AS p  -- parent level aggregate record
    ON i.database_id   = p.database_id
   AND i.object_id     = p.object_id
 -------------------------------------------------------------------------
  LEFT OUTER
  JOIN (-- physical table metrics. Views included for their clustering index
        SELECT *
          FROM [##SQLXL_Index_compilation]
         WHERE rec_type = N'I' -- index level composite record
           AND type
            IN (N'0' -- rowstore heap
               ,N'1' -- Clustered Rowstore Index
               ,N'5' -- CLustered ColumnStore
               )
       ) AS raw
    ON i.database_id      = raw.database_id
   AND i.object_id        = raw.object_id
-------------------------------------------------------------------------
 OUTER
 APPLY (-- diagnostics for non-instance level aggregate records
        SELECT STUFF((--
                      SELECT  CHAR(096) + f.diagnostic
                        FROM [##SQLXL_Index_Diagnostics] AS f
                       WHERE i.rec_type    = f.rec_type
                         AND i.database_id = f.database_id
                         AND i.object_id   = f.object_id
                         AND i.index_id    = f.index_id
                         AND i.type        = f.type
                         AND i.sub_type    = f.sub_type
                         AND f.diagnostic   IS NOT NULL
                       ORDER BY
                             f.diagnostic_ID
                            ,f.diagnostic DESC
                         FOR XML PATH(N''), TYPE                                                    -- diagnostics
                     ).value('.', 'NVARCHAR(MAX)')
                    ,1,1,N'') -- end of STUFF function
       ) AS comp(diagnostics)
-------------------------------------------------------------------------
 OUTER
 APPLY (-- diagnostics from INSTANCE level
        SELECT STUFF((--
                      SELECT  CHAR(096) + f.diagnostic
                        FROM [##SQLXL_Instance_diagnostics] AS f
                       WHERE i.rec_type    = N'A'                  -- instance level aggregate record
                         AND i.rec_type    = f.rec_type
                         AND i.database_id = f.database_id
                         AND i.object_id   = f.object_id
                         AND i.index_id    = f.index_id
                         AND i.type        = f.type
                         AND i.sub_type    = f.sub_type
                         AND f.diagnostic   IS NOT NULL
                       ORDER BY
                             f.diagnostic_ID
                            ,f.diagnostic DESC
                         FOR XML PATH(N''), TYPE                                                    -- diagnostics
                     ).value('.', 'NVARCHAR(MAX)')
                    ,1,1,N'') -- end of STUFF function
       ) AS inst(diagnostics)
-------------------------------------------------------------------------
 OUTER
 APPLY
 /*****************************************************************************************************************************************\
  Incorporate Extended Properties for all records
  Column "value" previously converted to NVARCHAR(MAX)
  Class:  0 = Database
          1 = Object or column
          2 = Parameter
          3 = Schema
          4 = Database principal
          5 = Assembly
          6 = Type
          7 = index
          8 = User defined table type column
         10 = XML schema collection
         15 = Message type
         16 = Service contract
         17 = Service
         18 = Remote service binding
         19 = Route
         20 = Dataspace (filegroup or partition scheme)
         21 = Partition function -- <future> add
         22 = Database file
         27 = Plan guide
\******************************************************************************************************************************************/
       (--
        SELECT REPLACE(
                  STUFF((--
                         SELECT TOP (100) PERCENT extended_properties
                           FROM (          -- database properties
                                 SELECT ord = 1
                                       ,COALESCE(CHAR(096) + N'Database: ' + ep.name + N': ' + ep.value,N'')
                                   FROM [##SQLXL_Index_sys_extended_properties] AS ep
                                  WHERE i.database_id = ep.database_id
                                    AND 0             = ep.class
                                    AND 0             = ep.major_id
                                    AND 0             = ep.minor_id
                                    AND i.rec_type    = N'D'                  -- database level aggregate record
                                 UNION ALL -- schema properties
                                 SELECT ord = 2
                                       ,COALESCE(CHAR(096) + N'Schema: ' + ep.name + N': ' + ep.value,N'')
                                   FROM [##SQLXL_Index_sys_extended_properties] AS ep
                                  WHERE i.database_id = ep.database_id
                                    AND 3             = ep.class
                                    AND obj.schema_id = ep.major_id
                                    AND 0             = ep.minor_id
                                    AND i.rec_type    = N'P'                  -- parent level aggregate record
                                 UNION ALL -- object properties
                                 SELECT ord = 3
                                       ,COALESCE(CHAR(096) + ep.name + N': ' + ep.value,N'')
                                   FROM [##SQLXL_Index_sys_extended_properties] AS ep
                                  WHERE i.database_id = ep.database_id
                                    AND 1             = ep.class
                                    AND i.object_id   = ep.major_id
                                    AND 0             = ep.minor_id
                                    AND i.rec_type   <> N'I'                  -- index level aggregate record
                                 UNION ALL -- foreign key constraint properties
                                 SELECT ord = 4
                                       ,COALESCE(CHAR(096) + ep.name + N': ' + ep.value,N'')
                                   FROM [##SQLXL_Index_sys_extended_properties] AS ep
                                  WHERE i.database_id = ep.database_id
                                    AND 1             = ep.class
                                    AND i.object_id   = ep.major_id
                                    AND 0             = ep.minor_id
                                    AND i.type        = N'F'                  -- foreign key constraint
                                 UNION ALL -- index properties
                                 SELECT ord = 5
                                       ,COALESCE(CHAR(096) + ep.name + N': ' + ep.value,N'')
                                   FROM [##SQLXL_Index_sys_extended_properties] AS ep
                                  WHERE i.database_id = ep.database_id
                                    AND 7             = ep.class
                                    AND i.object_id   = ep.major_id
                                    AND i.index_id    = ep.minor_id
                                    AND i.rec_type    = N'I'                  -- index level aggregate record
                                 UNION ALL -- index column properties
                                 SELECT ord = 6
                                       ,COALESCE(CHAR(096) + QUOTENAME(c.name) + N' ' + ep.name+ N': ' + ep.value,N'')
                                   FROM [##SQLXL_Index_sys_index_columns]       AS ic
                                   JOIN [##SQLXL_Index_sys_columns]             AS c
                                     ON ic.database_id = c.database_id
                                    AND ic.object_id   = c.object_id
                                    AND ic.column_id   = c.column_id
                                   JOIN [##SQLXL_Index_sys_extended_properties] AS ep
                                     ON ic.database_id = ep.database_id
                                    AND 1              = ep.class
                                    AND ic.object_id   = ep.major_id
                                    AND ic.column_id   = ep.minor_id
                                  WHERE i.database_id  = ic.database_id
                                    AND i.object_id    = ic.object_id
                                    AND i.index_id     = ic.index_id
                                    AND i.type         = ic.type
                                    AND i.sub_type     = ic.sub_type
                                ) AS ext(ord,extended_properties)
                          ORDER BY ord
                                  ,extended_properties
                            FOR XML PATH(N''),TYPE                                                  -- extended properties
                        ).value('.',N'NVARCHAR(MAX)')
                       ,1,1,N'')               -- end of STUFF function
                      ,NCHAR(94),NCHAR(32))    -- end of REPLACE function
       ) AS ext_prop(extended_properties)
-------------------------------------------------------------------------
 ORDER BY
       IIF(i.rec_type = N'A',1,0)                                    -- instance level aggregate record
      ,IIF(i.rec_type = N'P',i.tbl_priority_metric,0.0) DESC         -- parent level aggregate record
      ,i.database_id
      ,obj.parent_object_id
      ,i.object_id
      ,2                    -- [Drill Down Filter|NW] from way above
      ,i.index_id
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

GO -- end of stored procedure/function/T-SQL script/CREATE VIEW

RAISERROR ('Created procedure [##SQLXL_Index_Present] ...',0,0) WITH NOWAIT;

IF @@TRANCOUNT > 0 COMMIT;

GO

-- VERSION 25.01.07
/******************************************************************************************************************************************\
All SQLXL objects are created in the database your SQL studio tool is connected to.
\******************************************************************************************************************************************/

/*########################################################################################################################################*\
############################################################################################################################################
INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTANCE INSTA
############################################################################################################################################
\*########################################################################################################################################*/

/*** LOCAL TESTING ***
EXEC [##SQLXL_INSTANCE] -- for testing
--*/

/******************************************************************************************************************************************\
Copyright (C) 2025 Practice Computing Management Inc.
All rights reserved.

MIT License, http://www.opensource.org/licenses/mit-license.php
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
(the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, --HASH,
publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
SQL Server Versions & Default Compatibility (as of Jan 2025)
Azure SQL DB   - 16   - 160
Azure SQL MI   - 16   - 160
        2025   - 17   - 170
        2022   - 16   - 160
        2019   - 15   - 150
        2017   - 14   - 140
        2016   - 13   - 130
        2014   - 12   - 120
        2012   - 11   - 110
        2008R2 - 10.5 - 100
        2008   - 10   - 100
        2005   -  9   -  90
        2000   -  8   -  80

SQL Server EngineEditions including Azure
-------------------------------------------------------------------------------------
 1 = Personal or Desktop Engine (Not available in SQL Server 2005 (9.x) and later versions.)
 2 = Standard (For Standard, Web, and Business Intelligence.)
 3 = Enterprise (For Evaluation, Developer, and Enterprise editions.)
 4 = Express (For Express, Express with Tools, and Express with Advanced Services)

 5 = Azure SQL Database
 6 = Azure Synapse Analytics
 8 = Azure SQL Managed Instance
 9 = Azure SQL Edge (For all editions of Azure SQL Edge)
11 = Azure Synapse serverless SQL pools

Database Compatibility Level
--------------------------------------------------------------------------------------------------------------------------------------------
If Database compatibility level is less than SQL 2012 (11) then TRY_CONVERT & TRY_CAST do not work.
They are omitted from the code - may be added back once support for SQL 2012 is dropped.
\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
-- Drop previous SQLXL_Instance tempdb source data stores (SQLXL_Instance_%)
-- TRUNCATE/REBUILD is used to clear out any missing index recommendations that were created from the last execution(s)
\******************************************************************************************************************************************/
DECLARE @sql       NVARCHAR(MAX)
       ,@run_value NVARCHAR(4000);

/*** LOCAL TESTING ***
DECLARE @sql       NVARCHAR(MAX)
       ,@run_value NVARCHAR(4000)
       ,@ssms_ads  TINYINT       = 1
       ,@msg       NVARCHAR(1000)
       ,@step_exec_dttm DATETIME      = GETDATE();
--*/

WHILE 1 = 1 BEGIN
   SELECT TOP (1)
          @run_value = QUOTENAME(s.name) + N'.' + QUOTENAME(t.name)
         ,@sql = N'TRUNCATE TABLE ' + QUOTENAME(s.name) + N'.' + QUOTENAME(t.name) + N';'
               + NCHAR(013) + NCHAR(010)
               -- Drops MISSING index recommendations
               + N'ALTER index ALL ON ' + QUOTENAME(s.name) + N'.' + QUOTENAME(t.name) + N' REBUILD;'
               + NCHAR(013) + NCHAR(010)
               + N'DROP TABLE ' + QUOTENAME(s.name) + N'.' + QUOTENAME(t.name) + N';'
     FROM [sys].[tables]  AS t WITH (READUNCOMMITTED)
     JOIN [sys].[objects] AS o WITH (READUNCOMMITTED)
       ON t.object_id  = o.object_id
     JOIN [sys].[schemas] AS s WITH (READUNCOMMITTED)
       ON o.schema_id  = s.schema_id
    WHERE t.name LIKE N'##SQLXL_Instance%'
      AND s.name    = N'dbo'
    ORDER BY
          t.name
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @@ROWCOUNT = 0 BREAK

   BEGIN TRY
      EXECUTE (@sql);
   END TRY
   BEGIN CATCH
      SET @run_value = N'TRUNCATE/ALTER/DROP FAIL on ' + @run_value
      RAISERROR (@run_value,0,0) WITH NOWAIT;
   END CATCH
END; -- WHILE 1 = 1

/******************************************************************************************************************************************\
 *Task* Create procedure [##SQLXL_Instance] - captures instance properties and configurations
\******************************************************************************************************************************************/
BEGIN TRY
   EXEC (N'CREATE PROCEDURE [##SQLXL_Instance] AS RETURN 0;')
END TRY
BEGIN CATCH
END CATCH
GO

ALTER PROCEDURE [##SQLXL_Instance]
  WITH RECOMPILE
AS

/******************************************************************************************************************************************\

\******************************************************************************************************************************************/

/******************************************************************************************************************************************\
 Procedure Environment settings
\******************************************************************************************************************************************/
SET ANSI_NULLS               ON; -- Specifies ISO compliant behavior of (=) and (<>) comparison operators when used with null values
SET ANSI_WARNINGS            ON; -- Specifies ISO standard behavior for several error conditions. Must be ON with FOR XML statements
SET ARITHABORT               ON; -- Terminates a query when an overflow or divide-by-zero error occurs during query execution
SET ARITHIGNORE             OFF; -- Controls whether error messages are returned from overflow or divide-by-zero errors during a query
SET CURSOR_CLOSE_ON_COMMIT  OFF; -- OFF means that the server will not close cursors when you commit a transaction
SET DATEFORMAT              YMD; -- Sets the order of the month, day, and year date parts for interpreting date&time strings
SET DEADLOCK_PRIORITY       -10; -- Specifies the relative importance of the current session if deadlocked. (-10) is lowest priority
SET FMTONLY                 OFF; -- Returns only metadata to client. Used to test the response format without actually running the query
SET FORCEPLAN               OFF; -- When ON, optimizer uses FORCE ORDER + NESTED LOOP JOIN for FROM clause tables
SET IMPLICIT_TRANSACTIONS   OFF; -- When OFF, sets the connection to autocommit transaction mode
SET LOCK_TIMEOUT           1000; -- Specifies the number of milliseconds a statement waits for a lock to be released
SET NOCOUNT                  ON; -- Stops the message showing the count of rows affected by a statement or stored procedure
SET NOEXEC                  OFF; -- Compiles each query but does not execute it
SET NUMERIC_ROUNDABORT      OFF; -- Specifies the level of error reporting generated when rounding causes a loss of precision
SET QUERY_GOVERNOR_COST_LIMIT 0; -- 0 (the default) turns off the query governor, queries of any cost are allowed to execute
SET QUOTED_IDENTIFIER        ON; -- Causes SQL Server to follow ISO rules using quotation mark delimiting identifiers and literal strings
SET STATISTICS IO,PROFILE,TIME,XML OFF; -- Displays information on statement resource usage
SET TEXTSIZE         2147483647; -- Specifies size of BLOB returned by a SELECT statement. Use 32767 on export to Excel - cell maximum
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; -- read rows that have been modified by other transactions but not yet committed
SET XACT_ABORT               ON; -- Automatically roll back the current transaction when a statement raises a run-time error

/******************************************************************************************************************************************\
-- Local Procedure variables
\******************************************************************************************************************************************/
DECLARE @sql       NVARCHAR(MAX)
       ,@step_exec_dttm DATETIME = GETDATE()
       ,@coll_dttm DATETIME = GETDATE()
       ,@run_value NVARCHAR(4000)
       ,@msg       NVARCHAR(1000)
       ,@ssms_ads  TINYINT  = (SELECT (1)
                                 FROM [sys].[dm_exec_sessions] WITH (READUNCOMMITTED)
                                WHERE session_id = @@SPID
                                  AND (   program_name LIKE N'Microsoft SQL Server Management Studio%'
                                       OR program_name LIKE N'azdata%' --azure data studio
                                       OR program_name    = N'SQLCMD'
                                      )
                              );

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   RAISERROR(N'    Start [##SQLXL_Instance] data collection & diagnostics',0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 Create for Instance/Server configuration info from procedure [sys].[sp_configure], SERVERPROPERTY, etc.
<FUTURE> if this procedure has been run within last <period> don't execute again
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @sql            NVARCHAR(MAX)
       ,@msg            NVARCHAR(1000)
       ,@coll_dttm      DATETIME = GETDATE()
DROP TABLE IF EXISTS [##SQLXL_Instance_info];
--*/

BEGIN TRY
   SELECT TOP (0)
          source            = CAST(N'SQLXL'           AS NVARCHAR(200))                      COLLATE Latin1_General_100_CI_AI
         ,configuration_id  = CAST(NULL AS BIGINT)
         ,name              = CAST(N'Collection_DTTM' AS NVARCHAR(200))                      COLLATE Latin1_General_100_CI_AI
         ,configured_value  = CAST(NULL AS BIGINT)
         ,minimum_value     = CAST(NULL AS BIGINT)
         ,maximum_value     = CAST(NULL AS BIGINT)
         ,run_value         = CAST(NULL AS BIGINT)
         ,text_value_in_use = CAST(CONVERT(NVARCHAR(30),GETDATE(),120) AS NVARCHAR(255)) COLLATE Latin1_General_100_CI_AI
         ,description       = CAST(NULL AS NVARCHAR(255))                                COLLATE Latin1_General_100_CI_AI
         ,is_dynamic        = CAST(NULL AS BIT)
         ,is_advanced       = CAST(NULL AS BIT)
         ,default_value     = CAST(NULL AS BIGINT)
     INTO [##SQLXL_Instance_info]
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   SET @coll_dttm = GETDATE();
END TRY
BEGIN CATCH
   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N' Previous [##SQLXL_Instance_info] table found - truncating'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;

--<FUTURE>
   SELECT @coll_dttm = CAST(text_value_in_use AS DATETIME)
     FROM [##SQLXL_Instance_info]
    WHERE source = N'SQLXL'
      AND name   = N'Collection_DTTM'
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   TRUNCATE TABLE [##SQLXL_Instance_info];

END CATCH

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Created table [##SQLXL_Instance_info] / queried for Collection_DTTM'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
-- Create - [##SQLXL_Instance_defaults] - instance level defaults
-- all other values for [sys].[configurations] default to ZERO
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @sql NVARCHAR(MAX)
DROP TABLE IF EXISTS [##SQLXL_Instance_defaults];
--*/

BEGIN TRY
   SELECT source         = CAST(N'configurations' AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,name           = CAST(v.name              AS NVARCHAR(200)) COLLATE Latin1_General_100_CI_AI
         ,default_value  = CAST(v.default_value     AS BIGINT)
         ,sql_version_lo = CAST(v.sql_version_lo    AS TINYINT)
         ,sql_version_hi = CAST(v.sql_version_hi    AS TINYINT)
     INTO [##SQLXL_Instance_defaults]
     FROM (VALUES  (N'ADR cleaner retry timeout (min)',120,0,15)
                  ,(N'ADR cleaner retry timeout (min)',120,16,99)
                  ,(N'ADR Cleaner Thread Count',1,NULL,NULL)
                  ,(N'ADR Preallocation Factor',4,NULL,NULL)
                  ,(N'Agent XPs',1,NULL,NULL)
                  ,(N'allow filesystem enumeration',1,NULL,NULL)
                  ,(N'backup checksum default',1,NULL,NULL)
                  ,(N'backup compression default',1,NULL,NULL)
                  ,(N'clr strict security',1,NULL,NULL)
                  ,(N'cost threshold for parallelism',5,NULL,NULL)
                  ,(N'cursor threshold',-1,NULL,NULL)
                  ,(N'Data processed daily limit in TB',2147483647,NULL,NULL)
                  ,(N'Data processed monthly limit in TB',2147483647,NULL,NULL)
                  ,(N'Data processed weekly limit in TB',2147483647,NULL,NULL)
                  ,(N'default full-text language',1033,NULL,NULL)
                  ,(N'default trace enabled',1,NULL,NULL)
                  ,(N'ft crawl bandwidth (max)',100,NULL,NULL)
                  ,(N'ft notify bandwidth (max)',100,NULL,NULL)
                  ,(N'max full-text crawl range',4,NULL,NULL)
                  ,(N'max server memory (MB)',2147483647,NULL,NULL)
                  ,(N'max text repl size (B)',65536,NULL,NULL)
                  ,(N'max worker threads',2048,NULL,NULL)
                  ,(N'min memory per query (KB)',1024,NULL,NULL)
                  ,(N'nested triggers',1,NULL,NULL)
                  ,(N'network packet size (B)',4096,NULL,NULL)
                  ,(N'openrowset auto_create_statistics',1,NULL,NULL)
                  ,(N'PH timeout (s)',60,NULL,NULL)
                  ,(N'polybase network encryption',1,NULL,NULL)
                  ,(N'query wait (s)',-1,NULL,NULL)
                  ,(N'remote access',1,NULL,NULL)
                  ,(N'remote login timeout (s)',10,NULL,NULL)
                  ,(N'remote query timeout (s)',600,NULL,NULL)
                  ,(N'server trigger recursion',1,NULL,NULL)
                  ,(N'SMO and DMO XPs',1,NULL,NULL)
                  ,(N'two digit year cutoff',2049,NULL,NULL)
                  ) AS v(name,default_value,sql_version_lo,sql_version_hi)
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);
END TRY
BEGIN CATCH
END CATCH

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Created table [##SQLXL_Instance_defaults]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--<FUTURE>
-- IF @msg IS NOT NULL AND DATEDIFF(HOUR,CONVERT(DATETIME,@msg,120),GETDATE()) < 1.0
-- BEGIN
--    IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
--       SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,GETDATE(),GETDATE()),0))
--                + N' Exit - Instance info less than 1 hour old'
--       RAISERROR(@msg,0,0) WITH NOWAIT;
--    END
--    RETURN; -- if less than an hour old abort
-- END   -- IF @msg IS NOT NULL AND DATEDIFF(DAY,CONVERT(DATETIME,@msg,120),GETDATE()) < 1

/*** LOCAL TESTING ***
DECLARE @msg NVARCHAR(1000);
--*/

/******************************************************************************************************************************************\
-- Create - [##SQLXL_Instance_diagnostics] - Diagnostics Table
\******************************************************************************************************************************************/
BEGIN TRY
   CREATE TABLE [##SQLXL_Instance_diagnostics]
         (diagnostic_ID    INT            IDENTITY(1,1)
         -----------------------------
         ,rec_type         CHAR(1)        COLLATE Latin1_General_100_CI_AI
                                          DEFAULT N'A' NOT NULL
                                          -- A-All(Instance), D-Database, P-Parent, S-System/Internal, H-History/Archive, I-Index
         ,database_id      SMALLINT       DEFAULT 0                                     NOT NULL
         ,object_id        INT            DEFAULT 0                                     NOT NULL
         ,index_id         INT            DEFAULT 0                                     NOT NULL
         ,type             NVARCHAR(2)    COLLATE Latin1_General_100_CI_AI DEFAULT N'A' NOT NULL
         ,sub_type         SMALLINT                                        DEFAULT 0    NOT NULL
         -----------------------------
         ,diagnostic       NVARCHAR(4000) COLLATE Latin1_General_100_CI_AI DEFAULT N''  NOT NULL
         );
END TRY
BEGIN CATCH
   TRUNCATE TABLE [##SQLXL_Instance_diagnostics];
END CATCH

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Created/truncated [##SQLXL_Instance_diagnostics]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
      (source
      ,name
      ,text_value_in_use
      )
SELECT source     = N'SQLXL'
      ,name       = N'Collection_DTTM'
      ,text_value_in_use = CONVERT(NVARCHAR(30),GETDATE(),120)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Insert SQLXL & Collection_DTTM to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect Instance Server-level trace flag settings
 For details on trace flags and their uses please see Konstantin Taranov's
 https://github.com/ktaranov/sqlserver-kit/blob/master/SQL%20Server%20Trace%20Flag.md

 <FUTURE> add checks for Recommended Trace Flags:
 Trace Flag 272 (for SQL Server 2012)
 Trace Flag 460 (2017 for >= CU14, 2016 for >= SP2 CU6)
 Trace Flag 1118 (for versions < SQL Server 2016)
 Trace Flag 3023 (for versions < SQL Server 2014)
 Trace Flag 3226 (for all versions)
 Trace Flag 3427 (for SQL Server 2016)
 Trace Flag 3449 (for versions SQL Server 2012 SP3 CU3 or later or SQL Server 2014 SP1 CU7 or later)
 Trace Flag 6534 (for versions SQL Server 2012, 2014, 2016) (if use spatial data types)
 Trace Flag 7412 (for versions >= SQL Server 2016 and < SQL Server 2019)
 Trace Flag 7745 (for versions >= SQL Server 2016 and Query Store enabled)
 Trace Flag 7752 (for versions >= SQL Server 2016 and < 2019 and Query Store enabled)
 Trace Flag 7806 (for SQL Server Express Edition)
 Trace Flag 8099 (for versions 2019 CU2 and 2019 CU3 only)

\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
      (name
      ,run_value
      ,maximum_value
      ,minimum_value
      )
  EXEC ('DBCC TRACESTATUS(-1) WITH NO_INFOMSGS');

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Executed "DBCC TRACESTATUS(-1) WITH NO_INFOMSGS" to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

-- save off data source of above records
UPDATE [##SQLXL_Instance_info] WITH (TABLOCKX)
   SET source  = N'TRACESTATUS'
 WHERE source IS NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' updated [##SQLXL_Instance_info] with source for DBCC TRACESTATUS records'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect Instance [sys].[configurations] settings
 Not present in Azure SQL DB & Azure SQL Managed Instance
 https://learn.microsoft.com/en-us/sql/relational-databases/system-catalog-views/sys-configurations-transact-sql?view=sql-server-ver16
 *NOTE* [sys].[configurations] has more elements than sp_configure
\******************************************************************************************************************************************/
IF object_id(N'[sys].[configurations]') IS NOT NULL -- check for object existence
INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
SELECT N'configurations'
      ,c.configuration_id
      ,c.name
      ,minimum           = CONVERT(BIGINT,c.minimum     )
      ,maximum           = CONVERT(BIGINT,c.maximum     )
      ,value             = CONVERT(BIGINT,c.value       )
      ,value_in_use      = CONVERT(BIGINT,c.value_in_use)
      ,text_value_in_use = NULL
      ,description       = c.description COLLATE Latin1_General_100_CI_AI
      ,c.is_dynamic
      ,c.is_advanced
      ,default_value = COALESCE(id.default_value,0)
  FROM [sys].[configurations]      AS c  WITH (READUNCOMMITTED)
  LEFT OUTER
  JOIN [##SQLXL_Instance_defaults] AS id
    ON N'configurations' = id.source
   AND c.name COLLATE Latin1_General_100_CI_AI = id.name COLLATE Latin1_General_100_CI_AI
   AND (   CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) BETWEEN id.sql_version_lo AND id.sql_version_hi
        OR id.sql_version_lo IS NULL
       )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

--------------------------------------------------------------------------------------------------------------------------------------------
-- if [sys].[configurations] not found check if [sys].[sp_configure] is available.
-- NOTE: AZURE SQL DB has neither data source
--------------------------------------------------------------------------------------------------------------------------------------------
IF  object_id(N'[sys].[configurations]') IS NULL     -- check for object existence
AND object_id(N'[sys].[sp_configure]')   IS NOT NULL -- check for object existence
INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
      (name
      ,minimum_value
      ,maximum_value
      ,configured_value
      ,run_value
      )
  EXEC [sys].[sp_configure];

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Checked for / executed [sys].[sp_configure] to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Update data source of added records
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE [##SQLXL_Instance_info] WITH (TABLOCKX)
   SET source = N'configurations'
 WHERE source IS NULL
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' updated [##SQLXL_Instance_info] with source for [sys].[sp_configure] records'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Apply default values to configuration records
--------------------------------------------------------------------------------------------------------------------------------------------
UPDATE tgt -- [##SQLXL_Instance_info]
   SET default_value = COALESCE(id.default_value,0)
  FROM [##SQLXL_Instance_info] AS tgt WITH (TABLOCKX)
  LEFT OUTER
  JOIN [##SQLXL_Instance_defaults] AS id
    ON tgt.source = id.source
   AND tgt.name   = id.name
   AND (   CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT) BETWEEN id.sql_version_lo AND id.sql_version_hi
        OR id.sql_version_lo IS NULL
       )
 WHERE tgt.source = N'configurations'
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Applied defaults to [##SQLXL_Instance_info] for configuration info'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- Get Instance FULL-TEXT default language
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
      (source
      ,name
      ,text_value_in_use
      )
SELECT source            = N'configurations'
      ,name              = N'fulltext_default_language_name'
      ,text_value_in_use = COALESCE(sl.name + N' - ',N'') + COALESCE(sl.alias,fl.name)
  FROM [##SQLXL_Instance_info]    AS si
  JOIN [sys].[fulltext_languages] AS fl
    ON CAST(si.run_value AS INT)   = fl.lcid
  LEFT OUTER
  JOIN [sys].[syslanguages]       AS sl
    ON CAST(si.run_value AS INT)   = sl.lcid
 WHERE si.source = N'configurations'
   AND si.name   = N'default full-text language'
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Get Instance FULL-TEXT default language to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect Instance SERVERPROPERTY settings
 https://learn.microsoft.com/en-us/sql/t-sql/functions/serverproperty-transact-sql
\******************************************************************************************************************************************/
INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
      (source
      ,name
      ,text_value_in_use
      )
SELECT e.source
      ,e.name
      ,text_value_in_use = CAST(e.text_value_in_use  AS NVARCHAR(4000))
  FROM (-- serverproperty text configuration values
SELECT N'SERVERPROPERTY',N'BuildClrVersion'                   ,SERVERPROPERTY(N'BuildClrVersion')                   UNION ALL
SELECT N'SERVERPROPERTY',N'Collation'                         ,SERVERPROPERTY(N'Collation')                         UNION ALL
SELECT N'SERVERPROPERTY',N'ComputernamePhysicalNetBIOS'       ,SERVERPROPERTY(N'ComputernamePhysicalNetBIOS')       UNION ALL
SELECT N'SERVERPROPERTY',N'Edition'                           ,SERVERPROPERTY(N'Edition')                           UNION ALL
SELECT N'SERVERPROPERTY',N'EditionDescription'                ,SERVERPROPERTY(N'EditionDescription')                UNION ALL
SELECT N'SERVERPROPERTY',N'FilestreamSharename'               ,SERVERPROPERTY(N'FilestreamSharename')               UNION ALL
SELECT N'SERVERPROPERTY',N'InstanceDefaultBackupPath'         ,SERVERPROPERTY(N'InstanceDefaultBackupPath')         UNION ALL
SELECT N'SERVERPROPERTY',N'InstanceDefaultDataPath'           ,SERVERPROPERTY(N'InstanceDefaultDataPath')           UNION ALL
SELECT N'SERVERPROPERTY',N'InstanceDefaultLogPath'            ,SERVERPROPERTY(N'InstanceDefaultLogPath')            UNION ALL
SELECT N'SERVERPROPERTY',N'Instancename'                      ,SERVERPROPERTY(N'Instancename')                      UNION ALL
SELECT N'SERVERPROPERTY',N'LicenseType'                       ,SERVERPROPERTY(N'LicenseType')                       UNION ALL
SELECT N'SERVERPROPERTY',N'Machinename'                       ,SERVERPROPERTY(N'Machinename')                       UNION ALL
SELECT N'SERVERPROPERTY',N'PathSeparator'                     ,SERVERPROPERTY(N'PathSeparator')                     UNION ALL
SELECT N'SERVERPROPERTY',N'ProductBuildType'                  ,SERVERPROPERTY(N'ProductBuildType')                  UNION ALL
SELECT N'SERVERPROPERTY',N'ProductLevel'                      ,SERVERPROPERTY(N'ProductLevel')                      UNION ALL
SELECT N'SERVERPROPERTY',N'ProductUpdateLevel'                ,SERVERPROPERTY(N'ProductUpdateLevel')                UNION ALL
SELECT N'SERVERPROPERTY',N'ProductUpdateReference'            ,SERVERPROPERTY(N'ProductUpdateReference')            UNION ALL
SELECT N'SERVERPROPERTY',N'ProductUpdateType'                 ,SERVERPROPERTY(N'ProductUpdateType')                 UNION ALL
SELECT N'SERVERPROPERTY',N'ProductVersion'                    ,SERVERPROPERTY(N'ProductVersion')                    UNION ALL
SELECT N'SERVERPROPERTY',N'ResourceLastupdatedateTime'        ,SERVERPROPERTY(N'ResourceLastupdatedateTime')        UNION ALL
SELECT N'SERVERPROPERTY',N'ResourceVersion'                   ,SERVERPROPERTY(N'ResourceVersion')                   UNION ALL
SELECT N'SERVERPROPERTY',N'Servername'                        ,SERVERPROPERTY(N'Servername')                        UNION ALL
SELECT N'SERVERPROPERTY',N'SqlCharSetname'                    ,SERVERPROPERTY(N'SqlCharSetname')                    UNION ALL
SELECT N'SERVERPROPERTY',N'SqlSortOrdername'                  ,SERVERPROPERTY(N'SqlSortOrdername')
) e (source,name,text_value_in_use)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Get SERVERPROPERTY string values to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
      (source
      ,name
      ,run_value
      )
SELECT e.source
      ,e.name
      ,CAST(e.run_value  AS BIGINT)
  FROM (-- serverproperty numeric configuration values
SELECT N'SERVERPROPERTY',N'CollationID'                       ,SERVERPROPERTY(N'CollationID')                        UNION ALL
SELECT N'SERVERPROPERTY',N'ComparisonStyle'                   ,SERVERPROPERTY(N'ComparisonStyle')                    UNION ALL
SELECT N'SERVERPROPERTY',N'EditionID'                         ,SERVERPROPERTY(N'EditionID')                          UNION ALL
SELECT N'SERVERPROPERTY',N'EngineEdition'                     ,SERVERPROPERTY(N'EngineEdition')                      UNION ALL
SELECT N'SERVERPROPERTY',N'FilestreamConfiguredLevel'         ,SERVERPROPERTY(N'FilestreamConfiguredLevel')          UNION ALL
SELECT N'SERVERPROPERTY',N'FilestreamEffectiveLevel'          ,SERVERPROPERTY(N'FilestreamEffectiveLevel')           UNION ALL
SELECT N'SERVERPROPERTY',N'HadrManagerStatus'                 ,SERVERPROPERTY(N'HadrManagerStatus')                  UNION ALL
SELECT N'SERVERPROPERTY',N'IsAdvancedAnalyticsInstalled'      ,SERVERPROPERTY(N'IsAdvancedAnalyticsInstalled')       UNION ALL
SELECT N'SERVERPROPERTY',N'IsBigDataCluster'                  ,SERVERPROPERTY(N'IsBigDataCluster')                   UNION ALL
SELECT N'SERVERPROPERTY',N'IsClustered'                       ,SERVERPROPERTY(N'IsClustered')                        UNION ALL
SELECT N'SERVERPROPERTY',N'IsExternalAuthenticationOnly'      ,SERVERPROPERTY(N'IsExternalAuthenticationOnly')       UNION ALL
SELECT N'SERVERPROPERTY',N'IsExternalGovernanceEnabled'       ,SERVERPROPERTY(N'IsExternalGovernanceEnabled')        UNION ALL
SELECT N'SERVERPROPERTY',N'IsfulltextInstalled'               ,SERVERPROPERTY(N'IsfulltextInstalled')                UNION ALL
SELECT N'SERVERPROPERTY',N'IsHadrEnabled'                     ,SERVERPROPERTY(N'IsHadrEnabled')                      UNION ALL
SELECT N'SERVERPROPERTY',N'IsIntegratedSecurityOnly'          ,SERVERPROPERTY(N'IsIntegratedSecurityOnly')           UNION ALL
SELECT N'SERVERPROPERTY',N'IsLocalDB'                         ,SERVERPROPERTY(N'IsLocalDB')                          UNION ALL
SELECT N'SERVERPROPERTY',N'IsPolyBaseInstalled'               ,SERVERPROPERTY(N'IsPolyBaseInstalled')                UNION ALL
SELECT N'SERVERPROPERTY',N'IsServerSuspendedForSnapshotBackup',SERVERPROPERTY(N'IsServerSuspendedForSnapshotBackup') UNION ALL
SELECT N'SERVERPROPERTY',N'IsSingleUser'                      ,SERVERPROPERTY(N'IsSingleUser')                       UNION ALL
SELECT N'SERVERPROPERTY',N'IstempdbMetadataMemoryOptimized'   ,SERVERPROPERTY(N'IstempdbMetadataMemoryOptimized')    UNION ALL
SELECT N'SERVERPROPERTY',N'IsXTPSupported'                    ,SERVERPROPERTY(N'IsXTPSupported')                     UNION ALL
SELECT N'SERVERPROPERTY',N'LCID'                              ,SERVERPROPERTY(N'LCID')                               UNION ALL
SELECT N'SERVERPROPERTY',N'NumLicenses'                       ,SERVERPROPERTY(N'NumLicenses')                        UNION ALL
SELECT N'SERVERPROPERTY',N'ProcessID'                         ,SERVERPROPERTY(N'ProcessID')                          UNION ALL
SELECT N'SERVERPROPERTY',N'ProductBuild'                      ,SERVERPROPERTY(N'ProductBuild')                       UNION ALL
SELECT N'SERVERPROPERTY',N'ProductMajorVersion'               ,CAST(SERVERPROPERTY(N'ProductMajorVersion') AS INT)   UNION ALL
SELECT N'SERVERPROPERTY',N'ProductMinorVersion'               ,SERVERPROPERTY(N'ProductMinorVersion')                UNION ALL
SELECT N'SERVERPROPERTY',N'SqlCharSet'                        ,SERVERPROPERTY(N'SqlCharSet')                         UNION ALL
SELECT N'SERVERPROPERTY',N'SqlSortOrder'                      ,SERVERPROPERTY(N'SqlSortOrder')                       UNION ALL
SELECT N'SERVERPROPERTY',N'SuspendedDatabaseCount'            ,SERVERPROPERTY('SuspendedDatabaseCount')
) e (source,name,run_value)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Get SERVERPROPERTY integer values to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect Instance @@Functions & System Function settings
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
DECLARE @db_name_quoted NVARCHAR(MAX) = N'[WideWorldImporters]'
       ,@step_exec_dttm      DATETIME      = GETDATE()
       ,@i              INT           = 1
       ,@sql            NVARCHAR(MAX)
       ,@ssms_ads       TINYINT       = 2
--*/
INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
      (source
      ,name
      ,text_value_in_use
      )
SELECT N'@@Function' ,N'@@LANGUAGE'                     ,CONVERT(NVARCHAR(255),@@Language     ) UNION ALL
SELECT N'@@Function' ,N'@@SERVERname'                   ,CONVERT(NVARCHAR(255),@@Servername   ) UNION ALL
SELECT N'@@Function' ,N'@@VERSION'                      ,CONVERT(NVARCHAR(255),@@Version      )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Get @@function string values to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
      (source
      ,name
      ,run_value
      )
SELECT N'@@Function' ,N'@@DATEFIRST'                    ,CONVERT(BIGINT,@@DateFirst           ) UNION ALL
SELECT N'@@Function' ,N'@@DBTS'                         ,CONVERT(BIGINT,@@Dbts                ) UNION ALL
SELECT N'@@Function' ,N'@@LANGID'                       ,CONVERT(BIGINT,@@LangId              ) UNION ALL
SELECT N'@@Function' ,N'@@LOCK_TIMEOUT'                 ,CONVERT(BIGINT,@@Lock_Timeout        ) UNION ALL
SELECT N'@@Function' ,N'@@MAX_PRECISION'                ,CONVERT(BIGINT,@@Max_Precision       ) UNION ALL
SELECT N'@@Function' ,N'@@NESTLEVEL'                    ,CONVERT(BIGINT,@@NestLevel           ) UNION ALL
SELECT N'@@Function' ,N'@@OPTIONS'                      ,CONVERT(BIGINT,@@Options             ) UNION ALL
SELECT N'@@Function' ,N'@@SPID'                         ,CONVERT(BIGINT,@@Spid                ) UNION ALL
SELECT N'@@Function' ,N'@@TEXTSIZE'                     ,CONVERT(BIGINT,@@TextSize            )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Get @@function integer values to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
      (source
      ,name
      ,text_value_in_use
      )
SELECT N'System'        ,N'HOST_name'                      ,CONVERT(NVARCHAR(4000),HOST_name()           )
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Get HOST_name() to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

-- Options for on-premise engine editions & SQL Managed Instance
IF CAST(SERVERPROPERTY(N'EngineEdition') AS INT)
   NOT IN (5  -- Azure SQL Database
          ,6  -- Azure Synapse Analytics
          ,9  -- Azure SQL Edge
          ,11 -- Azure Synapse serverless SQL pools
          )
BEGIN
   INSERT
     INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
         (source
         ,name
         ,text_value_in_use
         )
   SELECT N'@@Function' ,N'@@REMSERVER'             ,CONVERT(NVARCHAR(255),@@RemServer            ) UNION ALL
   SELECT N'@@Function' ,N'@@SERVICEname'           ,CONVERT(NVARCHAR(255),@@Language             ) UNION ALL
   SELECT N'System'     ,N'HOST_ID'                 ,CONVERT(NVARCHAR(4000),HOST_ID()             ) UNION ALL
   SELECT N'System'     ,N'PUBLISHINGSERVERname'    ,CONVERT(NVARCHAR(4000),PUBLISHINGSERVERname())
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   INSERT
     INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
         (source
         ,name
         ,run_value
         )
   SELECT N'@@Function' ,N'@@MAX_CONNECTIONS',CONVERT(BIGINT,@@Max_Connections)
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

END; -- IF CAST(SERVERPROPERTY(N'EngineEdition') AS INT) NOT IN (5,6,9,11)

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Get configurations for on-prem editions & SQL Managed Instance to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

-- Options for on-premise engine editions, SQL DB, & SQL Managed Instance
IF CONVERT(INT,SERVERPROPERTY('ProductMajorVersion')) >= 16 -- 2022+
OR CAST(SERVERPROPERTY(N'EngineEdition') AS INT)
   IN (5 -- Azure SQL Database
      ,8 -- Azure SQL Managed Instance
      )
BEGIN
   INSERT
     INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
         (source
         ,name
         ,text_value_in_use
         )
   SELECT N'System'
         ,N'CURRENT_TIMEZONE'
         ,CONVERT(NVARCHAR(4000),CURRENT_TIMEZONE())
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

END; -- IF CONVERT(INT,SERVERPROPERTY('ProductMajorVersion')) >= 16

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Get CURRENT_TIMEZONE() for on-prem editions & SQL Managed Instance to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[dm_os_sys_info] Instance & Server configurations
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2008 & 2008R2 ONLY --------------------------------
       physical_memory_in_bytes    = CONVERT(BIGINT        ,NULL)
      ,virtual_memory_in_bytes     = CONVERT(BIGINT        ,NULL)
      ,bpool_visible               = CONVERT(BIGINT        ,NULL)
      ,bpool_committed             = CONVERT(BIGINT        ,NULL)
      ,bpool_commit_target         = CONVERT(BIGINT        ,NULL)
       -- SQL 2012+ ---------------------------------------------
      ,committed_kb                = CONVERT(BIGINT        ,NULL)
      ,virtual_memory_kb           = CONVERT(BIGINT        ,NULL)
      ,committed_target_kb         = CONVERT(BIGINT        ,NULL)
      ,physical_memory_kb          = CONVERT(BIGINT        ,NULL)
      ,visible_target_kb           = CONVERT(BIGINT        ,NULL)
      ,sql_memory_model            = CONVERT(BIGINT        ,NULL)
       -- SQL 2014+ ---------------------------------------------
      ,socket_count                = CONVERT(BIGINT        ,NULL)
      ,cores_per_socket            = CONVERT(BIGINT        ,NULL)
      ,numa_node_count             = CONVERT(BIGINT        ,NULL)
       -- SQL 2016+ ---------------------------------------------
      ,softnuma_configuration      = CONVERT(BIGINT        ,NULL)
       -- SQL 2017+ ---------------------------------------------
      ,container_type              = CONVERT(BIGINT        ,NULL)
      ,pdw_node_id                 = CONVERT(BIGINT        ,NULL)
)
INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
      (source
      ,name
      ,run_value
      )
SELECT qry.source
      ,qry.name
      ,run_value  = CAST(run_value AS BIGINT)
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add All [sys].[dm_os_sys_info] values
----------------------------------------------------------
SELECT TOP (0) -- make sure each column has the correct data type
       source    = CAST(NULL AS NVARCHAR(200))
      ,name      = CAST(NULL AS NVARCHAR(200))
      ,run_value = CAST(NULL AS BIGINT)
UNION ALL
SELECT N'dm_os_sys_info',N'cpu_ticks'                     ,(SELECT cpu_ticks                      FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'ms_ticks'                      ,(SELECT ms_ticks                       FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'cpu_count'                     ,(SELECT cpu_count                      FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'hyperthread_ratio'             ,(SELECT hyperthread_ratio              FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'stack_size_in_bytes'           ,(SELECT stack_size_in_bytes            FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'os_quantum'                    ,(SELECT os_quantum                     FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'os_error_mode'                 ,(SELECT os_error_mode                  FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'os_priority_class'             ,(SELECT os_priority_class              FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'max_workers_count'             ,(SELECT max_workers_count              FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'scheduler_count'               ,(SELECT scheduler_count                FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'scheduler_total_count'         ,(SELECT scheduler_total_count          FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'deadlock_monitor_serial_number',(SELECT deadlock_monitor_serial_number FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'sqlserver_start_time_ms_ticks' ,(SELECT sqlserver_start_time_ms_ticks  FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'affinity_type'                 ,(SELECT affinity_type                  FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'process_kernel_time_ms'        ,(SELECT process_kernel_time_ms         FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'process_user_time_ms'          ,(SELECT process_user_time_ms           FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'time_source'                   ,(SELECT time_source                    FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_machine_type'          ,(SELECT virtual_machine_type           FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
-- columns added in later versions --------------------------------------------------------
SELECT N'dm_os_sys_info',N'physical_memory_in_bytes'      ,(SELECT physical_memory_in_bytes       FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_memory_in_bytes'       ,(SELECT virtual_memory_in_bytes        FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'bpool_visible'                 ,(SELECT bpool_visible                  FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'bpool_committed'               ,(SELECT bpool_committed                FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'bpool_commit_target'           ,(SELECT bpool_commit_target            FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'committed_kb'                  ,(SELECT committed_kb                   FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_memory_kb'             ,(SELECT virtual_memory_kb              FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'committed_target_kb'           ,(SELECT committed_target_kb            FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'physical_memory_kb'            ,(SELECT physical_memory_kb             FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'visible_target_kb'             ,(SELECT visible_target_kb              FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'sql_memory_model'              ,(SELECT sql_memory_model               FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'socket_count'                  ,(SELECT socket_count                   FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'cores_per_socket'              ,(SELECT cores_per_socket               FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'numa_node_count'               ,(SELECT numa_node_count                FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'softnuma_configuration'        ,(SELECT softnuma_configuration         FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'container_type'                ,(SELECT container_type                 FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'pdw_node_id'                   ,(SELECT pdw_node_id                    FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED))
--------------------------------------------------------------------------------------------------------------------------------------------
) AS qry (source,name,run_value)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Get [sys].[dm_os_sys_info] integer values to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

;WITH newcol AS (-- columns added after SQL Server 2005
SELECT -- SQL 2008 & 2008R2 ONLY --------------------------------
       -- SQL 2012+ ---------------------------------------------
       sql_memory_model_desc       = CONVERT(NVARCHAR(200) ,NULL)
       -- SQL 2014+ ---------------------------------------------
       -- SQL 2016+ ---------------------------------------------
      ,softnuma_configuration_desc = CONVERT(NVARCHAR(200) ,NULL)
       -- SQL 2017+ ---------------------------------------------
      ,process_physical_affinity   = CONVERT(NVARCHAR(3072),NULL)
      ,container_type              = CONVERT(BIGINT        ,NULL)
      ,container_type_desc         = CONVERT(NVARCHAR(200) ,NULL)
)
INSERT
  INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
      (source
      ,name
      ,text_value_in_use
      )
SELECT qry.source
      ,qry.name
      ,text_value_in_use = CAST(qry.text_value_in_use AS NVARCHAR(255))
  FROM newcol
 CROSS
 APPLY (-- syntax used to include cte with new columns above
        -- add all [sys].[dm_os_sys_info] values
----------------------------------------------------------
SELECT TOP (0) -- make sure each column has the correct data type
       source     = CAST(NULL AS NVARCHAR(200))
      ,name       = CAST(NULL AS NVARCHAR(200))
      ,text_value_in_use = CAST(NULL AS NVARCHAR(255))
UNION ALL
SELECT N'dm_os_sys_info',N'affinity_type_desc'            ,(SELECT affinity_type_desc             FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'time_source_desc'              ,(SELECT time_source_desc               FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'virtual_machine_type_desc'     ,(SELECT virtual_machine_type_desc      FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
-- columns added in later versions --------------------------------------------------------
SELECT N'dm_os_sys_info',N'sql_memory_model_desc'         ,(SELECT sql_memory_model_desc          FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'softnuma_configuration_desc'   ,(SELECT softnuma_configuration_desc    FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'container_type_desc'           ,(SELECT container_type_desc            FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
SELECT N'dm_os_sys_info',N'process_physical_affinity'     ,(SELECT process_physical_affinity      FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)) UNION ALL
--------------------------------------------------------------------------------------------------------------------------------------------
SELECT N'dm_os_sys_info',N'sqlserver_start_time'   ,REPLACE((SELECT CONVERT(NVARCHAR(4000),sqlserver_start_time,120)
                                                                                                  FROM [sys].[dm_os_sys_info] WITH (READUNCOMMITTED)
                                                            )
                                                           ,N'-',N'.')
) AS qry (source,name,text_value_in_use)
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
             + N' Get [sys].[dm_os_sys_info] string values to [##SQLXL_Instance_info]'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

/******************************************************************************************************************************************\
 *Task* Collect [sys].[servers] Instance/Server configuration
 On-premise editions & Azure SQL Managed Instance
 NOTE: for a writeup on the CTE method used below to handle column differences across SQL Server versions please see Aaron Bertrand's
       https://www.mssqltips.com/sqlservertip/5898/make-sql-server-dmv-queries-backward-compatible/
\******************************************************************************************************************************************/
IF object_id(N'[sys].[servers]') IS NOT NULL -- check for object existence
BEGIN
   WITH newcol AS (-- columns added after SQL Server 2005
   SELECT -- SQL 2016+ -----------------------
          is_rda_server    = CONVERT(BIT,NULL)
   )
   INSERT
     INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
         (source
         ,name
         ,run_value
         )
   SELECT qry.source
         ,qry.name
         ,run_value = CAST(qry.run_value AS BIGINT)
     FROM newcol
    CROSS
    APPLY (-- server numeric configuration information for "local" connected server from [sys].[servers]
   SELECT TOP (0)
          source    = CAST(NULL AS NVARCHAR(200))
         ,name      = CAST(NULL AS NVARCHAR(200))
         ,run_value = CAST(NULL AS BIGINT)
   UNION ALL
   SELECT N'servers',N'server_id'              ,(SELECT server_id               FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'connect_timeout'        ,(SELECT connect_timeout         FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'query_timeout'          ,(SELECT query_timeout           FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_linked'              ,(SELECT is_linked               FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_remote_login_enabled',(SELECT is_remote_login_enabled FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_rpc_out_enabled'     ,(SELECT is_rpc_out_enabled      FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_data_access_enabled' ,(SELECT is_data_access_enabled  FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_collation_compatible',(SELECT is_collation_compatible FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'uses_remote_collation'  ,(SELECT uses_remote_collation   FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'lazy_schema_validation' ,(SELECT lazy_schema_validation  FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_system'              ,(SELECT is_system               FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_publisher'           ,(SELECT is_publisher            FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_subscriber'          ,(SELECT is_subscriber           FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_distributor'         ,(SELECT is_distributor          FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_nonsql_subscriber'   ,(SELECT is_nonsql_subscriber    FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_rda_server'          ,(SELECT is_rda_server           FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'is_remote_proc_transaction_promotion_enabled'
                                               ,(SELECT is_remote_proc_transaction_promotion_enabled
                                                   FROM [sys].[servers] WITH (READUNCOMMITTED)
                                                  WHERE server_id = 0
                                                )
   ) AS qry (source,name,run_value)
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N' Get [sys].[servers] integer values to [##SQLXL_Instance_info]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;

   INSERT
     INTO [##SQLXL_Instance_info] WITH (TABLOCKX)
         (source
         ,name
         ,text_value_in_use
         )
   SELECT qry.source
         ,qry.name
         ,text_value_in_use = CAST(qry.text_value_in_use AS NVARCHAR(4000))
     FROM (-- server string configuration information for "local" connected server from [sys].[servers]
   SELECT N'servers',N'name'                   ,(SELECT name            FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'product'                ,(SELECT product         FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'provider'               ,(SELECT provider        FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'data_source'            ,(SELECT data_source     FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'location'               ,(SELECT location        FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'provider_string'        ,(SELECT provider_string FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'catalog'                ,(SELECT catalog         FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'collation_name'         ,(SELECT collation_name  FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0) UNION ALL
   SELECT N'servers',N'modify_date'            ,(SELECT CONVERT(NVARCHAR(30),modify_date,120)
                                                                        FROM [sys].[servers] WITH (READUNCOMMITTED) WHERE server_id = 0)
   ) AS qry (source,name,text_value_in_use)
   OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N' Get [sys].[servers] string values to [##SQLXL_Instance_info]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;

END -- IF object_id(N'[sys].[servers]') IS NOT NULL
ELSE
BEGIN
   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N' Did not find [sys].[servers] in this instance'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;
END;


/******************************************************************************************************************************************\
-- Index table [##SQLXL_Instance_info]
\******************************************************************************************************************************************/
BEGIN TRY
   CREATE UNIQUE CLUSTERED
    INDEX ixuc_SQLXL_Instance_info
       ON [##SQLXL_Instance_info]
         (source
         ,name
         )
     WITH (DATA_COMPRESSION = PAGE,MAXDOP = 1);

   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N' Create clustered index on [##SQLXL_Instance_info]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;

END TRY
BEGIN CATCH
   IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
      SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
                + N' Clustered index already found on [##SQLXL_Instance_info]'
      RAISERROR(@msg,0,0) WITH NOWAIT;
      SET @step_exec_dttm = GETDATE();
   END;

END CATCH

/******************************************************************************************************************************************\
 *Task* Begin Instance Diagnostics
\******************************************************************************************************************************************/
-- Diagnostic - Instance - Good to know - SQL version Instance and server key hardware & OS cofiguration information
INSERT
  INTO [##SQLXL_Instance_diagnostics] (diagnostic)
SELECT string
  FROM (--
SELECT string = CASE WHEN t.string LIKE N'%Copyright%' COLLATE Latin1_General_100_CI_AI
                     THEN  N'Startup '                 COLLATE Latin1_General_100_CI_AI
                         + s.text_value_in_use
                         + N' ('                       COLLATE Latin1_General_100_CI_AI
                         + [dbo].[SQLXL_DTTM_HMSM](GETDATE() - CAST(s.text_value_in_use AS DATETIME))
                         + N' ago)'                    COLLATE Latin1_General_100_CI_AI
                     WHEN ISDATE(REPLACE(t.string,NCHAR(009),N'')) = 1
                     THEN NULL
                     ELSE LTRIM(REPLACE(t.string,NCHAR(009),N''))
                END
/*** LOCAL TESTING ***
SELECT *
--*/
 FROM [dbo].[SQLXL_Parse_Strings]((SELECT text_value_in_use
                                     FROM [##SQLXL_Instance_info]
                                    WHERE source = N'@@Function'
                                      AND name   = N'@@VERSION'
                                  ),NCHAR(010)) AS t
 CROSS
  JOIN (-- Get SQL Server startup time
        SELECT text_value_in_use
          FROM [##SQLXL_Instance_info]
         WHERE source = N'dm_os_sys_info'
           AND name   = N'sqlserver_start_time'
       ) AS s
) AS s
WHERE s.string > N''

-- Diagnostic - Server - memory
-- Diagnostic - Instance - SQL memory, percent used
UNION ALL
SELECT  N'RAM'
      + CASE WHEN MemSrv > 0
             THEN  N' OS '
                 + [dbo].[SQLXL_3SD](MemSrv,N'KB')
             ELSE N''
        END
      + CASE WHEN SQLmax > 0
             THEN  N' SQL Max '
                 + [dbo].[SQLXL_3SD](SQLmax,N'MB')
                 + CASE WHEN MemSrv > 0
                        THEN N' (' + [dbo].[SQLXL_3SD](1.0 * SQLmax * 1024.0 / MemSrv,N'%') + N')'
                        ELSE N''
                   END
             ELSE N''
        END
      + CASE WHEN SQLusd > 0
             THEN  N' SQL Used '
                 + [dbo].[SQLXL_3SD](SQLusd,N'KB')
                 + CASE WHEN SQLmax > 0
                        THEN N' (' + [dbo].[SQLXL_3SD](1.0 * SQLusd / (SQLmax * 1024.0),N'%') + N')'
                        ELSE N'N/A'
                   END
             ELSE N''
        END
  FROM (-- queried here since each is used multiple times above
        SELECT MemSrv = (SELECT CAST(run_value AS FLOAT)
                           FROM [##SQLXL_Instance_info]
                          WHERE source = N'dm_os_sys_info'
                            AND name   = N'physical_memory_kb'
                        )
              ,SQLmax = (SELECT CAST(run_value AS FLOAT)
                           FROM [##SQLXL_Instance_info]
                          WHERE source = N'configurations'
                            AND name   = N'max server memory (MB)'
                        )
              ,SQLusd = (SELECT CAST(run_value AS FLOAT)
                           FROM [##SQLXL_Instance_info]
                          WHERE source = N'dm_os_sys_info'
                            AND name   = N'committed_kb'
                        )
       ) AS e

-- Diagnostic - Server - CPU count, CPU sockets, cores, hyperthread_ratio, SoftNUMA
UNION ALL
SELECT LTRIM( COALESCE((SELECT N' CPU ' + QUOTENAME(run_value)
                          FROM [##SQLXL_Instance_info]
                         WHERE source = N'dm_os_sys_info'
                           AND name   = N'cpu_count'
                       ),N'')
            + COALESCE((SELECT N' Sockets ' + QUOTENAME(run_value)
                          FROM [##SQLXL_Instance_info]
                         WHERE source = N'dm_os_sys_info'
                           AND name   = N'socket_count'
                       ),N'')
            + COALESCE((SELECT N' Cores/Socket ' + QUOTENAME(run_value)
                          FROM [##SQLXL_Instance_info]
                         WHERE source = N'dm_os_sys_info'
                           AND name   = N'cores_per_socket'
                       ),N'')
            + COALESCE((SELECT N' Hyperthread Ratio ' + QUOTENAME(run_value)
                          FROM [##SQLXL_Instance_info]
                         WHERE source = N'dm_os_sys_info'
                           AND name   = N'hyperthread_ratio'
                       ),N'')
-- Diagnostic - Server - GLENN BERRY: automatic soft-NUMA disabled (should be 0 in most cases)
            + COALESCE((SELECT N' SoftNUMA ' + QUOTENAME(text_value_in_use)
                          FROM [##SQLXL_Instance_info]
                         WHERE source = N'dm_os_sys_info'
                           AND name   = N'softnuma_configuration_desc'
                       ),N'')
            )
-- Diagnostic - Server - Max Degree of Parallelism
UNION ALL
SELECT  N'MAXDOP ' + QUOTENAME(run_value) + CASE WHEN run_value <> N'0'THEN N' default [0] (all processors)' ELSE N'' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'

   AND name   = N'cost threshold for parallelism'

-- Diagnostic - Instance - cost threshold for parallelism (default 5)
UNION ALL
SELECT  name + N' = ' + CAST(run_value AS NVARCHAR(20))
      + CASE WHEN run_value = 5 THEN N' (default)' ELSE N', default 5' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'cost threshold for parallelism'

-- Diagnostic - Instance - Optimize for ad hoc workloads ENABLED
UNION ALL
SELECT  name + N' '
      + CASE WHEN run_value = 0 THEN N'OFF'        ELSE N'ON'            END
      + CASE WHEN run_value = 0 THEN N' (default)' ELSE N', default OFF' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'Optimize for ad hoc workloads'

OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
            + N' Server Diagnostics'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- SQL Instance settings
--------------------------------------------------------------------------------------------------------------------------------------------
INSERT
  INTO [##SQLXL_Instance_diagnostics] (diagnostic)
-- Diagnostic - Instance - non-default - Default Fill Factor NOT 0 or 100
SELECT diagnostic = N'Instance Index Fill Factor '
                  + CASE WHEN run_value IN (0,100) THEN N'100% (default)'
                         ELSE CAST(run_value AS NVARCHAR(20)) + N'%, default 100%'
                    END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'fill factor (%)'

-- Diagnostic - Instance - Minimum memory per query <> 1024
UNION ALL
SELECT  N'Minimum memory per query (KB) = ' + CAST(run_value AS NVARCHAR(20))
      + CASE WHEN run_value = 1024 THEN N' (default)' ELSE N', default 1024' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'min memory per query (KB)'

-- Diagnostic - Instance - non-default - remote data archive enabled (stretch-enabled)
UNION ALL
SELECT N'Remote data archive ENABLED, default DISABLED'
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'servers'
   AND name      = N'is_rda_server'
   AND run_value = 1

--------------------------------------------------------------------------------------------------------------------------------------------
-- Always Included
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Instance - Product Update Type
UNION ALL
SELECT  N'Product Update Type = ' + CAST(run_value AS NVARCHAR(20))
      + CASE WHEN run_value IS NULL THEN N' (default)' ELSE N', default N/A' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'ProductUpdateType'
   AND run_value IS NOT NULL

-- Diagnostic - Instance - SQL 2019+ - tempdb Is Metadata Memory Optimized
UNION ALL
SELECT  N'tempdb Metadata Memory Optimized = '
      + CASE WHEN run_value = 0
             THEN N'DISABLED (default) - consider enabling'
             ELSE N'ENABLED, default DISABLED'
        END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'tempdb metadata memory-optimized'
   AND CONVERT(INT,SERVERPROPERTY('ProductMajorVersion')) >= 15 -- 2019+

-- Diagnostic - Instance - non-default - Network packet size <> 4096
UNION ALL
SELECT  N'Network packet size ' + CAST(run_value AS NVARCHAR(20)) + N'B'
      + CASE WHEN run_value = 4096
             THEN N' (default)'
             ELSE  CASE WHEN run_value <> 8000 THEN N', consider 8000B' ELSE N'' END
                 + N', default 4096B'
        END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'network packet size (B)'

--------------------------------------------------------------------------------------------------------------------------------------------
-- Only included if NOT DEFAULT value
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Instance - blocked process threshold <> 5
UNION ALL
SELECT  N'Blocked process threshold = ' + CAST(run_value AS NVARCHAR(20)) + N' seconds'
      + CASE WHEN run_value = 5 THEN N' (default)' ELSE N', default 5 seconds' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'blocked process threshold (s)'
   AND run_value NOT IN (0,5)

-- Diagnostic - Instance - non-default - index create memory (KB) <> 0
UNION ALL
SELECT  N'Index create memory = '
      + CASE WHEN run_value = 0 THEN N'dynamic (default)' ELSE CAST(run_value AS NVARCHAR(20)) + N'KB, default dynamic (0)' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'Index create memory (KB)'
   AND run_value NOT IN (0)

-- Diagnostic - Instance - non-default - max text repl size (B) <> 65536
UNION ALL
SELECT  N'Text Replication Size MAX = ' + CAST(run_value AS NVARCHAR(20)) + N'B'
      + CASE WHEN run_value = 65536 THEN N' (default)' ELSE N', default 65536B' END
  FROM [##SQLXL_Instance_info]
 WHERE source = N'configurations'
   AND name   = N'max text repl size (B)'
   AND run_value NOT IN (65536)

-- Diagnostic - Instance - non-default - query governor cost limit > 0
UNION ALL
SELECT  N'Query governor cost limit = ' + CAST(run_value AS NVARCHAR(20))
      + CASE WHEN run_value = 0 THEN N' - All (default)' ELSE N' default 0 (All)' END
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'configurations'
   AND name      = N'query governor cost limit'
   AND run_value > 0

-- Diagnostic - Instance - non-default - Query waits for resources before it times out <> -1
UNION ALL
SELECT  N'Query waits for resources = ('+ CAST(run_value AS NVARCHAR(20)) + N')'
      + CASE WHEN run_value = -1
             THEN N' - 25X query cost (default)'
             ELSE N' sec, default (-1) - 25X estimated query cost'
        END
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'configurations'
   AND name      = N'query wait (s)'
   AND run_value <> -1

--------------------------------------------------------------------------------------------------------------------------------------------
-- Other Services installed
--------------------------------------------------------------------------------------------------------------------------------------------
UNION ALL
-- Diagnostic - Instance - non-default - Full-Text indexing is Installed
-- Diagnostic - Instance - full-text language
SELECT  N'fulltext INSTALLED, Locale Identifier '
      + COALESCE((SELECT CAST(run_value AS NVARCHAR(20))
                    FROM [##SQLXL_Instance_info]
                   WHERE source = N'configurations'
                     AND name   = N'default full-text language'
                 ),N'')
      + COALESCE((SELECT N' - ' + text_value_in_use
                    FROM [##SQLXL_Instance_info]
                   WHERE source = N'configurations'
                     AND name   = N'fulltext_default_language_name'
                 ),N'')
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsfulltextInstalled' -- always show if fulltext installed
   AND run_value <> 0

UNION ALL
-- Diagnostic - Instance - full-text Crawl Bandwidth MAX & MIN
SELECT COALESCE((SELECT  N'> Crawl Bandwidth MAX = ' + CAST(run_value AS NVARCHAR(20))
                       + CASE WHEN run_value = 100 THEN N' (default)' ELSE N', default 100' END
                   FROM [##SQLXL_Instance_info]
                  WHERE source = N'configurations'
                    AND name   = N'FT crawl bandwidth (max)'
                ),N'')
      + COALESCE((SELECT  N' MIN = ' + CAST(run_value AS NVARCHAR(20))
                        + CASE WHEN run_value = 0 THEN N' (default)' ELSE N', default 0' END
                    FROM [##SQLXL_Instance_info]
                   WHERE source = N'configurations'
                     AND name   = N'FT crawl bandwidth (min)'
                 ),N'')
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsfulltextInstalled' -- always show if fulltext installed
   AND run_value <> 0

UNION ALL
-- Diagnostic - Instance - full-text notify bandwidth MAX & MIN
SELECT COALESCE((SELECT  N'> Notify Bandwidth MAX = ' + CAST(run_value AS NVARCHAR(20))
                       + CASE WHEN run_value = 100 THEN N' (default)' ELSE N', default 100' END
                   FROM [##SQLXL_Instance_info]
                  WHERE source = N'configurations'
                    AND name   = N'FT notify bandwidth (max)'
                ),N'')
      + COALESCE((SELECT  N' MIN = ' + CAST(run_value AS NVARCHAR(20))
                        + CASE WHEN run_value = 0 THEN N' (default)' ELSE N', default 0' END
                    FROM [##SQLXL_Instance_info]
                   WHERE source = N'configurations'
                     AND name   = N'FT notify bandwidth (min)'
                 ),N'')
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsfulltextInstalled' -- always show if fulltext installed
   AND run_value <> 0

UNION ALL
-- Diagnostic - Instance - full-text crawl range MAX CPUs
SELECT COALESCE((SELECT  N'> fulltext Crawl Range MAX = ' + CAST(run_value AS NVARCHAR(20)) + N' CPU '
                       + IIF(run_value = 4,N'(default)',N', default 4')
                   FROM [##SQLXL_Instance_info]
                  WHERE source = N'configurations'
                    AND name   = N'max full-text crawl range'
                ),N'')
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsfulltextInstalled' -- always show if fulltext installed
   AND run_value <> 0

-- Diagnostic - Instance - non-default - Advanced Analytics is Installed
UNION ALL
SELECT N'Advanced Analytics INSTALLED'
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsAdvancedAnalyticsInstalled'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Big Data Cluster is Installed
UNION ALL
SELECT N'Big Data Cluster INSTALLED'
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsBigDataCluster'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Always On (HADR) Enabled
UNION ALL
SELECT N'Always On (HADR) ENABLED'
  FROM [##SQLXL_Instance_info]
 WHERE source    = N'SERVERPROPERTY'
   AND name      = N'IsHadrEnabled'
   AND run_value = 1

-- Diagnostic - Instance - non-default - PolyBase is Installed
UNION ALL
SELECT N'PolyBase feature INSTALLED'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsPolyBaseInstalled'
   AND run_value = 1

-- Diagnostic - Instance - non-default - In-Memory Tables (XTP) is Supported
UNION ALL
SELECT N'XTP In-memory tables [SUPPORTED]'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsXTPSupported'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Microsoft Purview access policies are ENABLED
UNION ALL
SELECT N'Microsoft Purview access policies are ENABLED'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsExternalGovernanceEnabled'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Uses External Authentication Only
UNION ALL
SELECT N'Microsoft Entra-only authentication is ENABLED'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsExternalAuthenticationOnly'
   AND run_value = 1

--------------------------------------------------------------------------------------------------------------------------------------------
-- Instance non-default settings
--------------------------------------------------------------------------------------------------------------------------------------------
-- Diagnostic - Instance - non-default - Server Is Clustered
UNION ALL
SELECT N'Server is CLUSTERED'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsClustered'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Uses Integrated Security Only
UNION ALL
SELECT N'Integrated Security ONLY'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsIntegratedSecurityOnly'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Is SQL Server Local DB
UNION ALL
SELECT N'Instance is SQL Server Express LocalDB'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsLocalDB'
   AND run_value = 1

-- Diagnostic - Instance - non-default - Is in Single User Mode
-- NOTE: no index performance related items from SERVERPROPERTY as of yet
UNION ALL
SELECT N'Instance in SINGLE USER mode'
  FROM [##SQLXL_Instance_info]
 WHERE source = N'SERVERPROPERTY'
   AND name   = N'IsSingleUser'
   AND run_value = 1
OPTION (RECOMPILE,MAXDOP 1,MAX_GRANT_PERCENT = 0,FORCE ORDER);

IF @ssms_ads > 0 BEGIN -- display status to SSMS/ADS Messages tab
   SET @msg = [dbo].[SQLXL_DTTM_HMSM](DATEADD(ms,DATEDIFF(ms,@step_exec_dttm,GETDATE()),0))
         + N' Instance Diagnostics & procedure [##SQLXL_Instance] END'
   RAISERROR(@msg,0,0) WITH NOWAIT;
   SET @step_exec_dttm = GETDATE();
END;

--------------------------------------------------------------------------------------------------------------------------------------------
-- End of procedure
--------------------------------------------------------------------------------------------------------------------------------------------
IF @@TRANCOUNT > 0 COMMIT;
GO

RAISERROR ('Created procedure [##SQLXL_Instance] ...',0,0) WITH NOWAIT;

/******************************************************************************************************************************************\
############################################################################################################################################
 *Task* Create function SQLXL_Active_waits -------------------------------------------------------------------------------------------------
<FUTURE>
- Waits across multiple resources (e.g. SOS_WORK_DISPATCHER across all threads), add a reference to how many resources are included

- For Azure SQL Database & Managed Instance use sys.dm_db_wait_stats
- For Azure Synapse Analytics or Analytics Platform System (PDW), use sys.dm_pdw_nodes_os_wait_stats.
  This syntax is not supported by serverless SQL pool in Azure Synapse Analytics.
############################################################################################################################################
\******************************************************************************************************************************************/
/*** LOCAL TESTING ***
SELECT * FROM [SQLXL_Active_Waits]()
--*/
BEGIN TRY
   EXEC (N'CREATE FUNCTION [SQLXL_Active_Waits]() RETURNS TABLE AS RETURN (SELECT colname = NULL);')
END TRY
BEGIN CATCH
END CATCH
GO

ALTER FUNCTION [SQLXL_Active_Waits] ()
RETURNS TABLE
AS RETURN (--
SELECT wait_type  COLLATE Latin1_General_100_CI_AI
                  AS [Wait Type . . . . . . . . . . . . . . . . . . . . .] -- extra space added to make SSMS display broader column width
      ,wait_time  = IIF(waiting_tasks_count > N''
                       ,RIGHT(N'      ' + dbo.SQLXL_DTTM_HMSM(resource_wait_time),9)
                       ,N'')                                                         COLLATE Latin1_General_100_CI_AI
      ,wait_count = dbo.SQLXL_3SD(waiting_tasks_count,N'I')
      ,wait_avg   = dbo.SQLXL_DTTM_HMSM(resource_wait_avg)                           COLLATE Latin1_General_100_CI_AI
      ,rn         = ROW_NUMBER() OVER (ORDER BY CASE LEFT(s.wait_type,3)
                                                     WHEN N'[#]' THEN 1
                                                     WHEN N'[!]' THEN 2
                                                     WHEN N'[&]' THEN 4
                                                     ELSE 3
                                                END
                                               ,COALESCE(resource_wait_time,GETDATE()) DESC
                                                )
  FROM (SELECT wait_type = COALESCE(N'[' + w.special_type + N'] ',N'') + s.wait_type
              ,resource_wait_time = [dbo].[SQLXL_INT_DTTM]((s.wait_time_ms - s.signal_wait_time_ms),N'ms')
              ,resource_wait_avg  = [dbo].[SQLXL_INT_DTTM](1.0 * (s.wait_time_ms - s.signal_wait_time_ms) / s.waiting_tasks_count,N'ms')
              ,waiting_tasks_count
          FROM sys.dm_os_wait_stats AS s WITH (READUNCOMMITTED)
       /*##################################################################################################################################\
       List of SPECIAL (ignorable, worrying, poison) wait types - Copied from:
       Paul Randall https://www.sqlskills.com/blogs/paul/wait-statistics-or-please-tell-me-where-it-hurts/
       Paul Randall https://www.sqlskills.com/blogs/paul/worrying-wait-type/
       Pinal Dave   https://blog.sqlauthority.com/2017/08/29/sql-server-wait-stats-collection-scripts-2016-later-versions/
       Brent Ozar   https://www.brentozar.com/blitz/poison-wait-detected/
       Pedro Lopes  https://github.com/microsoft/tigertoolbox/blob/master/Waits-and-Latches/view_Waits.sql
       \##################################################################################################################################*/
          LEFT OUTER
          JOIN (VALUES
       -- POISON waits from Brent Ozar @ https://www.brentozar.com/blitz/poison-wait-detected/
               (N'#',N'CMEMTHREAD')                          -- https://www.sqlskills.com/help/waits/CMEMTHREAD
              ,(N'#',N'IO_QUEUE_LIMIT')                      -- https://www.sqlskills.com/help/waits/IO_QUEUE_LIMIT
              ,(N'#',N'IO_RETRY')                            -- https://www.sqlskills.com/help/waits/IO_RETRY
              ,(N'#',N'LOG_RATE_GOVERNOR')                   -- https://www.sqlskills.com/help/waits/LOG_RATE_GOVERNOR
              ,(N'#',N'POOL_LOG_RATE_GOVERNOR')              -- https://www.sqlskills.com/help/waits/POOL_LOG_RATE_GOVERNOR
              ,(N'#',N'PREEMPTIVE_DEBUG')                    -- https://www.sqlskills.com/help/waits/PREEMPTIVE_DEBUG
              ,(N'#',N'RESMGR_THROTTLED')                    -- https://www.sqlskills.com/help/waits/RESMGR_THROTTLED
              ,(N'#',N'RESOURCE_SEMAPHORE')                  -- https://www.sqlskills.com/help/waits/RESOURCE_SEMAPHORE
              ,(N'#',N'RESOURCE_SEMAPHORE_QUERY_COMPILE')    -- https://www.sqlskills.com/help/waits/RESOURCE_SEMAPHORE_QUERY_COMPILE
              ,(N'#',N'THREADPOOL')                          -- https://www.sqlskills.com/help/waits/THREADPOOL
               -- Azure SQL DB, waiting for the secondary replicas to catch up
              ,(N'#',N'SE_REPL_BACKGROUND')                  -- https://www.sqlskills.com/help/waits/SE_REPL_BACKGROUND
              ,(N'#',N'SE_REPL_BACKGROUND_FORWARDER')        -- https://www.sqlskills.com/help/waits/SE_REPL_BACKGROUND_FORWARDER
              ,(N'#',N'SE_REPL_BACKGROUND_KILL')             -- https://www.sqlskills.com/help/waits/SE_REPL_BACKGROUND_KILL
              ,(N'#',N'SE_REPL_CATCHUP_THROTTLE')            -- https://www.sqlskills.com/help/waits/SE_REPL_CATCHUP_THROTTLE
              ,(N'#',N'SE_REPL_COMMIT_ACK')                  -- https://www.sqlskills.com/help/waits/SE_REPL_COMMIT_ACK
              ,(N'#',N'SE_REPL_COMMIT_TURN')                 -- https://www.sqlskills.com/help/waits/SE_REPL_COMMIT_TURN
              ,(N'#',N'SE_REPL_CSN_ALLOC_TURN')              -- https://www.sqlskills.com/help/waits/SE_REPL_CSN_ALLOC_TURN
              ,(N'#',N'SE_REPL_CSN_VECTOR')                  -- https://www.sqlskills.com/help/waits/SE_REPL_CSN_VECTOR
              ,(N'#',N'SE_REPL_DEFERRED_COMMIT_TURN')        -- https://www.sqlskills.com/help/waits/SE_REPL_DEFERRED_COMMIT_TURN
              ,(N'#',N'SE_REPL_DELETE_COMPLETE')             -- https://www.sqlskills.com/help/waits/SE_REPL_DELETE_COMPLETE
              ,(N'#',N'SE_REPL_DISPATCH_ITEM_COMPLETION')    -- https://www.sqlskills.com/help/waits/SE_REPL_DISPATCH_ITEM_COMPLETION
              ,(N'#',N'SE_REPL_ITEM_COMPLETION')             -- https://www.sqlskills.com/help/waits/SE_REPL_ITEM_COMPLETION
              ,(N'#',N'SE_REPL_KILL_SYNCHRONIZE')            -- https://www.sqlskills.com/help/waits/SE_REPL_KILL_SYNCHRONIZE
              ,(N'#',N'SE_REPL_LAST_CSN_LOCK')               -- https://www.sqlskills.com/help/waits/SE_REPL_LAST_CSN_LOCK
              ,(N'#',N'SE_REPL_LOG_TRUNC')                   -- https://www.sqlskills.com/help/waits/SE_REPL_LOG_TRUNC
              ,(N'#',N'SE_REPL_METADATA_COMPLETE_ACK')       -- https://www.sqlskills.com/help/waits/SE_REPL_METADATA_COMPLETE_ACK
              ,(N'#',N'SE_REPL_METADATA_COMPLETION')         -- https://www.sqlskills.com/help/waits/SE_REPL_METADATA_COMPLETION
              ,(N'#',N'SE_REPL_PARTIAL_XACT_DRAIN_ACK')      -- https://www.sqlskills.com/help/waits/SE_REPL_PARTIAL_XACT_DRAIN_ACK
              ,(N'#',N'SE_REPL_PARTITION_EVENT')             -- https://www.sqlskills.com/help/waits/SE_REPL_PARTITION_EVENT
              ,(N'#',N'SE_REPL_PARTITION_SARTUP_EVENT')      -- https://www.sqlskills.com/help/waits/SE_REPL_PARTITION_SARTUP_EVENT
              ,(N'#',N'SE_REPL_PARTITION_WAITING_QUEUE')     -- https://www.sqlskills.com/help/waits/SE_REPL_PARTITION_WAITING_QUEUE
              ,(N'#',N'SE_REPL_QUEUE')                       -- https://www.sqlskills.com/help/waits/SE_REPL_QUEUE
              ,(N'#',N'SE_REPL_QUEUE_LOG_THROTTLE_LIST')     -- https://www.sqlskills.com/help/waits/SE_REPL_QUEUE_LOG_THROTTLE_LIST
              ,(N'#',N'SE_REPL_QUEUE_LOG_TRUNCATION')        -- https://www.sqlskills.com/help/waits/SE_REPL_QUEUE_LOG_TRUNCATION
              ,(N'#',N'SE_REPL_QUEUE_THROTTLING')            -- https://www.sqlskills.com/help/waits/SE_REPL_QUEUE_THROTTLING
              ,(N'#',N'SE_REPL_QUEUE_TRUNCATE')              -- https://www.sqlskills.com/help/waits/SE_REPL_QUEUE_TRUNCATE
              ,(N'#',N'SE_REPL_QUEUE_XACT_ACK')              -- https://www.sqlskills.com/help/waits/SE_REPL_QUEUE_XACT_ACK
              ,(N'#',N'SE_REPL_ROLLBACK_ACK')                -- https://www.sqlskills.com/help/waits/SE_REPL_ROLLBACK_ACK
              ,(N'#',N'SE_REPL_ROWSET_METADATA')             -- https://www.sqlskills.com/help/waits/SE_REPL_ROWSET_METADATA
              ,(N'#',N'SE_REPL_SCHEMA_SCOPE_CLEANUP')        -- https://www.sqlskills.com/help/waits/SE_REPL_SCHEMA_SCOPE_CLEANUP
              ,(N'#',N'SE_REPL_SECONDARY_CATCHUP_COMPLETE')  -- https://www.sqlskills.com/help/waits/SE_REPL_SECONDARY_CATCHUP_COMPLETE
              ,(N'#',N'SE_REPL_SECONDARY_CATCHUP_YIELD')     -- https://www.sqlskills.com/help/waits/SE_REPL_SECONDARY_CATCHUP_YIELD
              ,(N'#',N'SE_REPL_SECONDARY_CLOSED')            -- https://www.sqlskills.com/help/waits/SE_REPL_SECONDARY_CLOSED
              ,(N'#',N'SE_REPL_SECONDARY_XACT')              -- https://www.sqlskills.com/help/waits/SE_REPL_SECONDARY_XACT
              ,(N'#',N'SE_REPL_SECONDARY_XACT_REMOTE_KILL')  -- https://www.sqlskills.com/help/waits/SE_REPL_SECONDARY_XACT_REMOTE_KILL
              ,(N'#',N'SE_REPL_SLOW_SECONDARY_THROTTLE')     -- https://www.sqlskills.com/help/waits/SE_REPL_SLOW_SECONDARY_THROTTLE
              ,(N'#',N'SE_REPL_SPECIFIC_SECONDARY_FLUSH')    -- https://www.sqlskills.com/help/waits/SE_REPL_SPECIFIC_SECONDARY_FLUSH
              ,(N'#',N'SE_REPL_WAIT_FOR_ENOUGH_SECONDARIES') -- https://www.sqlskills.com/help/waits/SE_REPL_WAIT_FOR_ENOUGH_SECONDARIES
              ,(N'#',N'SE_REPL_WAIT_PRIMARY_FAILURE')        -- https://www.sqlskills.com/help/waits/SE_REPL_WAIT_PRIMARY_FAILURE
              ,(N'#',N'SE_REPL_WORKER_POOL_MGMT')            -- https://www.sqlskills.com/help/waits/SE_REPL_WORKER_POOL_MGMT

       -- Ignorable waits from Paul Randall
               -- When running for USERS ONLY - these wait types are almost 100% never a problem and so they are
               -- filtered out to avoid them skewing the results.-- Click on the URL for more information.
              ,(N'&',N'BROKER_EVENTHANDLER')                 -- https://www.sqlskills.com/help/waits/BROKER_EVENTHANDLER
              ,(N'&',N'BROKER_RECEIVE_WAITFOR')              -- https://www.sqlskills.com/help/waits/BROKER_RECEIVE_WAITFOR
              ,(N'&',N'BROKER_TASK_STOP')                    -- https://www.sqlskills.com/help/waits/BROKER_TASK_STOP
              ,(N'&',N'BROKER_TO_FLUSH')                     -- https://www.sqlskills.com/help/waits/BROKER_TO_FLUSH
              ,(N'&',N'BROKER_TRANSMITTER')                  -- https://www.sqlskills.com/help/waits/BROKER_TRANSMITTER
              ,(N'&',N'CHECKPOINT_QUEUE')                    -- https://www.sqlskills.com/help/waits/CHECKPOINT_QUEUE
              ,(N'&',N'CHKPT')                               -- https://www.sqlskills.com/help/waits/CHKPT
              ,(N'&',N'CLR_AUTO_EVENT')                      -- https://www.sqlskills.com/help/waits/CLR_AUTO_EVENT
              ,(N'&',N'CLR_MANUAL_EVENT')                    -- https://www.sqlskills.com/help/waits/CLR_MANUAL_EVENT
              ,(N'&',N'CLR_SEMAPHORE')                       -- https://www.sqlskills.com/help/waits/CLR_SEMAPHORE

               -- Maybe comment this out if you have parallelism issues
              ,(N'&',N'CXCONSUMER')                          -- https://www.sqlskills.com/help/waits/CXCONSUMER

               -- Maybe comment these four out if you have mirroring issues
              ,(N'&',N'DBMIRROR_DBM_EVENT')                  -- https://www.sqlskills.com/help/waits/DBMIRROR_DBM_EVENT
              ,(N'&',N'DBMIRROR_EVENTS_QUEUE')               -- https://www.sqlskills.com/help/waits/DBMIRROR_EVENTS_QUEUE
              ,(N'&',N'DBMIRROR_WORKER_QUEUE')               -- https://www.sqlskills.com/help/waits/DBMIRROR_WORKER_QUEUE
              ,(N'&',N'DBMIRRORING_CMD')                     -- https://www.sqlskills.com/help/waits/DBMIRRORING_CMD

              ,(N'&',N'DIRTY_PAGE_POLL')                     -- https://www.sqlskills.com/help/waits/DIRTY_PAGE_POLL
              ,(N'&',N'DISPATCHER_QUEUE_SEMAPHORE')          -- https://www.sqlskills.com/help/waits/DISPATCHER_QUEUE_SEMAPHORE
              ,(N'&',N'EXECSYNC')                            -- https://www.sqlskills.com/help/waits/EXECSYNC
              ,(N'&',N'FSAGENT')                             -- https://www.sqlskills.com/help/waits/FSAGENT
              ,(N'&',N'FT_IFTS_SCHEDULER_IDLE_WAIT')         -- https://www.sqlskills.com/help/waits/FT_IFTS_SCHEDULER_IDLE_WAIT
              ,(N'&',N'FT_IFTSHC_MUTEX')                     -- https://www.sqlskills.com/help/waits/FT_IFTSHC_MUTEX

              -- Maybe comment these six out if you have AG issues
              ,(N'&',N'HADR_CLUSAPI_CALL')                   -- https://www.sqlskills.com/help/waits/HADR_CLUSAPI_CALL
              ,(N'&',N'HADR_FILESTREAM_IOMGR_IOCOMPLETION')  -- https://www.sqlskills.com/help/waits/HADR_FILESTREAM_IOMGR_IOCOMPLETION
              ,(N'&',N'HADR_LOGCAPTURE_WAIT')                -- https://www.sqlskills.com/help/waits/HADR_LOGCAPTURE_WAIT
              ,(N'&',N'HADR_NOTIFICATION_DEQUEUE')           -- https://www.sqlskills.com/help/waits/HADR_NOTIFICATION_DEQUEUE
              ,(N'&',N'HADR_TIMER_TASK')                     -- https://www.sqlskills.com/help/waits/HADR_TIMER_TASK
              ,(N'&',N'HADR_WORK_QUEUE')                     -- https://www.sqlskills.com/help/waits/HADR_WORK_QUEUE

              ,(N'&',N'KSOURCE_WAKEUP')                      -- https://www.sqlskills.com/help/waits/KSOURCE_WAKEUP
              ,(N'&',N'LAZYWRITER_SLEEP')                    -- https://www.sqlskills.com/help/waits/LAZYWRITER_SLEEP
              ,(N'&',N'LOGMGR_QUEUE')                        -- https://www.sqlskills.com/help/waits/LOGMGR_QUEUE
              ,(N'&',N'MEMORY_ALLOCATION_EXT')               -- https://www.sqlskills.com/help/waits/MEMORY_ALLOCATION_EXT
              ,(N'&',N'MISCELLANEOUS')                       -- https://www.sqlskills.com/help/waits/MISCELLANEOUS
              ,(N'&',N'ONDEMAND_TASK_QUEUE')                 -- https://www.sqlskills.com/help/waits/ONDEMAND_TASK_QUEUE
              ,(N'&',N'PARALLEL_REDO_DRAIN_WORKER')          -- https://www.sqlskills.com/help/waits/PARALLEL_REDO_DRAIN_WORKER
              ,(N'&',N'PARALLEL_REDO_LOG_CACHE')             -- https://www.sqlskills.com/help/waits/PARALLEL_REDO_LOG_CACHE
              ,(N'&',N'PARALLEL_REDO_TRAN_LIST')             -- https://www.sqlskills.com/help/waits/PARALLEL_REDO_TRAN_LIST
              ,(N'&',N'PARALLEL_REDO_WORKER_SYNC')           -- https://www.sqlskills.com/help/waits/PARALLEL_REDO_WORKER_SYNC
              ,(N'&',N'PARALLEL_REDO_WORKER_WAIT_WORK')      -- https://www.sqlskills.com/help/waits/PARALLEL_REDO_WORKER_WAIT_WORK
              ,(N'&',N'PREEMPTIVE_HADR_LEASE_MECHANISM')     -- https://www.sqlskills.com/help/waits/PREEMPTIVE_HADR_LEASE_MECHANISM
              ,(N'&',N'PREEMPTIVE_OS_AUTHENTICATIONOPS')     -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_AUTHENTICATIONOPS
              ,(N'&',N'PREEMPTIVE_OS_AUTHORIZATIONOPS')      -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_AUTHORIZATIONOPS
              ,(N'&',N'PREEMPTIVE_OS_COMOPS')                -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_COMOPS
              ,(N'&',N'PREEMPTIVE_OS_CREATEFILE')            -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_CREATEFILE
              ,(N'&',N'PREEMPTIVE_OS_CRYPTOPS')              -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_CRYPTOPS
              ,(N'&',N'PREEMPTIVE_OS_DEVICEOPS')             -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_DEVICEOPS
              ,(N'&',N'PREEMPTIVE_OS_FILEOPS')               -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_FILEOPS
              ,(N'&',N'PREEMPTIVE_OS_FLUSHFILEBUFFERS')      -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_FLUSHFILEBUFFERS
              ,(N'&',N'PREEMPTIVE_OS_GENERICOPS')            -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_GENERICOPS
              ,(N'&',N'PREEMPTIVE_OS_LIBRARYOPS')            -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_LIBRARYOPS
              ,(N'&',N'PREEMPTIVE_OS_PIPEOPS')               -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_PIPEOPS
              ,(N'&',N'PREEMPTIVE_OS_QUERYREGISTRY')         -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_QUERYREGISTRY
              ,(N'&',N'PREEMPTIVE_OS_VERIFYTRUST')           -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_VERIFYTRUST
              ,(N'&',N'PREEMPTIVE_OS_WAITFORSINGLEOBJECT')   -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_WAITFORSINGLEOBJECT
              ,(N'&',N'PREEMPTIVE_OS_WRITEFILEGATHER')       -- https://www.sqlskills.com/help/waits/PREEMPTIVE_OS_WRITEFILEGATHER
              ,(N'&',N'PREEMPTIVE_SP_SERVER_DIAGNOSTICS')    -- https://www.sqlskills.com/help/waits/PREEMPTIVE_SP_SERVER_DIAGNOSTICS
              ,(N'&',N'PREEMPTIVE_XE_GETTARGETSTATE')        -- https://www.sqlskills.com/help/waits/PREEMPTIVE_XE_GETTARGETSTATE
              ,(N'&',N'PVS_PREALLOCATE')                     -- https://www.sqlskills.com/help/waits/PVS_PREALLOCATE
              ,(N'&',N'PWAIT_ALL_COMPONENTS_INITIALIZED')    -- https://www.sqlskills.com/help/waits/PWAIT_ALL_COMPONENTS_INITIALIZED
              ,(N'&',N'PWAIT_DIRECTLOGCONSUMER_GETNEXT')     -- https://www.sqlskills.com/help/waits/PWAIT_DIRECTLOGCONSUMER_GETNEXT
              ,(N'&',N'PWAIT_EXTENSIBILITY_CLEANUP_TASK')    -- https://www.sqlskills.com/help/waits/PWAIT_EXTENSIBILITY_CLEANUP_TASK
              ,(N'&',N'QDS_ASYNC_QUEUE')                     -- https://www.sqlskills.com/help/waits/QDS_ASYNC_QUEUE
              ,(N'&',N'QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP') -- https://www.sqlskills.com/help/waits/QDS_CLEANUP_STALE_QUERIES_TASK_MAIN_LOOP_SLEEP
              ,(N'&',N'QDS_PERSIST_TASK_MAIN_LOOP_SLEEP')    -- https://www.sqlskills.com/help/waits/QDS_PERSIST_TASK_MAIN_LOOP_SLEEP
              ,(N'&',N'QDS_SHUTDOWN_QUEUE')                  -- https://www.sqlskills.com/help/waits/QDS_SHUTDOWN_QUEUE
              ,(N'&',N'REDO_THREAD_PENDING_WORK')            -- https://www.sqlskills.com/help/waits/REDO_THREAD_PENDING_WORK
              ,(N'&',N'REQUEST_FOR_DEADLOCK_SEARCH')         -- https://www.sqlskills.com/help/waits/REQUEST_FOR_DEADLOCK_SEARCH
              ,(N'&',N'RESOURCE_QUEUE')                      -- https://www.sqlskills.com/help/waits/RESOURCE_QUEUE
              ,(N'&',N'SERVER_IDLE_CHECK')                   -- https://www.sqlskills.com/help/waits/SERVER_IDLE_CHECK
              ,(N'&',N'SLEEP_BPOOL_FLUSH')                   -- https://www.sqlskills.com/help/waits/SLEEP_BPOOL_FLUSH
              ,(N'&',N'SLEEP_DBSTARTUP')                     -- https://www.sqlskills.com/help/waits/SLEEP_DBSTARTUP
              ,(N'&',N'SLEEP_DCOMSTARTUP')                   -- https://www.sqlskills.com/help/waits/SLEEP_DCOMSTARTUP
              ,(N'&',N'SLEEP_MASTERDBREADY')                 -- https://www.sqlskills.com/help/waits/SLEEP_MASTERDBREADY
              ,(N'&',N'SLEEP_MASTERMDREADY')                 -- https://www.sqlskills.com/help/waits/SLEEP_MASTERMDREADY
              ,(N'&',N'SLEEP_MASTERUPGRADED')                -- https://www.sqlskills.com/help/waits/SLEEP_MASTERUPGRADED
              ,(N'&',N'SLEEP_MSDBSTARTUP')                   -- https://www.sqlskills.com/help/waits/SLEEP_MSDBSTARTUP
              ,(N'&',N'SLEEP_SYSTEMTASK')                    -- https://www.sqlskills.com/help/waits/SLEEP_SYSTEMTASK
              ,(N'&',N'SLEEP_TASK')                          -- https://www.sqlskills.com/help/waits/SLEEP_TASK
              ,(N'&',N'SLEEP_TEMPDBSTARTUP')                 -- https://www.sqlskills.com/help/waits/SLEEP_TEMPDBSTARTUP
              ,(N'&',N'SNI_HTTP_ACCEPT')                     -- https://www.sqlskills.com/help/waits/SNI_HTTP_ACCEPT
              ,(N'&',N'SOS_WORK_DISPATCHER')                 -- https://www.sqlskills.com/help/waits/SOS_WORK_DISPATCHER
              ,(N'&',N'SP_SERVER_DIAGNOSTICS_SLEEP')         -- https://www.sqlskills.com/help/waits/SP_SERVER_DIAGNOSTICS_SLEEP
              ,(N'&',N'SQLTRACE_BUFFER_FLUSH')               -- https://www.sqlskills.com/help/waits/SQLTRACE_BUFFER_FLUSH
              ,(N'&',N'SQLTRACE_INCREMENTAL_FLUSH_SLEEP')    -- https://www.sqlskills.com/help/waits/SQLTRACE_INCREMENTAL_FLUSH_SLEEP
              ,(N'&',N'SQLTRACE_WAIT_ENTRIES')               -- https://www.sqlskills.com/help/waits/SQLTRACE_WAIT_ENTRIES
              ,(N'&',N'VDI_CLIENT_OTHER')                    -- https://www.sqlskills.com/help/waits/VDI_CLIENT_OTHER
              ,(N'&',N'WAIT_FOR_RESULTS')                    -- https://www.sqlskills.com/help/waits/WAIT_FOR_RESULTS
              ,(N'&',N'WAITFOR')                             -- https://www.sqlskills.com/help/waits/WAITFOR
              ,(N'&',N'WAITFOR_TASKSHUTDOWN')                -- https://www.sqlskills.com/help/waits/WAITFOR_TASKSHUTDOWN
              ,(N'&',N'WAIT_XTP_RECOVERY')                   -- https://www.sqlskills.com/help/waits/WAIT_XTP_RECOVERY
              ,(N'&',N'WAIT_XTP_HOST_WAIT')                  -- https://www.sqlskills.com/help/waits/WAIT_XTP_HOST_WAIT
              ,(N'&',N'WAIT_XTP_OFFLINE_CKPT_NEW_LOG')       -- https://www.sqlskills.com/help/waits/WAIT_XTP_OFFLINE_CKPT_NEW_LOG
              ,(N'&',N'WAIT_XTP_CKPT_CLOSE')                 -- https://www.sqlskills.com/help/waits/WAIT_XTP_CKPT_CLOSE
              ,(N'&',N'XE_DISPATCHER_JOIN')                  -- https://www.sqlskills.com/help/waits/XE_DISPATCHER_JOIN
              ,(N'&',N'XE_DISPATCHER_WAIT')                  -- https://www.sqlskills.com/help/waits/XE_DISPATCHER_WAIT
              ,(N'&',N'XE_TIMER_EVENT')                      -- https://www.sqlskills.com/help/waits/XE_TIMER_EVENT

       -- Ignorable waits from Pinal Dave
              ,(N'&',N'UCS_SESSION_REGISTRATION')            -- https://www.sqlskills.com/help/waits/UCS_SESSION_REGISTRATION
              ,(N'&',N'XE_LIVE_TARGET_TVF')                  -- https://www.sqlskills.com/help/waits/XE_LIVE_TARGET_TVF

       -- Ignorable waits from Pedro Lopes
              ,(N'&',N'SOSHOST_SLEEP')                       -- https://www.sqlskills.com/help/waits/SOSHOST_SLEEP
              ,(N'&',N'SP_PREEMPTIVE_SERVER_DIAGNOSTICS_SLEEP')
                                                             -- https://www.sqlskills.com/help/waits/SP_PREEMPTIVE_SERVER_DIAGNOSTICS_SLEEP

       -- Worrying waits from Paul Randall @ https://www.sqlskills.com/blogs/paul/worrying-wait-type/
              ,(N'!',N'ASYNC_NETWORK_IO')                    -- https://www.sqlskills.com/help/waits/ASYNC_NETWORK_IO
              ,(N'!',N'CXPACKET')                            -- https://www.sqlskills.com/help/waits/CXPACKET
              ,(N'!',N'LCK_M_IX')                            -- https://www.sqlskills.com/help/waits/LCK_M_IX
              ,(N'!',N'LCK_M_X')                             -- https://www.sqlskills.com/help/waits/LCK_M_X
              ,(N'!',N'PAGEIOLATCH_SH')                      -- https://www.sqlskills.com/help/waits/PAGEIOLATCH_SH
              ,(N'!',N'PAGELATCH_EX')                        -- https://www.sqlskills.com/help/waits/PAGELATCH_EX
              ,(N'!',N'SOS_SCHEDULER_YIELD')                 -- https://www.sqlskills.com/help/waits/SOS_SCHEDULER_YIELD
              ,(N'!',N'WRITELOG')                            -- https://www.sqlskills.com/help/waits/WRITELOG

       -- Top waits from Aaron Bertrand @ https://sqlperformance.com/2018/10/sql-performance/top-wait-stats not in lists above
              ,(N'!',N'LCK_M_U')                             -- https://www.sqlskills.com/help/waits/LCK_M_U
              ,(N'!',N'LATCH_EX')                            -- https://www.sqlskills.com/help/waits/LATCH_EX
              ,(N'!',N'LCK_M_S')                             -- https://www.sqlskills.com/help/waits/LCK_M_S

       -- Top waits from Microsoft
       -- https://learn.microsoft.com/en-us/troubleshoot/sql/database-engine/performance/troubleshoot-sql-io-performance
       -- not in lists above
              ,(N'!',N'PAGEIOLATCH_UP')                      -- https://www.sqlskills.com/help/waits/PAGEIOLATCH_UP
              ) AS w(special_type,wait_type)

            ON s.wait_type = w.wait_type
         WHERE s.wait_time_ms        > 0
            OR s.waiting_tasks_count > 0
         UNION ALL SELECT N'[#] Poison Wait - - - - - - - - - - - - - - - - -',NULL,NULL,NULL
         UNION ALL SELECT N'[!] Worrying Wait - - - - - - - - - - - - - - - -',NULL,NULL,NULL
         UNION ALL SELECT N'[&] Ignorable Wait  - - - - - - - - - - - - - - -',NULL,NULL,NULL
         UNION ALL SELECT N'- - Ordinary Wait - - - - - - - - - - - - - - - -',NULL,NULL,NULL
       ) as s
);
GO

/*########################################################################################################################################*\
Next Steps:
- review for MIX<>FKC coverage & synergies. make sure there is no redundant code
\*########################################################################################################################################*/

/*########################################################################################################################################*\
LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING LOCAL TESTING
\*##########################################################################################################################################
EXEC [##SQLXL_Index] @database_name = N'*'                  -- runs for ALL databases
EXEC [##SQLXL_Index]                                        -- runs for ALL USER databases
EXEC [##SQLXL_Index] @database_name = N'tempdb'             -- runs for a SINGLE database
EXEC [##SQLXL_Index] @database_name = N'Elvis'              -- runs for a SINGLE database

EXEC [##SQLXL_Index] @database_name = N'WideWorldImporters' -- runs for a SINGLE database

-- For testing the export to text file feature:
SQLCMD -Q "EXEC [##SQLXL_Index_Present]" -s"^" -y 0 -a 8000 -o "D:\TEMP\out.txt" -S HV10-SQL2022 -d "tempdb" -U "demo" -P "demo"
SQLCMD -Q "EXEC [##SQLXL_Index_Present]" -s"^" -y 0 -a 8000 -o "D:\TEMP\out.txt" -S denali -d "master"

SQLCMD Parameters used:
--------------------------------------------------------------------------------------------------------------------------------------------
-Q = SQL command to execute                - "EXEC [##SQLXL_Index_Present]"
-s = column delimiter                      - ASCII CHAR(094) is used to avoid collisions "^"
-y = variable length type display width    - 0 = ALL
-a = network packet size                   - 8000 bytes
-o = output file and destination directory - "D:\TEMP\out.txt"
-d = SQL database to connect to (if not the user default) - "WideWorldImporters"
-U = User ID if not windows authentication
-P = User password if not windows authentication
--*/

--<BS>
--EXEC [##SQLXL_Index] @database_name = N'SQLXL_Index_Demo' -- runs for a SINGLE database
--EXEC [##SQLXL_Index] @database_name = N'WideWorldImporters' -- runs for a SINGLE database

/******************************************************************************************************************************************\
############################################################################################################################################
 END SQLXL_INDEX Testing
############################################################################################################################################
\******************************************************************************************************************************************/
